
TEST_IMU_10DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cd8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08007e78  08007e78  00017e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008068  08008068  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008068  08008068  00018068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008070  08008070  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008070  08008070  00018070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008074  08008074  00018074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000070  080080e8  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  080080e8  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4f5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e31  00000000  00000000  0002d595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002f3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  0002fe80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017591  00000000  00000000  00030888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e74d  00000000  00000000  00047e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ac41  00000000  00000000  00056566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e11a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037e4  00000000  00000000  000e11f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007e60 	.word	0x08007e60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08007e60 	.word	0x08007e60

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <Init>:
  * \fn Init(I2C_HandleTypeDef* p_hi2c1)
  * \brief Cette fonction met à 1 le bit 7 de PWR_MGMT pour faire un reset puis attend
	 * 100ms et choisit une horlorge
	 * \param p_hi2c1
	 */
void Init(I2C_HandleTypeDef* p_hi2c1){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af04      	add	r7, sp, #16
 8000eb2:	6078      	str	r0, [r7, #4]

	uint8_t buff[6];
	buff[0] = 0x80;
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	723b      	strb	r3, [r7, #8]
	//Reset the internal registers and restores the default settings
	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD, PWR_MGMT_1,  1, &buff[0], 1, 10);
 8000eb8:	230a      	movs	r3, #10
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	226b      	movs	r2, #107	; 0x6b
 8000eca:	21d0      	movs	r1, #208	; 0xd0
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f001 fcd5 	bl	800287c <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8000ed2:	2064      	movs	r0, #100	; 0x64
 8000ed4:	f001 f81a 	bl	8001f0c <HAL_Delay>
	buff[0] = 0x1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	723b      	strb	r3, [r7, #8]
	//Auto selects the best available clock source – PLL if ready, else use the Internal oscillator
	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD, PWR_MGMT_1,  1, &buff[0], 1, 10);
 8000edc:	230a      	movs	r3, #10
 8000ede:	9302      	str	r3, [sp, #8]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	f107 0308 	add.w	r3, r7, #8
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2301      	movs	r3, #1
 8000eec:	226b      	movs	r2, #107	; 0x6b
 8000eee:	21d0      	movs	r1, #208	; 0xd0
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f001 fcc3 	bl	800287c <HAL_I2C_Mem_Write>


	buff[0] =0b0011;  // changement de la sensibilité de l'accélérometre  00=2g 10=4g 01=8g 11=16g
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	723b      	strb	r3, [r7, #8]
		HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD,  ACCEL_CONFIG,  1, &buff[0], 1, 10);
 8000efa:	230a      	movs	r3, #10
 8000efc:	9302      	str	r3, [sp, #8]
 8000efe:	2301      	movs	r3, #1
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	221c      	movs	r2, #28
 8000f0c:	21d0      	movs	r1, #208	; 0xd0
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f001 fcb4 	bl	800287c <HAL_I2C_Mem_Write>


	buff[0]=0x2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	723b      	strb	r3, [r7, #8]
	//When asserted, the i2c_master interface pins(ES_CL and ES_DA) will go into ‘bypass mode’ when the i2c master interface is disabled.
	//The pins will float high due to the internal pull-up if not enabled and the i2c master interface is disabled.
		  if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,INT_PIN_CFG,1,&buff[0],1,10)!=HAL_OK){
 8000f18:	230a      	movs	r3, #10
 8000f1a:	9302      	str	r3, [sp, #8]
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2301      	movs	r3, #1
 8000f28:	2237      	movs	r2, #55	; 0x37
 8000f2a:	21d0      	movs	r1, #208	; 0xd0
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f001 fca5 	bl	800287c <HAL_I2C_Mem_Write>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d004      	beq.n	8000f42 <Init+0x96>
			  printf("erreur d'initialisation INT_PIN_CFG \r\n");
 8000f38:	4823      	ldr	r0, [pc, #140]	; (8000fc8 <Init+0x11c>)
 8000f3a:	f005 fd59 	bl	80069f0 <puts>
		  	  Error_Handler();
 8000f3e:	f000 fd41 	bl	80019c4 <Error_Handler>
		  }

	buff[0]=0x16; //continuous measurement mode 2 ; 16-bit output
 8000f42:	2316      	movs	r3, #22
 8000f44:	723b      	strb	r3, [r7, #8]
		 	  if(HAL_I2C_Mem_Write(p_hi2c1,MAGNETO_ADD,AK8963_CNTL,1,&buff[0],1,10)!=HAL_OK){
 8000f46:	230a      	movs	r3, #10
 8000f48:	9302      	str	r3, [sp, #8]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	9301      	str	r3, [sp, #4]
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2301      	movs	r3, #1
 8000f56:	220a      	movs	r2, #10
 8000f58:	2118      	movs	r1, #24
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f001 fc8e 	bl	800287c <HAL_I2C_Mem_Write>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d004      	beq.n	8000f70 <Init+0xc4>
		 		  printf("erreur d'initialisation magnetometre \r\n");
 8000f66:	4819      	ldr	r0, [pc, #100]	; (8000fcc <Init+0x120>)
 8000f68:	f005 fd42 	bl	80069f0 <puts>
		 	  	  Error_Handler();
 8000f6c:	f000 fd2a 	bl	80019c4 <Error_Handler>
		 	  }

	buff[0]=0x3;
 8000f70:	2303      	movs	r3, #3
 8000f72:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,CONFIG,1,buff,1,10)!=HAL_OK){
 8000f74:	230a      	movs	r3, #10
 8000f76:	9302      	str	r3, [sp, #8]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	f107 0308 	add.w	r3, r7, #8
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2301      	movs	r3, #1
 8000f84:	221a      	movs	r2, #26
 8000f86:	21d0      	movs	r1, #208	; 0xd0
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f001 fc77 	bl	800287c <HAL_I2C_Mem_Write>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <Init+0xec>
		Error_Handler();
 8000f94:	f000 fd16 	bl	80019c4 <Error_Handler>
	}

	buff[0]=0xFF;
 8000f98:	23ff      	movs	r3, #255	; 0xff
 8000f9a:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,SMPLRT_DIV,1,buff,1,10)!=HAL_OK){
 8000f9c:	230a      	movs	r3, #10
 8000f9e:	9302      	str	r3, [sp, #8]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	2219      	movs	r2, #25
 8000fae:	21d0      	movs	r1, #208	; 0xd0
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f001 fc63 	bl	800287c <HAL_I2C_Mem_Write>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <Init+0x114>
		Error_Handler();
 8000fbc:	f000 fd02 	bl	80019c4 <Error_Handler>

	}
}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	08007e78 	.word	0x08007e78
 8000fcc:	08007ea0 	.word	0x08007ea0

08000fd0 <Measure_T>:
 *  \brief Cette fonction récupère les données de température et les transforme en
	 une valeur décimale
		 * \param p_hi2c1
		 * \param theta
		 */
void Measure_T(I2C_HandleTypeDef* p_hi2c1,double* theta){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af04      	add	r7, sp, #16
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]

	uint8_t buff[2];
	int16_t Temp;
	if ( HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD, TEMP_OUT_H, 1, buff, 2, 10) == HAL_OK ){
 8000fda:	230a      	movs	r3, #10
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	2302      	movs	r3, #2
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	2241      	movs	r2, #65	; 0x41
 8000fec:	21d0      	movs	r1, #208	; 0xd0
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f001 fd3e 	bl	8002a70 <HAL_I2C_Mem_Read>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d121      	bne.n	800103e <Measure_T+0x6e>
		Temp = 256*buff[0] + buff[1];
 8000ffa:	7b3b      	ldrb	r3, [r7, #12]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	b29a      	uxth	r2, r3
 8001002:	7b7b      	ldrb	r3, [r7, #13]
 8001004:	b29b      	uxth	r3, r3
 8001006:	4413      	add	r3, r2
 8001008:	b29b      	uxth	r3, r3
 800100a:	81fb      	strh	r3, [r7, #14]
		*theta = ( Temp - 21 )/333.87 + 12;
 800100c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001010:	3b15      	subs	r3, #21
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fa86 	bl	8000524 <__aeabi_i2d>
 8001018:	a30c      	add	r3, pc, #48	; (adr r3, 800104c <Measure_T+0x7c>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff fc15 	bl	800084c <__aeabi_ddiv>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <Measure_T+0x78>)
 8001030:	f7ff f92c 	bl	800028c <__adddf3>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	6839      	ldr	r1, [r7, #0]
 800103a:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40280000 	.word	0x40280000
 800104c:	851eb852 	.word	0x851eb852
 8001050:	4074ddeb 	.word	0x4074ddeb
 8001054:	00000000 	.word	0x00000000

08001058 <Measure_A>:
 * \brief Cette fonction récupére les données d'accélération et les transforme en
	 une valeur décimale
	 * \param p_hi2c1
	 * \param accel
	 */
void Measure_A(I2C_HandleTypeDef* p_hi2c1,TypeDataCansat *pDataCansat){
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b093      	sub	sp, #76	; 0x4c
 800105c:	af04      	add	r7, sp, #16
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
	uint8_t sens[1];
	uint16_t x;
	uint16_t y;
	uint16_t z;
	uint16_t s;
	if((HAL_I2C_Mem_Read(p_hi2c1, MPU_ADD, ACCEL_XOUT_H, 1, buff, 6, 10)==HAL_OK) &
 8001062:	230a      	movs	r3, #10
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2306      	movs	r3, #6
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2301      	movs	r3, #1
 8001072:	223b      	movs	r2, #59	; 0x3b
 8001074:	21d0      	movs	r1, #208	; 0xd0
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f001 fcfa 	bl	8002a70 <HAL_I2C_Mem_Read>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	bf0c      	ite	eq
 8001082:	2301      	moveq	r3, #1
 8001084:	2300      	movne	r3, #0
 8001086:	b2dc      	uxtb	r4, r3
			(HAL_I2C_Mem_Read(p_hi2c1, MPU_ADD, ACCEL_CONFIG, 1, sens, 1, 10)==HAL_OK)){
 8001088:	230a      	movs	r3, #10
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	2301      	movs	r3, #1
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2301      	movs	r3, #1
 8001098:	221c      	movs	r2, #28
 800109a:	21d0      	movs	r1, #208	; 0xd0
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f001 fce7 	bl	8002a70 <HAL_I2C_Mem_Read>
 80010a2:	4603      	mov	r3, r0
	if((HAL_I2C_Mem_Read(p_hi2c1, MPU_ADD, ACCEL_XOUT_H, 1, buff, 6, 10)==HAL_OK) &
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bf0c      	ite	eq
 80010a8:	2301      	moveq	r3, #1
 80010aa:	2300      	movne	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	4023      	ands	r3, r4
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 8093 	beq.w	80011de <Measure_A+0x186>

		sens[0] = ((sens[0])&(0b11000))>>3;
 80010b8:	7b3b      	ldrb	r3, [r7, #12]
 80010ba:	10db      	asrs	r3, r3, #3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	733b      	strb	r3, [r7, #12]

		if(sens[0]==00){
 80010c6:	7b3b      	ldrb	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <Measure_A+0x7a>
			s =2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	86fb      	strh	r3, [r7, #54]	; 0x36
 80010d0:	e00d      	b.n	80010ee <Measure_A+0x96>
		}
		else if(sens[0]==10){
 80010d2:	7b3b      	ldrb	r3, [r7, #12]
 80010d4:	2b0a      	cmp	r3, #10
 80010d6:	d102      	bne.n	80010de <Measure_A+0x86>
			s =4;
 80010d8:	2304      	movs	r3, #4
 80010da:	86fb      	strh	r3, [r7, #54]	; 0x36
 80010dc:	e007      	b.n	80010ee <Measure_A+0x96>
		}
		else if(sens[0]==01){
 80010de:	7b3b      	ldrb	r3, [r7, #12]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d102      	bne.n	80010ea <Measure_A+0x92>
			s =8;
 80010e4:	2308      	movs	r3, #8
 80010e6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80010e8:	e001      	b.n	80010ee <Measure_A+0x96>
		}
		else {
			s =16;
 80010ea:	2310      	movs	r3, #16
 80010ec:	86fb      	strh	r3, [r7, #54]	; 0x36
		}
		x=256*buff[0]+ buff[1];
 80010ee:	7c3b      	ldrb	r3, [r7, #16]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	7c7b      	ldrb	r3, [r7, #17]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4413      	add	r3, r2
 80010fc:	86bb      	strh	r3, [r7, #52]	; 0x34
		y=256*buff[2]+ buff[3];
 80010fe:	7cbb      	ldrb	r3, [r7, #18]
 8001100:	b29b      	uxth	r3, r3
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	b29a      	uxth	r2, r3
 8001106:	7cfb      	ldrb	r3, [r7, #19]
 8001108:	b29b      	uxth	r3, r3
 800110a:	4413      	add	r3, r2
 800110c:	867b      	strh	r3, [r7, #50]	; 0x32
		z=256*buff[4]+ buff[5];
 800110e:	7d3b      	ldrb	r3, [r7, #20]
 8001110:	b29b      	uxth	r3, r3
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b29a      	uxth	r2, r3
 8001116:	7d7b      	ldrb	r3, [r7, #21]
 8001118:	b29b      	uxth	r3, r3
 800111a:	4413      	add	r3, r2
 800111c:	863b      	strh	r3, [r7, #48]	; 0x30
		/*
		*accel=(x*s)/32767.0;
		*(accel+1)=(y*s)/32767.0;
		*(accel+2)=(z*s)/32767.0;
		*/
		double accel_x = (x*s)/32767.0;
 800111e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001120:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001122:	fb02 f303 	mul.w	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f9fc 	bl	8000524 <__aeabi_i2d>
 800112c:	a32f      	add	r3, pc, #188	; (adr r3, 80011ec <Measure_A+0x194>)
 800112e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001132:	f7ff fb8b 	bl	800084c <__aeabi_ddiv>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		double accel_y = (y*s)/32767.0;
 800113e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001140:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001142:	fb02 f303 	mul.w	r3, r2, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9ec 	bl	8000524 <__aeabi_i2d>
 800114c:	a327      	add	r3, pc, #156	; (adr r3, 80011ec <Measure_A+0x194>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff fb7b 	bl	800084c <__aeabi_ddiv>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		double accel_z = (z*s)/32767.0;
 800115e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001160:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001162:	fb02 f303 	mul.w	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f9dc 	bl	8000524 <__aeabi_i2d>
 800116c:	a31f      	add	r3, pc, #124	; (adr r3, 80011ec <Measure_A+0x194>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	f7ff fb6b 	bl	800084c <__aeabi_ddiv>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		pDataCansat->IMU.AccelerometerData.x = (int)(accel_x*1000);
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <Measure_A+0x190>)
 8001184:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001188:	f7ff fa36 	bl	80005f8 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fce0 	bl	8000b58 <__aeabi_d2iz>
 8001198:	4602      	mov	r2, r0
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	615a      	str	r2, [r3, #20]
		pDataCansat->IMU.AccelerometerData.y = (int)(accel_y*1000);
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <Measure_A+0x190>)
 80011a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011a8:	f7ff fa26 	bl	80005f8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fcd0 	bl	8000b58 <__aeabi_d2iz>
 80011b8:	4602      	mov	r2, r0
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	619a      	str	r2, [r3, #24]
		pDataCansat->IMU.AccelerometerData.z = (int)(accel_z*1000);
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <Measure_A+0x190>)
 80011c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011c8:	f7ff fa16 	bl	80005f8 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff fcc0 	bl	8000b58 <__aeabi_d2iz>
 80011d8:	4602      	mov	r2, r0
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	61da      	str	r2, [r3, #28]
	}
}
 80011de:	bf00      	nop
 80011e0:	373c      	adds	r7, #60	; 0x3c
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd90      	pop	{r4, r7, pc}
 80011e6:	bf00      	nop
 80011e8:	408f4000 	.word	0x408f4000
 80011ec:	00000000 	.word	0x00000000
 80011f0:	40dfffc0 	.word	0x40dfffc0
 80011f4:	00000000 	.word	0x00000000

080011f8 <Measure_M>:
 * \brief Cette fonction récupére les données de champ magnétique et les transforme en
	 une valeur décimale
	 * \param p_hi2c1
	 * \param  mag
	 */
void Measure_M(I2C_HandleTypeDef* p_hi2c1,double* mag){
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b08e      	sub	sp, #56	; 0x38
 80011fc:	af04      	add	r7, sp, #16
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
		uint8_t buff[6];
		uint8_t asa[3];
		uint8_t drdy[1];


		HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_ST1,1,drdy,1,20);
 8001202:	2314      	movs	r3, #20
 8001204:	9302      	str	r3, [sp, #8]
 8001206:	2301      	movs	r3, #1
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	2202      	movs	r2, #2
 8001214:	2118      	movs	r1, #24
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f001 fc2a 	bl	8002a70 <HAL_I2C_Mem_Read>
		drdy[0]=((drdy[0])&(00000001));
 800121c:	7b3b      	ldrb	r3, [r7, #12]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	b2db      	uxtb	r3, r3
 8001224:	733b      	strb	r3, [r7, #12]
		if(drdy[0]==1){
 8001226:	7b3b      	ldrb	r3, [r7, #12]
 8001228:	2b01      	cmp	r3, #1
 800122a:	f040 8113 	bne.w	8001454 <Measure_M+0x25c>

			if((HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_XOUT_L,1,buff,7,20)==HAL_OK)
 800122e:	2314      	movs	r3, #20
 8001230:	9302      	str	r3, [sp, #8]
 8001232:	2307      	movs	r3, #7
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2301      	movs	r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	2118      	movs	r1, #24
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f001 fc14 	bl	8002a70 <HAL_I2C_Mem_Read>
 8001248:	4603      	mov	r3, r0
					&(HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_ASAX,1,asa,3,20)==HAL_OK)){
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf0c      	ite	eq
 800124e:	2301      	moveq	r3, #1
 8001250:	2300      	movne	r3, #0
 8001252:	b2dc      	uxtb	r4, r3
 8001254:	2314      	movs	r3, #20
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	2303      	movs	r3, #3
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	2210      	movs	r2, #16
 8001266:	2118      	movs	r1, #24
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f001 fc01 	bl	8002a70 <HAL_I2C_Mem_Read>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	bf0c      	ite	eq
 8001274:	2301      	moveq	r3, #1
 8001276:	2300      	movne	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	4023      	ands	r3, r4
 800127c:	b2db      	uxtb	r3, r3
			if((HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_XOUT_L,1,buff,7,20)==HAL_OK)
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80e8 	beq.w	8001454 <Measure_M+0x25c>


						x=256*buff[1]+ buff[0];
 8001284:	7d7b      	ldrb	r3, [r7, #21]
 8001286:	b29b      	uxth	r3, r3
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b29a      	uxth	r2, r3
 800128c:	7d3b      	ldrb	r3, [r7, #20]
 800128e:	b29b      	uxth	r3, r3
 8001290:	4413      	add	r3, r2
 8001292:	b29b      	uxth	r3, r3
 8001294:	84fb      	strh	r3, [r7, #38]	; 0x26
						y=256*buff[3]+ buff[2];
 8001296:	7dfb      	ldrb	r3, [r7, #23]
 8001298:	b29b      	uxth	r3, r3
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	b29a      	uxth	r2, r3
 800129e:	7dbb      	ldrb	r3, [r7, #22]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	4413      	add	r3, r2
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	84bb      	strh	r3, [r7, #36]	; 0x24
						z=256*buff[5]+ buff[4];
 80012a8:	7e7b      	ldrb	r3, [r7, #25]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	7e3b      	ldrb	r3, [r7, #24]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	4413      	add	r3, r2
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	847b      	strh	r3, [r7, #34]	; 0x22
						asax=asa[0];
 80012ba:	7c3b      	ldrb	r3, [r7, #16]
 80012bc:	843b      	strh	r3, [r7, #32]
						asay=asa[1];
 80012be:	7c7b      	ldrb	r3, [r7, #17]
 80012c0:	83fb      	strh	r3, [r7, #30]
						asaz=asa[2];
 80012c2:	7cbb      	ldrb	r3, [r7, #18]
 80012c4:	83bb      	strh	r3, [r7, #28]
						*mag=(x*((((asax-128)*0.5)/128)+1)*4912)/32760;
 80012c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f92a 	bl	8000524 <__aeabi_i2d>
 80012d0:	4604      	mov	r4, r0
 80012d2:	460d      	mov	r5, r1
 80012d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80012d8:	3b80      	subs	r3, #128	; 0x80
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f922 	bl	8000524 <__aeabi_i2d>
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	4b62      	ldr	r3, [pc, #392]	; (8001470 <Measure_M+0x278>)
 80012e6:	f7ff f987 	bl	80005f8 <__aeabi_dmul>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	4b5f      	ldr	r3, [pc, #380]	; (8001474 <Measure_M+0x27c>)
 80012f8:	f7ff faa8 	bl	800084c <__aeabi_ddiv>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4b5b      	ldr	r3, [pc, #364]	; (8001478 <Measure_M+0x280>)
 800130a:	f7fe ffbf 	bl	800028c <__adddf3>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4620      	mov	r0, r4
 8001314:	4629      	mov	r1, r5
 8001316:	f7ff f96f 	bl	80005f8 <__aeabi_dmul>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	a34f      	add	r3, pc, #316	; (adr r3, 8001460 <Measure_M+0x268>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f966 	bl	80005f8 <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	a34c      	add	r3, pc, #304	; (adr r3, 8001468 <Measure_M+0x270>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7ff fa87 	bl	800084c <__aeabi_ddiv>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	6839      	ldr	r1, [r7, #0]
 8001344:	e9c1 2300 	strd	r2, r3, [r1]
						*(mag+1)=(y*((((asay-128)*0.5)/128)+1)*4912)/32760;
 8001348:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f8e9 	bl	8000524 <__aeabi_i2d>
 8001352:	4604      	mov	r4, r0
 8001354:	460d      	mov	r5, r1
 8001356:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800135a:	3b80      	subs	r3, #128	; 0x80
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f8e1 	bl	8000524 <__aeabi_i2d>
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b42      	ldr	r3, [pc, #264]	; (8001470 <Measure_M+0x278>)
 8001368:	f7ff f946 	bl	80005f8 <__aeabi_dmul>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	4b3e      	ldr	r3, [pc, #248]	; (8001474 <Measure_M+0x27c>)
 800137a:	f7ff fa67 	bl	800084c <__aeabi_ddiv>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <Measure_M+0x280>)
 800138c:	f7fe ff7e 	bl	800028c <__adddf3>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4620      	mov	r0, r4
 8001396:	4629      	mov	r1, r5
 8001398:	f7ff f92e 	bl	80005f8 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	a32e      	add	r3, pc, #184	; (adr r3, 8001460 <Measure_M+0x268>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	f7ff f925 	bl	80005f8 <__aeabi_dmul>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	f103 0408 	add.w	r4, r3, #8
 80013bc:	a32a      	add	r3, pc, #168	; (adr r3, 8001468 <Measure_M+0x270>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	f7ff fa43 	bl	800084c <__aeabi_ddiv>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	e9c4 2300 	strd	r2, r3, [r4]
						*(mag+2)=(z*((((asaz-128)*0.5)/128)+1)*4912)/32760;
 80013ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f8a6 	bl	8000524 <__aeabi_i2d>
 80013d8:	4604      	mov	r4, r0
 80013da:	460d      	mov	r5, r1
 80013dc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013e0:	3b80      	subs	r3, #128	; 0x80
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f89e 	bl	8000524 <__aeabi_i2d>
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <Measure_M+0x278>)
 80013ee:	f7ff f903 	bl	80005f8 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <Measure_M+0x27c>)
 8001400:	f7ff fa24 	bl	800084c <__aeabi_ddiv>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <Measure_M+0x280>)
 8001412:	f7fe ff3b 	bl	800028c <__adddf3>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4620      	mov	r0, r4
 800141c:	4629      	mov	r1, r5
 800141e:	f7ff f8eb 	bl	80005f8 <__aeabi_dmul>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4610      	mov	r0, r2
 8001428:	4619      	mov	r1, r3
 800142a:	a30d      	add	r3, pc, #52	; (adr r3, 8001460 <Measure_M+0x268>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f7ff f8e2 	bl	80005f8 <__aeabi_dmul>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	f103 0410 	add.w	r4, r3, #16
 8001442:	a309      	add	r3, pc, #36	; (adr r3, 8001468 <Measure_M+0x270>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7ff fa00 	bl	800084c <__aeabi_ddiv>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	e9c4 2300 	strd	r2, r3, [r4]





}
 8001454:	bf00      	nop
 8001456:	3728      	adds	r7, #40	; 0x28
 8001458:	46bd      	mov	sp, r7
 800145a:	bdb0      	pop	{r4, r5, r7, pc}
 800145c:	f3af 8000 	nop.w
 8001460:	00000000 	.word	0x00000000
 8001464:	40b33000 	.word	0x40b33000
 8001468:	00000000 	.word	0x00000000
 800146c:	40dffe00 	.word	0x40dffe00
 8001470:	3fe00000 	.word	0x3fe00000
 8001474:	40600000 	.word	0x40600000
 8001478:	3ff00000 	.word	0x3ff00000

0800147c <DATA_getDataCansat>:
#include "types.h"

static TypeDataCansat systemData;


TypeDataCansat *DATA_getDataCansat(void) { return &systemData; }
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
 8001480:	4b02      	ldr	r3, [pc, #8]	; (800148c <DATA_getDataCansat+0x10>)
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	2000008c 	.word	0x2000008c

08001490 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001498:	1d39      	adds	r1, r7, #4
 800149a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800149e:	2201      	movs	r2, #1
 80014a0:	4803      	ldr	r0, [pc, #12]	; (80014b0 <__io_putchar+0x20>)
 80014a2:	f004 fa26 	bl	80058f2 <HAL_UART_Transmit>

	return ch;
 80014a6:	687b      	ldr	r3, [r7, #4]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000154 	.word	0x20000154

080014b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b4:	b5b0      	push	{r4, r5, r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	TypeDataCansat *pDataCansat;

	pDataCansat = DATA_getDataCansat();
 80014ba:	f7ff ffdf 	bl	800147c <DATA_getDataCansat>
 80014be:	6078      	str	r0, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c0:	f000 fcb2 	bl	8001e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c4:	f000 f924 	bl	8001710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c8:	f000 fa0e 	bl	80018e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014cc:	f000 f9e2 	bl	8001894 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80014d0:	f000 f988 	bl	80017e4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80014d4:	f000 f9b4 	bl	8001840 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */




     if ( HAL_I2C_Mem_Read ( &hi2c1, MPU_ADD, WHO_AM_I_MPU9250, 1, pData, 1, 10)!= HAL_OK){
 80014d8:	230a      	movs	r3, #10
 80014da:	9302      	str	r3, [sp, #8]
 80014dc:	2301      	movs	r3, #1
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	4b78      	ldr	r3, [pc, #480]	; (80016c4 <main+0x210>)
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2301      	movs	r3, #1
 80014e6:	2275      	movs	r2, #117	; 0x75
 80014e8:	21d0      	movs	r1, #208	; 0xd0
 80014ea:	4877      	ldr	r0, [pc, #476]	; (80016c8 <main+0x214>)
 80014ec:	f001 fac0 	bl	8002a70 <HAL_I2C_Mem_Read>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <main+0x4a>
    	 printf("erreur d'initialisation de l'IMU 10DOF \r\n");
 80014f6:	4875      	ldr	r0, [pc, #468]	; (80016cc <main+0x218>)
 80014f8:	f005 fa7a 	bl	80069f0 <puts>
 80014fc:	e002      	b.n	8001504 <main+0x50>
          //Error_Handler();
     }
     else{
    	 printf("IMU 10DOF opperationnel \r\n");
 80014fe:	4874      	ldr	r0, [pc, #464]	; (80016d0 <main+0x21c>)
 8001500:	f005 fa76 	bl	80069f0 <puts>
     }
  sprintf(mess1,"%2d",pData[0]);
 8001504:	4b6f      	ldr	r3, [pc, #444]	; (80016c4 <main+0x210>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4972      	ldr	r1, [pc, #456]	; (80016d4 <main+0x220>)
 800150c:	4872      	ldr	r0, [pc, #456]	; (80016d8 <main+0x224>)
 800150e:	f005 fa77 	bl	8006a00 <siprintf>
  printf(mess1);
 8001512:	4871      	ldr	r0, [pc, #452]	; (80016d8 <main+0x224>)
 8001514:	f005 f9e6 	bl	80068e4 <iprintf>
  Init( &hi2c1);
 8001518:	486b      	ldr	r0, [pc, #428]	; (80016c8 <main+0x214>)
 800151a:	f7ff fcc7 	bl	8000eac <Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Measure_T(&hi2c1,&theta);
 800151e:	496f      	ldr	r1, [pc, #444]	; (80016dc <main+0x228>)
 8001520:	4869      	ldr	r0, [pc, #420]	; (80016c8 <main+0x214>)
 8001522:	f7ff fd55 	bl	8000fd0 <Measure_T>


	  //printf("test \r\n");
	  //printf("Temperature %2.2d C\r\n",(int)(theta));

	  Measure_A(&hi2c1,pDataCansat);
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4867      	ldr	r0, [pc, #412]	; (80016c8 <main+0x214>)
 800152a:	f7ff fd95 	bl	8001058 <Measure_A>

	  printf("accel sur x = %d g \r\n",pDataCansat->IMU.AccelerometerData.x);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	4619      	mov	r1, r3
 8001534:	486a      	ldr	r0, [pc, #424]	; (80016e0 <main+0x22c>)
 8001536:	f005 f9d5 	bl	80068e4 <iprintf>

	  printf("accel sur y = %d g \r\n",pDataCansat->IMU.AccelerometerData.y);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	4619      	mov	r1, r3
 8001540:	4868      	ldr	r0, [pc, #416]	; (80016e4 <main+0x230>)
 8001542:	f005 f9cf 	bl	80068e4 <iprintf>

	  sprintf(mess2,"accel sur z = %d g\r\n",pDataCansat->IMU.AccelerometerData.z);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	461a      	mov	r2, r3
 800154c:	4966      	ldr	r1, [pc, #408]	; (80016e8 <main+0x234>)
 800154e:	4867      	ldr	r0, [pc, #412]	; (80016ec <main+0x238>)
 8001550:	f005 fa56 	bl	8006a00 <siprintf>
	  printf(mess2);
 8001554:	4865      	ldr	r0, [pc, #404]	; (80016ec <main+0x238>)
 8001556:	f005 f9c5 	bl	80068e4 <iprintf>
	  g=sqrt((pDataCansat->IMU.AccelerometerData.x)*(pDataCansat->IMU.AccelerometerData.x)+(pDataCansat->IMU.AccelerometerData.y)*(pDataCansat->IMU.AccelerometerData.y)+(pDataCansat->IMU.AccelerometerData.z)*(pDataCansat->IMU.AccelerometerData.z));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6952      	ldr	r2, [r2, #20]
 8001562:	fb03 f202 	mul.w	r2, r3, r2
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	6989      	ldr	r1, [r1, #24]
 800156e:	fb01 f303 	mul.w	r3, r1, r3
 8001572:	441a      	add	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	69c9      	ldr	r1, [r1, #28]
 800157c:	fb01 f303 	mul.w	r3, r1, r3
 8001580:	4413      	add	r3, r2
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ffce 	bl	8000524 <__aeabi_i2d>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	ec43 2b10 	vmov	d0, r2, r3
 8001590:	f006 fb88 	bl	8007ca4 <sqrt>
 8001594:	ec53 2b10 	vmov	r2, r3, d0
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	f7ff fadc 	bl	8000b58 <__aeabi_d2iz>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4a53      	ldr	r2, [pc, #332]	; (80016f0 <main+0x23c>)
 80015a4:	6013      	str	r3, [r2, #0]
	  sprintf(mess2,"a= %2.2d g \r\n",g);
 80015a6:	4b52      	ldr	r3, [pc, #328]	; (80016f0 <main+0x23c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4951      	ldr	r1, [pc, #324]	; (80016f4 <main+0x240>)
 80015ae:	484f      	ldr	r0, [pc, #316]	; (80016ec <main+0x238>)
 80015b0:	f005 fa26 	bl	8006a00 <siprintf>
	  printf(mess2);
 80015b4:	484d      	ldr	r0, [pc, #308]	; (80016ec <main+0x238>)
 80015b6:	f005 f995 	bl	80068e4 <iprintf>

	  Measure_M(&hi2c1,mag);
 80015ba:	494f      	ldr	r1, [pc, #316]	; (80016f8 <main+0x244>)
 80015bc:	4842      	ldr	r0, [pc, #264]	; (80016c8 <main+0x214>)
 80015be:	f7ff fe1b 	bl	80011f8 <Measure_M>
	  sprintf(mess2,"mag x = %2.2d \r\n",(int)(*mag));
 80015c2:	4b4d      	ldr	r3, [pc, #308]	; (80016f8 <main+0x244>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f7ff fac4 	bl	8000b58 <__aeabi_d2iz>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	4949      	ldr	r1, [pc, #292]	; (80016fc <main+0x248>)
 80015d6:	4845      	ldr	r0, [pc, #276]	; (80016ec <main+0x238>)
 80015d8:	f005 fa12 	bl	8006a00 <siprintf>
	  printf(mess2);
 80015dc:	4843      	ldr	r0, [pc, #268]	; (80016ec <main+0x238>)
 80015de:	f005 f981 	bl	80068e4 <iprintf>
	  sprintf(mess2,"mag y = %2.2d\r\n ",(int)(*(mag+1)));
 80015e2:	4b45      	ldr	r3, [pc, #276]	; (80016f8 <main+0x244>)
 80015e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff fab4 	bl	8000b58 <__aeabi_d2iz>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	4942      	ldr	r1, [pc, #264]	; (8001700 <main+0x24c>)
 80015f6:	483d      	ldr	r0, [pc, #244]	; (80016ec <main+0x238>)
 80015f8:	f005 fa02 	bl	8006a00 <siprintf>
	  printf(mess2);
 80015fc:	483b      	ldr	r0, [pc, #236]	; (80016ec <main+0x238>)
 80015fe:	f005 f971 	bl	80068e4 <iprintf>
	  sprintf(mess2,"mag z = %2.2d \r\n",(int)(*(mag+2)));
 8001602:	4b3d      	ldr	r3, [pc, #244]	; (80016f8 <main+0x244>)
 8001604:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff faa4 	bl	8000b58 <__aeabi_d2iz>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	493b      	ldr	r1, [pc, #236]	; (8001704 <main+0x250>)
 8001616:	4835      	ldr	r0, [pc, #212]	; (80016ec <main+0x238>)
 8001618:	f005 f9f2 	bl	8006a00 <siprintf>
	  printf(mess2);
 800161c:	4833      	ldr	r0, [pc, #204]	; (80016ec <main+0x238>)
 800161e:	f005 f961 	bl	80068e4 <iprintf>

	  b=sqrt((mag[0])*(mag[0])+(mag[1])*(mag[1])+(mag[2])*(mag[2]));
 8001622:	4b35      	ldr	r3, [pc, #212]	; (80016f8 <main+0x244>)
 8001624:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001628:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <main+0x244>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7fe ffe3 	bl	80005f8 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4614      	mov	r4, r2
 8001638:	461d      	mov	r5, r3
 800163a:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <main+0x244>)
 800163c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001640:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <main+0x244>)
 8001642:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001646:	f7fe ffd7 	bl	80005f8 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4620      	mov	r0, r4
 8001650:	4629      	mov	r1, r5
 8001652:	f7fe fe1b 	bl	800028c <__adddf3>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4614      	mov	r4, r2
 800165c:	461d      	mov	r5, r3
 800165e:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <main+0x244>)
 8001660:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001664:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <main+0x244>)
 8001666:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800166a:	f7fe ffc5 	bl	80005f8 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4620      	mov	r0, r4
 8001674:	4629      	mov	r1, r5
 8001676:	f7fe fe09 	bl	800028c <__adddf3>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	ec43 2b17 	vmov	d7, r2, r3
 8001682:	eeb0 0a47 	vmov.f32	s0, s14
 8001686:	eef0 0a67 	vmov.f32	s1, s15
 800168a:	f006 fb0b 	bl	8007ca4 <sqrt>
 800168e:	eeb0 7a40 	vmov.f32	s14, s0
 8001692:	eef0 7a60 	vmov.f32	s15, s1
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <main+0x254>)
 8001698:	ed83 7b00 	vstr	d7, [r3]
	  sprintf(mess2,"B= %2.2d uT \r\n",(int)(b));
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <main+0x254>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f7ff fa57 	bl	8000b58 <__aeabi_d2iz>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461a      	mov	r2, r3
 80016ae:	4917      	ldr	r1, [pc, #92]	; (800170c <main+0x258>)
 80016b0:	480e      	ldr	r0, [pc, #56]	; (80016ec <main+0x238>)
 80016b2:	f005 f9a5 	bl	8006a00 <siprintf>
	  printf(mess2);
 80016b6:	480d      	ldr	r0, [pc, #52]	; (80016ec <main+0x238>)
 80016b8:	f005 f914 	bl	80068e4 <iprintf>

	  HAL_Delay(100);
 80016bc:	2064      	movs	r0, #100	; 0x64
 80016be:	f000 fc25 	bl	8001f0c <HAL_Delay>
	  Measure_T(&hi2c1,&theta);
 80016c2:	e72c      	b.n	800151e <main+0x6a>
 80016c4:	20000208 	.word	0x20000208
 80016c8:	200000bc 	.word	0x200000bc
 80016cc:	08007ec8 	.word	0x08007ec8
 80016d0:	08007ef4 	.word	0x08007ef4
 80016d4:	08007f10 	.word	0x08007f10
 80016d8:	20000198 	.word	0x20000198
 80016dc:	200001d8 	.word	0x200001d8
 80016e0:	08007f14 	.word	0x08007f14
 80016e4:	08007f2c 	.word	0x08007f2c
 80016e8:	08007f44 	.word	0x08007f44
 80016ec:	200001b8 	.word	0x200001b8
 80016f0:	200001e0 	.word	0x200001e0
 80016f4:	08007f5c 	.word	0x08007f5c
 80016f8:	200001f0 	.word	0x200001f0
 80016fc:	08007f6c 	.word	0x08007f6c
 8001700:	08007f80 	.word	0x08007f80
 8001704:	08007f94 	.word	0x08007f94
 8001708:	200001e8 	.word	0x200001e8
 800170c:	08007fa8 	.word	0x08007fa8

08001710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b094      	sub	sp, #80	; 0x50
 8001714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001716:	f107 0320 	add.w	r3, r7, #32
 800171a:	2230      	movs	r2, #48	; 0x30
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f005 f8d8 	bl	80068d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	4b28      	ldr	r3, [pc, #160]	; (80017dc <SystemClock_Config+0xcc>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	4a27      	ldr	r2, [pc, #156]	; (80017dc <SystemClock_Config+0xcc>)
 800173e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001742:	6413      	str	r3, [r2, #64]	; 0x40
 8001744:	4b25      	ldr	r3, [pc, #148]	; (80017dc <SystemClock_Config+0xcc>)
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001750:	2300      	movs	r3, #0
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <SystemClock_Config+0xd0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <SystemClock_Config+0xd0>)
 800175a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <SystemClock_Config+0xd0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800176c:	2302      	movs	r3, #2
 800176e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001770:	2301      	movs	r3, #1
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001774:	2310      	movs	r3, #16
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001778:	2302      	movs	r3, #2
 800177a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800177c:	2300      	movs	r3, #0
 800177e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001780:	2310      	movs	r3, #16
 8001782:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001784:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001788:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800178a:	2304      	movs	r3, #4
 800178c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800178e:	2304      	movs	r3, #4
 8001790:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001792:	f107 0320 	add.w	r3, r7, #32
 8001796:	4618      	mov	r0, r3
 8001798:	f003 fbc6 	bl	8004f28 <HAL_RCC_OscConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80017a2:	f000 f90f 	bl	80019c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a6:	230f      	movs	r3, #15
 80017a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017aa:	2302      	movs	r3, #2
 80017ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2102      	movs	r1, #2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f003 fe28 	bl	8005418 <HAL_RCC_ClockConfig>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017ce:	f000 f8f9 	bl	80019c4 <Error_Handler>
  }
}
 80017d2:	bf00      	nop
 80017d4:	3750      	adds	r7, #80	; 0x50
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40007000 	.word	0x40007000

080017e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <MX_I2C1_Init+0x50>)
 80017ea:	4a13      	ldr	r2, [pc, #76]	; (8001838 <MX_I2C1_Init+0x54>)
 80017ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_I2C1_Init+0x50>)
 80017f0:	4a12      	ldr	r2, [pc, #72]	; (800183c <MX_I2C1_Init+0x58>)
 80017f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MX_I2C1_Init+0x50>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_I2C1_Init+0x50>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_I2C1_Init+0x50>)
 8001802:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001806:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <MX_I2C1_Init+0x50>)
 800180a:	2200      	movs	r2, #0
 800180c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_I2C1_Init+0x50>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <MX_I2C1_Init+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_I2C1_Init+0x50>)
 800181c:	2200      	movs	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <MX_I2C1_Init+0x50>)
 8001822:	f000 fee7 	bl	80025f4 <HAL_I2C_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800182c:	f000 f8ca 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200000bc 	.word	0x200000bc
 8001838:	40005400 	.word	0x40005400
 800183c:	00061a80 	.word	0x00061a80

08001840 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <MX_USART1_UART_Init+0x4c>)
 8001846:	4a12      	ldr	r2, [pc, #72]	; (8001890 <MX_USART1_UART_Init+0x50>)
 8001848:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <MX_USART1_UART_Init+0x4c>)
 800184c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001850:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_USART1_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_USART1_UART_Init+0x4c>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <MX_USART1_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_USART1_UART_Init+0x4c>)
 8001866:	220c      	movs	r2, #12
 8001868:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <MX_USART1_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_USART1_UART_Init+0x4c>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_USART1_UART_Init+0x4c>)
 8001878:	f003 ffee 	bl	8005858 <HAL_UART_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001882:	f000 f89f 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000110 	.word	0x20000110
 8001890:	40011000 	.word	0x40011000

08001894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 800189a:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <MX_USART2_UART_Init+0x50>)
 800189c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018cc:	f003 ffc4 	bl	8005858 <HAL_UART_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018d6:	f000 f875 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000154 	.word	0x20000154
 80018e4:	40004400 	.word	0x40004400

080018e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <MX_GPIO_Init+0xd0>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a2c      	ldr	r2, [pc, #176]	; (80019b8 <MX_GPIO_Init+0xd0>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <MX_GPIO_Init+0xd0>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <MX_GPIO_Init+0xd0>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a25      	ldr	r2, [pc, #148]	; (80019b8 <MX_GPIO_Init+0xd0>)
 8001924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <MX_GPIO_Init+0xd0>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <MX_GPIO_Init+0xd0>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a1e      	ldr	r2, [pc, #120]	; (80019b8 <MX_GPIO_Init+0xd0>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <MX_GPIO_Init+0xd0>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <MX_GPIO_Init+0xd0>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <MX_GPIO_Init+0xd0>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <MX_GPIO_Init+0xd0>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800196e:	2200      	movs	r2, #0
 8001970:	2120      	movs	r1, #32
 8001972:	4812      	ldr	r0, [pc, #72]	; (80019bc <MX_GPIO_Init+0xd4>)
 8001974:	f000 fe24 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800197c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800197e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	480c      	ldr	r0, [pc, #48]	; (80019c0 <MX_GPIO_Init+0xd8>)
 8001990:	f000 fc92 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001994:	2320      	movs	r3, #32
 8001996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001998:	2301      	movs	r3, #1
 800199a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4619      	mov	r1, r3
 80019aa:	4804      	ldr	r0, [pc, #16]	; (80019bc <MX_GPIO_Init+0xd4>)
 80019ac:	f000 fc84 	bl	80022b8 <HAL_GPIO_Init>

}
 80019b0:	bf00      	nop
 80019b2:	3728      	adds	r7, #40	; 0x28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000
 80019c0:	40020800 	.word	0x40020800

080019c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c8:	b672      	cpsid	i
}
 80019ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019cc:	e7fe      	b.n	80019cc <Error_Handler+0x8>
	...

080019d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_MspInit+0x4c>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a0f      	ldr	r2, [pc, #60]	; (8001a1c <HAL_MspInit+0x4c>)
 80019e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_MspInit+0x4c>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_MspInit+0x4c>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <HAL_MspInit+0x4c>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_MspInit+0x4c>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a0e:	2007      	movs	r0, #7
 8001a10:	f000 fb70 	bl	80020f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40023800 	.word	0x40023800

08001a20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a21      	ldr	r2, [pc, #132]	; (8001ac4 <HAL_I2C_MspInit+0xa4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d13b      	bne.n	8001aba <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <HAL_I2C_MspInit+0xa8>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a1f      	ldr	r2, [pc, #124]	; (8001ac8 <HAL_I2C_MspInit+0xa8>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <HAL_I2C_MspInit+0xa8>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a5e:	23c0      	movs	r3, #192	; 0xc0
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a62:	2312      	movs	r3, #18
 8001a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a6e:	2304      	movs	r3, #4
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	4814      	ldr	r0, [pc, #80]	; (8001acc <HAL_I2C_MspInit+0xac>)
 8001a7a:	f000 fc1d 	bl	80022b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <HAL_I2C_MspInit+0xa8>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a10      	ldr	r2, [pc, #64]	; (8001ac8 <HAL_I2C_MspInit+0xa8>)
 8001a88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <HAL_I2C_MspInit+0xa8>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	201f      	movs	r0, #31
 8001aa0:	f000 fb33 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001aa4:	201f      	movs	r0, #31
 8001aa6:	f000 fb4c 	bl	8002142 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	2020      	movs	r0, #32
 8001ab0:	f000 fb2b 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001ab4:	2020      	movs	r0, #32
 8001ab6:	f000 fb44 	bl	8002142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001aba:	bf00      	nop
 8001abc:	3728      	adds	r7, #40	; 0x28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40005400 	.word	0x40005400
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020400 	.word	0x40020400

08001ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08c      	sub	sp, #48	; 0x30
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 031c 	add.w	r3, r7, #28
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a36      	ldr	r2, [pc, #216]	; (8001bc8 <HAL_UART_MspInit+0xf8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d135      	bne.n	8001b5e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	4b35      	ldr	r3, [pc, #212]	; (8001bcc <HAL_UART_MspInit+0xfc>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	4a34      	ldr	r2, [pc, #208]	; (8001bcc <HAL_UART_MspInit+0xfc>)
 8001afc:	f043 0310 	orr.w	r3, r3, #16
 8001b00:	6453      	str	r3, [r2, #68]	; 0x44
 8001b02:	4b32      	ldr	r3, [pc, #200]	; (8001bcc <HAL_UART_MspInit+0xfc>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	4b2e      	ldr	r3, [pc, #184]	; (8001bcc <HAL_UART_MspInit+0xfc>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a2d      	ldr	r2, [pc, #180]	; (8001bcc <HAL_UART_MspInit+0xfc>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <HAL_UART_MspInit+0xfc>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b3c:	2307      	movs	r3, #7
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b40:	f107 031c 	add.w	r3, r7, #28
 8001b44:	4619      	mov	r1, r3
 8001b46:	4822      	ldr	r0, [pc, #136]	; (8001bd0 <HAL_UART_MspInit+0x100>)
 8001b48:	f000 fbb6 	bl	80022b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	2025      	movs	r0, #37	; 0x25
 8001b52:	f000 fada 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b56:	2025      	movs	r0, #37	; 0x25
 8001b58:	f000 faf3 	bl	8002142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b5c:	e030      	b.n	8001bc0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a1c      	ldr	r2, [pc, #112]	; (8001bd4 <HAL_UART_MspInit+0x104>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d12b      	bne.n	8001bc0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <HAL_UART_MspInit+0xfc>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	4a16      	ldr	r2, [pc, #88]	; (8001bcc <HAL_UART_MspInit+0xfc>)
 8001b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b76:	6413      	str	r3, [r2, #64]	; 0x40
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <HAL_UART_MspInit+0xfc>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <HAL_UART_MspInit+0xfc>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <HAL_UART_MspInit+0xfc>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6313      	str	r3, [r2, #48]	; 0x30
 8001b94:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_UART_MspInit+0xfc>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ba0:	230c      	movs	r3, #12
 8001ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bb0:	2307      	movs	r3, #7
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <HAL_UART_MspInit+0x100>)
 8001bbc:	f000 fb7c 	bl	80022b8 <HAL_GPIO_Init>
}
 8001bc0:	bf00      	nop
 8001bc2:	3730      	adds	r7, #48	; 0x30
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40011000 	.word	0x40011000
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40004400 	.word	0x40004400

08001bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <NMI_Handler+0x4>

08001bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <HardFault_Handler+0x4>

08001be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <MemManage_Handler+0x4>

08001bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <BusFault_Handler+0x4>

08001bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <UsageFault_Handler+0x4>

08001bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c24:	f000 f952 	bl	8001ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <I2C1_EV_IRQHandler+0x10>)
 8001c32:	f001 f943 	bl	8002ebc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200000bc 	.word	0x200000bc

08001c40 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <I2C1_ER_IRQHandler+0x10>)
 8001c46:	f001 faaa 	bl	800319e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200000bc 	.word	0x200000bc

08001c54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <USART1_IRQHandler+0x10>)
 8001c5a:	f003 fedd 	bl	8005a18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000110 	.word	0x20000110

08001c68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	e00a      	b.n	8001c90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c7a:	f3af 8000 	nop.w
 8001c7e:	4601      	mov	r1, r0
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	60ba      	str	r2, [r7, #8]
 8001c86:	b2ca      	uxtb	r2, r1
 8001c88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	dbf0      	blt.n	8001c7a <_read+0x12>
	}

return len;
 8001c98:	687b      	ldr	r3, [r7, #4]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	e009      	b.n	8001cc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	60ba      	str	r2, [r7, #8]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fbe7 	bl	8001490 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	dbf1      	blt.n	8001cb4 <_write+0x12>
	}
	return len;
 8001cd0:	687b      	ldr	r3, [r7, #4]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <_close>:

int _close(int file)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d02:	605a      	str	r2, [r3, #4]
	return 0;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <_isatty>:

int _isatty(int file)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
	return 1;
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
	return 0;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d4c:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <_sbrk+0x5c>)
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <_sbrk+0x60>)
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d58:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d102      	bne.n	8001d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <_sbrk+0x64>)
 8001d62:	4a12      	ldr	r2, [pc, #72]	; (8001dac <_sbrk+0x68>)
 8001d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <_sbrk+0x64>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d207      	bcs.n	8001d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d74:	f004 fd84 	bl	8006880 <__errno>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d82:	e009      	b.n	8001d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <_sbrk+0x64>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8a:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <_sbrk+0x64>)
 8001d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d96:	68fb      	ldr	r3, [r7, #12]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20020000 	.word	0x20020000
 8001da4:	00000400 	.word	0x00000400
 8001da8:	20000214 	.word	0x20000214
 8001dac:	20000230 	.word	0x20000230

08001db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <SystemInit+0x20>)
 8001db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dba:	4a05      	ldr	r2, [pc, #20]	; (8001dd0 <SystemInit+0x20>)
 8001dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dd8:	480d      	ldr	r0, [pc, #52]	; (8001e10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dda:	490e      	ldr	r1, [pc, #56]	; (8001e14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ddc:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de0:	e002      	b.n	8001de8 <LoopCopyDataInit>

08001de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de6:	3304      	adds	r3, #4

08001de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dec:	d3f9      	bcc.n	8001de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dee:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001df0:	4c0b      	ldr	r4, [pc, #44]	; (8001e20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df4:	e001      	b.n	8001dfa <LoopFillZerobss>

08001df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df8:	3204      	adds	r2, #4

08001dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dfc:	d3fb      	bcc.n	8001df6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dfe:	f7ff ffd7 	bl	8001db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e02:	f004 fd43 	bl	800688c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e06:	f7ff fb55 	bl	80014b4 <main>
  bx  lr    
 8001e0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e14:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e18:	08008078 	.word	0x08008078
  ldr r2, =_sbss
 8001e1c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e20:	2000022c 	.word	0x2000022c

08001e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <ADC_IRQHandler>
	...

08001e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <HAL_Init+0x40>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0d      	ldr	r2, [pc, #52]	; (8001e68 <HAL_Init+0x40>)
 8001e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_Init+0x40>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <HAL_Init+0x40>)
 8001e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <HAL_Init+0x40>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e50:	2003      	movs	r0, #3
 8001e52:	f000 f94f 	bl	80020f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f000 f808 	bl	8001e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5c:	f7ff fdb8 	bl	80019d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023c00 	.word	0x40023c00

08001e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_InitTick+0x54>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_InitTick+0x58>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f967 	bl	800215e <HAL_SYSTICK_Config>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00e      	b.n	8001eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b0f      	cmp	r3, #15
 8001e9e:	d80a      	bhi.n	8001eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ea8:	f000 f92f 	bl	800210a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eac:	4a06      	ldr	r2, [pc, #24]	; (8001ec8 <HAL_InitTick+0x5c>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	20000008 	.word	0x20000008
 8001ec8:	20000004 	.word	0x20000004

08001ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_IncTick+0x20>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_IncTick+0x24>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <HAL_IncTick+0x24>)
 8001ede:	6013      	str	r3, [r2, #0]
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000008 	.word	0x20000008
 8001ef0:	20000218 	.word	0x20000218

08001ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <HAL_GetTick+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20000218 	.word	0x20000218

08001f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f14:	f7ff ffee 	bl	8001ef4 <HAL_GetTick>
 8001f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f24:	d005      	beq.n	8001f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f26:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <HAL_Delay+0x44>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f32:	bf00      	nop
 8001f34:	f7ff ffde 	bl	8001ef4 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d8f7      	bhi.n	8001f34 <HAL_Delay+0x28>
  {
  }
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000008 	.word	0x20000008

08001f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f70:	4013      	ands	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f86:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	60d3      	str	r3, [r2, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0307 	and.w	r3, r3, #7
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	db0b      	blt.n	8001fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	f003 021f 	and.w	r2, r3, #31
 8001fd0:	4907      	ldr	r1, [pc, #28]	; (8001ff0 <__NVIC_EnableIRQ+0x38>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	2001      	movs	r0, #1
 8001fda:	fa00 f202 	lsl.w	r2, r0, r2
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000e100 	.word	0xe000e100

08001ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	2b00      	cmp	r3, #0
 8002006:	db0a      	blt.n	800201e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	490c      	ldr	r1, [pc, #48]	; (8002040 <__NVIC_SetPriority+0x4c>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	0112      	lsls	r2, r2, #4
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	440b      	add	r3, r1
 8002018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800201c:	e00a      	b.n	8002034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4908      	ldr	r1, [pc, #32]	; (8002044 <__NVIC_SetPriority+0x50>)
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	3b04      	subs	r3, #4
 800202c:	0112      	lsls	r2, r2, #4
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	440b      	add	r3, r1
 8002032:	761a      	strb	r2, [r3, #24]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000e100 	.word	0xe000e100
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f1c3 0307 	rsb	r3, r3, #7
 8002062:	2b04      	cmp	r3, #4
 8002064:	bf28      	it	cs
 8002066:	2304      	movcs	r3, #4
 8002068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3304      	adds	r3, #4
 800206e:	2b06      	cmp	r3, #6
 8002070:	d902      	bls.n	8002078 <NVIC_EncodePriority+0x30>
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3b03      	subs	r3, #3
 8002076:	e000      	b.n	800207a <NVIC_EncodePriority+0x32>
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43da      	mvns	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	401a      	ands	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002090:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	43d9      	mvns	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	4313      	orrs	r3, r2
         );
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	; 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c0:	d301      	bcc.n	80020c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c2:	2301      	movs	r3, #1
 80020c4:	e00f      	b.n	80020e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <SysTick_Config+0x40>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ce:	210f      	movs	r1, #15
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020d4:	f7ff ff8e 	bl	8001ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <SysTick_Config+0x40>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020de:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <SysTick_Config+0x40>)
 80020e0:	2207      	movs	r2, #7
 80020e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	e000e010 	.word	0xe000e010

080020f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff29 	bl	8001f54 <__NVIC_SetPriorityGrouping>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800211c:	f7ff ff3e 	bl	8001f9c <__NVIC_GetPriorityGrouping>
 8002120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	6978      	ldr	r0, [r7, #20]
 8002128:	f7ff ff8e 	bl	8002048 <NVIC_EncodePriority>
 800212c:	4602      	mov	r2, r0
 800212e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff5d 	bl	8001ff4 <__NVIC_SetPriority>
}
 800213a:	bf00      	nop
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff31 	bl	8001fb8 <__NVIC_EnableIRQ>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ffa2 	bl	80020b0 <SysTick_Config>
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002184:	f7ff feb6 	bl	8001ef4 <HAL_GetTick>
 8002188:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d008      	beq.n	80021a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2280      	movs	r2, #128	; 0x80
 800219a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e052      	b.n	800224e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0216 	bic.w	r2, r2, #22
 80021b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d103      	bne.n	80021d8 <HAL_DMA_Abort+0x62>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d007      	beq.n	80021e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0208 	bic.w	r2, r2, #8
 80021e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0201 	bic.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f8:	e013      	b.n	8002222 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021fa:	f7ff fe7b 	bl	8001ef4 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b05      	cmp	r3, #5
 8002206:	d90c      	bls.n	8002222 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2203      	movs	r2, #3
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e015      	b.n	800224e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1e4      	bne.n	80021fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002234:	223f      	movs	r2, #63	; 0x3f
 8002236:	409a      	lsls	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d004      	beq.n	8002274 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2280      	movs	r2, #128	; 0x80
 800226e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e00c      	b.n	800228e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2205      	movs	r2, #5
 8002278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0201 	bic.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a8:	b2db      	uxtb	r3, r3
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	e159      	b.n	8002588 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d4:	2201      	movs	r2, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	f040 8148 	bne.w	8002582 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d005      	beq.n	800230a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002306:	2b02      	cmp	r3, #2
 8002308:	d130      	bne.n	800236c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	2203      	movs	r2, #3
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002340:	2201      	movs	r2, #1
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 0201 	and.w	r2, r3, #1
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	2b03      	cmp	r3, #3
 8002376:	d017      	beq.n	80023a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d123      	bne.n	80023fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	08da      	lsrs	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3208      	adds	r2, #8
 80023bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	220f      	movs	r2, #15
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	08da      	lsrs	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3208      	adds	r2, #8
 80023f6:	69b9      	ldr	r1, [r7, #24]
 80023f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	2203      	movs	r2, #3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0203 	and.w	r2, r3, #3
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80a2 	beq.w	8002582 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4b57      	ldr	r3, [pc, #348]	; (80025a0 <HAL_GPIO_Init+0x2e8>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	4a56      	ldr	r2, [pc, #344]	; (80025a0 <HAL_GPIO_Init+0x2e8>)
 8002448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800244c:	6453      	str	r3, [r2, #68]	; 0x44
 800244e:	4b54      	ldr	r3, [pc, #336]	; (80025a0 <HAL_GPIO_Init+0x2e8>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800245a:	4a52      	ldr	r2, [pc, #328]	; (80025a4 <HAL_GPIO_Init+0x2ec>)
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	3302      	adds	r3, #2
 8002462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	220f      	movs	r2, #15
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a49      	ldr	r2, [pc, #292]	; (80025a8 <HAL_GPIO_Init+0x2f0>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d019      	beq.n	80024ba <HAL_GPIO_Init+0x202>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a48      	ldr	r2, [pc, #288]	; (80025ac <HAL_GPIO_Init+0x2f4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d013      	beq.n	80024b6 <HAL_GPIO_Init+0x1fe>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a47      	ldr	r2, [pc, #284]	; (80025b0 <HAL_GPIO_Init+0x2f8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00d      	beq.n	80024b2 <HAL_GPIO_Init+0x1fa>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a46      	ldr	r2, [pc, #280]	; (80025b4 <HAL_GPIO_Init+0x2fc>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d007      	beq.n	80024ae <HAL_GPIO_Init+0x1f6>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a45      	ldr	r2, [pc, #276]	; (80025b8 <HAL_GPIO_Init+0x300>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d101      	bne.n	80024aa <HAL_GPIO_Init+0x1f2>
 80024a6:	2304      	movs	r3, #4
 80024a8:	e008      	b.n	80024bc <HAL_GPIO_Init+0x204>
 80024aa:	2307      	movs	r3, #7
 80024ac:	e006      	b.n	80024bc <HAL_GPIO_Init+0x204>
 80024ae:	2303      	movs	r3, #3
 80024b0:	e004      	b.n	80024bc <HAL_GPIO_Init+0x204>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e002      	b.n	80024bc <HAL_GPIO_Init+0x204>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_GPIO_Init+0x204>
 80024ba:	2300      	movs	r3, #0
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	f002 0203 	and.w	r2, r2, #3
 80024c2:	0092      	lsls	r2, r2, #2
 80024c4:	4093      	lsls	r3, r2
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024cc:	4935      	ldr	r1, [pc, #212]	; (80025a4 <HAL_GPIO_Init+0x2ec>)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	089b      	lsrs	r3, r3, #2
 80024d2:	3302      	adds	r3, #2
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024da:	4b38      	ldr	r3, [pc, #224]	; (80025bc <HAL_GPIO_Init+0x304>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024fe:	4a2f      	ldr	r2, [pc, #188]	; (80025bc <HAL_GPIO_Init+0x304>)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002504:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <HAL_GPIO_Init+0x304>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002528:	4a24      	ldr	r2, [pc, #144]	; (80025bc <HAL_GPIO_Init+0x304>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800252e:	4b23      	ldr	r3, [pc, #140]	; (80025bc <HAL_GPIO_Init+0x304>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002552:	4a1a      	ldr	r2, [pc, #104]	; (80025bc <HAL_GPIO_Init+0x304>)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002558:	4b18      	ldr	r3, [pc, #96]	; (80025bc <HAL_GPIO_Init+0x304>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800257c:	4a0f      	ldr	r2, [pc, #60]	; (80025bc <HAL_GPIO_Init+0x304>)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3301      	adds	r3, #1
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	2b0f      	cmp	r3, #15
 800258c:	f67f aea2 	bls.w	80022d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	3724      	adds	r7, #36	; 0x24
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40013800 	.word	0x40013800
 80025a8:	40020000 	.word	0x40020000
 80025ac:	40020400 	.word	0x40020400
 80025b0:	40020800 	.word	0x40020800
 80025b4:	40020c00 	.word	0x40020c00
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40013c00 	.word	0x40013c00

080025c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
 80025cc:	4613      	mov	r3, r2
 80025ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d0:	787b      	ldrb	r3, [r7, #1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025dc:	e003      	b.n	80025e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025de:	887b      	ldrh	r3, [r7, #2]
 80025e0:	041a      	lsls	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	619a      	str	r2, [r3, #24]
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e12b      	b.n	800285e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff fa00 	bl	8001a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2224      	movs	r2, #36	; 0x24
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0201 	bic.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002646:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002656:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002658:	f003 f8d6 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 800265c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	4a81      	ldr	r2, [pc, #516]	; (8002868 <HAL_I2C_Init+0x274>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d807      	bhi.n	8002678 <HAL_I2C_Init+0x84>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4a80      	ldr	r2, [pc, #512]	; (800286c <HAL_I2C_Init+0x278>)
 800266c:	4293      	cmp	r3, r2
 800266e:	bf94      	ite	ls
 8002670:	2301      	movls	r3, #1
 8002672:	2300      	movhi	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	e006      	b.n	8002686 <HAL_I2C_Init+0x92>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4a7d      	ldr	r2, [pc, #500]	; (8002870 <HAL_I2C_Init+0x27c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	bf94      	ite	ls
 8002680:	2301      	movls	r3, #1
 8002682:	2300      	movhi	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e0e7      	b.n	800285e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4a78      	ldr	r2, [pc, #480]	; (8002874 <HAL_I2C_Init+0x280>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	0c9b      	lsrs	r3, r3, #18
 8002698:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a6a      	ldr	r2, [pc, #424]	; (8002868 <HAL_I2C_Init+0x274>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d802      	bhi.n	80026c8 <HAL_I2C_Init+0xd4>
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	3301      	adds	r3, #1
 80026c6:	e009      	b.n	80026dc <HAL_I2C_Init+0xe8>
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026ce:	fb02 f303 	mul.w	r3, r2, r3
 80026d2:	4a69      	ldr	r2, [pc, #420]	; (8002878 <HAL_I2C_Init+0x284>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	099b      	lsrs	r3, r3, #6
 80026da:	3301      	adds	r3, #1
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	430b      	orrs	r3, r1
 80026e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	495c      	ldr	r1, [pc, #368]	; (8002868 <HAL_I2C_Init+0x274>)
 80026f8:	428b      	cmp	r3, r1
 80026fa:	d819      	bhi.n	8002730 <HAL_I2C_Init+0x13c>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1e59      	subs	r1, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fbb1 f3f3 	udiv	r3, r1, r3
 800270a:	1c59      	adds	r1, r3, #1
 800270c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002710:	400b      	ands	r3, r1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <HAL_I2C_Init+0x138>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1e59      	subs	r1, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fbb1 f3f3 	udiv	r3, r1, r3
 8002724:	3301      	adds	r3, #1
 8002726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272a:	e051      	b.n	80027d0 <HAL_I2C_Init+0x1dc>
 800272c:	2304      	movs	r3, #4
 800272e:	e04f      	b.n	80027d0 <HAL_I2C_Init+0x1dc>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d111      	bne.n	800275c <HAL_I2C_Init+0x168>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1e58      	subs	r0, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6859      	ldr	r1, [r3, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	440b      	add	r3, r1
 8002746:	fbb0 f3f3 	udiv	r3, r0, r3
 800274a:	3301      	adds	r3, #1
 800274c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	e012      	b.n	8002782 <HAL_I2C_Init+0x18e>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1e58      	subs	r0, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6859      	ldr	r1, [r3, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	0099      	lsls	r1, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002772:	3301      	adds	r3, #1
 8002774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_I2C_Init+0x196>
 8002786:	2301      	movs	r3, #1
 8002788:	e022      	b.n	80027d0 <HAL_I2C_Init+0x1dc>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10e      	bne.n	80027b0 <HAL_I2C_Init+0x1bc>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1e58      	subs	r0, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6859      	ldr	r1, [r3, #4]
 800279a:	460b      	mov	r3, r1
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	440b      	add	r3, r1
 80027a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a4:	3301      	adds	r3, #1
 80027a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ae:	e00f      	b.n	80027d0 <HAL_I2C_Init+0x1dc>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1e58      	subs	r0, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6859      	ldr	r1, [r3, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	0099      	lsls	r1, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c6:	3301      	adds	r3, #1
 80027c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	6809      	ldr	r1, [r1, #0]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69da      	ldr	r2, [r3, #28]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6911      	ldr	r1, [r2, #16]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68d2      	ldr	r2, [r2, #12]
 800280a:	4311      	orrs	r1, r2
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	430b      	orrs	r3, r1
 8002812:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	000186a0 	.word	0x000186a0
 800286c:	001e847f 	.word	0x001e847f
 8002870:	003d08ff 	.word	0x003d08ff
 8002874:	431bde83 	.word	0x431bde83
 8002878:	10624dd3 	.word	0x10624dd3

0800287c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af02      	add	r7, sp, #8
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	4608      	mov	r0, r1
 8002886:	4611      	mov	r1, r2
 8002888:	461a      	mov	r2, r3
 800288a:	4603      	mov	r3, r0
 800288c:	817b      	strh	r3, [r7, #10]
 800288e:	460b      	mov	r3, r1
 8002890:	813b      	strh	r3, [r7, #8]
 8002892:	4613      	mov	r3, r2
 8002894:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002896:	f7ff fb2d 	bl	8001ef4 <HAL_GetTick>
 800289a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	f040 80d9 	bne.w	8002a5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	2319      	movs	r3, #25
 80028b0:	2201      	movs	r2, #1
 80028b2:	496d      	ldr	r1, [pc, #436]	; (8002a68 <HAL_I2C_Mem_Write+0x1ec>)
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f002 f90d 	bl	8004ad4 <I2C_WaitOnFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028c0:	2302      	movs	r3, #2
 80028c2:	e0cc      	b.n	8002a5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_I2C_Mem_Write+0x56>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e0c5      	b.n	8002a5e <HAL_I2C_Mem_Write+0x1e2>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d007      	beq.n	80028f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002906:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2221      	movs	r2, #33	; 0x21
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2240      	movs	r2, #64	; 0x40
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a3a      	ldr	r2, [r7, #32]
 8002922:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002928:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4a4d      	ldr	r2, [pc, #308]	; (8002a6c <HAL_I2C_Mem_Write+0x1f0>)
 8002938:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800293a:	88f8      	ldrh	r0, [r7, #6]
 800293c:	893a      	ldrh	r2, [r7, #8]
 800293e:	8979      	ldrh	r1, [r7, #10]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	9301      	str	r3, [sp, #4]
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	4603      	mov	r3, r0
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f001 fe9c 	bl	8004688 <I2C_RequestMemoryWrite>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d052      	beq.n	80029fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e081      	b.n	8002a5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f002 f98e 	bl	8004c80 <I2C_WaitOnTXEFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00d      	beq.n	8002986 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	2b04      	cmp	r3, #4
 8002970:	d107      	bne.n	8002982 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002980:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e06b      	b.n	8002a5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	781a      	ldrb	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d11b      	bne.n	80029fc <HAL_I2C_Mem_Write+0x180>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d017      	beq.n	80029fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	781a      	ldrb	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1aa      	bne.n	800295a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f002 f97a 	bl	8004d02 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00d      	beq.n	8002a30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d107      	bne.n	8002a2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e016      	b.n	8002a5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	e000      	b.n	8002a5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a5c:	2302      	movs	r3, #2
  }
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	00100002 	.word	0x00100002
 8002a6c:	ffff0000 	.word	0xffff0000

08002a70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08c      	sub	sp, #48	; 0x30
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	4608      	mov	r0, r1
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4603      	mov	r3, r0
 8002a80:	817b      	strh	r3, [r7, #10]
 8002a82:	460b      	mov	r3, r1
 8002a84:	813b      	strh	r3, [r7, #8]
 8002a86:	4613      	mov	r3, r2
 8002a88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a8a:	f7ff fa33 	bl	8001ef4 <HAL_GetTick>
 8002a8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	f040 8208 	bne.w	8002eae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	2319      	movs	r3, #25
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	497b      	ldr	r1, [pc, #492]	; (8002c94 <HAL_I2C_Mem_Read+0x224>)
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f002 f813 	bl	8004ad4 <I2C_WaitOnFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e1fb      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_I2C_Mem_Read+0x56>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e1f4      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x440>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d007      	beq.n	8002aec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002afa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2222      	movs	r2, #34	; 0x22
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2240      	movs	r2, #64	; 0x40
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a5b      	ldr	r2, [pc, #364]	; (8002c98 <HAL_I2C_Mem_Read+0x228>)
 8002b2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b2e:	88f8      	ldrh	r0, [r7, #6]
 8002b30:	893a      	ldrh	r2, [r7, #8]
 8002b32:	8979      	ldrh	r1, [r7, #10]
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	9301      	str	r3, [sp, #4]
 8002b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f001 fe38 	bl	80047b4 <I2C_RequestMemoryRead>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e1b0      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d113      	bne.n	8002b7e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b56:	2300      	movs	r3, #0
 8002b58:	623b      	str	r3, [r7, #32]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	623b      	str	r3, [r7, #32]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	623b      	str	r3, [r7, #32]
 8002b6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	e184      	b.n	8002e88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d11b      	bne.n	8002bbe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	61fb      	str	r3, [r7, #28]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e164      	b.n	8002e88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d11b      	bne.n	8002bfe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002be4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be6:	2300      	movs	r3, #0
 8002be8:	61bb      	str	r3, [r7, #24]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	e144      	b.n	8002e88 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c14:	e138      	b.n	8002e88 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	f200 80f1 	bhi.w	8002e02 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d123      	bne.n	8002c70 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f002 f8db 	bl	8004de8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e139      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c6e:	e10b      	b.n	8002e88 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d14e      	bne.n	8002d16 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7e:	2200      	movs	r2, #0
 8002c80:	4906      	ldr	r1, [pc, #24]	; (8002c9c <HAL_I2C_Mem_Read+0x22c>)
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f001 ff26 	bl	8004ad4 <I2C_WaitOnFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d008      	beq.n	8002ca0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e10e      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x440>
 8002c92:	bf00      	nop
 8002c94:	00100002 	.word	0x00100002
 8002c98:	ffff0000 	.word	0xffff0000
 8002c9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d14:	e0b8      	b.n	8002e88 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	4966      	ldr	r1, [pc, #408]	; (8002eb8 <HAL_I2C_Mem_Read+0x448>)
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f001 fed7 	bl	8004ad4 <I2C_WaitOnFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0bf      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691a      	ldr	r2, [r3, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d78:	2200      	movs	r2, #0
 8002d7a:	494f      	ldr	r1, [pc, #316]	; (8002eb8 <HAL_I2C_Mem_Read+0x448>)
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f001 fea9 	bl	8004ad4 <I2C_WaitOnFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e091      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e00:	e042      	b.n	8002e88 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f001 ffee 	bl	8004de8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e04c      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d118      	bne.n	8002e88 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f47f aec2 	bne.w	8002c16 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e000      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
  }
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3728      	adds	r7, #40	; 0x28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	00010004 	.word	0x00010004

08002ebc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002edc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	2b10      	cmp	r3, #16
 8002eea:	d003      	beq.n	8002ef4 <HAL_I2C_EV_IRQHandler+0x38>
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b40      	cmp	r3, #64	; 0x40
 8002ef0:	f040 80c1 	bne.w	8003076 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10d      	bne.n	8002f2a <HAL_I2C_EV_IRQHandler+0x6e>
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002f14:	d003      	beq.n	8002f1e <HAL_I2C_EV_IRQHandler+0x62>
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002f1c:	d101      	bne.n	8002f22 <HAL_I2C_EV_IRQHandler+0x66>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_I2C_EV_IRQHandler+0x68>
 8002f22:	2300      	movs	r3, #0
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	f000 8132 	beq.w	800318e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00c      	beq.n	8002f4e <HAL_I2C_EV_IRQHandler+0x92>
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	0a5b      	lsrs	r3, r3, #9
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d006      	beq.n	8002f4e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f001 ffd6 	bl	8004ef2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fd83 	bl	8003a52 <I2C_Master_SB>
 8002f4c:	e092      	b.n	8003074 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	08db      	lsrs	r3, r3, #3
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d009      	beq.n	8002f6e <HAL_I2C_EV_IRQHandler+0xb2>
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	0a5b      	lsrs	r3, r3, #9
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fdf9 	bl	8003b5e <I2C_Master_ADD10>
 8002f6c:	e082      	b.n	8003074 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	085b      	lsrs	r3, r3, #1
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d009      	beq.n	8002f8e <HAL_I2C_EV_IRQHandler+0xd2>
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	0a5b      	lsrs	r3, r3, #9
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fe13 	bl	8003bb2 <I2C_Master_ADDR>
 8002f8c:	e072      	b.n	8003074 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d03b      	beq.n	8003012 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fa8:	f000 80f3 	beq.w	8003192 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	09db      	lsrs	r3, r3, #7
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00f      	beq.n	8002fd8 <HAL_I2C_EV_IRQHandler+0x11c>
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	0a9b      	lsrs	r3, r3, #10
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d009      	beq.n	8002fd8 <HAL_I2C_EV_IRQHandler+0x11c>
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d103      	bne.n	8002fd8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f9f3 	bl	80033bc <I2C_MasterTransmit_TXE>
 8002fd6:	e04d      	b.n	8003074 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	089b      	lsrs	r3, r3, #2
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80d6 	beq.w	8003192 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	0a5b      	lsrs	r3, r3, #9
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80cf 	beq.w	8003192 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002ff4:	7bbb      	ldrb	r3, [r7, #14]
 8002ff6:	2b21      	cmp	r3, #33	; 0x21
 8002ff8:	d103      	bne.n	8003002 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fa7a 	bl	80034f4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003000:	e0c7      	b.n	8003192 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	2b40      	cmp	r3, #64	; 0x40
 8003006:	f040 80c4 	bne.w	8003192 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fae8 	bl	80035e0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003010:	e0bf      	b.n	8003192 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800301c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003020:	f000 80b7 	beq.w	8003192 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	099b      	lsrs	r3, r3, #6
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00f      	beq.n	8003050 <HAL_I2C_EV_IRQHandler+0x194>
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	0a9b      	lsrs	r3, r3, #10
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d009      	beq.n	8003050 <HAL_I2C_EV_IRQHandler+0x194>
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	089b      	lsrs	r3, r3, #2
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d103      	bne.n	8003050 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fb5d 	bl	8003708 <I2C_MasterReceive_RXNE>
 800304e:	e011      	b.n	8003074 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	089b      	lsrs	r3, r3, #2
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 809a 	beq.w	8003192 <HAL_I2C_EV_IRQHandler+0x2d6>
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	0a5b      	lsrs	r3, r3, #9
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 8093 	beq.w	8003192 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 fc06 	bl	800387e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003072:	e08e      	b.n	8003192 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003074:	e08d      	b.n	8003192 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d004      	beq.n	8003088 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	e007      	b.n	8003098 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	085b      	lsrs	r3, r3, #1
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d012      	beq.n	80030ca <HAL_I2C_EV_IRQHandler+0x20e>
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	0a5b      	lsrs	r3, r3, #9
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00c      	beq.n	80030ca <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80030c0:	69b9      	ldr	r1, [r7, #24]
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 ffc4 	bl	8004050 <I2C_Slave_ADDR>
 80030c8:	e066      	b.n	8003198 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <HAL_I2C_EV_IRQHandler+0x22e>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	0a5b      	lsrs	r3, r3, #9
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fffe 	bl	80040e4 <I2C_Slave_STOPF>
 80030e8:	e056      	b.n	8003198 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030ea:	7bbb      	ldrb	r3, [r7, #14]
 80030ec:	2b21      	cmp	r3, #33	; 0x21
 80030ee:	d002      	beq.n	80030f6 <HAL_I2C_EV_IRQHandler+0x23a>
 80030f0:	7bbb      	ldrb	r3, [r7, #14]
 80030f2:	2b29      	cmp	r3, #41	; 0x29
 80030f4:	d125      	bne.n	8003142 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	09db      	lsrs	r3, r3, #7
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00f      	beq.n	8003122 <HAL_I2C_EV_IRQHandler+0x266>
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	0a9b      	lsrs	r3, r3, #10
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <HAL_I2C_EV_IRQHandler+0x266>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	089b      	lsrs	r3, r3, #2
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d103      	bne.n	8003122 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 feda 	bl	8003ed4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003120:	e039      	b.n	8003196 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	089b      	lsrs	r3, r3, #2
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d033      	beq.n	8003196 <HAL_I2C_EV_IRQHandler+0x2da>
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	0a5b      	lsrs	r3, r3, #9
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d02d      	beq.n	8003196 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 ff07 	bl	8003f4e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003140:	e029      	b.n	8003196 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	099b      	lsrs	r3, r3, #6
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00f      	beq.n	800316e <HAL_I2C_EV_IRQHandler+0x2b2>
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	0a9b      	lsrs	r3, r3, #10
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d009      	beq.n	800316e <HAL_I2C_EV_IRQHandler+0x2b2>
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	089b      	lsrs	r3, r3, #2
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d103      	bne.n	800316e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 ff12 	bl	8003f90 <I2C_SlaveReceive_RXNE>
 800316c:	e014      	b.n	8003198 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	089b      	lsrs	r3, r3, #2
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00e      	beq.n	8003198 <HAL_I2C_EV_IRQHandler+0x2dc>
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	0a5b      	lsrs	r3, r3, #9
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d008      	beq.n	8003198 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 ff40 	bl	800400c <I2C_SlaveReceive_BTF>
 800318c:	e004      	b.n	8003198 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800318e:	bf00      	nop
 8003190:	e002      	b.n	8003198 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003192:	bf00      	nop
 8003194:	e000      	b.n	8003198 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003196:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b08a      	sub	sp, #40	; 0x28
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031c0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	0a1b      	lsrs	r3, r3, #8
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00e      	beq.n	80031ec <HAL_I2C_ER_IRQHandler+0x4e>
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	0a1b      	lsrs	r3, r3, #8
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d008      	beq.n	80031ec <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031ea:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	0a5b      	lsrs	r3, r3, #9
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00e      	beq.n	8003216 <HAL_I2C_ER_IRQHandler+0x78>
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	0a1b      	lsrs	r3, r3, #8
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	f043 0302 	orr.w	r3, r3, #2
 800320a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003214:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	0a9b      	lsrs	r3, r3, #10
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d03f      	beq.n	80032a2 <HAL_I2C_ER_IRQHandler+0x104>
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	0a1b      	lsrs	r3, r3, #8
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d039      	beq.n	80032a2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800322e:	7efb      	ldrb	r3, [r7, #27]
 8003230:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003240:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003248:	7ebb      	ldrb	r3, [r7, #26]
 800324a:	2b20      	cmp	r3, #32
 800324c:	d112      	bne.n	8003274 <HAL_I2C_ER_IRQHandler+0xd6>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10f      	bne.n	8003274 <HAL_I2C_ER_IRQHandler+0xd6>
 8003254:	7cfb      	ldrb	r3, [r7, #19]
 8003256:	2b21      	cmp	r3, #33	; 0x21
 8003258:	d008      	beq.n	800326c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800325a:	7cfb      	ldrb	r3, [r7, #19]
 800325c:	2b29      	cmp	r3, #41	; 0x29
 800325e:	d005      	beq.n	800326c <HAL_I2C_ER_IRQHandler+0xce>
 8003260:	7cfb      	ldrb	r3, [r7, #19]
 8003262:	2b28      	cmp	r3, #40	; 0x28
 8003264:	d106      	bne.n	8003274 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b21      	cmp	r3, #33	; 0x21
 800326a:	d103      	bne.n	8003274 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f001 f869 	bl	8004344 <I2C_Slave_AF>
 8003272:	e016      	b.n	80032a2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800327c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	f043 0304 	orr.w	r3, r3, #4
 8003284:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003286:	7efb      	ldrb	r3, [r7, #27]
 8003288:	2b10      	cmp	r3, #16
 800328a:	d002      	beq.n	8003292 <HAL_I2C_ER_IRQHandler+0xf4>
 800328c:	7efb      	ldrb	r3, [r7, #27]
 800328e:	2b40      	cmp	r3, #64	; 0x40
 8003290:	d107      	bne.n	80032a2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	0adb      	lsrs	r3, r3, #11
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00e      	beq.n	80032cc <HAL_I2C_ER_IRQHandler+0x12e>
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d008      	beq.n	80032cc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	f043 0308 	orr.w	r3, r3, #8
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80032ca:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d008      	beq.n	80032e4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f001 f8a0 	bl	8004424 <I2C_ITError>
  }
}
 80032e4:	bf00      	nop
 80032e6:	3728      	adds	r7, #40	; 0x28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	70fb      	strb	r3, [r7, #3]
 8003348:	4613      	mov	r3, r2
 800334a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d150      	bne.n	8003484 <I2C_MasterTransmit_TXE+0xc8>
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	2b21      	cmp	r3, #33	; 0x21
 80033e6:	d14d      	bne.n	8003484 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d01d      	beq.n	800342a <I2C_MasterTransmit_TXE+0x6e>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d01a      	beq.n	800342a <I2C_MasterTransmit_TXE+0x6e>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033fa:	d016      	beq.n	800342a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800340a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2211      	movs	r2, #17
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff ff62 	bl	80032ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003428:	e060      	b.n	80034ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003438:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003448:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b40      	cmp	r3, #64	; 0x40
 8003462:	d107      	bne.n	8003474 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff ff7d 	bl	800336c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003472:	e03b      	b.n	80034ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff ff35 	bl	80032ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003482:	e033      	b.n	80034ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	2b21      	cmp	r3, #33	; 0x21
 8003488:	d005      	beq.n	8003496 <I2C_MasterTransmit_TXE+0xda>
 800348a:	7bbb      	ldrb	r3, [r7, #14]
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	d12d      	bne.n	80034ec <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	2b22      	cmp	r3, #34	; 0x22
 8003494:	d12a      	bne.n	80034ec <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d108      	bne.n	80034b2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ae:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80034b0:	e01c      	b.n	80034ec <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d103      	bne.n	80034c6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f88e 	bl	80035e0 <I2C_MemoryTransmit_TXE_BTF>
}
 80034c4:	e012      	b.n	80034ec <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	781a      	ldrb	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034ea:	e7ff      	b.n	80034ec <I2C_MasterTransmit_TXE+0x130>
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b21      	cmp	r3, #33	; 0x21
 800350c:	d164      	bne.n	80035d8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d012      	beq.n	800353e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	781a      	ldrb	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800353c:	e04c      	b.n	80035d8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b08      	cmp	r3, #8
 8003542:	d01d      	beq.n	8003580 <I2C_MasterTransmit_BTF+0x8c>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b20      	cmp	r3, #32
 8003548:	d01a      	beq.n	8003580 <I2C_MasterTransmit_BTF+0x8c>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003550:	d016      	beq.n	8003580 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003560:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2211      	movs	r2, #17
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff feb7 	bl	80032ec <HAL_I2C_MasterTxCpltCallback>
}
 800357e:	e02b      	b.n	80035d8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800358e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b40      	cmp	r3, #64	; 0x40
 80035b8:	d107      	bne.n	80035ca <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff fed2 	bl	800336c <HAL_I2C_MemTxCpltCallback>
}
 80035c8:	e006      	b.n	80035d8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff fe8a 	bl	80032ec <HAL_I2C_MasterTxCpltCallback>
}
 80035d8:	bf00      	nop
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d11d      	bne.n	8003634 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d10b      	bne.n	8003618 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003604:	b2da      	uxtb	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003610:	1c9a      	adds	r2, r3, #2
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003616:	e073      	b.n	8003700 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361c:	b29b      	uxth	r3, r3
 800361e:	121b      	asrs	r3, r3, #8
 8003620:	b2da      	uxtb	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003632:	e065      	b.n	8003700 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003638:	2b01      	cmp	r3, #1
 800363a:	d10b      	bne.n	8003654 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003640:	b2da      	uxtb	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003652:	e055      	b.n	8003700 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003658:	2b02      	cmp	r3, #2
 800365a:	d151      	bne.n	8003700 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b22      	cmp	r3, #34	; 0x22
 8003660:	d10d      	bne.n	800367e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003670:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800367c:	e040      	b.n	8003700 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d015      	beq.n	80036b4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	2b21      	cmp	r3, #33	; 0x21
 800368c:	d112      	bne.n	80036b4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	781a      	ldrb	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036b2:	e025      	b.n	8003700 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d120      	bne.n	8003700 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	2b21      	cmp	r3, #33	; 0x21
 80036c2:	d11d      	bne.n	8003700 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036d2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff fe36 	bl	800336c <HAL_I2C_MemTxCpltCallback>
}
 8003700:	bf00      	nop
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b22      	cmp	r3, #34	; 0x22
 800371a:	f040 80ac 	bne.w	8003876 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003722:	b29b      	uxth	r3, r3
 8003724:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d921      	bls.n	8003770 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b03      	cmp	r3, #3
 800375a:	f040 808c 	bne.w	8003876 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800376e:	e082      	b.n	8003876 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	2b02      	cmp	r3, #2
 8003776:	d075      	beq.n	8003864 <I2C_MasterReceive_RXNE+0x15c>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d002      	beq.n	8003784 <I2C_MasterReceive_RXNE+0x7c>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d16f      	bne.n	8003864 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f001 fafd 	bl	8004d84 <I2C_WaitOnSTOPRequestThroughIT>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d142      	bne.n	8003816 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800379e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037ae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b40      	cmp	r3, #64	; 0x40
 80037e8:	d10a      	bne.n	8003800 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff fdc1 	bl	8003380 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80037fe:	e03a      	b.n	8003876 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2212      	movs	r2, #18
 800380c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff fd76 	bl	8003300 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003814:	e02f      	b.n	8003876 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003824:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003842:	b29b      	uxth	r3, r3
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff fd99 	bl	8003394 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003862:	e008      	b.n	8003876 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003872:	605a      	str	r2, [r3, #4]
}
 8003874:	e7ff      	b.n	8003876 <I2C_MasterReceive_RXNE+0x16e>
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b04      	cmp	r3, #4
 8003894:	d11b      	bne.n	80038ce <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80038cc:	e0bd      	b.n	8003a4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d129      	bne.n	800392c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d00a      	beq.n	8003904 <I2C_MasterReceive_BTF+0x86>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d007      	beq.n	8003904 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003902:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800392a:	e08e      	b.n	8003a4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d176      	bne.n	8003a24 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d002      	beq.n	8003942 <I2C_MasterReceive_BTF+0xc4>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b10      	cmp	r3, #16
 8003940:	d108      	bne.n	8003954 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	e019      	b.n	8003988 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2b04      	cmp	r3, #4
 8003958:	d002      	beq.n	8003960 <I2C_MasterReceive_BTF+0xe2>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d108      	bne.n	8003972 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e00a      	b.n	8003988 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b10      	cmp	r3, #16
 8003976:	d007      	beq.n	8003988 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003986:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039e2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b40      	cmp	r3, #64	; 0x40
 80039f6:	d10a      	bne.n	8003a0e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff fcba 	bl	8003380 <HAL_I2C_MemRxCpltCallback>
}
 8003a0c:	e01d      	b.n	8003a4a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2212      	movs	r2, #18
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff fc6f 	bl	8003300 <HAL_I2C_MasterRxCpltCallback>
}
 8003a22:	e012      	b.n	8003a4a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a4a:	bf00      	nop
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d117      	bne.n	8003a96 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d109      	bne.n	8003a82 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	461a      	mov	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a7e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003a80:	e067      	b.n	8003b52 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	611a      	str	r2, [r3, #16]
}
 8003a94:	e05d      	b.n	8003b52 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a9e:	d133      	bne.n	8003b08 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b21      	cmp	r3, #33	; 0x21
 8003aaa:	d109      	bne.n	8003ac0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003abc:	611a      	str	r2, [r3, #16]
 8003abe:	e008      	b.n	8003ad2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d004      	beq.n	8003ae4 <I2C_Master_SB+0x92>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d108      	bne.n	8003af6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d032      	beq.n	8003b52 <I2C_Master_SB+0x100>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d02d      	beq.n	8003b52 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b04:	605a      	str	r2, [r3, #4]
}
 8003b06:	e024      	b.n	8003b52 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10e      	bne.n	8003b2e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	11db      	asrs	r3, r3, #7
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	f003 0306 	and.w	r3, r3, #6
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	f063 030f 	orn	r3, r3, #15
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	611a      	str	r2, [r3, #16]
}
 8003b2c:	e011      	b.n	8003b52 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d10d      	bne.n	8003b52 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	11db      	asrs	r3, r3, #7
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f003 0306 	and.w	r3, r3, #6
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f063 030e 	orn	r3, r3, #14
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	611a      	str	r2, [r3, #16]
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d004      	beq.n	8003b84 <I2C_Master_ADD10+0x26>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d108      	bne.n	8003b96 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00c      	beq.n	8003ba6 <I2C_Master_ADD10+0x48>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ba4:	605a      	str	r2, [r3, #4]
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b091      	sub	sp, #68	; 0x44
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b22      	cmp	r3, #34	; 0x22
 8003bda:	f040 8169 	bne.w	8003eb0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10f      	bne.n	8003c06 <I2C_Master_ADDR+0x54>
 8003be6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003bea:	2b40      	cmp	r3, #64	; 0x40
 8003bec:	d10b      	bne.n	8003c06 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bee:	2300      	movs	r3, #0
 8003bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	633b      	str	r3, [r7, #48]	; 0x30
 8003c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c04:	e160      	b.n	8003ec8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d11d      	bne.n	8003c4a <I2C_Master_ADDR+0x98>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c16:	d118      	bne.n	8003c4a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c18:	2300      	movs	r3, #0
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c3c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	651a      	str	r2, [r3, #80]	; 0x50
 8003c48:	e13e      	b.n	8003ec8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d113      	bne.n	8003c7c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c54:	2300      	movs	r3, #0
 8003c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c68:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	e115      	b.n	8003ea8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	f040 808a 	bne.w	8003d9c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c8e:	d137      	bne.n	8003d00 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c9e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cae:	d113      	bne.n	8003cd8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cbe:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	e0e7      	b.n	8003ea8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd8:	2300      	movs	r3, #0
 8003cda:	623b      	str	r3, [r7, #32]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	623b      	str	r3, [r7, #32]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	623b      	str	r3, [r7, #32]
 8003cec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	e0d3      	b.n	8003ea8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d02e      	beq.n	8003d64 <I2C_Master_ADDR+0x1b2>
 8003d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d02b      	beq.n	8003d64 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0e:	2b12      	cmp	r3, #18
 8003d10:	d102      	bne.n	8003d18 <I2C_Master_ADDR+0x166>
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d125      	bne.n	8003d64 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d00e      	beq.n	8003d3c <I2C_Master_ADDR+0x18a>
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d00b      	beq.n	8003d3c <I2C_Master_ADDR+0x18a>
 8003d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d26:	2b10      	cmp	r3, #16
 8003d28:	d008      	beq.n	8003d3c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	e007      	b.n	8003d4c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d4a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61fb      	str	r3, [r7, #28]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	61fb      	str	r3, [r7, #28]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	61fb      	str	r3, [r7, #28]
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	e0a1      	b.n	8003ea8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d72:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d74:	2300      	movs	r3, #0
 8003d76:	61bb      	str	r3, [r7, #24]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	61bb      	str	r3, [r7, #24]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	e085      	b.n	8003ea8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d14d      	bne.n	8003e42 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d016      	beq.n	8003dda <I2C_Master_ADDR+0x228>
 8003dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d013      	beq.n	8003dda <I2C_Master_ADDR+0x228>
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db4:	2b10      	cmp	r3, #16
 8003db6:	d010      	beq.n	8003dda <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	e007      	b.n	8003dea <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003de8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df8:	d117      	bne.n	8003e2a <I2C_Master_ADDR+0x278>
 8003dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e00:	d00b      	beq.n	8003e1a <I2C_Master_ADDR+0x268>
 8003e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d008      	beq.n	8003e1a <I2C_Master_ADDR+0x268>
 8003e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d005      	beq.n	8003e1a <I2C_Master_ADDR+0x268>
 8003e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e10:	2b10      	cmp	r3, #16
 8003e12:	d002      	beq.n	8003e1a <I2C_Master_ADDR+0x268>
 8003e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d107      	bne.n	8003e2a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e28:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	e032      	b.n	8003ea8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e50:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e60:	d117      	bne.n	8003e92 <I2C_Master_ADDR+0x2e0>
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e68:	d00b      	beq.n	8003e82 <I2C_Master_ADDR+0x2d0>
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d008      	beq.n	8003e82 <I2C_Master_ADDR+0x2d0>
 8003e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d005      	beq.n	8003e82 <I2C_Master_ADDR+0x2d0>
 8003e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e78:	2b10      	cmp	r3, #16
 8003e7a:	d002      	beq.n	8003e82 <I2C_Master_ADDR+0x2d0>
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7e:	2b20      	cmp	r3, #32
 8003e80:	d107      	bne.n	8003e92 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e90:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e92:	2300      	movs	r3, #0
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003eae:	e00b      	b.n	8003ec8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
}
 8003ec6:	e7ff      	b.n	8003ec8 <I2C_Master_ADDR+0x316>
 8003ec8:	bf00      	nop
 8003eca:	3744      	adds	r7, #68	; 0x44
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02b      	beq.n	8003f46 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	781a      	ldrb	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d114      	bne.n	8003f46 <I2C_SlaveTransmit_TXE+0x72>
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2b29      	cmp	r3, #41	; 0x29
 8003f20:	d111      	bne.n	8003f46 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f30:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2221      	movs	r2, #33	; 0x21
 8003f36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2228      	movs	r2, #40	; 0x28
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff f9e7 	bl	8003314 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f46:	bf00      	nop
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d011      	beq.n	8003f84 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	781a      	ldrb	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d02c      	beq.n	8004004 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d114      	bne.n	8004004 <I2C_SlaveReceive_RXNE+0x74>
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8003fde:	d111      	bne.n	8004004 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2222      	movs	r2, #34	; 0x22
 8003ff4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2228      	movs	r2, #40	; 0x28
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff f992 	bl	8003328 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004004:	bf00      	nop
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d012      	beq.n	8004044 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403a:	b29b      	uxth	r3, r3
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800405a:	2300      	movs	r3, #0
 800405c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004064:	b2db      	uxtb	r3, r3
 8004066:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800406a:	2b28      	cmp	r3, #40	; 0x28
 800406c:	d127      	bne.n	80040be <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800407c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	089b      	lsrs	r3, r3, #2
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800408a:	2301      	movs	r3, #1
 800408c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	09db      	lsrs	r3, r3, #7
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d103      	bne.n	80040a2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	81bb      	strh	r3, [r7, #12]
 80040a0:	e002      	b.n	80040a8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80040b0:	89ba      	ldrh	r2, [r7, #12]
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	4619      	mov	r1, r3
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff f940 	bl	800333c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80040bc:	e00e      	b.n	80040dc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040be:	2300      	movs	r3, #0
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80040dc:	bf00      	nop
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004102:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004104:	2300      	movs	r3, #0
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	60bb      	str	r3, [r7, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0201 	orr.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004130:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800413c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004140:	d172      	bne.n	8004228 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	2b22      	cmp	r3, #34	; 0x22
 8004146:	d002      	beq.n	800414e <I2C_Slave_STOPF+0x6a>
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b2a      	cmp	r3, #42	; 0x2a
 800414c:	d135      	bne.n	80041ba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	b29a      	uxth	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d005      	beq.n	8004172 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f043 0204 	orr.w	r2, r3, #4
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004180:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004186:	4618      	mov	r0, r3
 8004188:	f7fe f887 	bl	800229a <HAL_DMA_GetState>
 800418c:	4603      	mov	r3, r0
 800418e:	2b01      	cmp	r3, #1
 8004190:	d049      	beq.n	8004226 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	4a69      	ldr	r2, [pc, #420]	; (800433c <I2C_Slave_STOPF+0x258>)
 8004198:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe f859 	bl	8002256 <HAL_DMA_Abort_IT>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d03d      	beq.n	8004226 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041b4:	4610      	mov	r0, r2
 80041b6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041b8:	e035      	b.n	8004226 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d005      	beq.n	80041de <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f043 0204 	orr.w	r2, r3, #4
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe f851 	bl	800229a <HAL_DMA_GetState>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d014      	beq.n	8004228 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004202:	4a4e      	ldr	r2, [pc, #312]	; (800433c <I2C_Slave_STOPF+0x258>)
 8004204:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe f823 	bl	8002256 <HAL_DMA_Abort_IT>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d008      	beq.n	8004228 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004220:	4610      	mov	r0, r2
 8004222:	4798      	blx	r3
 8004224:	e000      	b.n	8004228 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004226:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d03e      	beq.n	80042b0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b04      	cmp	r3, #4
 800423e:	d112      	bne.n	8004266 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004270:	2b40      	cmp	r3, #64	; 0x40
 8004272:	d112      	bne.n	800429a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	f043 0204 	orr.w	r2, r3, #4
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f8b3 	bl	8004424 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80042be:	e039      	b.n	8004334 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	2b2a      	cmp	r3, #42	; 0x2a
 80042c4:	d109      	bne.n	80042da <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2228      	movs	r2, #40	; 0x28
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff f827 	bl	8003328 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b28      	cmp	r3, #40	; 0x28
 80042e4:	d111      	bne.n	800430a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a15      	ldr	r2, [pc, #84]	; (8004340 <I2C_Slave_STOPF+0x25c>)
 80042ea:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff f828 	bl	8003358 <HAL_I2C_ListenCpltCallback>
}
 8004308:	e014      	b.n	8004334 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	2b22      	cmp	r3, #34	; 0x22
 8004310:	d002      	beq.n	8004318 <I2C_Slave_STOPF+0x234>
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	2b22      	cmp	r3, #34	; 0x22
 8004316:	d10d      	bne.n	8004334 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2220      	movs	r2, #32
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fe fffa 	bl	8003328 <HAL_I2C_SlaveRxCpltCallback>
}
 8004334:	bf00      	nop
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	08004985 	.word	0x08004985
 8004340:	ffff0000 	.word	0xffff0000

08004344 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004352:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b08      	cmp	r3, #8
 800435e:	d002      	beq.n	8004366 <I2C_Slave_AF+0x22>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b20      	cmp	r3, #32
 8004364:	d129      	bne.n	80043ba <I2C_Slave_AF+0x76>
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2b28      	cmp	r3, #40	; 0x28
 800436a:	d126      	bne.n	80043ba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a2c      	ldr	r2, [pc, #176]	; (8004420 <I2C_Slave_AF+0xdc>)
 8004370:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004380:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800438a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800439a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fe ffd0 	bl	8003358 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80043b8:	e02e      	b.n	8004418 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	2b21      	cmp	r3, #33	; 0x21
 80043be:	d126      	bne.n	800440e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a17      	ldr	r2, [pc, #92]	; (8004420 <I2C_Slave_AF+0xdc>)
 80043c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2221      	movs	r2, #33	; 0x21
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043ea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043f4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004404:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fe ff84 	bl	8003314 <HAL_I2C_SlaveTxCpltCallback>
}
 800440c:	e004      	b.n	8004418 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004416:	615a      	str	r2, [r3, #20]
}
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	ffff0000 	.word	0xffff0000

08004424 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004432:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800443a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800443c:	7bbb      	ldrb	r3, [r7, #14]
 800443e:	2b10      	cmp	r3, #16
 8004440:	d002      	beq.n	8004448 <I2C_ITError+0x24>
 8004442:	7bbb      	ldrb	r3, [r7, #14]
 8004444:	2b40      	cmp	r3, #64	; 0x40
 8004446:	d10a      	bne.n	800445e <I2C_ITError+0x3a>
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	2b22      	cmp	r3, #34	; 0x22
 800444c:	d107      	bne.n	800445e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800445c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004464:	2b28      	cmp	r3, #40	; 0x28
 8004466:	d107      	bne.n	8004478 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2228      	movs	r2, #40	; 0x28
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004476:	e015      	b.n	80044a4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004486:	d00a      	beq.n	800449e <I2C_ITError+0x7a>
 8004488:	7bfb      	ldrb	r3, [r7, #15]
 800448a:	2b60      	cmp	r3, #96	; 0x60
 800448c:	d007      	beq.n	800449e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b2:	d162      	bne.n	800457a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d020      	beq.n	8004514 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d6:	4a6a      	ldr	r2, [pc, #424]	; (8004680 <I2C_ITError+0x25c>)
 80044d8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fd feb9 	bl	8002256 <HAL_DMA_Abort_IT>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 8089 	beq.w	80045fe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0201 	bic.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800450e:	4610      	mov	r0, r2
 8004510:	4798      	blx	r3
 8004512:	e074      	b.n	80045fe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	4a59      	ldr	r2, [pc, #356]	; (8004680 <I2C_ITError+0x25c>)
 800451a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	4618      	mov	r0, r3
 8004522:	f7fd fe98 	bl	8002256 <HAL_DMA_Abort_IT>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d068      	beq.n	80045fe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004536:	2b40      	cmp	r3, #64	; 0x40
 8004538:	d10b      	bne.n	8004552 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0201 	bic.w	r2, r2, #1
 8004560:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004574:	4610      	mov	r0, r2
 8004576:	4798      	blx	r3
 8004578:	e041      	b.n	80045fe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b60      	cmp	r3, #96	; 0x60
 8004584:	d125      	bne.n	80045d2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459e:	2b40      	cmp	r3, #64	; 0x40
 80045a0:	d10b      	bne.n	80045ba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0201 	bic.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fe feec 	bl	80033a8 <HAL_I2C_AbortCpltCallback>
 80045d0:	e015      	b.n	80045fe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d10b      	bne.n	80045f8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7fe fecb 	bl	8003394 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10e      	bne.n	800462c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004614:	2b00      	cmp	r3, #0
 8004616:	d109      	bne.n	800462c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800461e:	2b00      	cmp	r3, #0
 8004620:	d104      	bne.n	800462c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004628:	2b00      	cmp	r3, #0
 800462a:	d007      	beq.n	800463c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800463a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004642:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b04      	cmp	r3, #4
 800464e:	d113      	bne.n	8004678 <I2C_ITError+0x254>
 8004650:	7bfb      	ldrb	r3, [r7, #15]
 8004652:	2b28      	cmp	r3, #40	; 0x28
 8004654:	d110      	bne.n	8004678 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <I2C_ITError+0x260>)
 800465a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fe fe70 	bl	8003358 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004678:	bf00      	nop
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	08004985 	.word	0x08004985
 8004684:	ffff0000 	.word	0xffff0000

08004688 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af02      	add	r7, sp, #8
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	4608      	mov	r0, r1
 8004692:	4611      	mov	r1, r2
 8004694:	461a      	mov	r2, r3
 8004696:	4603      	mov	r3, r0
 8004698:	817b      	strh	r3, [r7, #10]
 800469a:	460b      	mov	r3, r1
 800469c:	813b      	strh	r3, [r7, #8]
 800469e:	4613      	mov	r3, r2
 80046a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 fa08 	bl	8004ad4 <I2C_WaitOnFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00d      	beq.n	80046e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d8:	d103      	bne.n	80046e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e05f      	b.n	80047a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046e6:	897b      	ldrh	r3, [r7, #10]
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	461a      	mov	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	6a3a      	ldr	r2, [r7, #32]
 80046fa:	492d      	ldr	r1, [pc, #180]	; (80047b0 <I2C_RequestMemoryWrite+0x128>)
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 fa40 	bl	8004b82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e04c      	b.n	80047a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004724:	6a39      	ldr	r1, [r7, #32]
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 faaa 	bl	8004c80 <I2C_WaitOnTXEFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00d      	beq.n	800474e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	2b04      	cmp	r3, #4
 8004738:	d107      	bne.n	800474a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004748:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e02b      	b.n	80047a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800474e:	88fb      	ldrh	r3, [r7, #6]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d105      	bne.n	8004760 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004754:	893b      	ldrh	r3, [r7, #8]
 8004756:	b2da      	uxtb	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	611a      	str	r2, [r3, #16]
 800475e:	e021      	b.n	80047a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004760:	893b      	ldrh	r3, [r7, #8]
 8004762:	0a1b      	lsrs	r3, r3, #8
 8004764:	b29b      	uxth	r3, r3
 8004766:	b2da      	uxtb	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800476e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004770:	6a39      	ldr	r1, [r7, #32]
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 fa84 	bl	8004c80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00d      	beq.n	800479a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	2b04      	cmp	r3, #4
 8004784:	d107      	bne.n	8004796 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004794:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e005      	b.n	80047a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800479a:	893b      	ldrh	r3, [r7, #8]
 800479c:	b2da      	uxtb	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	00010002 	.word	0x00010002

080047b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	4608      	mov	r0, r1
 80047be:	4611      	mov	r1, r2
 80047c0:	461a      	mov	r2, r3
 80047c2:	4603      	mov	r3, r0
 80047c4:	817b      	strh	r3, [r7, #10]
 80047c6:	460b      	mov	r3, r1
 80047c8:	813b      	strh	r3, [r7, #8]
 80047ca:	4613      	mov	r3, r2
 80047cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f96a 	bl	8004ad4 <I2C_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00d      	beq.n	8004822 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004814:	d103      	bne.n	800481e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e0aa      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004822:	897b      	ldrh	r3, [r7, #10]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	461a      	mov	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004830:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	6a3a      	ldr	r2, [r7, #32]
 8004836:	4952      	ldr	r1, [pc, #328]	; (8004980 <I2C_RequestMemoryRead+0x1cc>)
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 f9a2 	bl	8004b82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e097      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800485e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004860:	6a39      	ldr	r1, [r7, #32]
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 fa0c 	bl	8004c80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00d      	beq.n	800488a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	2b04      	cmp	r3, #4
 8004874:	d107      	bne.n	8004886 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004884:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e076      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d105      	bne.n	800489c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004890:	893b      	ldrh	r3, [r7, #8]
 8004892:	b2da      	uxtb	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	611a      	str	r2, [r3, #16]
 800489a:	e021      	b.n	80048e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800489c:	893b      	ldrh	r3, [r7, #8]
 800489e:	0a1b      	lsrs	r3, r3, #8
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ac:	6a39      	ldr	r1, [r7, #32]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 f9e6 	bl	8004c80 <I2C_WaitOnTXEFlagUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00d      	beq.n	80048d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d107      	bne.n	80048d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e050      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048d6:	893b      	ldrh	r3, [r7, #8]
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e2:	6a39      	ldr	r1, [r7, #32]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f9cb 	bl	8004c80 <I2C_WaitOnTXEFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00d      	beq.n	800490c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d107      	bne.n	8004908 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004906:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e035      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800491a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	2200      	movs	r2, #0
 8004924:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 f8d3 	bl	8004ad4 <I2C_WaitOnFlagUntilTimeout>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00d      	beq.n	8004950 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004942:	d103      	bne.n	800494c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800494a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e013      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004950:	897b      	ldrh	r3, [r7, #10]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	b2da      	uxtb	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	6a3a      	ldr	r2, [r7, #32]
 8004964:	4906      	ldr	r1, [pc, #24]	; (8004980 <I2C_RequestMemoryRead+0x1cc>)
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f90b 	bl	8004b82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	00010002 	.word	0x00010002

08004984 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800499e:	4b4b      	ldr	r3, [pc, #300]	; (8004acc <I2C_DMAAbort+0x148>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	08db      	lsrs	r3, r3, #3
 80049a4:	4a4a      	ldr	r2, [pc, #296]	; (8004ad0 <I2C_DMAAbort+0x14c>)
 80049a6:	fba2 2303 	umull	r2, r3, r2, r3
 80049aa:	0a1a      	lsrs	r2, r3, #8
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	00da      	lsls	r2, r3, #3
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	f043 0220 	orr.w	r2, r3, #32
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80049ca:	e00a      	b.n	80049e2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e0:	d0ea      	beq.n	80049b8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ee:	2200      	movs	r2, #0
 80049f0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	2200      	movs	r2, #0
 8004a00:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a10:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2200      	movs	r2, #0
 8004a16:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a24:	2200      	movs	r2, #0
 8004a26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	2200      	movs	r2, #0
 8004a36:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0201 	bic.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b60      	cmp	r3, #96	; 0x60
 8004a52:	d10e      	bne.n	8004a72 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2200      	movs	r2, #0
 8004a68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a6a:	6978      	ldr	r0, [r7, #20]
 8004a6c:	f7fe fc9c 	bl	80033a8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a70:	e027      	b.n	8004ac2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a72:	7cfb      	ldrb	r3, [r7, #19]
 8004a74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a78:	2b28      	cmp	r3, #40	; 0x28
 8004a7a:	d117      	bne.n	8004aac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0201 	orr.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a9a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2228      	movs	r2, #40	; 0x28
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004aaa:	e007      	b.n	8004abc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004abc:	6978      	ldr	r0, [r7, #20]
 8004abe:	f7fe fc69 	bl	8003394 <HAL_I2C_ErrorCallback>
}
 8004ac2:	bf00      	nop
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000000 	.word	0x20000000
 8004ad0:	14f8b589 	.word	0x14f8b589

08004ad4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ae4:	e025      	b.n	8004b32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aec:	d021      	beq.n	8004b32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aee:	f7fd fa01 	bl	8001ef4 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d302      	bcc.n	8004b04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d116      	bne.n	8004b32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f043 0220 	orr.w	r2, r3, #32
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e023      	b.n	8004b7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	0c1b      	lsrs	r3, r3, #16
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d10d      	bne.n	8004b58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	43da      	mvns	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	4013      	ands	r3, r2
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	bf0c      	ite	eq
 8004b4e:	2301      	moveq	r3, #1
 8004b50:	2300      	movne	r3, #0
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	e00c      	b.n	8004b72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	43da      	mvns	r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	4013      	ands	r3, r2
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	bf0c      	ite	eq
 8004b6a:	2301      	moveq	r3, #1
 8004b6c:	2300      	movne	r3, #0
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	461a      	mov	r2, r3
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d0b6      	beq.n	8004ae6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b084      	sub	sp, #16
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	607a      	str	r2, [r7, #4]
 8004b8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b90:	e051      	b.n	8004c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba0:	d123      	bne.n	8004bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	f043 0204 	orr.w	r2, r3, #4
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e046      	b.n	8004c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bf0:	d021      	beq.n	8004c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf2:	f7fd f97f 	bl	8001ef4 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d302      	bcc.n	8004c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d116      	bne.n	8004c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f043 0220 	orr.w	r2, r3, #32
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e020      	b.n	8004c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	0c1b      	lsrs	r3, r3, #16
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d10c      	bne.n	8004c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	43da      	mvns	r2, r3
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	bf14      	ite	ne
 8004c52:	2301      	movne	r3, #1
 8004c54:	2300      	moveq	r3, #0
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	e00b      	b.n	8004c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	43da      	mvns	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	4013      	ands	r3, r2
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	bf14      	ite	ne
 8004c6c:	2301      	movne	r3, #1
 8004c6e:	2300      	moveq	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d18d      	bne.n	8004b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c8c:	e02d      	b.n	8004cea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 f900 	bl	8004e94 <I2C_IsAcknowledgeFailed>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e02d      	b.n	8004cfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ca4:	d021      	beq.n	8004cea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca6:	f7fd f925 	bl	8001ef4 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d302      	bcc.n	8004cbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d116      	bne.n	8004cea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	f043 0220 	orr.w	r2, r3, #32
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e007      	b.n	8004cfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf4:	2b80      	cmp	r3, #128	; 0x80
 8004cf6:	d1ca      	bne.n	8004c8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d0e:	e02d      	b.n	8004d6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f8bf 	bl	8004e94 <I2C_IsAcknowledgeFailed>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e02d      	b.n	8004d7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d26:	d021      	beq.n	8004d6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d28:	f7fd f8e4 	bl	8001ef4 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d302      	bcc.n	8004d3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d116      	bne.n	8004d6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	f043 0220 	orr.w	r2, r3, #32
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e007      	b.n	8004d7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d1ca      	bne.n	8004d10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d90:	4b13      	ldr	r3, [pc, #76]	; (8004de0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	08db      	lsrs	r3, r3, #3
 8004d96:	4a13      	ldr	r2, [pc, #76]	; (8004de4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d98:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9c:	0a1a      	lsrs	r2, r3, #8
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3b01      	subs	r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d107      	bne.n	8004dc2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	f043 0220 	orr.w	r2, r3, #32
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e008      	b.n	8004dd4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd0:	d0e9      	beq.n	8004da6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	20000000 	.word	0x20000000
 8004de4:	14f8b589 	.word	0x14f8b589

08004de8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004df4:	e042      	b.n	8004e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	2b10      	cmp	r3, #16
 8004e02:	d119      	bne.n	8004e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0210 	mvn.w	r2, #16
 8004e0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e029      	b.n	8004e8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e38:	f7fd f85c 	bl	8001ef4 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d302      	bcc.n	8004e4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d116      	bne.n	8004e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	f043 0220 	orr.w	r2, r3, #32
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e007      	b.n	8004e8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e86:	2b40      	cmp	r3, #64	; 0x40
 8004e88:	d1b5      	bne.n	8004df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eaa:	d11b      	bne.n	8004ee4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004eb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	f043 0204 	orr.w	r2, r3, #4
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efe:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004f02:	d103      	bne.n	8004f0c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f0a:	e007      	b.n	8004f1c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004f14:	d102      	bne.n	8004f1c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2208      	movs	r2, #8
 8004f1a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e267      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d075      	beq.n	8005032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f46:	4b88      	ldr	r3, [pc, #544]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 030c 	and.w	r3, r3, #12
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d00c      	beq.n	8004f6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f52:	4b85      	ldr	r3, [pc, #532]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d112      	bne.n	8004f84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f5e:	4b82      	ldr	r3, [pc, #520]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f6a:	d10b      	bne.n	8004f84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f6c:	4b7e      	ldr	r3, [pc, #504]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d05b      	beq.n	8005030 <HAL_RCC_OscConfig+0x108>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d157      	bne.n	8005030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e242      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f8c:	d106      	bne.n	8004f9c <HAL_RCC_OscConfig+0x74>
 8004f8e:	4b76      	ldr	r3, [pc, #472]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a75      	ldr	r2, [pc, #468]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	e01d      	b.n	8004fd8 <HAL_RCC_OscConfig+0xb0>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fa4:	d10c      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x98>
 8004fa6:	4b70      	ldr	r3, [pc, #448]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a6f      	ldr	r2, [pc, #444]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	4b6d      	ldr	r3, [pc, #436]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a6c      	ldr	r2, [pc, #432]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	e00b      	b.n	8004fd8 <HAL_RCC_OscConfig+0xb0>
 8004fc0:	4b69      	ldr	r3, [pc, #420]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a68      	ldr	r2, [pc, #416]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	4b66      	ldr	r3, [pc, #408]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a65      	ldr	r2, [pc, #404]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d013      	beq.n	8005008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe0:	f7fc ff88 	bl	8001ef4 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fe8:	f7fc ff84 	bl	8001ef4 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b64      	cmp	r3, #100	; 0x64
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e207      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffa:	4b5b      	ldr	r3, [pc, #364]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f0      	beq.n	8004fe8 <HAL_RCC_OscConfig+0xc0>
 8005006:	e014      	b.n	8005032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005008:	f7fc ff74 	bl	8001ef4 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005010:	f7fc ff70 	bl	8001ef4 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b64      	cmp	r3, #100	; 0x64
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e1f3      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005022:	4b51      	ldr	r3, [pc, #324]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f0      	bne.n	8005010 <HAL_RCC_OscConfig+0xe8>
 800502e:	e000      	b.n	8005032 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d063      	beq.n	8005106 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800503e:	4b4a      	ldr	r3, [pc, #296]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 030c 	and.w	r3, r3, #12
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800504a:	4b47      	ldr	r3, [pc, #284]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005052:	2b08      	cmp	r3, #8
 8005054:	d11c      	bne.n	8005090 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005056:	4b44      	ldr	r3, [pc, #272]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d116      	bne.n	8005090 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005062:	4b41      	ldr	r3, [pc, #260]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <HAL_RCC_OscConfig+0x152>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d001      	beq.n	800507a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e1c7      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507a:	4b3b      	ldr	r3, [pc, #236]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	4937      	ldr	r1, [pc, #220]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 800508a:	4313      	orrs	r3, r2
 800508c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800508e:	e03a      	b.n	8005106 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d020      	beq.n	80050da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005098:	4b34      	ldr	r3, [pc, #208]	; (800516c <HAL_RCC_OscConfig+0x244>)
 800509a:	2201      	movs	r2, #1
 800509c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509e:	f7fc ff29 	bl	8001ef4 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050a6:	f7fc ff25 	bl	8001ef4 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e1a8      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b8:	4b2b      	ldr	r3, [pc, #172]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0f0      	beq.n	80050a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c4:	4b28      	ldr	r3, [pc, #160]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	4925      	ldr	r1, [pc, #148]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	600b      	str	r3, [r1, #0]
 80050d8:	e015      	b.n	8005106 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050da:	4b24      	ldr	r3, [pc, #144]	; (800516c <HAL_RCC_OscConfig+0x244>)
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e0:	f7fc ff08 	bl	8001ef4 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050e8:	f7fc ff04 	bl	8001ef4 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e187      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050fa:	4b1b      	ldr	r3, [pc, #108]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b00      	cmp	r3, #0
 8005110:	d036      	beq.n	8005180 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d016      	beq.n	8005148 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800511a:	4b15      	ldr	r3, [pc, #84]	; (8005170 <HAL_RCC_OscConfig+0x248>)
 800511c:	2201      	movs	r2, #1
 800511e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005120:	f7fc fee8 	bl	8001ef4 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005128:	f7fc fee4 	bl	8001ef4 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e167      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800513a:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 800513c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0f0      	beq.n	8005128 <HAL_RCC_OscConfig+0x200>
 8005146:	e01b      	b.n	8005180 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005148:	4b09      	ldr	r3, [pc, #36]	; (8005170 <HAL_RCC_OscConfig+0x248>)
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800514e:	f7fc fed1 	bl	8001ef4 <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005154:	e00e      	b.n	8005174 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005156:	f7fc fecd 	bl	8001ef4 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d907      	bls.n	8005174 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e150      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
 8005168:	40023800 	.word	0x40023800
 800516c:	42470000 	.word	0x42470000
 8005170:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005174:	4b88      	ldr	r3, [pc, #544]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1ea      	bne.n	8005156 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 8097 	beq.w	80052bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800518e:	2300      	movs	r3, #0
 8005190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005192:	4b81      	ldr	r3, [pc, #516]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10f      	bne.n	80051be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800519e:	2300      	movs	r3, #0
 80051a0:	60bb      	str	r3, [r7, #8]
 80051a2:	4b7d      	ldr	r3, [pc, #500]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	4a7c      	ldr	r2, [pc, #496]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 80051a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ac:	6413      	str	r3, [r2, #64]	; 0x40
 80051ae:	4b7a      	ldr	r3, [pc, #488]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b6:	60bb      	str	r3, [r7, #8]
 80051b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ba:	2301      	movs	r3, #1
 80051bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051be:	4b77      	ldr	r3, [pc, #476]	; (800539c <HAL_RCC_OscConfig+0x474>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d118      	bne.n	80051fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ca:	4b74      	ldr	r3, [pc, #464]	; (800539c <HAL_RCC_OscConfig+0x474>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a73      	ldr	r2, [pc, #460]	; (800539c <HAL_RCC_OscConfig+0x474>)
 80051d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051d6:	f7fc fe8d 	bl	8001ef4 <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051dc:	e008      	b.n	80051f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051de:	f7fc fe89 	bl	8001ef4 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e10c      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f0:	4b6a      	ldr	r3, [pc, #424]	; (800539c <HAL_RCC_OscConfig+0x474>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0f0      	beq.n	80051de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d106      	bne.n	8005212 <HAL_RCC_OscConfig+0x2ea>
 8005204:	4b64      	ldr	r3, [pc, #400]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005208:	4a63      	ldr	r2, [pc, #396]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	6713      	str	r3, [r2, #112]	; 0x70
 8005210:	e01c      	b.n	800524c <HAL_RCC_OscConfig+0x324>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2b05      	cmp	r3, #5
 8005218:	d10c      	bne.n	8005234 <HAL_RCC_OscConfig+0x30c>
 800521a:	4b5f      	ldr	r3, [pc, #380]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 800521c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521e:	4a5e      	ldr	r2, [pc, #376]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005220:	f043 0304 	orr.w	r3, r3, #4
 8005224:	6713      	str	r3, [r2, #112]	; 0x70
 8005226:	4b5c      	ldr	r3, [pc, #368]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	4a5b      	ldr	r2, [pc, #364]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 800522c:	f043 0301 	orr.w	r3, r3, #1
 8005230:	6713      	str	r3, [r2, #112]	; 0x70
 8005232:	e00b      	b.n	800524c <HAL_RCC_OscConfig+0x324>
 8005234:	4b58      	ldr	r3, [pc, #352]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005238:	4a57      	ldr	r2, [pc, #348]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 800523a:	f023 0301 	bic.w	r3, r3, #1
 800523e:	6713      	str	r3, [r2, #112]	; 0x70
 8005240:	4b55      	ldr	r3, [pc, #340]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005244:	4a54      	ldr	r2, [pc, #336]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005246:	f023 0304 	bic.w	r3, r3, #4
 800524a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d015      	beq.n	8005280 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005254:	f7fc fe4e 	bl	8001ef4 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800525a:	e00a      	b.n	8005272 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800525c:	f7fc fe4a 	bl	8001ef4 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	f241 3288 	movw	r2, #5000	; 0x1388
 800526a:	4293      	cmp	r3, r2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e0cb      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005272:	4b49      	ldr	r3, [pc, #292]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0ee      	beq.n	800525c <HAL_RCC_OscConfig+0x334>
 800527e:	e014      	b.n	80052aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005280:	f7fc fe38 	bl	8001ef4 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005286:	e00a      	b.n	800529e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005288:	f7fc fe34 	bl	8001ef4 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	f241 3288 	movw	r2, #5000	; 0x1388
 8005296:	4293      	cmp	r3, r2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e0b5      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800529e:	4b3e      	ldr	r3, [pc, #248]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 80052a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1ee      	bne.n	8005288 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052aa:	7dfb      	ldrb	r3, [r7, #23]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d105      	bne.n	80052bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052b0:	4b39      	ldr	r3, [pc, #228]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 80052b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b4:	4a38      	ldr	r2, [pc, #224]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 80052b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 80a1 	beq.w	8005408 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052c6:	4b34      	ldr	r3, [pc, #208]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 030c 	and.w	r3, r3, #12
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d05c      	beq.n	800538c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d141      	bne.n	800535e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052da:	4b31      	ldr	r3, [pc, #196]	; (80053a0 <HAL_RCC_OscConfig+0x478>)
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e0:	f7fc fe08 	bl	8001ef4 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052e8:	f7fc fe04 	bl	8001ef4 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e087      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fa:	4b27      	ldr	r3, [pc, #156]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f0      	bne.n	80052e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69da      	ldr	r2, [r3, #28]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	019b      	lsls	r3, r3, #6
 8005316:	431a      	orrs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531c:	085b      	lsrs	r3, r3, #1
 800531e:	3b01      	subs	r3, #1
 8005320:	041b      	lsls	r3, r3, #16
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	061b      	lsls	r3, r3, #24
 800532a:	491b      	ldr	r1, [pc, #108]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 800532c:	4313      	orrs	r3, r2
 800532e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005330:	4b1b      	ldr	r3, [pc, #108]	; (80053a0 <HAL_RCC_OscConfig+0x478>)
 8005332:	2201      	movs	r2, #1
 8005334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005336:	f7fc fddd 	bl	8001ef4 <HAL_GetTick>
 800533a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800533c:	e008      	b.n	8005350 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800533e:	f7fc fdd9 	bl	8001ef4 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e05c      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005350:	4b11      	ldr	r3, [pc, #68]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0f0      	beq.n	800533e <HAL_RCC_OscConfig+0x416>
 800535c:	e054      	b.n	8005408 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800535e:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <HAL_RCC_OscConfig+0x478>)
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005364:	f7fc fdc6 	bl	8001ef4 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800536c:	f7fc fdc2 	bl	8001ef4 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e045      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800537e:	4b06      	ldr	r3, [pc, #24]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <HAL_RCC_OscConfig+0x444>
 800538a:	e03d      	b.n	8005408 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d107      	bne.n	80053a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e038      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
 8005398:	40023800 	.word	0x40023800
 800539c:	40007000 	.word	0x40007000
 80053a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053a4:	4b1b      	ldr	r3, [pc, #108]	; (8005414 <HAL_RCC_OscConfig+0x4ec>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d028      	beq.n	8005404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053bc:	429a      	cmp	r2, r3
 80053be:	d121      	bne.n	8005404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d11a      	bne.n	8005404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053d4:	4013      	ands	r3, r2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053dc:	4293      	cmp	r3, r2
 80053de:	d111      	bne.n	8005404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ea:	085b      	lsrs	r3, r3, #1
 80053ec:	3b01      	subs	r3, #1
 80053ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d107      	bne.n	8005404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005400:	429a      	cmp	r2, r3
 8005402:	d001      	beq.n	8005408 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40023800 	.word	0x40023800

08005418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e0cc      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800542c:	4b68      	ldr	r3, [pc, #416]	; (80055d0 <HAL_RCC_ClockConfig+0x1b8>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d90c      	bls.n	8005454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800543a:	4b65      	ldr	r3, [pc, #404]	; (80055d0 <HAL_RCC_ClockConfig+0x1b8>)
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005442:	4b63      	ldr	r3, [pc, #396]	; (80055d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d001      	beq.n	8005454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e0b8      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d020      	beq.n	80054a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800546c:	4b59      	ldr	r3, [pc, #356]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	4a58      	ldr	r2, [pc, #352]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005472:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005476:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0308 	and.w	r3, r3, #8
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005484:	4b53      	ldr	r3, [pc, #332]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	4a52      	ldr	r2, [pc, #328]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800548a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800548e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005490:	4b50      	ldr	r3, [pc, #320]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	494d      	ldr	r1, [pc, #308]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d044      	beq.n	8005538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d107      	bne.n	80054c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b6:	4b47      	ldr	r3, [pc, #284]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d119      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e07f      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d003      	beq.n	80054d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d107      	bne.n	80054e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d6:	4b3f      	ldr	r3, [pc, #252]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d109      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e06f      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e6:	4b3b      	ldr	r3, [pc, #236]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e067      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054f6:	4b37      	ldr	r3, [pc, #220]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f023 0203 	bic.w	r2, r3, #3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	4934      	ldr	r1, [pc, #208]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005504:	4313      	orrs	r3, r2
 8005506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005508:	f7fc fcf4 	bl	8001ef4 <HAL_GetTick>
 800550c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800550e:	e00a      	b.n	8005526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005510:	f7fc fcf0 	bl	8001ef4 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	f241 3288 	movw	r2, #5000	; 0x1388
 800551e:	4293      	cmp	r3, r2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e04f      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005526:	4b2b      	ldr	r3, [pc, #172]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 020c 	and.w	r2, r3, #12
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	429a      	cmp	r2, r3
 8005536:	d1eb      	bne.n	8005510 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005538:	4b25      	ldr	r3, [pc, #148]	; (80055d0 <HAL_RCC_ClockConfig+0x1b8>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	d20c      	bcs.n	8005560 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005546:	4b22      	ldr	r3, [pc, #136]	; (80055d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800554e:	4b20      	ldr	r3, [pc, #128]	; (80055d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	429a      	cmp	r2, r3
 800555a:	d001      	beq.n	8005560 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e032      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b00      	cmp	r3, #0
 800556a:	d008      	beq.n	800557e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800556c:	4b19      	ldr	r3, [pc, #100]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	4916      	ldr	r1, [pc, #88]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	4313      	orrs	r3, r2
 800557c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d009      	beq.n	800559e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800558a:	4b12      	ldr	r3, [pc, #72]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	490e      	ldr	r1, [pc, #56]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	4313      	orrs	r3, r2
 800559c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800559e:	f000 f821 	bl	80055e4 <HAL_RCC_GetSysClockFreq>
 80055a2:	4602      	mov	r2, r0
 80055a4:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	091b      	lsrs	r3, r3, #4
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	490a      	ldr	r1, [pc, #40]	; (80055d8 <HAL_RCC_ClockConfig+0x1c0>)
 80055b0:	5ccb      	ldrb	r3, [r1, r3]
 80055b2:	fa22 f303 	lsr.w	r3, r2, r3
 80055b6:	4a09      	ldr	r2, [pc, #36]	; (80055dc <HAL_RCC_ClockConfig+0x1c4>)
 80055b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055ba:	4b09      	ldr	r3, [pc, #36]	; (80055e0 <HAL_RCC_ClockConfig+0x1c8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fc fc54 	bl	8001e6c <HAL_InitTick>

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	40023c00 	.word	0x40023c00
 80055d4:	40023800 	.word	0x40023800
 80055d8:	08007fb8 	.word	0x08007fb8
 80055dc:	20000000 	.word	0x20000000
 80055e0:	20000004 	.word	0x20000004

080055e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055e8:	b094      	sub	sp, #80	; 0x50
 80055ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	647b      	str	r3, [r7, #68]	; 0x44
 80055f0:	2300      	movs	r3, #0
 80055f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055f4:	2300      	movs	r3, #0
 80055f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055fc:	4b79      	ldr	r3, [pc, #484]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f003 030c 	and.w	r3, r3, #12
 8005604:	2b08      	cmp	r3, #8
 8005606:	d00d      	beq.n	8005624 <HAL_RCC_GetSysClockFreq+0x40>
 8005608:	2b08      	cmp	r3, #8
 800560a:	f200 80e1 	bhi.w	80057d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <HAL_RCC_GetSysClockFreq+0x34>
 8005612:	2b04      	cmp	r3, #4
 8005614:	d003      	beq.n	800561e <HAL_RCC_GetSysClockFreq+0x3a>
 8005616:	e0db      	b.n	80057d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005618:	4b73      	ldr	r3, [pc, #460]	; (80057e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800561a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800561c:	e0db      	b.n	80057d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800561e:	4b73      	ldr	r3, [pc, #460]	; (80057ec <HAL_RCC_GetSysClockFreq+0x208>)
 8005620:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005622:	e0d8      	b.n	80057d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005624:	4b6f      	ldr	r3, [pc, #444]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800562c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800562e:	4b6d      	ldr	r3, [pc, #436]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d063      	beq.n	8005702 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800563a:	4b6a      	ldr	r3, [pc, #424]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	099b      	lsrs	r3, r3, #6
 8005640:	2200      	movs	r2, #0
 8005642:	63bb      	str	r3, [r7, #56]	; 0x38
 8005644:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800564c:	633b      	str	r3, [r7, #48]	; 0x30
 800564e:	2300      	movs	r3, #0
 8005650:	637b      	str	r3, [r7, #52]	; 0x34
 8005652:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005656:	4622      	mov	r2, r4
 8005658:	462b      	mov	r3, r5
 800565a:	f04f 0000 	mov.w	r0, #0
 800565e:	f04f 0100 	mov.w	r1, #0
 8005662:	0159      	lsls	r1, r3, #5
 8005664:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005668:	0150      	lsls	r0, r2, #5
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	4621      	mov	r1, r4
 8005670:	1a51      	subs	r1, r2, r1
 8005672:	6139      	str	r1, [r7, #16]
 8005674:	4629      	mov	r1, r5
 8005676:	eb63 0301 	sbc.w	r3, r3, r1
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005688:	4659      	mov	r1, fp
 800568a:	018b      	lsls	r3, r1, #6
 800568c:	4651      	mov	r1, sl
 800568e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005692:	4651      	mov	r1, sl
 8005694:	018a      	lsls	r2, r1, #6
 8005696:	4651      	mov	r1, sl
 8005698:	ebb2 0801 	subs.w	r8, r2, r1
 800569c:	4659      	mov	r1, fp
 800569e:	eb63 0901 	sbc.w	r9, r3, r1
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	f04f 0300 	mov.w	r3, #0
 80056aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056b6:	4690      	mov	r8, r2
 80056b8:	4699      	mov	r9, r3
 80056ba:	4623      	mov	r3, r4
 80056bc:	eb18 0303 	adds.w	r3, r8, r3
 80056c0:	60bb      	str	r3, [r7, #8]
 80056c2:	462b      	mov	r3, r5
 80056c4:	eb49 0303 	adc.w	r3, r9, r3
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	f04f 0200 	mov.w	r2, #0
 80056ce:	f04f 0300 	mov.w	r3, #0
 80056d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056d6:	4629      	mov	r1, r5
 80056d8:	024b      	lsls	r3, r1, #9
 80056da:	4621      	mov	r1, r4
 80056dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056e0:	4621      	mov	r1, r4
 80056e2:	024a      	lsls	r2, r1, #9
 80056e4:	4610      	mov	r0, r2
 80056e6:	4619      	mov	r1, r3
 80056e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ea:	2200      	movs	r2, #0
 80056ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056f4:	f7fb fa58 	bl	8000ba8 <__aeabi_uldivmod>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	4613      	mov	r3, r2
 80056fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005700:	e058      	b.n	80057b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005702:	4b38      	ldr	r3, [pc, #224]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	099b      	lsrs	r3, r3, #6
 8005708:	2200      	movs	r2, #0
 800570a:	4618      	mov	r0, r3
 800570c:	4611      	mov	r1, r2
 800570e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005712:	623b      	str	r3, [r7, #32]
 8005714:	2300      	movs	r3, #0
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
 8005718:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800571c:	4642      	mov	r2, r8
 800571e:	464b      	mov	r3, r9
 8005720:	f04f 0000 	mov.w	r0, #0
 8005724:	f04f 0100 	mov.w	r1, #0
 8005728:	0159      	lsls	r1, r3, #5
 800572a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800572e:	0150      	lsls	r0, r2, #5
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	4641      	mov	r1, r8
 8005736:	ebb2 0a01 	subs.w	sl, r2, r1
 800573a:	4649      	mov	r1, r9
 800573c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005740:	f04f 0200 	mov.w	r2, #0
 8005744:	f04f 0300 	mov.w	r3, #0
 8005748:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800574c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005750:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005754:	ebb2 040a 	subs.w	r4, r2, sl
 8005758:	eb63 050b 	sbc.w	r5, r3, fp
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	00eb      	lsls	r3, r5, #3
 8005766:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800576a:	00e2      	lsls	r2, r4, #3
 800576c:	4614      	mov	r4, r2
 800576e:	461d      	mov	r5, r3
 8005770:	4643      	mov	r3, r8
 8005772:	18e3      	adds	r3, r4, r3
 8005774:	603b      	str	r3, [r7, #0]
 8005776:	464b      	mov	r3, r9
 8005778:	eb45 0303 	adc.w	r3, r5, r3
 800577c:	607b      	str	r3, [r7, #4]
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	f04f 0300 	mov.w	r3, #0
 8005786:	e9d7 4500 	ldrd	r4, r5, [r7]
 800578a:	4629      	mov	r1, r5
 800578c:	028b      	lsls	r3, r1, #10
 800578e:	4621      	mov	r1, r4
 8005790:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005794:	4621      	mov	r1, r4
 8005796:	028a      	lsls	r2, r1, #10
 8005798:	4610      	mov	r0, r2
 800579a:	4619      	mov	r1, r3
 800579c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800579e:	2200      	movs	r2, #0
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	61fa      	str	r2, [r7, #28]
 80057a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057a8:	f7fb f9fe 	bl	8000ba8 <__aeabi_uldivmod>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4613      	mov	r3, r2
 80057b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057b4:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	0c1b      	lsrs	r3, r3, #16
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	3301      	adds	r3, #1
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80057c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057ce:	e002      	b.n	80057d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057d0:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80057d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3750      	adds	r7, #80	; 0x50
 80057dc:	46bd      	mov	sp, r7
 80057de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057e2:	bf00      	nop
 80057e4:	40023800 	.word	0x40023800
 80057e8:	00f42400 	.word	0x00f42400
 80057ec:	007a1200 	.word	0x007a1200

080057f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057f4:	4b03      	ldr	r3, [pc, #12]	; (8005804 <HAL_RCC_GetHCLKFreq+0x14>)
 80057f6:	681b      	ldr	r3, [r3, #0]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	20000000 	.word	0x20000000

08005808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800580c:	f7ff fff0 	bl	80057f0 <HAL_RCC_GetHCLKFreq>
 8005810:	4602      	mov	r2, r0
 8005812:	4b05      	ldr	r3, [pc, #20]	; (8005828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	0a9b      	lsrs	r3, r3, #10
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	4903      	ldr	r1, [pc, #12]	; (800582c <HAL_RCC_GetPCLK1Freq+0x24>)
 800581e:	5ccb      	ldrb	r3, [r1, r3]
 8005820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005824:	4618      	mov	r0, r3
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40023800 	.word	0x40023800
 800582c:	08007fc8 	.word	0x08007fc8

08005830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005834:	f7ff ffdc 	bl	80057f0 <HAL_RCC_GetHCLKFreq>
 8005838:	4602      	mov	r2, r0
 800583a:	4b05      	ldr	r3, [pc, #20]	; (8005850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	0b5b      	lsrs	r3, r3, #13
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	4903      	ldr	r1, [pc, #12]	; (8005854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005846:	5ccb      	ldrb	r3, [r1, r3]
 8005848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800584c:	4618      	mov	r0, r3
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40023800 	.word	0x40023800
 8005854:	08007fc8 	.word	0x08007fc8

08005858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e03f      	b.n	80058ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fc f926 	bl	8001ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2224      	movs	r2, #36	; 0x24
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800589a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fd7b 	bl	8006398 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695a      	ldr	r2, [r3, #20]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b08a      	sub	sp, #40	; 0x28
 80058f6:	af02      	add	r7, sp, #8
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	603b      	str	r3, [r7, #0]
 80058fe:	4613      	mov	r3, r2
 8005900:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b20      	cmp	r3, #32
 8005910:	d17c      	bne.n	8005a0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <HAL_UART_Transmit+0x2c>
 8005918:	88fb      	ldrh	r3, [r7, #6]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e075      	b.n	8005a0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_UART_Transmit+0x3e>
 800592c:	2302      	movs	r3, #2
 800592e:	e06e      	b.n	8005a0e <HAL_UART_Transmit+0x11c>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2221      	movs	r2, #33	; 0x21
 8005942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005946:	f7fc fad5 	bl	8001ef4 <HAL_GetTick>
 800594a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	88fa      	ldrh	r2, [r7, #6]
 8005950:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	88fa      	ldrh	r2, [r7, #6]
 8005956:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005960:	d108      	bne.n	8005974 <HAL_UART_Transmit+0x82>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d104      	bne.n	8005974 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800596a:	2300      	movs	r3, #0
 800596c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	e003      	b.n	800597c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005978:	2300      	movs	r3, #0
 800597a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005984:	e02a      	b.n	80059dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2200      	movs	r2, #0
 800598e:	2180      	movs	r1, #128	; 0x80
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 faf9 	bl	8005f88 <UART_WaitOnFlagUntilTimeout>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e036      	b.n	8005a0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	3302      	adds	r3, #2
 80059ba:	61bb      	str	r3, [r7, #24]
 80059bc:	e007      	b.n	80059ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	781a      	ldrb	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	3301      	adds	r3, #1
 80059cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1cf      	bne.n	8005986 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2200      	movs	r2, #0
 80059ee:	2140      	movs	r1, #64	; 0x40
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 fac9 	bl	8005f88 <UART_WaitOnFlagUntilTimeout>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e006      	b.n	8005a0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	e000      	b.n	8005a0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a0c:	2302      	movs	r3, #2
  }
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3720      	adds	r7, #32
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b0ba      	sub	sp, #232	; 0xe8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005a56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10f      	bne.n	8005a7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <HAL_UART_IRQHandler+0x66>
 8005a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fbd3 	bl	8006222 <UART_Receive_IT>
      return;
 8005a7c:	e256      	b.n	8005f2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 80de 	beq.w	8005c44 <HAL_UART_IRQHandler+0x22c>
 8005a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d106      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 80d1 	beq.w	8005c44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00b      	beq.n	8005ac6 <HAL_UART_IRQHandler+0xae>
 8005aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d005      	beq.n	8005ac6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	f043 0201 	orr.w	r2, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00b      	beq.n	8005aea <HAL_UART_IRQHandler+0xd2>
 8005ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d005      	beq.n	8005aea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	f043 0202 	orr.w	r2, r3, #2
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00b      	beq.n	8005b0e <HAL_UART_IRQHandler+0xf6>
 8005af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d005      	beq.n	8005b0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	f043 0204 	orr.w	r2, r3, #4
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d011      	beq.n	8005b3e <HAL_UART_IRQHandler+0x126>
 8005b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d105      	bne.n	8005b32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d005      	beq.n	8005b3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	f043 0208 	orr.w	r2, r3, #8
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 81ed 	beq.w	8005f22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d008      	beq.n	8005b66 <HAL_UART_IRQHandler+0x14e>
 8005b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fb5e 	bl	8006222 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b70:	2b40      	cmp	r3, #64	; 0x40
 8005b72:	bf0c      	ite	eq
 8005b74:	2301      	moveq	r3, #1
 8005b76:	2300      	movne	r3, #0
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d103      	bne.n	8005b92 <HAL_UART_IRQHandler+0x17a>
 8005b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d04f      	beq.n	8005c32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fa66 	bl	8006064 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba2:	2b40      	cmp	r3, #64	; 0x40
 8005ba4:	d141      	bne.n	8005c2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3314      	adds	r3, #20
 8005bac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3314      	adds	r3, #20
 8005bce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005bd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005bde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005bea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1d9      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d013      	beq.n	8005c22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	4a7d      	ldr	r2, [pc, #500]	; (8005df4 <HAL_UART_IRQHandler+0x3dc>)
 8005c00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fc fb25 	bl	8002256 <HAL_DMA_Abort_IT>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d016      	beq.n	8005c40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c20:	e00e      	b.n	8005c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f99a 	bl	8005f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c28:	e00a      	b.n	8005c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f996 	bl	8005f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c30:	e006      	b.n	8005c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f992 	bl	8005f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005c3e:	e170      	b.n	8005f22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c40:	bf00      	nop
    return;
 8005c42:	e16e      	b.n	8005f22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	f040 814a 	bne.w	8005ee2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c52:	f003 0310 	and.w	r3, r3, #16
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 8143 	beq.w	8005ee2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c60:	f003 0310 	and.w	r3, r3, #16
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 813c 	beq.w	8005ee2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60bb      	str	r3, [r7, #8]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	60bb      	str	r3, [r7, #8]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8a:	2b40      	cmp	r3, #64	; 0x40
 8005c8c:	f040 80b4 	bne.w	8005df8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8140 	beq.w	8005f26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	f080 8139 	bcs.w	8005f26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc6:	f000 8088 	beq.w	8005dda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	330c      	adds	r3, #12
 8005cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cd8:	e853 3f00 	ldrex	r3, [r3]
 8005cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ce0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005cf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d06:	e841 2300 	strex	r3, r2, [r1]
 8005d0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1d9      	bne.n	8005cca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3314      	adds	r3, #20
 8005d1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d28:	f023 0301 	bic.w	r3, r3, #1
 8005d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3314      	adds	r3, #20
 8005d36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e1      	bne.n	8005d16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3314      	adds	r3, #20
 8005d58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d5c:	e853 3f00 	ldrex	r3, [r3]
 8005d60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3314      	adds	r3, #20
 8005d72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e3      	bne.n	8005d52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	330c      	adds	r3, #12
 8005d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005daa:	f023 0310 	bic.w	r3, r3, #16
 8005dae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	330c      	adds	r3, #12
 8005db8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005dbc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005dbe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005dc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e3      	bne.n	8005d98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fc f9ce 	bl	8002176 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	4619      	mov	r1, r3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f8c0 	bl	8005f70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005df0:	e099      	b.n	8005f26 <HAL_UART_IRQHandler+0x50e>
 8005df2:	bf00      	nop
 8005df4:	0800612b 	.word	0x0800612b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 808b 	beq.w	8005f2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005e14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 8086 	beq.w	8005f2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	330c      	adds	r3, #12
 8005e24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	330c      	adds	r3, #12
 8005e3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005e42:	647a      	str	r2, [r7, #68]	; 0x44
 8005e44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e4a:	e841 2300 	strex	r3, r2, [r1]
 8005e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1e3      	bne.n	8005e1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3314      	adds	r3, #20
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	e853 3f00 	ldrex	r3, [r3]
 8005e64:	623b      	str	r3, [r7, #32]
   return(result);
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	f023 0301 	bic.w	r3, r3, #1
 8005e6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3314      	adds	r3, #20
 8005e76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e7a:	633a      	str	r2, [r7, #48]	; 0x30
 8005e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e82:	e841 2300 	strex	r3, r2, [r1]
 8005e86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1e3      	bne.n	8005e56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	330c      	adds	r3, #12
 8005ea2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0310 	bic.w	r3, r3, #16
 8005eb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	330c      	adds	r3, #12
 8005ebc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ec0:	61fa      	str	r2, [r7, #28]
 8005ec2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec4:	69b9      	ldr	r1, [r7, #24]
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	e841 2300 	strex	r3, r2, [r1]
 8005ecc:	617b      	str	r3, [r7, #20]
   return(result);
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e3      	bne.n	8005e9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ed4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ed8:	4619      	mov	r1, r3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f848 	bl	8005f70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ee0:	e023      	b.n	8005f2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <HAL_UART_IRQHandler+0x4ea>
 8005eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f929 	bl	8006152 <UART_Transmit_IT>
    return;
 8005f00:	e014      	b.n	8005f2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00e      	beq.n	8005f2c <HAL_UART_IRQHandler+0x514>
 8005f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d008      	beq.n	8005f2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f969 	bl	80061f2 <UART_EndTransmit_IT>
    return;
 8005f20:	e004      	b.n	8005f2c <HAL_UART_IRQHandler+0x514>
    return;
 8005f22:	bf00      	nop
 8005f24:	e002      	b.n	8005f2c <HAL_UART_IRQHandler+0x514>
      return;
 8005f26:	bf00      	nop
 8005f28:	e000      	b.n	8005f2c <HAL_UART_IRQHandler+0x514>
      return;
 8005f2a:	bf00      	nop
  }
}
 8005f2c:	37e8      	adds	r7, #232	; 0xe8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop

08005f34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b090      	sub	sp, #64	; 0x40
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	603b      	str	r3, [r7, #0]
 8005f94:	4613      	mov	r3, r2
 8005f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f98:	e050      	b.n	800603c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fa0:	d04c      	beq.n	800603c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d007      	beq.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fa8:	f7fb ffa4 	bl	8001ef4 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d241      	bcs.n	800603c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	e853 3f00 	ldrex	r3, [r3]
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	330c      	adds	r3, #12
 8005fd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fd8:	637a      	str	r2, [r7, #52]	; 0x34
 8005fda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fe0:	e841 2300 	strex	r3, r2, [r1]
 8005fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e5      	bne.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3314      	adds	r3, #20
 8005ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	e853 3f00 	ldrex	r3, [r3]
 8005ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f023 0301 	bic.w	r3, r3, #1
 8006002:	63bb      	str	r3, [r7, #56]	; 0x38
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3314      	adds	r3, #20
 800600a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800600c:	623a      	str	r2, [r7, #32]
 800600e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006010:	69f9      	ldr	r1, [r7, #28]
 8006012:	6a3a      	ldr	r2, [r7, #32]
 8006014:	e841 2300 	strex	r3, r2, [r1]
 8006018:	61bb      	str	r3, [r7, #24]
   return(result);
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1e5      	bne.n	8005fec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e00f      	b.n	800605c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4013      	ands	r3, r2
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	429a      	cmp	r2, r3
 800604a:	bf0c      	ite	eq
 800604c:	2301      	moveq	r3, #1
 800604e:	2300      	movne	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	429a      	cmp	r2, r3
 8006058:	d09f      	beq.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3740      	adds	r7, #64	; 0x40
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006064:	b480      	push	{r7}
 8006066:	b095      	sub	sp, #84	; 0x54
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	330c      	adds	r3, #12
 8006072:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	330c      	adds	r3, #12
 800608a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800608c:	643a      	str	r2, [r7, #64]	; 0x40
 800608e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006092:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e5      	bne.n	800606c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3314      	adds	r3, #20
 80060a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	e853 3f00 	ldrex	r3, [r3]
 80060ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	f023 0301 	bic.w	r3, r3, #1
 80060b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3314      	adds	r3, #20
 80060be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060c8:	e841 2300 	strex	r3, r2, [r1]
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e5      	bne.n	80060a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d119      	bne.n	8006110 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	330c      	adds	r3, #12
 80060e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f023 0310 	bic.w	r3, r3, #16
 80060f2:	647b      	str	r3, [r7, #68]	; 0x44
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	330c      	adds	r3, #12
 80060fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060fc:	61ba      	str	r2, [r7, #24]
 80060fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6979      	ldr	r1, [r7, #20]
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	613b      	str	r3, [r7, #16]
   return(result);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e5      	bne.n	80060dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2220      	movs	r2, #32
 8006114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800611e:	bf00      	nop
 8006120:	3754      	adds	r7, #84	; 0x54
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006136:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f7ff ff09 	bl	8005f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800614a:	bf00      	nop
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006152:	b480      	push	{r7}
 8006154:	b085      	sub	sp, #20
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b21      	cmp	r3, #33	; 0x21
 8006164:	d13e      	bne.n	80061e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616e:	d114      	bne.n	800619a <UART_Transmit_IT+0x48>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d110      	bne.n	800619a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800618c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	1c9a      	adds	r2, r3, #2
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	621a      	str	r2, [r3, #32]
 8006198:	e008      	b.n	80061ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	1c59      	adds	r1, r3, #1
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6211      	str	r1, [r2, #32]
 80061a4:	781a      	ldrb	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	4619      	mov	r1, r3
 80061ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10f      	bne.n	80061e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	e000      	b.n	80061e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061e4:	2302      	movs	r3, #2
  }
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b082      	sub	sp, #8
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006208:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff fe8e 	bl	8005f34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b08c      	sub	sp, #48	; 0x30
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b22      	cmp	r3, #34	; 0x22
 8006234:	f040 80ab 	bne.w	800638e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006240:	d117      	bne.n	8006272 <UART_Receive_IT+0x50>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d113      	bne.n	8006272 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800624a:	2300      	movs	r3, #0
 800624c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	b29b      	uxth	r3, r3
 800625c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006260:	b29a      	uxth	r2, r3
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626a:	1c9a      	adds	r2, r3, #2
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	629a      	str	r2, [r3, #40]	; 0x28
 8006270:	e026      	b.n	80062c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006276:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006278:	2300      	movs	r3, #0
 800627a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006284:	d007      	beq.n	8006296 <UART_Receive_IT+0x74>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10a      	bne.n	80062a4 <UART_Receive_IT+0x82>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d106      	bne.n	80062a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	b2da      	uxtb	r2, r3
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	e008      	b.n	80062b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	4619      	mov	r1, r3
 80062ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d15a      	bne.n	800638a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68da      	ldr	r2, [r3, #12]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0220 	bic.w	r2, r2, #32
 80062e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695a      	ldr	r2, [r3, #20]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0201 	bic.w	r2, r2, #1
 8006302:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2220      	movs	r2, #32
 8006308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006310:	2b01      	cmp	r3, #1
 8006312:	d135      	bne.n	8006380 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	330c      	adds	r3, #12
 8006320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	613b      	str	r3, [r7, #16]
   return(result);
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f023 0310 	bic.w	r3, r3, #16
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	330c      	adds	r3, #12
 8006338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633a:	623a      	str	r2, [r7, #32]
 800633c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	69f9      	ldr	r1, [r7, #28]
 8006340:	6a3a      	ldr	r2, [r7, #32]
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	61bb      	str	r3, [r7, #24]
   return(result);
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e5      	bne.n	800631a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	2b10      	cmp	r3, #16
 800635a:	d10a      	bne.n	8006372 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800635c:	2300      	movs	r3, #0
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7ff fdf9 	bl	8005f70 <HAL_UARTEx_RxEventCallback>
 800637e:	e002      	b.n	8006386 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7ff fde1 	bl	8005f48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	e002      	b.n	8006390 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	e000      	b.n	8006390 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800638e:	2302      	movs	r3, #2
  }
}
 8006390:	4618      	mov	r0, r3
 8006392:	3730      	adds	r7, #48	; 0x30
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800639c:	b0c0      	sub	sp, #256	; 0x100
 800639e:	af00      	add	r7, sp, #0
 80063a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80063b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b4:	68d9      	ldr	r1, [r3, #12]
 80063b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	ea40 0301 	orr.w	r3, r0, r1
 80063c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	431a      	orrs	r2, r3
 80063d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	431a      	orrs	r2, r3
 80063d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	4313      	orrs	r3, r2
 80063e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80063f0:	f021 010c 	bic.w	r1, r1, #12
 80063f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063fe:	430b      	orrs	r3, r1
 8006400:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800640e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006412:	6999      	ldr	r1, [r3, #24]
 8006414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	ea40 0301 	orr.w	r3, r0, r1
 800641e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	4b8f      	ldr	r3, [pc, #572]	; (8006664 <UART_SetConfig+0x2cc>)
 8006428:	429a      	cmp	r2, r3
 800642a:	d005      	beq.n	8006438 <UART_SetConfig+0xa0>
 800642c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	4b8d      	ldr	r3, [pc, #564]	; (8006668 <UART_SetConfig+0x2d0>)
 8006434:	429a      	cmp	r2, r3
 8006436:	d104      	bne.n	8006442 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006438:	f7ff f9fa 	bl	8005830 <HAL_RCC_GetPCLK2Freq>
 800643c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006440:	e003      	b.n	800644a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006442:	f7ff f9e1 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 8006446:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800644a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006454:	f040 810c 	bne.w	8006670 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800645c:	2200      	movs	r2, #0
 800645e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006462:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006466:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800646a:	4622      	mov	r2, r4
 800646c:	462b      	mov	r3, r5
 800646e:	1891      	adds	r1, r2, r2
 8006470:	65b9      	str	r1, [r7, #88]	; 0x58
 8006472:	415b      	adcs	r3, r3
 8006474:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006476:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800647a:	4621      	mov	r1, r4
 800647c:	eb12 0801 	adds.w	r8, r2, r1
 8006480:	4629      	mov	r1, r5
 8006482:	eb43 0901 	adc.w	r9, r3, r1
 8006486:	f04f 0200 	mov.w	r2, #0
 800648a:	f04f 0300 	mov.w	r3, #0
 800648e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006492:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006496:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800649a:	4690      	mov	r8, r2
 800649c:	4699      	mov	r9, r3
 800649e:	4623      	mov	r3, r4
 80064a0:	eb18 0303 	adds.w	r3, r8, r3
 80064a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064a8:	462b      	mov	r3, r5
 80064aa:	eb49 0303 	adc.w	r3, r9, r3
 80064ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80064c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80064c6:	460b      	mov	r3, r1
 80064c8:	18db      	adds	r3, r3, r3
 80064ca:	653b      	str	r3, [r7, #80]	; 0x50
 80064cc:	4613      	mov	r3, r2
 80064ce:	eb42 0303 	adc.w	r3, r2, r3
 80064d2:	657b      	str	r3, [r7, #84]	; 0x54
 80064d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80064d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80064dc:	f7fa fb64 	bl	8000ba8 <__aeabi_uldivmod>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4b61      	ldr	r3, [pc, #388]	; (800666c <UART_SetConfig+0x2d4>)
 80064e6:	fba3 2302 	umull	r2, r3, r3, r2
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	011c      	lsls	r4, r3, #4
 80064ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064f2:	2200      	movs	r2, #0
 80064f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80064fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006500:	4642      	mov	r2, r8
 8006502:	464b      	mov	r3, r9
 8006504:	1891      	adds	r1, r2, r2
 8006506:	64b9      	str	r1, [r7, #72]	; 0x48
 8006508:	415b      	adcs	r3, r3
 800650a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800650c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006510:	4641      	mov	r1, r8
 8006512:	eb12 0a01 	adds.w	sl, r2, r1
 8006516:	4649      	mov	r1, r9
 8006518:	eb43 0b01 	adc.w	fp, r3, r1
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	f04f 0300 	mov.w	r3, #0
 8006524:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006528:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800652c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006530:	4692      	mov	sl, r2
 8006532:	469b      	mov	fp, r3
 8006534:	4643      	mov	r3, r8
 8006536:	eb1a 0303 	adds.w	r3, sl, r3
 800653a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800653e:	464b      	mov	r3, r9
 8006540:	eb4b 0303 	adc.w	r3, fp, r3
 8006544:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006554:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006558:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800655c:	460b      	mov	r3, r1
 800655e:	18db      	adds	r3, r3, r3
 8006560:	643b      	str	r3, [r7, #64]	; 0x40
 8006562:	4613      	mov	r3, r2
 8006564:	eb42 0303 	adc.w	r3, r2, r3
 8006568:	647b      	str	r3, [r7, #68]	; 0x44
 800656a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800656e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006572:	f7fa fb19 	bl	8000ba8 <__aeabi_uldivmod>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4611      	mov	r1, r2
 800657c:	4b3b      	ldr	r3, [pc, #236]	; (800666c <UART_SetConfig+0x2d4>)
 800657e:	fba3 2301 	umull	r2, r3, r3, r1
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	2264      	movs	r2, #100	; 0x64
 8006586:	fb02 f303 	mul.w	r3, r2, r3
 800658a:	1acb      	subs	r3, r1, r3
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006592:	4b36      	ldr	r3, [pc, #216]	; (800666c <UART_SetConfig+0x2d4>)
 8006594:	fba3 2302 	umull	r2, r3, r3, r2
 8006598:	095b      	lsrs	r3, r3, #5
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065a0:	441c      	add	r4, r3
 80065a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80065b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80065b4:	4642      	mov	r2, r8
 80065b6:	464b      	mov	r3, r9
 80065b8:	1891      	adds	r1, r2, r2
 80065ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80065bc:	415b      	adcs	r3, r3
 80065be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065c4:	4641      	mov	r1, r8
 80065c6:	1851      	adds	r1, r2, r1
 80065c8:	6339      	str	r1, [r7, #48]	; 0x30
 80065ca:	4649      	mov	r1, r9
 80065cc:	414b      	adcs	r3, r1
 80065ce:	637b      	str	r3, [r7, #52]	; 0x34
 80065d0:	f04f 0200 	mov.w	r2, #0
 80065d4:	f04f 0300 	mov.w	r3, #0
 80065d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80065dc:	4659      	mov	r1, fp
 80065de:	00cb      	lsls	r3, r1, #3
 80065e0:	4651      	mov	r1, sl
 80065e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065e6:	4651      	mov	r1, sl
 80065e8:	00ca      	lsls	r2, r1, #3
 80065ea:	4610      	mov	r0, r2
 80065ec:	4619      	mov	r1, r3
 80065ee:	4603      	mov	r3, r0
 80065f0:	4642      	mov	r2, r8
 80065f2:	189b      	adds	r3, r3, r2
 80065f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065f8:	464b      	mov	r3, r9
 80065fa:	460a      	mov	r2, r1
 80065fc:	eb42 0303 	adc.w	r3, r2, r3
 8006600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006610:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006614:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006618:	460b      	mov	r3, r1
 800661a:	18db      	adds	r3, r3, r3
 800661c:	62bb      	str	r3, [r7, #40]	; 0x28
 800661e:	4613      	mov	r3, r2
 8006620:	eb42 0303 	adc.w	r3, r2, r3
 8006624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006626:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800662a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800662e:	f7fa fabb 	bl	8000ba8 <__aeabi_uldivmod>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4b0d      	ldr	r3, [pc, #52]	; (800666c <UART_SetConfig+0x2d4>)
 8006638:	fba3 1302 	umull	r1, r3, r3, r2
 800663c:	095b      	lsrs	r3, r3, #5
 800663e:	2164      	movs	r1, #100	; 0x64
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	3332      	adds	r3, #50	; 0x32
 800664a:	4a08      	ldr	r2, [pc, #32]	; (800666c <UART_SetConfig+0x2d4>)
 800664c:	fba2 2303 	umull	r2, r3, r2, r3
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	f003 0207 	and.w	r2, r3, #7
 8006656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4422      	add	r2, r4
 800665e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006660:	e105      	b.n	800686e <UART_SetConfig+0x4d6>
 8006662:	bf00      	nop
 8006664:	40011000 	.word	0x40011000
 8006668:	40011400 	.word	0x40011400
 800666c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006674:	2200      	movs	r2, #0
 8006676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800667a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800667e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006682:	4642      	mov	r2, r8
 8006684:	464b      	mov	r3, r9
 8006686:	1891      	adds	r1, r2, r2
 8006688:	6239      	str	r1, [r7, #32]
 800668a:	415b      	adcs	r3, r3
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
 800668e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006692:	4641      	mov	r1, r8
 8006694:	1854      	adds	r4, r2, r1
 8006696:	4649      	mov	r1, r9
 8006698:	eb43 0501 	adc.w	r5, r3, r1
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	00eb      	lsls	r3, r5, #3
 80066a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066aa:	00e2      	lsls	r2, r4, #3
 80066ac:	4614      	mov	r4, r2
 80066ae:	461d      	mov	r5, r3
 80066b0:	4643      	mov	r3, r8
 80066b2:	18e3      	adds	r3, r4, r3
 80066b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066b8:	464b      	mov	r3, r9
 80066ba:	eb45 0303 	adc.w	r3, r5, r3
 80066be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066d2:	f04f 0200 	mov.w	r2, #0
 80066d6:	f04f 0300 	mov.w	r3, #0
 80066da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80066de:	4629      	mov	r1, r5
 80066e0:	008b      	lsls	r3, r1, #2
 80066e2:	4621      	mov	r1, r4
 80066e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066e8:	4621      	mov	r1, r4
 80066ea:	008a      	lsls	r2, r1, #2
 80066ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80066f0:	f7fa fa5a 	bl	8000ba8 <__aeabi_uldivmod>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4b60      	ldr	r3, [pc, #384]	; (800687c <UART_SetConfig+0x4e4>)
 80066fa:	fba3 2302 	umull	r2, r3, r3, r2
 80066fe:	095b      	lsrs	r3, r3, #5
 8006700:	011c      	lsls	r4, r3, #4
 8006702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006706:	2200      	movs	r2, #0
 8006708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800670c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006710:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006714:	4642      	mov	r2, r8
 8006716:	464b      	mov	r3, r9
 8006718:	1891      	adds	r1, r2, r2
 800671a:	61b9      	str	r1, [r7, #24]
 800671c:	415b      	adcs	r3, r3
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006724:	4641      	mov	r1, r8
 8006726:	1851      	adds	r1, r2, r1
 8006728:	6139      	str	r1, [r7, #16]
 800672a:	4649      	mov	r1, r9
 800672c:	414b      	adcs	r3, r1
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800673c:	4659      	mov	r1, fp
 800673e:	00cb      	lsls	r3, r1, #3
 8006740:	4651      	mov	r1, sl
 8006742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006746:	4651      	mov	r1, sl
 8006748:	00ca      	lsls	r2, r1, #3
 800674a:	4610      	mov	r0, r2
 800674c:	4619      	mov	r1, r3
 800674e:	4603      	mov	r3, r0
 8006750:	4642      	mov	r2, r8
 8006752:	189b      	adds	r3, r3, r2
 8006754:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006758:	464b      	mov	r3, r9
 800675a:	460a      	mov	r2, r1
 800675c:	eb42 0303 	adc.w	r3, r2, r3
 8006760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	67bb      	str	r3, [r7, #120]	; 0x78
 800676e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	f04f 0300 	mov.w	r3, #0
 8006778:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800677c:	4649      	mov	r1, r9
 800677e:	008b      	lsls	r3, r1, #2
 8006780:	4641      	mov	r1, r8
 8006782:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006786:	4641      	mov	r1, r8
 8006788:	008a      	lsls	r2, r1, #2
 800678a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800678e:	f7fa fa0b 	bl	8000ba8 <__aeabi_uldivmod>
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	4b39      	ldr	r3, [pc, #228]	; (800687c <UART_SetConfig+0x4e4>)
 8006798:	fba3 1302 	umull	r1, r3, r3, r2
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	2164      	movs	r1, #100	; 0x64
 80067a0:	fb01 f303 	mul.w	r3, r1, r3
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	3332      	adds	r3, #50	; 0x32
 80067aa:	4a34      	ldr	r2, [pc, #208]	; (800687c <UART_SetConfig+0x4e4>)
 80067ac:	fba2 2303 	umull	r2, r3, r2, r3
 80067b0:	095b      	lsrs	r3, r3, #5
 80067b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067b6:	441c      	add	r4, r3
 80067b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067bc:	2200      	movs	r2, #0
 80067be:	673b      	str	r3, [r7, #112]	; 0x70
 80067c0:	677a      	str	r2, [r7, #116]	; 0x74
 80067c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80067c6:	4642      	mov	r2, r8
 80067c8:	464b      	mov	r3, r9
 80067ca:	1891      	adds	r1, r2, r2
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	415b      	adcs	r3, r3
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067d6:	4641      	mov	r1, r8
 80067d8:	1851      	adds	r1, r2, r1
 80067da:	6039      	str	r1, [r7, #0]
 80067dc:	4649      	mov	r1, r9
 80067de:	414b      	adcs	r3, r1
 80067e0:	607b      	str	r3, [r7, #4]
 80067e2:	f04f 0200 	mov.w	r2, #0
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067ee:	4659      	mov	r1, fp
 80067f0:	00cb      	lsls	r3, r1, #3
 80067f2:	4651      	mov	r1, sl
 80067f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067f8:	4651      	mov	r1, sl
 80067fa:	00ca      	lsls	r2, r1, #3
 80067fc:	4610      	mov	r0, r2
 80067fe:	4619      	mov	r1, r3
 8006800:	4603      	mov	r3, r0
 8006802:	4642      	mov	r2, r8
 8006804:	189b      	adds	r3, r3, r2
 8006806:	66bb      	str	r3, [r7, #104]	; 0x68
 8006808:	464b      	mov	r3, r9
 800680a:	460a      	mov	r2, r1
 800680c:	eb42 0303 	adc.w	r3, r2, r3
 8006810:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	663b      	str	r3, [r7, #96]	; 0x60
 800681c:	667a      	str	r2, [r7, #100]	; 0x64
 800681e:	f04f 0200 	mov.w	r2, #0
 8006822:	f04f 0300 	mov.w	r3, #0
 8006826:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800682a:	4649      	mov	r1, r9
 800682c:	008b      	lsls	r3, r1, #2
 800682e:	4641      	mov	r1, r8
 8006830:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006834:	4641      	mov	r1, r8
 8006836:	008a      	lsls	r2, r1, #2
 8006838:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800683c:	f7fa f9b4 	bl	8000ba8 <__aeabi_uldivmod>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	4b0d      	ldr	r3, [pc, #52]	; (800687c <UART_SetConfig+0x4e4>)
 8006846:	fba3 1302 	umull	r1, r3, r3, r2
 800684a:	095b      	lsrs	r3, r3, #5
 800684c:	2164      	movs	r1, #100	; 0x64
 800684e:	fb01 f303 	mul.w	r3, r1, r3
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	3332      	adds	r3, #50	; 0x32
 8006858:	4a08      	ldr	r2, [pc, #32]	; (800687c <UART_SetConfig+0x4e4>)
 800685a:	fba2 2303 	umull	r2, r3, r2, r3
 800685e:	095b      	lsrs	r3, r3, #5
 8006860:	f003 020f 	and.w	r2, r3, #15
 8006864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4422      	add	r2, r4
 800686c:	609a      	str	r2, [r3, #8]
}
 800686e:	bf00      	nop
 8006870:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006874:	46bd      	mov	sp, r7
 8006876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800687a:	bf00      	nop
 800687c:	51eb851f 	.word	0x51eb851f

08006880 <__errno>:
 8006880:	4b01      	ldr	r3, [pc, #4]	; (8006888 <__errno+0x8>)
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	2000000c 	.word	0x2000000c

0800688c <__libc_init_array>:
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	4d0d      	ldr	r5, [pc, #52]	; (80068c4 <__libc_init_array+0x38>)
 8006890:	4c0d      	ldr	r4, [pc, #52]	; (80068c8 <__libc_init_array+0x3c>)
 8006892:	1b64      	subs	r4, r4, r5
 8006894:	10a4      	asrs	r4, r4, #2
 8006896:	2600      	movs	r6, #0
 8006898:	42a6      	cmp	r6, r4
 800689a:	d109      	bne.n	80068b0 <__libc_init_array+0x24>
 800689c:	4d0b      	ldr	r5, [pc, #44]	; (80068cc <__libc_init_array+0x40>)
 800689e:	4c0c      	ldr	r4, [pc, #48]	; (80068d0 <__libc_init_array+0x44>)
 80068a0:	f001 fade 	bl	8007e60 <_init>
 80068a4:	1b64      	subs	r4, r4, r5
 80068a6:	10a4      	asrs	r4, r4, #2
 80068a8:	2600      	movs	r6, #0
 80068aa:	42a6      	cmp	r6, r4
 80068ac:	d105      	bne.n	80068ba <__libc_init_array+0x2e>
 80068ae:	bd70      	pop	{r4, r5, r6, pc}
 80068b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b4:	4798      	blx	r3
 80068b6:	3601      	adds	r6, #1
 80068b8:	e7ee      	b.n	8006898 <__libc_init_array+0xc>
 80068ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80068be:	4798      	blx	r3
 80068c0:	3601      	adds	r6, #1
 80068c2:	e7f2      	b.n	80068aa <__libc_init_array+0x1e>
 80068c4:	08008070 	.word	0x08008070
 80068c8:	08008070 	.word	0x08008070
 80068cc:	08008070 	.word	0x08008070
 80068d0:	08008074 	.word	0x08008074

080068d4 <memset>:
 80068d4:	4402      	add	r2, r0
 80068d6:	4603      	mov	r3, r0
 80068d8:	4293      	cmp	r3, r2
 80068da:	d100      	bne.n	80068de <memset+0xa>
 80068dc:	4770      	bx	lr
 80068de:	f803 1b01 	strb.w	r1, [r3], #1
 80068e2:	e7f9      	b.n	80068d8 <memset+0x4>

080068e4 <iprintf>:
 80068e4:	b40f      	push	{r0, r1, r2, r3}
 80068e6:	4b0a      	ldr	r3, [pc, #40]	; (8006910 <iprintf+0x2c>)
 80068e8:	b513      	push	{r0, r1, r4, lr}
 80068ea:	681c      	ldr	r4, [r3, #0]
 80068ec:	b124      	cbz	r4, 80068f8 <iprintf+0x14>
 80068ee:	69a3      	ldr	r3, [r4, #24]
 80068f0:	b913      	cbnz	r3, 80068f8 <iprintf+0x14>
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 fa7e 	bl	8006df4 <__sinit>
 80068f8:	ab05      	add	r3, sp, #20
 80068fa:	9a04      	ldr	r2, [sp, #16]
 80068fc:	68a1      	ldr	r1, [r4, #8]
 80068fe:	9301      	str	r3, [sp, #4]
 8006900:	4620      	mov	r0, r4
 8006902:	f000 fde3 	bl	80074cc <_vfiprintf_r>
 8006906:	b002      	add	sp, #8
 8006908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800690c:	b004      	add	sp, #16
 800690e:	4770      	bx	lr
 8006910:	2000000c 	.word	0x2000000c

08006914 <_puts_r>:
 8006914:	b570      	push	{r4, r5, r6, lr}
 8006916:	460e      	mov	r6, r1
 8006918:	4605      	mov	r5, r0
 800691a:	b118      	cbz	r0, 8006924 <_puts_r+0x10>
 800691c:	6983      	ldr	r3, [r0, #24]
 800691e:	b90b      	cbnz	r3, 8006924 <_puts_r+0x10>
 8006920:	f000 fa68 	bl	8006df4 <__sinit>
 8006924:	69ab      	ldr	r3, [r5, #24]
 8006926:	68ac      	ldr	r4, [r5, #8]
 8006928:	b913      	cbnz	r3, 8006930 <_puts_r+0x1c>
 800692a:	4628      	mov	r0, r5
 800692c:	f000 fa62 	bl	8006df4 <__sinit>
 8006930:	4b2c      	ldr	r3, [pc, #176]	; (80069e4 <_puts_r+0xd0>)
 8006932:	429c      	cmp	r4, r3
 8006934:	d120      	bne.n	8006978 <_puts_r+0x64>
 8006936:	686c      	ldr	r4, [r5, #4]
 8006938:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800693a:	07db      	lsls	r3, r3, #31
 800693c:	d405      	bmi.n	800694a <_puts_r+0x36>
 800693e:	89a3      	ldrh	r3, [r4, #12]
 8006940:	0598      	lsls	r0, r3, #22
 8006942:	d402      	bmi.n	800694a <_puts_r+0x36>
 8006944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006946:	f000 faf3 	bl	8006f30 <__retarget_lock_acquire_recursive>
 800694a:	89a3      	ldrh	r3, [r4, #12]
 800694c:	0719      	lsls	r1, r3, #28
 800694e:	d51d      	bpl.n	800698c <_puts_r+0x78>
 8006950:	6923      	ldr	r3, [r4, #16]
 8006952:	b1db      	cbz	r3, 800698c <_puts_r+0x78>
 8006954:	3e01      	subs	r6, #1
 8006956:	68a3      	ldr	r3, [r4, #8]
 8006958:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800695c:	3b01      	subs	r3, #1
 800695e:	60a3      	str	r3, [r4, #8]
 8006960:	bb39      	cbnz	r1, 80069b2 <_puts_r+0x9e>
 8006962:	2b00      	cmp	r3, #0
 8006964:	da38      	bge.n	80069d8 <_puts_r+0xc4>
 8006966:	4622      	mov	r2, r4
 8006968:	210a      	movs	r1, #10
 800696a:	4628      	mov	r0, r5
 800696c:	f000 f868 	bl	8006a40 <__swbuf_r>
 8006970:	3001      	adds	r0, #1
 8006972:	d011      	beq.n	8006998 <_puts_r+0x84>
 8006974:	250a      	movs	r5, #10
 8006976:	e011      	b.n	800699c <_puts_r+0x88>
 8006978:	4b1b      	ldr	r3, [pc, #108]	; (80069e8 <_puts_r+0xd4>)
 800697a:	429c      	cmp	r4, r3
 800697c:	d101      	bne.n	8006982 <_puts_r+0x6e>
 800697e:	68ac      	ldr	r4, [r5, #8]
 8006980:	e7da      	b.n	8006938 <_puts_r+0x24>
 8006982:	4b1a      	ldr	r3, [pc, #104]	; (80069ec <_puts_r+0xd8>)
 8006984:	429c      	cmp	r4, r3
 8006986:	bf08      	it	eq
 8006988:	68ec      	ldreq	r4, [r5, #12]
 800698a:	e7d5      	b.n	8006938 <_puts_r+0x24>
 800698c:	4621      	mov	r1, r4
 800698e:	4628      	mov	r0, r5
 8006990:	f000 f8a8 	bl	8006ae4 <__swsetup_r>
 8006994:	2800      	cmp	r0, #0
 8006996:	d0dd      	beq.n	8006954 <_puts_r+0x40>
 8006998:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800699c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800699e:	07da      	lsls	r2, r3, #31
 80069a0:	d405      	bmi.n	80069ae <_puts_r+0x9a>
 80069a2:	89a3      	ldrh	r3, [r4, #12]
 80069a4:	059b      	lsls	r3, r3, #22
 80069a6:	d402      	bmi.n	80069ae <_puts_r+0x9a>
 80069a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069aa:	f000 fac2 	bl	8006f32 <__retarget_lock_release_recursive>
 80069ae:	4628      	mov	r0, r5
 80069b0:	bd70      	pop	{r4, r5, r6, pc}
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	da04      	bge.n	80069c0 <_puts_r+0xac>
 80069b6:	69a2      	ldr	r2, [r4, #24]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	dc06      	bgt.n	80069ca <_puts_r+0xb6>
 80069bc:	290a      	cmp	r1, #10
 80069be:	d004      	beq.n	80069ca <_puts_r+0xb6>
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	6022      	str	r2, [r4, #0]
 80069c6:	7019      	strb	r1, [r3, #0]
 80069c8:	e7c5      	b.n	8006956 <_puts_r+0x42>
 80069ca:	4622      	mov	r2, r4
 80069cc:	4628      	mov	r0, r5
 80069ce:	f000 f837 	bl	8006a40 <__swbuf_r>
 80069d2:	3001      	adds	r0, #1
 80069d4:	d1bf      	bne.n	8006956 <_puts_r+0x42>
 80069d6:	e7df      	b.n	8006998 <_puts_r+0x84>
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	250a      	movs	r5, #10
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	6022      	str	r2, [r4, #0]
 80069e0:	701d      	strb	r5, [r3, #0]
 80069e2:	e7db      	b.n	800699c <_puts_r+0x88>
 80069e4:	08007ff4 	.word	0x08007ff4
 80069e8:	08008014 	.word	0x08008014
 80069ec:	08007fd4 	.word	0x08007fd4

080069f0 <puts>:
 80069f0:	4b02      	ldr	r3, [pc, #8]	; (80069fc <puts+0xc>)
 80069f2:	4601      	mov	r1, r0
 80069f4:	6818      	ldr	r0, [r3, #0]
 80069f6:	f7ff bf8d 	b.w	8006914 <_puts_r>
 80069fa:	bf00      	nop
 80069fc:	2000000c 	.word	0x2000000c

08006a00 <siprintf>:
 8006a00:	b40e      	push	{r1, r2, r3}
 8006a02:	b500      	push	{lr}
 8006a04:	b09c      	sub	sp, #112	; 0x70
 8006a06:	ab1d      	add	r3, sp, #116	; 0x74
 8006a08:	9002      	str	r0, [sp, #8]
 8006a0a:	9006      	str	r0, [sp, #24]
 8006a0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a10:	4809      	ldr	r0, [pc, #36]	; (8006a38 <siprintf+0x38>)
 8006a12:	9107      	str	r1, [sp, #28]
 8006a14:	9104      	str	r1, [sp, #16]
 8006a16:	4909      	ldr	r1, [pc, #36]	; (8006a3c <siprintf+0x3c>)
 8006a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a1c:	9105      	str	r1, [sp, #20]
 8006a1e:	6800      	ldr	r0, [r0, #0]
 8006a20:	9301      	str	r3, [sp, #4]
 8006a22:	a902      	add	r1, sp, #8
 8006a24:	f000 fc28 	bl	8007278 <_svfiprintf_r>
 8006a28:	9b02      	ldr	r3, [sp, #8]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	701a      	strb	r2, [r3, #0]
 8006a2e:	b01c      	add	sp, #112	; 0x70
 8006a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a34:	b003      	add	sp, #12
 8006a36:	4770      	bx	lr
 8006a38:	2000000c 	.word	0x2000000c
 8006a3c:	ffff0208 	.word	0xffff0208

08006a40 <__swbuf_r>:
 8006a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a42:	460e      	mov	r6, r1
 8006a44:	4614      	mov	r4, r2
 8006a46:	4605      	mov	r5, r0
 8006a48:	b118      	cbz	r0, 8006a52 <__swbuf_r+0x12>
 8006a4a:	6983      	ldr	r3, [r0, #24]
 8006a4c:	b90b      	cbnz	r3, 8006a52 <__swbuf_r+0x12>
 8006a4e:	f000 f9d1 	bl	8006df4 <__sinit>
 8006a52:	4b21      	ldr	r3, [pc, #132]	; (8006ad8 <__swbuf_r+0x98>)
 8006a54:	429c      	cmp	r4, r3
 8006a56:	d12b      	bne.n	8006ab0 <__swbuf_r+0x70>
 8006a58:	686c      	ldr	r4, [r5, #4]
 8006a5a:	69a3      	ldr	r3, [r4, #24]
 8006a5c:	60a3      	str	r3, [r4, #8]
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	071a      	lsls	r2, r3, #28
 8006a62:	d52f      	bpl.n	8006ac4 <__swbuf_r+0x84>
 8006a64:	6923      	ldr	r3, [r4, #16]
 8006a66:	b36b      	cbz	r3, 8006ac4 <__swbuf_r+0x84>
 8006a68:	6923      	ldr	r3, [r4, #16]
 8006a6a:	6820      	ldr	r0, [r4, #0]
 8006a6c:	1ac0      	subs	r0, r0, r3
 8006a6e:	6963      	ldr	r3, [r4, #20]
 8006a70:	b2f6      	uxtb	r6, r6
 8006a72:	4283      	cmp	r3, r0
 8006a74:	4637      	mov	r7, r6
 8006a76:	dc04      	bgt.n	8006a82 <__swbuf_r+0x42>
 8006a78:	4621      	mov	r1, r4
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f000 f926 	bl	8006ccc <_fflush_r>
 8006a80:	bb30      	cbnz	r0, 8006ad0 <__swbuf_r+0x90>
 8006a82:	68a3      	ldr	r3, [r4, #8]
 8006a84:	3b01      	subs	r3, #1
 8006a86:	60a3      	str	r3, [r4, #8]
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	6022      	str	r2, [r4, #0]
 8006a8e:	701e      	strb	r6, [r3, #0]
 8006a90:	6963      	ldr	r3, [r4, #20]
 8006a92:	3001      	adds	r0, #1
 8006a94:	4283      	cmp	r3, r0
 8006a96:	d004      	beq.n	8006aa2 <__swbuf_r+0x62>
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	07db      	lsls	r3, r3, #31
 8006a9c:	d506      	bpl.n	8006aac <__swbuf_r+0x6c>
 8006a9e:	2e0a      	cmp	r6, #10
 8006aa0:	d104      	bne.n	8006aac <__swbuf_r+0x6c>
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f000 f911 	bl	8006ccc <_fflush_r>
 8006aaa:	b988      	cbnz	r0, 8006ad0 <__swbuf_r+0x90>
 8006aac:	4638      	mov	r0, r7
 8006aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab0:	4b0a      	ldr	r3, [pc, #40]	; (8006adc <__swbuf_r+0x9c>)
 8006ab2:	429c      	cmp	r4, r3
 8006ab4:	d101      	bne.n	8006aba <__swbuf_r+0x7a>
 8006ab6:	68ac      	ldr	r4, [r5, #8]
 8006ab8:	e7cf      	b.n	8006a5a <__swbuf_r+0x1a>
 8006aba:	4b09      	ldr	r3, [pc, #36]	; (8006ae0 <__swbuf_r+0xa0>)
 8006abc:	429c      	cmp	r4, r3
 8006abe:	bf08      	it	eq
 8006ac0:	68ec      	ldreq	r4, [r5, #12]
 8006ac2:	e7ca      	b.n	8006a5a <__swbuf_r+0x1a>
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f000 f80c 	bl	8006ae4 <__swsetup_r>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d0cb      	beq.n	8006a68 <__swbuf_r+0x28>
 8006ad0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006ad4:	e7ea      	b.n	8006aac <__swbuf_r+0x6c>
 8006ad6:	bf00      	nop
 8006ad8:	08007ff4 	.word	0x08007ff4
 8006adc:	08008014 	.word	0x08008014
 8006ae0:	08007fd4 	.word	0x08007fd4

08006ae4 <__swsetup_r>:
 8006ae4:	4b32      	ldr	r3, [pc, #200]	; (8006bb0 <__swsetup_r+0xcc>)
 8006ae6:	b570      	push	{r4, r5, r6, lr}
 8006ae8:	681d      	ldr	r5, [r3, #0]
 8006aea:	4606      	mov	r6, r0
 8006aec:	460c      	mov	r4, r1
 8006aee:	b125      	cbz	r5, 8006afa <__swsetup_r+0x16>
 8006af0:	69ab      	ldr	r3, [r5, #24]
 8006af2:	b913      	cbnz	r3, 8006afa <__swsetup_r+0x16>
 8006af4:	4628      	mov	r0, r5
 8006af6:	f000 f97d 	bl	8006df4 <__sinit>
 8006afa:	4b2e      	ldr	r3, [pc, #184]	; (8006bb4 <__swsetup_r+0xd0>)
 8006afc:	429c      	cmp	r4, r3
 8006afe:	d10f      	bne.n	8006b20 <__swsetup_r+0x3c>
 8006b00:	686c      	ldr	r4, [r5, #4]
 8006b02:	89a3      	ldrh	r3, [r4, #12]
 8006b04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b08:	0719      	lsls	r1, r3, #28
 8006b0a:	d42c      	bmi.n	8006b66 <__swsetup_r+0x82>
 8006b0c:	06dd      	lsls	r5, r3, #27
 8006b0e:	d411      	bmi.n	8006b34 <__swsetup_r+0x50>
 8006b10:	2309      	movs	r3, #9
 8006b12:	6033      	str	r3, [r6, #0]
 8006b14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b18:	81a3      	strh	r3, [r4, #12]
 8006b1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b1e:	e03e      	b.n	8006b9e <__swsetup_r+0xba>
 8006b20:	4b25      	ldr	r3, [pc, #148]	; (8006bb8 <__swsetup_r+0xd4>)
 8006b22:	429c      	cmp	r4, r3
 8006b24:	d101      	bne.n	8006b2a <__swsetup_r+0x46>
 8006b26:	68ac      	ldr	r4, [r5, #8]
 8006b28:	e7eb      	b.n	8006b02 <__swsetup_r+0x1e>
 8006b2a:	4b24      	ldr	r3, [pc, #144]	; (8006bbc <__swsetup_r+0xd8>)
 8006b2c:	429c      	cmp	r4, r3
 8006b2e:	bf08      	it	eq
 8006b30:	68ec      	ldreq	r4, [r5, #12]
 8006b32:	e7e6      	b.n	8006b02 <__swsetup_r+0x1e>
 8006b34:	0758      	lsls	r0, r3, #29
 8006b36:	d512      	bpl.n	8006b5e <__swsetup_r+0x7a>
 8006b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b3a:	b141      	cbz	r1, 8006b4e <__swsetup_r+0x6a>
 8006b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b40:	4299      	cmp	r1, r3
 8006b42:	d002      	beq.n	8006b4a <__swsetup_r+0x66>
 8006b44:	4630      	mov	r0, r6
 8006b46:	f000 fa5b 	bl	8007000 <_free_r>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	6363      	str	r3, [r4, #52]	; 0x34
 8006b4e:	89a3      	ldrh	r3, [r4, #12]
 8006b50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b54:	81a3      	strh	r3, [r4, #12]
 8006b56:	2300      	movs	r3, #0
 8006b58:	6063      	str	r3, [r4, #4]
 8006b5a:	6923      	ldr	r3, [r4, #16]
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	89a3      	ldrh	r3, [r4, #12]
 8006b60:	f043 0308 	orr.w	r3, r3, #8
 8006b64:	81a3      	strh	r3, [r4, #12]
 8006b66:	6923      	ldr	r3, [r4, #16]
 8006b68:	b94b      	cbnz	r3, 8006b7e <__swsetup_r+0x9a>
 8006b6a:	89a3      	ldrh	r3, [r4, #12]
 8006b6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b74:	d003      	beq.n	8006b7e <__swsetup_r+0x9a>
 8006b76:	4621      	mov	r1, r4
 8006b78:	4630      	mov	r0, r6
 8006b7a:	f000 fa01 	bl	8006f80 <__smakebuf_r>
 8006b7e:	89a0      	ldrh	r0, [r4, #12]
 8006b80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b84:	f010 0301 	ands.w	r3, r0, #1
 8006b88:	d00a      	beq.n	8006ba0 <__swsetup_r+0xbc>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60a3      	str	r3, [r4, #8]
 8006b8e:	6963      	ldr	r3, [r4, #20]
 8006b90:	425b      	negs	r3, r3
 8006b92:	61a3      	str	r3, [r4, #24]
 8006b94:	6923      	ldr	r3, [r4, #16]
 8006b96:	b943      	cbnz	r3, 8006baa <__swsetup_r+0xc6>
 8006b98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b9c:	d1ba      	bne.n	8006b14 <__swsetup_r+0x30>
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ba0:	0781      	lsls	r1, r0, #30
 8006ba2:	bf58      	it	pl
 8006ba4:	6963      	ldrpl	r3, [r4, #20]
 8006ba6:	60a3      	str	r3, [r4, #8]
 8006ba8:	e7f4      	b.n	8006b94 <__swsetup_r+0xb0>
 8006baa:	2000      	movs	r0, #0
 8006bac:	e7f7      	b.n	8006b9e <__swsetup_r+0xba>
 8006bae:	bf00      	nop
 8006bb0:	2000000c 	.word	0x2000000c
 8006bb4:	08007ff4 	.word	0x08007ff4
 8006bb8:	08008014 	.word	0x08008014
 8006bbc:	08007fd4 	.word	0x08007fd4

08006bc0 <__sflush_r>:
 8006bc0:	898a      	ldrh	r2, [r1, #12]
 8006bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc6:	4605      	mov	r5, r0
 8006bc8:	0710      	lsls	r0, r2, #28
 8006bca:	460c      	mov	r4, r1
 8006bcc:	d458      	bmi.n	8006c80 <__sflush_r+0xc0>
 8006bce:	684b      	ldr	r3, [r1, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	dc05      	bgt.n	8006be0 <__sflush_r+0x20>
 8006bd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	dc02      	bgt.n	8006be0 <__sflush_r+0x20>
 8006bda:	2000      	movs	r0, #0
 8006bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006be0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006be2:	2e00      	cmp	r6, #0
 8006be4:	d0f9      	beq.n	8006bda <__sflush_r+0x1a>
 8006be6:	2300      	movs	r3, #0
 8006be8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006bec:	682f      	ldr	r7, [r5, #0]
 8006bee:	602b      	str	r3, [r5, #0]
 8006bf0:	d032      	beq.n	8006c58 <__sflush_r+0x98>
 8006bf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	075a      	lsls	r2, r3, #29
 8006bf8:	d505      	bpl.n	8006c06 <__sflush_r+0x46>
 8006bfa:	6863      	ldr	r3, [r4, #4]
 8006bfc:	1ac0      	subs	r0, r0, r3
 8006bfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c00:	b10b      	cbz	r3, 8006c06 <__sflush_r+0x46>
 8006c02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c04:	1ac0      	subs	r0, r0, r3
 8006c06:	2300      	movs	r3, #0
 8006c08:	4602      	mov	r2, r0
 8006c0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c0c:	6a21      	ldr	r1, [r4, #32]
 8006c0e:	4628      	mov	r0, r5
 8006c10:	47b0      	blx	r6
 8006c12:	1c43      	adds	r3, r0, #1
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	d106      	bne.n	8006c26 <__sflush_r+0x66>
 8006c18:	6829      	ldr	r1, [r5, #0]
 8006c1a:	291d      	cmp	r1, #29
 8006c1c:	d82c      	bhi.n	8006c78 <__sflush_r+0xb8>
 8006c1e:	4a2a      	ldr	r2, [pc, #168]	; (8006cc8 <__sflush_r+0x108>)
 8006c20:	40ca      	lsrs	r2, r1
 8006c22:	07d6      	lsls	r6, r2, #31
 8006c24:	d528      	bpl.n	8006c78 <__sflush_r+0xb8>
 8006c26:	2200      	movs	r2, #0
 8006c28:	6062      	str	r2, [r4, #4]
 8006c2a:	04d9      	lsls	r1, r3, #19
 8006c2c:	6922      	ldr	r2, [r4, #16]
 8006c2e:	6022      	str	r2, [r4, #0]
 8006c30:	d504      	bpl.n	8006c3c <__sflush_r+0x7c>
 8006c32:	1c42      	adds	r2, r0, #1
 8006c34:	d101      	bne.n	8006c3a <__sflush_r+0x7a>
 8006c36:	682b      	ldr	r3, [r5, #0]
 8006c38:	b903      	cbnz	r3, 8006c3c <__sflush_r+0x7c>
 8006c3a:	6560      	str	r0, [r4, #84]	; 0x54
 8006c3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c3e:	602f      	str	r7, [r5, #0]
 8006c40:	2900      	cmp	r1, #0
 8006c42:	d0ca      	beq.n	8006bda <__sflush_r+0x1a>
 8006c44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c48:	4299      	cmp	r1, r3
 8006c4a:	d002      	beq.n	8006c52 <__sflush_r+0x92>
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f000 f9d7 	bl	8007000 <_free_r>
 8006c52:	2000      	movs	r0, #0
 8006c54:	6360      	str	r0, [r4, #52]	; 0x34
 8006c56:	e7c1      	b.n	8006bdc <__sflush_r+0x1c>
 8006c58:	6a21      	ldr	r1, [r4, #32]
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	47b0      	blx	r6
 8006c60:	1c41      	adds	r1, r0, #1
 8006c62:	d1c7      	bne.n	8006bf4 <__sflush_r+0x34>
 8006c64:	682b      	ldr	r3, [r5, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0c4      	beq.n	8006bf4 <__sflush_r+0x34>
 8006c6a:	2b1d      	cmp	r3, #29
 8006c6c:	d001      	beq.n	8006c72 <__sflush_r+0xb2>
 8006c6e:	2b16      	cmp	r3, #22
 8006c70:	d101      	bne.n	8006c76 <__sflush_r+0xb6>
 8006c72:	602f      	str	r7, [r5, #0]
 8006c74:	e7b1      	b.n	8006bda <__sflush_r+0x1a>
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c7c:	81a3      	strh	r3, [r4, #12]
 8006c7e:	e7ad      	b.n	8006bdc <__sflush_r+0x1c>
 8006c80:	690f      	ldr	r7, [r1, #16]
 8006c82:	2f00      	cmp	r7, #0
 8006c84:	d0a9      	beq.n	8006bda <__sflush_r+0x1a>
 8006c86:	0793      	lsls	r3, r2, #30
 8006c88:	680e      	ldr	r6, [r1, #0]
 8006c8a:	bf08      	it	eq
 8006c8c:	694b      	ldreq	r3, [r1, #20]
 8006c8e:	600f      	str	r7, [r1, #0]
 8006c90:	bf18      	it	ne
 8006c92:	2300      	movne	r3, #0
 8006c94:	eba6 0807 	sub.w	r8, r6, r7
 8006c98:	608b      	str	r3, [r1, #8]
 8006c9a:	f1b8 0f00 	cmp.w	r8, #0
 8006c9e:	dd9c      	ble.n	8006bda <__sflush_r+0x1a>
 8006ca0:	6a21      	ldr	r1, [r4, #32]
 8006ca2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ca4:	4643      	mov	r3, r8
 8006ca6:	463a      	mov	r2, r7
 8006ca8:	4628      	mov	r0, r5
 8006caa:	47b0      	blx	r6
 8006cac:	2800      	cmp	r0, #0
 8006cae:	dc06      	bgt.n	8006cbe <__sflush_r+0xfe>
 8006cb0:	89a3      	ldrh	r3, [r4, #12]
 8006cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cb6:	81a3      	strh	r3, [r4, #12]
 8006cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cbc:	e78e      	b.n	8006bdc <__sflush_r+0x1c>
 8006cbe:	4407      	add	r7, r0
 8006cc0:	eba8 0800 	sub.w	r8, r8, r0
 8006cc4:	e7e9      	b.n	8006c9a <__sflush_r+0xda>
 8006cc6:	bf00      	nop
 8006cc8:	20400001 	.word	0x20400001

08006ccc <_fflush_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	690b      	ldr	r3, [r1, #16]
 8006cd0:	4605      	mov	r5, r0
 8006cd2:	460c      	mov	r4, r1
 8006cd4:	b913      	cbnz	r3, 8006cdc <_fflush_r+0x10>
 8006cd6:	2500      	movs	r5, #0
 8006cd8:	4628      	mov	r0, r5
 8006cda:	bd38      	pop	{r3, r4, r5, pc}
 8006cdc:	b118      	cbz	r0, 8006ce6 <_fflush_r+0x1a>
 8006cde:	6983      	ldr	r3, [r0, #24]
 8006ce0:	b90b      	cbnz	r3, 8006ce6 <_fflush_r+0x1a>
 8006ce2:	f000 f887 	bl	8006df4 <__sinit>
 8006ce6:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <_fflush_r+0x6c>)
 8006ce8:	429c      	cmp	r4, r3
 8006cea:	d11b      	bne.n	8006d24 <_fflush_r+0x58>
 8006cec:	686c      	ldr	r4, [r5, #4]
 8006cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d0ef      	beq.n	8006cd6 <_fflush_r+0xa>
 8006cf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006cf8:	07d0      	lsls	r0, r2, #31
 8006cfa:	d404      	bmi.n	8006d06 <_fflush_r+0x3a>
 8006cfc:	0599      	lsls	r1, r3, #22
 8006cfe:	d402      	bmi.n	8006d06 <_fflush_r+0x3a>
 8006d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d02:	f000 f915 	bl	8006f30 <__retarget_lock_acquire_recursive>
 8006d06:	4628      	mov	r0, r5
 8006d08:	4621      	mov	r1, r4
 8006d0a:	f7ff ff59 	bl	8006bc0 <__sflush_r>
 8006d0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d10:	07da      	lsls	r2, r3, #31
 8006d12:	4605      	mov	r5, r0
 8006d14:	d4e0      	bmi.n	8006cd8 <_fflush_r+0xc>
 8006d16:	89a3      	ldrh	r3, [r4, #12]
 8006d18:	059b      	lsls	r3, r3, #22
 8006d1a:	d4dd      	bmi.n	8006cd8 <_fflush_r+0xc>
 8006d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d1e:	f000 f908 	bl	8006f32 <__retarget_lock_release_recursive>
 8006d22:	e7d9      	b.n	8006cd8 <_fflush_r+0xc>
 8006d24:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <_fflush_r+0x70>)
 8006d26:	429c      	cmp	r4, r3
 8006d28:	d101      	bne.n	8006d2e <_fflush_r+0x62>
 8006d2a:	68ac      	ldr	r4, [r5, #8]
 8006d2c:	e7df      	b.n	8006cee <_fflush_r+0x22>
 8006d2e:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <_fflush_r+0x74>)
 8006d30:	429c      	cmp	r4, r3
 8006d32:	bf08      	it	eq
 8006d34:	68ec      	ldreq	r4, [r5, #12]
 8006d36:	e7da      	b.n	8006cee <_fflush_r+0x22>
 8006d38:	08007ff4 	.word	0x08007ff4
 8006d3c:	08008014 	.word	0x08008014
 8006d40:	08007fd4 	.word	0x08007fd4

08006d44 <std>:
 8006d44:	2300      	movs	r3, #0
 8006d46:	b510      	push	{r4, lr}
 8006d48:	4604      	mov	r4, r0
 8006d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d52:	6083      	str	r3, [r0, #8]
 8006d54:	8181      	strh	r1, [r0, #12]
 8006d56:	6643      	str	r3, [r0, #100]	; 0x64
 8006d58:	81c2      	strh	r2, [r0, #14]
 8006d5a:	6183      	str	r3, [r0, #24]
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	2208      	movs	r2, #8
 8006d60:	305c      	adds	r0, #92	; 0x5c
 8006d62:	f7ff fdb7 	bl	80068d4 <memset>
 8006d66:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <std+0x38>)
 8006d68:	6263      	str	r3, [r4, #36]	; 0x24
 8006d6a:	4b05      	ldr	r3, [pc, #20]	; (8006d80 <std+0x3c>)
 8006d6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d6e:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <std+0x40>)
 8006d70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d72:	4b05      	ldr	r3, [pc, #20]	; (8006d88 <std+0x44>)
 8006d74:	6224      	str	r4, [r4, #32]
 8006d76:	6323      	str	r3, [r4, #48]	; 0x30
 8006d78:	bd10      	pop	{r4, pc}
 8006d7a:	bf00      	nop
 8006d7c:	08007a75 	.word	0x08007a75
 8006d80:	08007a97 	.word	0x08007a97
 8006d84:	08007acf 	.word	0x08007acf
 8006d88:	08007af3 	.word	0x08007af3

08006d8c <_cleanup_r>:
 8006d8c:	4901      	ldr	r1, [pc, #4]	; (8006d94 <_cleanup_r+0x8>)
 8006d8e:	f000 b8af 	b.w	8006ef0 <_fwalk_reent>
 8006d92:	bf00      	nop
 8006d94:	08006ccd 	.word	0x08006ccd

08006d98 <__sfmoreglue>:
 8006d98:	b570      	push	{r4, r5, r6, lr}
 8006d9a:	2268      	movs	r2, #104	; 0x68
 8006d9c:	1e4d      	subs	r5, r1, #1
 8006d9e:	4355      	muls	r5, r2
 8006da0:	460e      	mov	r6, r1
 8006da2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006da6:	f000 f997 	bl	80070d8 <_malloc_r>
 8006daa:	4604      	mov	r4, r0
 8006dac:	b140      	cbz	r0, 8006dc0 <__sfmoreglue+0x28>
 8006dae:	2100      	movs	r1, #0
 8006db0:	e9c0 1600 	strd	r1, r6, [r0]
 8006db4:	300c      	adds	r0, #12
 8006db6:	60a0      	str	r0, [r4, #8]
 8006db8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006dbc:	f7ff fd8a 	bl	80068d4 <memset>
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	bd70      	pop	{r4, r5, r6, pc}

08006dc4 <__sfp_lock_acquire>:
 8006dc4:	4801      	ldr	r0, [pc, #4]	; (8006dcc <__sfp_lock_acquire+0x8>)
 8006dc6:	f000 b8b3 	b.w	8006f30 <__retarget_lock_acquire_recursive>
 8006dca:	bf00      	nop
 8006dcc:	2000021d 	.word	0x2000021d

08006dd0 <__sfp_lock_release>:
 8006dd0:	4801      	ldr	r0, [pc, #4]	; (8006dd8 <__sfp_lock_release+0x8>)
 8006dd2:	f000 b8ae 	b.w	8006f32 <__retarget_lock_release_recursive>
 8006dd6:	bf00      	nop
 8006dd8:	2000021d 	.word	0x2000021d

08006ddc <__sinit_lock_acquire>:
 8006ddc:	4801      	ldr	r0, [pc, #4]	; (8006de4 <__sinit_lock_acquire+0x8>)
 8006dde:	f000 b8a7 	b.w	8006f30 <__retarget_lock_acquire_recursive>
 8006de2:	bf00      	nop
 8006de4:	2000021e 	.word	0x2000021e

08006de8 <__sinit_lock_release>:
 8006de8:	4801      	ldr	r0, [pc, #4]	; (8006df0 <__sinit_lock_release+0x8>)
 8006dea:	f000 b8a2 	b.w	8006f32 <__retarget_lock_release_recursive>
 8006dee:	bf00      	nop
 8006df0:	2000021e 	.word	0x2000021e

08006df4 <__sinit>:
 8006df4:	b510      	push	{r4, lr}
 8006df6:	4604      	mov	r4, r0
 8006df8:	f7ff fff0 	bl	8006ddc <__sinit_lock_acquire>
 8006dfc:	69a3      	ldr	r3, [r4, #24]
 8006dfe:	b11b      	cbz	r3, 8006e08 <__sinit+0x14>
 8006e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e04:	f7ff bff0 	b.w	8006de8 <__sinit_lock_release>
 8006e08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e0c:	6523      	str	r3, [r4, #80]	; 0x50
 8006e0e:	4b13      	ldr	r3, [pc, #76]	; (8006e5c <__sinit+0x68>)
 8006e10:	4a13      	ldr	r2, [pc, #76]	; (8006e60 <__sinit+0x6c>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e16:	42a3      	cmp	r3, r4
 8006e18:	bf04      	itt	eq
 8006e1a:	2301      	moveq	r3, #1
 8006e1c:	61a3      	streq	r3, [r4, #24]
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f000 f820 	bl	8006e64 <__sfp>
 8006e24:	6060      	str	r0, [r4, #4]
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 f81c 	bl	8006e64 <__sfp>
 8006e2c:	60a0      	str	r0, [r4, #8]
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f000 f818 	bl	8006e64 <__sfp>
 8006e34:	2200      	movs	r2, #0
 8006e36:	60e0      	str	r0, [r4, #12]
 8006e38:	2104      	movs	r1, #4
 8006e3a:	6860      	ldr	r0, [r4, #4]
 8006e3c:	f7ff ff82 	bl	8006d44 <std>
 8006e40:	68a0      	ldr	r0, [r4, #8]
 8006e42:	2201      	movs	r2, #1
 8006e44:	2109      	movs	r1, #9
 8006e46:	f7ff ff7d 	bl	8006d44 <std>
 8006e4a:	68e0      	ldr	r0, [r4, #12]
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	2112      	movs	r1, #18
 8006e50:	f7ff ff78 	bl	8006d44 <std>
 8006e54:	2301      	movs	r3, #1
 8006e56:	61a3      	str	r3, [r4, #24]
 8006e58:	e7d2      	b.n	8006e00 <__sinit+0xc>
 8006e5a:	bf00      	nop
 8006e5c:	08007fd0 	.word	0x08007fd0
 8006e60:	08006d8d 	.word	0x08006d8d

08006e64 <__sfp>:
 8006e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e66:	4607      	mov	r7, r0
 8006e68:	f7ff ffac 	bl	8006dc4 <__sfp_lock_acquire>
 8006e6c:	4b1e      	ldr	r3, [pc, #120]	; (8006ee8 <__sfp+0x84>)
 8006e6e:	681e      	ldr	r6, [r3, #0]
 8006e70:	69b3      	ldr	r3, [r6, #24]
 8006e72:	b913      	cbnz	r3, 8006e7a <__sfp+0x16>
 8006e74:	4630      	mov	r0, r6
 8006e76:	f7ff ffbd 	bl	8006df4 <__sinit>
 8006e7a:	3648      	adds	r6, #72	; 0x48
 8006e7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	d503      	bpl.n	8006e8c <__sfp+0x28>
 8006e84:	6833      	ldr	r3, [r6, #0]
 8006e86:	b30b      	cbz	r3, 8006ecc <__sfp+0x68>
 8006e88:	6836      	ldr	r6, [r6, #0]
 8006e8a:	e7f7      	b.n	8006e7c <__sfp+0x18>
 8006e8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e90:	b9d5      	cbnz	r5, 8006ec8 <__sfp+0x64>
 8006e92:	4b16      	ldr	r3, [pc, #88]	; (8006eec <__sfp+0x88>)
 8006e94:	60e3      	str	r3, [r4, #12]
 8006e96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e9a:	6665      	str	r5, [r4, #100]	; 0x64
 8006e9c:	f000 f847 	bl	8006f2e <__retarget_lock_init_recursive>
 8006ea0:	f7ff ff96 	bl	8006dd0 <__sfp_lock_release>
 8006ea4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ea8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006eac:	6025      	str	r5, [r4, #0]
 8006eae:	61a5      	str	r5, [r4, #24]
 8006eb0:	2208      	movs	r2, #8
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006eb8:	f7ff fd0c 	bl	80068d4 <memset>
 8006ebc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ec0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ec8:	3468      	adds	r4, #104	; 0x68
 8006eca:	e7d9      	b.n	8006e80 <__sfp+0x1c>
 8006ecc:	2104      	movs	r1, #4
 8006ece:	4638      	mov	r0, r7
 8006ed0:	f7ff ff62 	bl	8006d98 <__sfmoreglue>
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	6030      	str	r0, [r6, #0]
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d1d5      	bne.n	8006e88 <__sfp+0x24>
 8006edc:	f7ff ff78 	bl	8006dd0 <__sfp_lock_release>
 8006ee0:	230c      	movs	r3, #12
 8006ee2:	603b      	str	r3, [r7, #0]
 8006ee4:	e7ee      	b.n	8006ec4 <__sfp+0x60>
 8006ee6:	bf00      	nop
 8006ee8:	08007fd0 	.word	0x08007fd0
 8006eec:	ffff0001 	.word	0xffff0001

08006ef0 <_fwalk_reent>:
 8006ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ef4:	4606      	mov	r6, r0
 8006ef6:	4688      	mov	r8, r1
 8006ef8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006efc:	2700      	movs	r7, #0
 8006efe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f02:	f1b9 0901 	subs.w	r9, r9, #1
 8006f06:	d505      	bpl.n	8006f14 <_fwalk_reent+0x24>
 8006f08:	6824      	ldr	r4, [r4, #0]
 8006f0a:	2c00      	cmp	r4, #0
 8006f0c:	d1f7      	bne.n	8006efe <_fwalk_reent+0xe>
 8006f0e:	4638      	mov	r0, r7
 8006f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f14:	89ab      	ldrh	r3, [r5, #12]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d907      	bls.n	8006f2a <_fwalk_reent+0x3a>
 8006f1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	d003      	beq.n	8006f2a <_fwalk_reent+0x3a>
 8006f22:	4629      	mov	r1, r5
 8006f24:	4630      	mov	r0, r6
 8006f26:	47c0      	blx	r8
 8006f28:	4307      	orrs	r7, r0
 8006f2a:	3568      	adds	r5, #104	; 0x68
 8006f2c:	e7e9      	b.n	8006f02 <_fwalk_reent+0x12>

08006f2e <__retarget_lock_init_recursive>:
 8006f2e:	4770      	bx	lr

08006f30 <__retarget_lock_acquire_recursive>:
 8006f30:	4770      	bx	lr

08006f32 <__retarget_lock_release_recursive>:
 8006f32:	4770      	bx	lr

08006f34 <__swhatbuf_r>:
 8006f34:	b570      	push	{r4, r5, r6, lr}
 8006f36:	460e      	mov	r6, r1
 8006f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f3c:	2900      	cmp	r1, #0
 8006f3e:	b096      	sub	sp, #88	; 0x58
 8006f40:	4614      	mov	r4, r2
 8006f42:	461d      	mov	r5, r3
 8006f44:	da08      	bge.n	8006f58 <__swhatbuf_r+0x24>
 8006f46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	602a      	str	r2, [r5, #0]
 8006f4e:	061a      	lsls	r2, r3, #24
 8006f50:	d410      	bmi.n	8006f74 <__swhatbuf_r+0x40>
 8006f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f56:	e00e      	b.n	8006f76 <__swhatbuf_r+0x42>
 8006f58:	466a      	mov	r2, sp
 8006f5a:	f000 fdf1 	bl	8007b40 <_fstat_r>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	dbf1      	blt.n	8006f46 <__swhatbuf_r+0x12>
 8006f62:	9a01      	ldr	r2, [sp, #4]
 8006f64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f6c:	425a      	negs	r2, r3
 8006f6e:	415a      	adcs	r2, r3
 8006f70:	602a      	str	r2, [r5, #0]
 8006f72:	e7ee      	b.n	8006f52 <__swhatbuf_r+0x1e>
 8006f74:	2340      	movs	r3, #64	; 0x40
 8006f76:	2000      	movs	r0, #0
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	b016      	add	sp, #88	; 0x58
 8006f7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f80 <__smakebuf_r>:
 8006f80:	898b      	ldrh	r3, [r1, #12]
 8006f82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f84:	079d      	lsls	r5, r3, #30
 8006f86:	4606      	mov	r6, r0
 8006f88:	460c      	mov	r4, r1
 8006f8a:	d507      	bpl.n	8006f9c <__smakebuf_r+0x1c>
 8006f8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	6123      	str	r3, [r4, #16]
 8006f94:	2301      	movs	r3, #1
 8006f96:	6163      	str	r3, [r4, #20]
 8006f98:	b002      	add	sp, #8
 8006f9a:	bd70      	pop	{r4, r5, r6, pc}
 8006f9c:	ab01      	add	r3, sp, #4
 8006f9e:	466a      	mov	r2, sp
 8006fa0:	f7ff ffc8 	bl	8006f34 <__swhatbuf_r>
 8006fa4:	9900      	ldr	r1, [sp, #0]
 8006fa6:	4605      	mov	r5, r0
 8006fa8:	4630      	mov	r0, r6
 8006faa:	f000 f895 	bl	80070d8 <_malloc_r>
 8006fae:	b948      	cbnz	r0, 8006fc4 <__smakebuf_r+0x44>
 8006fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fb4:	059a      	lsls	r2, r3, #22
 8006fb6:	d4ef      	bmi.n	8006f98 <__smakebuf_r+0x18>
 8006fb8:	f023 0303 	bic.w	r3, r3, #3
 8006fbc:	f043 0302 	orr.w	r3, r3, #2
 8006fc0:	81a3      	strh	r3, [r4, #12]
 8006fc2:	e7e3      	b.n	8006f8c <__smakebuf_r+0xc>
 8006fc4:	4b0d      	ldr	r3, [pc, #52]	; (8006ffc <__smakebuf_r+0x7c>)
 8006fc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	6020      	str	r0, [r4, #0]
 8006fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd0:	81a3      	strh	r3, [r4, #12]
 8006fd2:	9b00      	ldr	r3, [sp, #0]
 8006fd4:	6163      	str	r3, [r4, #20]
 8006fd6:	9b01      	ldr	r3, [sp, #4]
 8006fd8:	6120      	str	r0, [r4, #16]
 8006fda:	b15b      	cbz	r3, 8006ff4 <__smakebuf_r+0x74>
 8006fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	f000 fdbf 	bl	8007b64 <_isatty_r>
 8006fe6:	b128      	cbz	r0, 8006ff4 <__smakebuf_r+0x74>
 8006fe8:	89a3      	ldrh	r3, [r4, #12]
 8006fea:	f023 0303 	bic.w	r3, r3, #3
 8006fee:	f043 0301 	orr.w	r3, r3, #1
 8006ff2:	81a3      	strh	r3, [r4, #12]
 8006ff4:	89a0      	ldrh	r0, [r4, #12]
 8006ff6:	4305      	orrs	r5, r0
 8006ff8:	81a5      	strh	r5, [r4, #12]
 8006ffa:	e7cd      	b.n	8006f98 <__smakebuf_r+0x18>
 8006ffc:	08006d8d 	.word	0x08006d8d

08007000 <_free_r>:
 8007000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007002:	2900      	cmp	r1, #0
 8007004:	d044      	beq.n	8007090 <_free_r+0x90>
 8007006:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800700a:	9001      	str	r0, [sp, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	f1a1 0404 	sub.w	r4, r1, #4
 8007012:	bfb8      	it	lt
 8007014:	18e4      	addlt	r4, r4, r3
 8007016:	f000 fdef 	bl	8007bf8 <__malloc_lock>
 800701a:	4a1e      	ldr	r2, [pc, #120]	; (8007094 <_free_r+0x94>)
 800701c:	9801      	ldr	r0, [sp, #4]
 800701e:	6813      	ldr	r3, [r2, #0]
 8007020:	b933      	cbnz	r3, 8007030 <_free_r+0x30>
 8007022:	6063      	str	r3, [r4, #4]
 8007024:	6014      	str	r4, [r2, #0]
 8007026:	b003      	add	sp, #12
 8007028:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800702c:	f000 bdea 	b.w	8007c04 <__malloc_unlock>
 8007030:	42a3      	cmp	r3, r4
 8007032:	d908      	bls.n	8007046 <_free_r+0x46>
 8007034:	6825      	ldr	r5, [r4, #0]
 8007036:	1961      	adds	r1, r4, r5
 8007038:	428b      	cmp	r3, r1
 800703a:	bf01      	itttt	eq
 800703c:	6819      	ldreq	r1, [r3, #0]
 800703e:	685b      	ldreq	r3, [r3, #4]
 8007040:	1949      	addeq	r1, r1, r5
 8007042:	6021      	streq	r1, [r4, #0]
 8007044:	e7ed      	b.n	8007022 <_free_r+0x22>
 8007046:	461a      	mov	r2, r3
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	b10b      	cbz	r3, 8007050 <_free_r+0x50>
 800704c:	42a3      	cmp	r3, r4
 800704e:	d9fa      	bls.n	8007046 <_free_r+0x46>
 8007050:	6811      	ldr	r1, [r2, #0]
 8007052:	1855      	adds	r5, r2, r1
 8007054:	42a5      	cmp	r5, r4
 8007056:	d10b      	bne.n	8007070 <_free_r+0x70>
 8007058:	6824      	ldr	r4, [r4, #0]
 800705a:	4421      	add	r1, r4
 800705c:	1854      	adds	r4, r2, r1
 800705e:	42a3      	cmp	r3, r4
 8007060:	6011      	str	r1, [r2, #0]
 8007062:	d1e0      	bne.n	8007026 <_free_r+0x26>
 8007064:	681c      	ldr	r4, [r3, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	6053      	str	r3, [r2, #4]
 800706a:	4421      	add	r1, r4
 800706c:	6011      	str	r1, [r2, #0]
 800706e:	e7da      	b.n	8007026 <_free_r+0x26>
 8007070:	d902      	bls.n	8007078 <_free_r+0x78>
 8007072:	230c      	movs	r3, #12
 8007074:	6003      	str	r3, [r0, #0]
 8007076:	e7d6      	b.n	8007026 <_free_r+0x26>
 8007078:	6825      	ldr	r5, [r4, #0]
 800707a:	1961      	adds	r1, r4, r5
 800707c:	428b      	cmp	r3, r1
 800707e:	bf04      	itt	eq
 8007080:	6819      	ldreq	r1, [r3, #0]
 8007082:	685b      	ldreq	r3, [r3, #4]
 8007084:	6063      	str	r3, [r4, #4]
 8007086:	bf04      	itt	eq
 8007088:	1949      	addeq	r1, r1, r5
 800708a:	6021      	streq	r1, [r4, #0]
 800708c:	6054      	str	r4, [r2, #4]
 800708e:	e7ca      	b.n	8007026 <_free_r+0x26>
 8007090:	b003      	add	sp, #12
 8007092:	bd30      	pop	{r4, r5, pc}
 8007094:	20000220 	.word	0x20000220

08007098 <sbrk_aligned>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	4e0e      	ldr	r6, [pc, #56]	; (80070d4 <sbrk_aligned+0x3c>)
 800709c:	460c      	mov	r4, r1
 800709e:	6831      	ldr	r1, [r6, #0]
 80070a0:	4605      	mov	r5, r0
 80070a2:	b911      	cbnz	r1, 80070aa <sbrk_aligned+0x12>
 80070a4:	f000 fcd6 	bl	8007a54 <_sbrk_r>
 80070a8:	6030      	str	r0, [r6, #0]
 80070aa:	4621      	mov	r1, r4
 80070ac:	4628      	mov	r0, r5
 80070ae:	f000 fcd1 	bl	8007a54 <_sbrk_r>
 80070b2:	1c43      	adds	r3, r0, #1
 80070b4:	d00a      	beq.n	80070cc <sbrk_aligned+0x34>
 80070b6:	1cc4      	adds	r4, r0, #3
 80070b8:	f024 0403 	bic.w	r4, r4, #3
 80070bc:	42a0      	cmp	r0, r4
 80070be:	d007      	beq.n	80070d0 <sbrk_aligned+0x38>
 80070c0:	1a21      	subs	r1, r4, r0
 80070c2:	4628      	mov	r0, r5
 80070c4:	f000 fcc6 	bl	8007a54 <_sbrk_r>
 80070c8:	3001      	adds	r0, #1
 80070ca:	d101      	bne.n	80070d0 <sbrk_aligned+0x38>
 80070cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80070d0:	4620      	mov	r0, r4
 80070d2:	bd70      	pop	{r4, r5, r6, pc}
 80070d4:	20000224 	.word	0x20000224

080070d8 <_malloc_r>:
 80070d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070dc:	1ccd      	adds	r5, r1, #3
 80070de:	f025 0503 	bic.w	r5, r5, #3
 80070e2:	3508      	adds	r5, #8
 80070e4:	2d0c      	cmp	r5, #12
 80070e6:	bf38      	it	cc
 80070e8:	250c      	movcc	r5, #12
 80070ea:	2d00      	cmp	r5, #0
 80070ec:	4607      	mov	r7, r0
 80070ee:	db01      	blt.n	80070f4 <_malloc_r+0x1c>
 80070f0:	42a9      	cmp	r1, r5
 80070f2:	d905      	bls.n	8007100 <_malloc_r+0x28>
 80070f4:	230c      	movs	r3, #12
 80070f6:	603b      	str	r3, [r7, #0]
 80070f8:	2600      	movs	r6, #0
 80070fa:	4630      	mov	r0, r6
 80070fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007100:	4e2e      	ldr	r6, [pc, #184]	; (80071bc <_malloc_r+0xe4>)
 8007102:	f000 fd79 	bl	8007bf8 <__malloc_lock>
 8007106:	6833      	ldr	r3, [r6, #0]
 8007108:	461c      	mov	r4, r3
 800710a:	bb34      	cbnz	r4, 800715a <_malloc_r+0x82>
 800710c:	4629      	mov	r1, r5
 800710e:	4638      	mov	r0, r7
 8007110:	f7ff ffc2 	bl	8007098 <sbrk_aligned>
 8007114:	1c43      	adds	r3, r0, #1
 8007116:	4604      	mov	r4, r0
 8007118:	d14d      	bne.n	80071b6 <_malloc_r+0xde>
 800711a:	6834      	ldr	r4, [r6, #0]
 800711c:	4626      	mov	r6, r4
 800711e:	2e00      	cmp	r6, #0
 8007120:	d140      	bne.n	80071a4 <_malloc_r+0xcc>
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	4631      	mov	r1, r6
 8007126:	4638      	mov	r0, r7
 8007128:	eb04 0803 	add.w	r8, r4, r3
 800712c:	f000 fc92 	bl	8007a54 <_sbrk_r>
 8007130:	4580      	cmp	r8, r0
 8007132:	d13a      	bne.n	80071aa <_malloc_r+0xd2>
 8007134:	6821      	ldr	r1, [r4, #0]
 8007136:	3503      	adds	r5, #3
 8007138:	1a6d      	subs	r5, r5, r1
 800713a:	f025 0503 	bic.w	r5, r5, #3
 800713e:	3508      	adds	r5, #8
 8007140:	2d0c      	cmp	r5, #12
 8007142:	bf38      	it	cc
 8007144:	250c      	movcc	r5, #12
 8007146:	4629      	mov	r1, r5
 8007148:	4638      	mov	r0, r7
 800714a:	f7ff ffa5 	bl	8007098 <sbrk_aligned>
 800714e:	3001      	adds	r0, #1
 8007150:	d02b      	beq.n	80071aa <_malloc_r+0xd2>
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	442b      	add	r3, r5
 8007156:	6023      	str	r3, [r4, #0]
 8007158:	e00e      	b.n	8007178 <_malloc_r+0xa0>
 800715a:	6822      	ldr	r2, [r4, #0]
 800715c:	1b52      	subs	r2, r2, r5
 800715e:	d41e      	bmi.n	800719e <_malloc_r+0xc6>
 8007160:	2a0b      	cmp	r2, #11
 8007162:	d916      	bls.n	8007192 <_malloc_r+0xba>
 8007164:	1961      	adds	r1, r4, r5
 8007166:	42a3      	cmp	r3, r4
 8007168:	6025      	str	r5, [r4, #0]
 800716a:	bf18      	it	ne
 800716c:	6059      	strne	r1, [r3, #4]
 800716e:	6863      	ldr	r3, [r4, #4]
 8007170:	bf08      	it	eq
 8007172:	6031      	streq	r1, [r6, #0]
 8007174:	5162      	str	r2, [r4, r5]
 8007176:	604b      	str	r3, [r1, #4]
 8007178:	4638      	mov	r0, r7
 800717a:	f104 060b 	add.w	r6, r4, #11
 800717e:	f000 fd41 	bl	8007c04 <__malloc_unlock>
 8007182:	f026 0607 	bic.w	r6, r6, #7
 8007186:	1d23      	adds	r3, r4, #4
 8007188:	1af2      	subs	r2, r6, r3
 800718a:	d0b6      	beq.n	80070fa <_malloc_r+0x22>
 800718c:	1b9b      	subs	r3, r3, r6
 800718e:	50a3      	str	r3, [r4, r2]
 8007190:	e7b3      	b.n	80070fa <_malloc_r+0x22>
 8007192:	6862      	ldr	r2, [r4, #4]
 8007194:	42a3      	cmp	r3, r4
 8007196:	bf0c      	ite	eq
 8007198:	6032      	streq	r2, [r6, #0]
 800719a:	605a      	strne	r2, [r3, #4]
 800719c:	e7ec      	b.n	8007178 <_malloc_r+0xa0>
 800719e:	4623      	mov	r3, r4
 80071a0:	6864      	ldr	r4, [r4, #4]
 80071a2:	e7b2      	b.n	800710a <_malloc_r+0x32>
 80071a4:	4634      	mov	r4, r6
 80071a6:	6876      	ldr	r6, [r6, #4]
 80071a8:	e7b9      	b.n	800711e <_malloc_r+0x46>
 80071aa:	230c      	movs	r3, #12
 80071ac:	603b      	str	r3, [r7, #0]
 80071ae:	4638      	mov	r0, r7
 80071b0:	f000 fd28 	bl	8007c04 <__malloc_unlock>
 80071b4:	e7a1      	b.n	80070fa <_malloc_r+0x22>
 80071b6:	6025      	str	r5, [r4, #0]
 80071b8:	e7de      	b.n	8007178 <_malloc_r+0xa0>
 80071ba:	bf00      	nop
 80071bc:	20000220 	.word	0x20000220

080071c0 <__ssputs_r>:
 80071c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071c4:	688e      	ldr	r6, [r1, #8]
 80071c6:	429e      	cmp	r6, r3
 80071c8:	4682      	mov	sl, r0
 80071ca:	460c      	mov	r4, r1
 80071cc:	4690      	mov	r8, r2
 80071ce:	461f      	mov	r7, r3
 80071d0:	d838      	bhi.n	8007244 <__ssputs_r+0x84>
 80071d2:	898a      	ldrh	r2, [r1, #12]
 80071d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071d8:	d032      	beq.n	8007240 <__ssputs_r+0x80>
 80071da:	6825      	ldr	r5, [r4, #0]
 80071dc:	6909      	ldr	r1, [r1, #16]
 80071de:	eba5 0901 	sub.w	r9, r5, r1
 80071e2:	6965      	ldr	r5, [r4, #20]
 80071e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071ec:	3301      	adds	r3, #1
 80071ee:	444b      	add	r3, r9
 80071f0:	106d      	asrs	r5, r5, #1
 80071f2:	429d      	cmp	r5, r3
 80071f4:	bf38      	it	cc
 80071f6:	461d      	movcc	r5, r3
 80071f8:	0553      	lsls	r3, r2, #21
 80071fa:	d531      	bpl.n	8007260 <__ssputs_r+0xa0>
 80071fc:	4629      	mov	r1, r5
 80071fe:	f7ff ff6b 	bl	80070d8 <_malloc_r>
 8007202:	4606      	mov	r6, r0
 8007204:	b950      	cbnz	r0, 800721c <__ssputs_r+0x5c>
 8007206:	230c      	movs	r3, #12
 8007208:	f8ca 3000 	str.w	r3, [sl]
 800720c:	89a3      	ldrh	r3, [r4, #12]
 800720e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007212:	81a3      	strh	r3, [r4, #12]
 8007214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800721c:	6921      	ldr	r1, [r4, #16]
 800721e:	464a      	mov	r2, r9
 8007220:	f000 fcc2 	bl	8007ba8 <memcpy>
 8007224:	89a3      	ldrh	r3, [r4, #12]
 8007226:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800722a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800722e:	81a3      	strh	r3, [r4, #12]
 8007230:	6126      	str	r6, [r4, #16]
 8007232:	6165      	str	r5, [r4, #20]
 8007234:	444e      	add	r6, r9
 8007236:	eba5 0509 	sub.w	r5, r5, r9
 800723a:	6026      	str	r6, [r4, #0]
 800723c:	60a5      	str	r5, [r4, #8]
 800723e:	463e      	mov	r6, r7
 8007240:	42be      	cmp	r6, r7
 8007242:	d900      	bls.n	8007246 <__ssputs_r+0x86>
 8007244:	463e      	mov	r6, r7
 8007246:	6820      	ldr	r0, [r4, #0]
 8007248:	4632      	mov	r2, r6
 800724a:	4641      	mov	r1, r8
 800724c:	f000 fcba 	bl	8007bc4 <memmove>
 8007250:	68a3      	ldr	r3, [r4, #8]
 8007252:	1b9b      	subs	r3, r3, r6
 8007254:	60a3      	str	r3, [r4, #8]
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	4433      	add	r3, r6
 800725a:	6023      	str	r3, [r4, #0]
 800725c:	2000      	movs	r0, #0
 800725e:	e7db      	b.n	8007218 <__ssputs_r+0x58>
 8007260:	462a      	mov	r2, r5
 8007262:	f000 fcd5 	bl	8007c10 <_realloc_r>
 8007266:	4606      	mov	r6, r0
 8007268:	2800      	cmp	r0, #0
 800726a:	d1e1      	bne.n	8007230 <__ssputs_r+0x70>
 800726c:	6921      	ldr	r1, [r4, #16]
 800726e:	4650      	mov	r0, sl
 8007270:	f7ff fec6 	bl	8007000 <_free_r>
 8007274:	e7c7      	b.n	8007206 <__ssputs_r+0x46>
	...

08007278 <_svfiprintf_r>:
 8007278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800727c:	4698      	mov	r8, r3
 800727e:	898b      	ldrh	r3, [r1, #12]
 8007280:	061b      	lsls	r3, r3, #24
 8007282:	b09d      	sub	sp, #116	; 0x74
 8007284:	4607      	mov	r7, r0
 8007286:	460d      	mov	r5, r1
 8007288:	4614      	mov	r4, r2
 800728a:	d50e      	bpl.n	80072aa <_svfiprintf_r+0x32>
 800728c:	690b      	ldr	r3, [r1, #16]
 800728e:	b963      	cbnz	r3, 80072aa <_svfiprintf_r+0x32>
 8007290:	2140      	movs	r1, #64	; 0x40
 8007292:	f7ff ff21 	bl	80070d8 <_malloc_r>
 8007296:	6028      	str	r0, [r5, #0]
 8007298:	6128      	str	r0, [r5, #16]
 800729a:	b920      	cbnz	r0, 80072a6 <_svfiprintf_r+0x2e>
 800729c:	230c      	movs	r3, #12
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072a4:	e0d1      	b.n	800744a <_svfiprintf_r+0x1d2>
 80072a6:	2340      	movs	r3, #64	; 0x40
 80072a8:	616b      	str	r3, [r5, #20]
 80072aa:	2300      	movs	r3, #0
 80072ac:	9309      	str	r3, [sp, #36]	; 0x24
 80072ae:	2320      	movs	r3, #32
 80072b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80072b8:	2330      	movs	r3, #48	; 0x30
 80072ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007464 <_svfiprintf_r+0x1ec>
 80072be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072c2:	f04f 0901 	mov.w	r9, #1
 80072c6:	4623      	mov	r3, r4
 80072c8:	469a      	mov	sl, r3
 80072ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072ce:	b10a      	cbz	r2, 80072d4 <_svfiprintf_r+0x5c>
 80072d0:	2a25      	cmp	r2, #37	; 0x25
 80072d2:	d1f9      	bne.n	80072c8 <_svfiprintf_r+0x50>
 80072d4:	ebba 0b04 	subs.w	fp, sl, r4
 80072d8:	d00b      	beq.n	80072f2 <_svfiprintf_r+0x7a>
 80072da:	465b      	mov	r3, fp
 80072dc:	4622      	mov	r2, r4
 80072de:	4629      	mov	r1, r5
 80072e0:	4638      	mov	r0, r7
 80072e2:	f7ff ff6d 	bl	80071c0 <__ssputs_r>
 80072e6:	3001      	adds	r0, #1
 80072e8:	f000 80aa 	beq.w	8007440 <_svfiprintf_r+0x1c8>
 80072ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072ee:	445a      	add	r2, fp
 80072f0:	9209      	str	r2, [sp, #36]	; 0x24
 80072f2:	f89a 3000 	ldrb.w	r3, [sl]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f000 80a2 	beq.w	8007440 <_svfiprintf_r+0x1c8>
 80072fc:	2300      	movs	r3, #0
 80072fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007302:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007306:	f10a 0a01 	add.w	sl, sl, #1
 800730a:	9304      	str	r3, [sp, #16]
 800730c:	9307      	str	r3, [sp, #28]
 800730e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007312:	931a      	str	r3, [sp, #104]	; 0x68
 8007314:	4654      	mov	r4, sl
 8007316:	2205      	movs	r2, #5
 8007318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800731c:	4851      	ldr	r0, [pc, #324]	; (8007464 <_svfiprintf_r+0x1ec>)
 800731e:	f7f8 ff5f 	bl	80001e0 <memchr>
 8007322:	9a04      	ldr	r2, [sp, #16]
 8007324:	b9d8      	cbnz	r0, 800735e <_svfiprintf_r+0xe6>
 8007326:	06d0      	lsls	r0, r2, #27
 8007328:	bf44      	itt	mi
 800732a:	2320      	movmi	r3, #32
 800732c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007330:	0711      	lsls	r1, r2, #28
 8007332:	bf44      	itt	mi
 8007334:	232b      	movmi	r3, #43	; 0x2b
 8007336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800733a:	f89a 3000 	ldrb.w	r3, [sl]
 800733e:	2b2a      	cmp	r3, #42	; 0x2a
 8007340:	d015      	beq.n	800736e <_svfiprintf_r+0xf6>
 8007342:	9a07      	ldr	r2, [sp, #28]
 8007344:	4654      	mov	r4, sl
 8007346:	2000      	movs	r0, #0
 8007348:	f04f 0c0a 	mov.w	ip, #10
 800734c:	4621      	mov	r1, r4
 800734e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007352:	3b30      	subs	r3, #48	; 0x30
 8007354:	2b09      	cmp	r3, #9
 8007356:	d94e      	bls.n	80073f6 <_svfiprintf_r+0x17e>
 8007358:	b1b0      	cbz	r0, 8007388 <_svfiprintf_r+0x110>
 800735a:	9207      	str	r2, [sp, #28]
 800735c:	e014      	b.n	8007388 <_svfiprintf_r+0x110>
 800735e:	eba0 0308 	sub.w	r3, r0, r8
 8007362:	fa09 f303 	lsl.w	r3, r9, r3
 8007366:	4313      	orrs	r3, r2
 8007368:	9304      	str	r3, [sp, #16]
 800736a:	46a2      	mov	sl, r4
 800736c:	e7d2      	b.n	8007314 <_svfiprintf_r+0x9c>
 800736e:	9b03      	ldr	r3, [sp, #12]
 8007370:	1d19      	adds	r1, r3, #4
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	9103      	str	r1, [sp, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	bfbb      	ittet	lt
 800737a:	425b      	neglt	r3, r3
 800737c:	f042 0202 	orrlt.w	r2, r2, #2
 8007380:	9307      	strge	r3, [sp, #28]
 8007382:	9307      	strlt	r3, [sp, #28]
 8007384:	bfb8      	it	lt
 8007386:	9204      	strlt	r2, [sp, #16]
 8007388:	7823      	ldrb	r3, [r4, #0]
 800738a:	2b2e      	cmp	r3, #46	; 0x2e
 800738c:	d10c      	bne.n	80073a8 <_svfiprintf_r+0x130>
 800738e:	7863      	ldrb	r3, [r4, #1]
 8007390:	2b2a      	cmp	r3, #42	; 0x2a
 8007392:	d135      	bne.n	8007400 <_svfiprintf_r+0x188>
 8007394:	9b03      	ldr	r3, [sp, #12]
 8007396:	1d1a      	adds	r2, r3, #4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	9203      	str	r2, [sp, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	bfb8      	it	lt
 80073a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80073a4:	3402      	adds	r4, #2
 80073a6:	9305      	str	r3, [sp, #20]
 80073a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007474 <_svfiprintf_r+0x1fc>
 80073ac:	7821      	ldrb	r1, [r4, #0]
 80073ae:	2203      	movs	r2, #3
 80073b0:	4650      	mov	r0, sl
 80073b2:	f7f8 ff15 	bl	80001e0 <memchr>
 80073b6:	b140      	cbz	r0, 80073ca <_svfiprintf_r+0x152>
 80073b8:	2340      	movs	r3, #64	; 0x40
 80073ba:	eba0 000a 	sub.w	r0, r0, sl
 80073be:	fa03 f000 	lsl.w	r0, r3, r0
 80073c2:	9b04      	ldr	r3, [sp, #16]
 80073c4:	4303      	orrs	r3, r0
 80073c6:	3401      	adds	r4, #1
 80073c8:	9304      	str	r3, [sp, #16]
 80073ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ce:	4826      	ldr	r0, [pc, #152]	; (8007468 <_svfiprintf_r+0x1f0>)
 80073d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073d4:	2206      	movs	r2, #6
 80073d6:	f7f8 ff03 	bl	80001e0 <memchr>
 80073da:	2800      	cmp	r0, #0
 80073dc:	d038      	beq.n	8007450 <_svfiprintf_r+0x1d8>
 80073de:	4b23      	ldr	r3, [pc, #140]	; (800746c <_svfiprintf_r+0x1f4>)
 80073e0:	bb1b      	cbnz	r3, 800742a <_svfiprintf_r+0x1b2>
 80073e2:	9b03      	ldr	r3, [sp, #12]
 80073e4:	3307      	adds	r3, #7
 80073e6:	f023 0307 	bic.w	r3, r3, #7
 80073ea:	3308      	adds	r3, #8
 80073ec:	9303      	str	r3, [sp, #12]
 80073ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f0:	4433      	add	r3, r6
 80073f2:	9309      	str	r3, [sp, #36]	; 0x24
 80073f4:	e767      	b.n	80072c6 <_svfiprintf_r+0x4e>
 80073f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80073fa:	460c      	mov	r4, r1
 80073fc:	2001      	movs	r0, #1
 80073fe:	e7a5      	b.n	800734c <_svfiprintf_r+0xd4>
 8007400:	2300      	movs	r3, #0
 8007402:	3401      	adds	r4, #1
 8007404:	9305      	str	r3, [sp, #20]
 8007406:	4619      	mov	r1, r3
 8007408:	f04f 0c0a 	mov.w	ip, #10
 800740c:	4620      	mov	r0, r4
 800740e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007412:	3a30      	subs	r2, #48	; 0x30
 8007414:	2a09      	cmp	r2, #9
 8007416:	d903      	bls.n	8007420 <_svfiprintf_r+0x1a8>
 8007418:	2b00      	cmp	r3, #0
 800741a:	d0c5      	beq.n	80073a8 <_svfiprintf_r+0x130>
 800741c:	9105      	str	r1, [sp, #20]
 800741e:	e7c3      	b.n	80073a8 <_svfiprintf_r+0x130>
 8007420:	fb0c 2101 	mla	r1, ip, r1, r2
 8007424:	4604      	mov	r4, r0
 8007426:	2301      	movs	r3, #1
 8007428:	e7f0      	b.n	800740c <_svfiprintf_r+0x194>
 800742a:	ab03      	add	r3, sp, #12
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	462a      	mov	r2, r5
 8007430:	4b0f      	ldr	r3, [pc, #60]	; (8007470 <_svfiprintf_r+0x1f8>)
 8007432:	a904      	add	r1, sp, #16
 8007434:	4638      	mov	r0, r7
 8007436:	f3af 8000 	nop.w
 800743a:	1c42      	adds	r2, r0, #1
 800743c:	4606      	mov	r6, r0
 800743e:	d1d6      	bne.n	80073ee <_svfiprintf_r+0x176>
 8007440:	89ab      	ldrh	r3, [r5, #12]
 8007442:	065b      	lsls	r3, r3, #25
 8007444:	f53f af2c 	bmi.w	80072a0 <_svfiprintf_r+0x28>
 8007448:	9809      	ldr	r0, [sp, #36]	; 0x24
 800744a:	b01d      	add	sp, #116	; 0x74
 800744c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007450:	ab03      	add	r3, sp, #12
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	462a      	mov	r2, r5
 8007456:	4b06      	ldr	r3, [pc, #24]	; (8007470 <_svfiprintf_r+0x1f8>)
 8007458:	a904      	add	r1, sp, #16
 800745a:	4638      	mov	r0, r7
 800745c:	f000 f9d4 	bl	8007808 <_printf_i>
 8007460:	e7eb      	b.n	800743a <_svfiprintf_r+0x1c2>
 8007462:	bf00      	nop
 8007464:	08008034 	.word	0x08008034
 8007468:	0800803e 	.word	0x0800803e
 800746c:	00000000 	.word	0x00000000
 8007470:	080071c1 	.word	0x080071c1
 8007474:	0800803a 	.word	0x0800803a

08007478 <__sfputc_r>:
 8007478:	6893      	ldr	r3, [r2, #8]
 800747a:	3b01      	subs	r3, #1
 800747c:	2b00      	cmp	r3, #0
 800747e:	b410      	push	{r4}
 8007480:	6093      	str	r3, [r2, #8]
 8007482:	da08      	bge.n	8007496 <__sfputc_r+0x1e>
 8007484:	6994      	ldr	r4, [r2, #24]
 8007486:	42a3      	cmp	r3, r4
 8007488:	db01      	blt.n	800748e <__sfputc_r+0x16>
 800748a:	290a      	cmp	r1, #10
 800748c:	d103      	bne.n	8007496 <__sfputc_r+0x1e>
 800748e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007492:	f7ff bad5 	b.w	8006a40 <__swbuf_r>
 8007496:	6813      	ldr	r3, [r2, #0]
 8007498:	1c58      	adds	r0, r3, #1
 800749a:	6010      	str	r0, [r2, #0]
 800749c:	7019      	strb	r1, [r3, #0]
 800749e:	4608      	mov	r0, r1
 80074a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <__sfputs_r>:
 80074a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a8:	4606      	mov	r6, r0
 80074aa:	460f      	mov	r7, r1
 80074ac:	4614      	mov	r4, r2
 80074ae:	18d5      	adds	r5, r2, r3
 80074b0:	42ac      	cmp	r4, r5
 80074b2:	d101      	bne.n	80074b8 <__sfputs_r+0x12>
 80074b4:	2000      	movs	r0, #0
 80074b6:	e007      	b.n	80074c8 <__sfputs_r+0x22>
 80074b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074bc:	463a      	mov	r2, r7
 80074be:	4630      	mov	r0, r6
 80074c0:	f7ff ffda 	bl	8007478 <__sfputc_r>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d1f3      	bne.n	80074b0 <__sfputs_r+0xa>
 80074c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074cc <_vfiprintf_r>:
 80074cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d0:	460d      	mov	r5, r1
 80074d2:	b09d      	sub	sp, #116	; 0x74
 80074d4:	4614      	mov	r4, r2
 80074d6:	4698      	mov	r8, r3
 80074d8:	4606      	mov	r6, r0
 80074da:	b118      	cbz	r0, 80074e4 <_vfiprintf_r+0x18>
 80074dc:	6983      	ldr	r3, [r0, #24]
 80074de:	b90b      	cbnz	r3, 80074e4 <_vfiprintf_r+0x18>
 80074e0:	f7ff fc88 	bl	8006df4 <__sinit>
 80074e4:	4b89      	ldr	r3, [pc, #548]	; (800770c <_vfiprintf_r+0x240>)
 80074e6:	429d      	cmp	r5, r3
 80074e8:	d11b      	bne.n	8007522 <_vfiprintf_r+0x56>
 80074ea:	6875      	ldr	r5, [r6, #4]
 80074ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074ee:	07d9      	lsls	r1, r3, #31
 80074f0:	d405      	bmi.n	80074fe <_vfiprintf_r+0x32>
 80074f2:	89ab      	ldrh	r3, [r5, #12]
 80074f4:	059a      	lsls	r2, r3, #22
 80074f6:	d402      	bmi.n	80074fe <_vfiprintf_r+0x32>
 80074f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074fa:	f7ff fd19 	bl	8006f30 <__retarget_lock_acquire_recursive>
 80074fe:	89ab      	ldrh	r3, [r5, #12]
 8007500:	071b      	lsls	r3, r3, #28
 8007502:	d501      	bpl.n	8007508 <_vfiprintf_r+0x3c>
 8007504:	692b      	ldr	r3, [r5, #16]
 8007506:	b9eb      	cbnz	r3, 8007544 <_vfiprintf_r+0x78>
 8007508:	4629      	mov	r1, r5
 800750a:	4630      	mov	r0, r6
 800750c:	f7ff faea 	bl	8006ae4 <__swsetup_r>
 8007510:	b1c0      	cbz	r0, 8007544 <_vfiprintf_r+0x78>
 8007512:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007514:	07dc      	lsls	r4, r3, #31
 8007516:	d50e      	bpl.n	8007536 <_vfiprintf_r+0x6a>
 8007518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800751c:	b01d      	add	sp, #116	; 0x74
 800751e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007522:	4b7b      	ldr	r3, [pc, #492]	; (8007710 <_vfiprintf_r+0x244>)
 8007524:	429d      	cmp	r5, r3
 8007526:	d101      	bne.n	800752c <_vfiprintf_r+0x60>
 8007528:	68b5      	ldr	r5, [r6, #8]
 800752a:	e7df      	b.n	80074ec <_vfiprintf_r+0x20>
 800752c:	4b79      	ldr	r3, [pc, #484]	; (8007714 <_vfiprintf_r+0x248>)
 800752e:	429d      	cmp	r5, r3
 8007530:	bf08      	it	eq
 8007532:	68f5      	ldreq	r5, [r6, #12]
 8007534:	e7da      	b.n	80074ec <_vfiprintf_r+0x20>
 8007536:	89ab      	ldrh	r3, [r5, #12]
 8007538:	0598      	lsls	r0, r3, #22
 800753a:	d4ed      	bmi.n	8007518 <_vfiprintf_r+0x4c>
 800753c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800753e:	f7ff fcf8 	bl	8006f32 <__retarget_lock_release_recursive>
 8007542:	e7e9      	b.n	8007518 <_vfiprintf_r+0x4c>
 8007544:	2300      	movs	r3, #0
 8007546:	9309      	str	r3, [sp, #36]	; 0x24
 8007548:	2320      	movs	r3, #32
 800754a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800754e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007552:	2330      	movs	r3, #48	; 0x30
 8007554:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007718 <_vfiprintf_r+0x24c>
 8007558:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800755c:	f04f 0901 	mov.w	r9, #1
 8007560:	4623      	mov	r3, r4
 8007562:	469a      	mov	sl, r3
 8007564:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007568:	b10a      	cbz	r2, 800756e <_vfiprintf_r+0xa2>
 800756a:	2a25      	cmp	r2, #37	; 0x25
 800756c:	d1f9      	bne.n	8007562 <_vfiprintf_r+0x96>
 800756e:	ebba 0b04 	subs.w	fp, sl, r4
 8007572:	d00b      	beq.n	800758c <_vfiprintf_r+0xc0>
 8007574:	465b      	mov	r3, fp
 8007576:	4622      	mov	r2, r4
 8007578:	4629      	mov	r1, r5
 800757a:	4630      	mov	r0, r6
 800757c:	f7ff ff93 	bl	80074a6 <__sfputs_r>
 8007580:	3001      	adds	r0, #1
 8007582:	f000 80aa 	beq.w	80076da <_vfiprintf_r+0x20e>
 8007586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007588:	445a      	add	r2, fp
 800758a:	9209      	str	r2, [sp, #36]	; 0x24
 800758c:	f89a 3000 	ldrb.w	r3, [sl]
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 80a2 	beq.w	80076da <_vfiprintf_r+0x20e>
 8007596:	2300      	movs	r3, #0
 8007598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800759c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075a0:	f10a 0a01 	add.w	sl, sl, #1
 80075a4:	9304      	str	r3, [sp, #16]
 80075a6:	9307      	str	r3, [sp, #28]
 80075a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075ac:	931a      	str	r3, [sp, #104]	; 0x68
 80075ae:	4654      	mov	r4, sl
 80075b0:	2205      	movs	r2, #5
 80075b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075b6:	4858      	ldr	r0, [pc, #352]	; (8007718 <_vfiprintf_r+0x24c>)
 80075b8:	f7f8 fe12 	bl	80001e0 <memchr>
 80075bc:	9a04      	ldr	r2, [sp, #16]
 80075be:	b9d8      	cbnz	r0, 80075f8 <_vfiprintf_r+0x12c>
 80075c0:	06d1      	lsls	r1, r2, #27
 80075c2:	bf44      	itt	mi
 80075c4:	2320      	movmi	r3, #32
 80075c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075ca:	0713      	lsls	r3, r2, #28
 80075cc:	bf44      	itt	mi
 80075ce:	232b      	movmi	r3, #43	; 0x2b
 80075d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075d4:	f89a 3000 	ldrb.w	r3, [sl]
 80075d8:	2b2a      	cmp	r3, #42	; 0x2a
 80075da:	d015      	beq.n	8007608 <_vfiprintf_r+0x13c>
 80075dc:	9a07      	ldr	r2, [sp, #28]
 80075de:	4654      	mov	r4, sl
 80075e0:	2000      	movs	r0, #0
 80075e2:	f04f 0c0a 	mov.w	ip, #10
 80075e6:	4621      	mov	r1, r4
 80075e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075ec:	3b30      	subs	r3, #48	; 0x30
 80075ee:	2b09      	cmp	r3, #9
 80075f0:	d94e      	bls.n	8007690 <_vfiprintf_r+0x1c4>
 80075f2:	b1b0      	cbz	r0, 8007622 <_vfiprintf_r+0x156>
 80075f4:	9207      	str	r2, [sp, #28]
 80075f6:	e014      	b.n	8007622 <_vfiprintf_r+0x156>
 80075f8:	eba0 0308 	sub.w	r3, r0, r8
 80075fc:	fa09 f303 	lsl.w	r3, r9, r3
 8007600:	4313      	orrs	r3, r2
 8007602:	9304      	str	r3, [sp, #16]
 8007604:	46a2      	mov	sl, r4
 8007606:	e7d2      	b.n	80075ae <_vfiprintf_r+0xe2>
 8007608:	9b03      	ldr	r3, [sp, #12]
 800760a:	1d19      	adds	r1, r3, #4
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	9103      	str	r1, [sp, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	bfbb      	ittet	lt
 8007614:	425b      	neglt	r3, r3
 8007616:	f042 0202 	orrlt.w	r2, r2, #2
 800761a:	9307      	strge	r3, [sp, #28]
 800761c:	9307      	strlt	r3, [sp, #28]
 800761e:	bfb8      	it	lt
 8007620:	9204      	strlt	r2, [sp, #16]
 8007622:	7823      	ldrb	r3, [r4, #0]
 8007624:	2b2e      	cmp	r3, #46	; 0x2e
 8007626:	d10c      	bne.n	8007642 <_vfiprintf_r+0x176>
 8007628:	7863      	ldrb	r3, [r4, #1]
 800762a:	2b2a      	cmp	r3, #42	; 0x2a
 800762c:	d135      	bne.n	800769a <_vfiprintf_r+0x1ce>
 800762e:	9b03      	ldr	r3, [sp, #12]
 8007630:	1d1a      	adds	r2, r3, #4
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	9203      	str	r2, [sp, #12]
 8007636:	2b00      	cmp	r3, #0
 8007638:	bfb8      	it	lt
 800763a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800763e:	3402      	adds	r4, #2
 8007640:	9305      	str	r3, [sp, #20]
 8007642:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007728 <_vfiprintf_r+0x25c>
 8007646:	7821      	ldrb	r1, [r4, #0]
 8007648:	2203      	movs	r2, #3
 800764a:	4650      	mov	r0, sl
 800764c:	f7f8 fdc8 	bl	80001e0 <memchr>
 8007650:	b140      	cbz	r0, 8007664 <_vfiprintf_r+0x198>
 8007652:	2340      	movs	r3, #64	; 0x40
 8007654:	eba0 000a 	sub.w	r0, r0, sl
 8007658:	fa03 f000 	lsl.w	r0, r3, r0
 800765c:	9b04      	ldr	r3, [sp, #16]
 800765e:	4303      	orrs	r3, r0
 8007660:	3401      	adds	r4, #1
 8007662:	9304      	str	r3, [sp, #16]
 8007664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007668:	482c      	ldr	r0, [pc, #176]	; (800771c <_vfiprintf_r+0x250>)
 800766a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800766e:	2206      	movs	r2, #6
 8007670:	f7f8 fdb6 	bl	80001e0 <memchr>
 8007674:	2800      	cmp	r0, #0
 8007676:	d03f      	beq.n	80076f8 <_vfiprintf_r+0x22c>
 8007678:	4b29      	ldr	r3, [pc, #164]	; (8007720 <_vfiprintf_r+0x254>)
 800767a:	bb1b      	cbnz	r3, 80076c4 <_vfiprintf_r+0x1f8>
 800767c:	9b03      	ldr	r3, [sp, #12]
 800767e:	3307      	adds	r3, #7
 8007680:	f023 0307 	bic.w	r3, r3, #7
 8007684:	3308      	adds	r3, #8
 8007686:	9303      	str	r3, [sp, #12]
 8007688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800768a:	443b      	add	r3, r7
 800768c:	9309      	str	r3, [sp, #36]	; 0x24
 800768e:	e767      	b.n	8007560 <_vfiprintf_r+0x94>
 8007690:	fb0c 3202 	mla	r2, ip, r2, r3
 8007694:	460c      	mov	r4, r1
 8007696:	2001      	movs	r0, #1
 8007698:	e7a5      	b.n	80075e6 <_vfiprintf_r+0x11a>
 800769a:	2300      	movs	r3, #0
 800769c:	3401      	adds	r4, #1
 800769e:	9305      	str	r3, [sp, #20]
 80076a0:	4619      	mov	r1, r3
 80076a2:	f04f 0c0a 	mov.w	ip, #10
 80076a6:	4620      	mov	r0, r4
 80076a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076ac:	3a30      	subs	r2, #48	; 0x30
 80076ae:	2a09      	cmp	r2, #9
 80076b0:	d903      	bls.n	80076ba <_vfiprintf_r+0x1ee>
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0c5      	beq.n	8007642 <_vfiprintf_r+0x176>
 80076b6:	9105      	str	r1, [sp, #20]
 80076b8:	e7c3      	b.n	8007642 <_vfiprintf_r+0x176>
 80076ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80076be:	4604      	mov	r4, r0
 80076c0:	2301      	movs	r3, #1
 80076c2:	e7f0      	b.n	80076a6 <_vfiprintf_r+0x1da>
 80076c4:	ab03      	add	r3, sp, #12
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	462a      	mov	r2, r5
 80076ca:	4b16      	ldr	r3, [pc, #88]	; (8007724 <_vfiprintf_r+0x258>)
 80076cc:	a904      	add	r1, sp, #16
 80076ce:	4630      	mov	r0, r6
 80076d0:	f3af 8000 	nop.w
 80076d4:	4607      	mov	r7, r0
 80076d6:	1c78      	adds	r0, r7, #1
 80076d8:	d1d6      	bne.n	8007688 <_vfiprintf_r+0x1bc>
 80076da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076dc:	07d9      	lsls	r1, r3, #31
 80076de:	d405      	bmi.n	80076ec <_vfiprintf_r+0x220>
 80076e0:	89ab      	ldrh	r3, [r5, #12]
 80076e2:	059a      	lsls	r2, r3, #22
 80076e4:	d402      	bmi.n	80076ec <_vfiprintf_r+0x220>
 80076e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076e8:	f7ff fc23 	bl	8006f32 <__retarget_lock_release_recursive>
 80076ec:	89ab      	ldrh	r3, [r5, #12]
 80076ee:	065b      	lsls	r3, r3, #25
 80076f0:	f53f af12 	bmi.w	8007518 <_vfiprintf_r+0x4c>
 80076f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076f6:	e711      	b.n	800751c <_vfiprintf_r+0x50>
 80076f8:	ab03      	add	r3, sp, #12
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	462a      	mov	r2, r5
 80076fe:	4b09      	ldr	r3, [pc, #36]	; (8007724 <_vfiprintf_r+0x258>)
 8007700:	a904      	add	r1, sp, #16
 8007702:	4630      	mov	r0, r6
 8007704:	f000 f880 	bl	8007808 <_printf_i>
 8007708:	e7e4      	b.n	80076d4 <_vfiprintf_r+0x208>
 800770a:	bf00      	nop
 800770c:	08007ff4 	.word	0x08007ff4
 8007710:	08008014 	.word	0x08008014
 8007714:	08007fd4 	.word	0x08007fd4
 8007718:	08008034 	.word	0x08008034
 800771c:	0800803e 	.word	0x0800803e
 8007720:	00000000 	.word	0x00000000
 8007724:	080074a7 	.word	0x080074a7
 8007728:	0800803a 	.word	0x0800803a

0800772c <_printf_common>:
 800772c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007730:	4616      	mov	r6, r2
 8007732:	4699      	mov	r9, r3
 8007734:	688a      	ldr	r2, [r1, #8]
 8007736:	690b      	ldr	r3, [r1, #16]
 8007738:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800773c:	4293      	cmp	r3, r2
 800773e:	bfb8      	it	lt
 8007740:	4613      	movlt	r3, r2
 8007742:	6033      	str	r3, [r6, #0]
 8007744:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007748:	4607      	mov	r7, r0
 800774a:	460c      	mov	r4, r1
 800774c:	b10a      	cbz	r2, 8007752 <_printf_common+0x26>
 800774e:	3301      	adds	r3, #1
 8007750:	6033      	str	r3, [r6, #0]
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	0699      	lsls	r1, r3, #26
 8007756:	bf42      	ittt	mi
 8007758:	6833      	ldrmi	r3, [r6, #0]
 800775a:	3302      	addmi	r3, #2
 800775c:	6033      	strmi	r3, [r6, #0]
 800775e:	6825      	ldr	r5, [r4, #0]
 8007760:	f015 0506 	ands.w	r5, r5, #6
 8007764:	d106      	bne.n	8007774 <_printf_common+0x48>
 8007766:	f104 0a19 	add.w	sl, r4, #25
 800776a:	68e3      	ldr	r3, [r4, #12]
 800776c:	6832      	ldr	r2, [r6, #0]
 800776e:	1a9b      	subs	r3, r3, r2
 8007770:	42ab      	cmp	r3, r5
 8007772:	dc26      	bgt.n	80077c2 <_printf_common+0x96>
 8007774:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007778:	1e13      	subs	r3, r2, #0
 800777a:	6822      	ldr	r2, [r4, #0]
 800777c:	bf18      	it	ne
 800777e:	2301      	movne	r3, #1
 8007780:	0692      	lsls	r2, r2, #26
 8007782:	d42b      	bmi.n	80077dc <_printf_common+0xb0>
 8007784:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007788:	4649      	mov	r1, r9
 800778a:	4638      	mov	r0, r7
 800778c:	47c0      	blx	r8
 800778e:	3001      	adds	r0, #1
 8007790:	d01e      	beq.n	80077d0 <_printf_common+0xa4>
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	68e5      	ldr	r5, [r4, #12]
 8007796:	6832      	ldr	r2, [r6, #0]
 8007798:	f003 0306 	and.w	r3, r3, #6
 800779c:	2b04      	cmp	r3, #4
 800779e:	bf08      	it	eq
 80077a0:	1aad      	subeq	r5, r5, r2
 80077a2:	68a3      	ldr	r3, [r4, #8]
 80077a4:	6922      	ldr	r2, [r4, #16]
 80077a6:	bf0c      	ite	eq
 80077a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077ac:	2500      	movne	r5, #0
 80077ae:	4293      	cmp	r3, r2
 80077b0:	bfc4      	itt	gt
 80077b2:	1a9b      	subgt	r3, r3, r2
 80077b4:	18ed      	addgt	r5, r5, r3
 80077b6:	2600      	movs	r6, #0
 80077b8:	341a      	adds	r4, #26
 80077ba:	42b5      	cmp	r5, r6
 80077bc:	d11a      	bne.n	80077f4 <_printf_common+0xc8>
 80077be:	2000      	movs	r0, #0
 80077c0:	e008      	b.n	80077d4 <_printf_common+0xa8>
 80077c2:	2301      	movs	r3, #1
 80077c4:	4652      	mov	r2, sl
 80077c6:	4649      	mov	r1, r9
 80077c8:	4638      	mov	r0, r7
 80077ca:	47c0      	blx	r8
 80077cc:	3001      	adds	r0, #1
 80077ce:	d103      	bne.n	80077d8 <_printf_common+0xac>
 80077d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d8:	3501      	adds	r5, #1
 80077da:	e7c6      	b.n	800776a <_printf_common+0x3e>
 80077dc:	18e1      	adds	r1, r4, r3
 80077de:	1c5a      	adds	r2, r3, #1
 80077e0:	2030      	movs	r0, #48	; 0x30
 80077e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077e6:	4422      	add	r2, r4
 80077e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077f0:	3302      	adds	r3, #2
 80077f2:	e7c7      	b.n	8007784 <_printf_common+0x58>
 80077f4:	2301      	movs	r3, #1
 80077f6:	4622      	mov	r2, r4
 80077f8:	4649      	mov	r1, r9
 80077fa:	4638      	mov	r0, r7
 80077fc:	47c0      	blx	r8
 80077fe:	3001      	adds	r0, #1
 8007800:	d0e6      	beq.n	80077d0 <_printf_common+0xa4>
 8007802:	3601      	adds	r6, #1
 8007804:	e7d9      	b.n	80077ba <_printf_common+0x8e>
	...

08007808 <_printf_i>:
 8007808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800780c:	7e0f      	ldrb	r7, [r1, #24]
 800780e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007810:	2f78      	cmp	r7, #120	; 0x78
 8007812:	4691      	mov	r9, r2
 8007814:	4680      	mov	r8, r0
 8007816:	460c      	mov	r4, r1
 8007818:	469a      	mov	sl, r3
 800781a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800781e:	d807      	bhi.n	8007830 <_printf_i+0x28>
 8007820:	2f62      	cmp	r7, #98	; 0x62
 8007822:	d80a      	bhi.n	800783a <_printf_i+0x32>
 8007824:	2f00      	cmp	r7, #0
 8007826:	f000 80d8 	beq.w	80079da <_printf_i+0x1d2>
 800782a:	2f58      	cmp	r7, #88	; 0x58
 800782c:	f000 80a3 	beq.w	8007976 <_printf_i+0x16e>
 8007830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007834:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007838:	e03a      	b.n	80078b0 <_printf_i+0xa8>
 800783a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800783e:	2b15      	cmp	r3, #21
 8007840:	d8f6      	bhi.n	8007830 <_printf_i+0x28>
 8007842:	a101      	add	r1, pc, #4	; (adr r1, 8007848 <_printf_i+0x40>)
 8007844:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007848:	080078a1 	.word	0x080078a1
 800784c:	080078b5 	.word	0x080078b5
 8007850:	08007831 	.word	0x08007831
 8007854:	08007831 	.word	0x08007831
 8007858:	08007831 	.word	0x08007831
 800785c:	08007831 	.word	0x08007831
 8007860:	080078b5 	.word	0x080078b5
 8007864:	08007831 	.word	0x08007831
 8007868:	08007831 	.word	0x08007831
 800786c:	08007831 	.word	0x08007831
 8007870:	08007831 	.word	0x08007831
 8007874:	080079c1 	.word	0x080079c1
 8007878:	080078e5 	.word	0x080078e5
 800787c:	080079a3 	.word	0x080079a3
 8007880:	08007831 	.word	0x08007831
 8007884:	08007831 	.word	0x08007831
 8007888:	080079e3 	.word	0x080079e3
 800788c:	08007831 	.word	0x08007831
 8007890:	080078e5 	.word	0x080078e5
 8007894:	08007831 	.word	0x08007831
 8007898:	08007831 	.word	0x08007831
 800789c:	080079ab 	.word	0x080079ab
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	1d1a      	adds	r2, r3, #4
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	602a      	str	r2, [r5, #0]
 80078a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078b0:	2301      	movs	r3, #1
 80078b2:	e0a3      	b.n	80079fc <_printf_i+0x1f4>
 80078b4:	6820      	ldr	r0, [r4, #0]
 80078b6:	6829      	ldr	r1, [r5, #0]
 80078b8:	0606      	lsls	r6, r0, #24
 80078ba:	f101 0304 	add.w	r3, r1, #4
 80078be:	d50a      	bpl.n	80078d6 <_printf_i+0xce>
 80078c0:	680e      	ldr	r6, [r1, #0]
 80078c2:	602b      	str	r3, [r5, #0]
 80078c4:	2e00      	cmp	r6, #0
 80078c6:	da03      	bge.n	80078d0 <_printf_i+0xc8>
 80078c8:	232d      	movs	r3, #45	; 0x2d
 80078ca:	4276      	negs	r6, r6
 80078cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078d0:	485e      	ldr	r0, [pc, #376]	; (8007a4c <_printf_i+0x244>)
 80078d2:	230a      	movs	r3, #10
 80078d4:	e019      	b.n	800790a <_printf_i+0x102>
 80078d6:	680e      	ldr	r6, [r1, #0]
 80078d8:	602b      	str	r3, [r5, #0]
 80078da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078de:	bf18      	it	ne
 80078e0:	b236      	sxthne	r6, r6
 80078e2:	e7ef      	b.n	80078c4 <_printf_i+0xbc>
 80078e4:	682b      	ldr	r3, [r5, #0]
 80078e6:	6820      	ldr	r0, [r4, #0]
 80078e8:	1d19      	adds	r1, r3, #4
 80078ea:	6029      	str	r1, [r5, #0]
 80078ec:	0601      	lsls	r1, r0, #24
 80078ee:	d501      	bpl.n	80078f4 <_printf_i+0xec>
 80078f0:	681e      	ldr	r6, [r3, #0]
 80078f2:	e002      	b.n	80078fa <_printf_i+0xf2>
 80078f4:	0646      	lsls	r6, r0, #25
 80078f6:	d5fb      	bpl.n	80078f0 <_printf_i+0xe8>
 80078f8:	881e      	ldrh	r6, [r3, #0]
 80078fa:	4854      	ldr	r0, [pc, #336]	; (8007a4c <_printf_i+0x244>)
 80078fc:	2f6f      	cmp	r7, #111	; 0x6f
 80078fe:	bf0c      	ite	eq
 8007900:	2308      	moveq	r3, #8
 8007902:	230a      	movne	r3, #10
 8007904:	2100      	movs	r1, #0
 8007906:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800790a:	6865      	ldr	r5, [r4, #4]
 800790c:	60a5      	str	r5, [r4, #8]
 800790e:	2d00      	cmp	r5, #0
 8007910:	bfa2      	ittt	ge
 8007912:	6821      	ldrge	r1, [r4, #0]
 8007914:	f021 0104 	bicge.w	r1, r1, #4
 8007918:	6021      	strge	r1, [r4, #0]
 800791a:	b90e      	cbnz	r6, 8007920 <_printf_i+0x118>
 800791c:	2d00      	cmp	r5, #0
 800791e:	d04d      	beq.n	80079bc <_printf_i+0x1b4>
 8007920:	4615      	mov	r5, r2
 8007922:	fbb6 f1f3 	udiv	r1, r6, r3
 8007926:	fb03 6711 	mls	r7, r3, r1, r6
 800792a:	5dc7      	ldrb	r7, [r0, r7]
 800792c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007930:	4637      	mov	r7, r6
 8007932:	42bb      	cmp	r3, r7
 8007934:	460e      	mov	r6, r1
 8007936:	d9f4      	bls.n	8007922 <_printf_i+0x11a>
 8007938:	2b08      	cmp	r3, #8
 800793a:	d10b      	bne.n	8007954 <_printf_i+0x14c>
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	07de      	lsls	r6, r3, #31
 8007940:	d508      	bpl.n	8007954 <_printf_i+0x14c>
 8007942:	6923      	ldr	r3, [r4, #16]
 8007944:	6861      	ldr	r1, [r4, #4]
 8007946:	4299      	cmp	r1, r3
 8007948:	bfde      	ittt	le
 800794a:	2330      	movle	r3, #48	; 0x30
 800794c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007950:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007954:	1b52      	subs	r2, r2, r5
 8007956:	6122      	str	r2, [r4, #16]
 8007958:	f8cd a000 	str.w	sl, [sp]
 800795c:	464b      	mov	r3, r9
 800795e:	aa03      	add	r2, sp, #12
 8007960:	4621      	mov	r1, r4
 8007962:	4640      	mov	r0, r8
 8007964:	f7ff fee2 	bl	800772c <_printf_common>
 8007968:	3001      	adds	r0, #1
 800796a:	d14c      	bne.n	8007a06 <_printf_i+0x1fe>
 800796c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007970:	b004      	add	sp, #16
 8007972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007976:	4835      	ldr	r0, [pc, #212]	; (8007a4c <_printf_i+0x244>)
 8007978:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800797c:	6829      	ldr	r1, [r5, #0]
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	f851 6b04 	ldr.w	r6, [r1], #4
 8007984:	6029      	str	r1, [r5, #0]
 8007986:	061d      	lsls	r5, r3, #24
 8007988:	d514      	bpl.n	80079b4 <_printf_i+0x1ac>
 800798a:	07df      	lsls	r7, r3, #31
 800798c:	bf44      	itt	mi
 800798e:	f043 0320 	orrmi.w	r3, r3, #32
 8007992:	6023      	strmi	r3, [r4, #0]
 8007994:	b91e      	cbnz	r6, 800799e <_printf_i+0x196>
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	f023 0320 	bic.w	r3, r3, #32
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	2310      	movs	r3, #16
 80079a0:	e7b0      	b.n	8007904 <_printf_i+0xfc>
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	f043 0320 	orr.w	r3, r3, #32
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	2378      	movs	r3, #120	; 0x78
 80079ac:	4828      	ldr	r0, [pc, #160]	; (8007a50 <_printf_i+0x248>)
 80079ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079b2:	e7e3      	b.n	800797c <_printf_i+0x174>
 80079b4:	0659      	lsls	r1, r3, #25
 80079b6:	bf48      	it	mi
 80079b8:	b2b6      	uxthmi	r6, r6
 80079ba:	e7e6      	b.n	800798a <_printf_i+0x182>
 80079bc:	4615      	mov	r5, r2
 80079be:	e7bb      	b.n	8007938 <_printf_i+0x130>
 80079c0:	682b      	ldr	r3, [r5, #0]
 80079c2:	6826      	ldr	r6, [r4, #0]
 80079c4:	6961      	ldr	r1, [r4, #20]
 80079c6:	1d18      	adds	r0, r3, #4
 80079c8:	6028      	str	r0, [r5, #0]
 80079ca:	0635      	lsls	r5, r6, #24
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	d501      	bpl.n	80079d4 <_printf_i+0x1cc>
 80079d0:	6019      	str	r1, [r3, #0]
 80079d2:	e002      	b.n	80079da <_printf_i+0x1d2>
 80079d4:	0670      	lsls	r0, r6, #25
 80079d6:	d5fb      	bpl.n	80079d0 <_printf_i+0x1c8>
 80079d8:	8019      	strh	r1, [r3, #0]
 80079da:	2300      	movs	r3, #0
 80079dc:	6123      	str	r3, [r4, #16]
 80079de:	4615      	mov	r5, r2
 80079e0:	e7ba      	b.n	8007958 <_printf_i+0x150>
 80079e2:	682b      	ldr	r3, [r5, #0]
 80079e4:	1d1a      	adds	r2, r3, #4
 80079e6:	602a      	str	r2, [r5, #0]
 80079e8:	681d      	ldr	r5, [r3, #0]
 80079ea:	6862      	ldr	r2, [r4, #4]
 80079ec:	2100      	movs	r1, #0
 80079ee:	4628      	mov	r0, r5
 80079f0:	f7f8 fbf6 	bl	80001e0 <memchr>
 80079f4:	b108      	cbz	r0, 80079fa <_printf_i+0x1f2>
 80079f6:	1b40      	subs	r0, r0, r5
 80079f8:	6060      	str	r0, [r4, #4]
 80079fa:	6863      	ldr	r3, [r4, #4]
 80079fc:	6123      	str	r3, [r4, #16]
 80079fe:	2300      	movs	r3, #0
 8007a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a04:	e7a8      	b.n	8007958 <_printf_i+0x150>
 8007a06:	6923      	ldr	r3, [r4, #16]
 8007a08:	462a      	mov	r2, r5
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	4640      	mov	r0, r8
 8007a0e:	47d0      	blx	sl
 8007a10:	3001      	adds	r0, #1
 8007a12:	d0ab      	beq.n	800796c <_printf_i+0x164>
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	079b      	lsls	r3, r3, #30
 8007a18:	d413      	bmi.n	8007a42 <_printf_i+0x23a>
 8007a1a:	68e0      	ldr	r0, [r4, #12]
 8007a1c:	9b03      	ldr	r3, [sp, #12]
 8007a1e:	4298      	cmp	r0, r3
 8007a20:	bfb8      	it	lt
 8007a22:	4618      	movlt	r0, r3
 8007a24:	e7a4      	b.n	8007970 <_printf_i+0x168>
 8007a26:	2301      	movs	r3, #1
 8007a28:	4632      	mov	r2, r6
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	47d0      	blx	sl
 8007a30:	3001      	adds	r0, #1
 8007a32:	d09b      	beq.n	800796c <_printf_i+0x164>
 8007a34:	3501      	adds	r5, #1
 8007a36:	68e3      	ldr	r3, [r4, #12]
 8007a38:	9903      	ldr	r1, [sp, #12]
 8007a3a:	1a5b      	subs	r3, r3, r1
 8007a3c:	42ab      	cmp	r3, r5
 8007a3e:	dcf2      	bgt.n	8007a26 <_printf_i+0x21e>
 8007a40:	e7eb      	b.n	8007a1a <_printf_i+0x212>
 8007a42:	2500      	movs	r5, #0
 8007a44:	f104 0619 	add.w	r6, r4, #25
 8007a48:	e7f5      	b.n	8007a36 <_printf_i+0x22e>
 8007a4a:	bf00      	nop
 8007a4c:	08008045 	.word	0x08008045
 8007a50:	08008056 	.word	0x08008056

08007a54 <_sbrk_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	4d06      	ldr	r5, [pc, #24]	; (8007a70 <_sbrk_r+0x1c>)
 8007a58:	2300      	movs	r3, #0
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	602b      	str	r3, [r5, #0]
 8007a60:	f7fa f970 	bl	8001d44 <_sbrk>
 8007a64:	1c43      	adds	r3, r0, #1
 8007a66:	d102      	bne.n	8007a6e <_sbrk_r+0x1a>
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	b103      	cbz	r3, 8007a6e <_sbrk_r+0x1a>
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
 8007a70:	20000228 	.word	0x20000228

08007a74 <__sread>:
 8007a74:	b510      	push	{r4, lr}
 8007a76:	460c      	mov	r4, r1
 8007a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a7c:	f000 f8f8 	bl	8007c70 <_read_r>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	bfab      	itete	ge
 8007a84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a86:	89a3      	ldrhlt	r3, [r4, #12]
 8007a88:	181b      	addge	r3, r3, r0
 8007a8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a8e:	bfac      	ite	ge
 8007a90:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a92:	81a3      	strhlt	r3, [r4, #12]
 8007a94:	bd10      	pop	{r4, pc}

08007a96 <__swrite>:
 8007a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a9a:	461f      	mov	r7, r3
 8007a9c:	898b      	ldrh	r3, [r1, #12]
 8007a9e:	05db      	lsls	r3, r3, #23
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	4616      	mov	r6, r2
 8007aa6:	d505      	bpl.n	8007ab4 <__swrite+0x1e>
 8007aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aac:	2302      	movs	r3, #2
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f000 f868 	bl	8007b84 <_lseek_r>
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007abe:	81a3      	strh	r3, [r4, #12]
 8007ac0:	4632      	mov	r2, r6
 8007ac2:	463b      	mov	r3, r7
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007aca:	f000 b817 	b.w	8007afc <_write_r>

08007ace <__sseek>:
 8007ace:	b510      	push	{r4, lr}
 8007ad0:	460c      	mov	r4, r1
 8007ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad6:	f000 f855 	bl	8007b84 <_lseek_r>
 8007ada:	1c43      	adds	r3, r0, #1
 8007adc:	89a3      	ldrh	r3, [r4, #12]
 8007ade:	bf15      	itete	ne
 8007ae0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ae2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ae6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007aea:	81a3      	strheq	r3, [r4, #12]
 8007aec:	bf18      	it	ne
 8007aee:	81a3      	strhne	r3, [r4, #12]
 8007af0:	bd10      	pop	{r4, pc}

08007af2 <__sclose>:
 8007af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af6:	f000 b813 	b.w	8007b20 <_close_r>
	...

08007afc <_write_r>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	4d07      	ldr	r5, [pc, #28]	; (8007b1c <_write_r+0x20>)
 8007b00:	4604      	mov	r4, r0
 8007b02:	4608      	mov	r0, r1
 8007b04:	4611      	mov	r1, r2
 8007b06:	2200      	movs	r2, #0
 8007b08:	602a      	str	r2, [r5, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	f7fa f8c9 	bl	8001ca2 <_write>
 8007b10:	1c43      	adds	r3, r0, #1
 8007b12:	d102      	bne.n	8007b1a <_write_r+0x1e>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	b103      	cbz	r3, 8007b1a <_write_r+0x1e>
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	20000228 	.word	0x20000228

08007b20 <_close_r>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	4d06      	ldr	r5, [pc, #24]	; (8007b3c <_close_r+0x1c>)
 8007b24:	2300      	movs	r3, #0
 8007b26:	4604      	mov	r4, r0
 8007b28:	4608      	mov	r0, r1
 8007b2a:	602b      	str	r3, [r5, #0]
 8007b2c:	f7fa f8d5 	bl	8001cda <_close>
 8007b30:	1c43      	adds	r3, r0, #1
 8007b32:	d102      	bne.n	8007b3a <_close_r+0x1a>
 8007b34:	682b      	ldr	r3, [r5, #0]
 8007b36:	b103      	cbz	r3, 8007b3a <_close_r+0x1a>
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	bd38      	pop	{r3, r4, r5, pc}
 8007b3c:	20000228 	.word	0x20000228

08007b40 <_fstat_r>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	4d07      	ldr	r5, [pc, #28]	; (8007b60 <_fstat_r+0x20>)
 8007b44:	2300      	movs	r3, #0
 8007b46:	4604      	mov	r4, r0
 8007b48:	4608      	mov	r0, r1
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	602b      	str	r3, [r5, #0]
 8007b4e:	f7fa f8d0 	bl	8001cf2 <_fstat>
 8007b52:	1c43      	adds	r3, r0, #1
 8007b54:	d102      	bne.n	8007b5c <_fstat_r+0x1c>
 8007b56:	682b      	ldr	r3, [r5, #0]
 8007b58:	b103      	cbz	r3, 8007b5c <_fstat_r+0x1c>
 8007b5a:	6023      	str	r3, [r4, #0]
 8007b5c:	bd38      	pop	{r3, r4, r5, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000228 	.word	0x20000228

08007b64 <_isatty_r>:
 8007b64:	b538      	push	{r3, r4, r5, lr}
 8007b66:	4d06      	ldr	r5, [pc, #24]	; (8007b80 <_isatty_r+0x1c>)
 8007b68:	2300      	movs	r3, #0
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	4608      	mov	r0, r1
 8007b6e:	602b      	str	r3, [r5, #0]
 8007b70:	f7fa f8cf 	bl	8001d12 <_isatty>
 8007b74:	1c43      	adds	r3, r0, #1
 8007b76:	d102      	bne.n	8007b7e <_isatty_r+0x1a>
 8007b78:	682b      	ldr	r3, [r5, #0]
 8007b7a:	b103      	cbz	r3, 8007b7e <_isatty_r+0x1a>
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	bd38      	pop	{r3, r4, r5, pc}
 8007b80:	20000228 	.word	0x20000228

08007b84 <_lseek_r>:
 8007b84:	b538      	push	{r3, r4, r5, lr}
 8007b86:	4d07      	ldr	r5, [pc, #28]	; (8007ba4 <_lseek_r+0x20>)
 8007b88:	4604      	mov	r4, r0
 8007b8a:	4608      	mov	r0, r1
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	2200      	movs	r2, #0
 8007b90:	602a      	str	r2, [r5, #0]
 8007b92:	461a      	mov	r2, r3
 8007b94:	f7fa f8c8 	bl	8001d28 <_lseek>
 8007b98:	1c43      	adds	r3, r0, #1
 8007b9a:	d102      	bne.n	8007ba2 <_lseek_r+0x1e>
 8007b9c:	682b      	ldr	r3, [r5, #0]
 8007b9e:	b103      	cbz	r3, 8007ba2 <_lseek_r+0x1e>
 8007ba0:	6023      	str	r3, [r4, #0]
 8007ba2:	bd38      	pop	{r3, r4, r5, pc}
 8007ba4:	20000228 	.word	0x20000228

08007ba8 <memcpy>:
 8007ba8:	440a      	add	r2, r1
 8007baa:	4291      	cmp	r1, r2
 8007bac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007bb0:	d100      	bne.n	8007bb4 <memcpy+0xc>
 8007bb2:	4770      	bx	lr
 8007bb4:	b510      	push	{r4, lr}
 8007bb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bbe:	4291      	cmp	r1, r2
 8007bc0:	d1f9      	bne.n	8007bb6 <memcpy+0xe>
 8007bc2:	bd10      	pop	{r4, pc}

08007bc4 <memmove>:
 8007bc4:	4288      	cmp	r0, r1
 8007bc6:	b510      	push	{r4, lr}
 8007bc8:	eb01 0402 	add.w	r4, r1, r2
 8007bcc:	d902      	bls.n	8007bd4 <memmove+0x10>
 8007bce:	4284      	cmp	r4, r0
 8007bd0:	4623      	mov	r3, r4
 8007bd2:	d807      	bhi.n	8007be4 <memmove+0x20>
 8007bd4:	1e43      	subs	r3, r0, #1
 8007bd6:	42a1      	cmp	r1, r4
 8007bd8:	d008      	beq.n	8007bec <memmove+0x28>
 8007bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007be2:	e7f8      	b.n	8007bd6 <memmove+0x12>
 8007be4:	4402      	add	r2, r0
 8007be6:	4601      	mov	r1, r0
 8007be8:	428a      	cmp	r2, r1
 8007bea:	d100      	bne.n	8007bee <memmove+0x2a>
 8007bec:	bd10      	pop	{r4, pc}
 8007bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bf6:	e7f7      	b.n	8007be8 <memmove+0x24>

08007bf8 <__malloc_lock>:
 8007bf8:	4801      	ldr	r0, [pc, #4]	; (8007c00 <__malloc_lock+0x8>)
 8007bfa:	f7ff b999 	b.w	8006f30 <__retarget_lock_acquire_recursive>
 8007bfe:	bf00      	nop
 8007c00:	2000021c 	.word	0x2000021c

08007c04 <__malloc_unlock>:
 8007c04:	4801      	ldr	r0, [pc, #4]	; (8007c0c <__malloc_unlock+0x8>)
 8007c06:	f7ff b994 	b.w	8006f32 <__retarget_lock_release_recursive>
 8007c0a:	bf00      	nop
 8007c0c:	2000021c 	.word	0x2000021c

08007c10 <_realloc_r>:
 8007c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c14:	4680      	mov	r8, r0
 8007c16:	4614      	mov	r4, r2
 8007c18:	460e      	mov	r6, r1
 8007c1a:	b921      	cbnz	r1, 8007c26 <_realloc_r+0x16>
 8007c1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c20:	4611      	mov	r1, r2
 8007c22:	f7ff ba59 	b.w	80070d8 <_malloc_r>
 8007c26:	b92a      	cbnz	r2, 8007c34 <_realloc_r+0x24>
 8007c28:	f7ff f9ea 	bl	8007000 <_free_r>
 8007c2c:	4625      	mov	r5, r4
 8007c2e:	4628      	mov	r0, r5
 8007c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c34:	f000 f82e 	bl	8007c94 <_malloc_usable_size_r>
 8007c38:	4284      	cmp	r4, r0
 8007c3a:	4607      	mov	r7, r0
 8007c3c:	d802      	bhi.n	8007c44 <_realloc_r+0x34>
 8007c3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c42:	d812      	bhi.n	8007c6a <_realloc_r+0x5a>
 8007c44:	4621      	mov	r1, r4
 8007c46:	4640      	mov	r0, r8
 8007c48:	f7ff fa46 	bl	80070d8 <_malloc_r>
 8007c4c:	4605      	mov	r5, r0
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	d0ed      	beq.n	8007c2e <_realloc_r+0x1e>
 8007c52:	42bc      	cmp	r4, r7
 8007c54:	4622      	mov	r2, r4
 8007c56:	4631      	mov	r1, r6
 8007c58:	bf28      	it	cs
 8007c5a:	463a      	movcs	r2, r7
 8007c5c:	f7ff ffa4 	bl	8007ba8 <memcpy>
 8007c60:	4631      	mov	r1, r6
 8007c62:	4640      	mov	r0, r8
 8007c64:	f7ff f9cc 	bl	8007000 <_free_r>
 8007c68:	e7e1      	b.n	8007c2e <_realloc_r+0x1e>
 8007c6a:	4635      	mov	r5, r6
 8007c6c:	e7df      	b.n	8007c2e <_realloc_r+0x1e>
	...

08007c70 <_read_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	4d07      	ldr	r5, [pc, #28]	; (8007c90 <_read_r+0x20>)
 8007c74:	4604      	mov	r4, r0
 8007c76:	4608      	mov	r0, r1
 8007c78:	4611      	mov	r1, r2
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	602a      	str	r2, [r5, #0]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	f7f9 fff2 	bl	8001c68 <_read>
 8007c84:	1c43      	adds	r3, r0, #1
 8007c86:	d102      	bne.n	8007c8e <_read_r+0x1e>
 8007c88:	682b      	ldr	r3, [r5, #0]
 8007c8a:	b103      	cbz	r3, 8007c8e <_read_r+0x1e>
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	bd38      	pop	{r3, r4, r5, pc}
 8007c90:	20000228 	.word	0x20000228

08007c94 <_malloc_usable_size_r>:
 8007c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c98:	1f18      	subs	r0, r3, #4
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	bfbc      	itt	lt
 8007c9e:	580b      	ldrlt	r3, [r1, r0]
 8007ca0:	18c0      	addlt	r0, r0, r3
 8007ca2:	4770      	bx	lr

08007ca4 <sqrt>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	ed2d 8b02 	vpush	{d8}
 8007caa:	ec55 4b10 	vmov	r4, r5, d0
 8007cae:	f000 f825 	bl	8007cfc <__ieee754_sqrt>
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	462b      	mov	r3, r5
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	4629      	mov	r1, r5
 8007cba:	eeb0 8a40 	vmov.f32	s16, s0
 8007cbe:	eef0 8a60 	vmov.f32	s17, s1
 8007cc2:	f7f8 ff33 	bl	8000b2c <__aeabi_dcmpun>
 8007cc6:	b990      	cbnz	r0, 8007cee <sqrt+0x4a>
 8007cc8:	2200      	movs	r2, #0
 8007cca:	2300      	movs	r3, #0
 8007ccc:	4620      	mov	r0, r4
 8007cce:	4629      	mov	r1, r5
 8007cd0:	f7f8 ff04 	bl	8000adc <__aeabi_dcmplt>
 8007cd4:	b158      	cbz	r0, 8007cee <sqrt+0x4a>
 8007cd6:	f7fe fdd3 	bl	8006880 <__errno>
 8007cda:	2321      	movs	r3, #33	; 0x21
 8007cdc:	6003      	str	r3, [r0, #0]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	f7f8 fdb1 	bl	800084c <__aeabi_ddiv>
 8007cea:	ec41 0b18 	vmov	d8, r0, r1
 8007cee:	eeb0 0a48 	vmov.f32	s0, s16
 8007cf2:	eef0 0a68 	vmov.f32	s1, s17
 8007cf6:	ecbd 8b02 	vpop	{d8}
 8007cfa:	bd38      	pop	{r3, r4, r5, pc}

08007cfc <__ieee754_sqrt>:
 8007cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d00:	ec55 4b10 	vmov	r4, r5, d0
 8007d04:	4e55      	ldr	r6, [pc, #340]	; (8007e5c <__ieee754_sqrt+0x160>)
 8007d06:	43ae      	bics	r6, r5
 8007d08:	ee10 0a10 	vmov	r0, s0
 8007d0c:	ee10 3a10 	vmov	r3, s0
 8007d10:	462a      	mov	r2, r5
 8007d12:	4629      	mov	r1, r5
 8007d14:	d110      	bne.n	8007d38 <__ieee754_sqrt+0x3c>
 8007d16:	ee10 2a10 	vmov	r2, s0
 8007d1a:	462b      	mov	r3, r5
 8007d1c:	f7f8 fc6c 	bl	80005f8 <__aeabi_dmul>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4620      	mov	r0, r4
 8007d26:	4629      	mov	r1, r5
 8007d28:	f7f8 fab0 	bl	800028c <__adddf3>
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	460d      	mov	r5, r1
 8007d30:	ec45 4b10 	vmov	d0, r4, r5
 8007d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d38:	2d00      	cmp	r5, #0
 8007d3a:	dc10      	bgt.n	8007d5e <__ieee754_sqrt+0x62>
 8007d3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007d40:	4330      	orrs	r0, r6
 8007d42:	d0f5      	beq.n	8007d30 <__ieee754_sqrt+0x34>
 8007d44:	b15d      	cbz	r5, 8007d5e <__ieee754_sqrt+0x62>
 8007d46:	ee10 2a10 	vmov	r2, s0
 8007d4a:	462b      	mov	r3, r5
 8007d4c:	ee10 0a10 	vmov	r0, s0
 8007d50:	f7f8 fa9a 	bl	8000288 <__aeabi_dsub>
 8007d54:	4602      	mov	r2, r0
 8007d56:	460b      	mov	r3, r1
 8007d58:	f7f8 fd78 	bl	800084c <__aeabi_ddiv>
 8007d5c:	e7e6      	b.n	8007d2c <__ieee754_sqrt+0x30>
 8007d5e:	1512      	asrs	r2, r2, #20
 8007d60:	d074      	beq.n	8007e4c <__ieee754_sqrt+0x150>
 8007d62:	07d4      	lsls	r4, r2, #31
 8007d64:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007d68:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007d6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007d70:	bf5e      	ittt	pl
 8007d72:	0fda      	lsrpl	r2, r3, #31
 8007d74:	005b      	lslpl	r3, r3, #1
 8007d76:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007d7a:	2400      	movs	r4, #0
 8007d7c:	0fda      	lsrs	r2, r3, #31
 8007d7e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007d82:	107f      	asrs	r7, r7, #1
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	2516      	movs	r5, #22
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007d8e:	1886      	adds	r6, r0, r2
 8007d90:	428e      	cmp	r6, r1
 8007d92:	bfde      	ittt	le
 8007d94:	1b89      	suble	r1, r1, r6
 8007d96:	18b0      	addle	r0, r6, r2
 8007d98:	18a4      	addle	r4, r4, r2
 8007d9a:	0049      	lsls	r1, r1, #1
 8007d9c:	3d01      	subs	r5, #1
 8007d9e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007da2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007da6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007daa:	d1f0      	bne.n	8007d8e <__ieee754_sqrt+0x92>
 8007dac:	462a      	mov	r2, r5
 8007dae:	f04f 0e20 	mov.w	lr, #32
 8007db2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007db6:	4281      	cmp	r1, r0
 8007db8:	eb06 0c05 	add.w	ip, r6, r5
 8007dbc:	dc02      	bgt.n	8007dc4 <__ieee754_sqrt+0xc8>
 8007dbe:	d113      	bne.n	8007de8 <__ieee754_sqrt+0xec>
 8007dc0:	459c      	cmp	ip, r3
 8007dc2:	d811      	bhi.n	8007de8 <__ieee754_sqrt+0xec>
 8007dc4:	f1bc 0f00 	cmp.w	ip, #0
 8007dc8:	eb0c 0506 	add.w	r5, ip, r6
 8007dcc:	da43      	bge.n	8007e56 <__ieee754_sqrt+0x15a>
 8007dce:	2d00      	cmp	r5, #0
 8007dd0:	db41      	blt.n	8007e56 <__ieee754_sqrt+0x15a>
 8007dd2:	f100 0801 	add.w	r8, r0, #1
 8007dd6:	1a09      	subs	r1, r1, r0
 8007dd8:	459c      	cmp	ip, r3
 8007dda:	bf88      	it	hi
 8007ddc:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8007de0:	eba3 030c 	sub.w	r3, r3, ip
 8007de4:	4432      	add	r2, r6
 8007de6:	4640      	mov	r0, r8
 8007de8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007dec:	f1be 0e01 	subs.w	lr, lr, #1
 8007df0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007df4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007df8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007dfc:	d1db      	bne.n	8007db6 <__ieee754_sqrt+0xba>
 8007dfe:	430b      	orrs	r3, r1
 8007e00:	d006      	beq.n	8007e10 <__ieee754_sqrt+0x114>
 8007e02:	1c50      	adds	r0, r2, #1
 8007e04:	bf13      	iteet	ne
 8007e06:	3201      	addne	r2, #1
 8007e08:	3401      	addeq	r4, #1
 8007e0a:	4672      	moveq	r2, lr
 8007e0c:	f022 0201 	bicne.w	r2, r2, #1
 8007e10:	1063      	asrs	r3, r4, #1
 8007e12:	0852      	lsrs	r2, r2, #1
 8007e14:	07e1      	lsls	r1, r4, #31
 8007e16:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007e1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007e1e:	bf48      	it	mi
 8007e20:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007e24:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007e28:	4614      	mov	r4, r2
 8007e2a:	e781      	b.n	8007d30 <__ieee754_sqrt+0x34>
 8007e2c:	0ad9      	lsrs	r1, r3, #11
 8007e2e:	3815      	subs	r0, #21
 8007e30:	055b      	lsls	r3, r3, #21
 8007e32:	2900      	cmp	r1, #0
 8007e34:	d0fa      	beq.n	8007e2c <__ieee754_sqrt+0x130>
 8007e36:	02cd      	lsls	r5, r1, #11
 8007e38:	d50a      	bpl.n	8007e50 <__ieee754_sqrt+0x154>
 8007e3a:	f1c2 0420 	rsb	r4, r2, #32
 8007e3e:	fa23 f404 	lsr.w	r4, r3, r4
 8007e42:	1e55      	subs	r5, r2, #1
 8007e44:	4093      	lsls	r3, r2
 8007e46:	4321      	orrs	r1, r4
 8007e48:	1b42      	subs	r2, r0, r5
 8007e4a:	e78a      	b.n	8007d62 <__ieee754_sqrt+0x66>
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	e7f0      	b.n	8007e32 <__ieee754_sqrt+0x136>
 8007e50:	0049      	lsls	r1, r1, #1
 8007e52:	3201      	adds	r2, #1
 8007e54:	e7ef      	b.n	8007e36 <__ieee754_sqrt+0x13a>
 8007e56:	4680      	mov	r8, r0
 8007e58:	e7bd      	b.n	8007dd6 <__ieee754_sqrt+0xda>
 8007e5a:	bf00      	nop
 8007e5c:	7ff00000 	.word	0x7ff00000

08007e60 <_init>:
 8007e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e62:	bf00      	nop
 8007e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e66:	bc08      	pop	{r3}
 8007e68:	469e      	mov	lr, r3
 8007e6a:	4770      	bx	lr

08007e6c <_fini>:
 8007e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6e:	bf00      	nop
 8007e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e72:	bc08      	pop	{r3}
 8007e74:	469e      	mov	lr, r3
 8007e76:	4770      	bx	lr
