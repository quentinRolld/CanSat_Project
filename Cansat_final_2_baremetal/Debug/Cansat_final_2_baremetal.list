
Cansat_final_2_baremetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a0  0800bdf8  0800bdf8  0001bdf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c698  0800c698  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c698  0800c698  0001c698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6a0  0800c6a0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6a0  0800c6a0  0001c6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6a4  0800c6a4  0001c6a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c6a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  200001e0  0800c888  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000900  0800c888  00020900  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149c8  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d88  00000000  00000000  00034bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00037960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  00038a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019240  00000000  00000000  00039a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018711  00000000  00000000  00052c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093b88  00000000  00000000  0006b381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fef09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b94  00000000  00000000  000fef5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bddc 	.word	0x0800bddc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800bddc 	.word	0x0800bddc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <Init>:
	 * et elle configure ce dernier pour qu'il réalise des mesures en continu.
	 * @param p_hi2c1 Pointeur vers une structure I2C qui contient l'information de configuration pour un i2c particulier
	 * @retval None
	 */
void Init(I2C_HandleTypeDef* p_hi2c1)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af04      	add	r7, sp, #16
 800100e:	6078      	str	r0, [r7, #4]

	uint8_t buff[6];
	buff[0] = 0x80;
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD,  PWR_MGMT_1,  1, &buff[0], 1, 10);
 8001014:	230a      	movs	r3, #10
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	2301      	movs	r3, #1
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2301      	movs	r3, #1
 8001024:	226b      	movs	r2, #107	; 0x6b
 8001026:	21d0      	movs	r1, #208	; 0xd0
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f002 fdb7 	bl	8003b9c <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800102e:	2064      	movs	r0, #100	; 0x64
 8001030:	f001 fdb4 	bl	8002b9c <HAL_Delay>
	buff[0] = 0x1;
 8001034:	2301      	movs	r3, #1
 8001036:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD, PWR_MGMT_1,  1, &buff[0], 1, 10);
 8001038:	230a      	movs	r3, #10
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	2301      	movs	r3, #1
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	226b      	movs	r2, #107	; 0x6b
 800104a:	21d0      	movs	r1, #208	; 0xd0
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f002 fda5 	bl	8003b9c <HAL_I2C_Mem_Write>


	/********* changement de la sensibilité de l'accélérometre  00=2g 01=4g 10=8g 11=16g *********/
	HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD,  ACCEL_CONFIG,  1, &buff[0], 1, 10);
 8001052:	230a      	movs	r3, #10
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	2301      	movs	r3, #1
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	221c      	movs	r2, #28
 8001064:	21d0      	movs	r1, #208	; 0xd0
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f002 fe92 	bl	8003d90 <HAL_I2C_Mem_Read>

	//Pour mettre 00
	buff[0] =(buff[0] & (0b11100111)) ;
 800106c:	7a3b      	ldrb	r3, [r7, #8]
 800106e:	f023 0318 	bic.w	r3, r3, #24
 8001072:	b2db      	uxtb	r3, r3
 8001074:	723b      	strb	r3, [r7, #8]
	//buff[0] =(buff[0] & (0b11110111)) ;
	//buff[0] =(buff[0] | (0b00010000)) ;
	//Pour mettre 11
	//buff[0] =(buff[0] | (0b00011000)) ;

	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD,  ACCEL_CONFIG,  1, &buff[0], 1, 10);
 8001076:	230a      	movs	r3, #10
 8001078:	9302      	str	r3, [sp, #8]
 800107a:	2301      	movs	r3, #1
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2301      	movs	r3, #1
 8001086:	221c      	movs	r2, #28
 8001088:	21d0      	movs	r1, #208	; 0xd0
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f002 fd86 	bl	8003b9c <HAL_I2C_Mem_Write>


	buff[0]=0x2; // Bypass pour activer le magnétomètre
 8001090:	2302      	movs	r3, #2
 8001092:	723b      	strb	r3, [r7, #8]
		  if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,INT_PIN_CFG,1,&buff[0],1,10)!=HAL_OK){
 8001094:	230a      	movs	r3, #10
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	2301      	movs	r3, #1
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2301      	movs	r3, #1
 80010a4:	2237      	movs	r2, #55	; 0x37
 80010a6:	21d0      	movs	r1, #208	; 0xd0
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f002 fd77 	bl	8003b9c <HAL_I2C_Mem_Write>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <Init+0xb6>
			  printf("probleme activation magnetometre --> fct Init \r\n");
 80010b4:	4851      	ldr	r0, [pc, #324]	; (80011fc <Init+0x1f4>)
 80010b6:	f007 f87d 	bl	80081b4 <puts>
		  	  Error_Handler();
 80010ba:	f000 ff71 	bl	8001fa0 <Error_Handler>
		  }
	buff[0]=0x16; // configuration mesure en continu du magnétomètre
 80010be:	2316      	movs	r3, #22
 80010c0:	723b      	strb	r3, [r7, #8]
		 	  if(HAL_I2C_Mem_Write(p_hi2c1,MAGNETO_ADD,AK8963_CNTL,1,&buff[0],1,10)!=HAL_OK){
 80010c2:	230a      	movs	r3, #10
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	2301      	movs	r3, #1
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	220a      	movs	r2, #10
 80010d4:	2118      	movs	r1, #24
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f002 fd60 	bl	8003b9c <HAL_I2C_Mem_Write>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d004      	beq.n	80010ec <Init+0xe4>
		 		  printf("probleme configuration mesure magnetometre --> fct Init \r\n");
 80010e2:	4847      	ldr	r0, [pc, #284]	; (8001200 <Init+0x1f8>)
 80010e4:	f007 f866 	bl	80081b4 <puts>
		 	  	  Error_Handler();
 80010e8:	f000 ff5a 	bl	8001fa0 <Error_Handler>

		 	  }

	/********** Réglage de la bande passante **********/

	buff[0]=0x3;
 80010ec:	2303      	movs	r3, #3
 80010ee:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,CONFIG,1,&buff[0],1,10)!=HAL_OK){
 80010f0:	230a      	movs	r3, #10
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2301      	movs	r3, #1
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	221a      	movs	r2, #26
 8001102:	21d0      	movs	r1, #208	; 0xd0
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f002 fd49 	bl	8003b9c <HAL_I2C_Mem_Write>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d004      	beq.n	800111a <Init+0x112>
		printf("probleme bande passante --> fct Init \r\n");
 8001110:	483c      	ldr	r0, [pc, #240]	; (8001204 <Init+0x1fc>)
 8001112:	f007 f84f 	bl	80081b4 <puts>
		Error_Handler();
 8001116:	f000 ff43 	bl	8001fa0 <Error_Handler>
			Error_Handler();
		}
*/

	// bande passante à 250Hz : FCHOICE = 11 => FCHOICE_b = 00, DLPF_CFG = 000
		HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD,  GYRO_CONFIG,  1, &buff[0], 1, 10);
 800111a:	230a      	movs	r3, #10
 800111c:	9302      	str	r3, [sp, #8]
 800111e:	2301      	movs	r3, #1
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2301      	movs	r3, #1
 800112a:	221b      	movs	r2, #27
 800112c:	21d0      	movs	r1, #208	; 0xd0
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f002 fe2e 	bl	8003d90 <HAL_I2C_Mem_Read>
		//Pour mettre 00 dans FCHOICE_b
		buff[0] =(buff[0] & (0b11111100)) ;
 8001134:	7a3b      	ldrb	r3, [r7, #8]
 8001136:	f023 0303 	bic.w	r3, r3, #3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	723b      	strb	r3, [r7, #8]
		if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,GYRO_CONFIG,1,&buff[0],1,10)!=HAL_OK){
 800113e:	230a      	movs	r3, #10
 8001140:	9302      	str	r3, [sp, #8]
 8001142:	2301      	movs	r3, #1
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2301      	movs	r3, #1
 800114e:	221b      	movs	r2, #27
 8001150:	21d0      	movs	r1, #208	; 0xd0
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f002 fd22 	bl	8003b9c <HAL_I2C_Mem_Write>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <Init+0x15a>
				Error_Handler(); }
 800115e:	f000 ff1f 	bl	8001fa0 <Error_Handler>
		//Pour mettre 000 dans DLPF_CFG
		HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD, CONFIG,  1, &buff[0], 1, 10);
 8001162:	230a      	movs	r3, #10
 8001164:	9302      	str	r3, [sp, #8]
 8001166:	2301      	movs	r3, #1
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	221a      	movs	r2, #26
 8001174:	21d0      	movs	r1, #208	; 0xd0
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f002 fe0a 	bl	8003d90 <HAL_I2C_Mem_Read>
		buff[0] =(buff[0] & (0b11111000)) ;
 800117c:	7a3b      	ldrb	r3, [r7, #8]
 800117e:	f023 0307 	bic.w	r3, r3, #7
 8001182:	b2db      	uxtb	r3, r3
 8001184:	723b      	strb	r3, [r7, #8]
		if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,CONFIG,1,&buff[0],1,10)!=HAL_OK){
 8001186:	230a      	movs	r3, #10
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2301      	movs	r3, #1
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	221a      	movs	r2, #26
 8001198:	21d0      	movs	r1, #208	; 0xd0
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f002 fcfe 	bl	8003b9c <HAL_I2C_Mem_Write>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <Init+0x1a2>
				Error_Handler();
 80011a6:	f000 fefb 	bl	8001fa0 <Error_Handler>
		}
*/

	/*********** Réglage de la fréquence d'échantillonnage **********/

	buff[0]=0xFF;
 80011aa:	23ff      	movs	r3, #255	; 0xff
 80011ac:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,SMPLRT_DIV,1,&buff[0],1,10)!=HAL_OK){
 80011ae:	230a      	movs	r3, #10
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	2301      	movs	r3, #1
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	2219      	movs	r2, #25
 80011c0:	21d0      	movs	r1, #208	; 0xd0
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f002 fcea 	bl	8003b9c <HAL_I2C_Mem_Write>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d004      	beq.n	80011d8 <Init+0x1d0>
		printf("probleme reglage frequence echantillonnage --> Init \r\n");
 80011ce:	480e      	ldr	r0, [pc, #56]	; (8001208 <Init+0x200>)
 80011d0:	f006 fff0 	bl	80081b4 <puts>
		Error_Handler();
 80011d4:	f000 fee4 	bl	8001fa0 <Error_Handler>
	}
	HAL_I2C_Mem_Read(p_hi2c1,MPU_ADD,LP_ACCEL_ODR,1,&buff[0],1,10);
 80011d8:	230a      	movs	r3, #10
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	2301      	movs	r3, #1
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2301      	movs	r3, #1
 80011e8:	221e      	movs	r2, #30
 80011ea:	21d0      	movs	r1, #208	; 0xd0
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f002 fdcf 	bl	8003d90 <HAL_I2C_Mem_Read>
	// a faire : changer la valeur de DLPF_CFG à 2 par exemple et voir en mode debug si la valeur des 4 derniers bits de LP_ACCEL_ODR est à 4.

}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	0800bdf8 	.word	0x0800bdf8
 8001200:	0800be28 	.word	0x0800be28
 8001204:	0800be64 	.word	0x0800be64
 8001208:	0800be8c 	.word	0x0800be8c
 800120c:	00000000 	.word	0x00000000

08001210 <Measure_M>:
	 * @param hi2cx Pointeur vers une structure I2C qui contient l'information de configuration pour un i2c particulier
	 * @param tableau_donnee_utiles Pointeur vers une zone mémoire de type double contenant l’information de champ magnétique
	 * @retval None
	 */

void Measure_M(I2C_HandleTypeDef* p_hi2c1,double* mag, double* offset, double* coeff){
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b090      	sub	sp, #64	; 0x40
 8001214:	af04      	add	r7, sp, #16
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
		uint8_t buffer[6];
		uint8_t asa[3];
		uint8_t drdy[1];


		HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_ST1,1,drdy,1,20);
 800121e:	2314      	movs	r3, #20
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	2301      	movs	r3, #1
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2301      	movs	r3, #1
 800122e:	2202      	movs	r2, #2
 8001230:	2118      	movs	r1, #24
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f002 fdac 	bl	8003d90 <HAL_I2C_Mem_Read>
		drdy[0]=((drdy[0])&(00000001));
 8001238:	7d3b      	ldrb	r3, [r7, #20]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	753b      	strb	r3, [r7, #20]
		if(drdy[0]==1){
 8001242:	7d3b      	ldrb	r3, [r7, #20]
 8001244:	2b01      	cmp	r3, #1
 8001246:	f040 8115 	bne.w	8001474 <Measure_M+0x264>

			if((HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_XOUT_L,1,buffer,7,20)==HAL_OK)
 800124a:	2314      	movs	r3, #20
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	2307      	movs	r3, #7
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	2118      	movs	r1, #24
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f002 fd96 	bl	8003d90 <HAL_I2C_Mem_Read>
 8001264:	4603      	mov	r3, r0
					&(HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_ASAX,1,asa,3,20)==HAL_OK)){
 8001266:	2b00      	cmp	r3, #0
 8001268:	bf0c      	ite	eq
 800126a:	2301      	moveq	r3, #1
 800126c:	2300      	movne	r3, #0
 800126e:	b2dc      	uxtb	r4, r3
 8001270:	2314      	movs	r3, #20
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	2303      	movs	r3, #3
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	f107 0318 	add.w	r3, r7, #24
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2301      	movs	r3, #1
 8001280:	2210      	movs	r2, #16
 8001282:	2118      	movs	r1, #24
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f002 fd83 	bl	8003d90 <HAL_I2C_Mem_Read>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf0c      	ite	eq
 8001290:	2301      	moveq	r3, #1
 8001292:	2300      	movne	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4023      	ands	r3, r4
 8001298:	b2db      	uxtb	r3, r3
			if((HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_XOUT_L,1,buffer,7,20)==HAL_OK)
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 80ea 	beq.w	8001474 <Measure_M+0x264>


						x = (uint16_t)((buffer[1]<<8)+ buffer[0]);
 80012a0:	7f7b      	ldrb	r3, [r7, #29]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	7f3b      	ldrb	r3, [r7, #28]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4413      	add	r3, r2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
						y = (uint16_t)((buffer[3]<<8)+ buffer[2]);
 80012b2:	7ffb      	ldrb	r3, [r7, #31]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	7fbb      	ldrb	r3, [r7, #30]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4413      	add	r3, r2
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
						z = (uint16_t)((buffer[5]<<8)+ buffer[4]);
 80012c4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	857b      	strh	r3, [r7, #42]	; 0x2a
						asax=asa[0];
 80012da:	7e3b      	ldrb	r3, [r7, #24]
 80012dc:	853b      	strh	r3, [r7, #40]	; 0x28
						asay=asa[1];
 80012de:	7e7b      	ldrb	r3, [r7, #25]
 80012e0:	84fb      	strh	r3, [r7, #38]	; 0x26
						asaz=asa[2];
 80012e2:	7ebb      	ldrb	r3, [r7, #26]
 80012e4:	84bb      	strh	r3, [r7, #36]	; 0x24
						mag[0] = (x*((((asax-128)*0.5)/128)+1)*4912)/32760;
 80012e6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f922 	bl	8000534 <__aeabi_i2d>
 80012f0:	4604      	mov	r4, r0
 80012f2:	460d      	mov	r5, r1
 80012f4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80012f8:	3b80      	subs	r3, #128	; 0x80
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f91a 	bl	8000534 <__aeabi_i2d>
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b62      	ldr	r3, [pc, #392]	; (8001490 <Measure_M+0x280>)
 8001306:	f7ff f97f 	bl	8000608 <__aeabi_dmul>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	4b5f      	ldr	r3, [pc, #380]	; (8001494 <Measure_M+0x284>)
 8001318:	f7ff faa0 	bl	800085c <__aeabi_ddiv>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	4b5b      	ldr	r3, [pc, #364]	; (8001498 <Measure_M+0x288>)
 800132a:	f7fe ffb7 	bl	800029c <__adddf3>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4620      	mov	r0, r4
 8001334:	4629      	mov	r1, r5
 8001336:	f7ff f967 	bl	8000608 <__aeabi_dmul>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	a34f      	add	r3, pc, #316	; (adr r3, 8001480 <Measure_M+0x270>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff f95e 	bl	8000608 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	a34c      	add	r3, pc, #304	; (adr r3, 8001488 <Measure_M+0x278>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7ff fa7f 	bl	800085c <__aeabi_ddiv>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	68b9      	ldr	r1, [r7, #8]
 8001364:	e9c1 2300 	strd	r2, r3, [r1]
						mag[1] = (y*((((asay-128)*0.5)/128)+1)*4912)/32760;
 8001368:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8e1 	bl	8000534 <__aeabi_i2d>
 8001372:	4604      	mov	r4, r0
 8001374:	460d      	mov	r5, r1
 8001376:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800137a:	3b80      	subs	r3, #128	; 0x80
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8d9 	bl	8000534 <__aeabi_i2d>
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b42      	ldr	r3, [pc, #264]	; (8001490 <Measure_M+0x280>)
 8001388:	f7ff f93e 	bl	8000608 <__aeabi_dmul>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	4b3e      	ldr	r3, [pc, #248]	; (8001494 <Measure_M+0x284>)
 800139a:	f7ff fa5f 	bl	800085c <__aeabi_ddiv>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <Measure_M+0x288>)
 80013ac:	f7fe ff76 	bl	800029c <__adddf3>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4620      	mov	r0, r4
 80013b6:	4629      	mov	r1, r5
 80013b8:	f7ff f926 	bl	8000608 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	a32e      	add	r3, pc, #184	; (adr r3, 8001480 <Measure_M+0x270>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7ff f91d 	bl	8000608 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	f103 0408 	add.w	r4, r3, #8
 80013dc:	a32a      	add	r3, pc, #168	; (adr r3, 8001488 <Measure_M+0x278>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	f7ff fa3b 	bl	800085c <__aeabi_ddiv>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	e9c4 2300 	strd	r2, r3, [r4]
						mag[2] = (z*((((asaz-128)*0.5)/128)+1)*4912)/32760;
 80013ee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f89e 	bl	8000534 <__aeabi_i2d>
 80013f8:	4604      	mov	r4, r0
 80013fa:	460d      	mov	r5, r1
 80013fc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001400:	3b80      	subs	r3, #128	; 0x80
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f896 	bl	8000534 <__aeabi_i2d>
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	4b20      	ldr	r3, [pc, #128]	; (8001490 <Measure_M+0x280>)
 800140e:	f7ff f8fb 	bl	8000608 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <Measure_M+0x284>)
 8001420:	f7ff fa1c 	bl	800085c <__aeabi_ddiv>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <Measure_M+0x288>)
 8001432:	f7fe ff33 	bl	800029c <__adddf3>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4620      	mov	r0, r4
 800143c:	4629      	mov	r1, r5
 800143e:	f7ff f8e3 	bl	8000608 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	a30d      	add	r3, pc, #52	; (adr r3, 8001480 <Measure_M+0x270>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	f7ff f8da 	bl	8000608 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	f103 0410 	add.w	r4, r3, #16
 8001462:	a309      	add	r3, pc, #36	; (adr r3, 8001488 <Measure_M+0x278>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff f9f8 	bl	800085c <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	e9c4 2300 	strd	r2, r3, [r4]
						mag[2] = (mag[2]-offset[2])*coeff[2];
						*/

			}
		}
}
 8001474:	bf00      	nop
 8001476:	3730      	adds	r7, #48	; 0x30
 8001478:	46bd      	mov	sp, r7
 800147a:	bdb0      	pop	{r4, r5, r7, pc}
 800147c:	f3af 8000 	nop.w
 8001480:	00000000 	.word	0x00000000
 8001484:	40b33000 	.word	0x40b33000
 8001488:	00000000 	.word	0x00000000
 800148c:	40dffe00 	.word	0x40dffe00
 8001490:	3fe00000 	.word	0x3fe00000
 8001494:	40600000 	.word	0x40600000
 8001498:	3ff00000 	.word	0x3ff00000
 800149c:	00000000 	.word	0x00000000

080014a0 <magnetic_field_to_degree>:
#include <math.h>



float magnetic_field_to_degree(double* mag_calibrated)
{
 80014a0:	b5b0      	push	{r4, r5, r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	float heading = atan2(-mag_calibrated[1], mag_calibrated[0]); // atan2(y,x)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3308      	adds	r3, #8
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	4614      	mov	r4, r2
 80014b2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	ed93 7b00 	vldr	d7, [r3]
 80014bc:	eeb0 1a47 	vmov.f32	s2, s14
 80014c0:	eef0 1a67 	vmov.f32	s3, s15
 80014c4:	ec45 4b10 	vmov	d0, r4, r5
 80014c8:	f00a fbbb 	bl	800bc42 <atan2>
 80014cc:	ec53 2b10 	vmov	r2, r3, d0
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fb90 	bl	8000bf8 <__aeabi_d2f>
 80014d8:	4603      	mov	r3, r0
 80014da:	613b      	str	r3, [r7, #16]


	  //float declinationAngle = 0.22; // Angle de déclinaison magnétique pour Paris
	  float declinationAngle = 0.21; // Angle de déclinaison magnétique pour Barcelone
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <magnetic_field_to_degree+0xb8>)
 80014de:	60fb      	str	r3, [r7, #12]
	  heading += declinationAngle;   // site pour connaitre la déclinaison : https://www.ngdc.noaa.gov/geomag/calculators/magcalc
 80014e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80014e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ec:	edc7 7a04 	vstr	s15, [r7, #16]


	  float headingDegrees = heading * 180 / M_PI; // Conversion en degrés
 80014f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80014f4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800155c <magnetic_field_to_degree+0xbc>
 80014f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fc:	ee17 0a90 	vmov	r0, s15
 8001500:	f7ff f82a 	bl	8000558 <__aeabi_f2d>
 8001504:	a312      	add	r3, pc, #72	; (adr r3, 8001550 <magnetic_field_to_degree+0xb0>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7ff f9a7 	bl	800085c <__aeabi_ddiv>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff fb6f 	bl	8000bf8 <__aeabi_d2f>
 800151a:	4603      	mov	r3, r0
 800151c:	617b      	str	r3, [r7, #20]

	  if(headingDegrees<=0){
 800151e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001522:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	d807      	bhi.n	800153c <magnetic_field_to_degree+0x9c>
			  headingDegrees+=360;
 800152c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001530:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001560 <magnetic_field_to_degree+0xc0>
 8001534:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001538:	edc7 7a05 	vstr	s15, [r7, #20]
		  }



	  return headingDegrees;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	ee07 3a90 	vmov	s15, r3
}
 8001542:	eeb0 0a67 	vmov.f32	s0, s15
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bdb0      	pop	{r4, r5, r7, pc}
 800154c:	f3af 8000 	nop.w
 8001550:	54442d18 	.word	0x54442d18
 8001554:	400921fb 	.word	0x400921fb
 8001558:	3e570a3d 	.word	0x3e570a3d
 800155c:	43340000 	.word	0x43340000
 8001560:	43b40000 	.word	0x43b40000

08001564 <Delta_theta_calculation>:

double Delta_theta_calculation(TypeDataCansat DataCansat){
 8001564:	b084      	sub	sp, #16
 8001566:	b580      	push	{r7, lr}
 8001568:	b088      	sub	sp, #32
 800156a:	af00      	add	r7, sp, #0
 800156c:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001570:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	double theta_target = 0;
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double latitude_vector = DataCansat.GPS.latitude_Target - DataCansat.GPS.latitude_Cansat;
 8001580:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001584:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001588:	f7fe fe86 	bl	8000298 <__aeabi_dsub>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double longitude_vector = DataCansat.GPS.longitude_Target - DataCansat.GPS.longitude_Cansat;
 8001594:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001598:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800159c:	f7fe fe7c 	bl	8000298 <__aeabi_dsub>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	theta_target = atan(longitude_vector/latitude_vector);
 80015a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015b0:	f7ff f954 	bl	800085c <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	ec43 2b17 	vmov	d7, r2, r3
 80015bc:	eeb0 0a47 	vmov.f32	s0, s14
 80015c0:	eef0 0a67 	vmov.f32	s1, s15
 80015c4:	f00a f994 	bl	800b8f0 <atan>
 80015c8:	ed87 0b06 	vstr	d0, [r7, #24]

	double Delta_theta = theta_target - DataCansat.IMU.MagnetometerData.degree_angle;
 80015cc:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80015d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015d4:	f7fe fe60 	bl	8000298 <__aeabi_dsub>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	e9c7 2300 	strd	r2, r3, [r7]

	return Delta_theta;
 80015e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015e4:	ec43 2b17 	vmov	d7, r2, r3
}
 80015e8:	eeb0 0a47 	vmov.f32	s0, s14
 80015ec:	eef0 0a67 	vmov.f32	s1, s15
 80015f0:	3720      	adds	r7, #32
 80015f2:	46bd      	mov	sp, r7
 80015f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015f8:	b004      	add	sp, #16
 80015fa:	4770      	bx	lr

080015fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	4b34      	ldr	r3, [pc, #208]	; (80016e8 <MX_GPIO_Init+0xec>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a33      	ldr	r2, [pc, #204]	; (80016e8 <MX_GPIO_Init+0xec>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <MX_GPIO_Init+0xec>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <MX_GPIO_Init+0xec>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a2c      	ldr	r2, [pc, #176]	; (80016e8 <MX_GPIO_Init+0xec>)
 8001638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <MX_GPIO_Init+0xec>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <MX_GPIO_Init+0xec>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a25      	ldr	r2, [pc, #148]	; (80016e8 <MX_GPIO_Init+0xec>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <MX_GPIO_Init+0xec>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <MX_GPIO_Init+0xec>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <MX_GPIO_Init+0xec>)
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <MX_GPIO_Init+0xec>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	2120      	movs	r1, #32
 8001686:	4819      	ldr	r0, [pc, #100]	; (80016ec <MX_GPIO_Init+0xf0>)
 8001688:	f001 fdec 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800168c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001692:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	4813      	ldr	r0, [pc, #76]	; (80016f0 <MX_GPIO_Init+0xf4>)
 80016a4:	f001 fc42 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016a8:	2320      	movs	r3, #32
 80016aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	480b      	ldr	r0, [pc, #44]	; (80016ec <MX_GPIO_Init+0xf0>)
 80016c0:	f001 fc34 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4804      	ldr	r0, [pc, #16]	; (80016ec <MX_GPIO_Init+0xf0>)
 80016da:	f001 fc27 	bl	8002f2c <HAL_GPIO_Init>

}
 80016de:	bf00      	nop
 80016e0:	3728      	adds	r7, #40	; 0x28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40020800 	.word	0x40020800

080016f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_I2C1_Init+0x50>)
 80016fa:	4a13      	ldr	r2, [pc, #76]	; (8001748 <MX_I2C1_Init+0x54>)
 80016fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_I2C1_Init+0x50>)
 8001700:	4a12      	ldr	r2, [pc, #72]	; (800174c <MX_I2C1_Init+0x58>)
 8001702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_I2C1_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_I2C1_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_I2C1_Init+0x50>)
 8001712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001716:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001718:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <MX_I2C1_Init+0x50>)
 800171a:	2200      	movs	r2, #0
 800171c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_I2C1_Init+0x50>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <MX_I2C1_Init+0x50>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_I2C1_Init+0x50>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001730:	4804      	ldr	r0, [pc, #16]	; (8001744 <MX_I2C1_Init+0x50>)
 8001732:	f001 fdcb 	bl	80032cc <HAL_I2C_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800173c:	f000 fc30 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200001fc 	.word	0x200001fc
 8001748:	40005400 	.word	0x40005400
 800174c:	000186a0 	.word	0x000186a0

08001750 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <HAL_I2C_MspInit+0x84>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d12c      	bne.n	80017cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_I2C_MspInit+0x88>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <HAL_I2C_MspInit+0x88>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_I2C_MspInit+0x88>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800178e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001794:	2312      	movs	r3, #18
 8001796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179c:	2303      	movs	r3, #3
 800179e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017a0:	2304      	movs	r3, #4
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4619      	mov	r1, r3
 80017aa:	480c      	ldr	r0, [pc, #48]	; (80017dc <HAL_I2C_MspInit+0x8c>)
 80017ac:	f001 fbbe 	bl	8002f2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_I2C_MspInit+0x88>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <HAL_I2C_MspInit+0x88>)
 80017ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017be:	6413      	str	r3, [r2, #64]	; 0x40
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_I2C_MspInit+0x88>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017cc:	bf00      	nop
 80017ce:	3728      	adds	r7, #40	; 0x28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40005400 	.word	0x40005400
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020400 	.word	0x40020400

080017e0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80017e8:	1d39      	adds	r1, r7, #4
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017ee:	2201      	movs	r2, #1
 80017f0:	4803      	ldr	r0, [pc, #12]	; (8001800 <__io_putchar+0x20>)
 80017f2:	f004 ff80 	bl	80066f6 <HAL_UART_Transmit>
return ch;
 80017f6:	687b      	ldr	r3, [r7, #4]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200008a8 	.word	0x200008a8

08001804 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){ // fonction de callback de l'UART
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]


	if(huart == &huart1){
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a07      	ldr	r2, [pc, #28]	; (800182c <HAL_UART_RxCpltCallback+0x28>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d107      	bne.n	8001824 <HAL_UART_RxCpltCallback+0x20>

		it_rx_gps = 1;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_UART_RxCpltCallback+0x2c>)
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t *)&uart_gps_rx, 1);
 800181a:	2201      	movs	r2, #1
 800181c:	4905      	ldr	r1, [pc, #20]	; (8001834 <HAL_UART_RxCpltCallback+0x30>)
 800181e:	4803      	ldr	r0, [pc, #12]	; (800182c <HAL_UART_RxCpltCallback+0x28>)
 8001820:	f004 fffb 	bl	800681a <HAL_UART_Receive_IT>

	}

}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000864 	.word	0x20000864
 8001830:	20000325 	.word	0x20000325
 8001834:	20000320 	.word	0x20000320

08001838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001838:	b5b0      	push	{r4, r5, r7, lr}
 800183a:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 800183e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	int gps_state = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001846:	f001 f937 	bl	8002ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800184a:	f000 fb3f 	bl	8001ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800184e:	f7ff fed5 	bl	80015fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001852:	f001 f839 	bl	80028c8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001856:	f7ff ff4d 	bl	80016f4 <MX_I2C1_Init>
  MX_TIM2_Init();
 800185a:	f000 fe15 	bl	8002488 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800185e:	f001 f809 	bl	8002874 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001862:	f000 fe91 	bl	8002588 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001866:	f000 fedd 	bl	8002624 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  printf("------------------------\r\n");
 800186a:	48c5      	ldr	r0, [pc, #788]	; (8001b80 <main+0x348>)
 800186c:	f006 fca2 	bl	80081b4 <puts>
  printf("------------------------\r\n");
 8001870:	48c3      	ldr	r0, [pc, #780]	; (8001b80 <main+0x348>)
 8001872:	f006 fc9f 	bl	80081b4 <puts>
  printf("------------------------\r\n");
 8001876:	48c2      	ldr	r0, [pc, #776]	; (8001b80 <main+0x348>)
 8001878:	f006 fc9c 	bl	80081b4 <puts>
  printf("------------------------\r\n");
 800187c:	48c0      	ldr	r0, [pc, #768]	; (8001b80 <main+0x348>)
 800187e:	f006 fc99 	bl	80081b4 <puts>
  printf("initialisation du CanSat\r\n");
 8001882:	48c0      	ldr	r0, [pc, #768]	; (8001b84 <main+0x34c>)
 8001884:	f006 fc96 	bl	80081b4 <puts>
  printf("------------------------\r\n");
 8001888:	48bd      	ldr	r0, [pc, #756]	; (8001b80 <main+0x348>)
 800188a:	f006 fc93 	bl	80081b4 <puts>
  printf("------------------------\r\n");
 800188e:	48bc      	ldr	r0, [pc, #752]	; (8001b80 <main+0x348>)
 8001890:	f006 fc90 	bl	80081b4 <puts>
  printf("------------------------\r\n");
 8001894:	48ba      	ldr	r0, [pc, #744]	; (8001b80 <main+0x348>)
 8001896:	f006 fc8d 	bl	80081b4 <puts>
  printf("------------------------\r\n");
 800189a:	48b9      	ldr	r0, [pc, #740]	; (8001b80 <main+0x348>)
 800189c:	f006 fc8a 	bl	80081b4 <puts>

    int x=0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    int i=0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    int Devices[100]={0};
 80018ac:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80018b0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80018b4:	4618      	mov	r0, r3
 80018b6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80018ba:	461a      	mov	r2, r3
 80018bc:	2100      	movs	r1, #0
 80018be:	f005 ff81 	bl	80077c4 <memset>

   uint8_t pData[100] = {0};
 80018c2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80018c6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	3304      	adds	r3, #4
 80018d0:	2260      	movs	r2, #96	; 0x60
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f005 ff75 	bl	80077c4 <memset>
   /**********                           *********
    * ******** INIT MPU-9250 (IMU_10DOF) *********
    * ********                           *********
    */

   printf("initialisation de l'IMU \r\n \r\n");
 80018da:	48ab      	ldr	r0, [pc, #684]	; (8001b88 <main+0x350>)
 80018dc:	f006 fc6a 	bl	80081b4 <puts>

   // Initialisation du capteur MPU-9250

   Init(&hi2c1);
 80018e0:	48aa      	ldr	r0, [pc, #680]	; (8001b8c <main+0x354>)
 80018e2:	f7ff fb91 	bl	8001008 <Init>

   // vérification identité capteur MPU-9250

    pData[0]= WHO_AM_I_MPU9250;
 80018e6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80018ea:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80018ee:	2275      	movs	r2, #117	; 0x75
 80018f0:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Master_Transmit(&hi2c1, MPU_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 80018f2:	463a      	mov	r2, r7
 80018f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2301      	movs	r3, #1
 80018fc:	21d0      	movs	r1, #208	; 0xd0
 80018fe:	48a3      	ldr	r0, [pc, #652]	; (8001b8c <main+0x354>)
 8001900:	f001 fe28 	bl	8003554 <HAL_I2C_Master_Transmit>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <main+0xd8>
    {
  	  printf("il y a une erreur avec I2C Master Transmit \r\n");
 800190a:	48a1      	ldr	r0, [pc, #644]	; (8001b90 <main+0x358>)
 800190c:	f006 fc52 	bl	80081b4 <puts>
    }
    if(HAL_I2C_Master_Receive(&hi2c1, MPU_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001910:	463a      	mov	r2, r7
 8001912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2301      	movs	r3, #1
 800191a:	21d0      	movs	r1, #208	; 0xd0
 800191c:	489b      	ldr	r0, [pc, #620]	; (8001b8c <main+0x354>)
 800191e:	f001 ff17 	bl	8003750 <HAL_I2C_Master_Receive>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <main+0xf6>
    {
  	  printf("il y a une erreur avec I2C Master Receive \r\n");
 8001928:	489a      	ldr	r0, [pc, #616]	; (8001b94 <main+0x35c>)
 800192a:	f006 fc43 	bl	80081b4 <puts>
    }


    printf(" L'identifiant du capteur est : %x \r\n", pData[0]);
 800192e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001932:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	4897      	ldr	r0, [pc, #604]	; (8001b98 <main+0x360>)
 800193c:	f006 fbb4 	bl	80080a8 <iprintf>
    if((pData[0] =! 0x71))
 8001940:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001944:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
    {
  	  printf("ce n'est pas le bon capteur \r\n");
    }
    else
  	  printf("MPU-9250 identified \r\n");
 800194c:	4893      	ldr	r0, [pc, #588]	; (8001b9c <main+0x364>)
 800194e:	f006 fc31 	bl	80081b4 <puts>

    // vérification identité AK8963C (magnétomètre)

    pData[0]= WHO_AM_I_AK8963;
 8001952:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001956:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
      if(HAL_I2C_Master_Transmit(&hi2c1, MAGNETO_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 800195e:	463a      	mov	r2, r7
 8001960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2301      	movs	r3, #1
 8001968:	2118      	movs	r1, #24
 800196a:	4888      	ldr	r0, [pc, #544]	; (8001b8c <main+0x354>)
 800196c:	f001 fdf2 	bl	8003554 <HAL_I2C_Master_Transmit>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <main+0x144>
      {
    	  printf("il y a une erreur avec I2C Master Transmit \r\n");
 8001976:	4886      	ldr	r0, [pc, #536]	; (8001b90 <main+0x358>)
 8001978:	f006 fc1c 	bl	80081b4 <puts>
      }
      if(HAL_I2C_Master_Receive(&hi2c1, MAGNETO_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 800197c:	463a      	mov	r2, r7
 800197e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2301      	movs	r3, #1
 8001986:	2118      	movs	r1, #24
 8001988:	4880      	ldr	r0, [pc, #512]	; (8001b8c <main+0x354>)
 800198a:	f001 fee1 	bl	8003750 <HAL_I2C_Master_Receive>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d002      	beq.n	800199a <main+0x162>
      {
    	  printf("il y a une erreur avec I2C Master Receive \r\n");
 8001994:	487f      	ldr	r0, [pc, #508]	; (8001b94 <main+0x35c>)
 8001996:	f006 fc0d 	bl	80081b4 <puts>
      }


      printf(" L'identifiant du magnétomètre est : %x \r\n", pData[0]);
 800199a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800199e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	487e      	ldr	r0, [pc, #504]	; (8001ba0 <main+0x368>)
 80019a8:	f006 fb7e 	bl	80080a8 <iprintf>
      if((pData[0] =! 0x48))
 80019ac:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80019b0:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
      {
    	  printf("ce n'est pas le bon capteur \r\n  ****** \r\n ****** \r\n ****** \r\n");
      }
      else
    	  printf("AK8963C identified \r\n  ****** \r\n ****** \r\n ****** \r\n");
 80019b8:	487a      	ldr	r0, [pc, #488]	; (8001ba4 <main+0x36c>)
 80019ba:	f006 fbfb 	bl	80081b4 <puts>



  // check les périphériques i2c disponibles

    for (i=0;i<256;i++){
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80019c4:	e02a      	b.n	8001a1c <main+0x1e4>
         	  if(HAL_I2C_IsDeviceReady(&hi2c1, i, 4, 20)==HAL_OK){
 80019c6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80019ca:	b299      	uxth	r1, r3
 80019cc:	2314      	movs	r3, #20
 80019ce:	2204      	movs	r2, #4
 80019d0:	486e      	ldr	r0, [pc, #440]	; (8001b8c <main+0x354>)
 80019d2:	f002 fc03 	bl	80041dc <HAL_I2C_IsDeviceReady>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d11a      	bne.n	8001a12 <main+0x1da>
         		  Devices[x]=i;
 80019dc:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80019e0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80019e4:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80019e8:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 80019ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
         		  printf("%d \r\n",Devices[x]);
 80019f0:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80019f4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80019f8:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80019fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a00:	4619      	mov	r1, r3
 8001a02:	4869      	ldr	r0, [pc, #420]	; (8001ba8 <main+0x370>)
 8001a04:	f006 fb50 	bl	80080a8 <iprintf>
         		  x=x+1;
 8001a08:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    for (i=0;i<256;i++){
 8001a12:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001a16:	3301      	adds	r3, #1
 8001a18:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8001a1c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001a20:	2bff      	cmp	r3, #255	; 0xff
 8001a22:	ddd0      	ble.n	80019c6 <main+0x18e>
    	  *            entrée des données GPS de la cible
    	  ***********************************************************/

    	  //Position GPS cible : 43°13'18.7"N 0°03'10.0"W  --> données telles que décrites dans le règlement 2023

    	  pDataCansat.GPS.latitude_Target = 43.2218611;
 8001a24:	4961      	ldr	r1, [pc, #388]	; (8001bac <main+0x374>)
 8001a26:	a352      	add	r3, pc, #328	; (adr r3, 8001b70 <main+0x338>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	e9c1 2308 	strd	r2, r3, [r1, #32]
    	  pDataCansat.GPS.longitude_Target = -0.05277777777777778;
 8001a30:	495e      	ldr	r1, [pc, #376]	; (8001bac <main+0x374>)
 8001a32:	a351      	add	r3, pc, #324	; (adr r3, 8001b78 <main+0x340>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    /**********                              *********
     * ******** INITIALISATION Pololu_sds01a *********
     * ********                              *********
     */

    uint16_t gpio_value = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8a7 320a 	strh.w	r3, [r7, #522]	; 0x20a
    int Drop_flag = 0; // flag that indicates if the Cansat probe has been launch, in order to begin the missions
 8001a42:	2300      	movs	r3, #0
 8001a44:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    /**********                       *********
     * ******** INITIALISATION Servos *********
     * ********                       *********
     */

    int arm_deployment_flag = 1; // pour le déploiement des bras lors du largage
 8001a48:	2301      	movs	r3, #1
 8001a4a:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

    int altitude_ouverture_ballons = 30; // altitude à partir de laquelle on démarre l'opération
 8001a4e:	231e      	movs	r3, #30
 8001a50:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    									 // d'ouverture de la structure gonflable
    									 // à déterminer expérimentalement --> !!!prendre en compte l'altitude locale

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001a54:	2100      	movs	r1, #0
 8001a56:	4856      	ldr	r0, [pc, #344]	; (8001bb0 <main+0x378>)
 8001a58:	f003 ff3e 	bl	80058d8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	4854      	ldr	r0, [pc, #336]	; (8001bb0 <main+0x378>)
 8001a60:	f003 ff3a 	bl	80058d8 <HAL_TIM_PWM_Start>

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1100);   //repliement des bras pour rentrer dans la capsule de largage
 8001a64:	4b52      	ldr	r3, [pc, #328]	; (8001bb0 <main+0x378>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f240 424c 	movw	r2, #1100	; 0x44c
 8001a6c:	635a      	str	r2, [r3, #52]	; 0x34


    /************* INITIALISATION TIMER3 *************/ //pour calculer l'angle et déclencher le mouvement des servos toutes les secondes

    int demarrage_tim3 = 1;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c


    HAL_UART_Receive_IT(&huart1, (uint8_t *)&uart_gps_rx, 1);
 8001a74:	2201      	movs	r2, #1
 8001a76:	494f      	ldr	r1, [pc, #316]	; (8001bb4 <main+0x37c>)
 8001a78:	484f      	ldr	r0, [pc, #316]	; (8001bb8 <main+0x380>)
 8001a7a:	f004 fece 	bl	800681a <HAL_UART_Receive_IT>
  {
	  /************** Récupération des données GPS *************/

	  //GPS_data_reading(it_rx_gps, data_rdy, first_data, pDataCansat, coordonnees, uart_gps_rx, i);

	  if(it_rx_gps){
 8001a7e:	4b4f      	ldr	r3, [pc, #316]	; (8001bbc <main+0x384>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 81a2 	beq.w	8001dcc <main+0x594>
	  	  		if(data_rdy == 1){
 8001a88:	4b4d      	ldr	r3, [pc, #308]	; (8001bc0 <main+0x388>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	f040 8155 	bne.w	8001d3c <main+0x504>
	  	  				for(int j = 0; j<=50;j++){
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001a98:	e00f      	b.n	8001aba <main+0x282>
	  	  					position[j] = coordonnees[j+18]; //position[] comprend la latitude et la longitude telles que sur la trame reçue
 8001a9a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001a9e:	3312      	adds	r3, #18
 8001aa0:	4a48      	ldr	r2, [pc, #288]	; (8001bc4 <main+0x38c>)
 8001aa2:	5cd1      	ldrb	r1, [r2, r3]
 8001aa4:	4a48      	ldr	r2, [pc, #288]	; (8001bc8 <main+0x390>)
 8001aa6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001aaa:	4413      	add	r3, r2
 8001aac:	460a      	mov	r2, r1
 8001aae:	701a      	strb	r2, [r3, #0]
	  	  				for(int j = 0; j<=50;j++){
 8001ab0:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001aba:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001abe:	2b32      	cmp	r3, #50	; 0x32
 8001ac0:	ddeb      	ble.n	8001a9a <main+0x262>
	  	  					//En effet, les coordonnes sont d'abord de cette forme : "$GNGGA,121933.000,4902.36627,N,00204.31287,E,1,05,13.3,0.0,M,0.0,M,,*4D"
	  	  					//On sélectionne donc la partie qui est après l'identifieur et l'heure mais avant le ",E,".
	  	  				}

	  	  				for(int k = 0; k<=9;k++){
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001ac8:	e00f      	b.n	8001aea <main+0x2b2>
	  	  					latitude_data[k] = position[k+1]; //latitude non convertie
 8001aca:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001ace:	3301      	adds	r3, #1
 8001ad0:	4a3d      	ldr	r2, [pc, #244]	; (8001bc8 <main+0x390>)
 8001ad2:	5cd1      	ldrb	r1, [r2, r3]
 8001ad4:	4a3d      	ldr	r2, [pc, #244]	; (8001bcc <main+0x394>)
 8001ad6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001ada:	4413      	add	r3, r2
 8001adc:	460a      	mov	r2, r1
 8001ade:	701a      	strb	r2, [r3, #0]
	  	  				for(int k = 0; k<=9;k++){
 8001ae0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001aea:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001aee:	2b09      	cmp	r3, #9
 8001af0:	ddeb      	ble.n	8001aca <main+0x292>
	  	  				}
	  	  				for(int l = 0; l<=10;l++){
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8001af8:	e00f      	b.n	8001b1a <main+0x2e2>
	  	  					longitude_data[l] = position[l+14]; //longitude non convertie
 8001afa:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001afe:	330e      	adds	r3, #14
 8001b00:	4a31      	ldr	r2, [pc, #196]	; (8001bc8 <main+0x390>)
 8001b02:	5cd1      	ldrb	r1, [r2, r3]
 8001b04:	4a32      	ldr	r2, [pc, #200]	; (8001bd0 <main+0x398>)
 8001b06:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001b0a:	4413      	add	r3, r2
 8001b0c:	460a      	mov	r2, r1
 8001b0e:	701a      	strb	r2, [r3, #0]
	  	  				for(int l = 0; l<=10;l++){
 8001b10:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001b14:	3301      	adds	r3, #1
 8001b16:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8001b1a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001b1e:	2b0a      	cmp	r3, #10
 8001b20:	ddeb      	ble.n	8001afa <main+0x2c2>
	  	  				}
	  	  				for(int h = 0; h<=4; h++){
 8001b22:	2300      	movs	r3, #0
 8001b24:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001b28:	e00f      	b.n	8001b4a <main+0x312>
	  	  					altitude_data[h] = position[h+37]; //altitude non convertie
 8001b2a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001b2e:	3325      	adds	r3, #37	; 0x25
 8001b30:	4a25      	ldr	r2, [pc, #148]	; (8001bc8 <main+0x390>)
 8001b32:	5cd1      	ldrb	r1, [r2, r3]
 8001b34:	4a27      	ldr	r2, [pc, #156]	; (8001bd4 <main+0x39c>)
 8001b36:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001b3a:	4413      	add	r3, r2
 8001b3c:	460a      	mov	r2, r1
 8001b3e:	701a      	strb	r2, [r3, #0]
	  	  				for(int h = 0; h<=4; h++){
 8001b40:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001b44:	3301      	adds	r3, #1
 8001b46:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001b4a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	ddeb      	ble.n	8001b2a <main+0x2f2>
	  	  				}

	  	  				lat2[0] = latitude_data[0];
 8001b52:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <main+0x394>)
 8001b54:	781a      	ldrb	r2, [r3, #0]
 8001b56:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <main+0x3a0>)
 8001b58:	701a      	strb	r2, [r3, #0]
	  	  				lat2[1] = latitude_data[1]; //lat2 -> les deux digits avant la virgue du degré de la lat.
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <main+0x394>)
 8001b5c:	785a      	ldrb	r2, [r3, #1]
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <main+0x3a0>)
 8001b60:	705a      	strb	r2, [r3, #1]

	  	  				for(int m = 0; m<=6;m++){
 8001b62:	2300      	movs	r3, #0
 8001b64:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001b68:	e048      	b.n	8001bfc <main+0x3c4>
 8001b6a:	bf00      	nop
 8001b6c:	f3af 8000 	nop.w
 8001b70:	f1cc6096 	.word	0xf1cc6096
 8001b74:	40459c65 	.word	0x40459c65
 8001b78:	5b05b05b 	.word	0x5b05b05b
 8001b7c:	bfab05b0 	.word	0xbfab05b0
 8001b80:	0800bf10 	.word	0x0800bf10
 8001b84:	0800bf2c 	.word	0x0800bf2c
 8001b88:	0800bf48 	.word	0x0800bf48
 8001b8c:	200001fc 	.word	0x200001fc
 8001b90:	0800bf68 	.word	0x0800bf68
 8001b94:	0800bf98 	.word	0x0800bf98
 8001b98:	0800bfc4 	.word	0x0800bfc4
 8001b9c:	0800bfec 	.word	0x0800bfec
 8001ba0:	0800c004 	.word	0x0800c004
 8001ba4:	0800c034 	.word	0x0800c034
 8001ba8:	0800c068 	.word	0x0800c068
 8001bac:	20000250 	.word	0x20000250
 8001bb0:	2000078c 	.word	0x2000078c
 8001bb4:	20000320 	.word	0x20000320
 8001bb8:	20000864 	.word	0x20000864
 8001bbc:	20000325 	.word	0x20000325
 8001bc0:	20000784 	.word	0x20000784
 8001bc4:	20000328 	.word	0x20000328
 8001bc8:	20000730 	.word	0x20000730
 8001bcc:	2000071c 	.word	0x2000071c
 8001bd0:	20000710 	.word	0x20000710
 8001bd4:	20000728 	.word	0x20000728
 8001bd8:	20000764 	.word	0x20000764
	  	  					lat7[m] = latitude_data[m+2]; //lat 7 -> ce qui reste après la virgule de la lat.
 8001bdc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001be0:	3302      	adds	r3, #2
 8001be2:	4aa3      	ldr	r2, [pc, #652]	; (8001e70 <main+0x638>)
 8001be4:	5cd1      	ldrb	r1, [r2, r3]
 8001be6:	4aa3      	ldr	r2, [pc, #652]	; (8001e74 <main+0x63c>)
 8001be8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001bec:	4413      	add	r3, r2
 8001bee:	460a      	mov	r2, r1
 8001bf0:	701a      	strb	r2, [r3, #0]
	  	  				for(int m = 0; m<=6;m++){
 8001bf2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001bfc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001c00:	2b06      	cmp	r3, #6
 8001c02:	ddeb      	ble.n	8001bdc <main+0x3a4>
	  	  				}

	  	  				long3[0] = longitude_data[0];
 8001c04:	4b9c      	ldr	r3, [pc, #624]	; (8001e78 <main+0x640>)
 8001c06:	781a      	ldrb	r2, [r3, #0]
 8001c08:	4b9c      	ldr	r3, [pc, #624]	; (8001e7c <main+0x644>)
 8001c0a:	701a      	strb	r2, [r3, #0]
	  	  				long3[1] = longitude_data[1];
 8001c0c:	4b9a      	ldr	r3, [pc, #616]	; (8001e78 <main+0x640>)
 8001c0e:	785a      	ldrb	r2, [r3, #1]
 8001c10:	4b9a      	ldr	r3, [pc, #616]	; (8001e7c <main+0x644>)
 8001c12:	705a      	strb	r2, [r3, #1]
	  	  				long3[2] = longitude_data[2]; //long3 -> les trois digits avant la virgule du degré de la long.
 8001c14:	4b98      	ldr	r3, [pc, #608]	; (8001e78 <main+0x640>)
 8001c16:	789a      	ldrb	r2, [r3, #2]
 8001c18:	4b98      	ldr	r3, [pc, #608]	; (8001e7c <main+0x644>)
 8001c1a:	709a      	strb	r2, [r3, #2]

	  	  				for(int n = 0; n<=6;n++){
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8001c22:	e00f      	b.n	8001c44 <main+0x40c>
	  	  					long7[n] = longitude_data[n+3]; //long7 -> ce qui reste après la virgule de la long.
 8001c24:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001c28:	3303      	adds	r3, #3
 8001c2a:	4a93      	ldr	r2, [pc, #588]	; (8001e78 <main+0x640>)
 8001c2c:	5cd1      	ldrb	r1, [r2, r3]
 8001c2e:	4a94      	ldr	r2, [pc, #592]	; (8001e80 <main+0x648>)
 8001c30:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001c34:	4413      	add	r3, r2
 8001c36:	460a      	mov	r2, r1
 8001c38:	701a      	strb	r2, [r3, #0]
	  	  				for(int n = 0; n<=6;n++){
 8001c3a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001c3e:	3301      	adds	r3, #1
 8001c40:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8001c44:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001c48:	2b06      	cmp	r3, #6
 8001c4a:	ddeb      	ble.n	8001c24 <main+0x3ec>
	  	  				}

	  	  				float deg_lat = atof(lat2);
 8001c4c:	488d      	ldr	r0, [pc, #564]	; (8001e84 <main+0x64c>)
 8001c4e:	f005 fd7d 	bl	800774c <atof>
 8001c52:	ec53 2b10 	vmov	r2, r3, d0
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe ffcd 	bl	8000bf8 <__aeabi_d2f>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	  	  				float reste_lat = atof(lat7); //conversion du char[lat] en float[lat]
 8001c64:	4883      	ldr	r0, [pc, #524]	; (8001e74 <main+0x63c>)
 8001c66:	f005 fd71 	bl	800774c <atof>
 8001c6a:	ec53 2b10 	vmov	r2, r3, d0
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	f7fe ffc1 	bl	8000bf8 <__aeabi_d2f>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

	  	  				float deg_long = atof(long3);
 8001c7c:	487f      	ldr	r0, [pc, #508]	; (8001e7c <main+0x644>)
 8001c7e:	f005 fd65 	bl	800774c <atof>
 8001c82:	ec53 2b10 	vmov	r2, r3, d0
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe ffb5 	bl	8000bf8 <__aeabi_d2f>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
	  	  				float reste_long = atof(long7); //conversion du char[long] en float[long]
 8001c94:	487a      	ldr	r0, [pc, #488]	; (8001e80 <main+0x648>)
 8001c96:	f005 fd59 	bl	800774c <atof>
 8001c9a:	ec53 2b10 	vmov	r2, r3, d0
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f7fe ffa9 	bl	8000bf8 <__aeabi_d2f>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

	  	  				pDataCansat.GPS.latitude_Cansat = deg_lat + (reste_lat/60); //latitude convertie
 8001cac:	edd7 7a7f 	vldr	s15, [r7, #508]	; 0x1fc
 8001cb0:	eddf 6a75 	vldr	s13, [pc, #468]	; 8001e88 <main+0x650>
 8001cb4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cb8:	edd7 7a80 	vldr	s15, [r7, #512]	; 0x200
 8001cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc0:	ee17 0a90 	vmov	r0, s15
 8001cc4:	f7fe fc48 	bl	8000558 <__aeabi_f2d>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	496f      	ldr	r1, [pc, #444]	; (8001e8c <main+0x654>)
 8001cce:	e9c1 2300 	strd	r2, r3, [r1]
	  	  				pDataCansat.GPS.longitude_Cansat = deg_long + (reste_long/60); //longitude convertie
 8001cd2:	edd7 7a7d 	vldr	s15, [r7, #500]	; 0x1f4
 8001cd6:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8001e88 <main+0x650>
 8001cda:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cde:	edd7 7a7e 	vldr	s15, [r7, #504]	; 0x1f8
 8001ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce6:	ee17 0a90 	vmov	r0, s15
 8001cea:	f7fe fc35 	bl	8000558 <__aeabi_f2d>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4966      	ldr	r1, [pc, #408]	; (8001e8c <main+0x654>)
 8001cf4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  	  				pDataCansat.GPS.altitude_Cansat = atof(altitude_data);
 8001cf8:	4865      	ldr	r0, [pc, #404]	; (8001e90 <main+0x658>)
 8001cfa:	f005 fd27 	bl	800774c <atof>
 8001cfe:	eeb0 7a40 	vmov.f32	s14, s0
 8001d02:	eef0 7a60 	vmov.f32	s15, s1
 8001d06:	4b61      	ldr	r3, [pc, #388]	; (8001e8c <main+0x654>)
 8001d08:	ed83 7b04 	vstr	d7, [r3, #16]

	  	  				//printf("donnees du GPS : latitude = %f, longitude = %f, altitude = %f, - - - - - - - - GPS \r\n", pDataCansat.GPS.latitude_Cansat, pDataCansat.GPS.longitude_Cansat, pDataCansat.GPS.altitude_Cansat);

	  	  				//nombre de satellites
	  	  				for(int k = 0; k<2;k++){
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001d12:	e00f      	b.n	8001d34 <main+0x4fc>
	  	  				satellites[k] = coordonnees[k+45]; //satellites[] comprend le nombre de stellites que sur la trame reçue
 8001d14:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001d18:	332d      	adds	r3, #45	; 0x2d
 8001d1a:	4a5e      	ldr	r2, [pc, #376]	; (8001e94 <main+0x65c>)
 8001d1c:	5cd1      	ldrb	r1, [r2, r3]
 8001d1e:	4a5e      	ldr	r2, [pc, #376]	; (8001e98 <main+0x660>)
 8001d20:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001d24:	4413      	add	r3, r2
 8001d26:	460a      	mov	r2, r1
 8001d28:	701a      	strb	r2, [r3, #0]
	  	  				for(int k = 0; k<2;k++){
 8001d2a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001d2e:	3301      	adds	r3, #1
 8001d30:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001d34:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	ddeb      	ble.n	8001d14 <main+0x4dc>
	  	  				}
	  	  		}
	  	  		if(uart_gps_rx[0]==10){
 8001d3c:	4b57      	ldr	r3, [pc, #348]	; (8001e9c <main+0x664>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b0a      	cmp	r3, #10
 8001d42:	d040      	beq.n	8001dc6 <main+0x58e>
	  	  			//HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY); //Arrangement de la trame
	  	  		}
	  	  		else{
	  	  			uart_pc_tx[0]=uart_gps_rx[0];
 8001d44:	4b55      	ldr	r3, [pc, #340]	; (8001e9c <main+0x664>)
 8001d46:	781a      	ldrb	r2, [r3, #0]
 8001d48:	4b55      	ldr	r3, [pc, #340]	; (8001ea0 <main+0x668>)
 8001d4a:	701a      	strb	r2, [r3, #0]
	  	  			//HAL_UART_Transmit(&huart2, uart_pc_tx, 1, HAL_MAX_DELAY);
	  	  			coordonnees[i] = uart_pc_tx[0]; //On copie ce qui passe dans l'UART dans un tableau coordonnees[i].
 8001d4c:	4b54      	ldr	r3, [pc, #336]	; (8001ea0 <main+0x668>)
 8001d4e:	7819      	ldrb	r1, [r3, #0]
 8001d50:	4a50      	ldr	r2, [pc, #320]	; (8001e94 <main+0x65c>)
 8001d52:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001d56:	4413      	add	r3, r2
 8001d58:	460a      	mov	r2, r1
 8001d5a:	701a      	strb	r2, [r3, #0]
	  	  			if(i >= 4){
 8001d5c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	dd2b      	ble.n	8001dbc <main+0x584>
	  	  				if(strncmp("OK*35",&coordonnees[i-4],5) == 0){
 8001d64:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001d68:	3b04      	subs	r3, #4
 8001d6a:	4a4a      	ldr	r2, [pc, #296]	; (8001e94 <main+0x65c>)
 8001d6c:	4413      	add	r3, r2
 8001d6e:	2205      	movs	r2, #5
 8001d70:	4619      	mov	r1, r3
 8001d72:	484c      	ldr	r0, [pc, #304]	; (8001ea4 <main+0x66c>)
 8001d74:	f006 fa26 	bl	80081c4 <strncmp>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10e      	bne.n	8001d9c <main+0x564>
	  	  						i = 0; //Si on trouve "OK", on réinitialise i à 0 pour synchroniser notre trame.
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	  	  						if(first_data == 1){
 8001d84:	4b48      	ldr	r3, [pc, #288]	; (8001ea8 <main+0x670>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d103      	bne.n	8001d94 <main+0x55c>
	  	  							data_rdy = 1; //Si la trame est initialisée, le premier caractère du tableau voulu est prêt.
 8001d8c:	4b47      	ldr	r3, [pc, #284]	; (8001eac <main+0x674>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	e018      	b.n	8001dc6 <main+0x58e>
	  	  						}
	  	  						else first_data = 1; //Permet d'enregistrer le tableau désiré.
 8001d94:	4b44      	ldr	r3, [pc, #272]	; (8001ea8 <main+0x670>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	e014      	b.n	8001dc6 <main+0x58e>
	  	  					}
	  	  				else{
	  	  						if(i == GPS_TRAME_SIZE-1){
 8001d9c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001da0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d103      	bne.n	8001db0 <main+0x578>
	  	  							i = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8001dae:	e00a      	b.n	8001dc6 <main+0x58e>
	  	  						}
	  	  						else{
	  	  							i++;
 8001db0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001db4:	3301      	adds	r3, #1
 8001db6:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8001dba:	e004      	b.n	8001dc6 <main+0x58e>
	  	  					}

	  	  				}
	  	  			}
	  	  			else i++;
 8001dbc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	  	  		}
	  	  	it_rx_gps = 0;
 8001dc6:	4b3a      	ldr	r3, [pc, #232]	; (8001eb0 <main+0x678>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
	  	  	}


	  /************** Détection du largage ***************/

	  if( Drop_flag == 0 )
 8001dcc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d103      	bne.n	8001ddc <main+0x5a4>
	  {
	  Drop_flag = Drop_detection();
 8001dd4:	f000 f8ea 	bl	8001fac <Drop_detection>
 8001dd8:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234
	  }

	  	  	  if(Drop_flag) // largage détecté, démarrage des missions
 8001ddc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f43f ae4c 	beq.w	8001a7e <main+0x246>
	  	  	  {
	  	  		 /*************** déploiement des bras *******************************/

	  	  		  if(arm_deployment_flag)
 8001de6:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d007      	beq.n	8001dfe <main+0x5c6>
	  	  		  {
	  	  			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 400); // déploiement bras gauche
 8001dee:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <main+0x67c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001df6:	635a      	str	r2, [r3, #52]	; 0x34
	  	  		//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, ?); // déploiement bras droit
	  	  			arm_deployment_flag = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	  	  		  }

	  	  		 /*************** Lecture du champ magnétique terrestre **************/

	  	  		  Measure_M(&hi2c1, pDataCansat.IMU.MagnetometerData.mag_raw, pDataCansat.IMU.MagnetometerData.offset, pDataCansat.IMU.MagnetometerData.offset);
 8001dfe:	4b2e      	ldr	r3, [pc, #184]	; (8001eb8 <main+0x680>)
 8001e00:	4a2d      	ldr	r2, [pc, #180]	; (8001eb8 <main+0x680>)
 8001e02:	492e      	ldr	r1, [pc, #184]	; (8001ebc <main+0x684>)
 8001e04:	482e      	ldr	r0, [pc, #184]	; (8001ec0 <main+0x688>)
 8001e06:	f7ff fa03 	bl	8001210 <Measure_M>
	  	  		  //printf("champ magnetique --- selon x : %f , selon y : %f \r\n", pDataCansat.IMU.MagnetometerData.mag_raw[0], pDataCansat.IMU.MagnetometerData.mag_raw[1]);
	  	  		  HAL_Delay(50);
 8001e0a:	2032      	movs	r0, #50	; 0x32
 8001e0c:	f000 fec6 	bl	8002b9c <HAL_Delay>

	  	  		 /*************** Conversion du champ magnétique en degrées **************/

	  	  		  pDataCansat.IMU.MagnetometerData.degree_angle = magnetic_field_to_degree(pDataCansat.IMU.MagnetometerData.mag_raw);
 8001e10:	482a      	ldr	r0, [pc, #168]	; (8001ebc <main+0x684>)
 8001e12:	f7ff fb45 	bl	80014a0 <magnetic_field_to_degree>
 8001e16:	ee10 3a10 	vmov	r3, s0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fb9c 	bl	8000558 <__aeabi_f2d>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4919      	ldr	r1, [pc, #100]	; (8001e8c <main+0x654>)
 8001e26:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0

	  	  		  if( demarrage_tim3 )
 8001e2a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00b      	beq.n	8001e4a <main+0x612>
	  	  		  {
	  	  			if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8001e32:	4824      	ldr	r0, [pc, #144]	; (8001ec4 <main+0x68c>)
 8001e34:	f003 fc94 	bl	8005760 <HAL_TIM_Base_Start_IT>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <main+0x60c>
	  	  			{
	  	  				printf("defaut d'initialisation du tim3");
 8001e3e:	4822      	ldr	r0, [pc, #136]	; (8001ec8 <main+0x690>)
 8001e40:	f006 f932 	bl	80080a8 <iprintf>
	  	  			}
	  	  			demarrage_tim3 = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	  	  		  }



	  	  		  if(pDataCansat.GPS.altitude_Cansat <= altitude_ouverture_ballons )
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <main+0x654>)
 8001e4c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001e50:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8001e54:	f7fe fb6e 	bl	8000534 <__aeabi_i2d>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	4629      	mov	r1, r5
 8001e60:	f7fe fe4e 	bl	8000b00 <__aeabi_dcmple>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <main+0x636>
	  	  		  {
	  	  			  // fonction d'ouverture des ballons
	  	  			 declenchement_structure_gonflable();
 8001e6a:	f000 f981 	bl	8002170 <declenchement_structure_gonflable>
	  if(it_rx_gps){
 8001e6e:	e606      	b.n	8001a7e <main+0x246>
 8001e70:	2000071c 	.word	0x2000071c
 8001e74:	20000768 	.word	0x20000768
 8001e78:	20000710 	.word	0x20000710
 8001e7c:	20000770 	.word	0x20000770
 8001e80:	20000774 	.word	0x20000774
 8001e84:	20000764 	.word	0x20000764
 8001e88:	42700000 	.word	0x42700000
 8001e8c:	20000250 	.word	0x20000250
 8001e90:	20000728 	.word	0x20000728
 8001e94:	20000328 	.word	0x20000328
 8001e98:	2000077c 	.word	0x2000077c
 8001e9c:	20000320 	.word	0x20000320
 8001ea0:	20000324 	.word	0x20000324
 8001ea4:	0800c070 	.word	0x0800c070
 8001ea8:	20000780 	.word	0x20000780
 8001eac:	20000784 	.word	0x20000784
 8001eb0:	20000325 	.word	0x20000325
 8001eb4:	2000078c 	.word	0x2000078c
 8001eb8:	200002c8 	.word	0x200002c8
 8001ebc:	200002b0 	.word	0x200002b0
 8001ec0:	200001fc 	.word	0x200001fc
 8001ec4:	200007d4 	.word	0x200007d4
 8001ec8:	0800c078 	.word	0x0800c078

08001ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b094      	sub	sp, #80	; 0x50
 8001ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed2:	f107 0320 	add.w	r3, r7, #32
 8001ed6:	2230      	movs	r2, #48	; 0x30
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f005 fc72 	bl	80077c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	4b28      	ldr	r3, [pc, #160]	; (8001f98 <SystemClock_Config+0xcc>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	4a27      	ldr	r2, [pc, #156]	; (8001f98 <SystemClock_Config+0xcc>)
 8001efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efe:	6413      	str	r3, [r2, #64]	; 0x40
 8001f00:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <SystemClock_Config+0xcc>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <SystemClock_Config+0xd0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a21      	ldr	r2, [pc, #132]	; (8001f9c <SystemClock_Config+0xd0>)
 8001f16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <SystemClock_Config+0xd0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f30:	2310      	movs	r3, #16
 8001f32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f34:	2302      	movs	r3, #2
 8001f36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001f3c:	2310      	movs	r3, #16
 8001f3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001f40:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001f44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f46:	2304      	movs	r3, #4
 8001f48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f4e:	f107 0320 	add.w	r3, r7, #32
 8001f52:	4618      	mov	r0, r3
 8001f54:	f002 ff1c 	bl	8004d90 <HAL_RCC_OscConfig>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001f5e:	f000 f81f 	bl	8001fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f62:	230f      	movs	r3, #15
 8001f64:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f66:	2302      	movs	r3, #2
 8001f68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 f97e 	bl	8005280 <HAL_RCC_ClockConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f8a:	f000 f809 	bl	8001fa0 <Error_Handler>
  }
}
 8001f8e:	bf00      	nop
 8001f90:	3750      	adds	r7, #80	; 0x50
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40007000 	.word	0x40007000

08001fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa4:	b672      	cpsid	i
}
 8001fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <Error_Handler+0x8>
	...

08001fac <Drop_detection>:
	 * @param Drop_flag Drapeau qui permet d'indiquer que le Cansat a été largué
	 * @retval None
	 */

int Drop_detection()
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
		int flag = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
		uint16_t gpio_value = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	807b      	strh	r3, [r7, #2]

		gpio_value = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);  // prend la valeur 1 lorsque pas d'obstacles
 8001fba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fbe:	4809      	ldr	r0, [pc, #36]	; (8001fe4 <Drop_detection+0x38>)
 8001fc0:	f001 f938 	bl	8003234 <HAL_GPIO_ReadPin>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	807b      	strh	r3, [r7, #2]
															// prend la valeur 0 lorsque detection d'un obstacle
		//printf("valeur du capteur IR : %d \r\n", gpio_value);

		if(gpio_value == 1)
 8001fc8:	887b      	ldrh	r3, [r7, #2]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d104      	bne.n	8001fd8 <Drop_detection+0x2c>
		{
			flag = 1;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	607b      	str	r3, [r7, #4]
			printf("*** \r\n *** \r\n *** \r\n *** \r\n *** \r\n *** \r\n largage effectue \r\n *** \r\n *** \r\n *** \r\n *** \r\n *** \r\n *** \r\n");
 8001fd2:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <Drop_detection+0x3c>)
 8001fd4:	f006 f8ee 	bl	80081b4 <puts>
		}

		return flag;
 8001fd8:	687b      	ldr	r3, [r7, #4]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40020000 	.word	0x40020000
 8001fe8:	0800c098 	.word	0x0800c098

08001fec <servoSetPositionLeft>:
 	 * @brief Positionnement du servo gauche
 	 * @Note Cette fonction permet de placer le servo comme on le souhaite avec 4 positions différentes
	 * @param int position : 0,1,2 ou 3
	 * @retval None
	 */
void servoSetPositionLeft (int position){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	if (position == 0){
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d105      	bne.n	8002006 <servoSetPositionLeft+0x1a>
		//TIM2->CCR1 = POSITION_0_LEFT;
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 400);
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <servoSetPositionLeft+0x60>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002002:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);
	}
	else {
		printf("Vous ne devez mettre en entree que 0,1,2 ou 3 \r\n");
	}
}
 8002004:	e01d      	b.n	8002042 <servoSetPositionLeft+0x56>
	else if (position == 1){
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d105      	bne.n	8002018 <servoSetPositionLeft+0x2c>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 600);
 800200c:	4b0f      	ldr	r3, [pc, #60]	; (800204c <servoSetPositionLeft+0x60>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002014:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002016:	e014      	b.n	8002042 <servoSetPositionLeft+0x56>
	else if (position == 2){
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d105      	bne.n	800202a <servoSetPositionLeft+0x3e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <servoSetPositionLeft+0x60>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002026:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002028:	e00b      	b.n	8002042 <servoSetPositionLeft+0x56>
	else if (position == 3){
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d105      	bne.n	800203c <servoSetPositionLeft+0x50>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <servoSetPositionLeft+0x60>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002038:	635a      	str	r2, [r3, #52]	; 0x34
}
 800203a:	e002      	b.n	8002042 <servoSetPositionLeft+0x56>
		printf("Vous ne devez mettre en entree que 0,1,2 ou 3 \r\n");
 800203c:	4804      	ldr	r0, [pc, #16]	; (8002050 <servoSetPositionLeft+0x64>)
 800203e:	f006 f8b9 	bl	80081b4 <puts>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	2000078c 	.word	0x2000078c
 8002050:	0800c100 	.word	0x0800c100

08002054 <servoSetPositionRight>:
 	 * @brief Positionnement du servo droit
 	 * @Note Cette fonction permet de placer le servo comme on le souhaite avec 4 positions différentes
	 * @param int position : 0,1,2 ou 3
	 * @retval None
	 */
void servoSetPositionRight (int position){
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	if (position == 0){
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d105      	bne.n	800206e <servoSetPositionRight+0x1a>
		//TIM2->CCR2 = POSITION_0_RIGHT;
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 400);
 8002062:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <servoSetPositionRight+0x60>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800206a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1500);
	}
	else {
		printf("Vous ne devez mettre en entree 0,1,2 ou 3 \r\n");
	}
}
 800206c:	e01d      	b.n	80020aa <servoSetPositionRight+0x56>
	else if (position == 1){
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d105      	bne.n	8002080 <servoSetPositionRight+0x2c>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 600);              //   Attention, Channel 1 --> servo gauche
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <servoSetPositionRight+0x60>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f44f 7216 	mov.w	r2, #600	; 0x258
 800207c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800207e:	e014      	b.n	80020aa <servoSetPositionRight+0x56>
	else if (position == 2){
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d105      	bne.n	8002092 <servoSetPositionRight+0x3e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <servoSetPositionRight+0x60>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800208e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002090:	e00b      	b.n	80020aa <servoSetPositionRight+0x56>
	else if (position == 3){
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b03      	cmp	r3, #3
 8002096:	d105      	bne.n	80020a4 <servoSetPositionRight+0x50>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1500);
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <servoSetPositionRight+0x60>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80020a0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80020a2:	e002      	b.n	80020aa <servoSetPositionRight+0x56>
		printf("Vous ne devez mettre en entree 0,1,2 ou 3 \r\n");
 80020a4:	4804      	ldr	r0, [pc, #16]	; (80020b8 <servoSetPositionRight+0x64>)
 80020a6:	f006 f885 	bl	80081b4 <puts>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	2000078c 	.word	0x2000078c
 80020b8:	0800c130 	.word	0x0800c130

080020bc <choice_direction_intensity>:
 	 * @Note Cette fonction permet de choisir la direction dans laquelle le cansat doit aller ainsi que son intensité grâce à une différence d'angle
	 * @param int delta_teta : difference d'angle comprise entre 0 et 360 degrés
	 * @retval None
	 */

void choice_direction_intensity(unsigned int delta_teta){
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	if ((delta_teta<epsilon) || (delta_teta>360-epsilon)){
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d903      	bls.n	80020d2 <choice_direction_intensity+0x16>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 80020d0:	d306      	bcc.n	80020e0 <choice_direction_intensity+0x24>
		servoSetPositionLeft(0);
 80020d2:	2000      	movs	r0, #0
 80020d4:	f7ff ff8a 	bl	8001fec <servoSetPositionLeft>
		servoSetPositionRight(0);
 80020d8:	2000      	movs	r0, #0
 80020da:	f7ff ffbb 	bl	8002054 <servoSetPositionRight>
	}
	else {
		printf("cas non traité \r\n");
	}

}
 80020de:	e040      	b.n	8002162 <choice_direction_intensity+0xa6>
	else if (delta_teta<teta_low){
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b1d      	cmp	r3, #29
 80020e4:	d806      	bhi.n	80020f4 <choice_direction_intensity+0x38>
		servoSetPositionLeft(0);
 80020e6:	2000      	movs	r0, #0
 80020e8:	f7ff ff80 	bl	8001fec <servoSetPositionLeft>
		servoSetPositionRight(1);
 80020ec:	2001      	movs	r0, #1
 80020ee:	f7ff ffb1 	bl	8002054 <servoSetPositionRight>
}
 80020f2:	e036      	b.n	8002162 <choice_direction_intensity+0xa6>
	else if (delta_teta>360-teta_low){
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80020fa:	d906      	bls.n	800210a <choice_direction_intensity+0x4e>
		servoSetPositionLeft(1);
 80020fc:	2001      	movs	r0, #1
 80020fe:	f7ff ff75 	bl	8001fec <servoSetPositionLeft>
		servoSetPositionRight(0);
 8002102:	2000      	movs	r0, #0
 8002104:	f7ff ffa6 	bl	8002054 <servoSetPositionRight>
}
 8002108:	e02b      	b.n	8002162 <choice_direction_intensity+0xa6>
	else if (delta_teta<teta_high){
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b63      	cmp	r3, #99	; 0x63
 800210e:	d806      	bhi.n	800211e <choice_direction_intensity+0x62>
		servoSetPositionLeft(0);
 8002110:	2000      	movs	r0, #0
 8002112:	f7ff ff6b 	bl	8001fec <servoSetPositionLeft>
		servoSetPositionRight(2);
 8002116:	2002      	movs	r0, #2
 8002118:	f7ff ff9c 	bl	8002054 <servoSetPositionRight>
}
 800211c:	e021      	b.n	8002162 <choice_direction_intensity+0xa6>
	else if (delta_teta>360-teta_high){
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002124:	d906      	bls.n	8002134 <choice_direction_intensity+0x78>
		servoSetPositionLeft(2);
 8002126:	2002      	movs	r0, #2
 8002128:	f7ff ff60 	bl	8001fec <servoSetPositionLeft>
		servoSetPositionRight(0);
 800212c:	2000      	movs	r0, #0
 800212e:	f7ff ff91 	bl	8002054 <servoSetPositionRight>
}
 8002132:	e016      	b.n	8002162 <choice_direction_intensity+0xa6>
	else if (delta_teta<=180){
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2bb4      	cmp	r3, #180	; 0xb4
 8002138:	d806      	bhi.n	8002148 <choice_direction_intensity+0x8c>
		servoSetPositionLeft(0);
 800213a:	2000      	movs	r0, #0
 800213c:	f7ff ff56 	bl	8001fec <servoSetPositionLeft>
		servoSetPositionRight(3);
 8002140:	2003      	movs	r0, #3
 8002142:	f7ff ff87 	bl	8002054 <servoSetPositionRight>
}
 8002146:	e00c      	b.n	8002162 <choice_direction_intensity+0xa6>
	else if (delta_teta>180){
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2bb4      	cmp	r3, #180	; 0xb4
 800214c:	d906      	bls.n	800215c <choice_direction_intensity+0xa0>
		servoSetPositionLeft(3);
 800214e:	2003      	movs	r0, #3
 8002150:	f7ff ff4c 	bl	8001fec <servoSetPositionLeft>
		servoSetPositionRight(0);
 8002154:	2000      	movs	r0, #0
 8002156:	f7ff ff7d 	bl	8002054 <servoSetPositionRight>
}
 800215a:	e002      	b.n	8002162 <choice_direction_intensity+0xa6>
		printf("cas non traité \r\n");
 800215c:	4803      	ldr	r0, [pc, #12]	; (800216c <choice_direction_intensity+0xb0>)
 800215e:	f006 f829 	bl	80081b4 <puts>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	0800c15c 	.word	0x0800c15c

08002170 <declenchement_structure_gonflable>:


/********** fonctions MISSION SECONDAIRE ***********/


void declenchement_structure_gonflable(){
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0

	  int x;
	  TIM4->CCR1 = 1000;
 8002176:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <declenchement_structure_gonflable+0x40>)
 8002178:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800217c:	635a      	str	r2, [r3, #52]	; 0x34

	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800217e:	2100      	movs	r1, #0
 8002180:	480c      	ldr	r0, [pc, #48]	; (80021b4 <declenchement_structure_gonflable+0x44>)
 8002182:	f003 fba9 	bl	80058d8 <HAL_TIM_PWM_Start>

	  for(x=1000;x<2500;x=x+1){
 8002186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	e006      	b.n	800219c <declenchement_structure_gonflable+0x2c>
	  			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, x);
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <declenchement_structure_gonflable+0x48>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	635a      	str	r2, [r3, #52]	; 0x34
	  for(x=1000;x<2500;x=x+1){
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3301      	adds	r3, #1
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80021a2:	4293      	cmp	r3, r2
 80021a4:	ddf3      	ble.n	800218e <declenchement_structure_gonflable+0x1e>

	  		  }

}
 80021a6:	bf00      	nop
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40000800 	.word	0x40000800
 80021b4:	2000081c 	.word	0x2000081c
 80021b8:	200007d4 	.word	0x200007d4

080021bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <HAL_MspInit+0x4c>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	4a0f      	ldr	r2, [pc, #60]	; (8002208 <HAL_MspInit+0x4c>)
 80021cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d0:	6453      	str	r3, [r2, #68]	; 0x44
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <HAL_MspInit+0x4c>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	603b      	str	r3, [r7, #0]
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_MspInit+0x4c>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a08      	ldr	r2, [pc, #32]	; (8002208 <HAL_MspInit+0x4c>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_MspInit+0x4c>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021fa:	2007      	movs	r0, #7
 80021fc:	f000 fdc2 	bl	8002d84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40023800 	.word	0x40023800

0800220c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <NMI_Handler+0x4>

08002212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002216:	e7fe      	b.n	8002216 <HardFault_Handler+0x4>

08002218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800221c:	e7fe      	b.n	800221c <MemManage_Handler+0x4>

0800221e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002222:	e7fe      	b.n	8002222 <BusFault_Handler+0x4>

08002224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <UsageFault_Handler+0x4>

0800222a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002258:	f000 fc80 	bl	8002b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}

08002260 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b0b1      	sub	sp, #196	; 0xc4
 8002264:	af30      	add	r7, sp, #192	; 0xc0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002266:	4814      	ldr	r0, [pc, #80]	; (80022b8 <TIM3_IRQHandler+0x58>)
 8002268:	f003 fbe6 	bl	8005a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /*************** Calcul du delta theta ***************/

  pDataCansat.eCompass.Delta_theta = Delta_theta_calculation(pDataCansat);
 800226c:	4c13      	ldr	r4, [pc, #76]	; (80022bc <TIM3_IRQHandler+0x5c>)
 800226e:	4668      	mov	r0, sp
 8002270:	f104 0310 	add.w	r3, r4, #16
 8002274:	22c0      	movs	r2, #192	; 0xc0
 8002276:	4619      	mov	r1, r3
 8002278:	f005 fa96 	bl	80077a8 <memcpy>
 800227c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002280:	f7ff f970 	bl	8001564 <Delta_theta_calculation>
 8002284:	eeb0 7a40 	vmov.f32	s14, s0
 8002288:	eef0 7a60 	vmov.f32	s15, s1
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <TIM3_IRQHandler+0x5c>)
 800228e:	ed83 7b32 	vstr	d7, [r3, #200]	; 0xc8

  /*************** Mise en marche des servos pour corriger la direction **************/

  choice_direction_intensity(pDataCansat.eCompass.Delta_theta);
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <TIM3_IRQHandler+0x5c>)
 8002294:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8002298:	4610      	mov	r0, r2
 800229a:	4619      	mov	r1, r3
 800229c:	f7fe fc8c 	bl	8000bb8 <__aeabi_d2uiz>
 80022a0:	4603      	mov	r3, r0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff ff0a 	bl	80020bc <choice_direction_intensity>

  /*************** clignottement LED pour verif ****************/

  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80022a8:	2120      	movs	r1, #32
 80022aa:	4805      	ldr	r0, [pc, #20]	; (80022c0 <TIM3_IRQHandler+0x60>)
 80022ac:	f000 fff3 	bl	8003296 <HAL_GPIO_TogglePin>

  /* USER CODE END TIM3_IRQn 1 */
}
 80022b0:	bf00      	nop
 80022b2:	3704      	adds	r7, #4
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd90      	pop	{r4, r7, pc}
 80022b8:	200007d4 	.word	0x200007d4
 80022bc:	20000250 	.word	0x20000250
 80022c0:	40020000 	.word	0x40020000

080022c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <USART1_IRQHandler+0x10>)
 80022ca:	f004 fad7 	bl	800687c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000864 	.word	0x20000864

080022d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
	return 1;
 80022dc:	2301      	movs	r3, #1
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_kill>:

int _kill(int pid, int sig)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022f2:	f005 fa2f 	bl	8007754 <__errno>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2216      	movs	r2, #22
 80022fa:	601a      	str	r2, [r3, #0]
	return -1;
 80022fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <_exit>:

void _exit (int status)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002310:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ffe7 	bl	80022e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800231a:	e7fe      	b.n	800231a <_exit+0x12>

0800231c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	e00a      	b.n	8002344 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800232e:	f3af 8000 	nop.w
 8002332:	4601      	mov	r1, r0
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	60ba      	str	r2, [r7, #8]
 800233a:	b2ca      	uxtb	r2, r1
 800233c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	3301      	adds	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	dbf0      	blt.n	800232e <_read+0x12>
	}

return len;
 800234c:	687b      	ldr	r3, [r7, #4]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	e009      	b.n	800237c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	60ba      	str	r2, [r7, #8]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fa35 	bl	80017e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	3301      	adds	r3, #1
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	dbf1      	blt.n	8002368 <_write+0x12>
	}
	return len;
 8002384:	687b      	ldr	r3, [r7, #4]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <_close>:

int _close(int file)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
	return -1;
 8002396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023b6:	605a      	str	r2, [r3, #4]
	return 0;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <_isatty>:

int _isatty(int file)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
	return 1;
 80023ce:	2301      	movs	r3, #1
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
	return 0;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002400:	4a14      	ldr	r2, [pc, #80]	; (8002454 <_sbrk+0x5c>)
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <_sbrk+0x60>)
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800240c:	4b13      	ldr	r3, [pc, #76]	; (800245c <_sbrk+0x64>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <_sbrk+0x64>)
 8002416:	4a12      	ldr	r2, [pc, #72]	; (8002460 <_sbrk+0x68>)
 8002418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800241a:	4b10      	ldr	r3, [pc, #64]	; (800245c <_sbrk+0x64>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	429a      	cmp	r2, r3
 8002426:	d207      	bcs.n	8002438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002428:	f005 f994 	bl	8007754 <__errno>
 800242c:	4603      	mov	r3, r0
 800242e:	220c      	movs	r2, #12
 8002430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002436:	e009      	b.n	800244c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <_sbrk+0x64>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <_sbrk+0x64>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	4a05      	ldr	r2, [pc, #20]	; (800245c <_sbrk+0x64>)
 8002448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800244a:	68fb      	ldr	r3, [r7, #12]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20020000 	.word	0x20020000
 8002458:	00000400 	.word	0x00000400
 800245c:	20000788 	.word	0x20000788
 8002460:	20000900 	.word	0x20000900

08002464 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <SystemInit+0x20>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	4a05      	ldr	r2, [pc, #20]	; (8002484 <SystemInit+0x20>)
 8002470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08e      	sub	sp, #56	; 0x38
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800248e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249c:	f107 0320 	add.w	r3, r7, #32
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024a6:	1d3b      	adds	r3, r7, #4
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
 80024b4:	615a      	str	r2, [r3, #20]
 80024b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024b8:	4b32      	ldr	r3, [pc, #200]	; (8002584 <MX_TIM2_Init+0xfc>)
 80024ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80024c0:	4b30      	ldr	r3, [pc, #192]	; (8002584 <MX_TIM2_Init+0xfc>)
 80024c2:	2253      	movs	r2, #83	; 0x53
 80024c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c6:	4b2f      	ldr	r3, [pc, #188]	; (8002584 <MX_TIM2_Init+0xfc>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80024cc:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <MX_TIM2_Init+0xfc>)
 80024ce:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80024d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d4:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <MX_TIM2_Init+0xfc>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024da:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <MX_TIM2_Init+0xfc>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024e0:	4828      	ldr	r0, [pc, #160]	; (8002584 <MX_TIM2_Init+0xfc>)
 80024e2:	f003 f8ed 	bl	80056c0 <HAL_TIM_Base_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80024ec:	f7ff fd58 	bl	8001fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024fa:	4619      	mov	r1, r3
 80024fc:	4821      	ldr	r0, [pc, #132]	; (8002584 <MX_TIM2_Init+0xfc>)
 80024fe:	f003 fc65 	bl	8005dcc <HAL_TIM_ConfigClockSource>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002508:	f7ff fd4a 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800250c:	481d      	ldr	r0, [pc, #116]	; (8002584 <MX_TIM2_Init+0xfc>)
 800250e:	f003 f989 	bl	8005824 <HAL_TIM_PWM_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002518:	f7ff fd42 	bl	8001fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800251c:	2300      	movs	r3, #0
 800251e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002520:	2300      	movs	r3, #0
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002524:	f107 0320 	add.w	r3, r7, #32
 8002528:	4619      	mov	r1, r3
 800252a:	4816      	ldr	r0, [pc, #88]	; (8002584 <MX_TIM2_Init+0xfc>)
 800252c:	f004 f814 	bl	8006558 <HAL_TIMEx_MasterConfigSynchronization>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002536:	f7ff fd33 	bl	8001fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800253a:	2360      	movs	r3, #96	; 0x60
 800253c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	2200      	movs	r2, #0
 800254e:	4619      	mov	r1, r3
 8002550:	480c      	ldr	r0, [pc, #48]	; (8002584 <MX_TIM2_Init+0xfc>)
 8002552:	f003 fb79 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800255c:	f7ff fd20 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	2204      	movs	r2, #4
 8002564:	4619      	mov	r1, r3
 8002566:	4807      	ldr	r0, [pc, #28]	; (8002584 <MX_TIM2_Init+0xfc>)
 8002568:	f003 fb6e 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002572:	f7ff fd15 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002576:	4803      	ldr	r0, [pc, #12]	; (8002584 <MX_TIM2_Init+0xfc>)
 8002578:	f000 f91c 	bl	80027b4 <HAL_TIM_MspPostInit>

}
 800257c:	bf00      	nop
 800257e:	3738      	adds	r7, #56	; 0x38
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	2000078c 	.word	0x2000078c

08002588 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800258e:	f107 0308 	add.w	r3, r7, #8
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800259c:	463b      	mov	r3, r7
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025a4:	4b1d      	ldr	r3, [pc, #116]	; (800261c <MX_TIM3_Init+0x94>)
 80025a6:	4a1e      	ldr	r2, [pc, #120]	; (8002620 <MX_TIM3_Init+0x98>)
 80025a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1999;
 80025aa:	4b1c      	ldr	r3, [pc, #112]	; (800261c <MX_TIM3_Init+0x94>)
 80025ac:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80025b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b2:	4b1a      	ldr	r3, [pc, #104]	; (800261c <MX_TIM3_Init+0x94>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 41999;
 80025b8:	4b18      	ldr	r3, [pc, #96]	; (800261c <MX_TIM3_Init+0x94>)
 80025ba:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80025be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c0:	4b16      	ldr	r3, [pc, #88]	; (800261c <MX_TIM3_Init+0x94>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c6:	4b15      	ldr	r3, [pc, #84]	; (800261c <MX_TIM3_Init+0x94>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025cc:	4813      	ldr	r0, [pc, #76]	; (800261c <MX_TIM3_Init+0x94>)
 80025ce:	f003 f877 	bl	80056c0 <HAL_TIM_Base_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80025d8:	f7ff fce2 	bl	8001fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025e2:	f107 0308 	add.w	r3, r7, #8
 80025e6:	4619      	mov	r1, r3
 80025e8:	480c      	ldr	r0, [pc, #48]	; (800261c <MX_TIM3_Init+0x94>)
 80025ea:	f003 fbef 	bl	8005dcc <HAL_TIM_ConfigClockSource>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80025f4:	f7ff fcd4 	bl	8001fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f8:	2300      	movs	r3, #0
 80025fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002600:	463b      	mov	r3, r7
 8002602:	4619      	mov	r1, r3
 8002604:	4805      	ldr	r0, [pc, #20]	; (800261c <MX_TIM3_Init+0x94>)
 8002606:	f003 ffa7 	bl	8006558 <HAL_TIMEx_MasterConfigSynchronization>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002610:	f7ff fcc6 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002614:	bf00      	nop
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	200007d4 	.word	0x200007d4
 8002620:	40000400 	.word	0x40000400

08002624 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08e      	sub	sp, #56	; 0x38
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800262a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	609a      	str	r2, [r3, #8]
 8002636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002638:	f107 0320 	add.w	r3, r7, #32
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
 8002650:	615a      	str	r2, [r3, #20]
 8002652:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002654:	4b2c      	ldr	r3, [pc, #176]	; (8002708 <MX_TIM4_Init+0xe4>)
 8002656:	4a2d      	ldr	r2, [pc, #180]	; (800270c <MX_TIM4_Init+0xe8>)
 8002658:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800265a:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <MX_TIM4_Init+0xe4>)
 800265c:	2253      	movs	r2, #83	; 0x53
 800265e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002660:	4b29      	ldr	r3, [pc, #164]	; (8002708 <MX_TIM4_Init+0xe4>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8002666:	4b28      	ldr	r3, [pc, #160]	; (8002708 <MX_TIM4_Init+0xe4>)
 8002668:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800266c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800266e:	4b26      	ldr	r3, [pc, #152]	; (8002708 <MX_TIM4_Init+0xe4>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002674:	4b24      	ldr	r3, [pc, #144]	; (8002708 <MX_TIM4_Init+0xe4>)
 8002676:	2200      	movs	r2, #0
 8002678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800267a:	4823      	ldr	r0, [pc, #140]	; (8002708 <MX_TIM4_Init+0xe4>)
 800267c:	f003 f820 	bl	80056c0 <HAL_TIM_Base_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002686:	f7ff fc8b 	bl	8001fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800268a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002690:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002694:	4619      	mov	r1, r3
 8002696:	481c      	ldr	r0, [pc, #112]	; (8002708 <MX_TIM4_Init+0xe4>)
 8002698:	f003 fb98 	bl	8005dcc <HAL_TIM_ConfigClockSource>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80026a2:	f7ff fc7d 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80026a6:	4818      	ldr	r0, [pc, #96]	; (8002708 <MX_TIM4_Init+0xe4>)
 80026a8:	f003 f8bc 	bl	8005824 <HAL_TIM_PWM_Init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80026b2:	f7ff fc75 	bl	8001fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026be:	f107 0320 	add.w	r3, r7, #32
 80026c2:	4619      	mov	r1, r3
 80026c4:	4810      	ldr	r0, [pc, #64]	; (8002708 <MX_TIM4_Init+0xe4>)
 80026c6:	f003 ff47 	bl	8006558 <HAL_TIMEx_MasterConfigSynchronization>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80026d0:	f7ff fc66 	bl	8001fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026d4:	2360      	movs	r3, #96	; 0x60
 80026d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	2200      	movs	r2, #0
 80026e8:	4619      	mov	r1, r3
 80026ea:	4807      	ldr	r0, [pc, #28]	; (8002708 <MX_TIM4_Init+0xe4>)
 80026ec:	f003 faac 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80026f6:	f7ff fc53 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80026fa:	4803      	ldr	r0, [pc, #12]	; (8002708 <MX_TIM4_Init+0xe4>)
 80026fc:	f000 f85a 	bl	80027b4 <HAL_TIM_MspPostInit>

}
 8002700:	bf00      	nop
 8002702:	3738      	adds	r7, #56	; 0x38
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	2000081c 	.word	0x2000081c
 800270c:	40000800 	.word	0x40000800

08002710 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002720:	d10e      	bne.n	8002740 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_TIM_Base_MspInit+0x98>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	4a1f      	ldr	r2, [pc, #124]	; (80027a8 <HAL_TIM_Base_MspInit+0x98>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
 8002732:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <HAL_TIM_Base_MspInit+0x98>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800273e:	e02e      	b.n	800279e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a19      	ldr	r2, [pc, #100]	; (80027ac <HAL_TIM_Base_MspInit+0x9c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d116      	bne.n	8002778 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <HAL_TIM_Base_MspInit+0x98>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <HAL_TIM_Base_MspInit+0x98>)
 8002754:	f043 0302 	orr.w	r3, r3, #2
 8002758:	6413      	str	r3, [r2, #64]	; 0x40
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <HAL_TIM_Base_MspInit+0x98>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	2100      	movs	r1, #0
 800276a:	201d      	movs	r0, #29
 800276c:	f000 fb15 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002770:	201d      	movs	r0, #29
 8002772:	f000 fb2e 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
}
 8002776:	e012      	b.n	800279e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM4)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0c      	ldr	r2, [pc, #48]	; (80027b0 <HAL_TIM_Base_MspInit+0xa0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d10d      	bne.n	800279e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <HAL_TIM_Base_MspInit+0x98>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	4a07      	ldr	r2, [pc, #28]	; (80027a8 <HAL_TIM_Base_MspInit+0x98>)
 800278c:	f043 0304 	orr.w	r3, r3, #4
 8002790:	6413      	str	r3, [r2, #64]	; 0x40
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_TIM_Base_MspInit+0x98>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
}
 800279e:	bf00      	nop
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40000400 	.word	0x40000400
 80027b0:	40000800 	.word	0x40000800

080027b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d4:	d11e      	bne.n	8002814 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	4b22      	ldr	r3, [pc, #136]	; (8002864 <HAL_TIM_MspPostInit+0xb0>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a21      	ldr	r2, [pc, #132]	; (8002864 <HAL_TIM_MspPostInit+0xb0>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <HAL_TIM_MspPostInit+0xb0>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027f2:	2303      	movs	r3, #3
 80027f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fe:	2300      	movs	r3, #0
 8002800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002802:	2301      	movs	r3, #1
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002806:	f107 0314 	add.w	r3, r7, #20
 800280a:	4619      	mov	r1, r3
 800280c:	4816      	ldr	r0, [pc, #88]	; (8002868 <HAL_TIM_MspPostInit+0xb4>)
 800280e:	f000 fb8d 	bl	8002f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002812:	e022      	b.n	800285a <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM4)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a14      	ldr	r2, [pc, #80]	; (800286c <HAL_TIM_MspPostInit+0xb8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d11d      	bne.n	800285a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <HAL_TIM_MspPostInit+0xb0>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a0f      	ldr	r2, [pc, #60]	; (8002864 <HAL_TIM_MspPostInit+0xb0>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <HAL_TIM_MspPostInit+0xb0>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800283a:	2340      	movs	r3, #64	; 0x40
 800283c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800284a:	2302      	movs	r3, #2
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284e:	f107 0314 	add.w	r3, r7, #20
 8002852:	4619      	mov	r1, r3
 8002854:	4806      	ldr	r0, [pc, #24]	; (8002870 <HAL_TIM_MspPostInit+0xbc>)
 8002856:	f000 fb69 	bl	8002f2c <HAL_GPIO_Init>
}
 800285a:	bf00      	nop
 800285c:	3728      	adds	r7, #40	; 0x28
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	40020000 	.word	0x40020000
 800286c:	40000800 	.word	0x40000800
 8002870:	40020400 	.word	0x40020400

08002874 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002878:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 800287a:	4a12      	ldr	r2, [pc, #72]	; (80028c4 <MX_USART1_UART_Init+0x50>)
 800287c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 8002880:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002884:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002886:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002892:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 800289a:	220c      	movs	r2, #12
 800289c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028aa:	4805      	ldr	r0, [pc, #20]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 80028ac:	f003 fed6 	bl	800665c <HAL_UART_Init>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028b6:	f7ff fb73 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000864 	.word	0x20000864
 80028c4:	40011000 	.word	0x40011000

080028c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028ce:	4a12      	ldr	r2, [pc, #72]	; (8002918 <MX_USART2_UART_Init+0x50>)
 80028d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028ee:	220c      	movs	r2, #12
 80028f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028fe:	4805      	ldr	r0, [pc, #20]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 8002900:	f003 feac 	bl	800665c <HAL_UART_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800290a:	f7ff fb49 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	200008a8 	.word	0x200008a8
 8002918:	40004400 	.word	0x40004400

0800291c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08c      	sub	sp, #48	; 0x30
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 031c 	add.w	r3, r7, #28
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a45      	ldr	r2, [pc, #276]	; (8002a50 <HAL_UART_MspInit+0x134>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d153      	bne.n	80029e6 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	4b44      	ldr	r3, [pc, #272]	; (8002a54 <HAL_UART_MspInit+0x138>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	4a43      	ldr	r2, [pc, #268]	; (8002a54 <HAL_UART_MspInit+0x138>)
 8002948:	f043 0310 	orr.w	r3, r3, #16
 800294c:	6453      	str	r3, [r2, #68]	; 0x44
 800294e:	4b41      	ldr	r3, [pc, #260]	; (8002a54 <HAL_UART_MspInit+0x138>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	61bb      	str	r3, [r7, #24]
 8002958:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	4b3d      	ldr	r3, [pc, #244]	; (8002a54 <HAL_UART_MspInit+0x138>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a3c      	ldr	r2, [pc, #240]	; (8002a54 <HAL_UART_MspInit+0x138>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b3a      	ldr	r3, [pc, #232]	; (8002a54 <HAL_UART_MspInit+0x138>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	4b36      	ldr	r3, [pc, #216]	; (8002a54 <HAL_UART_MspInit+0x138>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a35      	ldr	r2, [pc, #212]	; (8002a54 <HAL_UART_MspInit+0x138>)
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b33      	ldr	r3, [pc, #204]	; (8002a54 <HAL_UART_MspInit+0x138>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002992:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	2302      	movs	r3, #2
 800299a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a0:	2303      	movs	r3, #3
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029a4:	2307      	movs	r3, #7
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a8:	f107 031c 	add.w	r3, r7, #28
 80029ac:	4619      	mov	r1, r3
 80029ae:	482a      	ldr	r0, [pc, #168]	; (8002a58 <HAL_UART_MspInit+0x13c>)
 80029b0:	f000 fabc 	bl	8002f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029b4:	2308      	movs	r3, #8
 80029b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c0:	2303      	movs	r3, #3
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029c4:	2307      	movs	r3, #7
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c8:	f107 031c 	add.w	r3, r7, #28
 80029cc:	4619      	mov	r1, r3
 80029ce:	4823      	ldr	r0, [pc, #140]	; (8002a5c <HAL_UART_MspInit+0x140>)
 80029d0:	f000 faac 	bl	8002f2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029d4:	2200      	movs	r2, #0
 80029d6:	2100      	movs	r1, #0
 80029d8:	2025      	movs	r0, #37	; 0x25
 80029da:	f000 f9de 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029de:	2025      	movs	r0, #37	; 0x25
 80029e0:	f000 f9f7 	bl	8002dd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80029e4:	e030      	b.n	8002a48 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART2)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a1d      	ldr	r2, [pc, #116]	; (8002a60 <HAL_UART_MspInit+0x144>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d12b      	bne.n	8002a48 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <HAL_UART_MspInit+0x138>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	4a16      	ldr	r2, [pc, #88]	; (8002a54 <HAL_UART_MspInit+0x138>)
 80029fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002a00:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <HAL_UART_MspInit+0x138>)
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <HAL_UART_MspInit+0x138>)
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	4a0f      	ldr	r2, [pc, #60]	; (8002a54 <HAL_UART_MspInit+0x138>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <HAL_UART_MspInit+0x138>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a28:	230c      	movs	r3, #12
 8002a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a34:	2303      	movs	r3, #3
 8002a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a38:	2307      	movs	r3, #7
 8002a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3c:	f107 031c 	add.w	r3, r7, #28
 8002a40:	4619      	mov	r1, r3
 8002a42:	4805      	ldr	r0, [pc, #20]	; (8002a58 <HAL_UART_MspInit+0x13c>)
 8002a44:	f000 fa72 	bl	8002f2c <HAL_GPIO_Init>
}
 8002a48:	bf00      	nop
 8002a4a:	3730      	adds	r7, #48	; 0x30
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40011000 	.word	0x40011000
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40020000 	.word	0x40020000
 8002a5c:	40020400 	.word	0x40020400
 8002a60:	40004400 	.word	0x40004400

08002a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a68:	480d      	ldr	r0, [pc, #52]	; (8002aa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a6a:	490e      	ldr	r1, [pc, #56]	; (8002aa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a6c:	4a0e      	ldr	r2, [pc, #56]	; (8002aa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a70:	e002      	b.n	8002a78 <LoopCopyDataInit>

08002a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a76:	3304      	adds	r3, #4

08002a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a7c:	d3f9      	bcc.n	8002a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a7e:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a80:	4c0b      	ldr	r4, [pc, #44]	; (8002ab0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a84:	e001      	b.n	8002a8a <LoopFillZerobss>

08002a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a88:	3204      	adds	r2, #4

08002a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a8c:	d3fb      	bcc.n	8002a86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a8e:	f7ff fce9 	bl	8002464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a92:	f004 fe65 	bl	8007760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a96:	f7fe fecf 	bl	8001838 <main>
  bx  lr    
 8002a9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aa4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002aa8:	0800c6a8 	.word	0x0800c6a8
  ldr r2, =_sbss
 8002aac:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002ab0:	20000900 	.word	0x20000900

08002ab4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ab4:	e7fe      	b.n	8002ab4 <ADC_IRQHandler>
	...

08002ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002abc:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <HAL_Init+0x40>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a0d      	ldr	r2, [pc, #52]	; (8002af8 <HAL_Init+0x40>)
 8002ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ac6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_Init+0x40>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <HAL_Init+0x40>)
 8002ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ad2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ad4:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <HAL_Init+0x40>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a07      	ldr	r2, [pc, #28]	; (8002af8 <HAL_Init+0x40>)
 8002ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae0:	2003      	movs	r0, #3
 8002ae2:	f000 f94f 	bl	8002d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f000 f808 	bl	8002afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aec:	f7ff fb66 	bl	80021bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023c00 	.word	0x40023c00

08002afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b04:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_InitTick+0x54>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_InitTick+0x58>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f967 	bl	8002dee <HAL_SYSTICK_Config>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e00e      	b.n	8002b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b0f      	cmp	r3, #15
 8002b2e:	d80a      	bhi.n	8002b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b30:	2200      	movs	r2, #0
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b38:	f000 f92f 	bl	8002d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b3c:	4a06      	ldr	r2, [pc, #24]	; (8002b58 <HAL_InitTick+0x5c>)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	e000      	b.n	8002b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20000000 	.word	0x20000000
 8002b54:	20000008 	.word	0x20000008
 8002b58:	20000004 	.word	0x20000004

08002b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_IncTick+0x20>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_IncTick+0x24>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <HAL_IncTick+0x24>)
 8002b6e:	6013      	str	r3, [r2, #0]
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	20000008 	.word	0x20000008
 8002b80:	200008ec 	.word	0x200008ec

08002b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return uwTick;
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <HAL_GetTick+0x14>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	200008ec 	.word	0x200008ec

08002b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ba4:	f7ff ffee 	bl	8002b84 <HAL_GetTick>
 8002ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bb4:	d005      	beq.n	8002bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <HAL_Delay+0x44>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bc2:	bf00      	nop
 8002bc4:	f7ff ffde 	bl	8002b84 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d8f7      	bhi.n	8002bc4 <HAL_Delay+0x28>
  {
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000008 	.word	0x20000008

08002be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c00:	4013      	ands	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c16:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <__NVIC_SetPriorityGrouping+0x44>)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	60d3      	str	r3, [r2, #12]
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c30:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <__NVIC_GetPriorityGrouping+0x18>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	f003 0307 	and.w	r3, r3, #7
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	db0b      	blt.n	8002c72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	f003 021f 	and.w	r2, r3, #31
 8002c60:	4907      	ldr	r1, [pc, #28]	; (8002c80 <__NVIC_EnableIRQ+0x38>)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	2001      	movs	r0, #1
 8002c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000e100 	.word	0xe000e100

08002c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	6039      	str	r1, [r7, #0]
 8002c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	db0a      	blt.n	8002cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	490c      	ldr	r1, [pc, #48]	; (8002cd0 <__NVIC_SetPriority+0x4c>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	0112      	lsls	r2, r2, #4
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cac:	e00a      	b.n	8002cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4908      	ldr	r1, [pc, #32]	; (8002cd4 <__NVIC_SetPriority+0x50>)
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	3b04      	subs	r3, #4
 8002cbc:	0112      	lsls	r2, r2, #4
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	761a      	strb	r2, [r3, #24]
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000e100 	.word	0xe000e100
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b089      	sub	sp, #36	; 0x24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f1c3 0307 	rsb	r3, r3, #7
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	bf28      	it	cs
 8002cf6:	2304      	movcs	r3, #4
 8002cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	2b06      	cmp	r3, #6
 8002d00:	d902      	bls.n	8002d08 <NVIC_EncodePriority+0x30>
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3b03      	subs	r3, #3
 8002d06:	e000      	b.n	8002d0a <NVIC_EncodePriority+0x32>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43da      	mvns	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	401a      	ands	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2a:	43d9      	mvns	r1, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d30:	4313      	orrs	r3, r2
         );
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3724      	adds	r7, #36	; 0x24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d50:	d301      	bcc.n	8002d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d52:	2301      	movs	r3, #1
 8002d54:	e00f      	b.n	8002d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d56:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <SysTick_Config+0x40>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d5e:	210f      	movs	r1, #15
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d64:	f7ff ff8e 	bl	8002c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <SysTick_Config+0x40>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d6e:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <SysTick_Config+0x40>)
 8002d70:	2207      	movs	r2, #7
 8002d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	e000e010 	.word	0xe000e010

08002d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff ff29 	bl	8002be4 <__NVIC_SetPriorityGrouping>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b086      	sub	sp, #24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	4603      	mov	r3, r0
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dac:	f7ff ff3e 	bl	8002c2c <__NVIC_GetPriorityGrouping>
 8002db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	6978      	ldr	r0, [r7, #20]
 8002db8:	f7ff ff8e 	bl	8002cd8 <NVIC_EncodePriority>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff5d 	bl	8002c84 <__NVIC_SetPriority>
}
 8002dca:	bf00      	nop
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	4603      	mov	r3, r0
 8002dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff31 	bl	8002c48 <__NVIC_EnableIRQ>
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff ffa2 	bl	8002d40 <SysTick_Config>
 8002dfc:	4603      	mov	r3, r0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e14:	f7ff feb6 	bl	8002b84 <HAL_GetTick>
 8002e18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d008      	beq.n	8002e38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e052      	b.n	8002ede <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0216 	bic.w	r2, r2, #22
 8002e46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <HAL_DMA_Abort+0x62>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0208 	bic.w	r2, r2, #8
 8002e76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e88:	e013      	b.n	8002eb2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e8a:	f7ff fe7b 	bl	8002b84 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b05      	cmp	r3, #5
 8002e96:	d90c      	bls.n	8002eb2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e015      	b.n	8002ede <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e4      	bne.n	8002e8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	223f      	movs	r2, #63	; 0x3f
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d004      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e00c      	b.n	8002f1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2205      	movs	r2, #5
 8002f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	; 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
 8002f46:	e159      	b.n	80031fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f48:	2201      	movs	r2, #1
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	f040 8148 	bne.w	80031f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d005      	beq.n	8002f7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d130      	bne.n	8002fe0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	2203      	movs	r2, #3
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 0201 	and.w	r2, r3, #1
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d017      	beq.n	800301c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d123      	bne.n	8003070 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	08da      	lsrs	r2, r3, #3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3208      	adds	r2, #8
 8003030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	220f      	movs	r2, #15
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	08da      	lsrs	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3208      	adds	r2, #8
 800306a:	69b9      	ldr	r1, [r7, #24]
 800306c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	2203      	movs	r2, #3
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0203 	and.w	r2, r3, #3
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80a2 	beq.w	80031f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	4b57      	ldr	r3, [pc, #348]	; (8003214 <HAL_GPIO_Init+0x2e8>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	4a56      	ldr	r2, [pc, #344]	; (8003214 <HAL_GPIO_Init+0x2e8>)
 80030bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c0:	6453      	str	r3, [r2, #68]	; 0x44
 80030c2:	4b54      	ldr	r3, [pc, #336]	; (8003214 <HAL_GPIO_Init+0x2e8>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ce:	4a52      	ldr	r2, [pc, #328]	; (8003218 <HAL_GPIO_Init+0x2ec>)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	3302      	adds	r3, #2
 80030d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	220f      	movs	r2, #15
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a49      	ldr	r2, [pc, #292]	; (800321c <HAL_GPIO_Init+0x2f0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d019      	beq.n	800312e <HAL_GPIO_Init+0x202>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a48      	ldr	r2, [pc, #288]	; (8003220 <HAL_GPIO_Init+0x2f4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d013      	beq.n	800312a <HAL_GPIO_Init+0x1fe>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a47      	ldr	r2, [pc, #284]	; (8003224 <HAL_GPIO_Init+0x2f8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00d      	beq.n	8003126 <HAL_GPIO_Init+0x1fa>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a46      	ldr	r2, [pc, #280]	; (8003228 <HAL_GPIO_Init+0x2fc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <HAL_GPIO_Init+0x1f6>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a45      	ldr	r2, [pc, #276]	; (800322c <HAL_GPIO_Init+0x300>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <HAL_GPIO_Init+0x1f2>
 800311a:	2304      	movs	r3, #4
 800311c:	e008      	b.n	8003130 <HAL_GPIO_Init+0x204>
 800311e:	2307      	movs	r3, #7
 8003120:	e006      	b.n	8003130 <HAL_GPIO_Init+0x204>
 8003122:	2303      	movs	r3, #3
 8003124:	e004      	b.n	8003130 <HAL_GPIO_Init+0x204>
 8003126:	2302      	movs	r3, #2
 8003128:	e002      	b.n	8003130 <HAL_GPIO_Init+0x204>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <HAL_GPIO_Init+0x204>
 800312e:	2300      	movs	r3, #0
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	f002 0203 	and.w	r2, r2, #3
 8003136:	0092      	lsls	r2, r2, #2
 8003138:	4093      	lsls	r3, r2
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4313      	orrs	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003140:	4935      	ldr	r1, [pc, #212]	; (8003218 <HAL_GPIO_Init+0x2ec>)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	089b      	lsrs	r3, r3, #2
 8003146:	3302      	adds	r3, #2
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800314e:	4b38      	ldr	r3, [pc, #224]	; (8003230 <HAL_GPIO_Init+0x304>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	43db      	mvns	r3, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4013      	ands	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003172:	4a2f      	ldr	r2, [pc, #188]	; (8003230 <HAL_GPIO_Init+0x304>)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003178:	4b2d      	ldr	r3, [pc, #180]	; (8003230 <HAL_GPIO_Init+0x304>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800319c:	4a24      	ldr	r2, [pc, #144]	; (8003230 <HAL_GPIO_Init+0x304>)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031a2:	4b23      	ldr	r3, [pc, #140]	; (8003230 <HAL_GPIO_Init+0x304>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031c6:	4a1a      	ldr	r2, [pc, #104]	; (8003230 <HAL_GPIO_Init+0x304>)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031cc:	4b18      	ldr	r3, [pc, #96]	; (8003230 <HAL_GPIO_Init+0x304>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031f0:	4a0f      	ldr	r2, [pc, #60]	; (8003230 <HAL_GPIO_Init+0x304>)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3301      	adds	r3, #1
 80031fa:	61fb      	str	r3, [r7, #28]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	2b0f      	cmp	r3, #15
 8003200:	f67f aea2 	bls.w	8002f48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	3724      	adds	r7, #36	; 0x24
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	40013800 	.word	0x40013800
 800321c:	40020000 	.word	0x40020000
 8003220:	40020400 	.word	0x40020400
 8003224:	40020800 	.word	0x40020800
 8003228:	40020c00 	.word	0x40020c00
 800322c:	40021000 	.word	0x40021000
 8003230:	40013c00 	.word	0x40013c00

08003234 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	887b      	ldrh	r3, [r7, #2]
 8003246:	4013      	ands	r3, r2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800324c:	2301      	movs	r3, #1
 800324e:	73fb      	strb	r3, [r7, #15]
 8003250:	e001      	b.n	8003256 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003252:	2300      	movs	r3, #0
 8003254:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003256:	7bfb      	ldrb	r3, [r7, #15]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
 8003270:	4613      	mov	r3, r2
 8003272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003274:	787b      	ldrb	r3, [r7, #1]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003280:	e003      	b.n	800328a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003282:	887b      	ldrh	r3, [r7, #2]
 8003284:	041a      	lsls	r2, r3, #16
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	619a      	str	r2, [r3, #24]
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003296:	b480      	push	{r7}
 8003298:	b085      	sub	sp, #20
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	460b      	mov	r3, r1
 80032a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032a8:	887a      	ldrh	r2, [r7, #2]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4013      	ands	r3, r2
 80032ae:	041a      	lsls	r2, r3, #16
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	43d9      	mvns	r1, r3
 80032b4:	887b      	ldrh	r3, [r7, #2]
 80032b6:	400b      	ands	r3, r1
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	619a      	str	r2, [r3, #24]
}
 80032be:	bf00      	nop
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e12b      	b.n	8003536 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7fe fa2c 	bl	8001750 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2224      	movs	r2, #36	; 0x24
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800331e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800332e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003330:	f002 f99e 	bl	8005670 <HAL_RCC_GetPCLK1Freq>
 8003334:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4a81      	ldr	r2, [pc, #516]	; (8003540 <HAL_I2C_Init+0x274>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d807      	bhi.n	8003350 <HAL_I2C_Init+0x84>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4a80      	ldr	r2, [pc, #512]	; (8003544 <HAL_I2C_Init+0x278>)
 8003344:	4293      	cmp	r3, r2
 8003346:	bf94      	ite	ls
 8003348:	2301      	movls	r3, #1
 800334a:	2300      	movhi	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	e006      	b.n	800335e <HAL_I2C_Init+0x92>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4a7d      	ldr	r2, [pc, #500]	; (8003548 <HAL_I2C_Init+0x27c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	bf94      	ite	ls
 8003358:	2301      	movls	r3, #1
 800335a:	2300      	movhi	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e0e7      	b.n	8003536 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4a78      	ldr	r2, [pc, #480]	; (800354c <HAL_I2C_Init+0x280>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	0c9b      	lsrs	r3, r3, #18
 8003370:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	4a6a      	ldr	r2, [pc, #424]	; (8003540 <HAL_I2C_Init+0x274>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d802      	bhi.n	80033a0 <HAL_I2C_Init+0xd4>
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	3301      	adds	r3, #1
 800339e:	e009      	b.n	80033b4 <HAL_I2C_Init+0xe8>
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033a6:	fb02 f303 	mul.w	r3, r2, r3
 80033aa:	4a69      	ldr	r2, [pc, #420]	; (8003550 <HAL_I2C_Init+0x284>)
 80033ac:	fba2 2303 	umull	r2, r3, r2, r3
 80033b0:	099b      	lsrs	r3, r3, #6
 80033b2:	3301      	adds	r3, #1
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	495c      	ldr	r1, [pc, #368]	; (8003540 <HAL_I2C_Init+0x274>)
 80033d0:	428b      	cmp	r3, r1
 80033d2:	d819      	bhi.n	8003408 <HAL_I2C_Init+0x13c>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1e59      	subs	r1, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	fbb1 f3f3 	udiv	r3, r1, r3
 80033e2:	1c59      	adds	r1, r3, #1
 80033e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033e8:	400b      	ands	r3, r1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <HAL_I2C_Init+0x138>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1e59      	subs	r1, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033fc:	3301      	adds	r3, #1
 80033fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003402:	e051      	b.n	80034a8 <HAL_I2C_Init+0x1dc>
 8003404:	2304      	movs	r3, #4
 8003406:	e04f      	b.n	80034a8 <HAL_I2C_Init+0x1dc>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d111      	bne.n	8003434 <HAL_I2C_Init+0x168>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1e58      	subs	r0, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6859      	ldr	r1, [r3, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	440b      	add	r3, r1
 800341e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003422:	3301      	adds	r3, #1
 8003424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003428:	2b00      	cmp	r3, #0
 800342a:	bf0c      	ite	eq
 800342c:	2301      	moveq	r3, #1
 800342e:	2300      	movne	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	e012      	b.n	800345a <HAL_I2C_Init+0x18e>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	1e58      	subs	r0, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	0099      	lsls	r1, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	fbb0 f3f3 	udiv	r3, r0, r3
 800344a:	3301      	adds	r3, #1
 800344c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003450:	2b00      	cmp	r3, #0
 8003452:	bf0c      	ite	eq
 8003454:	2301      	moveq	r3, #1
 8003456:	2300      	movne	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_I2C_Init+0x196>
 800345e:	2301      	movs	r3, #1
 8003460:	e022      	b.n	80034a8 <HAL_I2C_Init+0x1dc>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10e      	bne.n	8003488 <HAL_I2C_Init+0x1bc>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1e58      	subs	r0, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6859      	ldr	r1, [r3, #4]
 8003472:	460b      	mov	r3, r1
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	440b      	add	r3, r1
 8003478:	fbb0 f3f3 	udiv	r3, r0, r3
 800347c:	3301      	adds	r3, #1
 800347e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003486:	e00f      	b.n	80034a8 <HAL_I2C_Init+0x1dc>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1e58      	subs	r0, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	0099      	lsls	r1, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	fbb0 f3f3 	udiv	r3, r0, r3
 800349e:	3301      	adds	r3, #1
 80034a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	6809      	ldr	r1, [r1, #0]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6911      	ldr	r1, [r2, #16]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	68d2      	ldr	r2, [r2, #12]
 80034e2:	4311      	orrs	r1, r2
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	430b      	orrs	r3, r1
 80034ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	000186a0 	.word	0x000186a0
 8003544:	001e847f 	.word	0x001e847f
 8003548:	003d08ff 	.word	0x003d08ff
 800354c:	431bde83 	.word	0x431bde83
 8003550:	10624dd3 	.word	0x10624dd3

08003554 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af02      	add	r7, sp, #8
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	607a      	str	r2, [r7, #4]
 800355e:	461a      	mov	r2, r3
 8003560:	460b      	mov	r3, r1
 8003562:	817b      	strh	r3, [r7, #10]
 8003564:	4613      	mov	r3, r2
 8003566:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003568:	f7ff fb0c 	bl	8002b84 <HAL_GetTick>
 800356c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b20      	cmp	r3, #32
 8003578:	f040 80e0 	bne.w	800373c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	2319      	movs	r3, #25
 8003582:	2201      	movs	r2, #1
 8003584:	4970      	ldr	r1, [pc, #448]	; (8003748 <HAL_I2C_Master_Transmit+0x1f4>)
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f001 fa24 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003592:	2302      	movs	r3, #2
 8003594:	e0d3      	b.n	800373e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_I2C_Master_Transmit+0x50>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e0cc      	b.n	800373e <HAL_I2C_Master_Transmit+0x1ea>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d007      	beq.n	80035ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0201 	orr.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2221      	movs	r2, #33	; 0x21
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2210      	movs	r2, #16
 80035e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	893a      	ldrh	r2, [r7, #8]
 80035fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4a50      	ldr	r2, [pc, #320]	; (800374c <HAL_I2C_Master_Transmit+0x1f8>)
 800360a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800360c:	8979      	ldrh	r1, [r7, #10]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	6a3a      	ldr	r2, [r7, #32]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 ff10 	bl	8004438 <I2C_MasterRequestWrite>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e08d      	b.n	800373e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003622:	2300      	movs	r3, #0
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003638:	e066      	b.n	8003708 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	6a39      	ldr	r1, [r7, #32]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f001 fa9e 	bl	8004b80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00d      	beq.n	8003666 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	2b04      	cmp	r3, #4
 8003650:	d107      	bne.n	8003662 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003660:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e06b      	b.n	800373e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	781a      	ldrb	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d11b      	bne.n	80036dc <HAL_I2C_Master_Transmit+0x188>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d017      	beq.n	80036dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	781a      	ldrb	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	6a39      	ldr	r1, [r7, #32]
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f001 fa8e 	bl	8004c02 <I2C_WaitOnBTFFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00d      	beq.n	8003708 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d107      	bne.n	8003704 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003702:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e01a      	b.n	800373e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	d194      	bne.n	800363a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800371e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	e000      	b.n	800373e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800373c:	2302      	movs	r3, #2
  }
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	00100002 	.word	0x00100002
 800374c:	ffff0000 	.word	0xffff0000

08003750 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08c      	sub	sp, #48	; 0x30
 8003754:	af02      	add	r7, sp, #8
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	461a      	mov	r2, r3
 800375c:	460b      	mov	r3, r1
 800375e:	817b      	strh	r3, [r7, #10]
 8003760:	4613      	mov	r3, r2
 8003762:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003764:	f7ff fa0e 	bl	8002b84 <HAL_GetTick>
 8003768:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b20      	cmp	r3, #32
 8003774:	f040 820b 	bne.w	8003b8e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	2319      	movs	r3, #25
 800377e:	2201      	movs	r2, #1
 8003780:	497c      	ldr	r1, [pc, #496]	; (8003974 <HAL_I2C_Master_Receive+0x224>)
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f001 f926 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800378e:	2302      	movs	r3, #2
 8003790:	e1fe      	b.n	8003b90 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_I2C_Master_Receive+0x50>
 800379c:	2302      	movs	r3, #2
 800379e:	e1f7      	b.n	8003b90 <HAL_I2C_Master_Receive+0x440>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d007      	beq.n	80037c6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0201 	orr.w	r2, r2, #1
 80037c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2222      	movs	r2, #34	; 0x22
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2210      	movs	r2, #16
 80037e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	893a      	ldrh	r2, [r7, #8]
 80037f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4a5c      	ldr	r2, [pc, #368]	; (8003978 <HAL_I2C_Master_Receive+0x228>)
 8003806:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003808:	8979      	ldrh	r1, [r7, #10]
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 fe94 	bl	800453c <I2C_MasterRequestRead>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e1b8      	b.n	8003b90 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003822:	2b00      	cmp	r3, #0
 8003824:	d113      	bne.n	800384e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003826:	2300      	movs	r3, #0
 8003828:	623b      	str	r3, [r7, #32]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	623b      	str	r3, [r7, #32]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	623b      	str	r3, [r7, #32]
 800383a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	e18c      	b.n	8003b68 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003852:	2b01      	cmp	r3, #1
 8003854:	d11b      	bne.n	800388e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003864:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	61fb      	str	r3, [r7, #28]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e16c      	b.n	8003b68 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003892:	2b02      	cmp	r3, #2
 8003894:	d11b      	bne.n	80038ce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b6:	2300      	movs	r3, #0
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	e14c      	b.n	8003b68 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038f4:	e138      	b.n	8003b68 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	f200 80f1 	bhi.w	8003ae2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003904:	2b01      	cmp	r3, #1
 8003906:	d123      	bne.n	8003950 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f001 f9b9 	bl	8004c84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e139      	b.n	8003b90 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800394e:	e10b      	b.n	8003b68 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003954:	2b02      	cmp	r3, #2
 8003956:	d14e      	bne.n	80039f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395e:	2200      	movs	r2, #0
 8003960:	4906      	ldr	r1, [pc, #24]	; (800397c <HAL_I2C_Master_Receive+0x22c>)
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f001 f836 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d008      	beq.n	8003980 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e10e      	b.n	8003b90 <HAL_I2C_Master_Receive+0x440>
 8003972:	bf00      	nop
 8003974:	00100002 	.word	0x00100002
 8003978:	ffff0000 	.word	0xffff0000
 800397c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039f4:	e0b8      	b.n	8003b68 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	2200      	movs	r2, #0
 80039fe:	4966      	ldr	r1, [pc, #408]	; (8003b98 <HAL_I2C_Master_Receive+0x448>)
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 ffe7 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0bf      	b.n	8003b90 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a58:	2200      	movs	r2, #0
 8003a5a:	494f      	ldr	r1, [pc, #316]	; (8003b98 <HAL_I2C_Master_Receive+0x448>)
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 ffb9 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e091      	b.n	8003b90 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ae0:	e042      	b.n	8003b68 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f001 f8cc 	bl	8004c84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e04c      	b.n	8003b90 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d118      	bne.n	8003b68 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f47f aec2 	bne.w	80038f6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e000      	b.n	8003b90 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b8e:	2302      	movs	r3, #2
  }
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3728      	adds	r7, #40	; 0x28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	00010004 	.word	0x00010004

08003b9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4603      	mov	r3, r0
 8003bac:	817b      	strh	r3, [r7, #10]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	813b      	strh	r3, [r7, #8]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bb6:	f7fe ffe5 	bl	8002b84 <HAL_GetTick>
 8003bba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b20      	cmp	r3, #32
 8003bc6:	f040 80d9 	bne.w	8003d7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	2319      	movs	r3, #25
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	496d      	ldr	r1, [pc, #436]	; (8003d88 <HAL_I2C_Mem_Write+0x1ec>)
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 fefd 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003be0:	2302      	movs	r3, #2
 8003be2:	e0cc      	b.n	8003d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_I2C_Mem_Write+0x56>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e0c5      	b.n	8003d7e <HAL_I2C_Mem_Write+0x1e2>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d007      	beq.n	8003c18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2221      	movs	r2, #33	; 0x21
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2240      	movs	r2, #64	; 0x40
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a3a      	ldr	r2, [r7, #32]
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4a4d      	ldr	r2, [pc, #308]	; (8003d8c <HAL_I2C_Mem_Write+0x1f0>)
 8003c58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c5a:	88f8      	ldrh	r0, [r7, #6]
 8003c5c:	893a      	ldrh	r2, [r7, #8]
 8003c5e:	8979      	ldrh	r1, [r7, #10]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	9301      	str	r3, [sp, #4]
 8003c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	4603      	mov	r3, r0
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fd34 	bl	80046d8 <I2C_RequestMemoryWrite>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d052      	beq.n	8003d1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e081      	b.n	8003d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 ff7e 	bl	8004b80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00d      	beq.n	8003ca6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d107      	bne.n	8003ca2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e06b      	b.n	8003d7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	781a      	ldrb	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d11b      	bne.n	8003d1c <HAL_I2C_Mem_Write+0x180>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d017      	beq.n	8003d1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1aa      	bne.n	8003c7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 ff6a 	bl	8004c02 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00d      	beq.n	8003d50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d107      	bne.n	8003d4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e016      	b.n	8003d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e000      	b.n	8003d7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d7c:	2302      	movs	r3, #2
  }
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	00100002 	.word	0x00100002
 8003d8c:	ffff0000 	.word	0xffff0000

08003d90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08c      	sub	sp, #48	; 0x30
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	4608      	mov	r0, r1
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4603      	mov	r3, r0
 8003da0:	817b      	strh	r3, [r7, #10]
 8003da2:	460b      	mov	r3, r1
 8003da4:	813b      	strh	r3, [r7, #8]
 8003da6:	4613      	mov	r3, r2
 8003da8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003daa:	f7fe feeb 	bl	8002b84 <HAL_GetTick>
 8003dae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	f040 8208 	bne.w	80041ce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	2319      	movs	r3, #25
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	497b      	ldr	r1, [pc, #492]	; (8003fb4 <HAL_I2C_Mem_Read+0x224>)
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 fe03 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e1fb      	b.n	80041d0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_I2C_Mem_Read+0x56>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e1f4      	b.n	80041d0 <HAL_I2C_Mem_Read+0x440>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d007      	beq.n	8003e0c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2222      	movs	r2, #34	; 0x22
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2240      	movs	r2, #64	; 0x40
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4a5b      	ldr	r2, [pc, #364]	; (8003fb8 <HAL_I2C_Mem_Read+0x228>)
 8003e4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e4e:	88f8      	ldrh	r0, [r7, #6]
 8003e50:	893a      	ldrh	r2, [r7, #8]
 8003e52:	8979      	ldrh	r1, [r7, #10]
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	9301      	str	r3, [sp, #4]
 8003e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 fcd0 	bl	8004804 <I2C_RequestMemoryRead>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e1b0      	b.n	80041d0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d113      	bne.n	8003e9e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e76:	2300      	movs	r3, #0
 8003e78:	623b      	str	r3, [r7, #32]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	623b      	str	r3, [r7, #32]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	623b      	str	r3, [r7, #32]
 8003e8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e184      	b.n	80041a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d11b      	bne.n	8003ede <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	e164      	b.n	80041a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d11b      	bne.n	8003f1e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f06:	2300      	movs	r3, #0
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	e144      	b.n	80041a8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f34:	e138      	b.n	80041a8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	f200 80f1 	bhi.w	8004122 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d123      	bne.n	8003f90 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 fe99 	bl	8004c84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e139      	b.n	80041d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f8e:	e10b      	b.n	80041a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d14e      	bne.n	8004036 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	4906      	ldr	r1, [pc, #24]	; (8003fbc <HAL_I2C_Mem_Read+0x22c>)
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 fd16 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d008      	beq.n	8003fc0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e10e      	b.n	80041d0 <HAL_I2C_Mem_Read+0x440>
 8003fb2:	bf00      	nop
 8003fb4:	00100002 	.word	0x00100002
 8003fb8:	ffff0000 	.word	0xffff0000
 8003fbc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401e:	3b01      	subs	r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402a:	b29b      	uxth	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004034:	e0b8      	b.n	80041a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	2200      	movs	r2, #0
 800403e:	4966      	ldr	r1, [pc, #408]	; (80041d8 <HAL_I2C_Mem_Read+0x448>)
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 fcc7 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0bf      	b.n	80041d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800405e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004098:	2200      	movs	r2, #0
 800409a:	494f      	ldr	r1, [pc, #316]	; (80041d8 <HAL_I2C_Mem_Read+0x448>)
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fc99 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e091      	b.n	80041d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691a      	ldr	r2, [r3, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004120:	e042      	b.n	80041a8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004124:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fdac 	bl	8004c84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e04c      	b.n	80041d0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b04      	cmp	r3, #4
 8004174:	d118      	bne.n	80041a8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f47f aec2 	bne.w	8003f36 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e000      	b.n	80041d0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80041ce:	2302      	movs	r3, #2
  }
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3728      	adds	r7, #40	; 0x28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	00010004 	.word	0x00010004

080041dc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08a      	sub	sp, #40	; 0x28
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	460b      	mov	r3, r1
 80041ea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80041ec:	f7fe fcca 	bl	8002b84 <HAL_GetTick>
 80041f0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b20      	cmp	r3, #32
 8004200:	f040 8111 	bne.w	8004426 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	2319      	movs	r3, #25
 800420a:	2201      	movs	r2, #1
 800420c:	4988      	ldr	r1, [pc, #544]	; (8004430 <HAL_I2C_IsDeviceReady+0x254>)
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 fbe0 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800421a:	2302      	movs	r3, #2
 800421c:	e104      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_I2C_IsDeviceReady+0x50>
 8004228:	2302      	movs	r3, #2
 800422a:	e0fd      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b01      	cmp	r3, #1
 8004240:	d007      	beq.n	8004252 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0201 	orr.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004260:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2224      	movs	r2, #36	; 0x24
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4a70      	ldr	r2, [pc, #448]	; (8004434 <HAL_I2C_IsDeviceReady+0x258>)
 8004274:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004284:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2200      	movs	r2, #0
 800428e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 fb9e 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00d      	beq.n	80042ba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ac:	d103      	bne.n	80042b6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e0b6      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042ba:	897b      	ldrh	r3, [r7, #10]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042c8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80042ca:	f7fe fc5b 	bl	8002b84 <HAL_GetTick>
 80042ce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b02      	cmp	r3, #2
 80042dc:	bf0c      	ite	eq
 80042de:	2301      	moveq	r3, #1
 80042e0:	2300      	movne	r3, #0
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f4:	bf0c      	ite	eq
 80042f6:	2301      	moveq	r3, #1
 80042f8:	2300      	movne	r3, #0
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80042fe:	e025      	b.n	800434c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004300:	f7fe fc40 	bl	8002b84 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d302      	bcc.n	8004316 <HAL_I2C_IsDeviceReady+0x13a>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d103      	bne.n	800431e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	22a0      	movs	r2, #160	; 0xa0
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b02      	cmp	r3, #2
 800432a:	bf0c      	ite	eq
 800432c:	2301      	moveq	r3, #1
 800432e:	2300      	movne	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800433e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004342:	bf0c      	ite	eq
 8004344:	2301      	moveq	r3, #1
 8004346:	2300      	movne	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2ba0      	cmp	r3, #160	; 0xa0
 8004356:	d005      	beq.n	8004364 <HAL_I2C_IsDeviceReady+0x188>
 8004358:	7dfb      	ldrb	r3, [r7, #23]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d102      	bne.n	8004364 <HAL_I2C_IsDeviceReady+0x188>
 800435e:	7dbb      	ldrb	r3, [r7, #22]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0cd      	beq.n	8004300 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b02      	cmp	r3, #2
 8004378:	d129      	bne.n	80043ce <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004388:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	2319      	movs	r3, #25
 80043a6:	2201      	movs	r2, #1
 80043a8:	4921      	ldr	r1, [pc, #132]	; (8004430 <HAL_I2C_IsDeviceReady+0x254>)
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 fb12 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e036      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e02c      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043dc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043e6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	2319      	movs	r3, #25
 80043ee:	2201      	movs	r2, #1
 80043f0:	490f      	ldr	r1, [pc, #60]	; (8004430 <HAL_I2C_IsDeviceReady+0x254>)
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 faee 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e012      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	3301      	adds	r3, #1
 8004406:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	429a      	cmp	r2, r3
 800440e:	f4ff af32 	bcc.w	8004276 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004426:	2302      	movs	r3, #2
  }
}
 8004428:	4618      	mov	r0, r3
 800442a:	3720      	adds	r7, #32
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	00100002 	.word	0x00100002
 8004434:	ffff0000 	.word	0xffff0000

08004438 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	607a      	str	r2, [r7, #4]
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	460b      	mov	r3, r1
 8004446:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b08      	cmp	r3, #8
 8004452:	d006      	beq.n	8004462 <I2C_MasterRequestWrite+0x2a>
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d003      	beq.n	8004462 <I2C_MasterRequestWrite+0x2a>
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004460:	d108      	bne.n	8004474 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	e00b      	b.n	800448c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004478:	2b12      	cmp	r3, #18
 800447a:	d107      	bne.n	800448c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800448a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 fa9b 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00d      	beq.n	80044c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b2:	d103      	bne.n	80044bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e035      	b.n	800452c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044c8:	d108      	bne.n	80044dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044ca:	897b      	ldrh	r3, [r7, #10]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044d8:	611a      	str	r2, [r3, #16]
 80044da:	e01b      	b.n	8004514 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044dc:	897b      	ldrh	r3, [r7, #10]
 80044de:	11db      	asrs	r3, r3, #7
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	f003 0306 	and.w	r3, r3, #6
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f063 030f 	orn	r3, r3, #15
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	490e      	ldr	r1, [pc, #56]	; (8004534 <I2C_MasterRequestWrite+0xfc>)
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 fac1 	bl	8004a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e010      	b.n	800452c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800450a:	897b      	ldrh	r3, [r7, #10]
 800450c:	b2da      	uxtb	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	4907      	ldr	r1, [pc, #28]	; (8004538 <I2C_MasterRequestWrite+0x100>)
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 fab1 	bl	8004a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	00010008 	.word	0x00010008
 8004538:	00010002 	.word	0x00010002

0800453c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	607a      	str	r2, [r7, #4]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	460b      	mov	r3, r1
 800454a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004560:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b08      	cmp	r3, #8
 8004566:	d006      	beq.n	8004576 <I2C_MasterRequestRead+0x3a>
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d003      	beq.n	8004576 <I2C_MasterRequestRead+0x3a>
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004574:	d108      	bne.n	8004588 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	e00b      	b.n	80045a0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	2b11      	cmp	r3, #17
 800458e:	d107      	bne.n	80045a0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800459e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fa11 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00d      	beq.n	80045d4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c6:	d103      	bne.n	80045d0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e079      	b.n	80046c8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045dc:	d108      	bne.n	80045f0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045de:	897b      	ldrh	r3, [r7, #10]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	611a      	str	r2, [r3, #16]
 80045ee:	e05f      	b.n	80046b0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045f0:	897b      	ldrh	r3, [r7, #10]
 80045f2:	11db      	asrs	r3, r3, #7
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	f003 0306 	and.w	r3, r3, #6
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	f063 030f 	orn	r3, r3, #15
 8004600:	b2da      	uxtb	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	4930      	ldr	r1, [pc, #192]	; (80046d0 <I2C_MasterRequestRead+0x194>)
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 fa37 	bl	8004a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e054      	b.n	80046c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800461e:	897b      	ldrh	r3, [r7, #10]
 8004620:	b2da      	uxtb	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	4929      	ldr	r1, [pc, #164]	; (80046d4 <I2C_MasterRequestRead+0x198>)
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 fa27 	bl	8004a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e044      	b.n	80046c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800463e:	2300      	movs	r3, #0
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	613b      	str	r3, [r7, #16]
 8004652:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004662:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 f9af 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00d      	beq.n	8004698 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800468a:	d103      	bne.n	8004694 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004692:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e017      	b.n	80046c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004698:	897b      	ldrh	r3, [r7, #10]
 800469a:	11db      	asrs	r3, r3, #7
 800469c:	b2db      	uxtb	r3, r3
 800469e:	f003 0306 	and.w	r3, r3, #6
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f063 030e 	orn	r3, r3, #14
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	4907      	ldr	r1, [pc, #28]	; (80046d4 <I2C_MasterRequestRead+0x198>)
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 f9e3 	bl	8004a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	00010008 	.word	0x00010008
 80046d4:	00010002 	.word	0x00010002

080046d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af02      	add	r7, sp, #8
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	4608      	mov	r0, r1
 80046e2:	4611      	mov	r1, r2
 80046e4:	461a      	mov	r2, r3
 80046e6:	4603      	mov	r3, r0
 80046e8:	817b      	strh	r3, [r7, #10]
 80046ea:	460b      	mov	r3, r1
 80046ec:	813b      	strh	r3, [r7, #8]
 80046ee:	4613      	mov	r3, r2
 80046f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004700:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	2200      	movs	r2, #0
 800470a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f960 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00d      	beq.n	8004736 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004728:	d103      	bne.n	8004732 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004730:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e05f      	b.n	80047f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004736:	897b      	ldrh	r3, [r7, #10]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	461a      	mov	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004744:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	6a3a      	ldr	r2, [r7, #32]
 800474a:	492d      	ldr	r1, [pc, #180]	; (8004800 <I2C_RequestMemoryWrite+0x128>)
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 f998 	bl	8004a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e04c      	b.n	80047f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004774:	6a39      	ldr	r1, [r7, #32]
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 fa02 	bl	8004b80 <I2C_WaitOnTXEFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00d      	beq.n	800479e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	2b04      	cmp	r3, #4
 8004788:	d107      	bne.n	800479a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004798:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e02b      	b.n	80047f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800479e:	88fb      	ldrh	r3, [r7, #6]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d105      	bne.n	80047b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047a4:	893b      	ldrh	r3, [r7, #8]
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	611a      	str	r2, [r3, #16]
 80047ae:	e021      	b.n	80047f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047b0:	893b      	ldrh	r3, [r7, #8]
 80047b2:	0a1b      	lsrs	r3, r3, #8
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c0:	6a39      	ldr	r1, [r7, #32]
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f9dc 	bl	8004b80 <I2C_WaitOnTXEFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00d      	beq.n	80047ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d107      	bne.n	80047e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e005      	b.n	80047f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047ea:	893b      	ldrh	r3, [r7, #8]
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	00010002 	.word	0x00010002

08004804 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af02      	add	r7, sp, #8
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	4608      	mov	r0, r1
 800480e:	4611      	mov	r1, r2
 8004810:	461a      	mov	r2, r3
 8004812:	4603      	mov	r3, r0
 8004814:	817b      	strh	r3, [r7, #10]
 8004816:	460b      	mov	r3, r1
 8004818:	813b      	strh	r3, [r7, #8]
 800481a:	4613      	mov	r3, r2
 800481c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800482c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800483c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	2200      	movs	r2, #0
 8004846:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 f8c2 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00d      	beq.n	8004872 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004864:	d103      	bne.n	800486e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800486c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e0aa      	b.n	80049c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004872:	897b      	ldrh	r3, [r7, #10]
 8004874:	b2db      	uxtb	r3, r3
 8004876:	461a      	mov	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004880:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	6a3a      	ldr	r2, [r7, #32]
 8004886:	4952      	ldr	r1, [pc, #328]	; (80049d0 <I2C_RequestMemoryRead+0x1cc>)
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f8fa 	bl	8004a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e097      	b.n	80049c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b0:	6a39      	ldr	r1, [r7, #32]
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 f964 	bl	8004b80 <I2C_WaitOnTXEFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00d      	beq.n	80048da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d107      	bne.n	80048d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e076      	b.n	80049c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048da:	88fb      	ldrh	r3, [r7, #6]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d105      	bne.n	80048ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048e0:	893b      	ldrh	r3, [r7, #8]
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	611a      	str	r2, [r3, #16]
 80048ea:	e021      	b.n	8004930 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048ec:	893b      	ldrh	r3, [r7, #8]
 80048ee:	0a1b      	lsrs	r3, r3, #8
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fc:	6a39      	ldr	r1, [r7, #32]
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f93e 	bl	8004b80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00d      	beq.n	8004926 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	2b04      	cmp	r3, #4
 8004910:	d107      	bne.n	8004922 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004920:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e050      	b.n	80049c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004926:	893b      	ldrh	r3, [r7, #8]
 8004928:	b2da      	uxtb	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004932:	6a39      	ldr	r1, [r7, #32]
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 f923 	bl	8004b80 <I2C_WaitOnTXEFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00d      	beq.n	800495c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	2b04      	cmp	r3, #4
 8004946:	d107      	bne.n	8004958 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004956:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e035      	b.n	80049c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800496a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	2200      	movs	r2, #0
 8004974:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f82b 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00d      	beq.n	80049a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004992:	d103      	bne.n	800499c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800499a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e013      	b.n	80049c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049a0:	897b      	ldrh	r3, [r7, #10]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	f043 0301 	orr.w	r3, r3, #1
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	6a3a      	ldr	r2, [r7, #32]
 80049b4:	4906      	ldr	r1, [pc, #24]	; (80049d0 <I2C_RequestMemoryRead+0x1cc>)
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f863 	bl	8004a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	00010002 	.word	0x00010002

080049d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	4613      	mov	r3, r2
 80049e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049e4:	e025      	b.n	8004a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ec:	d021      	beq.n	8004a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ee:	f7fe f8c9 	bl	8002b84 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d302      	bcc.n	8004a04 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d116      	bne.n	8004a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f043 0220 	orr.w	r2, r3, #32
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e023      	b.n	8004a7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	0c1b      	lsrs	r3, r3, #16
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d10d      	bne.n	8004a58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	43da      	mvns	r2, r3
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	4013      	ands	r3, r2
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bf0c      	ite	eq
 8004a4e:	2301      	moveq	r3, #1
 8004a50:	2300      	movne	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	461a      	mov	r2, r3
 8004a56:	e00c      	b.n	8004a72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	43da      	mvns	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4013      	ands	r3, r2
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	bf0c      	ite	eq
 8004a6a:	2301      	moveq	r3, #1
 8004a6c:	2300      	movne	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d0b6      	beq.n	80049e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	607a      	str	r2, [r7, #4]
 8004a8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a90:	e051      	b.n	8004b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa0:	d123      	bne.n	8004aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004aba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	f043 0204 	orr.w	r2, r3, #4
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e046      	b.n	8004b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004af0:	d021      	beq.n	8004b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af2:	f7fe f847 	bl	8002b84 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d302      	bcc.n	8004b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d116      	bne.n	8004b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f043 0220 	orr.w	r2, r3, #32
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e020      	b.n	8004b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	0c1b      	lsrs	r3, r3, #16
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d10c      	bne.n	8004b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	43da      	mvns	r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	bf14      	ite	ne
 8004b52:	2301      	movne	r3, #1
 8004b54:	2300      	moveq	r3, #0
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	e00b      	b.n	8004b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	43da      	mvns	r2, r3
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	4013      	ands	r3, r2
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	bf14      	ite	ne
 8004b6c:	2301      	movne	r3, #1
 8004b6e:	2300      	moveq	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d18d      	bne.n	8004a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b8c:	e02d      	b.n	8004bea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 f8ce 	bl	8004d30 <I2C_IsAcknowledgeFailed>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e02d      	b.n	8004bfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ba4:	d021      	beq.n	8004bea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba6:	f7fd ffed 	bl	8002b84 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d302      	bcc.n	8004bbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d116      	bne.n	8004bea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	f043 0220 	orr.w	r2, r3, #32
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e007      	b.n	8004bfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf4:	2b80      	cmp	r3, #128	; 0x80
 8004bf6:	d1ca      	bne.n	8004b8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c0e:	e02d      	b.n	8004c6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 f88d 	bl	8004d30 <I2C_IsAcknowledgeFailed>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e02d      	b.n	8004c7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c26:	d021      	beq.n	8004c6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c28:	f7fd ffac 	bl	8002b84 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d302      	bcc.n	8004c3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d116      	bne.n	8004c6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	f043 0220 	orr.w	r2, r3, #32
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e007      	b.n	8004c7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d1ca      	bne.n	8004c10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c90:	e042      	b.n	8004d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b10      	cmp	r3, #16
 8004c9e:	d119      	bne.n	8004cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 0210 	mvn.w	r2, #16
 8004ca8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e029      	b.n	8004d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd4:	f7fd ff56 	bl	8002b84 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d302      	bcc.n	8004cea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d116      	bne.n	8004d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	f043 0220 	orr.w	r2, r3, #32
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e007      	b.n	8004d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d22:	2b40      	cmp	r3, #64	; 0x40
 8004d24:	d1b5      	bne.n	8004c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d46:	d11b      	bne.n	8004d80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	f043 0204 	orr.w	r2, r3, #4
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e000      	b.n	8004d82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
	...

08004d90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e267      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d075      	beq.n	8004e9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dae:	4b88      	ldr	r3, [pc, #544]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d00c      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dba:	4b85      	ldr	r3, [pc, #532]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dc2:	2b08      	cmp	r3, #8
 8004dc4:	d112      	bne.n	8004dec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dc6:	4b82      	ldr	r3, [pc, #520]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dd2:	d10b      	bne.n	8004dec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd4:	4b7e      	ldr	r3, [pc, #504]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d05b      	beq.n	8004e98 <HAL_RCC_OscConfig+0x108>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d157      	bne.n	8004e98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e242      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df4:	d106      	bne.n	8004e04 <HAL_RCC_OscConfig+0x74>
 8004df6:	4b76      	ldr	r3, [pc, #472]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a75      	ldr	r2, [pc, #468]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	e01d      	b.n	8004e40 <HAL_RCC_OscConfig+0xb0>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e0c:	d10c      	bne.n	8004e28 <HAL_RCC_OscConfig+0x98>
 8004e0e:	4b70      	ldr	r3, [pc, #448]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a6f      	ldr	r2, [pc, #444]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	4b6d      	ldr	r3, [pc, #436]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a6c      	ldr	r2, [pc, #432]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	e00b      	b.n	8004e40 <HAL_RCC_OscConfig+0xb0>
 8004e28:	4b69      	ldr	r3, [pc, #420]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a68      	ldr	r2, [pc, #416]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	4b66      	ldr	r3, [pc, #408]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a65      	ldr	r2, [pc, #404]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d013      	beq.n	8004e70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e48:	f7fd fe9c 	bl	8002b84 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e50:	f7fd fe98 	bl	8002b84 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	; 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e207      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e62:	4b5b      	ldr	r3, [pc, #364]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0f0      	beq.n	8004e50 <HAL_RCC_OscConfig+0xc0>
 8004e6e:	e014      	b.n	8004e9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e70:	f7fd fe88 	bl	8002b84 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e78:	f7fd fe84 	bl	8002b84 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b64      	cmp	r3, #100	; 0x64
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e1f3      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e8a:	4b51      	ldr	r3, [pc, #324]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f0      	bne.n	8004e78 <HAL_RCC_OscConfig+0xe8>
 8004e96:	e000      	b.n	8004e9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d063      	beq.n	8004f6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ea6:	4b4a      	ldr	r3, [pc, #296]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 030c 	and.w	r3, r3, #12
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00b      	beq.n	8004eca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eb2:	4b47      	ldr	r3, [pc, #284]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d11c      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ebe:	4b44      	ldr	r3, [pc, #272]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d116      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eca:	4b41      	ldr	r3, [pc, #260]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d005      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x152>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d001      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e1c7      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee2:	4b3b      	ldr	r3, [pc, #236]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	4937      	ldr	r1, [pc, #220]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ef6:	e03a      	b.n	8004f6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d020      	beq.n	8004f42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f00:	4b34      	ldr	r3, [pc, #208]	; (8004fd4 <HAL_RCC_OscConfig+0x244>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f06:	f7fd fe3d 	bl	8002b84 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f0e:	f7fd fe39 	bl	8002b84 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e1a8      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f20:	4b2b      	ldr	r3, [pc, #172]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f2c:	4b28      	ldr	r3, [pc, #160]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	4925      	ldr	r1, [pc, #148]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	600b      	str	r3, [r1, #0]
 8004f40:	e015      	b.n	8004f6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f42:	4b24      	ldr	r3, [pc, #144]	; (8004fd4 <HAL_RCC_OscConfig+0x244>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f48:	f7fd fe1c 	bl	8002b84 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f50:	f7fd fe18 	bl	8002b84 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e187      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f62:	4b1b      	ldr	r3, [pc, #108]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f0      	bne.n	8004f50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d036      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d016      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f82:	4b15      	ldr	r3, [pc, #84]	; (8004fd8 <HAL_RCC_OscConfig+0x248>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f88:	f7fd fdfc 	bl	8002b84 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f90:	f7fd fdf8 	bl	8002b84 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e167      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fa2:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0f0      	beq.n	8004f90 <HAL_RCC_OscConfig+0x200>
 8004fae:	e01b      	b.n	8004fe8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fb0:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <HAL_RCC_OscConfig+0x248>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb6:	f7fd fde5 	bl	8002b84 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fbc:	e00e      	b.n	8004fdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fbe:	f7fd fde1 	bl	8002b84 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d907      	bls.n	8004fdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e150      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	42470000 	.word	0x42470000
 8004fd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fdc:	4b88      	ldr	r3, [pc, #544]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 8004fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1ea      	bne.n	8004fbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 8097 	beq.w	8005124 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ffa:	4b81      	ldr	r3, [pc, #516]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10f      	bne.n	8005026 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005006:	2300      	movs	r3, #0
 8005008:	60bb      	str	r3, [r7, #8]
 800500a:	4b7d      	ldr	r3, [pc, #500]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	4a7c      	ldr	r2, [pc, #496]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 8005010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005014:	6413      	str	r3, [r2, #64]	; 0x40
 8005016:	4b7a      	ldr	r3, [pc, #488]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501e:	60bb      	str	r3, [r7, #8]
 8005020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005022:	2301      	movs	r3, #1
 8005024:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005026:	4b77      	ldr	r3, [pc, #476]	; (8005204 <HAL_RCC_OscConfig+0x474>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502e:	2b00      	cmp	r3, #0
 8005030:	d118      	bne.n	8005064 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005032:	4b74      	ldr	r3, [pc, #464]	; (8005204 <HAL_RCC_OscConfig+0x474>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a73      	ldr	r2, [pc, #460]	; (8005204 <HAL_RCC_OscConfig+0x474>)
 8005038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800503c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800503e:	f7fd fda1 	bl	8002b84 <HAL_GetTick>
 8005042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005044:	e008      	b.n	8005058 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005046:	f7fd fd9d 	bl	8002b84 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e10c      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005058:	4b6a      	ldr	r3, [pc, #424]	; (8005204 <HAL_RCC_OscConfig+0x474>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0f0      	beq.n	8005046 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d106      	bne.n	800507a <HAL_RCC_OscConfig+0x2ea>
 800506c:	4b64      	ldr	r3, [pc, #400]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 800506e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005070:	4a63      	ldr	r2, [pc, #396]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 8005072:	f043 0301 	orr.w	r3, r3, #1
 8005076:	6713      	str	r3, [r2, #112]	; 0x70
 8005078:	e01c      	b.n	80050b4 <HAL_RCC_OscConfig+0x324>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	2b05      	cmp	r3, #5
 8005080:	d10c      	bne.n	800509c <HAL_RCC_OscConfig+0x30c>
 8005082:	4b5f      	ldr	r3, [pc, #380]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 8005084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005086:	4a5e      	ldr	r2, [pc, #376]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 8005088:	f043 0304 	orr.w	r3, r3, #4
 800508c:	6713      	str	r3, [r2, #112]	; 0x70
 800508e:	4b5c      	ldr	r3, [pc, #368]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 8005090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005092:	4a5b      	ldr	r2, [pc, #364]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 8005094:	f043 0301 	orr.w	r3, r3, #1
 8005098:	6713      	str	r3, [r2, #112]	; 0x70
 800509a:	e00b      	b.n	80050b4 <HAL_RCC_OscConfig+0x324>
 800509c:	4b58      	ldr	r3, [pc, #352]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 800509e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a0:	4a57      	ldr	r2, [pc, #348]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 80050a2:	f023 0301 	bic.w	r3, r3, #1
 80050a6:	6713      	str	r3, [r2, #112]	; 0x70
 80050a8:	4b55      	ldr	r3, [pc, #340]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ac:	4a54      	ldr	r2, [pc, #336]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 80050ae:	f023 0304 	bic.w	r3, r3, #4
 80050b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d015      	beq.n	80050e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050bc:	f7fd fd62 	bl	8002b84 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c2:	e00a      	b.n	80050da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050c4:	f7fd fd5e 	bl	8002b84 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e0cb      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050da:	4b49      	ldr	r3, [pc, #292]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 80050dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0ee      	beq.n	80050c4 <HAL_RCC_OscConfig+0x334>
 80050e6:	e014      	b.n	8005112 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050e8:	f7fd fd4c 	bl	8002b84 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ee:	e00a      	b.n	8005106 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050f0:	f7fd fd48 	bl	8002b84 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fe:	4293      	cmp	r3, r2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e0b5      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005106:	4b3e      	ldr	r3, [pc, #248]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1ee      	bne.n	80050f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005112:	7dfb      	ldrb	r3, [r7, #23]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d105      	bne.n	8005124 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005118:	4b39      	ldr	r3, [pc, #228]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	4a38      	ldr	r2, [pc, #224]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 800511e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005122:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 80a1 	beq.w	8005270 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800512e:	4b34      	ldr	r3, [pc, #208]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	2b08      	cmp	r3, #8
 8005138:	d05c      	beq.n	80051f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d141      	bne.n	80051c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005142:	4b31      	ldr	r3, [pc, #196]	; (8005208 <HAL_RCC_OscConfig+0x478>)
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005148:	f7fd fd1c 	bl	8002b84 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005150:	f7fd fd18 	bl	8002b84 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e087      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005162:	4b27      	ldr	r3, [pc, #156]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f0      	bne.n	8005150 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69da      	ldr	r2, [r3, #28]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	019b      	lsls	r3, r3, #6
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	085b      	lsrs	r3, r3, #1
 8005186:	3b01      	subs	r3, #1
 8005188:	041b      	lsls	r3, r3, #16
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	061b      	lsls	r3, r3, #24
 8005192:	491b      	ldr	r1, [pc, #108]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 8005194:	4313      	orrs	r3, r2
 8005196:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005198:	4b1b      	ldr	r3, [pc, #108]	; (8005208 <HAL_RCC_OscConfig+0x478>)
 800519a:	2201      	movs	r2, #1
 800519c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519e:	f7fd fcf1 	bl	8002b84 <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051a6:	f7fd fced 	bl	8002b84 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e05c      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b8:	4b11      	ldr	r3, [pc, #68]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0f0      	beq.n	80051a6 <HAL_RCC_OscConfig+0x416>
 80051c4:	e054      	b.n	8005270 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c6:	4b10      	ldr	r3, [pc, #64]	; (8005208 <HAL_RCC_OscConfig+0x478>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051cc:	f7fd fcda 	bl	8002b84 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051d4:	f7fd fcd6 	bl	8002b84 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e045      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e6:	4b06      	ldr	r3, [pc, #24]	; (8005200 <HAL_RCC_OscConfig+0x470>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f0      	bne.n	80051d4 <HAL_RCC_OscConfig+0x444>
 80051f2:	e03d      	b.n	8005270 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d107      	bne.n	800520c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e038      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
 8005200:	40023800 	.word	0x40023800
 8005204:	40007000 	.word	0x40007000
 8005208:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800520c:	4b1b      	ldr	r3, [pc, #108]	; (800527c <HAL_RCC_OscConfig+0x4ec>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d028      	beq.n	800526c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005224:	429a      	cmp	r2, r3
 8005226:	d121      	bne.n	800526c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005232:	429a      	cmp	r2, r3
 8005234:	d11a      	bne.n	800526c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800523c:	4013      	ands	r3, r2
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005242:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005244:	4293      	cmp	r3, r2
 8005246:	d111      	bne.n	800526c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005252:	085b      	lsrs	r3, r3, #1
 8005254:	3b01      	subs	r3, #1
 8005256:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005258:	429a      	cmp	r2, r3
 800525a:	d107      	bne.n	800526c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005266:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005268:	429a      	cmp	r2, r3
 800526a:	d001      	beq.n	8005270 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e000      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40023800 	.word	0x40023800

08005280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e0cc      	b.n	800542e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005294:	4b68      	ldr	r3, [pc, #416]	; (8005438 <HAL_RCC_ClockConfig+0x1b8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d90c      	bls.n	80052bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a2:	4b65      	ldr	r3, [pc, #404]	; (8005438 <HAL_RCC_ClockConfig+0x1b8>)
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052aa:	4b63      	ldr	r3, [pc, #396]	; (8005438 <HAL_RCC_ClockConfig+0x1b8>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d001      	beq.n	80052bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e0b8      	b.n	800542e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d020      	beq.n	800530a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d005      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052d4:	4b59      	ldr	r3, [pc, #356]	; (800543c <HAL_RCC_ClockConfig+0x1bc>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	4a58      	ldr	r2, [pc, #352]	; (800543c <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0308 	and.w	r3, r3, #8
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052ec:	4b53      	ldr	r3, [pc, #332]	; (800543c <HAL_RCC_ClockConfig+0x1bc>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	4a52      	ldr	r2, [pc, #328]	; (800543c <HAL_RCC_ClockConfig+0x1bc>)
 80052f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052f8:	4b50      	ldr	r3, [pc, #320]	; (800543c <HAL_RCC_ClockConfig+0x1bc>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	494d      	ldr	r1, [pc, #308]	; (800543c <HAL_RCC_ClockConfig+0x1bc>)
 8005306:	4313      	orrs	r3, r2
 8005308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d044      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d107      	bne.n	800532e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800531e:	4b47      	ldr	r3, [pc, #284]	; (800543c <HAL_RCC_ClockConfig+0x1bc>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d119      	bne.n	800535e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e07f      	b.n	800542e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b02      	cmp	r3, #2
 8005334:	d003      	beq.n	800533e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800533a:	2b03      	cmp	r3, #3
 800533c:	d107      	bne.n	800534e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800533e:	4b3f      	ldr	r3, [pc, #252]	; (800543c <HAL_RCC_ClockConfig+0x1bc>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d109      	bne.n	800535e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e06f      	b.n	800542e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800534e:	4b3b      	ldr	r3, [pc, #236]	; (800543c <HAL_RCC_ClockConfig+0x1bc>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e067      	b.n	800542e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800535e:	4b37      	ldr	r3, [pc, #220]	; (800543c <HAL_RCC_ClockConfig+0x1bc>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f023 0203 	bic.w	r2, r3, #3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	4934      	ldr	r1, [pc, #208]	; (800543c <HAL_RCC_ClockConfig+0x1bc>)
 800536c:	4313      	orrs	r3, r2
 800536e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005370:	f7fd fc08 	bl	8002b84 <HAL_GetTick>
 8005374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005376:	e00a      	b.n	800538e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005378:	f7fd fc04 	bl	8002b84 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	f241 3288 	movw	r2, #5000	; 0x1388
 8005386:	4293      	cmp	r3, r2
 8005388:	d901      	bls.n	800538e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e04f      	b.n	800542e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800538e:	4b2b      	ldr	r3, [pc, #172]	; (800543c <HAL_RCC_ClockConfig+0x1bc>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 020c 	and.w	r2, r3, #12
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	429a      	cmp	r2, r3
 800539e:	d1eb      	bne.n	8005378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053a0:	4b25      	ldr	r3, [pc, #148]	; (8005438 <HAL_RCC_ClockConfig+0x1b8>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d20c      	bcs.n	80053c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ae:	4b22      	ldr	r3, [pc, #136]	; (8005438 <HAL_RCC_ClockConfig+0x1b8>)
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b6:	4b20      	ldr	r3, [pc, #128]	; (8005438 <HAL_RCC_ClockConfig+0x1b8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d001      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e032      	b.n	800542e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d008      	beq.n	80053e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053d4:	4b19      	ldr	r3, [pc, #100]	; (800543c <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	4916      	ldr	r1, [pc, #88]	; (800543c <HAL_RCC_ClockConfig+0x1bc>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d009      	beq.n	8005406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053f2:	4b12      	ldr	r3, [pc, #72]	; (800543c <HAL_RCC_ClockConfig+0x1bc>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	490e      	ldr	r1, [pc, #56]	; (800543c <HAL_RCC_ClockConfig+0x1bc>)
 8005402:	4313      	orrs	r3, r2
 8005404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005406:	f000 f821 	bl	800544c <HAL_RCC_GetSysClockFreq>
 800540a:	4602      	mov	r2, r0
 800540c:	4b0b      	ldr	r3, [pc, #44]	; (800543c <HAL_RCC_ClockConfig+0x1bc>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	091b      	lsrs	r3, r3, #4
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	490a      	ldr	r1, [pc, #40]	; (8005440 <HAL_RCC_ClockConfig+0x1c0>)
 8005418:	5ccb      	ldrb	r3, [r1, r3]
 800541a:	fa22 f303 	lsr.w	r3, r2, r3
 800541e:	4a09      	ldr	r2, [pc, #36]	; (8005444 <HAL_RCC_ClockConfig+0x1c4>)
 8005420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005422:	4b09      	ldr	r3, [pc, #36]	; (8005448 <HAL_RCC_ClockConfig+0x1c8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4618      	mov	r0, r3
 8005428:	f7fd fb68 	bl	8002afc <HAL_InitTick>

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	40023c00 	.word	0x40023c00
 800543c:	40023800 	.word	0x40023800
 8005440:	0800c170 	.word	0x0800c170
 8005444:	20000000 	.word	0x20000000
 8005448:	20000004 	.word	0x20000004

0800544c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800544c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005450:	b094      	sub	sp, #80	; 0x50
 8005452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	647b      	str	r3, [r7, #68]	; 0x44
 8005458:	2300      	movs	r3, #0
 800545a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800545c:	2300      	movs	r3, #0
 800545e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005464:	4b79      	ldr	r3, [pc, #484]	; (800564c <HAL_RCC_GetSysClockFreq+0x200>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f003 030c 	and.w	r3, r3, #12
 800546c:	2b08      	cmp	r3, #8
 800546e:	d00d      	beq.n	800548c <HAL_RCC_GetSysClockFreq+0x40>
 8005470:	2b08      	cmp	r3, #8
 8005472:	f200 80e1 	bhi.w	8005638 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <HAL_RCC_GetSysClockFreq+0x34>
 800547a:	2b04      	cmp	r3, #4
 800547c:	d003      	beq.n	8005486 <HAL_RCC_GetSysClockFreq+0x3a>
 800547e:	e0db      	b.n	8005638 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005480:	4b73      	ldr	r3, [pc, #460]	; (8005650 <HAL_RCC_GetSysClockFreq+0x204>)
 8005482:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005484:	e0db      	b.n	800563e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005486:	4b73      	ldr	r3, [pc, #460]	; (8005654 <HAL_RCC_GetSysClockFreq+0x208>)
 8005488:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800548a:	e0d8      	b.n	800563e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800548c:	4b6f      	ldr	r3, [pc, #444]	; (800564c <HAL_RCC_GetSysClockFreq+0x200>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005494:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005496:	4b6d      	ldr	r3, [pc, #436]	; (800564c <HAL_RCC_GetSysClockFreq+0x200>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d063      	beq.n	800556a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054a2:	4b6a      	ldr	r3, [pc, #424]	; (800564c <HAL_RCC_GetSysClockFreq+0x200>)
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	099b      	lsrs	r3, r3, #6
 80054a8:	2200      	movs	r2, #0
 80054aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80054ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b4:	633b      	str	r3, [r7, #48]	; 0x30
 80054b6:	2300      	movs	r3, #0
 80054b8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80054be:	4622      	mov	r2, r4
 80054c0:	462b      	mov	r3, r5
 80054c2:	f04f 0000 	mov.w	r0, #0
 80054c6:	f04f 0100 	mov.w	r1, #0
 80054ca:	0159      	lsls	r1, r3, #5
 80054cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054d0:	0150      	lsls	r0, r2, #5
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4621      	mov	r1, r4
 80054d8:	1a51      	subs	r1, r2, r1
 80054da:	6139      	str	r1, [r7, #16]
 80054dc:	4629      	mov	r1, r5
 80054de:	eb63 0301 	sbc.w	r3, r3, r1
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	f04f 0200 	mov.w	r2, #0
 80054e8:	f04f 0300 	mov.w	r3, #0
 80054ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054f0:	4659      	mov	r1, fp
 80054f2:	018b      	lsls	r3, r1, #6
 80054f4:	4651      	mov	r1, sl
 80054f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054fa:	4651      	mov	r1, sl
 80054fc:	018a      	lsls	r2, r1, #6
 80054fe:	4651      	mov	r1, sl
 8005500:	ebb2 0801 	subs.w	r8, r2, r1
 8005504:	4659      	mov	r1, fp
 8005506:	eb63 0901 	sbc.w	r9, r3, r1
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	f04f 0300 	mov.w	r3, #0
 8005512:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005516:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800551a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800551e:	4690      	mov	r8, r2
 8005520:	4699      	mov	r9, r3
 8005522:	4623      	mov	r3, r4
 8005524:	eb18 0303 	adds.w	r3, r8, r3
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	462b      	mov	r3, r5
 800552c:	eb49 0303 	adc.w	r3, r9, r3
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	f04f 0200 	mov.w	r2, #0
 8005536:	f04f 0300 	mov.w	r3, #0
 800553a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800553e:	4629      	mov	r1, r5
 8005540:	024b      	lsls	r3, r1, #9
 8005542:	4621      	mov	r1, r4
 8005544:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005548:	4621      	mov	r1, r4
 800554a:	024a      	lsls	r2, r1, #9
 800554c:	4610      	mov	r0, r2
 800554e:	4619      	mov	r1, r3
 8005550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005552:	2200      	movs	r2, #0
 8005554:	62bb      	str	r3, [r7, #40]	; 0x28
 8005556:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005558:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800555c:	f7fb fb9c 	bl	8000c98 <__aeabi_uldivmod>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4613      	mov	r3, r2
 8005566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005568:	e058      	b.n	800561c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800556a:	4b38      	ldr	r3, [pc, #224]	; (800564c <HAL_RCC_GetSysClockFreq+0x200>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	099b      	lsrs	r3, r3, #6
 8005570:	2200      	movs	r2, #0
 8005572:	4618      	mov	r0, r3
 8005574:	4611      	mov	r1, r2
 8005576:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800557a:	623b      	str	r3, [r7, #32]
 800557c:	2300      	movs	r3, #0
 800557e:	627b      	str	r3, [r7, #36]	; 0x24
 8005580:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005584:	4642      	mov	r2, r8
 8005586:	464b      	mov	r3, r9
 8005588:	f04f 0000 	mov.w	r0, #0
 800558c:	f04f 0100 	mov.w	r1, #0
 8005590:	0159      	lsls	r1, r3, #5
 8005592:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005596:	0150      	lsls	r0, r2, #5
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4641      	mov	r1, r8
 800559e:	ebb2 0a01 	subs.w	sl, r2, r1
 80055a2:	4649      	mov	r1, r9
 80055a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055bc:	ebb2 040a 	subs.w	r4, r2, sl
 80055c0:	eb63 050b 	sbc.w	r5, r3, fp
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	00eb      	lsls	r3, r5, #3
 80055ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055d2:	00e2      	lsls	r2, r4, #3
 80055d4:	4614      	mov	r4, r2
 80055d6:	461d      	mov	r5, r3
 80055d8:	4643      	mov	r3, r8
 80055da:	18e3      	adds	r3, r4, r3
 80055dc:	603b      	str	r3, [r7, #0]
 80055de:	464b      	mov	r3, r9
 80055e0:	eb45 0303 	adc.w	r3, r5, r3
 80055e4:	607b      	str	r3, [r7, #4]
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055f2:	4629      	mov	r1, r5
 80055f4:	028b      	lsls	r3, r1, #10
 80055f6:	4621      	mov	r1, r4
 80055f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055fc:	4621      	mov	r1, r4
 80055fe:	028a      	lsls	r2, r1, #10
 8005600:	4610      	mov	r0, r2
 8005602:	4619      	mov	r1, r3
 8005604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005606:	2200      	movs	r2, #0
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	61fa      	str	r2, [r7, #28]
 800560c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005610:	f7fb fb42 	bl	8000c98 <__aeabi_uldivmod>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4613      	mov	r3, r2
 800561a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800561c:	4b0b      	ldr	r3, [pc, #44]	; (800564c <HAL_RCC_GetSysClockFreq+0x200>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	0c1b      	lsrs	r3, r3, #16
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	3301      	adds	r3, #1
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800562c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800562e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005630:	fbb2 f3f3 	udiv	r3, r2, r3
 8005634:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005636:	e002      	b.n	800563e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005638:	4b05      	ldr	r3, [pc, #20]	; (8005650 <HAL_RCC_GetSysClockFreq+0x204>)
 800563a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800563c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800563e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005640:	4618      	mov	r0, r3
 8005642:	3750      	adds	r7, #80	; 0x50
 8005644:	46bd      	mov	sp, r7
 8005646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800564a:	bf00      	nop
 800564c:	40023800 	.word	0x40023800
 8005650:	00f42400 	.word	0x00f42400
 8005654:	007a1200 	.word	0x007a1200

08005658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800565c:	4b03      	ldr	r3, [pc, #12]	; (800566c <HAL_RCC_GetHCLKFreq+0x14>)
 800565e:	681b      	ldr	r3, [r3, #0]
}
 8005660:	4618      	mov	r0, r3
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	20000000 	.word	0x20000000

08005670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005674:	f7ff fff0 	bl	8005658 <HAL_RCC_GetHCLKFreq>
 8005678:	4602      	mov	r2, r0
 800567a:	4b05      	ldr	r3, [pc, #20]	; (8005690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	0a9b      	lsrs	r3, r3, #10
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	4903      	ldr	r1, [pc, #12]	; (8005694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005686:	5ccb      	ldrb	r3, [r1, r3]
 8005688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800568c:	4618      	mov	r0, r3
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40023800 	.word	0x40023800
 8005694:	0800c180 	.word	0x0800c180

08005698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800569c:	f7ff ffdc 	bl	8005658 <HAL_RCC_GetHCLKFreq>
 80056a0:	4602      	mov	r2, r0
 80056a2:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	0b5b      	lsrs	r3, r3, #13
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	4903      	ldr	r1, [pc, #12]	; (80056bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80056ae:	5ccb      	ldrb	r3, [r1, r3]
 80056b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40023800 	.word	0x40023800
 80056bc:	0800c180 	.word	0x0800c180

080056c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e041      	b.n	8005756 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fd f812 	bl	8002710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3304      	adds	r3, #4
 80056fc:	4619      	mov	r1, r3
 80056fe:	4610      	mov	r0, r2
 8005700:	f000 fc5e 	bl	8005fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b01      	cmp	r3, #1
 8005772:	d001      	beq.n	8005778 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e044      	b.n	8005802 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0201 	orr.w	r2, r2, #1
 800578e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a1e      	ldr	r2, [pc, #120]	; (8005810 <HAL_TIM_Base_Start_IT+0xb0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d018      	beq.n	80057cc <HAL_TIM_Base_Start_IT+0x6c>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a2:	d013      	beq.n	80057cc <HAL_TIM_Base_Start_IT+0x6c>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a1a      	ldr	r2, [pc, #104]	; (8005814 <HAL_TIM_Base_Start_IT+0xb4>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00e      	beq.n	80057cc <HAL_TIM_Base_Start_IT+0x6c>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a19      	ldr	r2, [pc, #100]	; (8005818 <HAL_TIM_Base_Start_IT+0xb8>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d009      	beq.n	80057cc <HAL_TIM_Base_Start_IT+0x6c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a17      	ldr	r2, [pc, #92]	; (800581c <HAL_TIM_Base_Start_IT+0xbc>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d004      	beq.n	80057cc <HAL_TIM_Base_Start_IT+0x6c>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a16      	ldr	r2, [pc, #88]	; (8005820 <HAL_TIM_Base_Start_IT+0xc0>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d111      	bne.n	80057f0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b06      	cmp	r3, #6
 80057dc:	d010      	beq.n	8005800 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0201 	orr.w	r2, r2, #1
 80057ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ee:	e007      	b.n	8005800 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0201 	orr.w	r2, r2, #1
 80057fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	40010000 	.word	0x40010000
 8005814:	40000400 	.word	0x40000400
 8005818:	40000800 	.word	0x40000800
 800581c:	40000c00 	.word	0x40000c00
 8005820:	40014000 	.word	0x40014000

08005824 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e041      	b.n	80058ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f839 	bl	80058c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3304      	adds	r3, #4
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f000 fbac 	bl	8005fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
	...

080058d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d109      	bne.n	80058fc <HAL_TIM_PWM_Start+0x24>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	bf14      	ite	ne
 80058f4:	2301      	movne	r3, #1
 80058f6:	2300      	moveq	r3, #0
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	e022      	b.n	8005942 <HAL_TIM_PWM_Start+0x6a>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2b04      	cmp	r3, #4
 8005900:	d109      	bne.n	8005916 <HAL_TIM_PWM_Start+0x3e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b01      	cmp	r3, #1
 800590c:	bf14      	ite	ne
 800590e:	2301      	movne	r3, #1
 8005910:	2300      	moveq	r3, #0
 8005912:	b2db      	uxtb	r3, r3
 8005914:	e015      	b.n	8005942 <HAL_TIM_PWM_Start+0x6a>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b08      	cmp	r3, #8
 800591a:	d109      	bne.n	8005930 <HAL_TIM_PWM_Start+0x58>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b01      	cmp	r3, #1
 8005926:	bf14      	ite	ne
 8005928:	2301      	movne	r3, #1
 800592a:	2300      	moveq	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	e008      	b.n	8005942 <HAL_TIM_PWM_Start+0x6a>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b01      	cmp	r3, #1
 800593a:	bf14      	ite	ne
 800593c:	2301      	movne	r3, #1
 800593e:	2300      	moveq	r3, #0
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e068      	b.n	8005a1c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d104      	bne.n	800595a <HAL_TIM_PWM_Start+0x82>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005958:	e013      	b.n	8005982 <HAL_TIM_PWM_Start+0xaa>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b04      	cmp	r3, #4
 800595e:	d104      	bne.n	800596a <HAL_TIM_PWM_Start+0x92>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005968:	e00b      	b.n	8005982 <HAL_TIM_PWM_Start+0xaa>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b08      	cmp	r3, #8
 800596e:	d104      	bne.n	800597a <HAL_TIM_PWM_Start+0xa2>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005978:	e003      	b.n	8005982 <HAL_TIM_PWM_Start+0xaa>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2202      	movs	r2, #2
 800597e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2201      	movs	r2, #1
 8005988:	6839      	ldr	r1, [r7, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fdbe 	bl	800650c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a23      	ldr	r2, [pc, #140]	; (8005a24 <HAL_TIM_PWM_Start+0x14c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d107      	bne.n	80059aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a1d      	ldr	r2, [pc, #116]	; (8005a24 <HAL_TIM_PWM_Start+0x14c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d018      	beq.n	80059e6 <HAL_TIM_PWM_Start+0x10e>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059bc:	d013      	beq.n	80059e6 <HAL_TIM_PWM_Start+0x10e>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a19      	ldr	r2, [pc, #100]	; (8005a28 <HAL_TIM_PWM_Start+0x150>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00e      	beq.n	80059e6 <HAL_TIM_PWM_Start+0x10e>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a17      	ldr	r2, [pc, #92]	; (8005a2c <HAL_TIM_PWM_Start+0x154>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d009      	beq.n	80059e6 <HAL_TIM_PWM_Start+0x10e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a16      	ldr	r2, [pc, #88]	; (8005a30 <HAL_TIM_PWM_Start+0x158>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d004      	beq.n	80059e6 <HAL_TIM_PWM_Start+0x10e>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a14      	ldr	r2, [pc, #80]	; (8005a34 <HAL_TIM_PWM_Start+0x15c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d111      	bne.n	8005a0a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b06      	cmp	r3, #6
 80059f6:	d010      	beq.n	8005a1a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0201 	orr.w	r2, r2, #1
 8005a06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a08:	e007      	b.n	8005a1a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0201 	orr.w	r2, r2, #1
 8005a18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	40010000 	.word	0x40010000
 8005a28:	40000400 	.word	0x40000400
 8005a2c:	40000800 	.word	0x40000800
 8005a30:	40000c00 	.word	0x40000c00
 8005a34:	40014000 	.word	0x40014000

08005a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d122      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d11b      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f06f 0202 	mvn.w	r2, #2
 8005a64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fa81 	bl	8005f82 <HAL_TIM_IC_CaptureCallback>
 8005a80:	e005      	b.n	8005a8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fa73 	bl	8005f6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fa84 	bl	8005f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 0304 	and.w	r3, r3, #4
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d122      	bne.n	8005ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	d11b      	bne.n	8005ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0204 	mvn.w	r2, #4
 8005ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2202      	movs	r2, #2
 8005abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fa57 	bl	8005f82 <HAL_TIM_IC_CaptureCallback>
 8005ad4:	e005      	b.n	8005ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fa49 	bl	8005f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fa5a 	bl	8005f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d122      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f003 0308 	and.w	r3, r3, #8
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d11b      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f06f 0208 	mvn.w	r2, #8
 8005b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2204      	movs	r2, #4
 8005b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fa2d 	bl	8005f82 <HAL_TIM_IC_CaptureCallback>
 8005b28:	e005      	b.n	8005b36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fa1f 	bl	8005f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fa30 	bl	8005f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f003 0310 	and.w	r3, r3, #16
 8005b46:	2b10      	cmp	r3, #16
 8005b48:	d122      	bne.n	8005b90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f003 0310 	and.w	r3, r3, #16
 8005b54:	2b10      	cmp	r3, #16
 8005b56:	d11b      	bne.n	8005b90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0210 	mvn.w	r2, #16
 8005b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2208      	movs	r2, #8
 8005b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fa03 	bl	8005f82 <HAL_TIM_IC_CaptureCallback>
 8005b7c:	e005      	b.n	8005b8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f9f5 	bl	8005f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fa06 	bl	8005f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d10e      	bne.n	8005bbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d107      	bne.n	8005bbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f06f 0201 	mvn.w	r2, #1
 8005bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f9cf 	bl	8005f5a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc6:	2b80      	cmp	r3, #128	; 0x80
 8005bc8:	d10e      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd4:	2b80      	cmp	r3, #128	; 0x80
 8005bd6:	d107      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fd30 	bl	8006648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf2:	2b40      	cmp	r3, #64	; 0x40
 8005bf4:	d10e      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c00:	2b40      	cmp	r3, #64	; 0x40
 8005c02:	d107      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f9cb 	bl	8005faa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b20      	cmp	r3, #32
 8005c20:	d10e      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b20      	cmp	r3, #32
 8005c2e:	d107      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f06f 0220 	mvn.w	r2, #32
 8005c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fcfa 	bl	8006634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c40:	bf00      	nop
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c62:	2302      	movs	r3, #2
 8005c64:	e0ae      	b.n	8005dc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b0c      	cmp	r3, #12
 8005c72:	f200 809f 	bhi.w	8005db4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c76:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005cb1 	.word	0x08005cb1
 8005c80:	08005db5 	.word	0x08005db5
 8005c84:	08005db5 	.word	0x08005db5
 8005c88:	08005db5 	.word	0x08005db5
 8005c8c:	08005cf1 	.word	0x08005cf1
 8005c90:	08005db5 	.word	0x08005db5
 8005c94:	08005db5 	.word	0x08005db5
 8005c98:	08005db5 	.word	0x08005db5
 8005c9c:	08005d33 	.word	0x08005d33
 8005ca0:	08005db5 	.word	0x08005db5
 8005ca4:	08005db5 	.word	0x08005db5
 8005ca8:	08005db5 	.word	0x08005db5
 8005cac:	08005d73 	.word	0x08005d73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68b9      	ldr	r1, [r7, #8]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fa02 	bl	80060c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0208 	orr.w	r2, r2, #8
 8005cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0204 	bic.w	r2, r2, #4
 8005cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6999      	ldr	r1, [r3, #24]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	691a      	ldr	r2, [r3, #16]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	619a      	str	r2, [r3, #24]
      break;
 8005cee:	e064      	b.n	8005dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68b9      	ldr	r1, [r7, #8]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 fa48 	bl	800618c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699a      	ldr	r2, [r3, #24]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6999      	ldr	r1, [r3, #24]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	021a      	lsls	r2, r3, #8
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	619a      	str	r2, [r3, #24]
      break;
 8005d30:	e043      	b.n	8005dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fa93 	bl	8006264 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69da      	ldr	r2, [r3, #28]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f042 0208 	orr.w	r2, r2, #8
 8005d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69da      	ldr	r2, [r3, #28]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0204 	bic.w	r2, r2, #4
 8005d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69d9      	ldr	r1, [r3, #28]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	691a      	ldr	r2, [r3, #16]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	61da      	str	r2, [r3, #28]
      break;
 8005d70:	e023      	b.n	8005dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fadd 	bl	8006338 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69da      	ldr	r2, [r3, #28]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69d9      	ldr	r1, [r3, #28]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	021a      	lsls	r2, r3, #8
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	61da      	str	r2, [r3, #28]
      break;
 8005db2:	e002      	b.n	8005dba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	75fb      	strb	r3, [r7, #23]
      break;
 8005db8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3718      	adds	r7, #24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d101      	bne.n	8005de8 <HAL_TIM_ConfigClockSource+0x1c>
 8005de4:	2302      	movs	r3, #2
 8005de6:	e0b4      	b.n	8005f52 <HAL_TIM_ConfigClockSource+0x186>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e20:	d03e      	beq.n	8005ea0 <HAL_TIM_ConfigClockSource+0xd4>
 8005e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e26:	f200 8087 	bhi.w	8005f38 <HAL_TIM_ConfigClockSource+0x16c>
 8005e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e2e:	f000 8086 	beq.w	8005f3e <HAL_TIM_ConfigClockSource+0x172>
 8005e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e36:	d87f      	bhi.n	8005f38 <HAL_TIM_ConfigClockSource+0x16c>
 8005e38:	2b70      	cmp	r3, #112	; 0x70
 8005e3a:	d01a      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0xa6>
 8005e3c:	2b70      	cmp	r3, #112	; 0x70
 8005e3e:	d87b      	bhi.n	8005f38 <HAL_TIM_ConfigClockSource+0x16c>
 8005e40:	2b60      	cmp	r3, #96	; 0x60
 8005e42:	d050      	beq.n	8005ee6 <HAL_TIM_ConfigClockSource+0x11a>
 8005e44:	2b60      	cmp	r3, #96	; 0x60
 8005e46:	d877      	bhi.n	8005f38 <HAL_TIM_ConfigClockSource+0x16c>
 8005e48:	2b50      	cmp	r3, #80	; 0x50
 8005e4a:	d03c      	beq.n	8005ec6 <HAL_TIM_ConfigClockSource+0xfa>
 8005e4c:	2b50      	cmp	r3, #80	; 0x50
 8005e4e:	d873      	bhi.n	8005f38 <HAL_TIM_ConfigClockSource+0x16c>
 8005e50:	2b40      	cmp	r3, #64	; 0x40
 8005e52:	d058      	beq.n	8005f06 <HAL_TIM_ConfigClockSource+0x13a>
 8005e54:	2b40      	cmp	r3, #64	; 0x40
 8005e56:	d86f      	bhi.n	8005f38 <HAL_TIM_ConfigClockSource+0x16c>
 8005e58:	2b30      	cmp	r3, #48	; 0x30
 8005e5a:	d064      	beq.n	8005f26 <HAL_TIM_ConfigClockSource+0x15a>
 8005e5c:	2b30      	cmp	r3, #48	; 0x30
 8005e5e:	d86b      	bhi.n	8005f38 <HAL_TIM_ConfigClockSource+0x16c>
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d060      	beq.n	8005f26 <HAL_TIM_ConfigClockSource+0x15a>
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d867      	bhi.n	8005f38 <HAL_TIM_ConfigClockSource+0x16c>
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d05c      	beq.n	8005f26 <HAL_TIM_ConfigClockSource+0x15a>
 8005e6c:	2b10      	cmp	r3, #16
 8005e6e:	d05a      	beq.n	8005f26 <HAL_TIM_ConfigClockSource+0x15a>
 8005e70:	e062      	b.n	8005f38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6818      	ldr	r0, [r3, #0]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	6899      	ldr	r1, [r3, #8]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f000 fb23 	bl	80064cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	609a      	str	r2, [r3, #8]
      break;
 8005e9e:	e04f      	b.n	8005f40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6818      	ldr	r0, [r3, #0]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	6899      	ldr	r1, [r3, #8]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f000 fb0c 	bl	80064cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ec2:	609a      	str	r2, [r3, #8]
      break;
 8005ec4:	e03c      	b.n	8005f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	6859      	ldr	r1, [r3, #4]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f000 fa80 	bl	80063d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2150      	movs	r1, #80	; 0x50
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 fad9 	bl	8006496 <TIM_ITRx_SetConfig>
      break;
 8005ee4:	e02c      	b.n	8005f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6818      	ldr	r0, [r3, #0]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	6859      	ldr	r1, [r3, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f000 fa9f 	bl	8006436 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2160      	movs	r1, #96	; 0x60
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fac9 	bl	8006496 <TIM_ITRx_SetConfig>
      break;
 8005f04:	e01c      	b.n	8005f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6818      	ldr	r0, [r3, #0]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	6859      	ldr	r1, [r3, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	461a      	mov	r2, r3
 8005f14:	f000 fa60 	bl	80063d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2140      	movs	r1, #64	; 0x40
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fab9 	bl	8006496 <TIM_ITRx_SetConfig>
      break;
 8005f24:	e00c      	b.n	8005f40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4619      	mov	r1, r3
 8005f30:	4610      	mov	r0, r2
 8005f32:	f000 fab0 	bl	8006496 <TIM_ITRx_SetConfig>
      break;
 8005f36:	e003      	b.n	8005f40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f3c:	e000      	b.n	8005f40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
	...

08005fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a34      	ldr	r2, [pc, #208]	; (80060a4 <TIM_Base_SetConfig+0xe4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00f      	beq.n	8005ff8 <TIM_Base_SetConfig+0x38>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fde:	d00b      	beq.n	8005ff8 <TIM_Base_SetConfig+0x38>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a31      	ldr	r2, [pc, #196]	; (80060a8 <TIM_Base_SetConfig+0xe8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d007      	beq.n	8005ff8 <TIM_Base_SetConfig+0x38>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a30      	ldr	r2, [pc, #192]	; (80060ac <TIM_Base_SetConfig+0xec>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d003      	beq.n	8005ff8 <TIM_Base_SetConfig+0x38>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a2f      	ldr	r2, [pc, #188]	; (80060b0 <TIM_Base_SetConfig+0xf0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d108      	bne.n	800600a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a25      	ldr	r2, [pc, #148]	; (80060a4 <TIM_Base_SetConfig+0xe4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d01b      	beq.n	800604a <TIM_Base_SetConfig+0x8a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006018:	d017      	beq.n	800604a <TIM_Base_SetConfig+0x8a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a22      	ldr	r2, [pc, #136]	; (80060a8 <TIM_Base_SetConfig+0xe8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d013      	beq.n	800604a <TIM_Base_SetConfig+0x8a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a21      	ldr	r2, [pc, #132]	; (80060ac <TIM_Base_SetConfig+0xec>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00f      	beq.n	800604a <TIM_Base_SetConfig+0x8a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a20      	ldr	r2, [pc, #128]	; (80060b0 <TIM_Base_SetConfig+0xf0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00b      	beq.n	800604a <TIM_Base_SetConfig+0x8a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a1f      	ldr	r2, [pc, #124]	; (80060b4 <TIM_Base_SetConfig+0xf4>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d007      	beq.n	800604a <TIM_Base_SetConfig+0x8a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a1e      	ldr	r2, [pc, #120]	; (80060b8 <TIM_Base_SetConfig+0xf8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d003      	beq.n	800604a <TIM_Base_SetConfig+0x8a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a1d      	ldr	r2, [pc, #116]	; (80060bc <TIM_Base_SetConfig+0xfc>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d108      	bne.n	800605c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a08      	ldr	r2, [pc, #32]	; (80060a4 <TIM_Base_SetConfig+0xe4>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d103      	bne.n	8006090 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	615a      	str	r2, [r3, #20]
}
 8006096:	bf00      	nop
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	40010000 	.word	0x40010000
 80060a8:	40000400 	.word	0x40000400
 80060ac:	40000800 	.word	0x40000800
 80060b0:	40000c00 	.word	0x40000c00
 80060b4:	40014000 	.word	0x40014000
 80060b8:	40014400 	.word	0x40014400
 80060bc:	40014800 	.word	0x40014800

080060c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	f023 0201 	bic.w	r2, r3, #1
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0303 	bic.w	r3, r3, #3
 80060f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f023 0302 	bic.w	r3, r3, #2
 8006108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4313      	orrs	r3, r2
 8006112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a1c      	ldr	r2, [pc, #112]	; (8006188 <TIM_OC1_SetConfig+0xc8>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d10c      	bne.n	8006136 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f023 0308 	bic.w	r3, r3, #8
 8006122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f023 0304 	bic.w	r3, r3, #4
 8006134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a13      	ldr	r2, [pc, #76]	; (8006188 <TIM_OC1_SetConfig+0xc8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d111      	bne.n	8006162 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800614c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	4313      	orrs	r3, r2
 8006160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	621a      	str	r2, [r3, #32]
}
 800617c:	bf00      	nop
 800617e:	371c      	adds	r7, #28
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	40010000 	.word	0x40010000

0800618c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f023 0210 	bic.w	r2, r3, #16
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	021b      	lsls	r3, r3, #8
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f023 0320 	bic.w	r3, r3, #32
 80061d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	011b      	lsls	r3, r3, #4
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a1e      	ldr	r2, [pc, #120]	; (8006260 <TIM_OC2_SetConfig+0xd4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d10d      	bne.n	8006208 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006206:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a15      	ldr	r2, [pc, #84]	; (8006260 <TIM_OC2_SetConfig+0xd4>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d113      	bne.n	8006238 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006216:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800621e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	4313      	orrs	r3, r2
 800622a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	621a      	str	r2, [r3, #32]
}
 8006252:	bf00      	nop
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	40010000 	.word	0x40010000

08006264 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0303 	bic.w	r3, r3, #3
 800629a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	021b      	lsls	r3, r3, #8
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a1d      	ldr	r2, [pc, #116]	; (8006334 <TIM_OC3_SetConfig+0xd0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d10d      	bne.n	80062de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	021b      	lsls	r3, r3, #8
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a14      	ldr	r2, [pc, #80]	; (8006334 <TIM_OC3_SetConfig+0xd0>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d113      	bne.n	800630e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	011b      	lsls	r3, r3, #4
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	4313      	orrs	r3, r2
 8006300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	4313      	orrs	r3, r2
 800630c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	621a      	str	r2, [r3, #32]
}
 8006328:	bf00      	nop
 800632a:	371c      	adds	r7, #28
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	40010000 	.word	0x40010000

08006338 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800636e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	021b      	lsls	r3, r3, #8
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4313      	orrs	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	031b      	lsls	r3, r3, #12
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	4313      	orrs	r3, r2
 800638e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a10      	ldr	r2, [pc, #64]	; (80063d4 <TIM_OC4_SetConfig+0x9c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d109      	bne.n	80063ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800639e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	019b      	lsls	r3, r3, #6
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	621a      	str	r2, [r3, #32]
}
 80063c6:	bf00      	nop
 80063c8:	371c      	adds	r7, #28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	40010000 	.word	0x40010000

080063d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063d8:	b480      	push	{r7}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	f023 0201 	bic.w	r2, r3, #1
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	4313      	orrs	r3, r2
 800640c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f023 030a 	bic.w	r3, r3, #10
 8006414:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4313      	orrs	r3, r2
 800641c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	621a      	str	r2, [r3, #32]
}
 800642a:	bf00      	nop
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006436:	b480      	push	{r7}
 8006438:	b087      	sub	sp, #28
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	f023 0210 	bic.w	r2, r3, #16
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006460:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	031b      	lsls	r3, r3, #12
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006472:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	621a      	str	r2, [r3, #32]
}
 800648a:	bf00      	nop
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006496:	b480      	push	{r7}
 8006498:	b085      	sub	sp, #20
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f043 0307 	orr.w	r3, r3, #7
 80064b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	609a      	str	r2, [r3, #8]
}
 80064c0:	bf00      	nop
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
 80064d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	021a      	lsls	r2, r3, #8
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	431a      	orrs	r2, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	609a      	str	r2, [r3, #8]
}
 8006500:	bf00      	nop
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f003 031f 	and.w	r3, r3, #31
 800651e:	2201      	movs	r2, #1
 8006520:	fa02 f303 	lsl.w	r3, r2, r3
 8006524:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6a1a      	ldr	r2, [r3, #32]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	43db      	mvns	r3, r3
 800652e:	401a      	ands	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6a1a      	ldr	r2, [r3, #32]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	fa01 f303 	lsl.w	r3, r1, r3
 8006544:	431a      	orrs	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	621a      	str	r2, [r3, #32]
}
 800654a:	bf00      	nop
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
	...

08006558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006568:	2b01      	cmp	r3, #1
 800656a:	d101      	bne.n	8006570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800656c:	2302      	movs	r3, #2
 800656e:	e050      	b.n	8006612 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1c      	ldr	r2, [pc, #112]	; (8006620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d018      	beq.n	80065e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065bc:	d013      	beq.n	80065e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a18      	ldr	r2, [pc, #96]	; (8006624 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d00e      	beq.n	80065e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a16      	ldr	r2, [pc, #88]	; (8006628 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d009      	beq.n	80065e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a15      	ldr	r2, [pc, #84]	; (800662c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d004      	beq.n	80065e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a13      	ldr	r2, [pc, #76]	; (8006630 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d10c      	bne.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	40010000 	.word	0x40010000
 8006624:	40000400 	.word	0x40000400
 8006628:	40000800 	.word	0x40000800
 800662c:	40000c00 	.word	0x40000c00
 8006630:	40014000 	.word	0x40014000

08006634 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e03f      	b.n	80066ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d106      	bne.n	8006688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fc f94a 	bl	800291c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2224      	movs	r2, #36	; 0x24
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800669e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fddf 	bl	8007264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	691a      	ldr	r2, [r3, #16]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	695a      	ldr	r2, [r3, #20]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2220      	movs	r2, #32
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b08a      	sub	sp, #40	; 0x28
 80066fa:	af02      	add	r7, sp, #8
 80066fc:	60f8      	str	r0, [r7, #12]
 80066fe:	60b9      	str	r1, [r7, #8]
 8006700:	603b      	str	r3, [r7, #0]
 8006702:	4613      	mov	r3, r2
 8006704:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b20      	cmp	r3, #32
 8006714:	d17c      	bne.n	8006810 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <HAL_UART_Transmit+0x2c>
 800671c:	88fb      	ldrh	r3, [r7, #6]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e075      	b.n	8006812 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_UART_Transmit+0x3e>
 8006730:	2302      	movs	r3, #2
 8006732:	e06e      	b.n	8006812 <HAL_UART_Transmit+0x11c>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2221      	movs	r2, #33	; 0x21
 8006746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800674a:	f7fc fa1b 	bl	8002b84 <HAL_GetTick>
 800674e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	88fa      	ldrh	r2, [r7, #6]
 8006754:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	88fa      	ldrh	r2, [r7, #6]
 800675a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006764:	d108      	bne.n	8006778 <HAL_UART_Transmit+0x82>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d104      	bne.n	8006778 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800676e:	2300      	movs	r3, #0
 8006770:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	61bb      	str	r3, [r7, #24]
 8006776:	e003      	b.n	8006780 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800677c:	2300      	movs	r3, #0
 800677e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006788:	e02a      	b.n	80067e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2200      	movs	r2, #0
 8006792:	2180      	movs	r1, #128	; 0x80
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 fb1f 	bl	8006dd8 <UART_WaitOnFlagUntilTimeout>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e036      	b.n	8006812 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10b      	bne.n	80067c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	3302      	adds	r3, #2
 80067be:	61bb      	str	r3, [r7, #24]
 80067c0:	e007      	b.n	80067d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	781a      	ldrb	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	3301      	adds	r3, #1
 80067d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3b01      	subs	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1cf      	bne.n	800678a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2200      	movs	r2, #0
 80067f2:	2140      	movs	r1, #64	; 0x40
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 faef 	bl	8006dd8 <UART_WaitOnFlagUntilTimeout>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e006      	b.n	8006812 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2220      	movs	r2, #32
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800680c:	2300      	movs	r3, #0
 800680e:	e000      	b.n	8006812 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006810:	2302      	movs	r3, #2
  }
}
 8006812:	4618      	mov	r0, r3
 8006814:	3720      	adds	r7, #32
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	60f8      	str	r0, [r7, #12]
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	4613      	mov	r3, r2
 8006826:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b20      	cmp	r3, #32
 8006832:	d11d      	bne.n	8006870 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <HAL_UART_Receive_IT+0x26>
 800683a:	88fb      	ldrh	r3, [r7, #6]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e016      	b.n	8006872 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800684a:	2b01      	cmp	r3, #1
 800684c:	d101      	bne.n	8006852 <HAL_UART_Receive_IT+0x38>
 800684e:	2302      	movs	r3, #2
 8006850:	e00f      	b.n	8006872 <HAL_UART_Receive_IT+0x58>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006860:	88fb      	ldrh	r3, [r7, #6]
 8006862:	461a      	mov	r2, r3
 8006864:	68b9      	ldr	r1, [r7, #8]
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 fb24 	bl	8006eb4 <UART_Start_Receive_IT>
 800686c:	4603      	mov	r3, r0
 800686e:	e000      	b.n	8006872 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006870:	2302      	movs	r3, #2
  }
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
	...

0800687c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b0ba      	sub	sp, #232	; 0xe8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b2:	f003 030f 	and.w	r3, r3, #15
 80068b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80068ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10f      	bne.n	80068e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c6:	f003 0320 	and.w	r3, r3, #32
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d009      	beq.n	80068e2 <HAL_UART_IRQHandler+0x66>
 80068ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d2:	f003 0320 	and.w	r3, r3, #32
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fc07 	bl	80070ee <UART_Receive_IT>
      return;
 80068e0:	e256      	b.n	8006d90 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 80de 	beq.w	8006aa8 <HAL_UART_IRQHandler+0x22c>
 80068ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d106      	bne.n	8006906 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 80d1 	beq.w	8006aa8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00b      	beq.n	800692a <HAL_UART_IRQHandler+0xae>
 8006912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	f043 0201 	orr.w	r2, r3, #1
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800692a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800692e:	f003 0304 	and.w	r3, r3, #4
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00b      	beq.n	800694e <HAL_UART_IRQHandler+0xd2>
 8006936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d005      	beq.n	800694e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	f043 0202 	orr.w	r2, r3, #2
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800694e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00b      	beq.n	8006972 <HAL_UART_IRQHandler+0xf6>
 800695a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d005      	beq.n	8006972 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	f043 0204 	orr.w	r2, r3, #4
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006976:	f003 0308 	and.w	r3, r3, #8
 800697a:	2b00      	cmp	r3, #0
 800697c:	d011      	beq.n	80069a2 <HAL_UART_IRQHandler+0x126>
 800697e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	2b00      	cmp	r3, #0
 8006988:	d105      	bne.n	8006996 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800698a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d005      	beq.n	80069a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	f043 0208 	orr.w	r2, r3, #8
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f000 81ed 	beq.w	8006d86 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b0:	f003 0320 	and.w	r3, r3, #32
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d008      	beq.n	80069ca <HAL_UART_IRQHandler+0x14e>
 80069b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069bc:	f003 0320 	and.w	r3, r3, #32
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d002      	beq.n	80069ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fb92 	bl	80070ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d4:	2b40      	cmp	r3, #64	; 0x40
 80069d6:	bf0c      	ite	eq
 80069d8:	2301      	moveq	r3, #1
 80069da:	2300      	movne	r3, #0
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e6:	f003 0308 	and.w	r3, r3, #8
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d103      	bne.n	80069f6 <HAL_UART_IRQHandler+0x17a>
 80069ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d04f      	beq.n	8006a96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fa9a 	bl	8006f30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a06:	2b40      	cmp	r3, #64	; 0x40
 8006a08:	d141      	bne.n	8006a8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3314      	adds	r3, #20
 8006a10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3314      	adds	r3, #20
 8006a32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1d9      	bne.n	8006a0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d013      	beq.n	8006a86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a62:	4a7d      	ldr	r2, [pc, #500]	; (8006c58 <HAL_UART_IRQHandler+0x3dc>)
 8006a64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fc fa3b 	bl	8002ee6 <HAL_DMA_Abort_IT>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d016      	beq.n	8006aa4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a80:	4610      	mov	r0, r2
 8006a82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a84:	e00e      	b.n	8006aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f990 	bl	8006dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8c:	e00a      	b.n	8006aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f98c 	bl	8006dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a94:	e006      	b.n	8006aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f988 	bl	8006dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006aa2:	e170      	b.n	8006d86 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa4:	bf00      	nop
    return;
 8006aa6:	e16e      	b.n	8006d86 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	f040 814a 	bne.w	8006d46 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab6:	f003 0310 	and.w	r3, r3, #16
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 8143 	beq.w	8006d46 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac4:	f003 0310 	and.w	r3, r3, #16
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 813c 	beq.w	8006d46 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60bb      	str	r3, [r7, #8]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	60bb      	str	r3, [r7, #8]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	60bb      	str	r3, [r7, #8]
 8006ae2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aee:	2b40      	cmp	r3, #64	; 0x40
 8006af0:	f040 80b4 	bne.w	8006c5c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 8140 	beq.w	8006d8a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b12:	429a      	cmp	r2, r3
 8006b14:	f080 8139 	bcs.w	8006d8a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b2a:	f000 8088 	beq.w	8006c3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	330c      	adds	r3, #12
 8006b34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b3c:	e853 3f00 	ldrex	r3, [r3]
 8006b40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	330c      	adds	r3, #12
 8006b56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1d9      	bne.n	8006b2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3314      	adds	r3, #20
 8006b80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b8c:	f023 0301 	bic.w	r3, r3, #1
 8006b90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3314      	adds	r3, #20
 8006b9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ba2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ba6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e1      	bne.n	8006b7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3314      	adds	r3, #20
 8006bbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3314      	adds	r3, #20
 8006bd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006bda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006bdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006be0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e3      	bne.n	8006bb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	330c      	adds	r3, #12
 8006c02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c06:	e853 3f00 	ldrex	r3, [r3]
 8006c0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c0e:	f023 0310 	bic.w	r3, r3, #16
 8006c12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	330c      	adds	r3, #12
 8006c1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c20:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c28:	e841 2300 	strex	r3, r2, [r1]
 8006c2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1e3      	bne.n	8006bfc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fc f8e4 	bl	8002e06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f8b6 	bl	8006dc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c54:	e099      	b.n	8006d8a <HAL_UART_IRQHandler+0x50e>
 8006c56:	bf00      	nop
 8006c58:	08006ff7 	.word	0x08006ff7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 808b 	beq.w	8006d8e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006c78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 8086 	beq.w	8006d8e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	330c      	adds	r3, #12
 8006c88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8c:	e853 3f00 	ldrex	r3, [r3]
 8006c90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	330c      	adds	r3, #12
 8006ca2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006ca6:	647a      	str	r2, [r7, #68]	; 0x44
 8006ca8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e3      	bne.n	8006c82 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3314      	adds	r3, #20
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	623b      	str	r3, [r7, #32]
   return(result);
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	f023 0301 	bic.w	r3, r3, #1
 8006cd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3314      	adds	r3, #20
 8006cda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006cde:	633a      	str	r2, [r7, #48]	; 0x30
 8006ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e3      	bne.n	8006cba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	330c      	adds	r3, #12
 8006d06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	e853 3f00 	ldrex	r3, [r3]
 8006d0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 0310 	bic.w	r3, r3, #16
 8006d16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	330c      	adds	r3, #12
 8006d20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d24:	61fa      	str	r2, [r7, #28]
 8006d26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d28:	69b9      	ldr	r1, [r7, #24]
 8006d2a:	69fa      	ldr	r2, [r7, #28]
 8006d2c:	e841 2300 	strex	r3, r2, [r1]
 8006d30:	617b      	str	r3, [r7, #20]
   return(result);
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1e3      	bne.n	8006d00 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f83e 	bl	8006dc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d44:	e023      	b.n	8006d8e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d009      	beq.n	8006d66 <HAL_UART_IRQHandler+0x4ea>
 8006d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f95d 	bl	800701e <UART_Transmit_IT>
    return;
 8006d64:	e014      	b.n	8006d90 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00e      	beq.n	8006d90 <HAL_UART_IRQHandler+0x514>
 8006d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d008      	beq.n	8006d90 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f99d 	bl	80070be <UART_EndTransmit_IT>
    return;
 8006d84:	e004      	b.n	8006d90 <HAL_UART_IRQHandler+0x514>
    return;
 8006d86:	bf00      	nop
 8006d88:	e002      	b.n	8006d90 <HAL_UART_IRQHandler+0x514>
      return;
 8006d8a:	bf00      	nop
 8006d8c:	e000      	b.n	8006d90 <HAL_UART_IRQHandler+0x514>
      return;
 8006d8e:	bf00      	nop
  }
}
 8006d90:	37e8      	adds	r7, #232	; 0xe8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop

08006d98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b090      	sub	sp, #64	; 0x40
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	603b      	str	r3, [r7, #0]
 8006de4:	4613      	mov	r3, r2
 8006de6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de8:	e050      	b.n	8006e8c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006df0:	d04c      	beq.n	8006e8c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d007      	beq.n	8006e08 <UART_WaitOnFlagUntilTimeout+0x30>
 8006df8:	f7fb fec4 	bl	8002b84 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d241      	bcs.n	8006e8c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	330c      	adds	r3, #12
 8006e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e12:	e853 3f00 	ldrex	r3, [r3]
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	330c      	adds	r3, #12
 8006e26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e28:	637a      	str	r2, [r7, #52]	; 0x34
 8006e2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e30:	e841 2300 	strex	r3, r2, [r1]
 8006e34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e5      	bne.n	8006e08 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3314      	adds	r3, #20
 8006e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	e853 3f00 	ldrex	r3, [r3]
 8006e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f023 0301 	bic.w	r3, r3, #1
 8006e52:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3314      	adds	r3, #20
 8006e5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e5c:	623a      	str	r2, [r7, #32]
 8006e5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	69f9      	ldr	r1, [r7, #28]
 8006e62:	6a3a      	ldr	r2, [r7, #32]
 8006e64:	e841 2300 	strex	r3, r2, [r1]
 8006e68:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e5      	bne.n	8006e3c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2220      	movs	r2, #32
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e00f      	b.n	8006eac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	4013      	ands	r3, r2
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	bf0c      	ite	eq
 8006e9c:	2301      	moveq	r3, #1
 8006e9e:	2300      	movne	r3, #0
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	79fb      	ldrb	r3, [r7, #7]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d09f      	beq.n	8006dea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3740      	adds	r7, #64	; 0x40
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	88fa      	ldrh	r2, [r7, #6]
 8006ecc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	88fa      	ldrh	r2, [r7, #6]
 8006ed2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2222      	movs	r2, #34	; 0x22
 8006ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d007      	beq.n	8006f02 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68da      	ldr	r2, [r3, #12]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f00:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	695a      	ldr	r2, [r3, #20]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f042 0201 	orr.w	r2, r2, #1
 8006f10:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f042 0220 	orr.w	r2, r2, #32
 8006f20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b095      	sub	sp, #84	; 0x54
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	330c      	adds	r3, #12
 8006f3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f42:	e853 3f00 	ldrex	r3, [r3]
 8006f46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	330c      	adds	r3, #12
 8006f56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f58:	643a      	str	r2, [r7, #64]	; 0x40
 8006f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f60:	e841 2300 	strex	r3, r2, [r1]
 8006f64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e5      	bne.n	8006f38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3314      	adds	r3, #20
 8006f72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	e853 3f00 	ldrex	r3, [r3]
 8006f7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	f023 0301 	bic.w	r3, r3, #1
 8006f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3314      	adds	r3, #20
 8006f8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f94:	e841 2300 	strex	r3, r2, [r1]
 8006f98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e5      	bne.n	8006f6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d119      	bne.n	8006fdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	330c      	adds	r3, #12
 8006fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	f023 0310 	bic.w	r3, r3, #16
 8006fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	330c      	adds	r3, #12
 8006fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fc8:	61ba      	str	r2, [r7, #24]
 8006fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fcc:	6979      	ldr	r1, [r7, #20]
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	e841 2300 	strex	r3, r2, [r1]
 8006fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e5      	bne.n	8006fa8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006fea:	bf00      	nop
 8006fec:	3754      	adds	r7, #84	; 0x54
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007002:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f7ff fecb 	bl	8006dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007016:	bf00      	nop
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800701e:	b480      	push	{r7}
 8007020:	b085      	sub	sp, #20
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b21      	cmp	r3, #33	; 0x21
 8007030:	d13e      	bne.n	80070b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800703a:	d114      	bne.n	8007066 <UART_Transmit_IT+0x48>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d110      	bne.n	8007066 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007058:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	1c9a      	adds	r2, r3, #2
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	621a      	str	r2, [r3, #32]
 8007064:	e008      	b.n	8007078 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	1c59      	adds	r1, r3, #1
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	6211      	str	r1, [r2, #32]
 8007070:	781a      	ldrb	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800707c:	b29b      	uxth	r3, r3
 800707e:	3b01      	subs	r3, #1
 8007080:	b29b      	uxth	r3, r3
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	4619      	mov	r1, r3
 8007086:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10f      	bne.n	80070ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800709a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	e000      	b.n	80070b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070b0:	2302      	movs	r3, #2
  }
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2220      	movs	r2, #32
 80070da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7ff fe5a 	bl	8006d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b08c      	sub	sp, #48	; 0x30
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b22      	cmp	r3, #34	; 0x22
 8007100:	f040 80ab 	bne.w	800725a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800710c:	d117      	bne.n	800713e <UART_Receive_IT+0x50>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d113      	bne.n	800713e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007116:	2300      	movs	r3, #0
 8007118:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	b29b      	uxth	r3, r3
 8007128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712c:	b29a      	uxth	r2, r3
 800712e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007130:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007136:	1c9a      	adds	r2, r3, #2
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	629a      	str	r2, [r3, #40]	; 0x28
 800713c:	e026      	b.n	800718c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007142:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007144:	2300      	movs	r3, #0
 8007146:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007150:	d007      	beq.n	8007162 <UART_Receive_IT+0x74>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10a      	bne.n	8007170 <UART_Receive_IT+0x82>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d106      	bne.n	8007170 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	b2da      	uxtb	r2, r3
 800716a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716c:	701a      	strb	r2, [r3, #0]
 800716e:	e008      	b.n	8007182 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	b2db      	uxtb	r3, r3
 8007178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800717c:	b2da      	uxtb	r2, r3
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007180:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007186:	1c5a      	adds	r2, r3, #1
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007190:	b29b      	uxth	r3, r3
 8007192:	3b01      	subs	r3, #1
 8007194:	b29b      	uxth	r3, r3
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	4619      	mov	r1, r3
 800719a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800719c:	2b00      	cmp	r3, #0
 800719e:	d15a      	bne.n	8007256 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68da      	ldr	r2, [r3, #12]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 0220 	bic.w	r2, r2, #32
 80071ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68da      	ldr	r2, [r3, #12]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	695a      	ldr	r2, [r3, #20]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f022 0201 	bic.w	r2, r2, #1
 80071ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2220      	movs	r2, #32
 80071d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d135      	bne.n	800724c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	330c      	adds	r3, #12
 80071ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	613b      	str	r3, [r7, #16]
   return(result);
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	f023 0310 	bic.w	r3, r3, #16
 80071fc:	627b      	str	r3, [r7, #36]	; 0x24
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	330c      	adds	r3, #12
 8007204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007206:	623a      	str	r2, [r7, #32]
 8007208:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	69f9      	ldr	r1, [r7, #28]
 800720c:	6a3a      	ldr	r2, [r7, #32]
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	61bb      	str	r3, [r7, #24]
   return(result);
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e5      	bne.n	80071e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0310 	and.w	r3, r3, #16
 8007224:	2b10      	cmp	r3, #16
 8007226:	d10a      	bne.n	800723e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007228:	2300      	movs	r3, #0
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7ff fdbb 	bl	8006dc0 <HAL_UARTEx_RxEventCallback>
 800724a:	e002      	b.n	8007252 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7fa fad9 	bl	8001804 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	e002      	b.n	800725c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	e000      	b.n	800725c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800725a:	2302      	movs	r3, #2
  }
}
 800725c:	4618      	mov	r0, r3
 800725e:	3730      	adds	r7, #48	; 0x30
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007268:	b0c0      	sub	sp, #256	; 0x100
 800726a:	af00      	add	r7, sp, #0
 800726c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800727c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007280:	68d9      	ldr	r1, [r3, #12]
 8007282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	ea40 0301 	orr.w	r3, r0, r1
 800728c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800728e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	431a      	orrs	r2, r3
 800729c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	431a      	orrs	r2, r3
 80072a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80072bc:	f021 010c 	bic.w	r1, r1, #12
 80072c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072ca:	430b      	orrs	r3, r1
 80072cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80072da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072de:	6999      	ldr	r1, [r3, #24]
 80072e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	ea40 0301 	orr.w	r3, r0, r1
 80072ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	4b8f      	ldr	r3, [pc, #572]	; (8007530 <UART_SetConfig+0x2cc>)
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d005      	beq.n	8007304 <UART_SetConfig+0xa0>
 80072f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	4b8d      	ldr	r3, [pc, #564]	; (8007534 <UART_SetConfig+0x2d0>)
 8007300:	429a      	cmp	r2, r3
 8007302:	d104      	bne.n	800730e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007304:	f7fe f9c8 	bl	8005698 <HAL_RCC_GetPCLK2Freq>
 8007308:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800730c:	e003      	b.n	8007316 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800730e:	f7fe f9af 	bl	8005670 <HAL_RCC_GetPCLK1Freq>
 8007312:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007320:	f040 810c 	bne.w	800753c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007328:	2200      	movs	r2, #0
 800732a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800732e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007332:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007336:	4622      	mov	r2, r4
 8007338:	462b      	mov	r3, r5
 800733a:	1891      	adds	r1, r2, r2
 800733c:	65b9      	str	r1, [r7, #88]	; 0x58
 800733e:	415b      	adcs	r3, r3
 8007340:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007342:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007346:	4621      	mov	r1, r4
 8007348:	eb12 0801 	adds.w	r8, r2, r1
 800734c:	4629      	mov	r1, r5
 800734e:	eb43 0901 	adc.w	r9, r3, r1
 8007352:	f04f 0200 	mov.w	r2, #0
 8007356:	f04f 0300 	mov.w	r3, #0
 800735a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800735e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007366:	4690      	mov	r8, r2
 8007368:	4699      	mov	r9, r3
 800736a:	4623      	mov	r3, r4
 800736c:	eb18 0303 	adds.w	r3, r8, r3
 8007370:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007374:	462b      	mov	r3, r5
 8007376:	eb49 0303 	adc.w	r3, r9, r3
 800737a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800737e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800738a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800738e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007392:	460b      	mov	r3, r1
 8007394:	18db      	adds	r3, r3, r3
 8007396:	653b      	str	r3, [r7, #80]	; 0x50
 8007398:	4613      	mov	r3, r2
 800739a:	eb42 0303 	adc.w	r3, r2, r3
 800739e:	657b      	str	r3, [r7, #84]	; 0x54
 80073a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80073a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80073a8:	f7f9 fc76 	bl	8000c98 <__aeabi_uldivmod>
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	4b61      	ldr	r3, [pc, #388]	; (8007538 <UART_SetConfig+0x2d4>)
 80073b2:	fba3 2302 	umull	r2, r3, r3, r2
 80073b6:	095b      	lsrs	r3, r3, #5
 80073b8:	011c      	lsls	r4, r3, #4
 80073ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073be:	2200      	movs	r2, #0
 80073c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80073c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80073cc:	4642      	mov	r2, r8
 80073ce:	464b      	mov	r3, r9
 80073d0:	1891      	adds	r1, r2, r2
 80073d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80073d4:	415b      	adcs	r3, r3
 80073d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80073dc:	4641      	mov	r1, r8
 80073de:	eb12 0a01 	adds.w	sl, r2, r1
 80073e2:	4649      	mov	r1, r9
 80073e4:	eb43 0b01 	adc.w	fp, r3, r1
 80073e8:	f04f 0200 	mov.w	r2, #0
 80073ec:	f04f 0300 	mov.w	r3, #0
 80073f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073fc:	4692      	mov	sl, r2
 80073fe:	469b      	mov	fp, r3
 8007400:	4643      	mov	r3, r8
 8007402:	eb1a 0303 	adds.w	r3, sl, r3
 8007406:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800740a:	464b      	mov	r3, r9
 800740c:	eb4b 0303 	adc.w	r3, fp, r3
 8007410:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007420:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007424:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007428:	460b      	mov	r3, r1
 800742a:	18db      	adds	r3, r3, r3
 800742c:	643b      	str	r3, [r7, #64]	; 0x40
 800742e:	4613      	mov	r3, r2
 8007430:	eb42 0303 	adc.w	r3, r2, r3
 8007434:	647b      	str	r3, [r7, #68]	; 0x44
 8007436:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800743a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800743e:	f7f9 fc2b 	bl	8000c98 <__aeabi_uldivmod>
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	4611      	mov	r1, r2
 8007448:	4b3b      	ldr	r3, [pc, #236]	; (8007538 <UART_SetConfig+0x2d4>)
 800744a:	fba3 2301 	umull	r2, r3, r3, r1
 800744e:	095b      	lsrs	r3, r3, #5
 8007450:	2264      	movs	r2, #100	; 0x64
 8007452:	fb02 f303 	mul.w	r3, r2, r3
 8007456:	1acb      	subs	r3, r1, r3
 8007458:	00db      	lsls	r3, r3, #3
 800745a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800745e:	4b36      	ldr	r3, [pc, #216]	; (8007538 <UART_SetConfig+0x2d4>)
 8007460:	fba3 2302 	umull	r2, r3, r3, r2
 8007464:	095b      	lsrs	r3, r3, #5
 8007466:	005b      	lsls	r3, r3, #1
 8007468:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800746c:	441c      	add	r4, r3
 800746e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007472:	2200      	movs	r2, #0
 8007474:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007478:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800747c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007480:	4642      	mov	r2, r8
 8007482:	464b      	mov	r3, r9
 8007484:	1891      	adds	r1, r2, r2
 8007486:	63b9      	str	r1, [r7, #56]	; 0x38
 8007488:	415b      	adcs	r3, r3
 800748a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800748c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007490:	4641      	mov	r1, r8
 8007492:	1851      	adds	r1, r2, r1
 8007494:	6339      	str	r1, [r7, #48]	; 0x30
 8007496:	4649      	mov	r1, r9
 8007498:	414b      	adcs	r3, r1
 800749a:	637b      	str	r3, [r7, #52]	; 0x34
 800749c:	f04f 0200 	mov.w	r2, #0
 80074a0:	f04f 0300 	mov.w	r3, #0
 80074a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80074a8:	4659      	mov	r1, fp
 80074aa:	00cb      	lsls	r3, r1, #3
 80074ac:	4651      	mov	r1, sl
 80074ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074b2:	4651      	mov	r1, sl
 80074b4:	00ca      	lsls	r2, r1, #3
 80074b6:	4610      	mov	r0, r2
 80074b8:	4619      	mov	r1, r3
 80074ba:	4603      	mov	r3, r0
 80074bc:	4642      	mov	r2, r8
 80074be:	189b      	adds	r3, r3, r2
 80074c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074c4:	464b      	mov	r3, r9
 80074c6:	460a      	mov	r2, r1
 80074c8:	eb42 0303 	adc.w	r3, r2, r3
 80074cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80074dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80074e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80074e4:	460b      	mov	r3, r1
 80074e6:	18db      	adds	r3, r3, r3
 80074e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80074ea:	4613      	mov	r3, r2
 80074ec:	eb42 0303 	adc.w	r3, r2, r3
 80074f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80074fa:	f7f9 fbcd 	bl	8000c98 <__aeabi_uldivmod>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	4b0d      	ldr	r3, [pc, #52]	; (8007538 <UART_SetConfig+0x2d4>)
 8007504:	fba3 1302 	umull	r1, r3, r3, r2
 8007508:	095b      	lsrs	r3, r3, #5
 800750a:	2164      	movs	r1, #100	; 0x64
 800750c:	fb01 f303 	mul.w	r3, r1, r3
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	00db      	lsls	r3, r3, #3
 8007514:	3332      	adds	r3, #50	; 0x32
 8007516:	4a08      	ldr	r2, [pc, #32]	; (8007538 <UART_SetConfig+0x2d4>)
 8007518:	fba2 2303 	umull	r2, r3, r2, r3
 800751c:	095b      	lsrs	r3, r3, #5
 800751e:	f003 0207 	and.w	r2, r3, #7
 8007522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4422      	add	r2, r4
 800752a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800752c:	e105      	b.n	800773a <UART_SetConfig+0x4d6>
 800752e:	bf00      	nop
 8007530:	40011000 	.word	0x40011000
 8007534:	40011400 	.word	0x40011400
 8007538:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800753c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007540:	2200      	movs	r2, #0
 8007542:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007546:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800754a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800754e:	4642      	mov	r2, r8
 8007550:	464b      	mov	r3, r9
 8007552:	1891      	adds	r1, r2, r2
 8007554:	6239      	str	r1, [r7, #32]
 8007556:	415b      	adcs	r3, r3
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
 800755a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800755e:	4641      	mov	r1, r8
 8007560:	1854      	adds	r4, r2, r1
 8007562:	4649      	mov	r1, r9
 8007564:	eb43 0501 	adc.w	r5, r3, r1
 8007568:	f04f 0200 	mov.w	r2, #0
 800756c:	f04f 0300 	mov.w	r3, #0
 8007570:	00eb      	lsls	r3, r5, #3
 8007572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007576:	00e2      	lsls	r2, r4, #3
 8007578:	4614      	mov	r4, r2
 800757a:	461d      	mov	r5, r3
 800757c:	4643      	mov	r3, r8
 800757e:	18e3      	adds	r3, r4, r3
 8007580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007584:	464b      	mov	r3, r9
 8007586:	eb45 0303 	adc.w	r3, r5, r3
 800758a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800758e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800759a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800759e:	f04f 0200 	mov.w	r2, #0
 80075a2:	f04f 0300 	mov.w	r3, #0
 80075a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80075aa:	4629      	mov	r1, r5
 80075ac:	008b      	lsls	r3, r1, #2
 80075ae:	4621      	mov	r1, r4
 80075b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075b4:	4621      	mov	r1, r4
 80075b6:	008a      	lsls	r2, r1, #2
 80075b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80075bc:	f7f9 fb6c 	bl	8000c98 <__aeabi_uldivmod>
 80075c0:	4602      	mov	r2, r0
 80075c2:	460b      	mov	r3, r1
 80075c4:	4b60      	ldr	r3, [pc, #384]	; (8007748 <UART_SetConfig+0x4e4>)
 80075c6:	fba3 2302 	umull	r2, r3, r3, r2
 80075ca:	095b      	lsrs	r3, r3, #5
 80075cc:	011c      	lsls	r4, r3, #4
 80075ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075d2:	2200      	movs	r2, #0
 80075d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80075d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80075dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80075e0:	4642      	mov	r2, r8
 80075e2:	464b      	mov	r3, r9
 80075e4:	1891      	adds	r1, r2, r2
 80075e6:	61b9      	str	r1, [r7, #24]
 80075e8:	415b      	adcs	r3, r3
 80075ea:	61fb      	str	r3, [r7, #28]
 80075ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075f0:	4641      	mov	r1, r8
 80075f2:	1851      	adds	r1, r2, r1
 80075f4:	6139      	str	r1, [r7, #16]
 80075f6:	4649      	mov	r1, r9
 80075f8:	414b      	adcs	r3, r1
 80075fa:	617b      	str	r3, [r7, #20]
 80075fc:	f04f 0200 	mov.w	r2, #0
 8007600:	f04f 0300 	mov.w	r3, #0
 8007604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007608:	4659      	mov	r1, fp
 800760a:	00cb      	lsls	r3, r1, #3
 800760c:	4651      	mov	r1, sl
 800760e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007612:	4651      	mov	r1, sl
 8007614:	00ca      	lsls	r2, r1, #3
 8007616:	4610      	mov	r0, r2
 8007618:	4619      	mov	r1, r3
 800761a:	4603      	mov	r3, r0
 800761c:	4642      	mov	r2, r8
 800761e:	189b      	adds	r3, r3, r2
 8007620:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007624:	464b      	mov	r3, r9
 8007626:	460a      	mov	r2, r1
 8007628:	eb42 0303 	adc.w	r3, r2, r3
 800762c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	67bb      	str	r3, [r7, #120]	; 0x78
 800763a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800763c:	f04f 0200 	mov.w	r2, #0
 8007640:	f04f 0300 	mov.w	r3, #0
 8007644:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007648:	4649      	mov	r1, r9
 800764a:	008b      	lsls	r3, r1, #2
 800764c:	4641      	mov	r1, r8
 800764e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007652:	4641      	mov	r1, r8
 8007654:	008a      	lsls	r2, r1, #2
 8007656:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800765a:	f7f9 fb1d 	bl	8000c98 <__aeabi_uldivmod>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	4b39      	ldr	r3, [pc, #228]	; (8007748 <UART_SetConfig+0x4e4>)
 8007664:	fba3 1302 	umull	r1, r3, r3, r2
 8007668:	095b      	lsrs	r3, r3, #5
 800766a:	2164      	movs	r1, #100	; 0x64
 800766c:	fb01 f303 	mul.w	r3, r1, r3
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	011b      	lsls	r3, r3, #4
 8007674:	3332      	adds	r3, #50	; 0x32
 8007676:	4a34      	ldr	r2, [pc, #208]	; (8007748 <UART_SetConfig+0x4e4>)
 8007678:	fba2 2303 	umull	r2, r3, r2, r3
 800767c:	095b      	lsrs	r3, r3, #5
 800767e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007682:	441c      	add	r4, r3
 8007684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007688:	2200      	movs	r2, #0
 800768a:	673b      	str	r3, [r7, #112]	; 0x70
 800768c:	677a      	str	r2, [r7, #116]	; 0x74
 800768e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007692:	4642      	mov	r2, r8
 8007694:	464b      	mov	r3, r9
 8007696:	1891      	adds	r1, r2, r2
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	415b      	adcs	r3, r3
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076a2:	4641      	mov	r1, r8
 80076a4:	1851      	adds	r1, r2, r1
 80076a6:	6039      	str	r1, [r7, #0]
 80076a8:	4649      	mov	r1, r9
 80076aa:	414b      	adcs	r3, r1
 80076ac:	607b      	str	r3, [r7, #4]
 80076ae:	f04f 0200 	mov.w	r2, #0
 80076b2:	f04f 0300 	mov.w	r3, #0
 80076b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076ba:	4659      	mov	r1, fp
 80076bc:	00cb      	lsls	r3, r1, #3
 80076be:	4651      	mov	r1, sl
 80076c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076c4:	4651      	mov	r1, sl
 80076c6:	00ca      	lsls	r2, r1, #3
 80076c8:	4610      	mov	r0, r2
 80076ca:	4619      	mov	r1, r3
 80076cc:	4603      	mov	r3, r0
 80076ce:	4642      	mov	r2, r8
 80076d0:	189b      	adds	r3, r3, r2
 80076d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80076d4:	464b      	mov	r3, r9
 80076d6:	460a      	mov	r2, r1
 80076d8:	eb42 0303 	adc.w	r3, r2, r3
 80076dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	663b      	str	r3, [r7, #96]	; 0x60
 80076e8:	667a      	str	r2, [r7, #100]	; 0x64
 80076ea:	f04f 0200 	mov.w	r2, #0
 80076ee:	f04f 0300 	mov.w	r3, #0
 80076f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80076f6:	4649      	mov	r1, r9
 80076f8:	008b      	lsls	r3, r1, #2
 80076fa:	4641      	mov	r1, r8
 80076fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007700:	4641      	mov	r1, r8
 8007702:	008a      	lsls	r2, r1, #2
 8007704:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007708:	f7f9 fac6 	bl	8000c98 <__aeabi_uldivmod>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	4b0d      	ldr	r3, [pc, #52]	; (8007748 <UART_SetConfig+0x4e4>)
 8007712:	fba3 1302 	umull	r1, r3, r3, r2
 8007716:	095b      	lsrs	r3, r3, #5
 8007718:	2164      	movs	r1, #100	; 0x64
 800771a:	fb01 f303 	mul.w	r3, r1, r3
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	011b      	lsls	r3, r3, #4
 8007722:	3332      	adds	r3, #50	; 0x32
 8007724:	4a08      	ldr	r2, [pc, #32]	; (8007748 <UART_SetConfig+0x4e4>)
 8007726:	fba2 2303 	umull	r2, r3, r2, r3
 800772a:	095b      	lsrs	r3, r3, #5
 800772c:	f003 020f 	and.w	r2, r3, #15
 8007730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4422      	add	r2, r4
 8007738:	609a      	str	r2, [r3, #8]
}
 800773a:	bf00      	nop
 800773c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007740:	46bd      	mov	sp, r7
 8007742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007746:	bf00      	nop
 8007748:	51eb851f 	.word	0x51eb851f

0800774c <atof>:
 800774c:	2100      	movs	r1, #0
 800774e:	f001 bb71 	b.w	8008e34 <strtod>
	...

08007754 <__errno>:
 8007754:	4b01      	ldr	r3, [pc, #4]	; (800775c <__errno+0x8>)
 8007756:	6818      	ldr	r0, [r3, #0]
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	2000000c 	.word	0x2000000c

08007760 <__libc_init_array>:
 8007760:	b570      	push	{r4, r5, r6, lr}
 8007762:	4d0d      	ldr	r5, [pc, #52]	; (8007798 <__libc_init_array+0x38>)
 8007764:	4c0d      	ldr	r4, [pc, #52]	; (800779c <__libc_init_array+0x3c>)
 8007766:	1b64      	subs	r4, r4, r5
 8007768:	10a4      	asrs	r4, r4, #2
 800776a:	2600      	movs	r6, #0
 800776c:	42a6      	cmp	r6, r4
 800776e:	d109      	bne.n	8007784 <__libc_init_array+0x24>
 8007770:	4d0b      	ldr	r5, [pc, #44]	; (80077a0 <__libc_init_array+0x40>)
 8007772:	4c0c      	ldr	r4, [pc, #48]	; (80077a4 <__libc_init_array+0x44>)
 8007774:	f004 fb32 	bl	800bddc <_init>
 8007778:	1b64      	subs	r4, r4, r5
 800777a:	10a4      	asrs	r4, r4, #2
 800777c:	2600      	movs	r6, #0
 800777e:	42a6      	cmp	r6, r4
 8007780:	d105      	bne.n	800778e <__libc_init_array+0x2e>
 8007782:	bd70      	pop	{r4, r5, r6, pc}
 8007784:	f855 3b04 	ldr.w	r3, [r5], #4
 8007788:	4798      	blx	r3
 800778a:	3601      	adds	r6, #1
 800778c:	e7ee      	b.n	800776c <__libc_init_array+0xc>
 800778e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007792:	4798      	blx	r3
 8007794:	3601      	adds	r6, #1
 8007796:	e7f2      	b.n	800777e <__libc_init_array+0x1e>
 8007798:	0800c6a0 	.word	0x0800c6a0
 800779c:	0800c6a0 	.word	0x0800c6a0
 80077a0:	0800c6a0 	.word	0x0800c6a0
 80077a4:	0800c6a4 	.word	0x0800c6a4

080077a8 <memcpy>:
 80077a8:	440a      	add	r2, r1
 80077aa:	4291      	cmp	r1, r2
 80077ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80077b0:	d100      	bne.n	80077b4 <memcpy+0xc>
 80077b2:	4770      	bx	lr
 80077b4:	b510      	push	{r4, lr}
 80077b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077be:	4291      	cmp	r1, r2
 80077c0:	d1f9      	bne.n	80077b6 <memcpy+0xe>
 80077c2:	bd10      	pop	{r4, pc}

080077c4 <memset>:
 80077c4:	4402      	add	r2, r0
 80077c6:	4603      	mov	r3, r0
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d100      	bne.n	80077ce <memset+0xa>
 80077cc:	4770      	bx	lr
 80077ce:	f803 1b01 	strb.w	r1, [r3], #1
 80077d2:	e7f9      	b.n	80077c8 <memset+0x4>

080077d4 <__cvt>:
 80077d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077d8:	ec55 4b10 	vmov	r4, r5, d0
 80077dc:	2d00      	cmp	r5, #0
 80077de:	460e      	mov	r6, r1
 80077e0:	4619      	mov	r1, r3
 80077e2:	462b      	mov	r3, r5
 80077e4:	bfbb      	ittet	lt
 80077e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80077ea:	461d      	movlt	r5, r3
 80077ec:	2300      	movge	r3, #0
 80077ee:	232d      	movlt	r3, #45	; 0x2d
 80077f0:	700b      	strb	r3, [r1, #0]
 80077f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80077f8:	4691      	mov	r9, r2
 80077fa:	f023 0820 	bic.w	r8, r3, #32
 80077fe:	bfbc      	itt	lt
 8007800:	4622      	movlt	r2, r4
 8007802:	4614      	movlt	r4, r2
 8007804:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007808:	d005      	beq.n	8007816 <__cvt+0x42>
 800780a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800780e:	d100      	bne.n	8007812 <__cvt+0x3e>
 8007810:	3601      	adds	r6, #1
 8007812:	2102      	movs	r1, #2
 8007814:	e000      	b.n	8007818 <__cvt+0x44>
 8007816:	2103      	movs	r1, #3
 8007818:	ab03      	add	r3, sp, #12
 800781a:	9301      	str	r3, [sp, #4]
 800781c:	ab02      	add	r3, sp, #8
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	ec45 4b10 	vmov	d0, r4, r5
 8007824:	4653      	mov	r3, sl
 8007826:	4632      	mov	r2, r6
 8007828:	f001 fc5e 	bl	80090e8 <_dtoa_r>
 800782c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007830:	4607      	mov	r7, r0
 8007832:	d102      	bne.n	800783a <__cvt+0x66>
 8007834:	f019 0f01 	tst.w	r9, #1
 8007838:	d022      	beq.n	8007880 <__cvt+0xac>
 800783a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800783e:	eb07 0906 	add.w	r9, r7, r6
 8007842:	d110      	bne.n	8007866 <__cvt+0x92>
 8007844:	783b      	ldrb	r3, [r7, #0]
 8007846:	2b30      	cmp	r3, #48	; 0x30
 8007848:	d10a      	bne.n	8007860 <__cvt+0x8c>
 800784a:	2200      	movs	r2, #0
 800784c:	2300      	movs	r3, #0
 800784e:	4620      	mov	r0, r4
 8007850:	4629      	mov	r1, r5
 8007852:	f7f9 f941 	bl	8000ad8 <__aeabi_dcmpeq>
 8007856:	b918      	cbnz	r0, 8007860 <__cvt+0x8c>
 8007858:	f1c6 0601 	rsb	r6, r6, #1
 800785c:	f8ca 6000 	str.w	r6, [sl]
 8007860:	f8da 3000 	ldr.w	r3, [sl]
 8007864:	4499      	add	r9, r3
 8007866:	2200      	movs	r2, #0
 8007868:	2300      	movs	r3, #0
 800786a:	4620      	mov	r0, r4
 800786c:	4629      	mov	r1, r5
 800786e:	f7f9 f933 	bl	8000ad8 <__aeabi_dcmpeq>
 8007872:	b108      	cbz	r0, 8007878 <__cvt+0xa4>
 8007874:	f8cd 900c 	str.w	r9, [sp, #12]
 8007878:	2230      	movs	r2, #48	; 0x30
 800787a:	9b03      	ldr	r3, [sp, #12]
 800787c:	454b      	cmp	r3, r9
 800787e:	d307      	bcc.n	8007890 <__cvt+0xbc>
 8007880:	9b03      	ldr	r3, [sp, #12]
 8007882:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007884:	1bdb      	subs	r3, r3, r7
 8007886:	4638      	mov	r0, r7
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	b004      	add	sp, #16
 800788c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007890:	1c59      	adds	r1, r3, #1
 8007892:	9103      	str	r1, [sp, #12]
 8007894:	701a      	strb	r2, [r3, #0]
 8007896:	e7f0      	b.n	800787a <__cvt+0xa6>

08007898 <__exponent>:
 8007898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800789a:	4603      	mov	r3, r0
 800789c:	2900      	cmp	r1, #0
 800789e:	bfb8      	it	lt
 80078a0:	4249      	neglt	r1, r1
 80078a2:	f803 2b02 	strb.w	r2, [r3], #2
 80078a6:	bfb4      	ite	lt
 80078a8:	222d      	movlt	r2, #45	; 0x2d
 80078aa:	222b      	movge	r2, #43	; 0x2b
 80078ac:	2909      	cmp	r1, #9
 80078ae:	7042      	strb	r2, [r0, #1]
 80078b0:	dd2a      	ble.n	8007908 <__exponent+0x70>
 80078b2:	f10d 0407 	add.w	r4, sp, #7
 80078b6:	46a4      	mov	ip, r4
 80078b8:	270a      	movs	r7, #10
 80078ba:	46a6      	mov	lr, r4
 80078bc:	460a      	mov	r2, r1
 80078be:	fb91 f6f7 	sdiv	r6, r1, r7
 80078c2:	fb07 1516 	mls	r5, r7, r6, r1
 80078c6:	3530      	adds	r5, #48	; 0x30
 80078c8:	2a63      	cmp	r2, #99	; 0x63
 80078ca:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80078ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80078d2:	4631      	mov	r1, r6
 80078d4:	dcf1      	bgt.n	80078ba <__exponent+0x22>
 80078d6:	3130      	adds	r1, #48	; 0x30
 80078d8:	f1ae 0502 	sub.w	r5, lr, #2
 80078dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80078e0:	1c44      	adds	r4, r0, #1
 80078e2:	4629      	mov	r1, r5
 80078e4:	4561      	cmp	r1, ip
 80078e6:	d30a      	bcc.n	80078fe <__exponent+0x66>
 80078e8:	f10d 0209 	add.w	r2, sp, #9
 80078ec:	eba2 020e 	sub.w	r2, r2, lr
 80078f0:	4565      	cmp	r5, ip
 80078f2:	bf88      	it	hi
 80078f4:	2200      	movhi	r2, #0
 80078f6:	4413      	add	r3, r2
 80078f8:	1a18      	subs	r0, r3, r0
 80078fa:	b003      	add	sp, #12
 80078fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007902:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007906:	e7ed      	b.n	80078e4 <__exponent+0x4c>
 8007908:	2330      	movs	r3, #48	; 0x30
 800790a:	3130      	adds	r1, #48	; 0x30
 800790c:	7083      	strb	r3, [r0, #2]
 800790e:	70c1      	strb	r1, [r0, #3]
 8007910:	1d03      	adds	r3, r0, #4
 8007912:	e7f1      	b.n	80078f8 <__exponent+0x60>

08007914 <_printf_float>:
 8007914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007918:	ed2d 8b02 	vpush	{d8}
 800791c:	b08d      	sub	sp, #52	; 0x34
 800791e:	460c      	mov	r4, r1
 8007920:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007924:	4616      	mov	r6, r2
 8007926:	461f      	mov	r7, r3
 8007928:	4605      	mov	r5, r0
 800792a:	f002 fef1 	bl	800a710 <_localeconv_r>
 800792e:	f8d0 a000 	ldr.w	sl, [r0]
 8007932:	4650      	mov	r0, sl
 8007934:	f7f8 fc54 	bl	80001e0 <strlen>
 8007938:	2300      	movs	r3, #0
 800793a:	930a      	str	r3, [sp, #40]	; 0x28
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	9305      	str	r3, [sp, #20]
 8007940:	f8d8 3000 	ldr.w	r3, [r8]
 8007944:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007948:	3307      	adds	r3, #7
 800794a:	f023 0307 	bic.w	r3, r3, #7
 800794e:	f103 0208 	add.w	r2, r3, #8
 8007952:	f8c8 2000 	str.w	r2, [r8]
 8007956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800795e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007962:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007966:	9307      	str	r3, [sp, #28]
 8007968:	f8cd 8018 	str.w	r8, [sp, #24]
 800796c:	ee08 0a10 	vmov	s16, r0
 8007970:	4b9f      	ldr	r3, [pc, #636]	; (8007bf0 <_printf_float+0x2dc>)
 8007972:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007976:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800797a:	f7f9 f8df 	bl	8000b3c <__aeabi_dcmpun>
 800797e:	bb88      	cbnz	r0, 80079e4 <_printf_float+0xd0>
 8007980:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007984:	4b9a      	ldr	r3, [pc, #616]	; (8007bf0 <_printf_float+0x2dc>)
 8007986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800798a:	f7f9 f8b9 	bl	8000b00 <__aeabi_dcmple>
 800798e:	bb48      	cbnz	r0, 80079e4 <_printf_float+0xd0>
 8007990:	2200      	movs	r2, #0
 8007992:	2300      	movs	r3, #0
 8007994:	4640      	mov	r0, r8
 8007996:	4649      	mov	r1, r9
 8007998:	f7f9 f8a8 	bl	8000aec <__aeabi_dcmplt>
 800799c:	b110      	cbz	r0, 80079a4 <_printf_float+0x90>
 800799e:	232d      	movs	r3, #45	; 0x2d
 80079a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079a4:	4b93      	ldr	r3, [pc, #588]	; (8007bf4 <_printf_float+0x2e0>)
 80079a6:	4894      	ldr	r0, [pc, #592]	; (8007bf8 <_printf_float+0x2e4>)
 80079a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80079ac:	bf94      	ite	ls
 80079ae:	4698      	movls	r8, r3
 80079b0:	4680      	movhi	r8, r0
 80079b2:	2303      	movs	r3, #3
 80079b4:	6123      	str	r3, [r4, #16]
 80079b6:	9b05      	ldr	r3, [sp, #20]
 80079b8:	f023 0204 	bic.w	r2, r3, #4
 80079bc:	6022      	str	r2, [r4, #0]
 80079be:	f04f 0900 	mov.w	r9, #0
 80079c2:	9700      	str	r7, [sp, #0]
 80079c4:	4633      	mov	r3, r6
 80079c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80079c8:	4621      	mov	r1, r4
 80079ca:	4628      	mov	r0, r5
 80079cc:	f000 f9d8 	bl	8007d80 <_printf_common>
 80079d0:	3001      	adds	r0, #1
 80079d2:	f040 8090 	bne.w	8007af6 <_printf_float+0x1e2>
 80079d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079da:	b00d      	add	sp, #52	; 0x34
 80079dc:	ecbd 8b02 	vpop	{d8}
 80079e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e4:	4642      	mov	r2, r8
 80079e6:	464b      	mov	r3, r9
 80079e8:	4640      	mov	r0, r8
 80079ea:	4649      	mov	r1, r9
 80079ec:	f7f9 f8a6 	bl	8000b3c <__aeabi_dcmpun>
 80079f0:	b140      	cbz	r0, 8007a04 <_printf_float+0xf0>
 80079f2:	464b      	mov	r3, r9
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	bfbc      	itt	lt
 80079f8:	232d      	movlt	r3, #45	; 0x2d
 80079fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80079fe:	487f      	ldr	r0, [pc, #508]	; (8007bfc <_printf_float+0x2e8>)
 8007a00:	4b7f      	ldr	r3, [pc, #508]	; (8007c00 <_printf_float+0x2ec>)
 8007a02:	e7d1      	b.n	80079a8 <_printf_float+0x94>
 8007a04:	6863      	ldr	r3, [r4, #4]
 8007a06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007a0a:	9206      	str	r2, [sp, #24]
 8007a0c:	1c5a      	adds	r2, r3, #1
 8007a0e:	d13f      	bne.n	8007a90 <_printf_float+0x17c>
 8007a10:	2306      	movs	r3, #6
 8007a12:	6063      	str	r3, [r4, #4]
 8007a14:	9b05      	ldr	r3, [sp, #20]
 8007a16:	6861      	ldr	r1, [r4, #4]
 8007a18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	9303      	str	r3, [sp, #12]
 8007a20:	ab0a      	add	r3, sp, #40	; 0x28
 8007a22:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007a26:	ab09      	add	r3, sp, #36	; 0x24
 8007a28:	ec49 8b10 	vmov	d0, r8, r9
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	6022      	str	r2, [r4, #0]
 8007a30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a34:	4628      	mov	r0, r5
 8007a36:	f7ff fecd 	bl	80077d4 <__cvt>
 8007a3a:	9b06      	ldr	r3, [sp, #24]
 8007a3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a3e:	2b47      	cmp	r3, #71	; 0x47
 8007a40:	4680      	mov	r8, r0
 8007a42:	d108      	bne.n	8007a56 <_printf_float+0x142>
 8007a44:	1cc8      	adds	r0, r1, #3
 8007a46:	db02      	blt.n	8007a4e <_printf_float+0x13a>
 8007a48:	6863      	ldr	r3, [r4, #4]
 8007a4a:	4299      	cmp	r1, r3
 8007a4c:	dd41      	ble.n	8007ad2 <_printf_float+0x1be>
 8007a4e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007a52:	fa5f fb8b 	uxtb.w	fp, fp
 8007a56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a5a:	d820      	bhi.n	8007a9e <_printf_float+0x18a>
 8007a5c:	3901      	subs	r1, #1
 8007a5e:	465a      	mov	r2, fp
 8007a60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a64:	9109      	str	r1, [sp, #36]	; 0x24
 8007a66:	f7ff ff17 	bl	8007898 <__exponent>
 8007a6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a6c:	1813      	adds	r3, r2, r0
 8007a6e:	2a01      	cmp	r2, #1
 8007a70:	4681      	mov	r9, r0
 8007a72:	6123      	str	r3, [r4, #16]
 8007a74:	dc02      	bgt.n	8007a7c <_printf_float+0x168>
 8007a76:	6822      	ldr	r2, [r4, #0]
 8007a78:	07d2      	lsls	r2, r2, #31
 8007a7a:	d501      	bpl.n	8007a80 <_printf_float+0x16c>
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	6123      	str	r3, [r4, #16]
 8007a80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d09c      	beq.n	80079c2 <_printf_float+0xae>
 8007a88:	232d      	movs	r3, #45	; 0x2d
 8007a8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a8e:	e798      	b.n	80079c2 <_printf_float+0xae>
 8007a90:	9a06      	ldr	r2, [sp, #24]
 8007a92:	2a47      	cmp	r2, #71	; 0x47
 8007a94:	d1be      	bne.n	8007a14 <_printf_float+0x100>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1bc      	bne.n	8007a14 <_printf_float+0x100>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e7b9      	b.n	8007a12 <_printf_float+0xfe>
 8007a9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007aa2:	d118      	bne.n	8007ad6 <_printf_float+0x1c2>
 8007aa4:	2900      	cmp	r1, #0
 8007aa6:	6863      	ldr	r3, [r4, #4]
 8007aa8:	dd0b      	ble.n	8007ac2 <_printf_float+0x1ae>
 8007aaa:	6121      	str	r1, [r4, #16]
 8007aac:	b913      	cbnz	r3, 8007ab4 <_printf_float+0x1a0>
 8007aae:	6822      	ldr	r2, [r4, #0]
 8007ab0:	07d0      	lsls	r0, r2, #31
 8007ab2:	d502      	bpl.n	8007aba <_printf_float+0x1a6>
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	440b      	add	r3, r1
 8007ab8:	6123      	str	r3, [r4, #16]
 8007aba:	65a1      	str	r1, [r4, #88]	; 0x58
 8007abc:	f04f 0900 	mov.w	r9, #0
 8007ac0:	e7de      	b.n	8007a80 <_printf_float+0x16c>
 8007ac2:	b913      	cbnz	r3, 8007aca <_printf_float+0x1b6>
 8007ac4:	6822      	ldr	r2, [r4, #0]
 8007ac6:	07d2      	lsls	r2, r2, #31
 8007ac8:	d501      	bpl.n	8007ace <_printf_float+0x1ba>
 8007aca:	3302      	adds	r3, #2
 8007acc:	e7f4      	b.n	8007ab8 <_printf_float+0x1a4>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e7f2      	b.n	8007ab8 <_printf_float+0x1a4>
 8007ad2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad8:	4299      	cmp	r1, r3
 8007ada:	db05      	blt.n	8007ae8 <_printf_float+0x1d4>
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	6121      	str	r1, [r4, #16]
 8007ae0:	07d8      	lsls	r0, r3, #31
 8007ae2:	d5ea      	bpl.n	8007aba <_printf_float+0x1a6>
 8007ae4:	1c4b      	adds	r3, r1, #1
 8007ae6:	e7e7      	b.n	8007ab8 <_printf_float+0x1a4>
 8007ae8:	2900      	cmp	r1, #0
 8007aea:	bfd4      	ite	le
 8007aec:	f1c1 0202 	rsble	r2, r1, #2
 8007af0:	2201      	movgt	r2, #1
 8007af2:	4413      	add	r3, r2
 8007af4:	e7e0      	b.n	8007ab8 <_printf_float+0x1a4>
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	055a      	lsls	r2, r3, #21
 8007afa:	d407      	bmi.n	8007b0c <_printf_float+0x1f8>
 8007afc:	6923      	ldr	r3, [r4, #16]
 8007afe:	4642      	mov	r2, r8
 8007b00:	4631      	mov	r1, r6
 8007b02:	4628      	mov	r0, r5
 8007b04:	47b8      	blx	r7
 8007b06:	3001      	adds	r0, #1
 8007b08:	d12c      	bne.n	8007b64 <_printf_float+0x250>
 8007b0a:	e764      	b.n	80079d6 <_printf_float+0xc2>
 8007b0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b10:	f240 80e0 	bls.w	8007cd4 <_printf_float+0x3c0>
 8007b14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b18:	2200      	movs	r2, #0
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f7f8 ffdc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d034      	beq.n	8007b8e <_printf_float+0x27a>
 8007b24:	4a37      	ldr	r2, [pc, #220]	; (8007c04 <_printf_float+0x2f0>)
 8007b26:	2301      	movs	r3, #1
 8007b28:	4631      	mov	r1, r6
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	47b8      	blx	r7
 8007b2e:	3001      	adds	r0, #1
 8007b30:	f43f af51 	beq.w	80079d6 <_printf_float+0xc2>
 8007b34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	db02      	blt.n	8007b42 <_printf_float+0x22e>
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	07d8      	lsls	r0, r3, #31
 8007b40:	d510      	bpl.n	8007b64 <_printf_float+0x250>
 8007b42:	ee18 3a10 	vmov	r3, s16
 8007b46:	4652      	mov	r2, sl
 8007b48:	4631      	mov	r1, r6
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	47b8      	blx	r7
 8007b4e:	3001      	adds	r0, #1
 8007b50:	f43f af41 	beq.w	80079d6 <_printf_float+0xc2>
 8007b54:	f04f 0800 	mov.w	r8, #0
 8007b58:	f104 091a 	add.w	r9, r4, #26
 8007b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	4543      	cmp	r3, r8
 8007b62:	dc09      	bgt.n	8007b78 <_printf_float+0x264>
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	079b      	lsls	r3, r3, #30
 8007b68:	f100 8105 	bmi.w	8007d76 <_printf_float+0x462>
 8007b6c:	68e0      	ldr	r0, [r4, #12]
 8007b6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b70:	4298      	cmp	r0, r3
 8007b72:	bfb8      	it	lt
 8007b74:	4618      	movlt	r0, r3
 8007b76:	e730      	b.n	80079da <_printf_float+0xc6>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	464a      	mov	r2, r9
 8007b7c:	4631      	mov	r1, r6
 8007b7e:	4628      	mov	r0, r5
 8007b80:	47b8      	blx	r7
 8007b82:	3001      	adds	r0, #1
 8007b84:	f43f af27 	beq.w	80079d6 <_printf_float+0xc2>
 8007b88:	f108 0801 	add.w	r8, r8, #1
 8007b8c:	e7e6      	b.n	8007b5c <_printf_float+0x248>
 8007b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	dc39      	bgt.n	8007c08 <_printf_float+0x2f4>
 8007b94:	4a1b      	ldr	r2, [pc, #108]	; (8007c04 <_printf_float+0x2f0>)
 8007b96:	2301      	movs	r3, #1
 8007b98:	4631      	mov	r1, r6
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	47b8      	blx	r7
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	f43f af19 	beq.w	80079d6 <_printf_float+0xc2>
 8007ba4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	d102      	bne.n	8007bb2 <_printf_float+0x29e>
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	07d9      	lsls	r1, r3, #31
 8007bb0:	d5d8      	bpl.n	8007b64 <_printf_float+0x250>
 8007bb2:	ee18 3a10 	vmov	r3, s16
 8007bb6:	4652      	mov	r2, sl
 8007bb8:	4631      	mov	r1, r6
 8007bba:	4628      	mov	r0, r5
 8007bbc:	47b8      	blx	r7
 8007bbe:	3001      	adds	r0, #1
 8007bc0:	f43f af09 	beq.w	80079d6 <_printf_float+0xc2>
 8007bc4:	f04f 0900 	mov.w	r9, #0
 8007bc8:	f104 0a1a 	add.w	sl, r4, #26
 8007bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bce:	425b      	negs	r3, r3
 8007bd0:	454b      	cmp	r3, r9
 8007bd2:	dc01      	bgt.n	8007bd8 <_printf_float+0x2c4>
 8007bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd6:	e792      	b.n	8007afe <_printf_float+0x1ea>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	4652      	mov	r2, sl
 8007bdc:	4631      	mov	r1, r6
 8007bde:	4628      	mov	r0, r5
 8007be0:	47b8      	blx	r7
 8007be2:	3001      	adds	r0, #1
 8007be4:	f43f aef7 	beq.w	80079d6 <_printf_float+0xc2>
 8007be8:	f109 0901 	add.w	r9, r9, #1
 8007bec:	e7ee      	b.n	8007bcc <_printf_float+0x2b8>
 8007bee:	bf00      	nop
 8007bf0:	7fefffff 	.word	0x7fefffff
 8007bf4:	0800c18c 	.word	0x0800c18c
 8007bf8:	0800c190 	.word	0x0800c190
 8007bfc:	0800c198 	.word	0x0800c198
 8007c00:	0800c194 	.word	0x0800c194
 8007c04:	0800c19c 	.word	0x0800c19c
 8007c08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	bfa8      	it	ge
 8007c10:	461a      	movge	r2, r3
 8007c12:	2a00      	cmp	r2, #0
 8007c14:	4691      	mov	r9, r2
 8007c16:	dc37      	bgt.n	8007c88 <_printf_float+0x374>
 8007c18:	f04f 0b00 	mov.w	fp, #0
 8007c1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c20:	f104 021a 	add.w	r2, r4, #26
 8007c24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c26:	9305      	str	r3, [sp, #20]
 8007c28:	eba3 0309 	sub.w	r3, r3, r9
 8007c2c:	455b      	cmp	r3, fp
 8007c2e:	dc33      	bgt.n	8007c98 <_printf_float+0x384>
 8007c30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c34:	429a      	cmp	r2, r3
 8007c36:	db3b      	blt.n	8007cb0 <_printf_float+0x39c>
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	07da      	lsls	r2, r3, #31
 8007c3c:	d438      	bmi.n	8007cb0 <_printf_float+0x39c>
 8007c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c40:	9a05      	ldr	r2, [sp, #20]
 8007c42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c44:	1a9a      	subs	r2, r3, r2
 8007c46:	eba3 0901 	sub.w	r9, r3, r1
 8007c4a:	4591      	cmp	r9, r2
 8007c4c:	bfa8      	it	ge
 8007c4e:	4691      	movge	r9, r2
 8007c50:	f1b9 0f00 	cmp.w	r9, #0
 8007c54:	dc35      	bgt.n	8007cc2 <_printf_float+0x3ae>
 8007c56:	f04f 0800 	mov.w	r8, #0
 8007c5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c5e:	f104 0a1a 	add.w	sl, r4, #26
 8007c62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c66:	1a9b      	subs	r3, r3, r2
 8007c68:	eba3 0309 	sub.w	r3, r3, r9
 8007c6c:	4543      	cmp	r3, r8
 8007c6e:	f77f af79 	ble.w	8007b64 <_printf_float+0x250>
 8007c72:	2301      	movs	r3, #1
 8007c74:	4652      	mov	r2, sl
 8007c76:	4631      	mov	r1, r6
 8007c78:	4628      	mov	r0, r5
 8007c7a:	47b8      	blx	r7
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	f43f aeaa 	beq.w	80079d6 <_printf_float+0xc2>
 8007c82:	f108 0801 	add.w	r8, r8, #1
 8007c86:	e7ec      	b.n	8007c62 <_printf_float+0x34e>
 8007c88:	4613      	mov	r3, r2
 8007c8a:	4631      	mov	r1, r6
 8007c8c:	4642      	mov	r2, r8
 8007c8e:	4628      	mov	r0, r5
 8007c90:	47b8      	blx	r7
 8007c92:	3001      	adds	r0, #1
 8007c94:	d1c0      	bne.n	8007c18 <_printf_float+0x304>
 8007c96:	e69e      	b.n	80079d6 <_printf_float+0xc2>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	4631      	mov	r1, r6
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	9205      	str	r2, [sp, #20]
 8007ca0:	47b8      	blx	r7
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	f43f ae97 	beq.w	80079d6 <_printf_float+0xc2>
 8007ca8:	9a05      	ldr	r2, [sp, #20]
 8007caa:	f10b 0b01 	add.w	fp, fp, #1
 8007cae:	e7b9      	b.n	8007c24 <_printf_float+0x310>
 8007cb0:	ee18 3a10 	vmov	r3, s16
 8007cb4:	4652      	mov	r2, sl
 8007cb6:	4631      	mov	r1, r6
 8007cb8:	4628      	mov	r0, r5
 8007cba:	47b8      	blx	r7
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	d1be      	bne.n	8007c3e <_printf_float+0x32a>
 8007cc0:	e689      	b.n	80079d6 <_printf_float+0xc2>
 8007cc2:	9a05      	ldr	r2, [sp, #20]
 8007cc4:	464b      	mov	r3, r9
 8007cc6:	4442      	add	r2, r8
 8007cc8:	4631      	mov	r1, r6
 8007cca:	4628      	mov	r0, r5
 8007ccc:	47b8      	blx	r7
 8007cce:	3001      	adds	r0, #1
 8007cd0:	d1c1      	bne.n	8007c56 <_printf_float+0x342>
 8007cd2:	e680      	b.n	80079d6 <_printf_float+0xc2>
 8007cd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cd6:	2a01      	cmp	r2, #1
 8007cd8:	dc01      	bgt.n	8007cde <_printf_float+0x3ca>
 8007cda:	07db      	lsls	r3, r3, #31
 8007cdc:	d538      	bpl.n	8007d50 <_printf_float+0x43c>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	4642      	mov	r2, r8
 8007ce2:	4631      	mov	r1, r6
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	47b8      	blx	r7
 8007ce8:	3001      	adds	r0, #1
 8007cea:	f43f ae74 	beq.w	80079d6 <_printf_float+0xc2>
 8007cee:	ee18 3a10 	vmov	r3, s16
 8007cf2:	4652      	mov	r2, sl
 8007cf4:	4631      	mov	r1, r6
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	47b8      	blx	r7
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	f43f ae6b 	beq.w	80079d6 <_printf_float+0xc2>
 8007d00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d04:	2200      	movs	r2, #0
 8007d06:	2300      	movs	r3, #0
 8007d08:	f7f8 fee6 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d0c:	b9d8      	cbnz	r0, 8007d46 <_printf_float+0x432>
 8007d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d10:	f108 0201 	add.w	r2, r8, #1
 8007d14:	3b01      	subs	r3, #1
 8007d16:	4631      	mov	r1, r6
 8007d18:	4628      	mov	r0, r5
 8007d1a:	47b8      	blx	r7
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d10e      	bne.n	8007d3e <_printf_float+0x42a>
 8007d20:	e659      	b.n	80079d6 <_printf_float+0xc2>
 8007d22:	2301      	movs	r3, #1
 8007d24:	4652      	mov	r2, sl
 8007d26:	4631      	mov	r1, r6
 8007d28:	4628      	mov	r0, r5
 8007d2a:	47b8      	blx	r7
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	f43f ae52 	beq.w	80079d6 <_printf_float+0xc2>
 8007d32:	f108 0801 	add.w	r8, r8, #1
 8007d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	4543      	cmp	r3, r8
 8007d3c:	dcf1      	bgt.n	8007d22 <_printf_float+0x40e>
 8007d3e:	464b      	mov	r3, r9
 8007d40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d44:	e6dc      	b.n	8007b00 <_printf_float+0x1ec>
 8007d46:	f04f 0800 	mov.w	r8, #0
 8007d4a:	f104 0a1a 	add.w	sl, r4, #26
 8007d4e:	e7f2      	b.n	8007d36 <_printf_float+0x422>
 8007d50:	2301      	movs	r3, #1
 8007d52:	4642      	mov	r2, r8
 8007d54:	e7df      	b.n	8007d16 <_printf_float+0x402>
 8007d56:	2301      	movs	r3, #1
 8007d58:	464a      	mov	r2, r9
 8007d5a:	4631      	mov	r1, r6
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	47b8      	blx	r7
 8007d60:	3001      	adds	r0, #1
 8007d62:	f43f ae38 	beq.w	80079d6 <_printf_float+0xc2>
 8007d66:	f108 0801 	add.w	r8, r8, #1
 8007d6a:	68e3      	ldr	r3, [r4, #12]
 8007d6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d6e:	1a5b      	subs	r3, r3, r1
 8007d70:	4543      	cmp	r3, r8
 8007d72:	dcf0      	bgt.n	8007d56 <_printf_float+0x442>
 8007d74:	e6fa      	b.n	8007b6c <_printf_float+0x258>
 8007d76:	f04f 0800 	mov.w	r8, #0
 8007d7a:	f104 0919 	add.w	r9, r4, #25
 8007d7e:	e7f4      	b.n	8007d6a <_printf_float+0x456>

08007d80 <_printf_common>:
 8007d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d84:	4616      	mov	r6, r2
 8007d86:	4699      	mov	r9, r3
 8007d88:	688a      	ldr	r2, [r1, #8]
 8007d8a:	690b      	ldr	r3, [r1, #16]
 8007d8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d90:	4293      	cmp	r3, r2
 8007d92:	bfb8      	it	lt
 8007d94:	4613      	movlt	r3, r2
 8007d96:	6033      	str	r3, [r6, #0]
 8007d98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d9c:	4607      	mov	r7, r0
 8007d9e:	460c      	mov	r4, r1
 8007da0:	b10a      	cbz	r2, 8007da6 <_printf_common+0x26>
 8007da2:	3301      	adds	r3, #1
 8007da4:	6033      	str	r3, [r6, #0]
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	0699      	lsls	r1, r3, #26
 8007daa:	bf42      	ittt	mi
 8007dac:	6833      	ldrmi	r3, [r6, #0]
 8007dae:	3302      	addmi	r3, #2
 8007db0:	6033      	strmi	r3, [r6, #0]
 8007db2:	6825      	ldr	r5, [r4, #0]
 8007db4:	f015 0506 	ands.w	r5, r5, #6
 8007db8:	d106      	bne.n	8007dc8 <_printf_common+0x48>
 8007dba:	f104 0a19 	add.w	sl, r4, #25
 8007dbe:	68e3      	ldr	r3, [r4, #12]
 8007dc0:	6832      	ldr	r2, [r6, #0]
 8007dc2:	1a9b      	subs	r3, r3, r2
 8007dc4:	42ab      	cmp	r3, r5
 8007dc6:	dc26      	bgt.n	8007e16 <_printf_common+0x96>
 8007dc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007dcc:	1e13      	subs	r3, r2, #0
 8007dce:	6822      	ldr	r2, [r4, #0]
 8007dd0:	bf18      	it	ne
 8007dd2:	2301      	movne	r3, #1
 8007dd4:	0692      	lsls	r2, r2, #26
 8007dd6:	d42b      	bmi.n	8007e30 <_printf_common+0xb0>
 8007dd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ddc:	4649      	mov	r1, r9
 8007dde:	4638      	mov	r0, r7
 8007de0:	47c0      	blx	r8
 8007de2:	3001      	adds	r0, #1
 8007de4:	d01e      	beq.n	8007e24 <_printf_common+0xa4>
 8007de6:	6823      	ldr	r3, [r4, #0]
 8007de8:	68e5      	ldr	r5, [r4, #12]
 8007dea:	6832      	ldr	r2, [r6, #0]
 8007dec:	f003 0306 	and.w	r3, r3, #6
 8007df0:	2b04      	cmp	r3, #4
 8007df2:	bf08      	it	eq
 8007df4:	1aad      	subeq	r5, r5, r2
 8007df6:	68a3      	ldr	r3, [r4, #8]
 8007df8:	6922      	ldr	r2, [r4, #16]
 8007dfa:	bf0c      	ite	eq
 8007dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e00:	2500      	movne	r5, #0
 8007e02:	4293      	cmp	r3, r2
 8007e04:	bfc4      	itt	gt
 8007e06:	1a9b      	subgt	r3, r3, r2
 8007e08:	18ed      	addgt	r5, r5, r3
 8007e0a:	2600      	movs	r6, #0
 8007e0c:	341a      	adds	r4, #26
 8007e0e:	42b5      	cmp	r5, r6
 8007e10:	d11a      	bne.n	8007e48 <_printf_common+0xc8>
 8007e12:	2000      	movs	r0, #0
 8007e14:	e008      	b.n	8007e28 <_printf_common+0xa8>
 8007e16:	2301      	movs	r3, #1
 8007e18:	4652      	mov	r2, sl
 8007e1a:	4649      	mov	r1, r9
 8007e1c:	4638      	mov	r0, r7
 8007e1e:	47c0      	blx	r8
 8007e20:	3001      	adds	r0, #1
 8007e22:	d103      	bne.n	8007e2c <_printf_common+0xac>
 8007e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e2c:	3501      	adds	r5, #1
 8007e2e:	e7c6      	b.n	8007dbe <_printf_common+0x3e>
 8007e30:	18e1      	adds	r1, r4, r3
 8007e32:	1c5a      	adds	r2, r3, #1
 8007e34:	2030      	movs	r0, #48	; 0x30
 8007e36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e3a:	4422      	add	r2, r4
 8007e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e44:	3302      	adds	r3, #2
 8007e46:	e7c7      	b.n	8007dd8 <_printf_common+0x58>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	4622      	mov	r2, r4
 8007e4c:	4649      	mov	r1, r9
 8007e4e:	4638      	mov	r0, r7
 8007e50:	47c0      	blx	r8
 8007e52:	3001      	adds	r0, #1
 8007e54:	d0e6      	beq.n	8007e24 <_printf_common+0xa4>
 8007e56:	3601      	adds	r6, #1
 8007e58:	e7d9      	b.n	8007e0e <_printf_common+0x8e>
	...

08007e5c <_printf_i>:
 8007e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e60:	7e0f      	ldrb	r7, [r1, #24]
 8007e62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e64:	2f78      	cmp	r7, #120	; 0x78
 8007e66:	4691      	mov	r9, r2
 8007e68:	4680      	mov	r8, r0
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	469a      	mov	sl, r3
 8007e6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e72:	d807      	bhi.n	8007e84 <_printf_i+0x28>
 8007e74:	2f62      	cmp	r7, #98	; 0x62
 8007e76:	d80a      	bhi.n	8007e8e <_printf_i+0x32>
 8007e78:	2f00      	cmp	r7, #0
 8007e7a:	f000 80d8 	beq.w	800802e <_printf_i+0x1d2>
 8007e7e:	2f58      	cmp	r7, #88	; 0x58
 8007e80:	f000 80a3 	beq.w	8007fca <_printf_i+0x16e>
 8007e84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e8c:	e03a      	b.n	8007f04 <_printf_i+0xa8>
 8007e8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e92:	2b15      	cmp	r3, #21
 8007e94:	d8f6      	bhi.n	8007e84 <_printf_i+0x28>
 8007e96:	a101      	add	r1, pc, #4	; (adr r1, 8007e9c <_printf_i+0x40>)
 8007e98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e9c:	08007ef5 	.word	0x08007ef5
 8007ea0:	08007f09 	.word	0x08007f09
 8007ea4:	08007e85 	.word	0x08007e85
 8007ea8:	08007e85 	.word	0x08007e85
 8007eac:	08007e85 	.word	0x08007e85
 8007eb0:	08007e85 	.word	0x08007e85
 8007eb4:	08007f09 	.word	0x08007f09
 8007eb8:	08007e85 	.word	0x08007e85
 8007ebc:	08007e85 	.word	0x08007e85
 8007ec0:	08007e85 	.word	0x08007e85
 8007ec4:	08007e85 	.word	0x08007e85
 8007ec8:	08008015 	.word	0x08008015
 8007ecc:	08007f39 	.word	0x08007f39
 8007ed0:	08007ff7 	.word	0x08007ff7
 8007ed4:	08007e85 	.word	0x08007e85
 8007ed8:	08007e85 	.word	0x08007e85
 8007edc:	08008037 	.word	0x08008037
 8007ee0:	08007e85 	.word	0x08007e85
 8007ee4:	08007f39 	.word	0x08007f39
 8007ee8:	08007e85 	.word	0x08007e85
 8007eec:	08007e85 	.word	0x08007e85
 8007ef0:	08007fff 	.word	0x08007fff
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	1d1a      	adds	r2, r3, #4
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	602a      	str	r2, [r5, #0]
 8007efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f04:	2301      	movs	r3, #1
 8007f06:	e0a3      	b.n	8008050 <_printf_i+0x1f4>
 8007f08:	6820      	ldr	r0, [r4, #0]
 8007f0a:	6829      	ldr	r1, [r5, #0]
 8007f0c:	0606      	lsls	r6, r0, #24
 8007f0e:	f101 0304 	add.w	r3, r1, #4
 8007f12:	d50a      	bpl.n	8007f2a <_printf_i+0xce>
 8007f14:	680e      	ldr	r6, [r1, #0]
 8007f16:	602b      	str	r3, [r5, #0]
 8007f18:	2e00      	cmp	r6, #0
 8007f1a:	da03      	bge.n	8007f24 <_printf_i+0xc8>
 8007f1c:	232d      	movs	r3, #45	; 0x2d
 8007f1e:	4276      	negs	r6, r6
 8007f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f24:	485e      	ldr	r0, [pc, #376]	; (80080a0 <_printf_i+0x244>)
 8007f26:	230a      	movs	r3, #10
 8007f28:	e019      	b.n	8007f5e <_printf_i+0x102>
 8007f2a:	680e      	ldr	r6, [r1, #0]
 8007f2c:	602b      	str	r3, [r5, #0]
 8007f2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f32:	bf18      	it	ne
 8007f34:	b236      	sxthne	r6, r6
 8007f36:	e7ef      	b.n	8007f18 <_printf_i+0xbc>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	6820      	ldr	r0, [r4, #0]
 8007f3c:	1d19      	adds	r1, r3, #4
 8007f3e:	6029      	str	r1, [r5, #0]
 8007f40:	0601      	lsls	r1, r0, #24
 8007f42:	d501      	bpl.n	8007f48 <_printf_i+0xec>
 8007f44:	681e      	ldr	r6, [r3, #0]
 8007f46:	e002      	b.n	8007f4e <_printf_i+0xf2>
 8007f48:	0646      	lsls	r6, r0, #25
 8007f4a:	d5fb      	bpl.n	8007f44 <_printf_i+0xe8>
 8007f4c:	881e      	ldrh	r6, [r3, #0]
 8007f4e:	4854      	ldr	r0, [pc, #336]	; (80080a0 <_printf_i+0x244>)
 8007f50:	2f6f      	cmp	r7, #111	; 0x6f
 8007f52:	bf0c      	ite	eq
 8007f54:	2308      	moveq	r3, #8
 8007f56:	230a      	movne	r3, #10
 8007f58:	2100      	movs	r1, #0
 8007f5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f5e:	6865      	ldr	r5, [r4, #4]
 8007f60:	60a5      	str	r5, [r4, #8]
 8007f62:	2d00      	cmp	r5, #0
 8007f64:	bfa2      	ittt	ge
 8007f66:	6821      	ldrge	r1, [r4, #0]
 8007f68:	f021 0104 	bicge.w	r1, r1, #4
 8007f6c:	6021      	strge	r1, [r4, #0]
 8007f6e:	b90e      	cbnz	r6, 8007f74 <_printf_i+0x118>
 8007f70:	2d00      	cmp	r5, #0
 8007f72:	d04d      	beq.n	8008010 <_printf_i+0x1b4>
 8007f74:	4615      	mov	r5, r2
 8007f76:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f7a:	fb03 6711 	mls	r7, r3, r1, r6
 8007f7e:	5dc7      	ldrb	r7, [r0, r7]
 8007f80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f84:	4637      	mov	r7, r6
 8007f86:	42bb      	cmp	r3, r7
 8007f88:	460e      	mov	r6, r1
 8007f8a:	d9f4      	bls.n	8007f76 <_printf_i+0x11a>
 8007f8c:	2b08      	cmp	r3, #8
 8007f8e:	d10b      	bne.n	8007fa8 <_printf_i+0x14c>
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	07de      	lsls	r6, r3, #31
 8007f94:	d508      	bpl.n	8007fa8 <_printf_i+0x14c>
 8007f96:	6923      	ldr	r3, [r4, #16]
 8007f98:	6861      	ldr	r1, [r4, #4]
 8007f9a:	4299      	cmp	r1, r3
 8007f9c:	bfde      	ittt	le
 8007f9e:	2330      	movle	r3, #48	; 0x30
 8007fa0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fa4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007fa8:	1b52      	subs	r2, r2, r5
 8007faa:	6122      	str	r2, [r4, #16]
 8007fac:	f8cd a000 	str.w	sl, [sp]
 8007fb0:	464b      	mov	r3, r9
 8007fb2:	aa03      	add	r2, sp, #12
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	4640      	mov	r0, r8
 8007fb8:	f7ff fee2 	bl	8007d80 <_printf_common>
 8007fbc:	3001      	adds	r0, #1
 8007fbe:	d14c      	bne.n	800805a <_printf_i+0x1fe>
 8007fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fc4:	b004      	add	sp, #16
 8007fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fca:	4835      	ldr	r0, [pc, #212]	; (80080a0 <_printf_i+0x244>)
 8007fcc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007fd0:	6829      	ldr	r1, [r5, #0]
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007fd8:	6029      	str	r1, [r5, #0]
 8007fda:	061d      	lsls	r5, r3, #24
 8007fdc:	d514      	bpl.n	8008008 <_printf_i+0x1ac>
 8007fde:	07df      	lsls	r7, r3, #31
 8007fe0:	bf44      	itt	mi
 8007fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8007fe6:	6023      	strmi	r3, [r4, #0]
 8007fe8:	b91e      	cbnz	r6, 8007ff2 <_printf_i+0x196>
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	f023 0320 	bic.w	r3, r3, #32
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	2310      	movs	r3, #16
 8007ff4:	e7b0      	b.n	8007f58 <_printf_i+0xfc>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	f043 0320 	orr.w	r3, r3, #32
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	2378      	movs	r3, #120	; 0x78
 8008000:	4828      	ldr	r0, [pc, #160]	; (80080a4 <_printf_i+0x248>)
 8008002:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008006:	e7e3      	b.n	8007fd0 <_printf_i+0x174>
 8008008:	0659      	lsls	r1, r3, #25
 800800a:	bf48      	it	mi
 800800c:	b2b6      	uxthmi	r6, r6
 800800e:	e7e6      	b.n	8007fde <_printf_i+0x182>
 8008010:	4615      	mov	r5, r2
 8008012:	e7bb      	b.n	8007f8c <_printf_i+0x130>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	6826      	ldr	r6, [r4, #0]
 8008018:	6961      	ldr	r1, [r4, #20]
 800801a:	1d18      	adds	r0, r3, #4
 800801c:	6028      	str	r0, [r5, #0]
 800801e:	0635      	lsls	r5, r6, #24
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	d501      	bpl.n	8008028 <_printf_i+0x1cc>
 8008024:	6019      	str	r1, [r3, #0]
 8008026:	e002      	b.n	800802e <_printf_i+0x1d2>
 8008028:	0670      	lsls	r0, r6, #25
 800802a:	d5fb      	bpl.n	8008024 <_printf_i+0x1c8>
 800802c:	8019      	strh	r1, [r3, #0]
 800802e:	2300      	movs	r3, #0
 8008030:	6123      	str	r3, [r4, #16]
 8008032:	4615      	mov	r5, r2
 8008034:	e7ba      	b.n	8007fac <_printf_i+0x150>
 8008036:	682b      	ldr	r3, [r5, #0]
 8008038:	1d1a      	adds	r2, r3, #4
 800803a:	602a      	str	r2, [r5, #0]
 800803c:	681d      	ldr	r5, [r3, #0]
 800803e:	6862      	ldr	r2, [r4, #4]
 8008040:	2100      	movs	r1, #0
 8008042:	4628      	mov	r0, r5
 8008044:	f7f8 f8d4 	bl	80001f0 <memchr>
 8008048:	b108      	cbz	r0, 800804e <_printf_i+0x1f2>
 800804a:	1b40      	subs	r0, r0, r5
 800804c:	6060      	str	r0, [r4, #4]
 800804e:	6863      	ldr	r3, [r4, #4]
 8008050:	6123      	str	r3, [r4, #16]
 8008052:	2300      	movs	r3, #0
 8008054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008058:	e7a8      	b.n	8007fac <_printf_i+0x150>
 800805a:	6923      	ldr	r3, [r4, #16]
 800805c:	462a      	mov	r2, r5
 800805e:	4649      	mov	r1, r9
 8008060:	4640      	mov	r0, r8
 8008062:	47d0      	blx	sl
 8008064:	3001      	adds	r0, #1
 8008066:	d0ab      	beq.n	8007fc0 <_printf_i+0x164>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	079b      	lsls	r3, r3, #30
 800806c:	d413      	bmi.n	8008096 <_printf_i+0x23a>
 800806e:	68e0      	ldr	r0, [r4, #12]
 8008070:	9b03      	ldr	r3, [sp, #12]
 8008072:	4298      	cmp	r0, r3
 8008074:	bfb8      	it	lt
 8008076:	4618      	movlt	r0, r3
 8008078:	e7a4      	b.n	8007fc4 <_printf_i+0x168>
 800807a:	2301      	movs	r3, #1
 800807c:	4632      	mov	r2, r6
 800807e:	4649      	mov	r1, r9
 8008080:	4640      	mov	r0, r8
 8008082:	47d0      	blx	sl
 8008084:	3001      	adds	r0, #1
 8008086:	d09b      	beq.n	8007fc0 <_printf_i+0x164>
 8008088:	3501      	adds	r5, #1
 800808a:	68e3      	ldr	r3, [r4, #12]
 800808c:	9903      	ldr	r1, [sp, #12]
 800808e:	1a5b      	subs	r3, r3, r1
 8008090:	42ab      	cmp	r3, r5
 8008092:	dcf2      	bgt.n	800807a <_printf_i+0x21e>
 8008094:	e7eb      	b.n	800806e <_printf_i+0x212>
 8008096:	2500      	movs	r5, #0
 8008098:	f104 0619 	add.w	r6, r4, #25
 800809c:	e7f5      	b.n	800808a <_printf_i+0x22e>
 800809e:	bf00      	nop
 80080a0:	0800c19e 	.word	0x0800c19e
 80080a4:	0800c1af 	.word	0x0800c1af

080080a8 <iprintf>:
 80080a8:	b40f      	push	{r0, r1, r2, r3}
 80080aa:	4b0a      	ldr	r3, [pc, #40]	; (80080d4 <iprintf+0x2c>)
 80080ac:	b513      	push	{r0, r1, r4, lr}
 80080ae:	681c      	ldr	r4, [r3, #0]
 80080b0:	b124      	cbz	r4, 80080bc <iprintf+0x14>
 80080b2:	69a3      	ldr	r3, [r4, #24]
 80080b4:	b913      	cbnz	r3, 80080bc <iprintf+0x14>
 80080b6:	4620      	mov	r0, r4
 80080b8:	f001 ff1e 	bl	8009ef8 <__sinit>
 80080bc:	ab05      	add	r3, sp, #20
 80080be:	9a04      	ldr	r2, [sp, #16]
 80080c0:	68a1      	ldr	r1, [r4, #8]
 80080c2:	9301      	str	r3, [sp, #4]
 80080c4:	4620      	mov	r0, r4
 80080c6:	f003 f98b 	bl	800b3e0 <_vfiprintf_r>
 80080ca:	b002      	add	sp, #8
 80080cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080d0:	b004      	add	sp, #16
 80080d2:	4770      	bx	lr
 80080d4:	2000000c 	.word	0x2000000c

080080d8 <_puts_r>:
 80080d8:	b570      	push	{r4, r5, r6, lr}
 80080da:	460e      	mov	r6, r1
 80080dc:	4605      	mov	r5, r0
 80080de:	b118      	cbz	r0, 80080e8 <_puts_r+0x10>
 80080e0:	6983      	ldr	r3, [r0, #24]
 80080e2:	b90b      	cbnz	r3, 80080e8 <_puts_r+0x10>
 80080e4:	f001 ff08 	bl	8009ef8 <__sinit>
 80080e8:	69ab      	ldr	r3, [r5, #24]
 80080ea:	68ac      	ldr	r4, [r5, #8]
 80080ec:	b913      	cbnz	r3, 80080f4 <_puts_r+0x1c>
 80080ee:	4628      	mov	r0, r5
 80080f0:	f001 ff02 	bl	8009ef8 <__sinit>
 80080f4:	4b2c      	ldr	r3, [pc, #176]	; (80081a8 <_puts_r+0xd0>)
 80080f6:	429c      	cmp	r4, r3
 80080f8:	d120      	bne.n	800813c <_puts_r+0x64>
 80080fa:	686c      	ldr	r4, [r5, #4]
 80080fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080fe:	07db      	lsls	r3, r3, #31
 8008100:	d405      	bmi.n	800810e <_puts_r+0x36>
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	0598      	lsls	r0, r3, #22
 8008106:	d402      	bmi.n	800810e <_puts_r+0x36>
 8008108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800810a:	f002 fb06 	bl	800a71a <__retarget_lock_acquire_recursive>
 800810e:	89a3      	ldrh	r3, [r4, #12]
 8008110:	0719      	lsls	r1, r3, #28
 8008112:	d51d      	bpl.n	8008150 <_puts_r+0x78>
 8008114:	6923      	ldr	r3, [r4, #16]
 8008116:	b1db      	cbz	r3, 8008150 <_puts_r+0x78>
 8008118:	3e01      	subs	r6, #1
 800811a:	68a3      	ldr	r3, [r4, #8]
 800811c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008120:	3b01      	subs	r3, #1
 8008122:	60a3      	str	r3, [r4, #8]
 8008124:	bb39      	cbnz	r1, 8008176 <_puts_r+0x9e>
 8008126:	2b00      	cmp	r3, #0
 8008128:	da38      	bge.n	800819c <_puts_r+0xc4>
 800812a:	4622      	mov	r2, r4
 800812c:	210a      	movs	r1, #10
 800812e:	4628      	mov	r0, r5
 8008130:	f000 fe8c 	bl	8008e4c <__swbuf_r>
 8008134:	3001      	adds	r0, #1
 8008136:	d011      	beq.n	800815c <_puts_r+0x84>
 8008138:	250a      	movs	r5, #10
 800813a:	e011      	b.n	8008160 <_puts_r+0x88>
 800813c:	4b1b      	ldr	r3, [pc, #108]	; (80081ac <_puts_r+0xd4>)
 800813e:	429c      	cmp	r4, r3
 8008140:	d101      	bne.n	8008146 <_puts_r+0x6e>
 8008142:	68ac      	ldr	r4, [r5, #8]
 8008144:	e7da      	b.n	80080fc <_puts_r+0x24>
 8008146:	4b1a      	ldr	r3, [pc, #104]	; (80081b0 <_puts_r+0xd8>)
 8008148:	429c      	cmp	r4, r3
 800814a:	bf08      	it	eq
 800814c:	68ec      	ldreq	r4, [r5, #12]
 800814e:	e7d5      	b.n	80080fc <_puts_r+0x24>
 8008150:	4621      	mov	r1, r4
 8008152:	4628      	mov	r0, r5
 8008154:	f000 fecc 	bl	8008ef0 <__swsetup_r>
 8008158:	2800      	cmp	r0, #0
 800815a:	d0dd      	beq.n	8008118 <_puts_r+0x40>
 800815c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008160:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008162:	07da      	lsls	r2, r3, #31
 8008164:	d405      	bmi.n	8008172 <_puts_r+0x9a>
 8008166:	89a3      	ldrh	r3, [r4, #12]
 8008168:	059b      	lsls	r3, r3, #22
 800816a:	d402      	bmi.n	8008172 <_puts_r+0x9a>
 800816c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800816e:	f002 fad5 	bl	800a71c <__retarget_lock_release_recursive>
 8008172:	4628      	mov	r0, r5
 8008174:	bd70      	pop	{r4, r5, r6, pc}
 8008176:	2b00      	cmp	r3, #0
 8008178:	da04      	bge.n	8008184 <_puts_r+0xac>
 800817a:	69a2      	ldr	r2, [r4, #24]
 800817c:	429a      	cmp	r2, r3
 800817e:	dc06      	bgt.n	800818e <_puts_r+0xb6>
 8008180:	290a      	cmp	r1, #10
 8008182:	d004      	beq.n	800818e <_puts_r+0xb6>
 8008184:	6823      	ldr	r3, [r4, #0]
 8008186:	1c5a      	adds	r2, r3, #1
 8008188:	6022      	str	r2, [r4, #0]
 800818a:	7019      	strb	r1, [r3, #0]
 800818c:	e7c5      	b.n	800811a <_puts_r+0x42>
 800818e:	4622      	mov	r2, r4
 8008190:	4628      	mov	r0, r5
 8008192:	f000 fe5b 	bl	8008e4c <__swbuf_r>
 8008196:	3001      	adds	r0, #1
 8008198:	d1bf      	bne.n	800811a <_puts_r+0x42>
 800819a:	e7df      	b.n	800815c <_puts_r+0x84>
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	250a      	movs	r5, #10
 80081a0:	1c5a      	adds	r2, r3, #1
 80081a2:	6022      	str	r2, [r4, #0]
 80081a4:	701d      	strb	r5, [r3, #0]
 80081a6:	e7db      	b.n	8008160 <_puts_r+0x88>
 80081a8:	0800c2c0 	.word	0x0800c2c0
 80081ac:	0800c2e0 	.word	0x0800c2e0
 80081b0:	0800c2a0 	.word	0x0800c2a0

080081b4 <puts>:
 80081b4:	4b02      	ldr	r3, [pc, #8]	; (80081c0 <puts+0xc>)
 80081b6:	4601      	mov	r1, r0
 80081b8:	6818      	ldr	r0, [r3, #0]
 80081ba:	f7ff bf8d 	b.w	80080d8 <_puts_r>
 80081be:	bf00      	nop
 80081c0:	2000000c 	.word	0x2000000c

080081c4 <strncmp>:
 80081c4:	b510      	push	{r4, lr}
 80081c6:	b17a      	cbz	r2, 80081e8 <strncmp+0x24>
 80081c8:	4603      	mov	r3, r0
 80081ca:	3901      	subs	r1, #1
 80081cc:	1884      	adds	r4, r0, r2
 80081ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 80081d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80081d6:	4290      	cmp	r0, r2
 80081d8:	d101      	bne.n	80081de <strncmp+0x1a>
 80081da:	42a3      	cmp	r3, r4
 80081dc:	d101      	bne.n	80081e2 <strncmp+0x1e>
 80081de:	1a80      	subs	r0, r0, r2
 80081e0:	bd10      	pop	{r4, pc}
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d1f3      	bne.n	80081ce <strncmp+0xa>
 80081e6:	e7fa      	b.n	80081de <strncmp+0x1a>
 80081e8:	4610      	mov	r0, r2
 80081ea:	e7f9      	b.n	80081e0 <strncmp+0x1c>

080081ec <sulp>:
 80081ec:	b570      	push	{r4, r5, r6, lr}
 80081ee:	4604      	mov	r4, r0
 80081f0:	460d      	mov	r5, r1
 80081f2:	ec45 4b10 	vmov	d0, r4, r5
 80081f6:	4616      	mov	r6, r2
 80081f8:	f002 fe82 	bl	800af00 <__ulp>
 80081fc:	ec51 0b10 	vmov	r0, r1, d0
 8008200:	b17e      	cbz	r6, 8008222 <sulp+0x36>
 8008202:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008206:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800820a:	2b00      	cmp	r3, #0
 800820c:	dd09      	ble.n	8008222 <sulp+0x36>
 800820e:	051b      	lsls	r3, r3, #20
 8008210:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008214:	2400      	movs	r4, #0
 8008216:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800821a:	4622      	mov	r2, r4
 800821c:	462b      	mov	r3, r5
 800821e:	f7f8 f9f3 	bl	8000608 <__aeabi_dmul>
 8008222:	bd70      	pop	{r4, r5, r6, pc}
 8008224:	0000      	movs	r0, r0
	...

08008228 <_strtod_l>:
 8008228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822c:	ed2d 8b02 	vpush	{d8}
 8008230:	b09d      	sub	sp, #116	; 0x74
 8008232:	461f      	mov	r7, r3
 8008234:	2300      	movs	r3, #0
 8008236:	9318      	str	r3, [sp, #96]	; 0x60
 8008238:	4ba2      	ldr	r3, [pc, #648]	; (80084c4 <_strtod_l+0x29c>)
 800823a:	9213      	str	r2, [sp, #76]	; 0x4c
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	9305      	str	r3, [sp, #20]
 8008240:	4604      	mov	r4, r0
 8008242:	4618      	mov	r0, r3
 8008244:	4688      	mov	r8, r1
 8008246:	f7f7 ffcb 	bl	80001e0 <strlen>
 800824a:	f04f 0a00 	mov.w	sl, #0
 800824e:	4605      	mov	r5, r0
 8008250:	f04f 0b00 	mov.w	fp, #0
 8008254:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008258:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800825a:	781a      	ldrb	r2, [r3, #0]
 800825c:	2a2b      	cmp	r2, #43	; 0x2b
 800825e:	d04e      	beq.n	80082fe <_strtod_l+0xd6>
 8008260:	d83b      	bhi.n	80082da <_strtod_l+0xb2>
 8008262:	2a0d      	cmp	r2, #13
 8008264:	d834      	bhi.n	80082d0 <_strtod_l+0xa8>
 8008266:	2a08      	cmp	r2, #8
 8008268:	d834      	bhi.n	80082d4 <_strtod_l+0xac>
 800826a:	2a00      	cmp	r2, #0
 800826c:	d03e      	beq.n	80082ec <_strtod_l+0xc4>
 800826e:	2300      	movs	r3, #0
 8008270:	930a      	str	r3, [sp, #40]	; 0x28
 8008272:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008274:	7833      	ldrb	r3, [r6, #0]
 8008276:	2b30      	cmp	r3, #48	; 0x30
 8008278:	f040 80b0 	bne.w	80083dc <_strtod_l+0x1b4>
 800827c:	7873      	ldrb	r3, [r6, #1]
 800827e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008282:	2b58      	cmp	r3, #88	; 0x58
 8008284:	d168      	bne.n	8008358 <_strtod_l+0x130>
 8008286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008288:	9301      	str	r3, [sp, #4]
 800828a:	ab18      	add	r3, sp, #96	; 0x60
 800828c:	9702      	str	r7, [sp, #8]
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	4a8d      	ldr	r2, [pc, #564]	; (80084c8 <_strtod_l+0x2a0>)
 8008292:	ab19      	add	r3, sp, #100	; 0x64
 8008294:	a917      	add	r1, sp, #92	; 0x5c
 8008296:	4620      	mov	r0, r4
 8008298:	f001 ff32 	bl	800a100 <__gethex>
 800829c:	f010 0707 	ands.w	r7, r0, #7
 80082a0:	4605      	mov	r5, r0
 80082a2:	d005      	beq.n	80082b0 <_strtod_l+0x88>
 80082a4:	2f06      	cmp	r7, #6
 80082a6:	d12c      	bne.n	8008302 <_strtod_l+0xda>
 80082a8:	3601      	adds	r6, #1
 80082aa:	2300      	movs	r3, #0
 80082ac:	9617      	str	r6, [sp, #92]	; 0x5c
 80082ae:	930a      	str	r3, [sp, #40]	; 0x28
 80082b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f040 8590 	bne.w	8008dd8 <_strtod_l+0xbb0>
 80082b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ba:	b1eb      	cbz	r3, 80082f8 <_strtod_l+0xd0>
 80082bc:	4652      	mov	r2, sl
 80082be:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80082c2:	ec43 2b10 	vmov	d0, r2, r3
 80082c6:	b01d      	add	sp, #116	; 0x74
 80082c8:	ecbd 8b02 	vpop	{d8}
 80082cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d0:	2a20      	cmp	r2, #32
 80082d2:	d1cc      	bne.n	800826e <_strtod_l+0x46>
 80082d4:	3301      	adds	r3, #1
 80082d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80082d8:	e7be      	b.n	8008258 <_strtod_l+0x30>
 80082da:	2a2d      	cmp	r2, #45	; 0x2d
 80082dc:	d1c7      	bne.n	800826e <_strtod_l+0x46>
 80082de:	2201      	movs	r2, #1
 80082e0:	920a      	str	r2, [sp, #40]	; 0x28
 80082e2:	1c5a      	adds	r2, r3, #1
 80082e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1c2      	bne.n	8008272 <_strtod_l+0x4a>
 80082ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082ee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f040 856e 	bne.w	8008dd4 <_strtod_l+0xbac>
 80082f8:	4652      	mov	r2, sl
 80082fa:	465b      	mov	r3, fp
 80082fc:	e7e1      	b.n	80082c2 <_strtod_l+0x9a>
 80082fe:	2200      	movs	r2, #0
 8008300:	e7ee      	b.n	80082e0 <_strtod_l+0xb8>
 8008302:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008304:	b13a      	cbz	r2, 8008316 <_strtod_l+0xee>
 8008306:	2135      	movs	r1, #53	; 0x35
 8008308:	a81a      	add	r0, sp, #104	; 0x68
 800830a:	f002 ff04 	bl	800b116 <__copybits>
 800830e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008310:	4620      	mov	r0, r4
 8008312:	f002 fac3 	bl	800a89c <_Bfree>
 8008316:	3f01      	subs	r7, #1
 8008318:	2f04      	cmp	r7, #4
 800831a:	d806      	bhi.n	800832a <_strtod_l+0x102>
 800831c:	e8df f007 	tbb	[pc, r7]
 8008320:	1714030a 	.word	0x1714030a
 8008324:	0a          	.byte	0x0a
 8008325:	00          	.byte	0x00
 8008326:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800832a:	0728      	lsls	r0, r5, #28
 800832c:	d5c0      	bpl.n	80082b0 <_strtod_l+0x88>
 800832e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008332:	e7bd      	b.n	80082b0 <_strtod_l+0x88>
 8008334:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008338:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800833a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800833e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008342:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008346:	e7f0      	b.n	800832a <_strtod_l+0x102>
 8008348:	f8df b180 	ldr.w	fp, [pc, #384]	; 80084cc <_strtod_l+0x2a4>
 800834c:	e7ed      	b.n	800832a <_strtod_l+0x102>
 800834e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008352:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008356:	e7e8      	b.n	800832a <_strtod_l+0x102>
 8008358:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800835a:	1c5a      	adds	r2, r3, #1
 800835c:	9217      	str	r2, [sp, #92]	; 0x5c
 800835e:	785b      	ldrb	r3, [r3, #1]
 8008360:	2b30      	cmp	r3, #48	; 0x30
 8008362:	d0f9      	beq.n	8008358 <_strtod_l+0x130>
 8008364:	2b00      	cmp	r3, #0
 8008366:	d0a3      	beq.n	80082b0 <_strtod_l+0x88>
 8008368:	2301      	movs	r3, #1
 800836a:	f04f 0900 	mov.w	r9, #0
 800836e:	9304      	str	r3, [sp, #16]
 8008370:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008372:	9308      	str	r3, [sp, #32]
 8008374:	f8cd 901c 	str.w	r9, [sp, #28]
 8008378:	464f      	mov	r7, r9
 800837a:	220a      	movs	r2, #10
 800837c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800837e:	7806      	ldrb	r6, [r0, #0]
 8008380:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008384:	b2d9      	uxtb	r1, r3
 8008386:	2909      	cmp	r1, #9
 8008388:	d92a      	bls.n	80083e0 <_strtod_l+0x1b8>
 800838a:	9905      	ldr	r1, [sp, #20]
 800838c:	462a      	mov	r2, r5
 800838e:	f7ff ff19 	bl	80081c4 <strncmp>
 8008392:	b398      	cbz	r0, 80083fc <_strtod_l+0x1d4>
 8008394:	2000      	movs	r0, #0
 8008396:	4632      	mov	r2, r6
 8008398:	463d      	mov	r5, r7
 800839a:	9005      	str	r0, [sp, #20]
 800839c:	4603      	mov	r3, r0
 800839e:	2a65      	cmp	r2, #101	; 0x65
 80083a0:	d001      	beq.n	80083a6 <_strtod_l+0x17e>
 80083a2:	2a45      	cmp	r2, #69	; 0x45
 80083a4:	d118      	bne.n	80083d8 <_strtod_l+0x1b0>
 80083a6:	b91d      	cbnz	r5, 80083b0 <_strtod_l+0x188>
 80083a8:	9a04      	ldr	r2, [sp, #16]
 80083aa:	4302      	orrs	r2, r0
 80083ac:	d09e      	beq.n	80082ec <_strtod_l+0xc4>
 80083ae:	2500      	movs	r5, #0
 80083b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80083b4:	f108 0201 	add.w	r2, r8, #1
 80083b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80083ba:	f898 2001 	ldrb.w	r2, [r8, #1]
 80083be:	2a2b      	cmp	r2, #43	; 0x2b
 80083c0:	d075      	beq.n	80084ae <_strtod_l+0x286>
 80083c2:	2a2d      	cmp	r2, #45	; 0x2d
 80083c4:	d07b      	beq.n	80084be <_strtod_l+0x296>
 80083c6:	f04f 0c00 	mov.w	ip, #0
 80083ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80083ce:	2909      	cmp	r1, #9
 80083d0:	f240 8082 	bls.w	80084d8 <_strtod_l+0x2b0>
 80083d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80083d8:	2600      	movs	r6, #0
 80083da:	e09d      	b.n	8008518 <_strtod_l+0x2f0>
 80083dc:	2300      	movs	r3, #0
 80083de:	e7c4      	b.n	800836a <_strtod_l+0x142>
 80083e0:	2f08      	cmp	r7, #8
 80083e2:	bfd8      	it	le
 80083e4:	9907      	ldrle	r1, [sp, #28]
 80083e6:	f100 0001 	add.w	r0, r0, #1
 80083ea:	bfda      	itte	le
 80083ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80083f0:	9307      	strle	r3, [sp, #28]
 80083f2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80083f6:	3701      	adds	r7, #1
 80083f8:	9017      	str	r0, [sp, #92]	; 0x5c
 80083fa:	e7bf      	b.n	800837c <_strtod_l+0x154>
 80083fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083fe:	195a      	adds	r2, r3, r5
 8008400:	9217      	str	r2, [sp, #92]	; 0x5c
 8008402:	5d5a      	ldrb	r2, [r3, r5]
 8008404:	2f00      	cmp	r7, #0
 8008406:	d037      	beq.n	8008478 <_strtod_l+0x250>
 8008408:	9005      	str	r0, [sp, #20]
 800840a:	463d      	mov	r5, r7
 800840c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008410:	2b09      	cmp	r3, #9
 8008412:	d912      	bls.n	800843a <_strtod_l+0x212>
 8008414:	2301      	movs	r3, #1
 8008416:	e7c2      	b.n	800839e <_strtod_l+0x176>
 8008418:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	9217      	str	r2, [sp, #92]	; 0x5c
 800841e:	785a      	ldrb	r2, [r3, #1]
 8008420:	3001      	adds	r0, #1
 8008422:	2a30      	cmp	r2, #48	; 0x30
 8008424:	d0f8      	beq.n	8008418 <_strtod_l+0x1f0>
 8008426:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800842a:	2b08      	cmp	r3, #8
 800842c:	f200 84d9 	bhi.w	8008de2 <_strtod_l+0xbba>
 8008430:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008432:	9005      	str	r0, [sp, #20]
 8008434:	2000      	movs	r0, #0
 8008436:	9308      	str	r3, [sp, #32]
 8008438:	4605      	mov	r5, r0
 800843a:	3a30      	subs	r2, #48	; 0x30
 800843c:	f100 0301 	add.w	r3, r0, #1
 8008440:	d014      	beq.n	800846c <_strtod_l+0x244>
 8008442:	9905      	ldr	r1, [sp, #20]
 8008444:	4419      	add	r1, r3
 8008446:	9105      	str	r1, [sp, #20]
 8008448:	462b      	mov	r3, r5
 800844a:	eb00 0e05 	add.w	lr, r0, r5
 800844e:	210a      	movs	r1, #10
 8008450:	4573      	cmp	r3, lr
 8008452:	d113      	bne.n	800847c <_strtod_l+0x254>
 8008454:	182b      	adds	r3, r5, r0
 8008456:	2b08      	cmp	r3, #8
 8008458:	f105 0501 	add.w	r5, r5, #1
 800845c:	4405      	add	r5, r0
 800845e:	dc1c      	bgt.n	800849a <_strtod_l+0x272>
 8008460:	9907      	ldr	r1, [sp, #28]
 8008462:	230a      	movs	r3, #10
 8008464:	fb03 2301 	mla	r3, r3, r1, r2
 8008468:	9307      	str	r3, [sp, #28]
 800846a:	2300      	movs	r3, #0
 800846c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800846e:	1c51      	adds	r1, r2, #1
 8008470:	9117      	str	r1, [sp, #92]	; 0x5c
 8008472:	7852      	ldrb	r2, [r2, #1]
 8008474:	4618      	mov	r0, r3
 8008476:	e7c9      	b.n	800840c <_strtod_l+0x1e4>
 8008478:	4638      	mov	r0, r7
 800847a:	e7d2      	b.n	8008422 <_strtod_l+0x1fa>
 800847c:	2b08      	cmp	r3, #8
 800847e:	dc04      	bgt.n	800848a <_strtod_l+0x262>
 8008480:	9e07      	ldr	r6, [sp, #28]
 8008482:	434e      	muls	r6, r1
 8008484:	9607      	str	r6, [sp, #28]
 8008486:	3301      	adds	r3, #1
 8008488:	e7e2      	b.n	8008450 <_strtod_l+0x228>
 800848a:	f103 0c01 	add.w	ip, r3, #1
 800848e:	f1bc 0f10 	cmp.w	ip, #16
 8008492:	bfd8      	it	le
 8008494:	fb01 f909 	mulle.w	r9, r1, r9
 8008498:	e7f5      	b.n	8008486 <_strtod_l+0x25e>
 800849a:	2d10      	cmp	r5, #16
 800849c:	bfdc      	itt	le
 800849e:	230a      	movle	r3, #10
 80084a0:	fb03 2909 	mlale	r9, r3, r9, r2
 80084a4:	e7e1      	b.n	800846a <_strtod_l+0x242>
 80084a6:	2300      	movs	r3, #0
 80084a8:	9305      	str	r3, [sp, #20]
 80084aa:	2301      	movs	r3, #1
 80084ac:	e77c      	b.n	80083a8 <_strtod_l+0x180>
 80084ae:	f04f 0c00 	mov.w	ip, #0
 80084b2:	f108 0202 	add.w	r2, r8, #2
 80084b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80084b8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80084bc:	e785      	b.n	80083ca <_strtod_l+0x1a2>
 80084be:	f04f 0c01 	mov.w	ip, #1
 80084c2:	e7f6      	b.n	80084b2 <_strtod_l+0x28a>
 80084c4:	0800c368 	.word	0x0800c368
 80084c8:	0800c1c0 	.word	0x0800c1c0
 80084cc:	7ff00000 	.word	0x7ff00000
 80084d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80084d2:	1c51      	adds	r1, r2, #1
 80084d4:	9117      	str	r1, [sp, #92]	; 0x5c
 80084d6:	7852      	ldrb	r2, [r2, #1]
 80084d8:	2a30      	cmp	r2, #48	; 0x30
 80084da:	d0f9      	beq.n	80084d0 <_strtod_l+0x2a8>
 80084dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80084e0:	2908      	cmp	r1, #8
 80084e2:	f63f af79 	bhi.w	80083d8 <_strtod_l+0x1b0>
 80084e6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80084ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80084ec:	9206      	str	r2, [sp, #24]
 80084ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80084f0:	1c51      	adds	r1, r2, #1
 80084f2:	9117      	str	r1, [sp, #92]	; 0x5c
 80084f4:	7852      	ldrb	r2, [r2, #1]
 80084f6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80084fa:	2e09      	cmp	r6, #9
 80084fc:	d937      	bls.n	800856e <_strtod_l+0x346>
 80084fe:	9e06      	ldr	r6, [sp, #24]
 8008500:	1b89      	subs	r1, r1, r6
 8008502:	2908      	cmp	r1, #8
 8008504:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008508:	dc02      	bgt.n	8008510 <_strtod_l+0x2e8>
 800850a:	4576      	cmp	r6, lr
 800850c:	bfa8      	it	ge
 800850e:	4676      	movge	r6, lr
 8008510:	f1bc 0f00 	cmp.w	ip, #0
 8008514:	d000      	beq.n	8008518 <_strtod_l+0x2f0>
 8008516:	4276      	negs	r6, r6
 8008518:	2d00      	cmp	r5, #0
 800851a:	d14d      	bne.n	80085b8 <_strtod_l+0x390>
 800851c:	9904      	ldr	r1, [sp, #16]
 800851e:	4301      	orrs	r1, r0
 8008520:	f47f aec6 	bne.w	80082b0 <_strtod_l+0x88>
 8008524:	2b00      	cmp	r3, #0
 8008526:	f47f aee1 	bne.w	80082ec <_strtod_l+0xc4>
 800852a:	2a69      	cmp	r2, #105	; 0x69
 800852c:	d027      	beq.n	800857e <_strtod_l+0x356>
 800852e:	dc24      	bgt.n	800857a <_strtod_l+0x352>
 8008530:	2a49      	cmp	r2, #73	; 0x49
 8008532:	d024      	beq.n	800857e <_strtod_l+0x356>
 8008534:	2a4e      	cmp	r2, #78	; 0x4e
 8008536:	f47f aed9 	bne.w	80082ec <_strtod_l+0xc4>
 800853a:	499f      	ldr	r1, [pc, #636]	; (80087b8 <_strtod_l+0x590>)
 800853c:	a817      	add	r0, sp, #92	; 0x5c
 800853e:	f002 f837 	bl	800a5b0 <__match>
 8008542:	2800      	cmp	r0, #0
 8008544:	f43f aed2 	beq.w	80082ec <_strtod_l+0xc4>
 8008548:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	2b28      	cmp	r3, #40	; 0x28
 800854e:	d12d      	bne.n	80085ac <_strtod_l+0x384>
 8008550:	499a      	ldr	r1, [pc, #616]	; (80087bc <_strtod_l+0x594>)
 8008552:	aa1a      	add	r2, sp, #104	; 0x68
 8008554:	a817      	add	r0, sp, #92	; 0x5c
 8008556:	f002 f83f 	bl	800a5d8 <__hexnan>
 800855a:	2805      	cmp	r0, #5
 800855c:	d126      	bne.n	80085ac <_strtod_l+0x384>
 800855e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008560:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008564:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008568:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800856c:	e6a0      	b.n	80082b0 <_strtod_l+0x88>
 800856e:	210a      	movs	r1, #10
 8008570:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008574:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008578:	e7b9      	b.n	80084ee <_strtod_l+0x2c6>
 800857a:	2a6e      	cmp	r2, #110	; 0x6e
 800857c:	e7db      	b.n	8008536 <_strtod_l+0x30e>
 800857e:	4990      	ldr	r1, [pc, #576]	; (80087c0 <_strtod_l+0x598>)
 8008580:	a817      	add	r0, sp, #92	; 0x5c
 8008582:	f002 f815 	bl	800a5b0 <__match>
 8008586:	2800      	cmp	r0, #0
 8008588:	f43f aeb0 	beq.w	80082ec <_strtod_l+0xc4>
 800858c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800858e:	498d      	ldr	r1, [pc, #564]	; (80087c4 <_strtod_l+0x59c>)
 8008590:	3b01      	subs	r3, #1
 8008592:	a817      	add	r0, sp, #92	; 0x5c
 8008594:	9317      	str	r3, [sp, #92]	; 0x5c
 8008596:	f002 f80b 	bl	800a5b0 <__match>
 800859a:	b910      	cbnz	r0, 80085a2 <_strtod_l+0x37a>
 800859c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800859e:	3301      	adds	r3, #1
 80085a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80085a2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80087d4 <_strtod_l+0x5ac>
 80085a6:	f04f 0a00 	mov.w	sl, #0
 80085aa:	e681      	b.n	80082b0 <_strtod_l+0x88>
 80085ac:	4886      	ldr	r0, [pc, #536]	; (80087c8 <_strtod_l+0x5a0>)
 80085ae:	f003 f847 	bl	800b640 <nan>
 80085b2:	ec5b ab10 	vmov	sl, fp, d0
 80085b6:	e67b      	b.n	80082b0 <_strtod_l+0x88>
 80085b8:	9b05      	ldr	r3, [sp, #20]
 80085ba:	9807      	ldr	r0, [sp, #28]
 80085bc:	1af3      	subs	r3, r6, r3
 80085be:	2f00      	cmp	r7, #0
 80085c0:	bf08      	it	eq
 80085c2:	462f      	moveq	r7, r5
 80085c4:	2d10      	cmp	r5, #16
 80085c6:	9306      	str	r3, [sp, #24]
 80085c8:	46a8      	mov	r8, r5
 80085ca:	bfa8      	it	ge
 80085cc:	f04f 0810 	movge.w	r8, #16
 80085d0:	f7f7 ffa0 	bl	8000514 <__aeabi_ui2d>
 80085d4:	2d09      	cmp	r5, #9
 80085d6:	4682      	mov	sl, r0
 80085d8:	468b      	mov	fp, r1
 80085da:	dd13      	ble.n	8008604 <_strtod_l+0x3dc>
 80085dc:	4b7b      	ldr	r3, [pc, #492]	; (80087cc <_strtod_l+0x5a4>)
 80085de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80085e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80085e6:	f7f8 f80f 	bl	8000608 <__aeabi_dmul>
 80085ea:	4682      	mov	sl, r0
 80085ec:	4648      	mov	r0, r9
 80085ee:	468b      	mov	fp, r1
 80085f0:	f7f7 ff90 	bl	8000514 <__aeabi_ui2d>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	4650      	mov	r0, sl
 80085fa:	4659      	mov	r1, fp
 80085fc:	f7f7 fe4e 	bl	800029c <__adddf3>
 8008600:	4682      	mov	sl, r0
 8008602:	468b      	mov	fp, r1
 8008604:	2d0f      	cmp	r5, #15
 8008606:	dc38      	bgt.n	800867a <_strtod_l+0x452>
 8008608:	9b06      	ldr	r3, [sp, #24]
 800860a:	2b00      	cmp	r3, #0
 800860c:	f43f ae50 	beq.w	80082b0 <_strtod_l+0x88>
 8008610:	dd24      	ble.n	800865c <_strtod_l+0x434>
 8008612:	2b16      	cmp	r3, #22
 8008614:	dc0b      	bgt.n	800862e <_strtod_l+0x406>
 8008616:	496d      	ldr	r1, [pc, #436]	; (80087cc <_strtod_l+0x5a4>)
 8008618:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800861c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008620:	4652      	mov	r2, sl
 8008622:	465b      	mov	r3, fp
 8008624:	f7f7 fff0 	bl	8000608 <__aeabi_dmul>
 8008628:	4682      	mov	sl, r0
 800862a:	468b      	mov	fp, r1
 800862c:	e640      	b.n	80082b0 <_strtod_l+0x88>
 800862e:	9a06      	ldr	r2, [sp, #24]
 8008630:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008634:	4293      	cmp	r3, r2
 8008636:	db20      	blt.n	800867a <_strtod_l+0x452>
 8008638:	4c64      	ldr	r4, [pc, #400]	; (80087cc <_strtod_l+0x5a4>)
 800863a:	f1c5 050f 	rsb	r5, r5, #15
 800863e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008642:	4652      	mov	r2, sl
 8008644:	465b      	mov	r3, fp
 8008646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800864a:	f7f7 ffdd 	bl	8000608 <__aeabi_dmul>
 800864e:	9b06      	ldr	r3, [sp, #24]
 8008650:	1b5d      	subs	r5, r3, r5
 8008652:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008656:	e9d4 2300 	ldrd	r2, r3, [r4]
 800865a:	e7e3      	b.n	8008624 <_strtod_l+0x3fc>
 800865c:	9b06      	ldr	r3, [sp, #24]
 800865e:	3316      	adds	r3, #22
 8008660:	db0b      	blt.n	800867a <_strtod_l+0x452>
 8008662:	9b05      	ldr	r3, [sp, #20]
 8008664:	1b9e      	subs	r6, r3, r6
 8008666:	4b59      	ldr	r3, [pc, #356]	; (80087cc <_strtod_l+0x5a4>)
 8008668:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800866c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008670:	4650      	mov	r0, sl
 8008672:	4659      	mov	r1, fp
 8008674:	f7f8 f8f2 	bl	800085c <__aeabi_ddiv>
 8008678:	e7d6      	b.n	8008628 <_strtod_l+0x400>
 800867a:	9b06      	ldr	r3, [sp, #24]
 800867c:	eba5 0808 	sub.w	r8, r5, r8
 8008680:	4498      	add	r8, r3
 8008682:	f1b8 0f00 	cmp.w	r8, #0
 8008686:	dd74      	ble.n	8008772 <_strtod_l+0x54a>
 8008688:	f018 030f 	ands.w	r3, r8, #15
 800868c:	d00a      	beq.n	80086a4 <_strtod_l+0x47c>
 800868e:	494f      	ldr	r1, [pc, #316]	; (80087cc <_strtod_l+0x5a4>)
 8008690:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008694:	4652      	mov	r2, sl
 8008696:	465b      	mov	r3, fp
 8008698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800869c:	f7f7 ffb4 	bl	8000608 <__aeabi_dmul>
 80086a0:	4682      	mov	sl, r0
 80086a2:	468b      	mov	fp, r1
 80086a4:	f038 080f 	bics.w	r8, r8, #15
 80086a8:	d04f      	beq.n	800874a <_strtod_l+0x522>
 80086aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80086ae:	dd22      	ble.n	80086f6 <_strtod_l+0x4ce>
 80086b0:	2500      	movs	r5, #0
 80086b2:	462e      	mov	r6, r5
 80086b4:	9507      	str	r5, [sp, #28]
 80086b6:	9505      	str	r5, [sp, #20]
 80086b8:	2322      	movs	r3, #34	; 0x22
 80086ba:	f8df b118 	ldr.w	fp, [pc, #280]	; 80087d4 <_strtod_l+0x5ac>
 80086be:	6023      	str	r3, [r4, #0]
 80086c0:	f04f 0a00 	mov.w	sl, #0
 80086c4:	9b07      	ldr	r3, [sp, #28]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f43f adf2 	beq.w	80082b0 <_strtod_l+0x88>
 80086cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086ce:	4620      	mov	r0, r4
 80086d0:	f002 f8e4 	bl	800a89c <_Bfree>
 80086d4:	9905      	ldr	r1, [sp, #20]
 80086d6:	4620      	mov	r0, r4
 80086d8:	f002 f8e0 	bl	800a89c <_Bfree>
 80086dc:	4631      	mov	r1, r6
 80086de:	4620      	mov	r0, r4
 80086e0:	f002 f8dc 	bl	800a89c <_Bfree>
 80086e4:	9907      	ldr	r1, [sp, #28]
 80086e6:	4620      	mov	r0, r4
 80086e8:	f002 f8d8 	bl	800a89c <_Bfree>
 80086ec:	4629      	mov	r1, r5
 80086ee:	4620      	mov	r0, r4
 80086f0:	f002 f8d4 	bl	800a89c <_Bfree>
 80086f4:	e5dc      	b.n	80082b0 <_strtod_l+0x88>
 80086f6:	4b36      	ldr	r3, [pc, #216]	; (80087d0 <_strtod_l+0x5a8>)
 80086f8:	9304      	str	r3, [sp, #16]
 80086fa:	2300      	movs	r3, #0
 80086fc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008700:	4650      	mov	r0, sl
 8008702:	4659      	mov	r1, fp
 8008704:	4699      	mov	r9, r3
 8008706:	f1b8 0f01 	cmp.w	r8, #1
 800870a:	dc21      	bgt.n	8008750 <_strtod_l+0x528>
 800870c:	b10b      	cbz	r3, 8008712 <_strtod_l+0x4ea>
 800870e:	4682      	mov	sl, r0
 8008710:	468b      	mov	fp, r1
 8008712:	4b2f      	ldr	r3, [pc, #188]	; (80087d0 <_strtod_l+0x5a8>)
 8008714:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008718:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800871c:	4652      	mov	r2, sl
 800871e:	465b      	mov	r3, fp
 8008720:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008724:	f7f7 ff70 	bl	8000608 <__aeabi_dmul>
 8008728:	4b2a      	ldr	r3, [pc, #168]	; (80087d4 <_strtod_l+0x5ac>)
 800872a:	460a      	mov	r2, r1
 800872c:	400b      	ands	r3, r1
 800872e:	492a      	ldr	r1, [pc, #168]	; (80087d8 <_strtod_l+0x5b0>)
 8008730:	428b      	cmp	r3, r1
 8008732:	4682      	mov	sl, r0
 8008734:	d8bc      	bhi.n	80086b0 <_strtod_l+0x488>
 8008736:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800873a:	428b      	cmp	r3, r1
 800873c:	bf86      	itte	hi
 800873e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80087dc <_strtod_l+0x5b4>
 8008742:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8008746:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800874a:	2300      	movs	r3, #0
 800874c:	9304      	str	r3, [sp, #16]
 800874e:	e084      	b.n	800885a <_strtod_l+0x632>
 8008750:	f018 0f01 	tst.w	r8, #1
 8008754:	d005      	beq.n	8008762 <_strtod_l+0x53a>
 8008756:	9b04      	ldr	r3, [sp, #16]
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	f7f7 ff54 	bl	8000608 <__aeabi_dmul>
 8008760:	2301      	movs	r3, #1
 8008762:	9a04      	ldr	r2, [sp, #16]
 8008764:	3208      	adds	r2, #8
 8008766:	f109 0901 	add.w	r9, r9, #1
 800876a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800876e:	9204      	str	r2, [sp, #16]
 8008770:	e7c9      	b.n	8008706 <_strtod_l+0x4de>
 8008772:	d0ea      	beq.n	800874a <_strtod_l+0x522>
 8008774:	f1c8 0800 	rsb	r8, r8, #0
 8008778:	f018 020f 	ands.w	r2, r8, #15
 800877c:	d00a      	beq.n	8008794 <_strtod_l+0x56c>
 800877e:	4b13      	ldr	r3, [pc, #76]	; (80087cc <_strtod_l+0x5a4>)
 8008780:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008784:	4650      	mov	r0, sl
 8008786:	4659      	mov	r1, fp
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	f7f8 f866 	bl	800085c <__aeabi_ddiv>
 8008790:	4682      	mov	sl, r0
 8008792:	468b      	mov	fp, r1
 8008794:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008798:	d0d7      	beq.n	800874a <_strtod_l+0x522>
 800879a:	f1b8 0f1f 	cmp.w	r8, #31
 800879e:	dd1f      	ble.n	80087e0 <_strtod_l+0x5b8>
 80087a0:	2500      	movs	r5, #0
 80087a2:	462e      	mov	r6, r5
 80087a4:	9507      	str	r5, [sp, #28]
 80087a6:	9505      	str	r5, [sp, #20]
 80087a8:	2322      	movs	r3, #34	; 0x22
 80087aa:	f04f 0a00 	mov.w	sl, #0
 80087ae:	f04f 0b00 	mov.w	fp, #0
 80087b2:	6023      	str	r3, [r4, #0]
 80087b4:	e786      	b.n	80086c4 <_strtod_l+0x49c>
 80087b6:	bf00      	nop
 80087b8:	0800c199 	.word	0x0800c199
 80087bc:	0800c1d4 	.word	0x0800c1d4
 80087c0:	0800c191 	.word	0x0800c191
 80087c4:	0800c213 	.word	0x0800c213
 80087c8:	0800c520 	.word	0x0800c520
 80087cc:	0800c400 	.word	0x0800c400
 80087d0:	0800c3d8 	.word	0x0800c3d8
 80087d4:	7ff00000 	.word	0x7ff00000
 80087d8:	7ca00000 	.word	0x7ca00000
 80087dc:	7fefffff 	.word	0x7fefffff
 80087e0:	f018 0310 	ands.w	r3, r8, #16
 80087e4:	bf18      	it	ne
 80087e6:	236a      	movne	r3, #106	; 0x6a
 80087e8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008b98 <_strtod_l+0x970>
 80087ec:	9304      	str	r3, [sp, #16]
 80087ee:	4650      	mov	r0, sl
 80087f0:	4659      	mov	r1, fp
 80087f2:	2300      	movs	r3, #0
 80087f4:	f018 0f01 	tst.w	r8, #1
 80087f8:	d004      	beq.n	8008804 <_strtod_l+0x5dc>
 80087fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80087fe:	f7f7 ff03 	bl	8000608 <__aeabi_dmul>
 8008802:	2301      	movs	r3, #1
 8008804:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008808:	f109 0908 	add.w	r9, r9, #8
 800880c:	d1f2      	bne.n	80087f4 <_strtod_l+0x5cc>
 800880e:	b10b      	cbz	r3, 8008814 <_strtod_l+0x5ec>
 8008810:	4682      	mov	sl, r0
 8008812:	468b      	mov	fp, r1
 8008814:	9b04      	ldr	r3, [sp, #16]
 8008816:	b1c3      	cbz	r3, 800884a <_strtod_l+0x622>
 8008818:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800881c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008820:	2b00      	cmp	r3, #0
 8008822:	4659      	mov	r1, fp
 8008824:	dd11      	ble.n	800884a <_strtod_l+0x622>
 8008826:	2b1f      	cmp	r3, #31
 8008828:	f340 8124 	ble.w	8008a74 <_strtod_l+0x84c>
 800882c:	2b34      	cmp	r3, #52	; 0x34
 800882e:	bfde      	ittt	le
 8008830:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008834:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8008838:	fa03 f202 	lslle.w	r2, r3, r2
 800883c:	f04f 0a00 	mov.w	sl, #0
 8008840:	bfcc      	ite	gt
 8008842:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008846:	ea02 0b01 	andle.w	fp, r2, r1
 800884a:	2200      	movs	r2, #0
 800884c:	2300      	movs	r3, #0
 800884e:	4650      	mov	r0, sl
 8008850:	4659      	mov	r1, fp
 8008852:	f7f8 f941 	bl	8000ad8 <__aeabi_dcmpeq>
 8008856:	2800      	cmp	r0, #0
 8008858:	d1a2      	bne.n	80087a0 <_strtod_l+0x578>
 800885a:	9b07      	ldr	r3, [sp, #28]
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	9908      	ldr	r1, [sp, #32]
 8008860:	462b      	mov	r3, r5
 8008862:	463a      	mov	r2, r7
 8008864:	4620      	mov	r0, r4
 8008866:	f002 f881 	bl	800a96c <__s2b>
 800886a:	9007      	str	r0, [sp, #28]
 800886c:	2800      	cmp	r0, #0
 800886e:	f43f af1f 	beq.w	80086b0 <_strtod_l+0x488>
 8008872:	9b05      	ldr	r3, [sp, #20]
 8008874:	1b9e      	subs	r6, r3, r6
 8008876:	9b06      	ldr	r3, [sp, #24]
 8008878:	2b00      	cmp	r3, #0
 800887a:	bfb4      	ite	lt
 800887c:	4633      	movlt	r3, r6
 800887e:	2300      	movge	r3, #0
 8008880:	930c      	str	r3, [sp, #48]	; 0x30
 8008882:	9b06      	ldr	r3, [sp, #24]
 8008884:	2500      	movs	r5, #0
 8008886:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800888a:	9312      	str	r3, [sp, #72]	; 0x48
 800888c:	462e      	mov	r6, r5
 800888e:	9b07      	ldr	r3, [sp, #28]
 8008890:	4620      	mov	r0, r4
 8008892:	6859      	ldr	r1, [r3, #4]
 8008894:	f001 ffc2 	bl	800a81c <_Balloc>
 8008898:	9005      	str	r0, [sp, #20]
 800889a:	2800      	cmp	r0, #0
 800889c:	f43f af0c 	beq.w	80086b8 <_strtod_l+0x490>
 80088a0:	9b07      	ldr	r3, [sp, #28]
 80088a2:	691a      	ldr	r2, [r3, #16]
 80088a4:	3202      	adds	r2, #2
 80088a6:	f103 010c 	add.w	r1, r3, #12
 80088aa:	0092      	lsls	r2, r2, #2
 80088ac:	300c      	adds	r0, #12
 80088ae:	f7fe ff7b 	bl	80077a8 <memcpy>
 80088b2:	ec4b ab10 	vmov	d0, sl, fp
 80088b6:	aa1a      	add	r2, sp, #104	; 0x68
 80088b8:	a919      	add	r1, sp, #100	; 0x64
 80088ba:	4620      	mov	r0, r4
 80088bc:	f002 fb9c 	bl	800aff8 <__d2b>
 80088c0:	ec4b ab18 	vmov	d8, sl, fp
 80088c4:	9018      	str	r0, [sp, #96]	; 0x60
 80088c6:	2800      	cmp	r0, #0
 80088c8:	f43f aef6 	beq.w	80086b8 <_strtod_l+0x490>
 80088cc:	2101      	movs	r1, #1
 80088ce:	4620      	mov	r0, r4
 80088d0:	f002 f8e6 	bl	800aaa0 <__i2b>
 80088d4:	4606      	mov	r6, r0
 80088d6:	2800      	cmp	r0, #0
 80088d8:	f43f aeee 	beq.w	80086b8 <_strtod_l+0x490>
 80088dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80088de:	9904      	ldr	r1, [sp, #16]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	bfab      	itete	ge
 80088e4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80088e6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80088e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80088ea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80088ee:	bfac      	ite	ge
 80088f0:	eb03 0902 	addge.w	r9, r3, r2
 80088f4:	1ad7      	sublt	r7, r2, r3
 80088f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80088f8:	eba3 0801 	sub.w	r8, r3, r1
 80088fc:	4490      	add	r8, r2
 80088fe:	4ba1      	ldr	r3, [pc, #644]	; (8008b84 <_strtod_l+0x95c>)
 8008900:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008904:	4598      	cmp	r8, r3
 8008906:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800890a:	f280 80c7 	bge.w	8008a9c <_strtod_l+0x874>
 800890e:	eba3 0308 	sub.w	r3, r3, r8
 8008912:	2b1f      	cmp	r3, #31
 8008914:	eba2 0203 	sub.w	r2, r2, r3
 8008918:	f04f 0101 	mov.w	r1, #1
 800891c:	f300 80b1 	bgt.w	8008a82 <_strtod_l+0x85a>
 8008920:	fa01 f303 	lsl.w	r3, r1, r3
 8008924:	930d      	str	r3, [sp, #52]	; 0x34
 8008926:	2300      	movs	r3, #0
 8008928:	9308      	str	r3, [sp, #32]
 800892a:	eb09 0802 	add.w	r8, r9, r2
 800892e:	9b04      	ldr	r3, [sp, #16]
 8008930:	45c1      	cmp	r9, r8
 8008932:	4417      	add	r7, r2
 8008934:	441f      	add	r7, r3
 8008936:	464b      	mov	r3, r9
 8008938:	bfa8      	it	ge
 800893a:	4643      	movge	r3, r8
 800893c:	42bb      	cmp	r3, r7
 800893e:	bfa8      	it	ge
 8008940:	463b      	movge	r3, r7
 8008942:	2b00      	cmp	r3, #0
 8008944:	bfc2      	ittt	gt
 8008946:	eba8 0803 	subgt.w	r8, r8, r3
 800894a:	1aff      	subgt	r7, r7, r3
 800894c:	eba9 0903 	subgt.w	r9, r9, r3
 8008950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008952:	2b00      	cmp	r3, #0
 8008954:	dd17      	ble.n	8008986 <_strtod_l+0x75e>
 8008956:	4631      	mov	r1, r6
 8008958:	461a      	mov	r2, r3
 800895a:	4620      	mov	r0, r4
 800895c:	f002 f960 	bl	800ac20 <__pow5mult>
 8008960:	4606      	mov	r6, r0
 8008962:	2800      	cmp	r0, #0
 8008964:	f43f aea8 	beq.w	80086b8 <_strtod_l+0x490>
 8008968:	4601      	mov	r1, r0
 800896a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800896c:	4620      	mov	r0, r4
 800896e:	f002 f8ad 	bl	800aacc <__multiply>
 8008972:	900b      	str	r0, [sp, #44]	; 0x2c
 8008974:	2800      	cmp	r0, #0
 8008976:	f43f ae9f 	beq.w	80086b8 <_strtod_l+0x490>
 800897a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800897c:	4620      	mov	r0, r4
 800897e:	f001 ff8d 	bl	800a89c <_Bfree>
 8008982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008984:	9318      	str	r3, [sp, #96]	; 0x60
 8008986:	f1b8 0f00 	cmp.w	r8, #0
 800898a:	f300 808c 	bgt.w	8008aa6 <_strtod_l+0x87e>
 800898e:	9b06      	ldr	r3, [sp, #24]
 8008990:	2b00      	cmp	r3, #0
 8008992:	dd08      	ble.n	80089a6 <_strtod_l+0x77e>
 8008994:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008996:	9905      	ldr	r1, [sp, #20]
 8008998:	4620      	mov	r0, r4
 800899a:	f002 f941 	bl	800ac20 <__pow5mult>
 800899e:	9005      	str	r0, [sp, #20]
 80089a0:	2800      	cmp	r0, #0
 80089a2:	f43f ae89 	beq.w	80086b8 <_strtod_l+0x490>
 80089a6:	2f00      	cmp	r7, #0
 80089a8:	dd08      	ble.n	80089bc <_strtod_l+0x794>
 80089aa:	9905      	ldr	r1, [sp, #20]
 80089ac:	463a      	mov	r2, r7
 80089ae:	4620      	mov	r0, r4
 80089b0:	f002 f990 	bl	800acd4 <__lshift>
 80089b4:	9005      	str	r0, [sp, #20]
 80089b6:	2800      	cmp	r0, #0
 80089b8:	f43f ae7e 	beq.w	80086b8 <_strtod_l+0x490>
 80089bc:	f1b9 0f00 	cmp.w	r9, #0
 80089c0:	dd08      	ble.n	80089d4 <_strtod_l+0x7ac>
 80089c2:	4631      	mov	r1, r6
 80089c4:	464a      	mov	r2, r9
 80089c6:	4620      	mov	r0, r4
 80089c8:	f002 f984 	bl	800acd4 <__lshift>
 80089cc:	4606      	mov	r6, r0
 80089ce:	2800      	cmp	r0, #0
 80089d0:	f43f ae72 	beq.w	80086b8 <_strtod_l+0x490>
 80089d4:	9a05      	ldr	r2, [sp, #20]
 80089d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80089d8:	4620      	mov	r0, r4
 80089da:	f002 fa07 	bl	800adec <__mdiff>
 80089de:	4605      	mov	r5, r0
 80089e0:	2800      	cmp	r0, #0
 80089e2:	f43f ae69 	beq.w	80086b8 <_strtod_l+0x490>
 80089e6:	68c3      	ldr	r3, [r0, #12]
 80089e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80089ea:	2300      	movs	r3, #0
 80089ec:	60c3      	str	r3, [r0, #12]
 80089ee:	4631      	mov	r1, r6
 80089f0:	f002 f9e0 	bl	800adb4 <__mcmp>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	da60      	bge.n	8008aba <_strtod_l+0x892>
 80089f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089fa:	ea53 030a 	orrs.w	r3, r3, sl
 80089fe:	f040 8082 	bne.w	8008b06 <_strtod_l+0x8de>
 8008a02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d17d      	bne.n	8008b06 <_strtod_l+0x8de>
 8008a0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a0e:	0d1b      	lsrs	r3, r3, #20
 8008a10:	051b      	lsls	r3, r3, #20
 8008a12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008a16:	d976      	bls.n	8008b06 <_strtod_l+0x8de>
 8008a18:	696b      	ldr	r3, [r5, #20]
 8008a1a:	b913      	cbnz	r3, 8008a22 <_strtod_l+0x7fa>
 8008a1c:	692b      	ldr	r3, [r5, #16]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	dd71      	ble.n	8008b06 <_strtod_l+0x8de>
 8008a22:	4629      	mov	r1, r5
 8008a24:	2201      	movs	r2, #1
 8008a26:	4620      	mov	r0, r4
 8008a28:	f002 f954 	bl	800acd4 <__lshift>
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4605      	mov	r5, r0
 8008a30:	f002 f9c0 	bl	800adb4 <__mcmp>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	dd66      	ble.n	8008b06 <_strtod_l+0x8de>
 8008a38:	9904      	ldr	r1, [sp, #16]
 8008a3a:	4a53      	ldr	r2, [pc, #332]	; (8008b88 <_strtod_l+0x960>)
 8008a3c:	465b      	mov	r3, fp
 8008a3e:	2900      	cmp	r1, #0
 8008a40:	f000 8081 	beq.w	8008b46 <_strtod_l+0x91e>
 8008a44:	ea02 010b 	and.w	r1, r2, fp
 8008a48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008a4c:	dc7b      	bgt.n	8008b46 <_strtod_l+0x91e>
 8008a4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008a52:	f77f aea9 	ble.w	80087a8 <_strtod_l+0x580>
 8008a56:	4b4d      	ldr	r3, [pc, #308]	; (8008b8c <_strtod_l+0x964>)
 8008a58:	4650      	mov	r0, sl
 8008a5a:	4659      	mov	r1, fp
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f7f7 fdd3 	bl	8000608 <__aeabi_dmul>
 8008a62:	460b      	mov	r3, r1
 8008a64:	4303      	orrs	r3, r0
 8008a66:	bf08      	it	eq
 8008a68:	2322      	moveq	r3, #34	; 0x22
 8008a6a:	4682      	mov	sl, r0
 8008a6c:	468b      	mov	fp, r1
 8008a6e:	bf08      	it	eq
 8008a70:	6023      	streq	r3, [r4, #0]
 8008a72:	e62b      	b.n	80086cc <_strtod_l+0x4a4>
 8008a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a78:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7c:	ea03 0a0a 	and.w	sl, r3, sl
 8008a80:	e6e3      	b.n	800884a <_strtod_l+0x622>
 8008a82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008a86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008a8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008a8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008a92:	fa01 f308 	lsl.w	r3, r1, r8
 8008a96:	9308      	str	r3, [sp, #32]
 8008a98:	910d      	str	r1, [sp, #52]	; 0x34
 8008a9a:	e746      	b.n	800892a <_strtod_l+0x702>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	9308      	str	r3, [sp, #32]
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	930d      	str	r3, [sp, #52]	; 0x34
 8008aa4:	e741      	b.n	800892a <_strtod_l+0x702>
 8008aa6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008aa8:	4642      	mov	r2, r8
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f002 f912 	bl	800acd4 <__lshift>
 8008ab0:	9018      	str	r0, [sp, #96]	; 0x60
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	f47f af6b 	bne.w	800898e <_strtod_l+0x766>
 8008ab8:	e5fe      	b.n	80086b8 <_strtod_l+0x490>
 8008aba:	465f      	mov	r7, fp
 8008abc:	d16e      	bne.n	8008b9c <_strtod_l+0x974>
 8008abe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ac0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ac4:	b342      	cbz	r2, 8008b18 <_strtod_l+0x8f0>
 8008ac6:	4a32      	ldr	r2, [pc, #200]	; (8008b90 <_strtod_l+0x968>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d128      	bne.n	8008b1e <_strtod_l+0x8f6>
 8008acc:	9b04      	ldr	r3, [sp, #16]
 8008ace:	4651      	mov	r1, sl
 8008ad0:	b1eb      	cbz	r3, 8008b0e <_strtod_l+0x8e6>
 8008ad2:	4b2d      	ldr	r3, [pc, #180]	; (8008b88 <_strtod_l+0x960>)
 8008ad4:	403b      	ands	r3, r7
 8008ad6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ade:	d819      	bhi.n	8008b14 <_strtod_l+0x8ec>
 8008ae0:	0d1b      	lsrs	r3, r3, #20
 8008ae2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aea:	4299      	cmp	r1, r3
 8008aec:	d117      	bne.n	8008b1e <_strtod_l+0x8f6>
 8008aee:	4b29      	ldr	r3, [pc, #164]	; (8008b94 <_strtod_l+0x96c>)
 8008af0:	429f      	cmp	r7, r3
 8008af2:	d102      	bne.n	8008afa <_strtod_l+0x8d2>
 8008af4:	3101      	adds	r1, #1
 8008af6:	f43f addf 	beq.w	80086b8 <_strtod_l+0x490>
 8008afa:	4b23      	ldr	r3, [pc, #140]	; (8008b88 <_strtod_l+0x960>)
 8008afc:	403b      	ands	r3, r7
 8008afe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008b02:	f04f 0a00 	mov.w	sl, #0
 8008b06:	9b04      	ldr	r3, [sp, #16]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1a4      	bne.n	8008a56 <_strtod_l+0x82e>
 8008b0c:	e5de      	b.n	80086cc <_strtod_l+0x4a4>
 8008b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b12:	e7ea      	b.n	8008aea <_strtod_l+0x8c2>
 8008b14:	4613      	mov	r3, r2
 8008b16:	e7e8      	b.n	8008aea <_strtod_l+0x8c2>
 8008b18:	ea53 030a 	orrs.w	r3, r3, sl
 8008b1c:	d08c      	beq.n	8008a38 <_strtod_l+0x810>
 8008b1e:	9b08      	ldr	r3, [sp, #32]
 8008b20:	b1db      	cbz	r3, 8008b5a <_strtod_l+0x932>
 8008b22:	423b      	tst	r3, r7
 8008b24:	d0ef      	beq.n	8008b06 <_strtod_l+0x8de>
 8008b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b28:	9a04      	ldr	r2, [sp, #16]
 8008b2a:	4650      	mov	r0, sl
 8008b2c:	4659      	mov	r1, fp
 8008b2e:	b1c3      	cbz	r3, 8008b62 <_strtod_l+0x93a>
 8008b30:	f7ff fb5c 	bl	80081ec <sulp>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	ec51 0b18 	vmov	r0, r1, d8
 8008b3c:	f7f7 fbae 	bl	800029c <__adddf3>
 8008b40:	4682      	mov	sl, r0
 8008b42:	468b      	mov	fp, r1
 8008b44:	e7df      	b.n	8008b06 <_strtod_l+0x8de>
 8008b46:	4013      	ands	r3, r2
 8008b48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008b4c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008b50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008b54:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008b58:	e7d5      	b.n	8008b06 <_strtod_l+0x8de>
 8008b5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b5c:	ea13 0f0a 	tst.w	r3, sl
 8008b60:	e7e0      	b.n	8008b24 <_strtod_l+0x8fc>
 8008b62:	f7ff fb43 	bl	80081ec <sulp>
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	ec51 0b18 	vmov	r0, r1, d8
 8008b6e:	f7f7 fb93 	bl	8000298 <__aeabi_dsub>
 8008b72:	2200      	movs	r2, #0
 8008b74:	2300      	movs	r3, #0
 8008b76:	4682      	mov	sl, r0
 8008b78:	468b      	mov	fp, r1
 8008b7a:	f7f7 ffad 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	d0c1      	beq.n	8008b06 <_strtod_l+0x8de>
 8008b82:	e611      	b.n	80087a8 <_strtod_l+0x580>
 8008b84:	fffffc02 	.word	0xfffffc02
 8008b88:	7ff00000 	.word	0x7ff00000
 8008b8c:	39500000 	.word	0x39500000
 8008b90:	000fffff 	.word	0x000fffff
 8008b94:	7fefffff 	.word	0x7fefffff
 8008b98:	0800c1e8 	.word	0x0800c1e8
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	f002 fa86 	bl	800b0b0 <__ratio>
 8008ba4:	ec59 8b10 	vmov	r8, r9, d0
 8008ba8:	ee10 0a10 	vmov	r0, s0
 8008bac:	2200      	movs	r2, #0
 8008bae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008bb2:	4649      	mov	r1, r9
 8008bb4:	f7f7 ffa4 	bl	8000b00 <__aeabi_dcmple>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d07a      	beq.n	8008cb2 <_strtod_l+0xa8a>
 8008bbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d04a      	beq.n	8008c58 <_strtod_l+0xa30>
 8008bc2:	4b95      	ldr	r3, [pc, #596]	; (8008e18 <_strtod_l+0xbf0>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008bca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008e18 <_strtod_l+0xbf0>
 8008bce:	f04f 0800 	mov.w	r8, #0
 8008bd2:	4b92      	ldr	r3, [pc, #584]	; (8008e1c <_strtod_l+0xbf4>)
 8008bd4:	403b      	ands	r3, r7
 8008bd6:	930d      	str	r3, [sp, #52]	; 0x34
 8008bd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bda:	4b91      	ldr	r3, [pc, #580]	; (8008e20 <_strtod_l+0xbf8>)
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	f040 80b0 	bne.w	8008d42 <_strtod_l+0xb1a>
 8008be2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008be6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008bea:	ec4b ab10 	vmov	d0, sl, fp
 8008bee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008bf2:	f002 f985 	bl	800af00 <__ulp>
 8008bf6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008bfa:	ec53 2b10 	vmov	r2, r3, d0
 8008bfe:	f7f7 fd03 	bl	8000608 <__aeabi_dmul>
 8008c02:	4652      	mov	r2, sl
 8008c04:	465b      	mov	r3, fp
 8008c06:	f7f7 fb49 	bl	800029c <__adddf3>
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	4983      	ldr	r1, [pc, #524]	; (8008e1c <_strtod_l+0xbf4>)
 8008c0e:	4a85      	ldr	r2, [pc, #532]	; (8008e24 <_strtod_l+0xbfc>)
 8008c10:	4019      	ands	r1, r3
 8008c12:	4291      	cmp	r1, r2
 8008c14:	4682      	mov	sl, r0
 8008c16:	d960      	bls.n	8008cda <_strtod_l+0xab2>
 8008c18:	ee18 3a90 	vmov	r3, s17
 8008c1c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d104      	bne.n	8008c2e <_strtod_l+0xa06>
 8008c24:	ee18 3a10 	vmov	r3, s16
 8008c28:	3301      	adds	r3, #1
 8008c2a:	f43f ad45 	beq.w	80086b8 <_strtod_l+0x490>
 8008c2e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008e30 <_strtod_l+0xc08>
 8008c32:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008c36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f001 fe2f 	bl	800a89c <_Bfree>
 8008c3e:	9905      	ldr	r1, [sp, #20]
 8008c40:	4620      	mov	r0, r4
 8008c42:	f001 fe2b 	bl	800a89c <_Bfree>
 8008c46:	4631      	mov	r1, r6
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f001 fe27 	bl	800a89c <_Bfree>
 8008c4e:	4629      	mov	r1, r5
 8008c50:	4620      	mov	r0, r4
 8008c52:	f001 fe23 	bl	800a89c <_Bfree>
 8008c56:	e61a      	b.n	800888e <_strtod_l+0x666>
 8008c58:	f1ba 0f00 	cmp.w	sl, #0
 8008c5c:	d11b      	bne.n	8008c96 <_strtod_l+0xa6e>
 8008c5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c62:	b9f3      	cbnz	r3, 8008ca2 <_strtod_l+0xa7a>
 8008c64:	4b6c      	ldr	r3, [pc, #432]	; (8008e18 <_strtod_l+0xbf0>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	4640      	mov	r0, r8
 8008c6a:	4649      	mov	r1, r9
 8008c6c:	f7f7 ff3e 	bl	8000aec <__aeabi_dcmplt>
 8008c70:	b9d0      	cbnz	r0, 8008ca8 <_strtod_l+0xa80>
 8008c72:	4640      	mov	r0, r8
 8008c74:	4649      	mov	r1, r9
 8008c76:	4b6c      	ldr	r3, [pc, #432]	; (8008e28 <_strtod_l+0xc00>)
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f7f7 fcc5 	bl	8000608 <__aeabi_dmul>
 8008c7e:	4680      	mov	r8, r0
 8008c80:	4689      	mov	r9, r1
 8008c82:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008c86:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008c8a:	9315      	str	r3, [sp, #84]	; 0x54
 8008c8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008c90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008c94:	e79d      	b.n	8008bd2 <_strtod_l+0x9aa>
 8008c96:	f1ba 0f01 	cmp.w	sl, #1
 8008c9a:	d102      	bne.n	8008ca2 <_strtod_l+0xa7a>
 8008c9c:	2f00      	cmp	r7, #0
 8008c9e:	f43f ad83 	beq.w	80087a8 <_strtod_l+0x580>
 8008ca2:	4b62      	ldr	r3, [pc, #392]	; (8008e2c <_strtod_l+0xc04>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	e78e      	b.n	8008bc6 <_strtod_l+0x99e>
 8008ca8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008e28 <_strtod_l+0xc00>
 8008cac:	f04f 0800 	mov.w	r8, #0
 8008cb0:	e7e7      	b.n	8008c82 <_strtod_l+0xa5a>
 8008cb2:	4b5d      	ldr	r3, [pc, #372]	; (8008e28 <_strtod_l+0xc00>)
 8008cb4:	4640      	mov	r0, r8
 8008cb6:	4649      	mov	r1, r9
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f7f7 fca5 	bl	8000608 <__aeabi_dmul>
 8008cbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cc0:	4680      	mov	r8, r0
 8008cc2:	4689      	mov	r9, r1
 8008cc4:	b933      	cbnz	r3, 8008cd4 <_strtod_l+0xaac>
 8008cc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cca:	900e      	str	r0, [sp, #56]	; 0x38
 8008ccc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008cd2:	e7dd      	b.n	8008c90 <_strtod_l+0xa68>
 8008cd4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008cd8:	e7f9      	b.n	8008cce <_strtod_l+0xaa6>
 8008cda:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008cde:	9b04      	ldr	r3, [sp, #16]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1a8      	bne.n	8008c36 <_strtod_l+0xa0e>
 8008ce4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ce8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cea:	0d1b      	lsrs	r3, r3, #20
 8008cec:	051b      	lsls	r3, r3, #20
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d1a1      	bne.n	8008c36 <_strtod_l+0xa0e>
 8008cf2:	4640      	mov	r0, r8
 8008cf4:	4649      	mov	r1, r9
 8008cf6:	f7f7 ffe7 	bl	8000cc8 <__aeabi_d2lz>
 8008cfa:	f7f7 fc57 	bl	80005ac <__aeabi_l2d>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	4640      	mov	r0, r8
 8008d04:	4649      	mov	r1, r9
 8008d06:	f7f7 fac7 	bl	8000298 <__aeabi_dsub>
 8008d0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d10:	ea43 030a 	orr.w	r3, r3, sl
 8008d14:	4313      	orrs	r3, r2
 8008d16:	4680      	mov	r8, r0
 8008d18:	4689      	mov	r9, r1
 8008d1a:	d055      	beq.n	8008dc8 <_strtod_l+0xba0>
 8008d1c:	a336      	add	r3, pc, #216	; (adr r3, 8008df8 <_strtod_l+0xbd0>)
 8008d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d22:	f7f7 fee3 	bl	8000aec <__aeabi_dcmplt>
 8008d26:	2800      	cmp	r0, #0
 8008d28:	f47f acd0 	bne.w	80086cc <_strtod_l+0x4a4>
 8008d2c:	a334      	add	r3, pc, #208	; (adr r3, 8008e00 <_strtod_l+0xbd8>)
 8008d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d32:	4640      	mov	r0, r8
 8008d34:	4649      	mov	r1, r9
 8008d36:	f7f7 fef7 	bl	8000b28 <__aeabi_dcmpgt>
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	f43f af7b 	beq.w	8008c36 <_strtod_l+0xa0e>
 8008d40:	e4c4      	b.n	80086cc <_strtod_l+0x4a4>
 8008d42:	9b04      	ldr	r3, [sp, #16]
 8008d44:	b333      	cbz	r3, 8008d94 <_strtod_l+0xb6c>
 8008d46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d48:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d4c:	d822      	bhi.n	8008d94 <_strtod_l+0xb6c>
 8008d4e:	a32e      	add	r3, pc, #184	; (adr r3, 8008e08 <_strtod_l+0xbe0>)
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	4640      	mov	r0, r8
 8008d56:	4649      	mov	r1, r9
 8008d58:	f7f7 fed2 	bl	8000b00 <__aeabi_dcmple>
 8008d5c:	b1a0      	cbz	r0, 8008d88 <_strtod_l+0xb60>
 8008d5e:	4649      	mov	r1, r9
 8008d60:	4640      	mov	r0, r8
 8008d62:	f7f7 ff29 	bl	8000bb8 <__aeabi_d2uiz>
 8008d66:	2801      	cmp	r0, #1
 8008d68:	bf38      	it	cc
 8008d6a:	2001      	movcc	r0, #1
 8008d6c:	f7f7 fbd2 	bl	8000514 <__aeabi_ui2d>
 8008d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d72:	4680      	mov	r8, r0
 8008d74:	4689      	mov	r9, r1
 8008d76:	bb23      	cbnz	r3, 8008dc2 <_strtod_l+0xb9a>
 8008d78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d7c:	9010      	str	r0, [sp, #64]	; 0x40
 8008d7e:	9311      	str	r3, [sp, #68]	; 0x44
 8008d80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d84:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d8c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008d90:	1a9b      	subs	r3, r3, r2
 8008d92:	9309      	str	r3, [sp, #36]	; 0x24
 8008d94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d98:	eeb0 0a48 	vmov.f32	s0, s16
 8008d9c:	eef0 0a68 	vmov.f32	s1, s17
 8008da0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008da4:	f002 f8ac 	bl	800af00 <__ulp>
 8008da8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008dac:	ec53 2b10 	vmov	r2, r3, d0
 8008db0:	f7f7 fc2a 	bl	8000608 <__aeabi_dmul>
 8008db4:	ec53 2b18 	vmov	r2, r3, d8
 8008db8:	f7f7 fa70 	bl	800029c <__adddf3>
 8008dbc:	4682      	mov	sl, r0
 8008dbe:	468b      	mov	fp, r1
 8008dc0:	e78d      	b.n	8008cde <_strtod_l+0xab6>
 8008dc2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008dc6:	e7db      	b.n	8008d80 <_strtod_l+0xb58>
 8008dc8:	a311      	add	r3, pc, #68	; (adr r3, 8008e10 <_strtod_l+0xbe8>)
 8008dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dce:	f7f7 fe8d 	bl	8000aec <__aeabi_dcmplt>
 8008dd2:	e7b2      	b.n	8008d3a <_strtod_l+0xb12>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8008dd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008dda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ddc:	6013      	str	r3, [r2, #0]
 8008dde:	f7ff ba6b 	b.w	80082b8 <_strtod_l+0x90>
 8008de2:	2a65      	cmp	r2, #101	; 0x65
 8008de4:	f43f ab5f 	beq.w	80084a6 <_strtod_l+0x27e>
 8008de8:	2a45      	cmp	r2, #69	; 0x45
 8008dea:	f43f ab5c 	beq.w	80084a6 <_strtod_l+0x27e>
 8008dee:	2301      	movs	r3, #1
 8008df0:	f7ff bb94 	b.w	800851c <_strtod_l+0x2f4>
 8008df4:	f3af 8000 	nop.w
 8008df8:	94a03595 	.word	0x94a03595
 8008dfc:	3fdfffff 	.word	0x3fdfffff
 8008e00:	35afe535 	.word	0x35afe535
 8008e04:	3fe00000 	.word	0x3fe00000
 8008e08:	ffc00000 	.word	0xffc00000
 8008e0c:	41dfffff 	.word	0x41dfffff
 8008e10:	94a03595 	.word	0x94a03595
 8008e14:	3fcfffff 	.word	0x3fcfffff
 8008e18:	3ff00000 	.word	0x3ff00000
 8008e1c:	7ff00000 	.word	0x7ff00000
 8008e20:	7fe00000 	.word	0x7fe00000
 8008e24:	7c9fffff 	.word	0x7c9fffff
 8008e28:	3fe00000 	.word	0x3fe00000
 8008e2c:	bff00000 	.word	0xbff00000
 8008e30:	7fefffff 	.word	0x7fefffff

08008e34 <strtod>:
 8008e34:	460a      	mov	r2, r1
 8008e36:	4601      	mov	r1, r0
 8008e38:	4802      	ldr	r0, [pc, #8]	; (8008e44 <strtod+0x10>)
 8008e3a:	4b03      	ldr	r3, [pc, #12]	; (8008e48 <strtod+0x14>)
 8008e3c:	6800      	ldr	r0, [r0, #0]
 8008e3e:	f7ff b9f3 	b.w	8008228 <_strtod_l>
 8008e42:	bf00      	nop
 8008e44:	2000000c 	.word	0x2000000c
 8008e48:	20000074 	.word	0x20000074

08008e4c <__swbuf_r>:
 8008e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4e:	460e      	mov	r6, r1
 8008e50:	4614      	mov	r4, r2
 8008e52:	4605      	mov	r5, r0
 8008e54:	b118      	cbz	r0, 8008e5e <__swbuf_r+0x12>
 8008e56:	6983      	ldr	r3, [r0, #24]
 8008e58:	b90b      	cbnz	r3, 8008e5e <__swbuf_r+0x12>
 8008e5a:	f001 f84d 	bl	8009ef8 <__sinit>
 8008e5e:	4b21      	ldr	r3, [pc, #132]	; (8008ee4 <__swbuf_r+0x98>)
 8008e60:	429c      	cmp	r4, r3
 8008e62:	d12b      	bne.n	8008ebc <__swbuf_r+0x70>
 8008e64:	686c      	ldr	r4, [r5, #4]
 8008e66:	69a3      	ldr	r3, [r4, #24]
 8008e68:	60a3      	str	r3, [r4, #8]
 8008e6a:	89a3      	ldrh	r3, [r4, #12]
 8008e6c:	071a      	lsls	r2, r3, #28
 8008e6e:	d52f      	bpl.n	8008ed0 <__swbuf_r+0x84>
 8008e70:	6923      	ldr	r3, [r4, #16]
 8008e72:	b36b      	cbz	r3, 8008ed0 <__swbuf_r+0x84>
 8008e74:	6923      	ldr	r3, [r4, #16]
 8008e76:	6820      	ldr	r0, [r4, #0]
 8008e78:	1ac0      	subs	r0, r0, r3
 8008e7a:	6963      	ldr	r3, [r4, #20]
 8008e7c:	b2f6      	uxtb	r6, r6
 8008e7e:	4283      	cmp	r3, r0
 8008e80:	4637      	mov	r7, r6
 8008e82:	dc04      	bgt.n	8008e8e <__swbuf_r+0x42>
 8008e84:	4621      	mov	r1, r4
 8008e86:	4628      	mov	r0, r5
 8008e88:	f000 ffa2 	bl	8009dd0 <_fflush_r>
 8008e8c:	bb30      	cbnz	r0, 8008edc <__swbuf_r+0x90>
 8008e8e:	68a3      	ldr	r3, [r4, #8]
 8008e90:	3b01      	subs	r3, #1
 8008e92:	60a3      	str	r3, [r4, #8]
 8008e94:	6823      	ldr	r3, [r4, #0]
 8008e96:	1c5a      	adds	r2, r3, #1
 8008e98:	6022      	str	r2, [r4, #0]
 8008e9a:	701e      	strb	r6, [r3, #0]
 8008e9c:	6963      	ldr	r3, [r4, #20]
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	4283      	cmp	r3, r0
 8008ea2:	d004      	beq.n	8008eae <__swbuf_r+0x62>
 8008ea4:	89a3      	ldrh	r3, [r4, #12]
 8008ea6:	07db      	lsls	r3, r3, #31
 8008ea8:	d506      	bpl.n	8008eb8 <__swbuf_r+0x6c>
 8008eaa:	2e0a      	cmp	r6, #10
 8008eac:	d104      	bne.n	8008eb8 <__swbuf_r+0x6c>
 8008eae:	4621      	mov	r1, r4
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	f000 ff8d 	bl	8009dd0 <_fflush_r>
 8008eb6:	b988      	cbnz	r0, 8008edc <__swbuf_r+0x90>
 8008eb8:	4638      	mov	r0, r7
 8008eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ebc:	4b0a      	ldr	r3, [pc, #40]	; (8008ee8 <__swbuf_r+0x9c>)
 8008ebe:	429c      	cmp	r4, r3
 8008ec0:	d101      	bne.n	8008ec6 <__swbuf_r+0x7a>
 8008ec2:	68ac      	ldr	r4, [r5, #8]
 8008ec4:	e7cf      	b.n	8008e66 <__swbuf_r+0x1a>
 8008ec6:	4b09      	ldr	r3, [pc, #36]	; (8008eec <__swbuf_r+0xa0>)
 8008ec8:	429c      	cmp	r4, r3
 8008eca:	bf08      	it	eq
 8008ecc:	68ec      	ldreq	r4, [r5, #12]
 8008ece:	e7ca      	b.n	8008e66 <__swbuf_r+0x1a>
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	f000 f80c 	bl	8008ef0 <__swsetup_r>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d0cb      	beq.n	8008e74 <__swbuf_r+0x28>
 8008edc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008ee0:	e7ea      	b.n	8008eb8 <__swbuf_r+0x6c>
 8008ee2:	bf00      	nop
 8008ee4:	0800c2c0 	.word	0x0800c2c0
 8008ee8:	0800c2e0 	.word	0x0800c2e0
 8008eec:	0800c2a0 	.word	0x0800c2a0

08008ef0 <__swsetup_r>:
 8008ef0:	4b32      	ldr	r3, [pc, #200]	; (8008fbc <__swsetup_r+0xcc>)
 8008ef2:	b570      	push	{r4, r5, r6, lr}
 8008ef4:	681d      	ldr	r5, [r3, #0]
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	460c      	mov	r4, r1
 8008efa:	b125      	cbz	r5, 8008f06 <__swsetup_r+0x16>
 8008efc:	69ab      	ldr	r3, [r5, #24]
 8008efe:	b913      	cbnz	r3, 8008f06 <__swsetup_r+0x16>
 8008f00:	4628      	mov	r0, r5
 8008f02:	f000 fff9 	bl	8009ef8 <__sinit>
 8008f06:	4b2e      	ldr	r3, [pc, #184]	; (8008fc0 <__swsetup_r+0xd0>)
 8008f08:	429c      	cmp	r4, r3
 8008f0a:	d10f      	bne.n	8008f2c <__swsetup_r+0x3c>
 8008f0c:	686c      	ldr	r4, [r5, #4]
 8008f0e:	89a3      	ldrh	r3, [r4, #12]
 8008f10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f14:	0719      	lsls	r1, r3, #28
 8008f16:	d42c      	bmi.n	8008f72 <__swsetup_r+0x82>
 8008f18:	06dd      	lsls	r5, r3, #27
 8008f1a:	d411      	bmi.n	8008f40 <__swsetup_r+0x50>
 8008f1c:	2309      	movs	r3, #9
 8008f1e:	6033      	str	r3, [r6, #0]
 8008f20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f24:	81a3      	strh	r3, [r4, #12]
 8008f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f2a:	e03e      	b.n	8008faa <__swsetup_r+0xba>
 8008f2c:	4b25      	ldr	r3, [pc, #148]	; (8008fc4 <__swsetup_r+0xd4>)
 8008f2e:	429c      	cmp	r4, r3
 8008f30:	d101      	bne.n	8008f36 <__swsetup_r+0x46>
 8008f32:	68ac      	ldr	r4, [r5, #8]
 8008f34:	e7eb      	b.n	8008f0e <__swsetup_r+0x1e>
 8008f36:	4b24      	ldr	r3, [pc, #144]	; (8008fc8 <__swsetup_r+0xd8>)
 8008f38:	429c      	cmp	r4, r3
 8008f3a:	bf08      	it	eq
 8008f3c:	68ec      	ldreq	r4, [r5, #12]
 8008f3e:	e7e6      	b.n	8008f0e <__swsetup_r+0x1e>
 8008f40:	0758      	lsls	r0, r3, #29
 8008f42:	d512      	bpl.n	8008f6a <__swsetup_r+0x7a>
 8008f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f46:	b141      	cbz	r1, 8008f5a <__swsetup_r+0x6a>
 8008f48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f4c:	4299      	cmp	r1, r3
 8008f4e:	d002      	beq.n	8008f56 <__swsetup_r+0x66>
 8008f50:	4630      	mov	r0, r6
 8008f52:	f002 f93b 	bl	800b1cc <_free_r>
 8008f56:	2300      	movs	r3, #0
 8008f58:	6363      	str	r3, [r4, #52]	; 0x34
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f60:	81a3      	strh	r3, [r4, #12]
 8008f62:	2300      	movs	r3, #0
 8008f64:	6063      	str	r3, [r4, #4]
 8008f66:	6923      	ldr	r3, [r4, #16]
 8008f68:	6023      	str	r3, [r4, #0]
 8008f6a:	89a3      	ldrh	r3, [r4, #12]
 8008f6c:	f043 0308 	orr.w	r3, r3, #8
 8008f70:	81a3      	strh	r3, [r4, #12]
 8008f72:	6923      	ldr	r3, [r4, #16]
 8008f74:	b94b      	cbnz	r3, 8008f8a <__swsetup_r+0x9a>
 8008f76:	89a3      	ldrh	r3, [r4, #12]
 8008f78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f80:	d003      	beq.n	8008f8a <__swsetup_r+0x9a>
 8008f82:	4621      	mov	r1, r4
 8008f84:	4630      	mov	r0, r6
 8008f86:	f001 fbef 	bl	800a768 <__smakebuf_r>
 8008f8a:	89a0      	ldrh	r0, [r4, #12]
 8008f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f90:	f010 0301 	ands.w	r3, r0, #1
 8008f94:	d00a      	beq.n	8008fac <__swsetup_r+0xbc>
 8008f96:	2300      	movs	r3, #0
 8008f98:	60a3      	str	r3, [r4, #8]
 8008f9a:	6963      	ldr	r3, [r4, #20]
 8008f9c:	425b      	negs	r3, r3
 8008f9e:	61a3      	str	r3, [r4, #24]
 8008fa0:	6923      	ldr	r3, [r4, #16]
 8008fa2:	b943      	cbnz	r3, 8008fb6 <__swsetup_r+0xc6>
 8008fa4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008fa8:	d1ba      	bne.n	8008f20 <__swsetup_r+0x30>
 8008faa:	bd70      	pop	{r4, r5, r6, pc}
 8008fac:	0781      	lsls	r1, r0, #30
 8008fae:	bf58      	it	pl
 8008fb0:	6963      	ldrpl	r3, [r4, #20]
 8008fb2:	60a3      	str	r3, [r4, #8]
 8008fb4:	e7f4      	b.n	8008fa0 <__swsetup_r+0xb0>
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	e7f7      	b.n	8008faa <__swsetup_r+0xba>
 8008fba:	bf00      	nop
 8008fbc:	2000000c 	.word	0x2000000c
 8008fc0:	0800c2c0 	.word	0x0800c2c0
 8008fc4:	0800c2e0 	.word	0x0800c2e0
 8008fc8:	0800c2a0 	.word	0x0800c2a0

08008fcc <quorem>:
 8008fcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd0:	6903      	ldr	r3, [r0, #16]
 8008fd2:	690c      	ldr	r4, [r1, #16]
 8008fd4:	42a3      	cmp	r3, r4
 8008fd6:	4607      	mov	r7, r0
 8008fd8:	f2c0 8081 	blt.w	80090de <quorem+0x112>
 8008fdc:	3c01      	subs	r4, #1
 8008fde:	f101 0814 	add.w	r8, r1, #20
 8008fe2:	f100 0514 	add.w	r5, r0, #20
 8008fe6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fea:	9301      	str	r3, [sp, #4]
 8008fec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ff0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ffc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009000:	fbb2 f6f3 	udiv	r6, r2, r3
 8009004:	d331      	bcc.n	800906a <quorem+0x9e>
 8009006:	f04f 0e00 	mov.w	lr, #0
 800900a:	4640      	mov	r0, r8
 800900c:	46ac      	mov	ip, r5
 800900e:	46f2      	mov	sl, lr
 8009010:	f850 2b04 	ldr.w	r2, [r0], #4
 8009014:	b293      	uxth	r3, r2
 8009016:	fb06 e303 	mla	r3, r6, r3, lr
 800901a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800901e:	b29b      	uxth	r3, r3
 8009020:	ebaa 0303 	sub.w	r3, sl, r3
 8009024:	f8dc a000 	ldr.w	sl, [ip]
 8009028:	0c12      	lsrs	r2, r2, #16
 800902a:	fa13 f38a 	uxtah	r3, r3, sl
 800902e:	fb06 e202 	mla	r2, r6, r2, lr
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	9b00      	ldr	r3, [sp, #0]
 8009036:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800903a:	b292      	uxth	r2, r2
 800903c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009040:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009044:	f8bd 3000 	ldrh.w	r3, [sp]
 8009048:	4581      	cmp	r9, r0
 800904a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800904e:	f84c 3b04 	str.w	r3, [ip], #4
 8009052:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009056:	d2db      	bcs.n	8009010 <quorem+0x44>
 8009058:	f855 300b 	ldr.w	r3, [r5, fp]
 800905c:	b92b      	cbnz	r3, 800906a <quorem+0x9e>
 800905e:	9b01      	ldr	r3, [sp, #4]
 8009060:	3b04      	subs	r3, #4
 8009062:	429d      	cmp	r5, r3
 8009064:	461a      	mov	r2, r3
 8009066:	d32e      	bcc.n	80090c6 <quorem+0xfa>
 8009068:	613c      	str	r4, [r7, #16]
 800906a:	4638      	mov	r0, r7
 800906c:	f001 fea2 	bl	800adb4 <__mcmp>
 8009070:	2800      	cmp	r0, #0
 8009072:	db24      	blt.n	80090be <quorem+0xf2>
 8009074:	3601      	adds	r6, #1
 8009076:	4628      	mov	r0, r5
 8009078:	f04f 0c00 	mov.w	ip, #0
 800907c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009080:	f8d0 e000 	ldr.w	lr, [r0]
 8009084:	b293      	uxth	r3, r2
 8009086:	ebac 0303 	sub.w	r3, ip, r3
 800908a:	0c12      	lsrs	r2, r2, #16
 800908c:	fa13 f38e 	uxtah	r3, r3, lr
 8009090:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009094:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009098:	b29b      	uxth	r3, r3
 800909a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800909e:	45c1      	cmp	r9, r8
 80090a0:	f840 3b04 	str.w	r3, [r0], #4
 80090a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80090a8:	d2e8      	bcs.n	800907c <quorem+0xb0>
 80090aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090b2:	b922      	cbnz	r2, 80090be <quorem+0xf2>
 80090b4:	3b04      	subs	r3, #4
 80090b6:	429d      	cmp	r5, r3
 80090b8:	461a      	mov	r2, r3
 80090ba:	d30a      	bcc.n	80090d2 <quorem+0x106>
 80090bc:	613c      	str	r4, [r7, #16]
 80090be:	4630      	mov	r0, r6
 80090c0:	b003      	add	sp, #12
 80090c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c6:	6812      	ldr	r2, [r2, #0]
 80090c8:	3b04      	subs	r3, #4
 80090ca:	2a00      	cmp	r2, #0
 80090cc:	d1cc      	bne.n	8009068 <quorem+0x9c>
 80090ce:	3c01      	subs	r4, #1
 80090d0:	e7c7      	b.n	8009062 <quorem+0x96>
 80090d2:	6812      	ldr	r2, [r2, #0]
 80090d4:	3b04      	subs	r3, #4
 80090d6:	2a00      	cmp	r2, #0
 80090d8:	d1f0      	bne.n	80090bc <quorem+0xf0>
 80090da:	3c01      	subs	r4, #1
 80090dc:	e7eb      	b.n	80090b6 <quorem+0xea>
 80090de:	2000      	movs	r0, #0
 80090e0:	e7ee      	b.n	80090c0 <quorem+0xf4>
 80090e2:	0000      	movs	r0, r0
 80090e4:	0000      	movs	r0, r0
	...

080090e8 <_dtoa_r>:
 80090e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ec:	ed2d 8b04 	vpush	{d8-d9}
 80090f0:	ec57 6b10 	vmov	r6, r7, d0
 80090f4:	b093      	sub	sp, #76	; 0x4c
 80090f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80090f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80090fc:	9106      	str	r1, [sp, #24]
 80090fe:	ee10 aa10 	vmov	sl, s0
 8009102:	4604      	mov	r4, r0
 8009104:	9209      	str	r2, [sp, #36]	; 0x24
 8009106:	930c      	str	r3, [sp, #48]	; 0x30
 8009108:	46bb      	mov	fp, r7
 800910a:	b975      	cbnz	r5, 800912a <_dtoa_r+0x42>
 800910c:	2010      	movs	r0, #16
 800910e:	f001 fb6b 	bl	800a7e8 <malloc>
 8009112:	4602      	mov	r2, r0
 8009114:	6260      	str	r0, [r4, #36]	; 0x24
 8009116:	b920      	cbnz	r0, 8009122 <_dtoa_r+0x3a>
 8009118:	4ba7      	ldr	r3, [pc, #668]	; (80093b8 <_dtoa_r+0x2d0>)
 800911a:	21ea      	movs	r1, #234	; 0xea
 800911c:	48a7      	ldr	r0, [pc, #668]	; (80093bc <_dtoa_r+0x2d4>)
 800911e:	f002 fb09 	bl	800b734 <__assert_func>
 8009122:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009126:	6005      	str	r5, [r0, #0]
 8009128:	60c5      	str	r5, [r0, #12]
 800912a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800912c:	6819      	ldr	r1, [r3, #0]
 800912e:	b151      	cbz	r1, 8009146 <_dtoa_r+0x5e>
 8009130:	685a      	ldr	r2, [r3, #4]
 8009132:	604a      	str	r2, [r1, #4]
 8009134:	2301      	movs	r3, #1
 8009136:	4093      	lsls	r3, r2
 8009138:	608b      	str	r3, [r1, #8]
 800913a:	4620      	mov	r0, r4
 800913c:	f001 fbae 	bl	800a89c <_Bfree>
 8009140:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009142:	2200      	movs	r2, #0
 8009144:	601a      	str	r2, [r3, #0]
 8009146:	1e3b      	subs	r3, r7, #0
 8009148:	bfaa      	itet	ge
 800914a:	2300      	movge	r3, #0
 800914c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009150:	f8c8 3000 	strge.w	r3, [r8]
 8009154:	4b9a      	ldr	r3, [pc, #616]	; (80093c0 <_dtoa_r+0x2d8>)
 8009156:	bfbc      	itt	lt
 8009158:	2201      	movlt	r2, #1
 800915a:	f8c8 2000 	strlt.w	r2, [r8]
 800915e:	ea33 030b 	bics.w	r3, r3, fp
 8009162:	d11b      	bne.n	800919c <_dtoa_r+0xb4>
 8009164:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009166:	f242 730f 	movw	r3, #9999	; 0x270f
 800916a:	6013      	str	r3, [r2, #0]
 800916c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009170:	4333      	orrs	r3, r6
 8009172:	f000 8592 	beq.w	8009c9a <_dtoa_r+0xbb2>
 8009176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009178:	b963      	cbnz	r3, 8009194 <_dtoa_r+0xac>
 800917a:	4b92      	ldr	r3, [pc, #584]	; (80093c4 <_dtoa_r+0x2dc>)
 800917c:	e022      	b.n	80091c4 <_dtoa_r+0xdc>
 800917e:	4b92      	ldr	r3, [pc, #584]	; (80093c8 <_dtoa_r+0x2e0>)
 8009180:	9301      	str	r3, [sp, #4]
 8009182:	3308      	adds	r3, #8
 8009184:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	9801      	ldr	r0, [sp, #4]
 800918a:	b013      	add	sp, #76	; 0x4c
 800918c:	ecbd 8b04 	vpop	{d8-d9}
 8009190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009194:	4b8b      	ldr	r3, [pc, #556]	; (80093c4 <_dtoa_r+0x2dc>)
 8009196:	9301      	str	r3, [sp, #4]
 8009198:	3303      	adds	r3, #3
 800919a:	e7f3      	b.n	8009184 <_dtoa_r+0x9c>
 800919c:	2200      	movs	r2, #0
 800919e:	2300      	movs	r3, #0
 80091a0:	4650      	mov	r0, sl
 80091a2:	4659      	mov	r1, fp
 80091a4:	f7f7 fc98 	bl	8000ad8 <__aeabi_dcmpeq>
 80091a8:	ec4b ab19 	vmov	d9, sl, fp
 80091ac:	4680      	mov	r8, r0
 80091ae:	b158      	cbz	r0, 80091c8 <_dtoa_r+0xe0>
 80091b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091b2:	2301      	movs	r3, #1
 80091b4:	6013      	str	r3, [r2, #0]
 80091b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f000 856b 	beq.w	8009c94 <_dtoa_r+0xbac>
 80091be:	4883      	ldr	r0, [pc, #524]	; (80093cc <_dtoa_r+0x2e4>)
 80091c0:	6018      	str	r0, [r3, #0]
 80091c2:	1e43      	subs	r3, r0, #1
 80091c4:	9301      	str	r3, [sp, #4]
 80091c6:	e7df      	b.n	8009188 <_dtoa_r+0xa0>
 80091c8:	ec4b ab10 	vmov	d0, sl, fp
 80091cc:	aa10      	add	r2, sp, #64	; 0x40
 80091ce:	a911      	add	r1, sp, #68	; 0x44
 80091d0:	4620      	mov	r0, r4
 80091d2:	f001 ff11 	bl	800aff8 <__d2b>
 80091d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80091da:	ee08 0a10 	vmov	s16, r0
 80091de:	2d00      	cmp	r5, #0
 80091e0:	f000 8084 	beq.w	80092ec <_dtoa_r+0x204>
 80091e4:	ee19 3a90 	vmov	r3, s19
 80091e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80091f0:	4656      	mov	r6, sl
 80091f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80091f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80091fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80091fe:	4b74      	ldr	r3, [pc, #464]	; (80093d0 <_dtoa_r+0x2e8>)
 8009200:	2200      	movs	r2, #0
 8009202:	4630      	mov	r0, r6
 8009204:	4639      	mov	r1, r7
 8009206:	f7f7 f847 	bl	8000298 <__aeabi_dsub>
 800920a:	a365      	add	r3, pc, #404	; (adr r3, 80093a0 <_dtoa_r+0x2b8>)
 800920c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009210:	f7f7 f9fa 	bl	8000608 <__aeabi_dmul>
 8009214:	a364      	add	r3, pc, #400	; (adr r3, 80093a8 <_dtoa_r+0x2c0>)
 8009216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921a:	f7f7 f83f 	bl	800029c <__adddf3>
 800921e:	4606      	mov	r6, r0
 8009220:	4628      	mov	r0, r5
 8009222:	460f      	mov	r7, r1
 8009224:	f7f7 f986 	bl	8000534 <__aeabi_i2d>
 8009228:	a361      	add	r3, pc, #388	; (adr r3, 80093b0 <_dtoa_r+0x2c8>)
 800922a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922e:	f7f7 f9eb 	bl	8000608 <__aeabi_dmul>
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	4630      	mov	r0, r6
 8009238:	4639      	mov	r1, r7
 800923a:	f7f7 f82f 	bl	800029c <__adddf3>
 800923e:	4606      	mov	r6, r0
 8009240:	460f      	mov	r7, r1
 8009242:	f7f7 fc91 	bl	8000b68 <__aeabi_d2iz>
 8009246:	2200      	movs	r2, #0
 8009248:	9000      	str	r0, [sp, #0]
 800924a:	2300      	movs	r3, #0
 800924c:	4630      	mov	r0, r6
 800924e:	4639      	mov	r1, r7
 8009250:	f7f7 fc4c 	bl	8000aec <__aeabi_dcmplt>
 8009254:	b150      	cbz	r0, 800926c <_dtoa_r+0x184>
 8009256:	9800      	ldr	r0, [sp, #0]
 8009258:	f7f7 f96c 	bl	8000534 <__aeabi_i2d>
 800925c:	4632      	mov	r2, r6
 800925e:	463b      	mov	r3, r7
 8009260:	f7f7 fc3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009264:	b910      	cbnz	r0, 800926c <_dtoa_r+0x184>
 8009266:	9b00      	ldr	r3, [sp, #0]
 8009268:	3b01      	subs	r3, #1
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	9b00      	ldr	r3, [sp, #0]
 800926e:	2b16      	cmp	r3, #22
 8009270:	d85a      	bhi.n	8009328 <_dtoa_r+0x240>
 8009272:	9a00      	ldr	r2, [sp, #0]
 8009274:	4b57      	ldr	r3, [pc, #348]	; (80093d4 <_dtoa_r+0x2ec>)
 8009276:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800927a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927e:	ec51 0b19 	vmov	r0, r1, d9
 8009282:	f7f7 fc33 	bl	8000aec <__aeabi_dcmplt>
 8009286:	2800      	cmp	r0, #0
 8009288:	d050      	beq.n	800932c <_dtoa_r+0x244>
 800928a:	9b00      	ldr	r3, [sp, #0]
 800928c:	3b01      	subs	r3, #1
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	2300      	movs	r3, #0
 8009292:	930b      	str	r3, [sp, #44]	; 0x2c
 8009294:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009296:	1b5d      	subs	r5, r3, r5
 8009298:	1e6b      	subs	r3, r5, #1
 800929a:	9305      	str	r3, [sp, #20]
 800929c:	bf45      	ittet	mi
 800929e:	f1c5 0301 	rsbmi	r3, r5, #1
 80092a2:	9304      	strmi	r3, [sp, #16]
 80092a4:	2300      	movpl	r3, #0
 80092a6:	2300      	movmi	r3, #0
 80092a8:	bf4c      	ite	mi
 80092aa:	9305      	strmi	r3, [sp, #20]
 80092ac:	9304      	strpl	r3, [sp, #16]
 80092ae:	9b00      	ldr	r3, [sp, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	db3d      	blt.n	8009330 <_dtoa_r+0x248>
 80092b4:	9b05      	ldr	r3, [sp, #20]
 80092b6:	9a00      	ldr	r2, [sp, #0]
 80092b8:	920a      	str	r2, [sp, #40]	; 0x28
 80092ba:	4413      	add	r3, r2
 80092bc:	9305      	str	r3, [sp, #20]
 80092be:	2300      	movs	r3, #0
 80092c0:	9307      	str	r3, [sp, #28]
 80092c2:	9b06      	ldr	r3, [sp, #24]
 80092c4:	2b09      	cmp	r3, #9
 80092c6:	f200 8089 	bhi.w	80093dc <_dtoa_r+0x2f4>
 80092ca:	2b05      	cmp	r3, #5
 80092cc:	bfc4      	itt	gt
 80092ce:	3b04      	subgt	r3, #4
 80092d0:	9306      	strgt	r3, [sp, #24]
 80092d2:	9b06      	ldr	r3, [sp, #24]
 80092d4:	f1a3 0302 	sub.w	r3, r3, #2
 80092d8:	bfcc      	ite	gt
 80092da:	2500      	movgt	r5, #0
 80092dc:	2501      	movle	r5, #1
 80092de:	2b03      	cmp	r3, #3
 80092e0:	f200 8087 	bhi.w	80093f2 <_dtoa_r+0x30a>
 80092e4:	e8df f003 	tbb	[pc, r3]
 80092e8:	59383a2d 	.word	0x59383a2d
 80092ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80092f0:	441d      	add	r5, r3
 80092f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80092f6:	2b20      	cmp	r3, #32
 80092f8:	bfc1      	itttt	gt
 80092fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80092fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009302:	fa0b f303 	lslgt.w	r3, fp, r3
 8009306:	fa26 f000 	lsrgt.w	r0, r6, r0
 800930a:	bfda      	itte	le
 800930c:	f1c3 0320 	rsble	r3, r3, #32
 8009310:	fa06 f003 	lslle.w	r0, r6, r3
 8009314:	4318      	orrgt	r0, r3
 8009316:	f7f7 f8fd 	bl	8000514 <__aeabi_ui2d>
 800931a:	2301      	movs	r3, #1
 800931c:	4606      	mov	r6, r0
 800931e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009322:	3d01      	subs	r5, #1
 8009324:	930e      	str	r3, [sp, #56]	; 0x38
 8009326:	e76a      	b.n	80091fe <_dtoa_r+0x116>
 8009328:	2301      	movs	r3, #1
 800932a:	e7b2      	b.n	8009292 <_dtoa_r+0x1aa>
 800932c:	900b      	str	r0, [sp, #44]	; 0x2c
 800932e:	e7b1      	b.n	8009294 <_dtoa_r+0x1ac>
 8009330:	9b04      	ldr	r3, [sp, #16]
 8009332:	9a00      	ldr	r2, [sp, #0]
 8009334:	1a9b      	subs	r3, r3, r2
 8009336:	9304      	str	r3, [sp, #16]
 8009338:	4253      	negs	r3, r2
 800933a:	9307      	str	r3, [sp, #28]
 800933c:	2300      	movs	r3, #0
 800933e:	930a      	str	r3, [sp, #40]	; 0x28
 8009340:	e7bf      	b.n	80092c2 <_dtoa_r+0x1da>
 8009342:	2300      	movs	r3, #0
 8009344:	9308      	str	r3, [sp, #32]
 8009346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009348:	2b00      	cmp	r3, #0
 800934a:	dc55      	bgt.n	80093f8 <_dtoa_r+0x310>
 800934c:	2301      	movs	r3, #1
 800934e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009352:	461a      	mov	r2, r3
 8009354:	9209      	str	r2, [sp, #36]	; 0x24
 8009356:	e00c      	b.n	8009372 <_dtoa_r+0x28a>
 8009358:	2301      	movs	r3, #1
 800935a:	e7f3      	b.n	8009344 <_dtoa_r+0x25c>
 800935c:	2300      	movs	r3, #0
 800935e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009360:	9308      	str	r3, [sp, #32]
 8009362:	9b00      	ldr	r3, [sp, #0]
 8009364:	4413      	add	r3, r2
 8009366:	9302      	str	r3, [sp, #8]
 8009368:	3301      	adds	r3, #1
 800936a:	2b01      	cmp	r3, #1
 800936c:	9303      	str	r3, [sp, #12]
 800936e:	bfb8      	it	lt
 8009370:	2301      	movlt	r3, #1
 8009372:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009374:	2200      	movs	r2, #0
 8009376:	6042      	str	r2, [r0, #4]
 8009378:	2204      	movs	r2, #4
 800937a:	f102 0614 	add.w	r6, r2, #20
 800937e:	429e      	cmp	r6, r3
 8009380:	6841      	ldr	r1, [r0, #4]
 8009382:	d93d      	bls.n	8009400 <_dtoa_r+0x318>
 8009384:	4620      	mov	r0, r4
 8009386:	f001 fa49 	bl	800a81c <_Balloc>
 800938a:	9001      	str	r0, [sp, #4]
 800938c:	2800      	cmp	r0, #0
 800938e:	d13b      	bne.n	8009408 <_dtoa_r+0x320>
 8009390:	4b11      	ldr	r3, [pc, #68]	; (80093d8 <_dtoa_r+0x2f0>)
 8009392:	4602      	mov	r2, r0
 8009394:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009398:	e6c0      	b.n	800911c <_dtoa_r+0x34>
 800939a:	2301      	movs	r3, #1
 800939c:	e7df      	b.n	800935e <_dtoa_r+0x276>
 800939e:	bf00      	nop
 80093a0:	636f4361 	.word	0x636f4361
 80093a4:	3fd287a7 	.word	0x3fd287a7
 80093a8:	8b60c8b3 	.word	0x8b60c8b3
 80093ac:	3fc68a28 	.word	0x3fc68a28
 80093b0:	509f79fb 	.word	0x509f79fb
 80093b4:	3fd34413 	.word	0x3fd34413
 80093b8:	0800c21d 	.word	0x0800c21d
 80093bc:	0800c234 	.word	0x0800c234
 80093c0:	7ff00000 	.word	0x7ff00000
 80093c4:	0800c219 	.word	0x0800c219
 80093c8:	0800c210 	.word	0x0800c210
 80093cc:	0800c19d 	.word	0x0800c19d
 80093d0:	3ff80000 	.word	0x3ff80000
 80093d4:	0800c400 	.word	0x0800c400
 80093d8:	0800c28f 	.word	0x0800c28f
 80093dc:	2501      	movs	r5, #1
 80093de:	2300      	movs	r3, #0
 80093e0:	9306      	str	r3, [sp, #24]
 80093e2:	9508      	str	r5, [sp, #32]
 80093e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093ec:	2200      	movs	r2, #0
 80093ee:	2312      	movs	r3, #18
 80093f0:	e7b0      	b.n	8009354 <_dtoa_r+0x26c>
 80093f2:	2301      	movs	r3, #1
 80093f4:	9308      	str	r3, [sp, #32]
 80093f6:	e7f5      	b.n	80093e4 <_dtoa_r+0x2fc>
 80093f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093fe:	e7b8      	b.n	8009372 <_dtoa_r+0x28a>
 8009400:	3101      	adds	r1, #1
 8009402:	6041      	str	r1, [r0, #4]
 8009404:	0052      	lsls	r2, r2, #1
 8009406:	e7b8      	b.n	800937a <_dtoa_r+0x292>
 8009408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800940a:	9a01      	ldr	r2, [sp, #4]
 800940c:	601a      	str	r2, [r3, #0]
 800940e:	9b03      	ldr	r3, [sp, #12]
 8009410:	2b0e      	cmp	r3, #14
 8009412:	f200 809d 	bhi.w	8009550 <_dtoa_r+0x468>
 8009416:	2d00      	cmp	r5, #0
 8009418:	f000 809a 	beq.w	8009550 <_dtoa_r+0x468>
 800941c:	9b00      	ldr	r3, [sp, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	dd32      	ble.n	8009488 <_dtoa_r+0x3a0>
 8009422:	4ab7      	ldr	r2, [pc, #732]	; (8009700 <_dtoa_r+0x618>)
 8009424:	f003 030f 	and.w	r3, r3, #15
 8009428:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800942c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009430:	9b00      	ldr	r3, [sp, #0]
 8009432:	05d8      	lsls	r0, r3, #23
 8009434:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009438:	d516      	bpl.n	8009468 <_dtoa_r+0x380>
 800943a:	4bb2      	ldr	r3, [pc, #712]	; (8009704 <_dtoa_r+0x61c>)
 800943c:	ec51 0b19 	vmov	r0, r1, d9
 8009440:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009444:	f7f7 fa0a 	bl	800085c <__aeabi_ddiv>
 8009448:	f007 070f 	and.w	r7, r7, #15
 800944c:	4682      	mov	sl, r0
 800944e:	468b      	mov	fp, r1
 8009450:	2503      	movs	r5, #3
 8009452:	4eac      	ldr	r6, [pc, #688]	; (8009704 <_dtoa_r+0x61c>)
 8009454:	b957      	cbnz	r7, 800946c <_dtoa_r+0x384>
 8009456:	4642      	mov	r2, r8
 8009458:	464b      	mov	r3, r9
 800945a:	4650      	mov	r0, sl
 800945c:	4659      	mov	r1, fp
 800945e:	f7f7 f9fd 	bl	800085c <__aeabi_ddiv>
 8009462:	4682      	mov	sl, r0
 8009464:	468b      	mov	fp, r1
 8009466:	e028      	b.n	80094ba <_dtoa_r+0x3d2>
 8009468:	2502      	movs	r5, #2
 800946a:	e7f2      	b.n	8009452 <_dtoa_r+0x36a>
 800946c:	07f9      	lsls	r1, r7, #31
 800946e:	d508      	bpl.n	8009482 <_dtoa_r+0x39a>
 8009470:	4640      	mov	r0, r8
 8009472:	4649      	mov	r1, r9
 8009474:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009478:	f7f7 f8c6 	bl	8000608 <__aeabi_dmul>
 800947c:	3501      	adds	r5, #1
 800947e:	4680      	mov	r8, r0
 8009480:	4689      	mov	r9, r1
 8009482:	107f      	asrs	r7, r7, #1
 8009484:	3608      	adds	r6, #8
 8009486:	e7e5      	b.n	8009454 <_dtoa_r+0x36c>
 8009488:	f000 809b 	beq.w	80095c2 <_dtoa_r+0x4da>
 800948c:	9b00      	ldr	r3, [sp, #0]
 800948e:	4f9d      	ldr	r7, [pc, #628]	; (8009704 <_dtoa_r+0x61c>)
 8009490:	425e      	negs	r6, r3
 8009492:	4b9b      	ldr	r3, [pc, #620]	; (8009700 <_dtoa_r+0x618>)
 8009494:	f006 020f 	and.w	r2, r6, #15
 8009498:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800949c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a0:	ec51 0b19 	vmov	r0, r1, d9
 80094a4:	f7f7 f8b0 	bl	8000608 <__aeabi_dmul>
 80094a8:	1136      	asrs	r6, r6, #4
 80094aa:	4682      	mov	sl, r0
 80094ac:	468b      	mov	fp, r1
 80094ae:	2300      	movs	r3, #0
 80094b0:	2502      	movs	r5, #2
 80094b2:	2e00      	cmp	r6, #0
 80094b4:	d17a      	bne.n	80095ac <_dtoa_r+0x4c4>
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1d3      	bne.n	8009462 <_dtoa_r+0x37a>
 80094ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f000 8082 	beq.w	80095c6 <_dtoa_r+0x4de>
 80094c2:	4b91      	ldr	r3, [pc, #580]	; (8009708 <_dtoa_r+0x620>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	4650      	mov	r0, sl
 80094c8:	4659      	mov	r1, fp
 80094ca:	f7f7 fb0f 	bl	8000aec <__aeabi_dcmplt>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d079      	beq.n	80095c6 <_dtoa_r+0x4de>
 80094d2:	9b03      	ldr	r3, [sp, #12]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d076      	beq.n	80095c6 <_dtoa_r+0x4de>
 80094d8:	9b02      	ldr	r3, [sp, #8]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	dd36      	ble.n	800954c <_dtoa_r+0x464>
 80094de:	9b00      	ldr	r3, [sp, #0]
 80094e0:	4650      	mov	r0, sl
 80094e2:	4659      	mov	r1, fp
 80094e4:	1e5f      	subs	r7, r3, #1
 80094e6:	2200      	movs	r2, #0
 80094e8:	4b88      	ldr	r3, [pc, #544]	; (800970c <_dtoa_r+0x624>)
 80094ea:	f7f7 f88d 	bl	8000608 <__aeabi_dmul>
 80094ee:	9e02      	ldr	r6, [sp, #8]
 80094f0:	4682      	mov	sl, r0
 80094f2:	468b      	mov	fp, r1
 80094f4:	3501      	adds	r5, #1
 80094f6:	4628      	mov	r0, r5
 80094f8:	f7f7 f81c 	bl	8000534 <__aeabi_i2d>
 80094fc:	4652      	mov	r2, sl
 80094fe:	465b      	mov	r3, fp
 8009500:	f7f7 f882 	bl	8000608 <__aeabi_dmul>
 8009504:	4b82      	ldr	r3, [pc, #520]	; (8009710 <_dtoa_r+0x628>)
 8009506:	2200      	movs	r2, #0
 8009508:	f7f6 fec8 	bl	800029c <__adddf3>
 800950c:	46d0      	mov	r8, sl
 800950e:	46d9      	mov	r9, fp
 8009510:	4682      	mov	sl, r0
 8009512:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009516:	2e00      	cmp	r6, #0
 8009518:	d158      	bne.n	80095cc <_dtoa_r+0x4e4>
 800951a:	4b7e      	ldr	r3, [pc, #504]	; (8009714 <_dtoa_r+0x62c>)
 800951c:	2200      	movs	r2, #0
 800951e:	4640      	mov	r0, r8
 8009520:	4649      	mov	r1, r9
 8009522:	f7f6 feb9 	bl	8000298 <__aeabi_dsub>
 8009526:	4652      	mov	r2, sl
 8009528:	465b      	mov	r3, fp
 800952a:	4680      	mov	r8, r0
 800952c:	4689      	mov	r9, r1
 800952e:	f7f7 fafb 	bl	8000b28 <__aeabi_dcmpgt>
 8009532:	2800      	cmp	r0, #0
 8009534:	f040 8295 	bne.w	8009a62 <_dtoa_r+0x97a>
 8009538:	4652      	mov	r2, sl
 800953a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800953e:	4640      	mov	r0, r8
 8009540:	4649      	mov	r1, r9
 8009542:	f7f7 fad3 	bl	8000aec <__aeabi_dcmplt>
 8009546:	2800      	cmp	r0, #0
 8009548:	f040 8289 	bne.w	8009a5e <_dtoa_r+0x976>
 800954c:	ec5b ab19 	vmov	sl, fp, d9
 8009550:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009552:	2b00      	cmp	r3, #0
 8009554:	f2c0 8148 	blt.w	80097e8 <_dtoa_r+0x700>
 8009558:	9a00      	ldr	r2, [sp, #0]
 800955a:	2a0e      	cmp	r2, #14
 800955c:	f300 8144 	bgt.w	80097e8 <_dtoa_r+0x700>
 8009560:	4b67      	ldr	r3, [pc, #412]	; (8009700 <_dtoa_r+0x618>)
 8009562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009566:	e9d3 8900 	ldrd	r8, r9, [r3]
 800956a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800956c:	2b00      	cmp	r3, #0
 800956e:	f280 80d5 	bge.w	800971c <_dtoa_r+0x634>
 8009572:	9b03      	ldr	r3, [sp, #12]
 8009574:	2b00      	cmp	r3, #0
 8009576:	f300 80d1 	bgt.w	800971c <_dtoa_r+0x634>
 800957a:	f040 826f 	bne.w	8009a5c <_dtoa_r+0x974>
 800957e:	4b65      	ldr	r3, [pc, #404]	; (8009714 <_dtoa_r+0x62c>)
 8009580:	2200      	movs	r2, #0
 8009582:	4640      	mov	r0, r8
 8009584:	4649      	mov	r1, r9
 8009586:	f7f7 f83f 	bl	8000608 <__aeabi_dmul>
 800958a:	4652      	mov	r2, sl
 800958c:	465b      	mov	r3, fp
 800958e:	f7f7 fac1 	bl	8000b14 <__aeabi_dcmpge>
 8009592:	9e03      	ldr	r6, [sp, #12]
 8009594:	4637      	mov	r7, r6
 8009596:	2800      	cmp	r0, #0
 8009598:	f040 8245 	bne.w	8009a26 <_dtoa_r+0x93e>
 800959c:	9d01      	ldr	r5, [sp, #4]
 800959e:	2331      	movs	r3, #49	; 0x31
 80095a0:	f805 3b01 	strb.w	r3, [r5], #1
 80095a4:	9b00      	ldr	r3, [sp, #0]
 80095a6:	3301      	adds	r3, #1
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	e240      	b.n	8009a2e <_dtoa_r+0x946>
 80095ac:	07f2      	lsls	r2, r6, #31
 80095ae:	d505      	bpl.n	80095bc <_dtoa_r+0x4d4>
 80095b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095b4:	f7f7 f828 	bl	8000608 <__aeabi_dmul>
 80095b8:	3501      	adds	r5, #1
 80095ba:	2301      	movs	r3, #1
 80095bc:	1076      	asrs	r6, r6, #1
 80095be:	3708      	adds	r7, #8
 80095c0:	e777      	b.n	80094b2 <_dtoa_r+0x3ca>
 80095c2:	2502      	movs	r5, #2
 80095c4:	e779      	b.n	80094ba <_dtoa_r+0x3d2>
 80095c6:	9f00      	ldr	r7, [sp, #0]
 80095c8:	9e03      	ldr	r6, [sp, #12]
 80095ca:	e794      	b.n	80094f6 <_dtoa_r+0x40e>
 80095cc:	9901      	ldr	r1, [sp, #4]
 80095ce:	4b4c      	ldr	r3, [pc, #304]	; (8009700 <_dtoa_r+0x618>)
 80095d0:	4431      	add	r1, r6
 80095d2:	910d      	str	r1, [sp, #52]	; 0x34
 80095d4:	9908      	ldr	r1, [sp, #32]
 80095d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80095da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095de:	2900      	cmp	r1, #0
 80095e0:	d043      	beq.n	800966a <_dtoa_r+0x582>
 80095e2:	494d      	ldr	r1, [pc, #308]	; (8009718 <_dtoa_r+0x630>)
 80095e4:	2000      	movs	r0, #0
 80095e6:	f7f7 f939 	bl	800085c <__aeabi_ddiv>
 80095ea:	4652      	mov	r2, sl
 80095ec:	465b      	mov	r3, fp
 80095ee:	f7f6 fe53 	bl	8000298 <__aeabi_dsub>
 80095f2:	9d01      	ldr	r5, [sp, #4]
 80095f4:	4682      	mov	sl, r0
 80095f6:	468b      	mov	fp, r1
 80095f8:	4649      	mov	r1, r9
 80095fa:	4640      	mov	r0, r8
 80095fc:	f7f7 fab4 	bl	8000b68 <__aeabi_d2iz>
 8009600:	4606      	mov	r6, r0
 8009602:	f7f6 ff97 	bl	8000534 <__aeabi_i2d>
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	4640      	mov	r0, r8
 800960c:	4649      	mov	r1, r9
 800960e:	f7f6 fe43 	bl	8000298 <__aeabi_dsub>
 8009612:	3630      	adds	r6, #48	; 0x30
 8009614:	f805 6b01 	strb.w	r6, [r5], #1
 8009618:	4652      	mov	r2, sl
 800961a:	465b      	mov	r3, fp
 800961c:	4680      	mov	r8, r0
 800961e:	4689      	mov	r9, r1
 8009620:	f7f7 fa64 	bl	8000aec <__aeabi_dcmplt>
 8009624:	2800      	cmp	r0, #0
 8009626:	d163      	bne.n	80096f0 <_dtoa_r+0x608>
 8009628:	4642      	mov	r2, r8
 800962a:	464b      	mov	r3, r9
 800962c:	4936      	ldr	r1, [pc, #216]	; (8009708 <_dtoa_r+0x620>)
 800962e:	2000      	movs	r0, #0
 8009630:	f7f6 fe32 	bl	8000298 <__aeabi_dsub>
 8009634:	4652      	mov	r2, sl
 8009636:	465b      	mov	r3, fp
 8009638:	f7f7 fa58 	bl	8000aec <__aeabi_dcmplt>
 800963c:	2800      	cmp	r0, #0
 800963e:	f040 80b5 	bne.w	80097ac <_dtoa_r+0x6c4>
 8009642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009644:	429d      	cmp	r5, r3
 8009646:	d081      	beq.n	800954c <_dtoa_r+0x464>
 8009648:	4b30      	ldr	r3, [pc, #192]	; (800970c <_dtoa_r+0x624>)
 800964a:	2200      	movs	r2, #0
 800964c:	4650      	mov	r0, sl
 800964e:	4659      	mov	r1, fp
 8009650:	f7f6 ffda 	bl	8000608 <__aeabi_dmul>
 8009654:	4b2d      	ldr	r3, [pc, #180]	; (800970c <_dtoa_r+0x624>)
 8009656:	4682      	mov	sl, r0
 8009658:	468b      	mov	fp, r1
 800965a:	4640      	mov	r0, r8
 800965c:	4649      	mov	r1, r9
 800965e:	2200      	movs	r2, #0
 8009660:	f7f6 ffd2 	bl	8000608 <__aeabi_dmul>
 8009664:	4680      	mov	r8, r0
 8009666:	4689      	mov	r9, r1
 8009668:	e7c6      	b.n	80095f8 <_dtoa_r+0x510>
 800966a:	4650      	mov	r0, sl
 800966c:	4659      	mov	r1, fp
 800966e:	f7f6 ffcb 	bl	8000608 <__aeabi_dmul>
 8009672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009674:	9d01      	ldr	r5, [sp, #4]
 8009676:	930f      	str	r3, [sp, #60]	; 0x3c
 8009678:	4682      	mov	sl, r0
 800967a:	468b      	mov	fp, r1
 800967c:	4649      	mov	r1, r9
 800967e:	4640      	mov	r0, r8
 8009680:	f7f7 fa72 	bl	8000b68 <__aeabi_d2iz>
 8009684:	4606      	mov	r6, r0
 8009686:	f7f6 ff55 	bl	8000534 <__aeabi_i2d>
 800968a:	3630      	adds	r6, #48	; 0x30
 800968c:	4602      	mov	r2, r0
 800968e:	460b      	mov	r3, r1
 8009690:	4640      	mov	r0, r8
 8009692:	4649      	mov	r1, r9
 8009694:	f7f6 fe00 	bl	8000298 <__aeabi_dsub>
 8009698:	f805 6b01 	strb.w	r6, [r5], #1
 800969c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800969e:	429d      	cmp	r5, r3
 80096a0:	4680      	mov	r8, r0
 80096a2:	4689      	mov	r9, r1
 80096a4:	f04f 0200 	mov.w	r2, #0
 80096a8:	d124      	bne.n	80096f4 <_dtoa_r+0x60c>
 80096aa:	4b1b      	ldr	r3, [pc, #108]	; (8009718 <_dtoa_r+0x630>)
 80096ac:	4650      	mov	r0, sl
 80096ae:	4659      	mov	r1, fp
 80096b0:	f7f6 fdf4 	bl	800029c <__adddf3>
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	4640      	mov	r0, r8
 80096ba:	4649      	mov	r1, r9
 80096bc:	f7f7 fa34 	bl	8000b28 <__aeabi_dcmpgt>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d173      	bne.n	80097ac <_dtoa_r+0x6c4>
 80096c4:	4652      	mov	r2, sl
 80096c6:	465b      	mov	r3, fp
 80096c8:	4913      	ldr	r1, [pc, #76]	; (8009718 <_dtoa_r+0x630>)
 80096ca:	2000      	movs	r0, #0
 80096cc:	f7f6 fde4 	bl	8000298 <__aeabi_dsub>
 80096d0:	4602      	mov	r2, r0
 80096d2:	460b      	mov	r3, r1
 80096d4:	4640      	mov	r0, r8
 80096d6:	4649      	mov	r1, r9
 80096d8:	f7f7 fa08 	bl	8000aec <__aeabi_dcmplt>
 80096dc:	2800      	cmp	r0, #0
 80096de:	f43f af35 	beq.w	800954c <_dtoa_r+0x464>
 80096e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80096e4:	1e6b      	subs	r3, r5, #1
 80096e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80096e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80096ec:	2b30      	cmp	r3, #48	; 0x30
 80096ee:	d0f8      	beq.n	80096e2 <_dtoa_r+0x5fa>
 80096f0:	9700      	str	r7, [sp, #0]
 80096f2:	e049      	b.n	8009788 <_dtoa_r+0x6a0>
 80096f4:	4b05      	ldr	r3, [pc, #20]	; (800970c <_dtoa_r+0x624>)
 80096f6:	f7f6 ff87 	bl	8000608 <__aeabi_dmul>
 80096fa:	4680      	mov	r8, r0
 80096fc:	4689      	mov	r9, r1
 80096fe:	e7bd      	b.n	800967c <_dtoa_r+0x594>
 8009700:	0800c400 	.word	0x0800c400
 8009704:	0800c3d8 	.word	0x0800c3d8
 8009708:	3ff00000 	.word	0x3ff00000
 800970c:	40240000 	.word	0x40240000
 8009710:	401c0000 	.word	0x401c0000
 8009714:	40140000 	.word	0x40140000
 8009718:	3fe00000 	.word	0x3fe00000
 800971c:	9d01      	ldr	r5, [sp, #4]
 800971e:	4656      	mov	r6, sl
 8009720:	465f      	mov	r7, fp
 8009722:	4642      	mov	r2, r8
 8009724:	464b      	mov	r3, r9
 8009726:	4630      	mov	r0, r6
 8009728:	4639      	mov	r1, r7
 800972a:	f7f7 f897 	bl	800085c <__aeabi_ddiv>
 800972e:	f7f7 fa1b 	bl	8000b68 <__aeabi_d2iz>
 8009732:	4682      	mov	sl, r0
 8009734:	f7f6 fefe 	bl	8000534 <__aeabi_i2d>
 8009738:	4642      	mov	r2, r8
 800973a:	464b      	mov	r3, r9
 800973c:	f7f6 ff64 	bl	8000608 <__aeabi_dmul>
 8009740:	4602      	mov	r2, r0
 8009742:	460b      	mov	r3, r1
 8009744:	4630      	mov	r0, r6
 8009746:	4639      	mov	r1, r7
 8009748:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800974c:	f7f6 fda4 	bl	8000298 <__aeabi_dsub>
 8009750:	f805 6b01 	strb.w	r6, [r5], #1
 8009754:	9e01      	ldr	r6, [sp, #4]
 8009756:	9f03      	ldr	r7, [sp, #12]
 8009758:	1bae      	subs	r6, r5, r6
 800975a:	42b7      	cmp	r7, r6
 800975c:	4602      	mov	r2, r0
 800975e:	460b      	mov	r3, r1
 8009760:	d135      	bne.n	80097ce <_dtoa_r+0x6e6>
 8009762:	f7f6 fd9b 	bl	800029c <__adddf3>
 8009766:	4642      	mov	r2, r8
 8009768:	464b      	mov	r3, r9
 800976a:	4606      	mov	r6, r0
 800976c:	460f      	mov	r7, r1
 800976e:	f7f7 f9db 	bl	8000b28 <__aeabi_dcmpgt>
 8009772:	b9d0      	cbnz	r0, 80097aa <_dtoa_r+0x6c2>
 8009774:	4642      	mov	r2, r8
 8009776:	464b      	mov	r3, r9
 8009778:	4630      	mov	r0, r6
 800977a:	4639      	mov	r1, r7
 800977c:	f7f7 f9ac 	bl	8000ad8 <__aeabi_dcmpeq>
 8009780:	b110      	cbz	r0, 8009788 <_dtoa_r+0x6a0>
 8009782:	f01a 0f01 	tst.w	sl, #1
 8009786:	d110      	bne.n	80097aa <_dtoa_r+0x6c2>
 8009788:	4620      	mov	r0, r4
 800978a:	ee18 1a10 	vmov	r1, s16
 800978e:	f001 f885 	bl	800a89c <_Bfree>
 8009792:	2300      	movs	r3, #0
 8009794:	9800      	ldr	r0, [sp, #0]
 8009796:	702b      	strb	r3, [r5, #0]
 8009798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800979a:	3001      	adds	r0, #1
 800979c:	6018      	str	r0, [r3, #0]
 800979e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f43f acf1 	beq.w	8009188 <_dtoa_r+0xa0>
 80097a6:	601d      	str	r5, [r3, #0]
 80097a8:	e4ee      	b.n	8009188 <_dtoa_r+0xa0>
 80097aa:	9f00      	ldr	r7, [sp, #0]
 80097ac:	462b      	mov	r3, r5
 80097ae:	461d      	mov	r5, r3
 80097b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097b4:	2a39      	cmp	r2, #57	; 0x39
 80097b6:	d106      	bne.n	80097c6 <_dtoa_r+0x6de>
 80097b8:	9a01      	ldr	r2, [sp, #4]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d1f7      	bne.n	80097ae <_dtoa_r+0x6c6>
 80097be:	9901      	ldr	r1, [sp, #4]
 80097c0:	2230      	movs	r2, #48	; 0x30
 80097c2:	3701      	adds	r7, #1
 80097c4:	700a      	strb	r2, [r1, #0]
 80097c6:	781a      	ldrb	r2, [r3, #0]
 80097c8:	3201      	adds	r2, #1
 80097ca:	701a      	strb	r2, [r3, #0]
 80097cc:	e790      	b.n	80096f0 <_dtoa_r+0x608>
 80097ce:	4ba6      	ldr	r3, [pc, #664]	; (8009a68 <_dtoa_r+0x980>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	f7f6 ff19 	bl	8000608 <__aeabi_dmul>
 80097d6:	2200      	movs	r2, #0
 80097d8:	2300      	movs	r3, #0
 80097da:	4606      	mov	r6, r0
 80097dc:	460f      	mov	r7, r1
 80097de:	f7f7 f97b 	bl	8000ad8 <__aeabi_dcmpeq>
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d09d      	beq.n	8009722 <_dtoa_r+0x63a>
 80097e6:	e7cf      	b.n	8009788 <_dtoa_r+0x6a0>
 80097e8:	9a08      	ldr	r2, [sp, #32]
 80097ea:	2a00      	cmp	r2, #0
 80097ec:	f000 80d7 	beq.w	800999e <_dtoa_r+0x8b6>
 80097f0:	9a06      	ldr	r2, [sp, #24]
 80097f2:	2a01      	cmp	r2, #1
 80097f4:	f300 80ba 	bgt.w	800996c <_dtoa_r+0x884>
 80097f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097fa:	2a00      	cmp	r2, #0
 80097fc:	f000 80b2 	beq.w	8009964 <_dtoa_r+0x87c>
 8009800:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009804:	9e07      	ldr	r6, [sp, #28]
 8009806:	9d04      	ldr	r5, [sp, #16]
 8009808:	9a04      	ldr	r2, [sp, #16]
 800980a:	441a      	add	r2, r3
 800980c:	9204      	str	r2, [sp, #16]
 800980e:	9a05      	ldr	r2, [sp, #20]
 8009810:	2101      	movs	r1, #1
 8009812:	441a      	add	r2, r3
 8009814:	4620      	mov	r0, r4
 8009816:	9205      	str	r2, [sp, #20]
 8009818:	f001 f942 	bl	800aaa0 <__i2b>
 800981c:	4607      	mov	r7, r0
 800981e:	2d00      	cmp	r5, #0
 8009820:	dd0c      	ble.n	800983c <_dtoa_r+0x754>
 8009822:	9b05      	ldr	r3, [sp, #20]
 8009824:	2b00      	cmp	r3, #0
 8009826:	dd09      	ble.n	800983c <_dtoa_r+0x754>
 8009828:	42ab      	cmp	r3, r5
 800982a:	9a04      	ldr	r2, [sp, #16]
 800982c:	bfa8      	it	ge
 800982e:	462b      	movge	r3, r5
 8009830:	1ad2      	subs	r2, r2, r3
 8009832:	9204      	str	r2, [sp, #16]
 8009834:	9a05      	ldr	r2, [sp, #20]
 8009836:	1aed      	subs	r5, r5, r3
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	9305      	str	r3, [sp, #20]
 800983c:	9b07      	ldr	r3, [sp, #28]
 800983e:	b31b      	cbz	r3, 8009888 <_dtoa_r+0x7a0>
 8009840:	9b08      	ldr	r3, [sp, #32]
 8009842:	2b00      	cmp	r3, #0
 8009844:	f000 80af 	beq.w	80099a6 <_dtoa_r+0x8be>
 8009848:	2e00      	cmp	r6, #0
 800984a:	dd13      	ble.n	8009874 <_dtoa_r+0x78c>
 800984c:	4639      	mov	r1, r7
 800984e:	4632      	mov	r2, r6
 8009850:	4620      	mov	r0, r4
 8009852:	f001 f9e5 	bl	800ac20 <__pow5mult>
 8009856:	ee18 2a10 	vmov	r2, s16
 800985a:	4601      	mov	r1, r0
 800985c:	4607      	mov	r7, r0
 800985e:	4620      	mov	r0, r4
 8009860:	f001 f934 	bl	800aacc <__multiply>
 8009864:	ee18 1a10 	vmov	r1, s16
 8009868:	4680      	mov	r8, r0
 800986a:	4620      	mov	r0, r4
 800986c:	f001 f816 	bl	800a89c <_Bfree>
 8009870:	ee08 8a10 	vmov	s16, r8
 8009874:	9b07      	ldr	r3, [sp, #28]
 8009876:	1b9a      	subs	r2, r3, r6
 8009878:	d006      	beq.n	8009888 <_dtoa_r+0x7a0>
 800987a:	ee18 1a10 	vmov	r1, s16
 800987e:	4620      	mov	r0, r4
 8009880:	f001 f9ce 	bl	800ac20 <__pow5mult>
 8009884:	ee08 0a10 	vmov	s16, r0
 8009888:	2101      	movs	r1, #1
 800988a:	4620      	mov	r0, r4
 800988c:	f001 f908 	bl	800aaa0 <__i2b>
 8009890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009892:	2b00      	cmp	r3, #0
 8009894:	4606      	mov	r6, r0
 8009896:	f340 8088 	ble.w	80099aa <_dtoa_r+0x8c2>
 800989a:	461a      	mov	r2, r3
 800989c:	4601      	mov	r1, r0
 800989e:	4620      	mov	r0, r4
 80098a0:	f001 f9be 	bl	800ac20 <__pow5mult>
 80098a4:	9b06      	ldr	r3, [sp, #24]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	4606      	mov	r6, r0
 80098aa:	f340 8081 	ble.w	80099b0 <_dtoa_r+0x8c8>
 80098ae:	f04f 0800 	mov.w	r8, #0
 80098b2:	6933      	ldr	r3, [r6, #16]
 80098b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80098b8:	6918      	ldr	r0, [r3, #16]
 80098ba:	f001 f8a1 	bl	800aa00 <__hi0bits>
 80098be:	f1c0 0020 	rsb	r0, r0, #32
 80098c2:	9b05      	ldr	r3, [sp, #20]
 80098c4:	4418      	add	r0, r3
 80098c6:	f010 001f 	ands.w	r0, r0, #31
 80098ca:	f000 8092 	beq.w	80099f2 <_dtoa_r+0x90a>
 80098ce:	f1c0 0320 	rsb	r3, r0, #32
 80098d2:	2b04      	cmp	r3, #4
 80098d4:	f340 808a 	ble.w	80099ec <_dtoa_r+0x904>
 80098d8:	f1c0 001c 	rsb	r0, r0, #28
 80098dc:	9b04      	ldr	r3, [sp, #16]
 80098de:	4403      	add	r3, r0
 80098e0:	9304      	str	r3, [sp, #16]
 80098e2:	9b05      	ldr	r3, [sp, #20]
 80098e4:	4403      	add	r3, r0
 80098e6:	4405      	add	r5, r0
 80098e8:	9305      	str	r3, [sp, #20]
 80098ea:	9b04      	ldr	r3, [sp, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	dd07      	ble.n	8009900 <_dtoa_r+0x818>
 80098f0:	ee18 1a10 	vmov	r1, s16
 80098f4:	461a      	mov	r2, r3
 80098f6:	4620      	mov	r0, r4
 80098f8:	f001 f9ec 	bl	800acd4 <__lshift>
 80098fc:	ee08 0a10 	vmov	s16, r0
 8009900:	9b05      	ldr	r3, [sp, #20]
 8009902:	2b00      	cmp	r3, #0
 8009904:	dd05      	ble.n	8009912 <_dtoa_r+0x82a>
 8009906:	4631      	mov	r1, r6
 8009908:	461a      	mov	r2, r3
 800990a:	4620      	mov	r0, r4
 800990c:	f001 f9e2 	bl	800acd4 <__lshift>
 8009910:	4606      	mov	r6, r0
 8009912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009914:	2b00      	cmp	r3, #0
 8009916:	d06e      	beq.n	80099f6 <_dtoa_r+0x90e>
 8009918:	ee18 0a10 	vmov	r0, s16
 800991c:	4631      	mov	r1, r6
 800991e:	f001 fa49 	bl	800adb4 <__mcmp>
 8009922:	2800      	cmp	r0, #0
 8009924:	da67      	bge.n	80099f6 <_dtoa_r+0x90e>
 8009926:	9b00      	ldr	r3, [sp, #0]
 8009928:	3b01      	subs	r3, #1
 800992a:	ee18 1a10 	vmov	r1, s16
 800992e:	9300      	str	r3, [sp, #0]
 8009930:	220a      	movs	r2, #10
 8009932:	2300      	movs	r3, #0
 8009934:	4620      	mov	r0, r4
 8009936:	f000 ffd3 	bl	800a8e0 <__multadd>
 800993a:	9b08      	ldr	r3, [sp, #32]
 800993c:	ee08 0a10 	vmov	s16, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	f000 81b1 	beq.w	8009ca8 <_dtoa_r+0xbc0>
 8009946:	2300      	movs	r3, #0
 8009948:	4639      	mov	r1, r7
 800994a:	220a      	movs	r2, #10
 800994c:	4620      	mov	r0, r4
 800994e:	f000 ffc7 	bl	800a8e0 <__multadd>
 8009952:	9b02      	ldr	r3, [sp, #8]
 8009954:	2b00      	cmp	r3, #0
 8009956:	4607      	mov	r7, r0
 8009958:	f300 808e 	bgt.w	8009a78 <_dtoa_r+0x990>
 800995c:	9b06      	ldr	r3, [sp, #24]
 800995e:	2b02      	cmp	r3, #2
 8009960:	dc51      	bgt.n	8009a06 <_dtoa_r+0x91e>
 8009962:	e089      	b.n	8009a78 <_dtoa_r+0x990>
 8009964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009966:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800996a:	e74b      	b.n	8009804 <_dtoa_r+0x71c>
 800996c:	9b03      	ldr	r3, [sp, #12]
 800996e:	1e5e      	subs	r6, r3, #1
 8009970:	9b07      	ldr	r3, [sp, #28]
 8009972:	42b3      	cmp	r3, r6
 8009974:	bfbf      	itttt	lt
 8009976:	9b07      	ldrlt	r3, [sp, #28]
 8009978:	9607      	strlt	r6, [sp, #28]
 800997a:	1af2      	sublt	r2, r6, r3
 800997c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800997e:	bfb6      	itet	lt
 8009980:	189b      	addlt	r3, r3, r2
 8009982:	1b9e      	subge	r6, r3, r6
 8009984:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009986:	9b03      	ldr	r3, [sp, #12]
 8009988:	bfb8      	it	lt
 800998a:	2600      	movlt	r6, #0
 800998c:	2b00      	cmp	r3, #0
 800998e:	bfb7      	itett	lt
 8009990:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009994:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009998:	1a9d      	sublt	r5, r3, r2
 800999a:	2300      	movlt	r3, #0
 800999c:	e734      	b.n	8009808 <_dtoa_r+0x720>
 800999e:	9e07      	ldr	r6, [sp, #28]
 80099a0:	9d04      	ldr	r5, [sp, #16]
 80099a2:	9f08      	ldr	r7, [sp, #32]
 80099a4:	e73b      	b.n	800981e <_dtoa_r+0x736>
 80099a6:	9a07      	ldr	r2, [sp, #28]
 80099a8:	e767      	b.n	800987a <_dtoa_r+0x792>
 80099aa:	9b06      	ldr	r3, [sp, #24]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	dc18      	bgt.n	80099e2 <_dtoa_r+0x8fa>
 80099b0:	f1ba 0f00 	cmp.w	sl, #0
 80099b4:	d115      	bne.n	80099e2 <_dtoa_r+0x8fa>
 80099b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099ba:	b993      	cbnz	r3, 80099e2 <_dtoa_r+0x8fa>
 80099bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80099c0:	0d1b      	lsrs	r3, r3, #20
 80099c2:	051b      	lsls	r3, r3, #20
 80099c4:	b183      	cbz	r3, 80099e8 <_dtoa_r+0x900>
 80099c6:	9b04      	ldr	r3, [sp, #16]
 80099c8:	3301      	adds	r3, #1
 80099ca:	9304      	str	r3, [sp, #16]
 80099cc:	9b05      	ldr	r3, [sp, #20]
 80099ce:	3301      	adds	r3, #1
 80099d0:	9305      	str	r3, [sp, #20]
 80099d2:	f04f 0801 	mov.w	r8, #1
 80099d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f47f af6a 	bne.w	80098b2 <_dtoa_r+0x7ca>
 80099de:	2001      	movs	r0, #1
 80099e0:	e76f      	b.n	80098c2 <_dtoa_r+0x7da>
 80099e2:	f04f 0800 	mov.w	r8, #0
 80099e6:	e7f6      	b.n	80099d6 <_dtoa_r+0x8ee>
 80099e8:	4698      	mov	r8, r3
 80099ea:	e7f4      	b.n	80099d6 <_dtoa_r+0x8ee>
 80099ec:	f43f af7d 	beq.w	80098ea <_dtoa_r+0x802>
 80099f0:	4618      	mov	r0, r3
 80099f2:	301c      	adds	r0, #28
 80099f4:	e772      	b.n	80098dc <_dtoa_r+0x7f4>
 80099f6:	9b03      	ldr	r3, [sp, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	dc37      	bgt.n	8009a6c <_dtoa_r+0x984>
 80099fc:	9b06      	ldr	r3, [sp, #24]
 80099fe:	2b02      	cmp	r3, #2
 8009a00:	dd34      	ble.n	8009a6c <_dtoa_r+0x984>
 8009a02:	9b03      	ldr	r3, [sp, #12]
 8009a04:	9302      	str	r3, [sp, #8]
 8009a06:	9b02      	ldr	r3, [sp, #8]
 8009a08:	b96b      	cbnz	r3, 8009a26 <_dtoa_r+0x93e>
 8009a0a:	4631      	mov	r1, r6
 8009a0c:	2205      	movs	r2, #5
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f000 ff66 	bl	800a8e0 <__multadd>
 8009a14:	4601      	mov	r1, r0
 8009a16:	4606      	mov	r6, r0
 8009a18:	ee18 0a10 	vmov	r0, s16
 8009a1c:	f001 f9ca 	bl	800adb4 <__mcmp>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	f73f adbb 	bgt.w	800959c <_dtoa_r+0x4b4>
 8009a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a28:	9d01      	ldr	r5, [sp, #4]
 8009a2a:	43db      	mvns	r3, r3
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	f04f 0800 	mov.w	r8, #0
 8009a32:	4631      	mov	r1, r6
 8009a34:	4620      	mov	r0, r4
 8009a36:	f000 ff31 	bl	800a89c <_Bfree>
 8009a3a:	2f00      	cmp	r7, #0
 8009a3c:	f43f aea4 	beq.w	8009788 <_dtoa_r+0x6a0>
 8009a40:	f1b8 0f00 	cmp.w	r8, #0
 8009a44:	d005      	beq.n	8009a52 <_dtoa_r+0x96a>
 8009a46:	45b8      	cmp	r8, r7
 8009a48:	d003      	beq.n	8009a52 <_dtoa_r+0x96a>
 8009a4a:	4641      	mov	r1, r8
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f000 ff25 	bl	800a89c <_Bfree>
 8009a52:	4639      	mov	r1, r7
 8009a54:	4620      	mov	r0, r4
 8009a56:	f000 ff21 	bl	800a89c <_Bfree>
 8009a5a:	e695      	b.n	8009788 <_dtoa_r+0x6a0>
 8009a5c:	2600      	movs	r6, #0
 8009a5e:	4637      	mov	r7, r6
 8009a60:	e7e1      	b.n	8009a26 <_dtoa_r+0x93e>
 8009a62:	9700      	str	r7, [sp, #0]
 8009a64:	4637      	mov	r7, r6
 8009a66:	e599      	b.n	800959c <_dtoa_r+0x4b4>
 8009a68:	40240000 	.word	0x40240000
 8009a6c:	9b08      	ldr	r3, [sp, #32]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f000 80ca 	beq.w	8009c08 <_dtoa_r+0xb20>
 8009a74:	9b03      	ldr	r3, [sp, #12]
 8009a76:	9302      	str	r3, [sp, #8]
 8009a78:	2d00      	cmp	r5, #0
 8009a7a:	dd05      	ble.n	8009a88 <_dtoa_r+0x9a0>
 8009a7c:	4639      	mov	r1, r7
 8009a7e:	462a      	mov	r2, r5
 8009a80:	4620      	mov	r0, r4
 8009a82:	f001 f927 	bl	800acd4 <__lshift>
 8009a86:	4607      	mov	r7, r0
 8009a88:	f1b8 0f00 	cmp.w	r8, #0
 8009a8c:	d05b      	beq.n	8009b46 <_dtoa_r+0xa5e>
 8009a8e:	6879      	ldr	r1, [r7, #4]
 8009a90:	4620      	mov	r0, r4
 8009a92:	f000 fec3 	bl	800a81c <_Balloc>
 8009a96:	4605      	mov	r5, r0
 8009a98:	b928      	cbnz	r0, 8009aa6 <_dtoa_r+0x9be>
 8009a9a:	4b87      	ldr	r3, [pc, #540]	; (8009cb8 <_dtoa_r+0xbd0>)
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009aa2:	f7ff bb3b 	b.w	800911c <_dtoa_r+0x34>
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	3202      	adds	r2, #2
 8009aaa:	0092      	lsls	r2, r2, #2
 8009aac:	f107 010c 	add.w	r1, r7, #12
 8009ab0:	300c      	adds	r0, #12
 8009ab2:	f7fd fe79 	bl	80077a8 <memcpy>
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	4629      	mov	r1, r5
 8009aba:	4620      	mov	r0, r4
 8009abc:	f001 f90a 	bl	800acd4 <__lshift>
 8009ac0:	9b01      	ldr	r3, [sp, #4]
 8009ac2:	f103 0901 	add.w	r9, r3, #1
 8009ac6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009aca:	4413      	add	r3, r2
 8009acc:	9305      	str	r3, [sp, #20]
 8009ace:	f00a 0301 	and.w	r3, sl, #1
 8009ad2:	46b8      	mov	r8, r7
 8009ad4:	9304      	str	r3, [sp, #16]
 8009ad6:	4607      	mov	r7, r0
 8009ad8:	4631      	mov	r1, r6
 8009ada:	ee18 0a10 	vmov	r0, s16
 8009ade:	f7ff fa75 	bl	8008fcc <quorem>
 8009ae2:	4641      	mov	r1, r8
 8009ae4:	9002      	str	r0, [sp, #8]
 8009ae6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009aea:	ee18 0a10 	vmov	r0, s16
 8009aee:	f001 f961 	bl	800adb4 <__mcmp>
 8009af2:	463a      	mov	r2, r7
 8009af4:	9003      	str	r0, [sp, #12]
 8009af6:	4631      	mov	r1, r6
 8009af8:	4620      	mov	r0, r4
 8009afa:	f001 f977 	bl	800adec <__mdiff>
 8009afe:	68c2      	ldr	r2, [r0, #12]
 8009b00:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8009b04:	4605      	mov	r5, r0
 8009b06:	bb02      	cbnz	r2, 8009b4a <_dtoa_r+0xa62>
 8009b08:	4601      	mov	r1, r0
 8009b0a:	ee18 0a10 	vmov	r0, s16
 8009b0e:	f001 f951 	bl	800adb4 <__mcmp>
 8009b12:	4602      	mov	r2, r0
 8009b14:	4629      	mov	r1, r5
 8009b16:	4620      	mov	r0, r4
 8009b18:	9207      	str	r2, [sp, #28]
 8009b1a:	f000 febf 	bl	800a89c <_Bfree>
 8009b1e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009b22:	ea43 0102 	orr.w	r1, r3, r2
 8009b26:	9b04      	ldr	r3, [sp, #16]
 8009b28:	430b      	orrs	r3, r1
 8009b2a:	464d      	mov	r5, r9
 8009b2c:	d10f      	bne.n	8009b4e <_dtoa_r+0xa66>
 8009b2e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b32:	d02a      	beq.n	8009b8a <_dtoa_r+0xaa2>
 8009b34:	9b03      	ldr	r3, [sp, #12]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	dd02      	ble.n	8009b40 <_dtoa_r+0xa58>
 8009b3a:	9b02      	ldr	r3, [sp, #8]
 8009b3c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009b40:	f88b a000 	strb.w	sl, [fp]
 8009b44:	e775      	b.n	8009a32 <_dtoa_r+0x94a>
 8009b46:	4638      	mov	r0, r7
 8009b48:	e7ba      	b.n	8009ac0 <_dtoa_r+0x9d8>
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	e7e2      	b.n	8009b14 <_dtoa_r+0xa2c>
 8009b4e:	9b03      	ldr	r3, [sp, #12]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	db04      	blt.n	8009b5e <_dtoa_r+0xa76>
 8009b54:	9906      	ldr	r1, [sp, #24]
 8009b56:	430b      	orrs	r3, r1
 8009b58:	9904      	ldr	r1, [sp, #16]
 8009b5a:	430b      	orrs	r3, r1
 8009b5c:	d122      	bne.n	8009ba4 <_dtoa_r+0xabc>
 8009b5e:	2a00      	cmp	r2, #0
 8009b60:	ddee      	ble.n	8009b40 <_dtoa_r+0xa58>
 8009b62:	ee18 1a10 	vmov	r1, s16
 8009b66:	2201      	movs	r2, #1
 8009b68:	4620      	mov	r0, r4
 8009b6a:	f001 f8b3 	bl	800acd4 <__lshift>
 8009b6e:	4631      	mov	r1, r6
 8009b70:	ee08 0a10 	vmov	s16, r0
 8009b74:	f001 f91e 	bl	800adb4 <__mcmp>
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	dc03      	bgt.n	8009b84 <_dtoa_r+0xa9c>
 8009b7c:	d1e0      	bne.n	8009b40 <_dtoa_r+0xa58>
 8009b7e:	f01a 0f01 	tst.w	sl, #1
 8009b82:	d0dd      	beq.n	8009b40 <_dtoa_r+0xa58>
 8009b84:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b88:	d1d7      	bne.n	8009b3a <_dtoa_r+0xa52>
 8009b8a:	2339      	movs	r3, #57	; 0x39
 8009b8c:	f88b 3000 	strb.w	r3, [fp]
 8009b90:	462b      	mov	r3, r5
 8009b92:	461d      	mov	r5, r3
 8009b94:	3b01      	subs	r3, #1
 8009b96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009b9a:	2a39      	cmp	r2, #57	; 0x39
 8009b9c:	d071      	beq.n	8009c82 <_dtoa_r+0xb9a>
 8009b9e:	3201      	adds	r2, #1
 8009ba0:	701a      	strb	r2, [r3, #0]
 8009ba2:	e746      	b.n	8009a32 <_dtoa_r+0x94a>
 8009ba4:	2a00      	cmp	r2, #0
 8009ba6:	dd07      	ble.n	8009bb8 <_dtoa_r+0xad0>
 8009ba8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009bac:	d0ed      	beq.n	8009b8a <_dtoa_r+0xaa2>
 8009bae:	f10a 0301 	add.w	r3, sl, #1
 8009bb2:	f88b 3000 	strb.w	r3, [fp]
 8009bb6:	e73c      	b.n	8009a32 <_dtoa_r+0x94a>
 8009bb8:	9b05      	ldr	r3, [sp, #20]
 8009bba:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009bbe:	4599      	cmp	r9, r3
 8009bc0:	d047      	beq.n	8009c52 <_dtoa_r+0xb6a>
 8009bc2:	ee18 1a10 	vmov	r1, s16
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	220a      	movs	r2, #10
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f000 fe88 	bl	800a8e0 <__multadd>
 8009bd0:	45b8      	cmp	r8, r7
 8009bd2:	ee08 0a10 	vmov	s16, r0
 8009bd6:	f04f 0300 	mov.w	r3, #0
 8009bda:	f04f 020a 	mov.w	r2, #10
 8009bde:	4641      	mov	r1, r8
 8009be0:	4620      	mov	r0, r4
 8009be2:	d106      	bne.n	8009bf2 <_dtoa_r+0xb0a>
 8009be4:	f000 fe7c 	bl	800a8e0 <__multadd>
 8009be8:	4680      	mov	r8, r0
 8009bea:	4607      	mov	r7, r0
 8009bec:	f109 0901 	add.w	r9, r9, #1
 8009bf0:	e772      	b.n	8009ad8 <_dtoa_r+0x9f0>
 8009bf2:	f000 fe75 	bl	800a8e0 <__multadd>
 8009bf6:	4639      	mov	r1, r7
 8009bf8:	4680      	mov	r8, r0
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	220a      	movs	r2, #10
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f000 fe6e 	bl	800a8e0 <__multadd>
 8009c04:	4607      	mov	r7, r0
 8009c06:	e7f1      	b.n	8009bec <_dtoa_r+0xb04>
 8009c08:	9b03      	ldr	r3, [sp, #12]
 8009c0a:	9302      	str	r3, [sp, #8]
 8009c0c:	9d01      	ldr	r5, [sp, #4]
 8009c0e:	ee18 0a10 	vmov	r0, s16
 8009c12:	4631      	mov	r1, r6
 8009c14:	f7ff f9da 	bl	8008fcc <quorem>
 8009c18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009c1c:	9b01      	ldr	r3, [sp, #4]
 8009c1e:	f805 ab01 	strb.w	sl, [r5], #1
 8009c22:	1aea      	subs	r2, r5, r3
 8009c24:	9b02      	ldr	r3, [sp, #8]
 8009c26:	4293      	cmp	r3, r2
 8009c28:	dd09      	ble.n	8009c3e <_dtoa_r+0xb56>
 8009c2a:	ee18 1a10 	vmov	r1, s16
 8009c2e:	2300      	movs	r3, #0
 8009c30:	220a      	movs	r2, #10
 8009c32:	4620      	mov	r0, r4
 8009c34:	f000 fe54 	bl	800a8e0 <__multadd>
 8009c38:	ee08 0a10 	vmov	s16, r0
 8009c3c:	e7e7      	b.n	8009c0e <_dtoa_r+0xb26>
 8009c3e:	9b02      	ldr	r3, [sp, #8]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	bfc8      	it	gt
 8009c44:	461d      	movgt	r5, r3
 8009c46:	9b01      	ldr	r3, [sp, #4]
 8009c48:	bfd8      	it	le
 8009c4a:	2501      	movle	r5, #1
 8009c4c:	441d      	add	r5, r3
 8009c4e:	f04f 0800 	mov.w	r8, #0
 8009c52:	ee18 1a10 	vmov	r1, s16
 8009c56:	2201      	movs	r2, #1
 8009c58:	4620      	mov	r0, r4
 8009c5a:	f001 f83b 	bl	800acd4 <__lshift>
 8009c5e:	4631      	mov	r1, r6
 8009c60:	ee08 0a10 	vmov	s16, r0
 8009c64:	f001 f8a6 	bl	800adb4 <__mcmp>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	dc91      	bgt.n	8009b90 <_dtoa_r+0xaa8>
 8009c6c:	d102      	bne.n	8009c74 <_dtoa_r+0xb8c>
 8009c6e:	f01a 0f01 	tst.w	sl, #1
 8009c72:	d18d      	bne.n	8009b90 <_dtoa_r+0xaa8>
 8009c74:	462b      	mov	r3, r5
 8009c76:	461d      	mov	r5, r3
 8009c78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c7c:	2a30      	cmp	r2, #48	; 0x30
 8009c7e:	d0fa      	beq.n	8009c76 <_dtoa_r+0xb8e>
 8009c80:	e6d7      	b.n	8009a32 <_dtoa_r+0x94a>
 8009c82:	9a01      	ldr	r2, [sp, #4]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d184      	bne.n	8009b92 <_dtoa_r+0xaaa>
 8009c88:	9b00      	ldr	r3, [sp, #0]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	2331      	movs	r3, #49	; 0x31
 8009c90:	7013      	strb	r3, [r2, #0]
 8009c92:	e6ce      	b.n	8009a32 <_dtoa_r+0x94a>
 8009c94:	4b09      	ldr	r3, [pc, #36]	; (8009cbc <_dtoa_r+0xbd4>)
 8009c96:	f7ff ba95 	b.w	80091c4 <_dtoa_r+0xdc>
 8009c9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f47f aa6e 	bne.w	800917e <_dtoa_r+0x96>
 8009ca2:	4b07      	ldr	r3, [pc, #28]	; (8009cc0 <_dtoa_r+0xbd8>)
 8009ca4:	f7ff ba8e 	b.w	80091c4 <_dtoa_r+0xdc>
 8009ca8:	9b02      	ldr	r3, [sp, #8]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	dcae      	bgt.n	8009c0c <_dtoa_r+0xb24>
 8009cae:	9b06      	ldr	r3, [sp, #24]
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	f73f aea8 	bgt.w	8009a06 <_dtoa_r+0x91e>
 8009cb6:	e7a9      	b.n	8009c0c <_dtoa_r+0xb24>
 8009cb8:	0800c28f 	.word	0x0800c28f
 8009cbc:	0800c19c 	.word	0x0800c19c
 8009cc0:	0800c210 	.word	0x0800c210

08009cc4 <__sflush_r>:
 8009cc4:	898a      	ldrh	r2, [r1, #12]
 8009cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cca:	4605      	mov	r5, r0
 8009ccc:	0710      	lsls	r0, r2, #28
 8009cce:	460c      	mov	r4, r1
 8009cd0:	d458      	bmi.n	8009d84 <__sflush_r+0xc0>
 8009cd2:	684b      	ldr	r3, [r1, #4]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	dc05      	bgt.n	8009ce4 <__sflush_r+0x20>
 8009cd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	dc02      	bgt.n	8009ce4 <__sflush_r+0x20>
 8009cde:	2000      	movs	r0, #0
 8009ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ce6:	2e00      	cmp	r6, #0
 8009ce8:	d0f9      	beq.n	8009cde <__sflush_r+0x1a>
 8009cea:	2300      	movs	r3, #0
 8009cec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cf0:	682f      	ldr	r7, [r5, #0]
 8009cf2:	602b      	str	r3, [r5, #0]
 8009cf4:	d032      	beq.n	8009d5c <__sflush_r+0x98>
 8009cf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cf8:	89a3      	ldrh	r3, [r4, #12]
 8009cfa:	075a      	lsls	r2, r3, #29
 8009cfc:	d505      	bpl.n	8009d0a <__sflush_r+0x46>
 8009cfe:	6863      	ldr	r3, [r4, #4]
 8009d00:	1ac0      	subs	r0, r0, r3
 8009d02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d04:	b10b      	cbz	r3, 8009d0a <__sflush_r+0x46>
 8009d06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d08:	1ac0      	subs	r0, r0, r3
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d10:	6a21      	ldr	r1, [r4, #32]
 8009d12:	4628      	mov	r0, r5
 8009d14:	47b0      	blx	r6
 8009d16:	1c43      	adds	r3, r0, #1
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	d106      	bne.n	8009d2a <__sflush_r+0x66>
 8009d1c:	6829      	ldr	r1, [r5, #0]
 8009d1e:	291d      	cmp	r1, #29
 8009d20:	d82c      	bhi.n	8009d7c <__sflush_r+0xb8>
 8009d22:	4a2a      	ldr	r2, [pc, #168]	; (8009dcc <__sflush_r+0x108>)
 8009d24:	40ca      	lsrs	r2, r1
 8009d26:	07d6      	lsls	r6, r2, #31
 8009d28:	d528      	bpl.n	8009d7c <__sflush_r+0xb8>
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	6062      	str	r2, [r4, #4]
 8009d2e:	04d9      	lsls	r1, r3, #19
 8009d30:	6922      	ldr	r2, [r4, #16]
 8009d32:	6022      	str	r2, [r4, #0]
 8009d34:	d504      	bpl.n	8009d40 <__sflush_r+0x7c>
 8009d36:	1c42      	adds	r2, r0, #1
 8009d38:	d101      	bne.n	8009d3e <__sflush_r+0x7a>
 8009d3a:	682b      	ldr	r3, [r5, #0]
 8009d3c:	b903      	cbnz	r3, 8009d40 <__sflush_r+0x7c>
 8009d3e:	6560      	str	r0, [r4, #84]	; 0x54
 8009d40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d42:	602f      	str	r7, [r5, #0]
 8009d44:	2900      	cmp	r1, #0
 8009d46:	d0ca      	beq.n	8009cde <__sflush_r+0x1a>
 8009d48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d4c:	4299      	cmp	r1, r3
 8009d4e:	d002      	beq.n	8009d56 <__sflush_r+0x92>
 8009d50:	4628      	mov	r0, r5
 8009d52:	f001 fa3b 	bl	800b1cc <_free_r>
 8009d56:	2000      	movs	r0, #0
 8009d58:	6360      	str	r0, [r4, #52]	; 0x34
 8009d5a:	e7c1      	b.n	8009ce0 <__sflush_r+0x1c>
 8009d5c:	6a21      	ldr	r1, [r4, #32]
 8009d5e:	2301      	movs	r3, #1
 8009d60:	4628      	mov	r0, r5
 8009d62:	47b0      	blx	r6
 8009d64:	1c41      	adds	r1, r0, #1
 8009d66:	d1c7      	bne.n	8009cf8 <__sflush_r+0x34>
 8009d68:	682b      	ldr	r3, [r5, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d0c4      	beq.n	8009cf8 <__sflush_r+0x34>
 8009d6e:	2b1d      	cmp	r3, #29
 8009d70:	d001      	beq.n	8009d76 <__sflush_r+0xb2>
 8009d72:	2b16      	cmp	r3, #22
 8009d74:	d101      	bne.n	8009d7a <__sflush_r+0xb6>
 8009d76:	602f      	str	r7, [r5, #0]
 8009d78:	e7b1      	b.n	8009cde <__sflush_r+0x1a>
 8009d7a:	89a3      	ldrh	r3, [r4, #12]
 8009d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d80:	81a3      	strh	r3, [r4, #12]
 8009d82:	e7ad      	b.n	8009ce0 <__sflush_r+0x1c>
 8009d84:	690f      	ldr	r7, [r1, #16]
 8009d86:	2f00      	cmp	r7, #0
 8009d88:	d0a9      	beq.n	8009cde <__sflush_r+0x1a>
 8009d8a:	0793      	lsls	r3, r2, #30
 8009d8c:	680e      	ldr	r6, [r1, #0]
 8009d8e:	bf08      	it	eq
 8009d90:	694b      	ldreq	r3, [r1, #20]
 8009d92:	600f      	str	r7, [r1, #0]
 8009d94:	bf18      	it	ne
 8009d96:	2300      	movne	r3, #0
 8009d98:	eba6 0807 	sub.w	r8, r6, r7
 8009d9c:	608b      	str	r3, [r1, #8]
 8009d9e:	f1b8 0f00 	cmp.w	r8, #0
 8009da2:	dd9c      	ble.n	8009cde <__sflush_r+0x1a>
 8009da4:	6a21      	ldr	r1, [r4, #32]
 8009da6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009da8:	4643      	mov	r3, r8
 8009daa:	463a      	mov	r2, r7
 8009dac:	4628      	mov	r0, r5
 8009dae:	47b0      	blx	r6
 8009db0:	2800      	cmp	r0, #0
 8009db2:	dc06      	bgt.n	8009dc2 <__sflush_r+0xfe>
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dba:	81a3      	strh	r3, [r4, #12]
 8009dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dc0:	e78e      	b.n	8009ce0 <__sflush_r+0x1c>
 8009dc2:	4407      	add	r7, r0
 8009dc4:	eba8 0800 	sub.w	r8, r8, r0
 8009dc8:	e7e9      	b.n	8009d9e <__sflush_r+0xda>
 8009dca:	bf00      	nop
 8009dcc:	20400001 	.word	0x20400001

08009dd0 <_fflush_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	690b      	ldr	r3, [r1, #16]
 8009dd4:	4605      	mov	r5, r0
 8009dd6:	460c      	mov	r4, r1
 8009dd8:	b913      	cbnz	r3, 8009de0 <_fflush_r+0x10>
 8009dda:	2500      	movs	r5, #0
 8009ddc:	4628      	mov	r0, r5
 8009dde:	bd38      	pop	{r3, r4, r5, pc}
 8009de0:	b118      	cbz	r0, 8009dea <_fflush_r+0x1a>
 8009de2:	6983      	ldr	r3, [r0, #24]
 8009de4:	b90b      	cbnz	r3, 8009dea <_fflush_r+0x1a>
 8009de6:	f000 f887 	bl	8009ef8 <__sinit>
 8009dea:	4b14      	ldr	r3, [pc, #80]	; (8009e3c <_fflush_r+0x6c>)
 8009dec:	429c      	cmp	r4, r3
 8009dee:	d11b      	bne.n	8009e28 <_fflush_r+0x58>
 8009df0:	686c      	ldr	r4, [r5, #4]
 8009df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d0ef      	beq.n	8009dda <_fflush_r+0xa>
 8009dfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009dfc:	07d0      	lsls	r0, r2, #31
 8009dfe:	d404      	bmi.n	8009e0a <_fflush_r+0x3a>
 8009e00:	0599      	lsls	r1, r3, #22
 8009e02:	d402      	bmi.n	8009e0a <_fflush_r+0x3a>
 8009e04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e06:	f000 fc88 	bl	800a71a <__retarget_lock_acquire_recursive>
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	4621      	mov	r1, r4
 8009e0e:	f7ff ff59 	bl	8009cc4 <__sflush_r>
 8009e12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e14:	07da      	lsls	r2, r3, #31
 8009e16:	4605      	mov	r5, r0
 8009e18:	d4e0      	bmi.n	8009ddc <_fflush_r+0xc>
 8009e1a:	89a3      	ldrh	r3, [r4, #12]
 8009e1c:	059b      	lsls	r3, r3, #22
 8009e1e:	d4dd      	bmi.n	8009ddc <_fflush_r+0xc>
 8009e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e22:	f000 fc7b 	bl	800a71c <__retarget_lock_release_recursive>
 8009e26:	e7d9      	b.n	8009ddc <_fflush_r+0xc>
 8009e28:	4b05      	ldr	r3, [pc, #20]	; (8009e40 <_fflush_r+0x70>)
 8009e2a:	429c      	cmp	r4, r3
 8009e2c:	d101      	bne.n	8009e32 <_fflush_r+0x62>
 8009e2e:	68ac      	ldr	r4, [r5, #8]
 8009e30:	e7df      	b.n	8009df2 <_fflush_r+0x22>
 8009e32:	4b04      	ldr	r3, [pc, #16]	; (8009e44 <_fflush_r+0x74>)
 8009e34:	429c      	cmp	r4, r3
 8009e36:	bf08      	it	eq
 8009e38:	68ec      	ldreq	r4, [r5, #12]
 8009e3a:	e7da      	b.n	8009df2 <_fflush_r+0x22>
 8009e3c:	0800c2c0 	.word	0x0800c2c0
 8009e40:	0800c2e0 	.word	0x0800c2e0
 8009e44:	0800c2a0 	.word	0x0800c2a0

08009e48 <std>:
 8009e48:	2300      	movs	r3, #0
 8009e4a:	b510      	push	{r4, lr}
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8009e52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e56:	6083      	str	r3, [r0, #8]
 8009e58:	8181      	strh	r1, [r0, #12]
 8009e5a:	6643      	str	r3, [r0, #100]	; 0x64
 8009e5c:	81c2      	strh	r2, [r0, #14]
 8009e5e:	6183      	str	r3, [r0, #24]
 8009e60:	4619      	mov	r1, r3
 8009e62:	2208      	movs	r2, #8
 8009e64:	305c      	adds	r0, #92	; 0x5c
 8009e66:	f7fd fcad 	bl	80077c4 <memset>
 8009e6a:	4b05      	ldr	r3, [pc, #20]	; (8009e80 <std+0x38>)
 8009e6c:	6263      	str	r3, [r4, #36]	; 0x24
 8009e6e:	4b05      	ldr	r3, [pc, #20]	; (8009e84 <std+0x3c>)
 8009e70:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e72:	4b05      	ldr	r3, [pc, #20]	; (8009e88 <std+0x40>)
 8009e74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e76:	4b05      	ldr	r3, [pc, #20]	; (8009e8c <std+0x44>)
 8009e78:	6224      	str	r4, [r4, #32]
 8009e7a:	6323      	str	r3, [r4, #48]	; 0x30
 8009e7c:	bd10      	pop	{r4, pc}
 8009e7e:	bf00      	nop
 8009e80:	0800b671 	.word	0x0800b671
 8009e84:	0800b693 	.word	0x0800b693
 8009e88:	0800b6cb 	.word	0x0800b6cb
 8009e8c:	0800b6ef 	.word	0x0800b6ef

08009e90 <_cleanup_r>:
 8009e90:	4901      	ldr	r1, [pc, #4]	; (8009e98 <_cleanup_r+0x8>)
 8009e92:	f000 b8af 	b.w	8009ff4 <_fwalk_reent>
 8009e96:	bf00      	nop
 8009e98:	08009dd1 	.word	0x08009dd1

08009e9c <__sfmoreglue>:
 8009e9c:	b570      	push	{r4, r5, r6, lr}
 8009e9e:	2268      	movs	r2, #104	; 0x68
 8009ea0:	1e4d      	subs	r5, r1, #1
 8009ea2:	4355      	muls	r5, r2
 8009ea4:	460e      	mov	r6, r1
 8009ea6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009eaa:	f001 f9fb 	bl	800b2a4 <_malloc_r>
 8009eae:	4604      	mov	r4, r0
 8009eb0:	b140      	cbz	r0, 8009ec4 <__sfmoreglue+0x28>
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	e9c0 1600 	strd	r1, r6, [r0]
 8009eb8:	300c      	adds	r0, #12
 8009eba:	60a0      	str	r0, [r4, #8]
 8009ebc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ec0:	f7fd fc80 	bl	80077c4 <memset>
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	bd70      	pop	{r4, r5, r6, pc}

08009ec8 <__sfp_lock_acquire>:
 8009ec8:	4801      	ldr	r0, [pc, #4]	; (8009ed0 <__sfp_lock_acquire+0x8>)
 8009eca:	f000 bc26 	b.w	800a71a <__retarget_lock_acquire_recursive>
 8009ece:	bf00      	nop
 8009ed0:	200008f1 	.word	0x200008f1

08009ed4 <__sfp_lock_release>:
 8009ed4:	4801      	ldr	r0, [pc, #4]	; (8009edc <__sfp_lock_release+0x8>)
 8009ed6:	f000 bc21 	b.w	800a71c <__retarget_lock_release_recursive>
 8009eda:	bf00      	nop
 8009edc:	200008f1 	.word	0x200008f1

08009ee0 <__sinit_lock_acquire>:
 8009ee0:	4801      	ldr	r0, [pc, #4]	; (8009ee8 <__sinit_lock_acquire+0x8>)
 8009ee2:	f000 bc1a 	b.w	800a71a <__retarget_lock_acquire_recursive>
 8009ee6:	bf00      	nop
 8009ee8:	200008f2 	.word	0x200008f2

08009eec <__sinit_lock_release>:
 8009eec:	4801      	ldr	r0, [pc, #4]	; (8009ef4 <__sinit_lock_release+0x8>)
 8009eee:	f000 bc15 	b.w	800a71c <__retarget_lock_release_recursive>
 8009ef2:	bf00      	nop
 8009ef4:	200008f2 	.word	0x200008f2

08009ef8 <__sinit>:
 8009ef8:	b510      	push	{r4, lr}
 8009efa:	4604      	mov	r4, r0
 8009efc:	f7ff fff0 	bl	8009ee0 <__sinit_lock_acquire>
 8009f00:	69a3      	ldr	r3, [r4, #24]
 8009f02:	b11b      	cbz	r3, 8009f0c <__sinit+0x14>
 8009f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f08:	f7ff bff0 	b.w	8009eec <__sinit_lock_release>
 8009f0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f10:	6523      	str	r3, [r4, #80]	; 0x50
 8009f12:	4b13      	ldr	r3, [pc, #76]	; (8009f60 <__sinit+0x68>)
 8009f14:	4a13      	ldr	r2, [pc, #76]	; (8009f64 <__sinit+0x6c>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f1a:	42a3      	cmp	r3, r4
 8009f1c:	bf04      	itt	eq
 8009f1e:	2301      	moveq	r3, #1
 8009f20:	61a3      	streq	r3, [r4, #24]
 8009f22:	4620      	mov	r0, r4
 8009f24:	f000 f820 	bl	8009f68 <__sfp>
 8009f28:	6060      	str	r0, [r4, #4]
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f000 f81c 	bl	8009f68 <__sfp>
 8009f30:	60a0      	str	r0, [r4, #8]
 8009f32:	4620      	mov	r0, r4
 8009f34:	f000 f818 	bl	8009f68 <__sfp>
 8009f38:	2200      	movs	r2, #0
 8009f3a:	60e0      	str	r0, [r4, #12]
 8009f3c:	2104      	movs	r1, #4
 8009f3e:	6860      	ldr	r0, [r4, #4]
 8009f40:	f7ff ff82 	bl	8009e48 <std>
 8009f44:	68a0      	ldr	r0, [r4, #8]
 8009f46:	2201      	movs	r2, #1
 8009f48:	2109      	movs	r1, #9
 8009f4a:	f7ff ff7d 	bl	8009e48 <std>
 8009f4e:	68e0      	ldr	r0, [r4, #12]
 8009f50:	2202      	movs	r2, #2
 8009f52:	2112      	movs	r1, #18
 8009f54:	f7ff ff78 	bl	8009e48 <std>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	61a3      	str	r3, [r4, #24]
 8009f5c:	e7d2      	b.n	8009f04 <__sinit+0xc>
 8009f5e:	bf00      	nop
 8009f60:	0800c188 	.word	0x0800c188
 8009f64:	08009e91 	.word	0x08009e91

08009f68 <__sfp>:
 8009f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6a:	4607      	mov	r7, r0
 8009f6c:	f7ff ffac 	bl	8009ec8 <__sfp_lock_acquire>
 8009f70:	4b1e      	ldr	r3, [pc, #120]	; (8009fec <__sfp+0x84>)
 8009f72:	681e      	ldr	r6, [r3, #0]
 8009f74:	69b3      	ldr	r3, [r6, #24]
 8009f76:	b913      	cbnz	r3, 8009f7e <__sfp+0x16>
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f7ff ffbd 	bl	8009ef8 <__sinit>
 8009f7e:	3648      	adds	r6, #72	; 0x48
 8009f80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f84:	3b01      	subs	r3, #1
 8009f86:	d503      	bpl.n	8009f90 <__sfp+0x28>
 8009f88:	6833      	ldr	r3, [r6, #0]
 8009f8a:	b30b      	cbz	r3, 8009fd0 <__sfp+0x68>
 8009f8c:	6836      	ldr	r6, [r6, #0]
 8009f8e:	e7f7      	b.n	8009f80 <__sfp+0x18>
 8009f90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f94:	b9d5      	cbnz	r5, 8009fcc <__sfp+0x64>
 8009f96:	4b16      	ldr	r3, [pc, #88]	; (8009ff0 <__sfp+0x88>)
 8009f98:	60e3      	str	r3, [r4, #12]
 8009f9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f9e:	6665      	str	r5, [r4, #100]	; 0x64
 8009fa0:	f000 fbba 	bl	800a718 <__retarget_lock_init_recursive>
 8009fa4:	f7ff ff96 	bl	8009ed4 <__sfp_lock_release>
 8009fa8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009fac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009fb0:	6025      	str	r5, [r4, #0]
 8009fb2:	61a5      	str	r5, [r4, #24]
 8009fb4:	2208      	movs	r2, #8
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009fbc:	f7fd fc02 	bl	80077c4 <memset>
 8009fc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009fc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009fc8:	4620      	mov	r0, r4
 8009fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fcc:	3468      	adds	r4, #104	; 0x68
 8009fce:	e7d9      	b.n	8009f84 <__sfp+0x1c>
 8009fd0:	2104      	movs	r1, #4
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	f7ff ff62 	bl	8009e9c <__sfmoreglue>
 8009fd8:	4604      	mov	r4, r0
 8009fda:	6030      	str	r0, [r6, #0]
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	d1d5      	bne.n	8009f8c <__sfp+0x24>
 8009fe0:	f7ff ff78 	bl	8009ed4 <__sfp_lock_release>
 8009fe4:	230c      	movs	r3, #12
 8009fe6:	603b      	str	r3, [r7, #0]
 8009fe8:	e7ee      	b.n	8009fc8 <__sfp+0x60>
 8009fea:	bf00      	nop
 8009fec:	0800c188 	.word	0x0800c188
 8009ff0:	ffff0001 	.word	0xffff0001

08009ff4 <_fwalk_reent>:
 8009ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ff8:	4606      	mov	r6, r0
 8009ffa:	4688      	mov	r8, r1
 8009ffc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a000:	2700      	movs	r7, #0
 800a002:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a006:	f1b9 0901 	subs.w	r9, r9, #1
 800a00a:	d505      	bpl.n	800a018 <_fwalk_reent+0x24>
 800a00c:	6824      	ldr	r4, [r4, #0]
 800a00e:	2c00      	cmp	r4, #0
 800a010:	d1f7      	bne.n	800a002 <_fwalk_reent+0xe>
 800a012:	4638      	mov	r0, r7
 800a014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a018:	89ab      	ldrh	r3, [r5, #12]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d907      	bls.n	800a02e <_fwalk_reent+0x3a>
 800a01e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a022:	3301      	adds	r3, #1
 800a024:	d003      	beq.n	800a02e <_fwalk_reent+0x3a>
 800a026:	4629      	mov	r1, r5
 800a028:	4630      	mov	r0, r6
 800a02a:	47c0      	blx	r8
 800a02c:	4307      	orrs	r7, r0
 800a02e:	3568      	adds	r5, #104	; 0x68
 800a030:	e7e9      	b.n	800a006 <_fwalk_reent+0x12>

0800a032 <rshift>:
 800a032:	6903      	ldr	r3, [r0, #16]
 800a034:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a03c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a040:	f100 0414 	add.w	r4, r0, #20
 800a044:	dd45      	ble.n	800a0d2 <rshift+0xa0>
 800a046:	f011 011f 	ands.w	r1, r1, #31
 800a04a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a04e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a052:	d10c      	bne.n	800a06e <rshift+0x3c>
 800a054:	f100 0710 	add.w	r7, r0, #16
 800a058:	4629      	mov	r1, r5
 800a05a:	42b1      	cmp	r1, r6
 800a05c:	d334      	bcc.n	800a0c8 <rshift+0x96>
 800a05e:	1a9b      	subs	r3, r3, r2
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	1eea      	subs	r2, r5, #3
 800a064:	4296      	cmp	r6, r2
 800a066:	bf38      	it	cc
 800a068:	2300      	movcc	r3, #0
 800a06a:	4423      	add	r3, r4
 800a06c:	e015      	b.n	800a09a <rshift+0x68>
 800a06e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a072:	f1c1 0820 	rsb	r8, r1, #32
 800a076:	40cf      	lsrs	r7, r1
 800a078:	f105 0e04 	add.w	lr, r5, #4
 800a07c:	46a1      	mov	r9, r4
 800a07e:	4576      	cmp	r6, lr
 800a080:	46f4      	mov	ip, lr
 800a082:	d815      	bhi.n	800a0b0 <rshift+0x7e>
 800a084:	1a9a      	subs	r2, r3, r2
 800a086:	0092      	lsls	r2, r2, #2
 800a088:	3a04      	subs	r2, #4
 800a08a:	3501      	adds	r5, #1
 800a08c:	42ae      	cmp	r6, r5
 800a08e:	bf38      	it	cc
 800a090:	2200      	movcc	r2, #0
 800a092:	18a3      	adds	r3, r4, r2
 800a094:	50a7      	str	r7, [r4, r2]
 800a096:	b107      	cbz	r7, 800a09a <rshift+0x68>
 800a098:	3304      	adds	r3, #4
 800a09a:	1b1a      	subs	r2, r3, r4
 800a09c:	42a3      	cmp	r3, r4
 800a09e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a0a2:	bf08      	it	eq
 800a0a4:	2300      	moveq	r3, #0
 800a0a6:	6102      	str	r2, [r0, #16]
 800a0a8:	bf08      	it	eq
 800a0aa:	6143      	streq	r3, [r0, #20]
 800a0ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0b0:	f8dc c000 	ldr.w	ip, [ip]
 800a0b4:	fa0c fc08 	lsl.w	ip, ip, r8
 800a0b8:	ea4c 0707 	orr.w	r7, ip, r7
 800a0bc:	f849 7b04 	str.w	r7, [r9], #4
 800a0c0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a0c4:	40cf      	lsrs	r7, r1
 800a0c6:	e7da      	b.n	800a07e <rshift+0x4c>
 800a0c8:	f851 cb04 	ldr.w	ip, [r1], #4
 800a0cc:	f847 cf04 	str.w	ip, [r7, #4]!
 800a0d0:	e7c3      	b.n	800a05a <rshift+0x28>
 800a0d2:	4623      	mov	r3, r4
 800a0d4:	e7e1      	b.n	800a09a <rshift+0x68>

0800a0d6 <__hexdig_fun>:
 800a0d6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a0da:	2b09      	cmp	r3, #9
 800a0dc:	d802      	bhi.n	800a0e4 <__hexdig_fun+0xe>
 800a0de:	3820      	subs	r0, #32
 800a0e0:	b2c0      	uxtb	r0, r0
 800a0e2:	4770      	bx	lr
 800a0e4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a0e8:	2b05      	cmp	r3, #5
 800a0ea:	d801      	bhi.n	800a0f0 <__hexdig_fun+0x1a>
 800a0ec:	3847      	subs	r0, #71	; 0x47
 800a0ee:	e7f7      	b.n	800a0e0 <__hexdig_fun+0xa>
 800a0f0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a0f4:	2b05      	cmp	r3, #5
 800a0f6:	d801      	bhi.n	800a0fc <__hexdig_fun+0x26>
 800a0f8:	3827      	subs	r0, #39	; 0x27
 800a0fa:	e7f1      	b.n	800a0e0 <__hexdig_fun+0xa>
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	4770      	bx	lr

0800a100 <__gethex>:
 800a100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a104:	ed2d 8b02 	vpush	{d8}
 800a108:	b089      	sub	sp, #36	; 0x24
 800a10a:	ee08 0a10 	vmov	s16, r0
 800a10e:	9304      	str	r3, [sp, #16]
 800a110:	4bb4      	ldr	r3, [pc, #720]	; (800a3e4 <__gethex+0x2e4>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	9301      	str	r3, [sp, #4]
 800a116:	4618      	mov	r0, r3
 800a118:	468b      	mov	fp, r1
 800a11a:	4690      	mov	r8, r2
 800a11c:	f7f6 f860 	bl	80001e0 <strlen>
 800a120:	9b01      	ldr	r3, [sp, #4]
 800a122:	f8db 2000 	ldr.w	r2, [fp]
 800a126:	4403      	add	r3, r0
 800a128:	4682      	mov	sl, r0
 800a12a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a12e:	9305      	str	r3, [sp, #20]
 800a130:	1c93      	adds	r3, r2, #2
 800a132:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a136:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a13a:	32fe      	adds	r2, #254	; 0xfe
 800a13c:	18d1      	adds	r1, r2, r3
 800a13e:	461f      	mov	r7, r3
 800a140:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a144:	9100      	str	r1, [sp, #0]
 800a146:	2830      	cmp	r0, #48	; 0x30
 800a148:	d0f8      	beq.n	800a13c <__gethex+0x3c>
 800a14a:	f7ff ffc4 	bl	800a0d6 <__hexdig_fun>
 800a14e:	4604      	mov	r4, r0
 800a150:	2800      	cmp	r0, #0
 800a152:	d13a      	bne.n	800a1ca <__gethex+0xca>
 800a154:	9901      	ldr	r1, [sp, #4]
 800a156:	4652      	mov	r2, sl
 800a158:	4638      	mov	r0, r7
 800a15a:	f7fe f833 	bl	80081c4 <strncmp>
 800a15e:	4605      	mov	r5, r0
 800a160:	2800      	cmp	r0, #0
 800a162:	d168      	bne.n	800a236 <__gethex+0x136>
 800a164:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a168:	eb07 060a 	add.w	r6, r7, sl
 800a16c:	f7ff ffb3 	bl	800a0d6 <__hexdig_fun>
 800a170:	2800      	cmp	r0, #0
 800a172:	d062      	beq.n	800a23a <__gethex+0x13a>
 800a174:	4633      	mov	r3, r6
 800a176:	7818      	ldrb	r0, [r3, #0]
 800a178:	2830      	cmp	r0, #48	; 0x30
 800a17a:	461f      	mov	r7, r3
 800a17c:	f103 0301 	add.w	r3, r3, #1
 800a180:	d0f9      	beq.n	800a176 <__gethex+0x76>
 800a182:	f7ff ffa8 	bl	800a0d6 <__hexdig_fun>
 800a186:	2301      	movs	r3, #1
 800a188:	fab0 f480 	clz	r4, r0
 800a18c:	0964      	lsrs	r4, r4, #5
 800a18e:	4635      	mov	r5, r6
 800a190:	9300      	str	r3, [sp, #0]
 800a192:	463a      	mov	r2, r7
 800a194:	4616      	mov	r6, r2
 800a196:	3201      	adds	r2, #1
 800a198:	7830      	ldrb	r0, [r6, #0]
 800a19a:	f7ff ff9c 	bl	800a0d6 <__hexdig_fun>
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	d1f8      	bne.n	800a194 <__gethex+0x94>
 800a1a2:	9901      	ldr	r1, [sp, #4]
 800a1a4:	4652      	mov	r2, sl
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	f7fe f80c 	bl	80081c4 <strncmp>
 800a1ac:	b980      	cbnz	r0, 800a1d0 <__gethex+0xd0>
 800a1ae:	b94d      	cbnz	r5, 800a1c4 <__gethex+0xc4>
 800a1b0:	eb06 050a 	add.w	r5, r6, sl
 800a1b4:	462a      	mov	r2, r5
 800a1b6:	4616      	mov	r6, r2
 800a1b8:	3201      	adds	r2, #1
 800a1ba:	7830      	ldrb	r0, [r6, #0]
 800a1bc:	f7ff ff8b 	bl	800a0d6 <__hexdig_fun>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d1f8      	bne.n	800a1b6 <__gethex+0xb6>
 800a1c4:	1bad      	subs	r5, r5, r6
 800a1c6:	00ad      	lsls	r5, r5, #2
 800a1c8:	e004      	b.n	800a1d4 <__gethex+0xd4>
 800a1ca:	2400      	movs	r4, #0
 800a1cc:	4625      	mov	r5, r4
 800a1ce:	e7e0      	b.n	800a192 <__gethex+0x92>
 800a1d0:	2d00      	cmp	r5, #0
 800a1d2:	d1f7      	bne.n	800a1c4 <__gethex+0xc4>
 800a1d4:	7833      	ldrb	r3, [r6, #0]
 800a1d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a1da:	2b50      	cmp	r3, #80	; 0x50
 800a1dc:	d13b      	bne.n	800a256 <__gethex+0x156>
 800a1de:	7873      	ldrb	r3, [r6, #1]
 800a1e0:	2b2b      	cmp	r3, #43	; 0x2b
 800a1e2:	d02c      	beq.n	800a23e <__gethex+0x13e>
 800a1e4:	2b2d      	cmp	r3, #45	; 0x2d
 800a1e6:	d02e      	beq.n	800a246 <__gethex+0x146>
 800a1e8:	1c71      	adds	r1, r6, #1
 800a1ea:	f04f 0900 	mov.w	r9, #0
 800a1ee:	7808      	ldrb	r0, [r1, #0]
 800a1f0:	f7ff ff71 	bl	800a0d6 <__hexdig_fun>
 800a1f4:	1e43      	subs	r3, r0, #1
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	2b18      	cmp	r3, #24
 800a1fa:	d82c      	bhi.n	800a256 <__gethex+0x156>
 800a1fc:	f1a0 0210 	sub.w	r2, r0, #16
 800a200:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a204:	f7ff ff67 	bl	800a0d6 <__hexdig_fun>
 800a208:	1e43      	subs	r3, r0, #1
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	2b18      	cmp	r3, #24
 800a20e:	d91d      	bls.n	800a24c <__gethex+0x14c>
 800a210:	f1b9 0f00 	cmp.w	r9, #0
 800a214:	d000      	beq.n	800a218 <__gethex+0x118>
 800a216:	4252      	negs	r2, r2
 800a218:	4415      	add	r5, r2
 800a21a:	f8cb 1000 	str.w	r1, [fp]
 800a21e:	b1e4      	cbz	r4, 800a25a <__gethex+0x15a>
 800a220:	9b00      	ldr	r3, [sp, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	bf14      	ite	ne
 800a226:	2700      	movne	r7, #0
 800a228:	2706      	moveq	r7, #6
 800a22a:	4638      	mov	r0, r7
 800a22c:	b009      	add	sp, #36	; 0x24
 800a22e:	ecbd 8b02 	vpop	{d8}
 800a232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a236:	463e      	mov	r6, r7
 800a238:	4625      	mov	r5, r4
 800a23a:	2401      	movs	r4, #1
 800a23c:	e7ca      	b.n	800a1d4 <__gethex+0xd4>
 800a23e:	f04f 0900 	mov.w	r9, #0
 800a242:	1cb1      	adds	r1, r6, #2
 800a244:	e7d3      	b.n	800a1ee <__gethex+0xee>
 800a246:	f04f 0901 	mov.w	r9, #1
 800a24a:	e7fa      	b.n	800a242 <__gethex+0x142>
 800a24c:	230a      	movs	r3, #10
 800a24e:	fb03 0202 	mla	r2, r3, r2, r0
 800a252:	3a10      	subs	r2, #16
 800a254:	e7d4      	b.n	800a200 <__gethex+0x100>
 800a256:	4631      	mov	r1, r6
 800a258:	e7df      	b.n	800a21a <__gethex+0x11a>
 800a25a:	1bf3      	subs	r3, r6, r7
 800a25c:	3b01      	subs	r3, #1
 800a25e:	4621      	mov	r1, r4
 800a260:	2b07      	cmp	r3, #7
 800a262:	dc0b      	bgt.n	800a27c <__gethex+0x17c>
 800a264:	ee18 0a10 	vmov	r0, s16
 800a268:	f000 fad8 	bl	800a81c <_Balloc>
 800a26c:	4604      	mov	r4, r0
 800a26e:	b940      	cbnz	r0, 800a282 <__gethex+0x182>
 800a270:	4b5d      	ldr	r3, [pc, #372]	; (800a3e8 <__gethex+0x2e8>)
 800a272:	4602      	mov	r2, r0
 800a274:	21de      	movs	r1, #222	; 0xde
 800a276:	485d      	ldr	r0, [pc, #372]	; (800a3ec <__gethex+0x2ec>)
 800a278:	f001 fa5c 	bl	800b734 <__assert_func>
 800a27c:	3101      	adds	r1, #1
 800a27e:	105b      	asrs	r3, r3, #1
 800a280:	e7ee      	b.n	800a260 <__gethex+0x160>
 800a282:	f100 0914 	add.w	r9, r0, #20
 800a286:	f04f 0b00 	mov.w	fp, #0
 800a28a:	f1ca 0301 	rsb	r3, sl, #1
 800a28e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a292:	f8cd b000 	str.w	fp, [sp]
 800a296:	9306      	str	r3, [sp, #24]
 800a298:	42b7      	cmp	r7, r6
 800a29a:	d340      	bcc.n	800a31e <__gethex+0x21e>
 800a29c:	9802      	ldr	r0, [sp, #8]
 800a29e:	9b00      	ldr	r3, [sp, #0]
 800a2a0:	f840 3b04 	str.w	r3, [r0], #4
 800a2a4:	eba0 0009 	sub.w	r0, r0, r9
 800a2a8:	1080      	asrs	r0, r0, #2
 800a2aa:	0146      	lsls	r6, r0, #5
 800a2ac:	6120      	str	r0, [r4, #16]
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f000 fba6 	bl	800aa00 <__hi0bits>
 800a2b4:	1a30      	subs	r0, r6, r0
 800a2b6:	f8d8 6000 	ldr.w	r6, [r8]
 800a2ba:	42b0      	cmp	r0, r6
 800a2bc:	dd63      	ble.n	800a386 <__gethex+0x286>
 800a2be:	1b87      	subs	r7, r0, r6
 800a2c0:	4639      	mov	r1, r7
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f000 ff4a 	bl	800b15c <__any_on>
 800a2c8:	4682      	mov	sl, r0
 800a2ca:	b1a8      	cbz	r0, 800a2f8 <__gethex+0x1f8>
 800a2cc:	1e7b      	subs	r3, r7, #1
 800a2ce:	1159      	asrs	r1, r3, #5
 800a2d0:	f003 021f 	and.w	r2, r3, #31
 800a2d4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a2d8:	f04f 0a01 	mov.w	sl, #1
 800a2dc:	fa0a f202 	lsl.w	r2, sl, r2
 800a2e0:	420a      	tst	r2, r1
 800a2e2:	d009      	beq.n	800a2f8 <__gethex+0x1f8>
 800a2e4:	4553      	cmp	r3, sl
 800a2e6:	dd05      	ble.n	800a2f4 <__gethex+0x1f4>
 800a2e8:	1eb9      	subs	r1, r7, #2
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	f000 ff36 	bl	800b15c <__any_on>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	d145      	bne.n	800a380 <__gethex+0x280>
 800a2f4:	f04f 0a02 	mov.w	sl, #2
 800a2f8:	4639      	mov	r1, r7
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f7ff fe99 	bl	800a032 <rshift>
 800a300:	443d      	add	r5, r7
 800a302:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a306:	42ab      	cmp	r3, r5
 800a308:	da4c      	bge.n	800a3a4 <__gethex+0x2a4>
 800a30a:	ee18 0a10 	vmov	r0, s16
 800a30e:	4621      	mov	r1, r4
 800a310:	f000 fac4 	bl	800a89c <_Bfree>
 800a314:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a316:	2300      	movs	r3, #0
 800a318:	6013      	str	r3, [r2, #0]
 800a31a:	27a3      	movs	r7, #163	; 0xa3
 800a31c:	e785      	b.n	800a22a <__gethex+0x12a>
 800a31e:	1e73      	subs	r3, r6, #1
 800a320:	9a05      	ldr	r2, [sp, #20]
 800a322:	9303      	str	r3, [sp, #12]
 800a324:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a328:	4293      	cmp	r3, r2
 800a32a:	d019      	beq.n	800a360 <__gethex+0x260>
 800a32c:	f1bb 0f20 	cmp.w	fp, #32
 800a330:	d107      	bne.n	800a342 <__gethex+0x242>
 800a332:	9b02      	ldr	r3, [sp, #8]
 800a334:	9a00      	ldr	r2, [sp, #0]
 800a336:	f843 2b04 	str.w	r2, [r3], #4
 800a33a:	9302      	str	r3, [sp, #8]
 800a33c:	2300      	movs	r3, #0
 800a33e:	9300      	str	r3, [sp, #0]
 800a340:	469b      	mov	fp, r3
 800a342:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a346:	f7ff fec6 	bl	800a0d6 <__hexdig_fun>
 800a34a:	9b00      	ldr	r3, [sp, #0]
 800a34c:	f000 000f 	and.w	r0, r0, #15
 800a350:	fa00 f00b 	lsl.w	r0, r0, fp
 800a354:	4303      	orrs	r3, r0
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	f10b 0b04 	add.w	fp, fp, #4
 800a35c:	9b03      	ldr	r3, [sp, #12]
 800a35e:	e00d      	b.n	800a37c <__gethex+0x27c>
 800a360:	9b03      	ldr	r3, [sp, #12]
 800a362:	9a06      	ldr	r2, [sp, #24]
 800a364:	4413      	add	r3, r2
 800a366:	42bb      	cmp	r3, r7
 800a368:	d3e0      	bcc.n	800a32c <__gethex+0x22c>
 800a36a:	4618      	mov	r0, r3
 800a36c:	9901      	ldr	r1, [sp, #4]
 800a36e:	9307      	str	r3, [sp, #28]
 800a370:	4652      	mov	r2, sl
 800a372:	f7fd ff27 	bl	80081c4 <strncmp>
 800a376:	9b07      	ldr	r3, [sp, #28]
 800a378:	2800      	cmp	r0, #0
 800a37a:	d1d7      	bne.n	800a32c <__gethex+0x22c>
 800a37c:	461e      	mov	r6, r3
 800a37e:	e78b      	b.n	800a298 <__gethex+0x198>
 800a380:	f04f 0a03 	mov.w	sl, #3
 800a384:	e7b8      	b.n	800a2f8 <__gethex+0x1f8>
 800a386:	da0a      	bge.n	800a39e <__gethex+0x29e>
 800a388:	1a37      	subs	r7, r6, r0
 800a38a:	4621      	mov	r1, r4
 800a38c:	ee18 0a10 	vmov	r0, s16
 800a390:	463a      	mov	r2, r7
 800a392:	f000 fc9f 	bl	800acd4 <__lshift>
 800a396:	1bed      	subs	r5, r5, r7
 800a398:	4604      	mov	r4, r0
 800a39a:	f100 0914 	add.w	r9, r0, #20
 800a39e:	f04f 0a00 	mov.w	sl, #0
 800a3a2:	e7ae      	b.n	800a302 <__gethex+0x202>
 800a3a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a3a8:	42a8      	cmp	r0, r5
 800a3aa:	dd72      	ble.n	800a492 <__gethex+0x392>
 800a3ac:	1b45      	subs	r5, r0, r5
 800a3ae:	42ae      	cmp	r6, r5
 800a3b0:	dc36      	bgt.n	800a420 <__gethex+0x320>
 800a3b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d02a      	beq.n	800a410 <__gethex+0x310>
 800a3ba:	2b03      	cmp	r3, #3
 800a3bc:	d02c      	beq.n	800a418 <__gethex+0x318>
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d11c      	bne.n	800a3fc <__gethex+0x2fc>
 800a3c2:	42ae      	cmp	r6, r5
 800a3c4:	d11a      	bne.n	800a3fc <__gethex+0x2fc>
 800a3c6:	2e01      	cmp	r6, #1
 800a3c8:	d112      	bne.n	800a3f0 <__gethex+0x2f0>
 800a3ca:	9a04      	ldr	r2, [sp, #16]
 800a3cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a3d0:	6013      	str	r3, [r2, #0]
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	6123      	str	r3, [r4, #16]
 800a3d6:	f8c9 3000 	str.w	r3, [r9]
 800a3da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3dc:	2762      	movs	r7, #98	; 0x62
 800a3de:	601c      	str	r4, [r3, #0]
 800a3e0:	e723      	b.n	800a22a <__gethex+0x12a>
 800a3e2:	bf00      	nop
 800a3e4:	0800c368 	.word	0x0800c368
 800a3e8:	0800c28f 	.word	0x0800c28f
 800a3ec:	0800c300 	.word	0x0800c300
 800a3f0:	1e71      	subs	r1, r6, #1
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	f000 feb2 	bl	800b15c <__any_on>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	d1e6      	bne.n	800a3ca <__gethex+0x2ca>
 800a3fc:	ee18 0a10 	vmov	r0, s16
 800a400:	4621      	mov	r1, r4
 800a402:	f000 fa4b 	bl	800a89c <_Bfree>
 800a406:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a408:	2300      	movs	r3, #0
 800a40a:	6013      	str	r3, [r2, #0]
 800a40c:	2750      	movs	r7, #80	; 0x50
 800a40e:	e70c      	b.n	800a22a <__gethex+0x12a>
 800a410:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a412:	2b00      	cmp	r3, #0
 800a414:	d1f2      	bne.n	800a3fc <__gethex+0x2fc>
 800a416:	e7d8      	b.n	800a3ca <__gethex+0x2ca>
 800a418:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d1d5      	bne.n	800a3ca <__gethex+0x2ca>
 800a41e:	e7ed      	b.n	800a3fc <__gethex+0x2fc>
 800a420:	1e6f      	subs	r7, r5, #1
 800a422:	f1ba 0f00 	cmp.w	sl, #0
 800a426:	d131      	bne.n	800a48c <__gethex+0x38c>
 800a428:	b127      	cbz	r7, 800a434 <__gethex+0x334>
 800a42a:	4639      	mov	r1, r7
 800a42c:	4620      	mov	r0, r4
 800a42e:	f000 fe95 	bl	800b15c <__any_on>
 800a432:	4682      	mov	sl, r0
 800a434:	117b      	asrs	r3, r7, #5
 800a436:	2101      	movs	r1, #1
 800a438:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a43c:	f007 071f 	and.w	r7, r7, #31
 800a440:	fa01 f707 	lsl.w	r7, r1, r7
 800a444:	421f      	tst	r7, r3
 800a446:	4629      	mov	r1, r5
 800a448:	4620      	mov	r0, r4
 800a44a:	bf18      	it	ne
 800a44c:	f04a 0a02 	orrne.w	sl, sl, #2
 800a450:	1b76      	subs	r6, r6, r5
 800a452:	f7ff fdee 	bl	800a032 <rshift>
 800a456:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a45a:	2702      	movs	r7, #2
 800a45c:	f1ba 0f00 	cmp.w	sl, #0
 800a460:	d048      	beq.n	800a4f4 <__gethex+0x3f4>
 800a462:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a466:	2b02      	cmp	r3, #2
 800a468:	d015      	beq.n	800a496 <__gethex+0x396>
 800a46a:	2b03      	cmp	r3, #3
 800a46c:	d017      	beq.n	800a49e <__gethex+0x39e>
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d109      	bne.n	800a486 <__gethex+0x386>
 800a472:	f01a 0f02 	tst.w	sl, #2
 800a476:	d006      	beq.n	800a486 <__gethex+0x386>
 800a478:	f8d9 0000 	ldr.w	r0, [r9]
 800a47c:	ea4a 0a00 	orr.w	sl, sl, r0
 800a480:	f01a 0f01 	tst.w	sl, #1
 800a484:	d10e      	bne.n	800a4a4 <__gethex+0x3a4>
 800a486:	f047 0710 	orr.w	r7, r7, #16
 800a48a:	e033      	b.n	800a4f4 <__gethex+0x3f4>
 800a48c:	f04f 0a01 	mov.w	sl, #1
 800a490:	e7d0      	b.n	800a434 <__gethex+0x334>
 800a492:	2701      	movs	r7, #1
 800a494:	e7e2      	b.n	800a45c <__gethex+0x35c>
 800a496:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a498:	f1c3 0301 	rsb	r3, r3, #1
 800a49c:	9315      	str	r3, [sp, #84]	; 0x54
 800a49e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d0f0      	beq.n	800a486 <__gethex+0x386>
 800a4a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a4a8:	f104 0314 	add.w	r3, r4, #20
 800a4ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a4b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a4b4:	f04f 0c00 	mov.w	ip, #0
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4be:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a4c2:	d01c      	beq.n	800a4fe <__gethex+0x3fe>
 800a4c4:	3201      	adds	r2, #1
 800a4c6:	6002      	str	r2, [r0, #0]
 800a4c8:	2f02      	cmp	r7, #2
 800a4ca:	f104 0314 	add.w	r3, r4, #20
 800a4ce:	d13f      	bne.n	800a550 <__gethex+0x450>
 800a4d0:	f8d8 2000 	ldr.w	r2, [r8]
 800a4d4:	3a01      	subs	r2, #1
 800a4d6:	42b2      	cmp	r2, r6
 800a4d8:	d10a      	bne.n	800a4f0 <__gethex+0x3f0>
 800a4da:	1171      	asrs	r1, r6, #5
 800a4dc:	2201      	movs	r2, #1
 800a4de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a4e2:	f006 061f 	and.w	r6, r6, #31
 800a4e6:	fa02 f606 	lsl.w	r6, r2, r6
 800a4ea:	421e      	tst	r6, r3
 800a4ec:	bf18      	it	ne
 800a4ee:	4617      	movne	r7, r2
 800a4f0:	f047 0720 	orr.w	r7, r7, #32
 800a4f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4f6:	601c      	str	r4, [r3, #0]
 800a4f8:	9b04      	ldr	r3, [sp, #16]
 800a4fa:	601d      	str	r5, [r3, #0]
 800a4fc:	e695      	b.n	800a22a <__gethex+0x12a>
 800a4fe:	4299      	cmp	r1, r3
 800a500:	f843 cc04 	str.w	ip, [r3, #-4]
 800a504:	d8d8      	bhi.n	800a4b8 <__gethex+0x3b8>
 800a506:	68a3      	ldr	r3, [r4, #8]
 800a508:	459b      	cmp	fp, r3
 800a50a:	db19      	blt.n	800a540 <__gethex+0x440>
 800a50c:	6861      	ldr	r1, [r4, #4]
 800a50e:	ee18 0a10 	vmov	r0, s16
 800a512:	3101      	adds	r1, #1
 800a514:	f000 f982 	bl	800a81c <_Balloc>
 800a518:	4681      	mov	r9, r0
 800a51a:	b918      	cbnz	r0, 800a524 <__gethex+0x424>
 800a51c:	4b1a      	ldr	r3, [pc, #104]	; (800a588 <__gethex+0x488>)
 800a51e:	4602      	mov	r2, r0
 800a520:	2184      	movs	r1, #132	; 0x84
 800a522:	e6a8      	b.n	800a276 <__gethex+0x176>
 800a524:	6922      	ldr	r2, [r4, #16]
 800a526:	3202      	adds	r2, #2
 800a528:	f104 010c 	add.w	r1, r4, #12
 800a52c:	0092      	lsls	r2, r2, #2
 800a52e:	300c      	adds	r0, #12
 800a530:	f7fd f93a 	bl	80077a8 <memcpy>
 800a534:	4621      	mov	r1, r4
 800a536:	ee18 0a10 	vmov	r0, s16
 800a53a:	f000 f9af 	bl	800a89c <_Bfree>
 800a53e:	464c      	mov	r4, r9
 800a540:	6923      	ldr	r3, [r4, #16]
 800a542:	1c5a      	adds	r2, r3, #1
 800a544:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a548:	6122      	str	r2, [r4, #16]
 800a54a:	2201      	movs	r2, #1
 800a54c:	615a      	str	r2, [r3, #20]
 800a54e:	e7bb      	b.n	800a4c8 <__gethex+0x3c8>
 800a550:	6922      	ldr	r2, [r4, #16]
 800a552:	455a      	cmp	r2, fp
 800a554:	dd0b      	ble.n	800a56e <__gethex+0x46e>
 800a556:	2101      	movs	r1, #1
 800a558:	4620      	mov	r0, r4
 800a55a:	f7ff fd6a 	bl	800a032 <rshift>
 800a55e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a562:	3501      	adds	r5, #1
 800a564:	42ab      	cmp	r3, r5
 800a566:	f6ff aed0 	blt.w	800a30a <__gethex+0x20a>
 800a56a:	2701      	movs	r7, #1
 800a56c:	e7c0      	b.n	800a4f0 <__gethex+0x3f0>
 800a56e:	f016 061f 	ands.w	r6, r6, #31
 800a572:	d0fa      	beq.n	800a56a <__gethex+0x46a>
 800a574:	4453      	add	r3, sl
 800a576:	f1c6 0620 	rsb	r6, r6, #32
 800a57a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a57e:	f000 fa3f 	bl	800aa00 <__hi0bits>
 800a582:	42b0      	cmp	r0, r6
 800a584:	dbe7      	blt.n	800a556 <__gethex+0x456>
 800a586:	e7f0      	b.n	800a56a <__gethex+0x46a>
 800a588:	0800c28f 	.word	0x0800c28f

0800a58c <L_shift>:
 800a58c:	f1c2 0208 	rsb	r2, r2, #8
 800a590:	0092      	lsls	r2, r2, #2
 800a592:	b570      	push	{r4, r5, r6, lr}
 800a594:	f1c2 0620 	rsb	r6, r2, #32
 800a598:	6843      	ldr	r3, [r0, #4]
 800a59a:	6804      	ldr	r4, [r0, #0]
 800a59c:	fa03 f506 	lsl.w	r5, r3, r6
 800a5a0:	432c      	orrs	r4, r5
 800a5a2:	40d3      	lsrs	r3, r2
 800a5a4:	6004      	str	r4, [r0, #0]
 800a5a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a5aa:	4288      	cmp	r0, r1
 800a5ac:	d3f4      	bcc.n	800a598 <L_shift+0xc>
 800a5ae:	bd70      	pop	{r4, r5, r6, pc}

0800a5b0 <__match>:
 800a5b0:	b530      	push	{r4, r5, lr}
 800a5b2:	6803      	ldr	r3, [r0, #0]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5ba:	b914      	cbnz	r4, 800a5c2 <__match+0x12>
 800a5bc:	6003      	str	r3, [r0, #0]
 800a5be:	2001      	movs	r0, #1
 800a5c0:	bd30      	pop	{r4, r5, pc}
 800a5c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a5ca:	2d19      	cmp	r5, #25
 800a5cc:	bf98      	it	ls
 800a5ce:	3220      	addls	r2, #32
 800a5d0:	42a2      	cmp	r2, r4
 800a5d2:	d0f0      	beq.n	800a5b6 <__match+0x6>
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	e7f3      	b.n	800a5c0 <__match+0x10>

0800a5d8 <__hexnan>:
 800a5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5dc:	680b      	ldr	r3, [r1, #0]
 800a5de:	115e      	asrs	r6, r3, #5
 800a5e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a5e4:	f013 031f 	ands.w	r3, r3, #31
 800a5e8:	b087      	sub	sp, #28
 800a5ea:	bf18      	it	ne
 800a5ec:	3604      	addne	r6, #4
 800a5ee:	2500      	movs	r5, #0
 800a5f0:	1f37      	subs	r7, r6, #4
 800a5f2:	4690      	mov	r8, r2
 800a5f4:	6802      	ldr	r2, [r0, #0]
 800a5f6:	9301      	str	r3, [sp, #4]
 800a5f8:	4682      	mov	sl, r0
 800a5fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800a5fe:	46b9      	mov	r9, r7
 800a600:	463c      	mov	r4, r7
 800a602:	9502      	str	r5, [sp, #8]
 800a604:	46ab      	mov	fp, r5
 800a606:	7851      	ldrb	r1, [r2, #1]
 800a608:	1c53      	adds	r3, r2, #1
 800a60a:	9303      	str	r3, [sp, #12]
 800a60c:	b341      	cbz	r1, 800a660 <__hexnan+0x88>
 800a60e:	4608      	mov	r0, r1
 800a610:	9205      	str	r2, [sp, #20]
 800a612:	9104      	str	r1, [sp, #16]
 800a614:	f7ff fd5f 	bl	800a0d6 <__hexdig_fun>
 800a618:	2800      	cmp	r0, #0
 800a61a:	d14f      	bne.n	800a6bc <__hexnan+0xe4>
 800a61c:	9904      	ldr	r1, [sp, #16]
 800a61e:	9a05      	ldr	r2, [sp, #20]
 800a620:	2920      	cmp	r1, #32
 800a622:	d818      	bhi.n	800a656 <__hexnan+0x7e>
 800a624:	9b02      	ldr	r3, [sp, #8]
 800a626:	459b      	cmp	fp, r3
 800a628:	dd13      	ble.n	800a652 <__hexnan+0x7a>
 800a62a:	454c      	cmp	r4, r9
 800a62c:	d206      	bcs.n	800a63c <__hexnan+0x64>
 800a62e:	2d07      	cmp	r5, #7
 800a630:	dc04      	bgt.n	800a63c <__hexnan+0x64>
 800a632:	462a      	mov	r2, r5
 800a634:	4649      	mov	r1, r9
 800a636:	4620      	mov	r0, r4
 800a638:	f7ff ffa8 	bl	800a58c <L_shift>
 800a63c:	4544      	cmp	r4, r8
 800a63e:	d950      	bls.n	800a6e2 <__hexnan+0x10a>
 800a640:	2300      	movs	r3, #0
 800a642:	f1a4 0904 	sub.w	r9, r4, #4
 800a646:	f844 3c04 	str.w	r3, [r4, #-4]
 800a64a:	f8cd b008 	str.w	fp, [sp, #8]
 800a64e:	464c      	mov	r4, r9
 800a650:	461d      	mov	r5, r3
 800a652:	9a03      	ldr	r2, [sp, #12]
 800a654:	e7d7      	b.n	800a606 <__hexnan+0x2e>
 800a656:	2929      	cmp	r1, #41	; 0x29
 800a658:	d156      	bne.n	800a708 <__hexnan+0x130>
 800a65a:	3202      	adds	r2, #2
 800a65c:	f8ca 2000 	str.w	r2, [sl]
 800a660:	f1bb 0f00 	cmp.w	fp, #0
 800a664:	d050      	beq.n	800a708 <__hexnan+0x130>
 800a666:	454c      	cmp	r4, r9
 800a668:	d206      	bcs.n	800a678 <__hexnan+0xa0>
 800a66a:	2d07      	cmp	r5, #7
 800a66c:	dc04      	bgt.n	800a678 <__hexnan+0xa0>
 800a66e:	462a      	mov	r2, r5
 800a670:	4649      	mov	r1, r9
 800a672:	4620      	mov	r0, r4
 800a674:	f7ff ff8a 	bl	800a58c <L_shift>
 800a678:	4544      	cmp	r4, r8
 800a67a:	d934      	bls.n	800a6e6 <__hexnan+0x10e>
 800a67c:	f1a8 0204 	sub.w	r2, r8, #4
 800a680:	4623      	mov	r3, r4
 800a682:	f853 1b04 	ldr.w	r1, [r3], #4
 800a686:	f842 1f04 	str.w	r1, [r2, #4]!
 800a68a:	429f      	cmp	r7, r3
 800a68c:	d2f9      	bcs.n	800a682 <__hexnan+0xaa>
 800a68e:	1b3b      	subs	r3, r7, r4
 800a690:	f023 0303 	bic.w	r3, r3, #3
 800a694:	3304      	adds	r3, #4
 800a696:	3401      	adds	r4, #1
 800a698:	3e03      	subs	r6, #3
 800a69a:	42b4      	cmp	r4, r6
 800a69c:	bf88      	it	hi
 800a69e:	2304      	movhi	r3, #4
 800a6a0:	4443      	add	r3, r8
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f843 2b04 	str.w	r2, [r3], #4
 800a6a8:	429f      	cmp	r7, r3
 800a6aa:	d2fb      	bcs.n	800a6a4 <__hexnan+0xcc>
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	b91b      	cbnz	r3, 800a6b8 <__hexnan+0xe0>
 800a6b0:	4547      	cmp	r7, r8
 800a6b2:	d127      	bne.n	800a704 <__hexnan+0x12c>
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	603b      	str	r3, [r7, #0]
 800a6b8:	2005      	movs	r0, #5
 800a6ba:	e026      	b.n	800a70a <__hexnan+0x132>
 800a6bc:	3501      	adds	r5, #1
 800a6be:	2d08      	cmp	r5, #8
 800a6c0:	f10b 0b01 	add.w	fp, fp, #1
 800a6c4:	dd06      	ble.n	800a6d4 <__hexnan+0xfc>
 800a6c6:	4544      	cmp	r4, r8
 800a6c8:	d9c3      	bls.n	800a652 <__hexnan+0x7a>
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6d0:	2501      	movs	r5, #1
 800a6d2:	3c04      	subs	r4, #4
 800a6d4:	6822      	ldr	r2, [r4, #0]
 800a6d6:	f000 000f 	and.w	r0, r0, #15
 800a6da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a6de:	6022      	str	r2, [r4, #0]
 800a6e0:	e7b7      	b.n	800a652 <__hexnan+0x7a>
 800a6e2:	2508      	movs	r5, #8
 800a6e4:	e7b5      	b.n	800a652 <__hexnan+0x7a>
 800a6e6:	9b01      	ldr	r3, [sp, #4]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d0df      	beq.n	800a6ac <__hexnan+0xd4>
 800a6ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6f0:	f1c3 0320 	rsb	r3, r3, #32
 800a6f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a6f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a6fc:	401a      	ands	r2, r3
 800a6fe:	f846 2c04 	str.w	r2, [r6, #-4]
 800a702:	e7d3      	b.n	800a6ac <__hexnan+0xd4>
 800a704:	3f04      	subs	r7, #4
 800a706:	e7d1      	b.n	800a6ac <__hexnan+0xd4>
 800a708:	2004      	movs	r0, #4
 800a70a:	b007      	add	sp, #28
 800a70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a710 <_localeconv_r>:
 800a710:	4800      	ldr	r0, [pc, #0]	; (800a714 <_localeconv_r+0x4>)
 800a712:	4770      	bx	lr
 800a714:	20000164 	.word	0x20000164

0800a718 <__retarget_lock_init_recursive>:
 800a718:	4770      	bx	lr

0800a71a <__retarget_lock_acquire_recursive>:
 800a71a:	4770      	bx	lr

0800a71c <__retarget_lock_release_recursive>:
 800a71c:	4770      	bx	lr

0800a71e <__swhatbuf_r>:
 800a71e:	b570      	push	{r4, r5, r6, lr}
 800a720:	460e      	mov	r6, r1
 800a722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a726:	2900      	cmp	r1, #0
 800a728:	b096      	sub	sp, #88	; 0x58
 800a72a:	4614      	mov	r4, r2
 800a72c:	461d      	mov	r5, r3
 800a72e:	da08      	bge.n	800a742 <__swhatbuf_r+0x24>
 800a730:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	602a      	str	r2, [r5, #0]
 800a738:	061a      	lsls	r2, r3, #24
 800a73a:	d410      	bmi.n	800a75e <__swhatbuf_r+0x40>
 800a73c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a740:	e00e      	b.n	800a760 <__swhatbuf_r+0x42>
 800a742:	466a      	mov	r2, sp
 800a744:	f001 f836 	bl	800b7b4 <_fstat_r>
 800a748:	2800      	cmp	r0, #0
 800a74a:	dbf1      	blt.n	800a730 <__swhatbuf_r+0x12>
 800a74c:	9a01      	ldr	r2, [sp, #4]
 800a74e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a752:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a756:	425a      	negs	r2, r3
 800a758:	415a      	adcs	r2, r3
 800a75a:	602a      	str	r2, [r5, #0]
 800a75c:	e7ee      	b.n	800a73c <__swhatbuf_r+0x1e>
 800a75e:	2340      	movs	r3, #64	; 0x40
 800a760:	2000      	movs	r0, #0
 800a762:	6023      	str	r3, [r4, #0]
 800a764:	b016      	add	sp, #88	; 0x58
 800a766:	bd70      	pop	{r4, r5, r6, pc}

0800a768 <__smakebuf_r>:
 800a768:	898b      	ldrh	r3, [r1, #12]
 800a76a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a76c:	079d      	lsls	r5, r3, #30
 800a76e:	4606      	mov	r6, r0
 800a770:	460c      	mov	r4, r1
 800a772:	d507      	bpl.n	800a784 <__smakebuf_r+0x1c>
 800a774:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a778:	6023      	str	r3, [r4, #0]
 800a77a:	6123      	str	r3, [r4, #16]
 800a77c:	2301      	movs	r3, #1
 800a77e:	6163      	str	r3, [r4, #20]
 800a780:	b002      	add	sp, #8
 800a782:	bd70      	pop	{r4, r5, r6, pc}
 800a784:	ab01      	add	r3, sp, #4
 800a786:	466a      	mov	r2, sp
 800a788:	f7ff ffc9 	bl	800a71e <__swhatbuf_r>
 800a78c:	9900      	ldr	r1, [sp, #0]
 800a78e:	4605      	mov	r5, r0
 800a790:	4630      	mov	r0, r6
 800a792:	f000 fd87 	bl	800b2a4 <_malloc_r>
 800a796:	b948      	cbnz	r0, 800a7ac <__smakebuf_r+0x44>
 800a798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a79c:	059a      	lsls	r2, r3, #22
 800a79e:	d4ef      	bmi.n	800a780 <__smakebuf_r+0x18>
 800a7a0:	f023 0303 	bic.w	r3, r3, #3
 800a7a4:	f043 0302 	orr.w	r3, r3, #2
 800a7a8:	81a3      	strh	r3, [r4, #12]
 800a7aa:	e7e3      	b.n	800a774 <__smakebuf_r+0xc>
 800a7ac:	4b0d      	ldr	r3, [pc, #52]	; (800a7e4 <__smakebuf_r+0x7c>)
 800a7ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800a7b0:	89a3      	ldrh	r3, [r4, #12]
 800a7b2:	6020      	str	r0, [r4, #0]
 800a7b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7b8:	81a3      	strh	r3, [r4, #12]
 800a7ba:	9b00      	ldr	r3, [sp, #0]
 800a7bc:	6163      	str	r3, [r4, #20]
 800a7be:	9b01      	ldr	r3, [sp, #4]
 800a7c0:	6120      	str	r0, [r4, #16]
 800a7c2:	b15b      	cbz	r3, 800a7dc <__smakebuf_r+0x74>
 800a7c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	f001 f805 	bl	800b7d8 <_isatty_r>
 800a7ce:	b128      	cbz	r0, 800a7dc <__smakebuf_r+0x74>
 800a7d0:	89a3      	ldrh	r3, [r4, #12]
 800a7d2:	f023 0303 	bic.w	r3, r3, #3
 800a7d6:	f043 0301 	orr.w	r3, r3, #1
 800a7da:	81a3      	strh	r3, [r4, #12]
 800a7dc:	89a0      	ldrh	r0, [r4, #12]
 800a7de:	4305      	orrs	r5, r0
 800a7e0:	81a5      	strh	r5, [r4, #12]
 800a7e2:	e7cd      	b.n	800a780 <__smakebuf_r+0x18>
 800a7e4:	08009e91 	.word	0x08009e91

0800a7e8 <malloc>:
 800a7e8:	4b02      	ldr	r3, [pc, #8]	; (800a7f4 <malloc+0xc>)
 800a7ea:	4601      	mov	r1, r0
 800a7ec:	6818      	ldr	r0, [r3, #0]
 800a7ee:	f000 bd59 	b.w	800b2a4 <_malloc_r>
 800a7f2:	bf00      	nop
 800a7f4:	2000000c 	.word	0x2000000c

0800a7f8 <__ascii_mbtowc>:
 800a7f8:	b082      	sub	sp, #8
 800a7fa:	b901      	cbnz	r1, 800a7fe <__ascii_mbtowc+0x6>
 800a7fc:	a901      	add	r1, sp, #4
 800a7fe:	b142      	cbz	r2, 800a812 <__ascii_mbtowc+0x1a>
 800a800:	b14b      	cbz	r3, 800a816 <__ascii_mbtowc+0x1e>
 800a802:	7813      	ldrb	r3, [r2, #0]
 800a804:	600b      	str	r3, [r1, #0]
 800a806:	7812      	ldrb	r2, [r2, #0]
 800a808:	1e10      	subs	r0, r2, #0
 800a80a:	bf18      	it	ne
 800a80c:	2001      	movne	r0, #1
 800a80e:	b002      	add	sp, #8
 800a810:	4770      	bx	lr
 800a812:	4610      	mov	r0, r2
 800a814:	e7fb      	b.n	800a80e <__ascii_mbtowc+0x16>
 800a816:	f06f 0001 	mvn.w	r0, #1
 800a81a:	e7f8      	b.n	800a80e <__ascii_mbtowc+0x16>

0800a81c <_Balloc>:
 800a81c:	b570      	push	{r4, r5, r6, lr}
 800a81e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a820:	4604      	mov	r4, r0
 800a822:	460d      	mov	r5, r1
 800a824:	b976      	cbnz	r6, 800a844 <_Balloc+0x28>
 800a826:	2010      	movs	r0, #16
 800a828:	f7ff ffde 	bl	800a7e8 <malloc>
 800a82c:	4602      	mov	r2, r0
 800a82e:	6260      	str	r0, [r4, #36]	; 0x24
 800a830:	b920      	cbnz	r0, 800a83c <_Balloc+0x20>
 800a832:	4b18      	ldr	r3, [pc, #96]	; (800a894 <_Balloc+0x78>)
 800a834:	4818      	ldr	r0, [pc, #96]	; (800a898 <_Balloc+0x7c>)
 800a836:	2166      	movs	r1, #102	; 0x66
 800a838:	f000 ff7c 	bl	800b734 <__assert_func>
 800a83c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a840:	6006      	str	r6, [r0, #0]
 800a842:	60c6      	str	r6, [r0, #12]
 800a844:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a846:	68f3      	ldr	r3, [r6, #12]
 800a848:	b183      	cbz	r3, 800a86c <_Balloc+0x50>
 800a84a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a852:	b9b8      	cbnz	r0, 800a884 <_Balloc+0x68>
 800a854:	2101      	movs	r1, #1
 800a856:	fa01 f605 	lsl.w	r6, r1, r5
 800a85a:	1d72      	adds	r2, r6, #5
 800a85c:	0092      	lsls	r2, r2, #2
 800a85e:	4620      	mov	r0, r4
 800a860:	f000 fc9d 	bl	800b19e <_calloc_r>
 800a864:	b160      	cbz	r0, 800a880 <_Balloc+0x64>
 800a866:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a86a:	e00e      	b.n	800a88a <_Balloc+0x6e>
 800a86c:	2221      	movs	r2, #33	; 0x21
 800a86e:	2104      	movs	r1, #4
 800a870:	4620      	mov	r0, r4
 800a872:	f000 fc94 	bl	800b19e <_calloc_r>
 800a876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a878:	60f0      	str	r0, [r6, #12]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1e4      	bne.n	800a84a <_Balloc+0x2e>
 800a880:	2000      	movs	r0, #0
 800a882:	bd70      	pop	{r4, r5, r6, pc}
 800a884:	6802      	ldr	r2, [r0, #0]
 800a886:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a88a:	2300      	movs	r3, #0
 800a88c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a890:	e7f7      	b.n	800a882 <_Balloc+0x66>
 800a892:	bf00      	nop
 800a894:	0800c21d 	.word	0x0800c21d
 800a898:	0800c37c 	.word	0x0800c37c

0800a89c <_Bfree>:
 800a89c:	b570      	push	{r4, r5, r6, lr}
 800a89e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a8a0:	4605      	mov	r5, r0
 800a8a2:	460c      	mov	r4, r1
 800a8a4:	b976      	cbnz	r6, 800a8c4 <_Bfree+0x28>
 800a8a6:	2010      	movs	r0, #16
 800a8a8:	f7ff ff9e 	bl	800a7e8 <malloc>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	6268      	str	r0, [r5, #36]	; 0x24
 800a8b0:	b920      	cbnz	r0, 800a8bc <_Bfree+0x20>
 800a8b2:	4b09      	ldr	r3, [pc, #36]	; (800a8d8 <_Bfree+0x3c>)
 800a8b4:	4809      	ldr	r0, [pc, #36]	; (800a8dc <_Bfree+0x40>)
 800a8b6:	218a      	movs	r1, #138	; 0x8a
 800a8b8:	f000 ff3c 	bl	800b734 <__assert_func>
 800a8bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8c0:	6006      	str	r6, [r0, #0]
 800a8c2:	60c6      	str	r6, [r0, #12]
 800a8c4:	b13c      	cbz	r4, 800a8d6 <_Bfree+0x3a>
 800a8c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a8c8:	6862      	ldr	r2, [r4, #4]
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8d0:	6021      	str	r1, [r4, #0]
 800a8d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8d6:	bd70      	pop	{r4, r5, r6, pc}
 800a8d8:	0800c21d 	.word	0x0800c21d
 800a8dc:	0800c37c 	.word	0x0800c37c

0800a8e0 <__multadd>:
 800a8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e4:	690d      	ldr	r5, [r1, #16]
 800a8e6:	4607      	mov	r7, r0
 800a8e8:	460c      	mov	r4, r1
 800a8ea:	461e      	mov	r6, r3
 800a8ec:	f101 0c14 	add.w	ip, r1, #20
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	f8dc 3000 	ldr.w	r3, [ip]
 800a8f6:	b299      	uxth	r1, r3
 800a8f8:	fb02 6101 	mla	r1, r2, r1, r6
 800a8fc:	0c1e      	lsrs	r6, r3, #16
 800a8fe:	0c0b      	lsrs	r3, r1, #16
 800a900:	fb02 3306 	mla	r3, r2, r6, r3
 800a904:	b289      	uxth	r1, r1
 800a906:	3001      	adds	r0, #1
 800a908:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a90c:	4285      	cmp	r5, r0
 800a90e:	f84c 1b04 	str.w	r1, [ip], #4
 800a912:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a916:	dcec      	bgt.n	800a8f2 <__multadd+0x12>
 800a918:	b30e      	cbz	r6, 800a95e <__multadd+0x7e>
 800a91a:	68a3      	ldr	r3, [r4, #8]
 800a91c:	42ab      	cmp	r3, r5
 800a91e:	dc19      	bgt.n	800a954 <__multadd+0x74>
 800a920:	6861      	ldr	r1, [r4, #4]
 800a922:	4638      	mov	r0, r7
 800a924:	3101      	adds	r1, #1
 800a926:	f7ff ff79 	bl	800a81c <_Balloc>
 800a92a:	4680      	mov	r8, r0
 800a92c:	b928      	cbnz	r0, 800a93a <__multadd+0x5a>
 800a92e:	4602      	mov	r2, r0
 800a930:	4b0c      	ldr	r3, [pc, #48]	; (800a964 <__multadd+0x84>)
 800a932:	480d      	ldr	r0, [pc, #52]	; (800a968 <__multadd+0x88>)
 800a934:	21b5      	movs	r1, #181	; 0xb5
 800a936:	f000 fefd 	bl	800b734 <__assert_func>
 800a93a:	6922      	ldr	r2, [r4, #16]
 800a93c:	3202      	adds	r2, #2
 800a93e:	f104 010c 	add.w	r1, r4, #12
 800a942:	0092      	lsls	r2, r2, #2
 800a944:	300c      	adds	r0, #12
 800a946:	f7fc ff2f 	bl	80077a8 <memcpy>
 800a94a:	4621      	mov	r1, r4
 800a94c:	4638      	mov	r0, r7
 800a94e:	f7ff ffa5 	bl	800a89c <_Bfree>
 800a952:	4644      	mov	r4, r8
 800a954:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a958:	3501      	adds	r5, #1
 800a95a:	615e      	str	r6, [r3, #20]
 800a95c:	6125      	str	r5, [r4, #16]
 800a95e:	4620      	mov	r0, r4
 800a960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a964:	0800c28f 	.word	0x0800c28f
 800a968:	0800c37c 	.word	0x0800c37c

0800a96c <__s2b>:
 800a96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a970:	460c      	mov	r4, r1
 800a972:	4615      	mov	r5, r2
 800a974:	461f      	mov	r7, r3
 800a976:	2209      	movs	r2, #9
 800a978:	3308      	adds	r3, #8
 800a97a:	4606      	mov	r6, r0
 800a97c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a980:	2100      	movs	r1, #0
 800a982:	2201      	movs	r2, #1
 800a984:	429a      	cmp	r2, r3
 800a986:	db09      	blt.n	800a99c <__s2b+0x30>
 800a988:	4630      	mov	r0, r6
 800a98a:	f7ff ff47 	bl	800a81c <_Balloc>
 800a98e:	b940      	cbnz	r0, 800a9a2 <__s2b+0x36>
 800a990:	4602      	mov	r2, r0
 800a992:	4b19      	ldr	r3, [pc, #100]	; (800a9f8 <__s2b+0x8c>)
 800a994:	4819      	ldr	r0, [pc, #100]	; (800a9fc <__s2b+0x90>)
 800a996:	21ce      	movs	r1, #206	; 0xce
 800a998:	f000 fecc 	bl	800b734 <__assert_func>
 800a99c:	0052      	lsls	r2, r2, #1
 800a99e:	3101      	adds	r1, #1
 800a9a0:	e7f0      	b.n	800a984 <__s2b+0x18>
 800a9a2:	9b08      	ldr	r3, [sp, #32]
 800a9a4:	6143      	str	r3, [r0, #20]
 800a9a6:	2d09      	cmp	r5, #9
 800a9a8:	f04f 0301 	mov.w	r3, #1
 800a9ac:	6103      	str	r3, [r0, #16]
 800a9ae:	dd16      	ble.n	800a9de <__s2b+0x72>
 800a9b0:	f104 0909 	add.w	r9, r4, #9
 800a9b4:	46c8      	mov	r8, r9
 800a9b6:	442c      	add	r4, r5
 800a9b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a9bc:	4601      	mov	r1, r0
 800a9be:	3b30      	subs	r3, #48	; 0x30
 800a9c0:	220a      	movs	r2, #10
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	f7ff ff8c 	bl	800a8e0 <__multadd>
 800a9c8:	45a0      	cmp	r8, r4
 800a9ca:	d1f5      	bne.n	800a9b8 <__s2b+0x4c>
 800a9cc:	f1a5 0408 	sub.w	r4, r5, #8
 800a9d0:	444c      	add	r4, r9
 800a9d2:	1b2d      	subs	r5, r5, r4
 800a9d4:	1963      	adds	r3, r4, r5
 800a9d6:	42bb      	cmp	r3, r7
 800a9d8:	db04      	blt.n	800a9e4 <__s2b+0x78>
 800a9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9de:	340a      	adds	r4, #10
 800a9e0:	2509      	movs	r5, #9
 800a9e2:	e7f6      	b.n	800a9d2 <__s2b+0x66>
 800a9e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a9e8:	4601      	mov	r1, r0
 800a9ea:	3b30      	subs	r3, #48	; 0x30
 800a9ec:	220a      	movs	r2, #10
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	f7ff ff76 	bl	800a8e0 <__multadd>
 800a9f4:	e7ee      	b.n	800a9d4 <__s2b+0x68>
 800a9f6:	bf00      	nop
 800a9f8:	0800c28f 	.word	0x0800c28f
 800a9fc:	0800c37c 	.word	0x0800c37c

0800aa00 <__hi0bits>:
 800aa00:	0c03      	lsrs	r3, r0, #16
 800aa02:	041b      	lsls	r3, r3, #16
 800aa04:	b9d3      	cbnz	r3, 800aa3c <__hi0bits+0x3c>
 800aa06:	0400      	lsls	r0, r0, #16
 800aa08:	2310      	movs	r3, #16
 800aa0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aa0e:	bf04      	itt	eq
 800aa10:	0200      	lsleq	r0, r0, #8
 800aa12:	3308      	addeq	r3, #8
 800aa14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aa18:	bf04      	itt	eq
 800aa1a:	0100      	lsleq	r0, r0, #4
 800aa1c:	3304      	addeq	r3, #4
 800aa1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aa22:	bf04      	itt	eq
 800aa24:	0080      	lsleq	r0, r0, #2
 800aa26:	3302      	addeq	r3, #2
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	db05      	blt.n	800aa38 <__hi0bits+0x38>
 800aa2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aa30:	f103 0301 	add.w	r3, r3, #1
 800aa34:	bf08      	it	eq
 800aa36:	2320      	moveq	r3, #32
 800aa38:	4618      	mov	r0, r3
 800aa3a:	4770      	bx	lr
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	e7e4      	b.n	800aa0a <__hi0bits+0xa>

0800aa40 <__lo0bits>:
 800aa40:	6803      	ldr	r3, [r0, #0]
 800aa42:	f013 0207 	ands.w	r2, r3, #7
 800aa46:	4601      	mov	r1, r0
 800aa48:	d00b      	beq.n	800aa62 <__lo0bits+0x22>
 800aa4a:	07da      	lsls	r2, r3, #31
 800aa4c:	d423      	bmi.n	800aa96 <__lo0bits+0x56>
 800aa4e:	0798      	lsls	r0, r3, #30
 800aa50:	bf49      	itett	mi
 800aa52:	085b      	lsrmi	r3, r3, #1
 800aa54:	089b      	lsrpl	r3, r3, #2
 800aa56:	2001      	movmi	r0, #1
 800aa58:	600b      	strmi	r3, [r1, #0]
 800aa5a:	bf5c      	itt	pl
 800aa5c:	600b      	strpl	r3, [r1, #0]
 800aa5e:	2002      	movpl	r0, #2
 800aa60:	4770      	bx	lr
 800aa62:	b298      	uxth	r0, r3
 800aa64:	b9a8      	cbnz	r0, 800aa92 <__lo0bits+0x52>
 800aa66:	0c1b      	lsrs	r3, r3, #16
 800aa68:	2010      	movs	r0, #16
 800aa6a:	b2da      	uxtb	r2, r3
 800aa6c:	b90a      	cbnz	r2, 800aa72 <__lo0bits+0x32>
 800aa6e:	3008      	adds	r0, #8
 800aa70:	0a1b      	lsrs	r3, r3, #8
 800aa72:	071a      	lsls	r2, r3, #28
 800aa74:	bf04      	itt	eq
 800aa76:	091b      	lsreq	r3, r3, #4
 800aa78:	3004      	addeq	r0, #4
 800aa7a:	079a      	lsls	r2, r3, #30
 800aa7c:	bf04      	itt	eq
 800aa7e:	089b      	lsreq	r3, r3, #2
 800aa80:	3002      	addeq	r0, #2
 800aa82:	07da      	lsls	r2, r3, #31
 800aa84:	d403      	bmi.n	800aa8e <__lo0bits+0x4e>
 800aa86:	085b      	lsrs	r3, r3, #1
 800aa88:	f100 0001 	add.w	r0, r0, #1
 800aa8c:	d005      	beq.n	800aa9a <__lo0bits+0x5a>
 800aa8e:	600b      	str	r3, [r1, #0]
 800aa90:	4770      	bx	lr
 800aa92:	4610      	mov	r0, r2
 800aa94:	e7e9      	b.n	800aa6a <__lo0bits+0x2a>
 800aa96:	2000      	movs	r0, #0
 800aa98:	4770      	bx	lr
 800aa9a:	2020      	movs	r0, #32
 800aa9c:	4770      	bx	lr
	...

0800aaa0 <__i2b>:
 800aaa0:	b510      	push	{r4, lr}
 800aaa2:	460c      	mov	r4, r1
 800aaa4:	2101      	movs	r1, #1
 800aaa6:	f7ff feb9 	bl	800a81c <_Balloc>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	b928      	cbnz	r0, 800aaba <__i2b+0x1a>
 800aaae:	4b05      	ldr	r3, [pc, #20]	; (800aac4 <__i2b+0x24>)
 800aab0:	4805      	ldr	r0, [pc, #20]	; (800aac8 <__i2b+0x28>)
 800aab2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aab6:	f000 fe3d 	bl	800b734 <__assert_func>
 800aaba:	2301      	movs	r3, #1
 800aabc:	6144      	str	r4, [r0, #20]
 800aabe:	6103      	str	r3, [r0, #16]
 800aac0:	bd10      	pop	{r4, pc}
 800aac2:	bf00      	nop
 800aac4:	0800c28f 	.word	0x0800c28f
 800aac8:	0800c37c 	.word	0x0800c37c

0800aacc <__multiply>:
 800aacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad0:	4691      	mov	r9, r2
 800aad2:	690a      	ldr	r2, [r1, #16]
 800aad4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aad8:	429a      	cmp	r2, r3
 800aada:	bfb8      	it	lt
 800aadc:	460b      	movlt	r3, r1
 800aade:	460c      	mov	r4, r1
 800aae0:	bfbc      	itt	lt
 800aae2:	464c      	movlt	r4, r9
 800aae4:	4699      	movlt	r9, r3
 800aae6:	6927      	ldr	r7, [r4, #16]
 800aae8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aaec:	68a3      	ldr	r3, [r4, #8]
 800aaee:	6861      	ldr	r1, [r4, #4]
 800aaf0:	eb07 060a 	add.w	r6, r7, sl
 800aaf4:	42b3      	cmp	r3, r6
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	bfb8      	it	lt
 800aafa:	3101      	addlt	r1, #1
 800aafc:	f7ff fe8e 	bl	800a81c <_Balloc>
 800ab00:	b930      	cbnz	r0, 800ab10 <__multiply+0x44>
 800ab02:	4602      	mov	r2, r0
 800ab04:	4b44      	ldr	r3, [pc, #272]	; (800ac18 <__multiply+0x14c>)
 800ab06:	4845      	ldr	r0, [pc, #276]	; (800ac1c <__multiply+0x150>)
 800ab08:	f240 115d 	movw	r1, #349	; 0x15d
 800ab0c:	f000 fe12 	bl	800b734 <__assert_func>
 800ab10:	f100 0514 	add.w	r5, r0, #20
 800ab14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ab18:	462b      	mov	r3, r5
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	4543      	cmp	r3, r8
 800ab1e:	d321      	bcc.n	800ab64 <__multiply+0x98>
 800ab20:	f104 0314 	add.w	r3, r4, #20
 800ab24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ab28:	f109 0314 	add.w	r3, r9, #20
 800ab2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ab30:	9202      	str	r2, [sp, #8]
 800ab32:	1b3a      	subs	r2, r7, r4
 800ab34:	3a15      	subs	r2, #21
 800ab36:	f022 0203 	bic.w	r2, r2, #3
 800ab3a:	3204      	adds	r2, #4
 800ab3c:	f104 0115 	add.w	r1, r4, #21
 800ab40:	428f      	cmp	r7, r1
 800ab42:	bf38      	it	cc
 800ab44:	2204      	movcc	r2, #4
 800ab46:	9201      	str	r2, [sp, #4]
 800ab48:	9a02      	ldr	r2, [sp, #8]
 800ab4a:	9303      	str	r3, [sp, #12]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d80c      	bhi.n	800ab6a <__multiply+0x9e>
 800ab50:	2e00      	cmp	r6, #0
 800ab52:	dd03      	ble.n	800ab5c <__multiply+0x90>
 800ab54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d05a      	beq.n	800ac12 <__multiply+0x146>
 800ab5c:	6106      	str	r6, [r0, #16]
 800ab5e:	b005      	add	sp, #20
 800ab60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab64:	f843 2b04 	str.w	r2, [r3], #4
 800ab68:	e7d8      	b.n	800ab1c <__multiply+0x50>
 800ab6a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ab6e:	f1ba 0f00 	cmp.w	sl, #0
 800ab72:	d024      	beq.n	800abbe <__multiply+0xf2>
 800ab74:	f104 0e14 	add.w	lr, r4, #20
 800ab78:	46a9      	mov	r9, r5
 800ab7a:	f04f 0c00 	mov.w	ip, #0
 800ab7e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ab82:	f8d9 1000 	ldr.w	r1, [r9]
 800ab86:	fa1f fb82 	uxth.w	fp, r2
 800ab8a:	b289      	uxth	r1, r1
 800ab8c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ab90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ab94:	f8d9 2000 	ldr.w	r2, [r9]
 800ab98:	4461      	add	r1, ip
 800ab9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab9e:	fb0a c20b 	mla	r2, sl, fp, ip
 800aba2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aba6:	b289      	uxth	r1, r1
 800aba8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800abac:	4577      	cmp	r7, lr
 800abae:	f849 1b04 	str.w	r1, [r9], #4
 800abb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800abb6:	d8e2      	bhi.n	800ab7e <__multiply+0xb2>
 800abb8:	9a01      	ldr	r2, [sp, #4]
 800abba:	f845 c002 	str.w	ip, [r5, r2]
 800abbe:	9a03      	ldr	r2, [sp, #12]
 800abc0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800abc4:	3304      	adds	r3, #4
 800abc6:	f1b9 0f00 	cmp.w	r9, #0
 800abca:	d020      	beq.n	800ac0e <__multiply+0x142>
 800abcc:	6829      	ldr	r1, [r5, #0]
 800abce:	f104 0c14 	add.w	ip, r4, #20
 800abd2:	46ae      	mov	lr, r5
 800abd4:	f04f 0a00 	mov.w	sl, #0
 800abd8:	f8bc b000 	ldrh.w	fp, [ip]
 800abdc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800abe0:	fb09 220b 	mla	r2, r9, fp, r2
 800abe4:	4492      	add	sl, r2
 800abe6:	b289      	uxth	r1, r1
 800abe8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800abec:	f84e 1b04 	str.w	r1, [lr], #4
 800abf0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800abf4:	f8be 1000 	ldrh.w	r1, [lr]
 800abf8:	0c12      	lsrs	r2, r2, #16
 800abfa:	fb09 1102 	mla	r1, r9, r2, r1
 800abfe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ac02:	4567      	cmp	r7, ip
 800ac04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ac08:	d8e6      	bhi.n	800abd8 <__multiply+0x10c>
 800ac0a:	9a01      	ldr	r2, [sp, #4]
 800ac0c:	50a9      	str	r1, [r5, r2]
 800ac0e:	3504      	adds	r5, #4
 800ac10:	e79a      	b.n	800ab48 <__multiply+0x7c>
 800ac12:	3e01      	subs	r6, #1
 800ac14:	e79c      	b.n	800ab50 <__multiply+0x84>
 800ac16:	bf00      	nop
 800ac18:	0800c28f 	.word	0x0800c28f
 800ac1c:	0800c37c 	.word	0x0800c37c

0800ac20 <__pow5mult>:
 800ac20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac24:	4615      	mov	r5, r2
 800ac26:	f012 0203 	ands.w	r2, r2, #3
 800ac2a:	4606      	mov	r6, r0
 800ac2c:	460f      	mov	r7, r1
 800ac2e:	d007      	beq.n	800ac40 <__pow5mult+0x20>
 800ac30:	4c25      	ldr	r4, [pc, #148]	; (800acc8 <__pow5mult+0xa8>)
 800ac32:	3a01      	subs	r2, #1
 800ac34:	2300      	movs	r3, #0
 800ac36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac3a:	f7ff fe51 	bl	800a8e0 <__multadd>
 800ac3e:	4607      	mov	r7, r0
 800ac40:	10ad      	asrs	r5, r5, #2
 800ac42:	d03d      	beq.n	800acc0 <__pow5mult+0xa0>
 800ac44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ac46:	b97c      	cbnz	r4, 800ac68 <__pow5mult+0x48>
 800ac48:	2010      	movs	r0, #16
 800ac4a:	f7ff fdcd 	bl	800a7e8 <malloc>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	6270      	str	r0, [r6, #36]	; 0x24
 800ac52:	b928      	cbnz	r0, 800ac60 <__pow5mult+0x40>
 800ac54:	4b1d      	ldr	r3, [pc, #116]	; (800accc <__pow5mult+0xac>)
 800ac56:	481e      	ldr	r0, [pc, #120]	; (800acd0 <__pow5mult+0xb0>)
 800ac58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ac5c:	f000 fd6a 	bl	800b734 <__assert_func>
 800ac60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac64:	6004      	str	r4, [r0, #0]
 800ac66:	60c4      	str	r4, [r0, #12]
 800ac68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ac6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac70:	b94c      	cbnz	r4, 800ac86 <__pow5mult+0x66>
 800ac72:	f240 2171 	movw	r1, #625	; 0x271
 800ac76:	4630      	mov	r0, r6
 800ac78:	f7ff ff12 	bl	800aaa0 <__i2b>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac82:	4604      	mov	r4, r0
 800ac84:	6003      	str	r3, [r0, #0]
 800ac86:	f04f 0900 	mov.w	r9, #0
 800ac8a:	07eb      	lsls	r3, r5, #31
 800ac8c:	d50a      	bpl.n	800aca4 <__pow5mult+0x84>
 800ac8e:	4639      	mov	r1, r7
 800ac90:	4622      	mov	r2, r4
 800ac92:	4630      	mov	r0, r6
 800ac94:	f7ff ff1a 	bl	800aacc <__multiply>
 800ac98:	4639      	mov	r1, r7
 800ac9a:	4680      	mov	r8, r0
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	f7ff fdfd 	bl	800a89c <_Bfree>
 800aca2:	4647      	mov	r7, r8
 800aca4:	106d      	asrs	r5, r5, #1
 800aca6:	d00b      	beq.n	800acc0 <__pow5mult+0xa0>
 800aca8:	6820      	ldr	r0, [r4, #0]
 800acaa:	b938      	cbnz	r0, 800acbc <__pow5mult+0x9c>
 800acac:	4622      	mov	r2, r4
 800acae:	4621      	mov	r1, r4
 800acb0:	4630      	mov	r0, r6
 800acb2:	f7ff ff0b 	bl	800aacc <__multiply>
 800acb6:	6020      	str	r0, [r4, #0]
 800acb8:	f8c0 9000 	str.w	r9, [r0]
 800acbc:	4604      	mov	r4, r0
 800acbe:	e7e4      	b.n	800ac8a <__pow5mult+0x6a>
 800acc0:	4638      	mov	r0, r7
 800acc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acc6:	bf00      	nop
 800acc8:	0800c4c8 	.word	0x0800c4c8
 800accc:	0800c21d 	.word	0x0800c21d
 800acd0:	0800c37c 	.word	0x0800c37c

0800acd4 <__lshift>:
 800acd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acd8:	460c      	mov	r4, r1
 800acda:	6849      	ldr	r1, [r1, #4]
 800acdc:	6923      	ldr	r3, [r4, #16]
 800acde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ace2:	68a3      	ldr	r3, [r4, #8]
 800ace4:	4607      	mov	r7, r0
 800ace6:	4691      	mov	r9, r2
 800ace8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800acec:	f108 0601 	add.w	r6, r8, #1
 800acf0:	42b3      	cmp	r3, r6
 800acf2:	db0b      	blt.n	800ad0c <__lshift+0x38>
 800acf4:	4638      	mov	r0, r7
 800acf6:	f7ff fd91 	bl	800a81c <_Balloc>
 800acfa:	4605      	mov	r5, r0
 800acfc:	b948      	cbnz	r0, 800ad12 <__lshift+0x3e>
 800acfe:	4602      	mov	r2, r0
 800ad00:	4b2a      	ldr	r3, [pc, #168]	; (800adac <__lshift+0xd8>)
 800ad02:	482b      	ldr	r0, [pc, #172]	; (800adb0 <__lshift+0xdc>)
 800ad04:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ad08:	f000 fd14 	bl	800b734 <__assert_func>
 800ad0c:	3101      	adds	r1, #1
 800ad0e:	005b      	lsls	r3, r3, #1
 800ad10:	e7ee      	b.n	800acf0 <__lshift+0x1c>
 800ad12:	2300      	movs	r3, #0
 800ad14:	f100 0114 	add.w	r1, r0, #20
 800ad18:	f100 0210 	add.w	r2, r0, #16
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	4553      	cmp	r3, sl
 800ad20:	db37      	blt.n	800ad92 <__lshift+0xbe>
 800ad22:	6920      	ldr	r0, [r4, #16]
 800ad24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad28:	f104 0314 	add.w	r3, r4, #20
 800ad2c:	f019 091f 	ands.w	r9, r9, #31
 800ad30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ad38:	d02f      	beq.n	800ad9a <__lshift+0xc6>
 800ad3a:	f1c9 0e20 	rsb	lr, r9, #32
 800ad3e:	468a      	mov	sl, r1
 800ad40:	f04f 0c00 	mov.w	ip, #0
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	fa02 f209 	lsl.w	r2, r2, r9
 800ad4a:	ea42 020c 	orr.w	r2, r2, ip
 800ad4e:	f84a 2b04 	str.w	r2, [sl], #4
 800ad52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad56:	4298      	cmp	r0, r3
 800ad58:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ad5c:	d8f2      	bhi.n	800ad44 <__lshift+0x70>
 800ad5e:	1b03      	subs	r3, r0, r4
 800ad60:	3b15      	subs	r3, #21
 800ad62:	f023 0303 	bic.w	r3, r3, #3
 800ad66:	3304      	adds	r3, #4
 800ad68:	f104 0215 	add.w	r2, r4, #21
 800ad6c:	4290      	cmp	r0, r2
 800ad6e:	bf38      	it	cc
 800ad70:	2304      	movcc	r3, #4
 800ad72:	f841 c003 	str.w	ip, [r1, r3]
 800ad76:	f1bc 0f00 	cmp.w	ip, #0
 800ad7a:	d001      	beq.n	800ad80 <__lshift+0xac>
 800ad7c:	f108 0602 	add.w	r6, r8, #2
 800ad80:	3e01      	subs	r6, #1
 800ad82:	4638      	mov	r0, r7
 800ad84:	612e      	str	r6, [r5, #16]
 800ad86:	4621      	mov	r1, r4
 800ad88:	f7ff fd88 	bl	800a89c <_Bfree>
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad92:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad96:	3301      	adds	r3, #1
 800ad98:	e7c1      	b.n	800ad1e <__lshift+0x4a>
 800ad9a:	3904      	subs	r1, #4
 800ad9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ada0:	f841 2f04 	str.w	r2, [r1, #4]!
 800ada4:	4298      	cmp	r0, r3
 800ada6:	d8f9      	bhi.n	800ad9c <__lshift+0xc8>
 800ada8:	e7ea      	b.n	800ad80 <__lshift+0xac>
 800adaa:	bf00      	nop
 800adac:	0800c28f 	.word	0x0800c28f
 800adb0:	0800c37c 	.word	0x0800c37c

0800adb4 <__mcmp>:
 800adb4:	b530      	push	{r4, r5, lr}
 800adb6:	6902      	ldr	r2, [r0, #16]
 800adb8:	690c      	ldr	r4, [r1, #16]
 800adba:	1b12      	subs	r2, r2, r4
 800adbc:	d10e      	bne.n	800addc <__mcmp+0x28>
 800adbe:	f100 0314 	add.w	r3, r0, #20
 800adc2:	3114      	adds	r1, #20
 800adc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800adc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800adcc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800add0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800add4:	42a5      	cmp	r5, r4
 800add6:	d003      	beq.n	800ade0 <__mcmp+0x2c>
 800add8:	d305      	bcc.n	800ade6 <__mcmp+0x32>
 800adda:	2201      	movs	r2, #1
 800addc:	4610      	mov	r0, r2
 800adde:	bd30      	pop	{r4, r5, pc}
 800ade0:	4283      	cmp	r3, r0
 800ade2:	d3f3      	bcc.n	800adcc <__mcmp+0x18>
 800ade4:	e7fa      	b.n	800addc <__mcmp+0x28>
 800ade6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800adea:	e7f7      	b.n	800addc <__mcmp+0x28>

0800adec <__mdiff>:
 800adec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf0:	460c      	mov	r4, r1
 800adf2:	4606      	mov	r6, r0
 800adf4:	4611      	mov	r1, r2
 800adf6:	4620      	mov	r0, r4
 800adf8:	4690      	mov	r8, r2
 800adfa:	f7ff ffdb 	bl	800adb4 <__mcmp>
 800adfe:	1e05      	subs	r5, r0, #0
 800ae00:	d110      	bne.n	800ae24 <__mdiff+0x38>
 800ae02:	4629      	mov	r1, r5
 800ae04:	4630      	mov	r0, r6
 800ae06:	f7ff fd09 	bl	800a81c <_Balloc>
 800ae0a:	b930      	cbnz	r0, 800ae1a <__mdiff+0x2e>
 800ae0c:	4b3a      	ldr	r3, [pc, #232]	; (800aef8 <__mdiff+0x10c>)
 800ae0e:	4602      	mov	r2, r0
 800ae10:	f240 2132 	movw	r1, #562	; 0x232
 800ae14:	4839      	ldr	r0, [pc, #228]	; (800aefc <__mdiff+0x110>)
 800ae16:	f000 fc8d 	bl	800b734 <__assert_func>
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae24:	bfa4      	itt	ge
 800ae26:	4643      	movge	r3, r8
 800ae28:	46a0      	movge	r8, r4
 800ae2a:	4630      	mov	r0, r6
 800ae2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ae30:	bfa6      	itte	ge
 800ae32:	461c      	movge	r4, r3
 800ae34:	2500      	movge	r5, #0
 800ae36:	2501      	movlt	r5, #1
 800ae38:	f7ff fcf0 	bl	800a81c <_Balloc>
 800ae3c:	b920      	cbnz	r0, 800ae48 <__mdiff+0x5c>
 800ae3e:	4b2e      	ldr	r3, [pc, #184]	; (800aef8 <__mdiff+0x10c>)
 800ae40:	4602      	mov	r2, r0
 800ae42:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ae46:	e7e5      	b.n	800ae14 <__mdiff+0x28>
 800ae48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ae4c:	6926      	ldr	r6, [r4, #16]
 800ae4e:	60c5      	str	r5, [r0, #12]
 800ae50:	f104 0914 	add.w	r9, r4, #20
 800ae54:	f108 0514 	add.w	r5, r8, #20
 800ae58:	f100 0e14 	add.w	lr, r0, #20
 800ae5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ae60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ae64:	f108 0210 	add.w	r2, r8, #16
 800ae68:	46f2      	mov	sl, lr
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ae74:	fa1f f883 	uxth.w	r8, r3
 800ae78:	fa11 f18b 	uxtah	r1, r1, fp
 800ae7c:	0c1b      	lsrs	r3, r3, #16
 800ae7e:	eba1 0808 	sub.w	r8, r1, r8
 800ae82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ae86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ae8a:	fa1f f888 	uxth.w	r8, r8
 800ae8e:	1419      	asrs	r1, r3, #16
 800ae90:	454e      	cmp	r6, r9
 800ae92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ae96:	f84a 3b04 	str.w	r3, [sl], #4
 800ae9a:	d8e7      	bhi.n	800ae6c <__mdiff+0x80>
 800ae9c:	1b33      	subs	r3, r6, r4
 800ae9e:	3b15      	subs	r3, #21
 800aea0:	f023 0303 	bic.w	r3, r3, #3
 800aea4:	3304      	adds	r3, #4
 800aea6:	3415      	adds	r4, #21
 800aea8:	42a6      	cmp	r6, r4
 800aeaa:	bf38      	it	cc
 800aeac:	2304      	movcc	r3, #4
 800aeae:	441d      	add	r5, r3
 800aeb0:	4473      	add	r3, lr
 800aeb2:	469e      	mov	lr, r3
 800aeb4:	462e      	mov	r6, r5
 800aeb6:	4566      	cmp	r6, ip
 800aeb8:	d30e      	bcc.n	800aed8 <__mdiff+0xec>
 800aeba:	f10c 0203 	add.w	r2, ip, #3
 800aebe:	1b52      	subs	r2, r2, r5
 800aec0:	f022 0203 	bic.w	r2, r2, #3
 800aec4:	3d03      	subs	r5, #3
 800aec6:	45ac      	cmp	ip, r5
 800aec8:	bf38      	it	cc
 800aeca:	2200      	movcc	r2, #0
 800aecc:	441a      	add	r2, r3
 800aece:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aed2:	b17b      	cbz	r3, 800aef4 <__mdiff+0x108>
 800aed4:	6107      	str	r7, [r0, #16]
 800aed6:	e7a3      	b.n	800ae20 <__mdiff+0x34>
 800aed8:	f856 8b04 	ldr.w	r8, [r6], #4
 800aedc:	fa11 f288 	uxtah	r2, r1, r8
 800aee0:	1414      	asrs	r4, r2, #16
 800aee2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aee6:	b292      	uxth	r2, r2
 800aee8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aeec:	f84e 2b04 	str.w	r2, [lr], #4
 800aef0:	1421      	asrs	r1, r4, #16
 800aef2:	e7e0      	b.n	800aeb6 <__mdiff+0xca>
 800aef4:	3f01      	subs	r7, #1
 800aef6:	e7ea      	b.n	800aece <__mdiff+0xe2>
 800aef8:	0800c28f 	.word	0x0800c28f
 800aefc:	0800c37c 	.word	0x0800c37c

0800af00 <__ulp>:
 800af00:	b082      	sub	sp, #8
 800af02:	ed8d 0b00 	vstr	d0, [sp]
 800af06:	9b01      	ldr	r3, [sp, #4]
 800af08:	4912      	ldr	r1, [pc, #72]	; (800af54 <__ulp+0x54>)
 800af0a:	4019      	ands	r1, r3
 800af0c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800af10:	2900      	cmp	r1, #0
 800af12:	dd05      	ble.n	800af20 <__ulp+0x20>
 800af14:	2200      	movs	r2, #0
 800af16:	460b      	mov	r3, r1
 800af18:	ec43 2b10 	vmov	d0, r2, r3
 800af1c:	b002      	add	sp, #8
 800af1e:	4770      	bx	lr
 800af20:	4249      	negs	r1, r1
 800af22:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800af26:	ea4f 5021 	mov.w	r0, r1, asr #20
 800af2a:	f04f 0200 	mov.w	r2, #0
 800af2e:	f04f 0300 	mov.w	r3, #0
 800af32:	da04      	bge.n	800af3e <__ulp+0x3e>
 800af34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800af38:	fa41 f300 	asr.w	r3, r1, r0
 800af3c:	e7ec      	b.n	800af18 <__ulp+0x18>
 800af3e:	f1a0 0114 	sub.w	r1, r0, #20
 800af42:	291e      	cmp	r1, #30
 800af44:	bfda      	itte	le
 800af46:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800af4a:	fa20 f101 	lsrle.w	r1, r0, r1
 800af4e:	2101      	movgt	r1, #1
 800af50:	460a      	mov	r2, r1
 800af52:	e7e1      	b.n	800af18 <__ulp+0x18>
 800af54:	7ff00000 	.word	0x7ff00000

0800af58 <__b2d>:
 800af58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5a:	6905      	ldr	r5, [r0, #16]
 800af5c:	f100 0714 	add.w	r7, r0, #20
 800af60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800af64:	1f2e      	subs	r6, r5, #4
 800af66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800af6a:	4620      	mov	r0, r4
 800af6c:	f7ff fd48 	bl	800aa00 <__hi0bits>
 800af70:	f1c0 0320 	rsb	r3, r0, #32
 800af74:	280a      	cmp	r0, #10
 800af76:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800aff4 <__b2d+0x9c>
 800af7a:	600b      	str	r3, [r1, #0]
 800af7c:	dc14      	bgt.n	800afa8 <__b2d+0x50>
 800af7e:	f1c0 0e0b 	rsb	lr, r0, #11
 800af82:	fa24 f10e 	lsr.w	r1, r4, lr
 800af86:	42b7      	cmp	r7, r6
 800af88:	ea41 030c 	orr.w	r3, r1, ip
 800af8c:	bf34      	ite	cc
 800af8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800af92:	2100      	movcs	r1, #0
 800af94:	3015      	adds	r0, #21
 800af96:	fa04 f000 	lsl.w	r0, r4, r0
 800af9a:	fa21 f10e 	lsr.w	r1, r1, lr
 800af9e:	ea40 0201 	orr.w	r2, r0, r1
 800afa2:	ec43 2b10 	vmov	d0, r2, r3
 800afa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afa8:	42b7      	cmp	r7, r6
 800afaa:	bf3a      	itte	cc
 800afac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800afb0:	f1a5 0608 	subcc.w	r6, r5, #8
 800afb4:	2100      	movcs	r1, #0
 800afb6:	380b      	subs	r0, #11
 800afb8:	d017      	beq.n	800afea <__b2d+0x92>
 800afba:	f1c0 0c20 	rsb	ip, r0, #32
 800afbe:	fa04 f500 	lsl.w	r5, r4, r0
 800afc2:	42be      	cmp	r6, r7
 800afc4:	fa21 f40c 	lsr.w	r4, r1, ip
 800afc8:	ea45 0504 	orr.w	r5, r5, r4
 800afcc:	bf8c      	ite	hi
 800afce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800afd2:	2400      	movls	r4, #0
 800afd4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800afd8:	fa01 f000 	lsl.w	r0, r1, r0
 800afdc:	fa24 f40c 	lsr.w	r4, r4, ip
 800afe0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800afe4:	ea40 0204 	orr.w	r2, r0, r4
 800afe8:	e7db      	b.n	800afa2 <__b2d+0x4a>
 800afea:	ea44 030c 	orr.w	r3, r4, ip
 800afee:	460a      	mov	r2, r1
 800aff0:	e7d7      	b.n	800afa2 <__b2d+0x4a>
 800aff2:	bf00      	nop
 800aff4:	3ff00000 	.word	0x3ff00000

0800aff8 <__d2b>:
 800aff8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800affc:	4689      	mov	r9, r1
 800affe:	2101      	movs	r1, #1
 800b000:	ec57 6b10 	vmov	r6, r7, d0
 800b004:	4690      	mov	r8, r2
 800b006:	f7ff fc09 	bl	800a81c <_Balloc>
 800b00a:	4604      	mov	r4, r0
 800b00c:	b930      	cbnz	r0, 800b01c <__d2b+0x24>
 800b00e:	4602      	mov	r2, r0
 800b010:	4b25      	ldr	r3, [pc, #148]	; (800b0a8 <__d2b+0xb0>)
 800b012:	4826      	ldr	r0, [pc, #152]	; (800b0ac <__d2b+0xb4>)
 800b014:	f240 310a 	movw	r1, #778	; 0x30a
 800b018:	f000 fb8c 	bl	800b734 <__assert_func>
 800b01c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b020:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b024:	bb35      	cbnz	r5, 800b074 <__d2b+0x7c>
 800b026:	2e00      	cmp	r6, #0
 800b028:	9301      	str	r3, [sp, #4]
 800b02a:	d028      	beq.n	800b07e <__d2b+0x86>
 800b02c:	4668      	mov	r0, sp
 800b02e:	9600      	str	r6, [sp, #0]
 800b030:	f7ff fd06 	bl	800aa40 <__lo0bits>
 800b034:	9900      	ldr	r1, [sp, #0]
 800b036:	b300      	cbz	r0, 800b07a <__d2b+0x82>
 800b038:	9a01      	ldr	r2, [sp, #4]
 800b03a:	f1c0 0320 	rsb	r3, r0, #32
 800b03e:	fa02 f303 	lsl.w	r3, r2, r3
 800b042:	430b      	orrs	r3, r1
 800b044:	40c2      	lsrs	r2, r0
 800b046:	6163      	str	r3, [r4, #20]
 800b048:	9201      	str	r2, [sp, #4]
 800b04a:	9b01      	ldr	r3, [sp, #4]
 800b04c:	61a3      	str	r3, [r4, #24]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	bf14      	ite	ne
 800b052:	2202      	movne	r2, #2
 800b054:	2201      	moveq	r2, #1
 800b056:	6122      	str	r2, [r4, #16]
 800b058:	b1d5      	cbz	r5, 800b090 <__d2b+0x98>
 800b05a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b05e:	4405      	add	r5, r0
 800b060:	f8c9 5000 	str.w	r5, [r9]
 800b064:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b068:	f8c8 0000 	str.w	r0, [r8]
 800b06c:	4620      	mov	r0, r4
 800b06e:	b003      	add	sp, #12
 800b070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b074:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b078:	e7d5      	b.n	800b026 <__d2b+0x2e>
 800b07a:	6161      	str	r1, [r4, #20]
 800b07c:	e7e5      	b.n	800b04a <__d2b+0x52>
 800b07e:	a801      	add	r0, sp, #4
 800b080:	f7ff fcde 	bl	800aa40 <__lo0bits>
 800b084:	9b01      	ldr	r3, [sp, #4]
 800b086:	6163      	str	r3, [r4, #20]
 800b088:	2201      	movs	r2, #1
 800b08a:	6122      	str	r2, [r4, #16]
 800b08c:	3020      	adds	r0, #32
 800b08e:	e7e3      	b.n	800b058 <__d2b+0x60>
 800b090:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b094:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b098:	f8c9 0000 	str.w	r0, [r9]
 800b09c:	6918      	ldr	r0, [r3, #16]
 800b09e:	f7ff fcaf 	bl	800aa00 <__hi0bits>
 800b0a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b0a6:	e7df      	b.n	800b068 <__d2b+0x70>
 800b0a8:	0800c28f 	.word	0x0800c28f
 800b0ac:	0800c37c 	.word	0x0800c37c

0800b0b0 <__ratio>:
 800b0b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b4:	4688      	mov	r8, r1
 800b0b6:	4669      	mov	r1, sp
 800b0b8:	4681      	mov	r9, r0
 800b0ba:	f7ff ff4d 	bl	800af58 <__b2d>
 800b0be:	a901      	add	r1, sp, #4
 800b0c0:	4640      	mov	r0, r8
 800b0c2:	ec55 4b10 	vmov	r4, r5, d0
 800b0c6:	f7ff ff47 	bl	800af58 <__b2d>
 800b0ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b0ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b0d2:	eba3 0c02 	sub.w	ip, r3, r2
 800b0d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b0da:	1a9b      	subs	r3, r3, r2
 800b0dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b0e0:	ec51 0b10 	vmov	r0, r1, d0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	bfd6      	itet	le
 800b0e8:	460a      	movle	r2, r1
 800b0ea:	462a      	movgt	r2, r5
 800b0ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b0f0:	468b      	mov	fp, r1
 800b0f2:	462f      	mov	r7, r5
 800b0f4:	bfd4      	ite	le
 800b0f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b0fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b0fe:	4620      	mov	r0, r4
 800b100:	ee10 2a10 	vmov	r2, s0
 800b104:	465b      	mov	r3, fp
 800b106:	4639      	mov	r1, r7
 800b108:	f7f5 fba8 	bl	800085c <__aeabi_ddiv>
 800b10c:	ec41 0b10 	vmov	d0, r0, r1
 800b110:	b003      	add	sp, #12
 800b112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b116 <__copybits>:
 800b116:	3901      	subs	r1, #1
 800b118:	b570      	push	{r4, r5, r6, lr}
 800b11a:	1149      	asrs	r1, r1, #5
 800b11c:	6914      	ldr	r4, [r2, #16]
 800b11e:	3101      	adds	r1, #1
 800b120:	f102 0314 	add.w	r3, r2, #20
 800b124:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b128:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b12c:	1f05      	subs	r5, r0, #4
 800b12e:	42a3      	cmp	r3, r4
 800b130:	d30c      	bcc.n	800b14c <__copybits+0x36>
 800b132:	1aa3      	subs	r3, r4, r2
 800b134:	3b11      	subs	r3, #17
 800b136:	f023 0303 	bic.w	r3, r3, #3
 800b13a:	3211      	adds	r2, #17
 800b13c:	42a2      	cmp	r2, r4
 800b13e:	bf88      	it	hi
 800b140:	2300      	movhi	r3, #0
 800b142:	4418      	add	r0, r3
 800b144:	2300      	movs	r3, #0
 800b146:	4288      	cmp	r0, r1
 800b148:	d305      	bcc.n	800b156 <__copybits+0x40>
 800b14a:	bd70      	pop	{r4, r5, r6, pc}
 800b14c:	f853 6b04 	ldr.w	r6, [r3], #4
 800b150:	f845 6f04 	str.w	r6, [r5, #4]!
 800b154:	e7eb      	b.n	800b12e <__copybits+0x18>
 800b156:	f840 3b04 	str.w	r3, [r0], #4
 800b15a:	e7f4      	b.n	800b146 <__copybits+0x30>

0800b15c <__any_on>:
 800b15c:	f100 0214 	add.w	r2, r0, #20
 800b160:	6900      	ldr	r0, [r0, #16]
 800b162:	114b      	asrs	r3, r1, #5
 800b164:	4298      	cmp	r0, r3
 800b166:	b510      	push	{r4, lr}
 800b168:	db11      	blt.n	800b18e <__any_on+0x32>
 800b16a:	dd0a      	ble.n	800b182 <__any_on+0x26>
 800b16c:	f011 011f 	ands.w	r1, r1, #31
 800b170:	d007      	beq.n	800b182 <__any_on+0x26>
 800b172:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b176:	fa24 f001 	lsr.w	r0, r4, r1
 800b17a:	fa00 f101 	lsl.w	r1, r0, r1
 800b17e:	428c      	cmp	r4, r1
 800b180:	d10b      	bne.n	800b19a <__any_on+0x3e>
 800b182:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b186:	4293      	cmp	r3, r2
 800b188:	d803      	bhi.n	800b192 <__any_on+0x36>
 800b18a:	2000      	movs	r0, #0
 800b18c:	bd10      	pop	{r4, pc}
 800b18e:	4603      	mov	r3, r0
 800b190:	e7f7      	b.n	800b182 <__any_on+0x26>
 800b192:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b196:	2900      	cmp	r1, #0
 800b198:	d0f5      	beq.n	800b186 <__any_on+0x2a>
 800b19a:	2001      	movs	r0, #1
 800b19c:	e7f6      	b.n	800b18c <__any_on+0x30>

0800b19e <_calloc_r>:
 800b19e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1a0:	fba1 2402 	umull	r2, r4, r1, r2
 800b1a4:	b94c      	cbnz	r4, 800b1ba <_calloc_r+0x1c>
 800b1a6:	4611      	mov	r1, r2
 800b1a8:	9201      	str	r2, [sp, #4]
 800b1aa:	f000 f87b 	bl	800b2a4 <_malloc_r>
 800b1ae:	9a01      	ldr	r2, [sp, #4]
 800b1b0:	4605      	mov	r5, r0
 800b1b2:	b930      	cbnz	r0, 800b1c2 <_calloc_r+0x24>
 800b1b4:	4628      	mov	r0, r5
 800b1b6:	b003      	add	sp, #12
 800b1b8:	bd30      	pop	{r4, r5, pc}
 800b1ba:	220c      	movs	r2, #12
 800b1bc:	6002      	str	r2, [r0, #0]
 800b1be:	2500      	movs	r5, #0
 800b1c0:	e7f8      	b.n	800b1b4 <_calloc_r+0x16>
 800b1c2:	4621      	mov	r1, r4
 800b1c4:	f7fc fafe 	bl	80077c4 <memset>
 800b1c8:	e7f4      	b.n	800b1b4 <_calloc_r+0x16>
	...

0800b1cc <_free_r>:
 800b1cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1ce:	2900      	cmp	r1, #0
 800b1d0:	d044      	beq.n	800b25c <_free_r+0x90>
 800b1d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1d6:	9001      	str	r0, [sp, #4]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f1a1 0404 	sub.w	r4, r1, #4
 800b1de:	bfb8      	it	lt
 800b1e0:	18e4      	addlt	r4, r4, r3
 800b1e2:	f000 fb1b 	bl	800b81c <__malloc_lock>
 800b1e6:	4a1e      	ldr	r2, [pc, #120]	; (800b260 <_free_r+0x94>)
 800b1e8:	9801      	ldr	r0, [sp, #4]
 800b1ea:	6813      	ldr	r3, [r2, #0]
 800b1ec:	b933      	cbnz	r3, 800b1fc <_free_r+0x30>
 800b1ee:	6063      	str	r3, [r4, #4]
 800b1f0:	6014      	str	r4, [r2, #0]
 800b1f2:	b003      	add	sp, #12
 800b1f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1f8:	f000 bb16 	b.w	800b828 <__malloc_unlock>
 800b1fc:	42a3      	cmp	r3, r4
 800b1fe:	d908      	bls.n	800b212 <_free_r+0x46>
 800b200:	6825      	ldr	r5, [r4, #0]
 800b202:	1961      	adds	r1, r4, r5
 800b204:	428b      	cmp	r3, r1
 800b206:	bf01      	itttt	eq
 800b208:	6819      	ldreq	r1, [r3, #0]
 800b20a:	685b      	ldreq	r3, [r3, #4]
 800b20c:	1949      	addeq	r1, r1, r5
 800b20e:	6021      	streq	r1, [r4, #0]
 800b210:	e7ed      	b.n	800b1ee <_free_r+0x22>
 800b212:	461a      	mov	r2, r3
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	b10b      	cbz	r3, 800b21c <_free_r+0x50>
 800b218:	42a3      	cmp	r3, r4
 800b21a:	d9fa      	bls.n	800b212 <_free_r+0x46>
 800b21c:	6811      	ldr	r1, [r2, #0]
 800b21e:	1855      	adds	r5, r2, r1
 800b220:	42a5      	cmp	r5, r4
 800b222:	d10b      	bne.n	800b23c <_free_r+0x70>
 800b224:	6824      	ldr	r4, [r4, #0]
 800b226:	4421      	add	r1, r4
 800b228:	1854      	adds	r4, r2, r1
 800b22a:	42a3      	cmp	r3, r4
 800b22c:	6011      	str	r1, [r2, #0]
 800b22e:	d1e0      	bne.n	800b1f2 <_free_r+0x26>
 800b230:	681c      	ldr	r4, [r3, #0]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	6053      	str	r3, [r2, #4]
 800b236:	4421      	add	r1, r4
 800b238:	6011      	str	r1, [r2, #0]
 800b23a:	e7da      	b.n	800b1f2 <_free_r+0x26>
 800b23c:	d902      	bls.n	800b244 <_free_r+0x78>
 800b23e:	230c      	movs	r3, #12
 800b240:	6003      	str	r3, [r0, #0]
 800b242:	e7d6      	b.n	800b1f2 <_free_r+0x26>
 800b244:	6825      	ldr	r5, [r4, #0]
 800b246:	1961      	adds	r1, r4, r5
 800b248:	428b      	cmp	r3, r1
 800b24a:	bf04      	itt	eq
 800b24c:	6819      	ldreq	r1, [r3, #0]
 800b24e:	685b      	ldreq	r3, [r3, #4]
 800b250:	6063      	str	r3, [r4, #4]
 800b252:	bf04      	itt	eq
 800b254:	1949      	addeq	r1, r1, r5
 800b256:	6021      	streq	r1, [r4, #0]
 800b258:	6054      	str	r4, [r2, #4]
 800b25a:	e7ca      	b.n	800b1f2 <_free_r+0x26>
 800b25c:	b003      	add	sp, #12
 800b25e:	bd30      	pop	{r4, r5, pc}
 800b260:	200008f4 	.word	0x200008f4

0800b264 <sbrk_aligned>:
 800b264:	b570      	push	{r4, r5, r6, lr}
 800b266:	4e0e      	ldr	r6, [pc, #56]	; (800b2a0 <sbrk_aligned+0x3c>)
 800b268:	460c      	mov	r4, r1
 800b26a:	6831      	ldr	r1, [r6, #0]
 800b26c:	4605      	mov	r5, r0
 800b26e:	b911      	cbnz	r1, 800b276 <sbrk_aligned+0x12>
 800b270:	f000 f9ee 	bl	800b650 <_sbrk_r>
 800b274:	6030      	str	r0, [r6, #0]
 800b276:	4621      	mov	r1, r4
 800b278:	4628      	mov	r0, r5
 800b27a:	f000 f9e9 	bl	800b650 <_sbrk_r>
 800b27e:	1c43      	adds	r3, r0, #1
 800b280:	d00a      	beq.n	800b298 <sbrk_aligned+0x34>
 800b282:	1cc4      	adds	r4, r0, #3
 800b284:	f024 0403 	bic.w	r4, r4, #3
 800b288:	42a0      	cmp	r0, r4
 800b28a:	d007      	beq.n	800b29c <sbrk_aligned+0x38>
 800b28c:	1a21      	subs	r1, r4, r0
 800b28e:	4628      	mov	r0, r5
 800b290:	f000 f9de 	bl	800b650 <_sbrk_r>
 800b294:	3001      	adds	r0, #1
 800b296:	d101      	bne.n	800b29c <sbrk_aligned+0x38>
 800b298:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b29c:	4620      	mov	r0, r4
 800b29e:	bd70      	pop	{r4, r5, r6, pc}
 800b2a0:	200008f8 	.word	0x200008f8

0800b2a4 <_malloc_r>:
 800b2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a8:	1ccd      	adds	r5, r1, #3
 800b2aa:	f025 0503 	bic.w	r5, r5, #3
 800b2ae:	3508      	adds	r5, #8
 800b2b0:	2d0c      	cmp	r5, #12
 800b2b2:	bf38      	it	cc
 800b2b4:	250c      	movcc	r5, #12
 800b2b6:	2d00      	cmp	r5, #0
 800b2b8:	4607      	mov	r7, r0
 800b2ba:	db01      	blt.n	800b2c0 <_malloc_r+0x1c>
 800b2bc:	42a9      	cmp	r1, r5
 800b2be:	d905      	bls.n	800b2cc <_malloc_r+0x28>
 800b2c0:	230c      	movs	r3, #12
 800b2c2:	603b      	str	r3, [r7, #0]
 800b2c4:	2600      	movs	r6, #0
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2cc:	4e2e      	ldr	r6, [pc, #184]	; (800b388 <_malloc_r+0xe4>)
 800b2ce:	f000 faa5 	bl	800b81c <__malloc_lock>
 800b2d2:	6833      	ldr	r3, [r6, #0]
 800b2d4:	461c      	mov	r4, r3
 800b2d6:	bb34      	cbnz	r4, 800b326 <_malloc_r+0x82>
 800b2d8:	4629      	mov	r1, r5
 800b2da:	4638      	mov	r0, r7
 800b2dc:	f7ff ffc2 	bl	800b264 <sbrk_aligned>
 800b2e0:	1c43      	adds	r3, r0, #1
 800b2e2:	4604      	mov	r4, r0
 800b2e4:	d14d      	bne.n	800b382 <_malloc_r+0xde>
 800b2e6:	6834      	ldr	r4, [r6, #0]
 800b2e8:	4626      	mov	r6, r4
 800b2ea:	2e00      	cmp	r6, #0
 800b2ec:	d140      	bne.n	800b370 <_malloc_r+0xcc>
 800b2ee:	6823      	ldr	r3, [r4, #0]
 800b2f0:	4631      	mov	r1, r6
 800b2f2:	4638      	mov	r0, r7
 800b2f4:	eb04 0803 	add.w	r8, r4, r3
 800b2f8:	f000 f9aa 	bl	800b650 <_sbrk_r>
 800b2fc:	4580      	cmp	r8, r0
 800b2fe:	d13a      	bne.n	800b376 <_malloc_r+0xd2>
 800b300:	6821      	ldr	r1, [r4, #0]
 800b302:	3503      	adds	r5, #3
 800b304:	1a6d      	subs	r5, r5, r1
 800b306:	f025 0503 	bic.w	r5, r5, #3
 800b30a:	3508      	adds	r5, #8
 800b30c:	2d0c      	cmp	r5, #12
 800b30e:	bf38      	it	cc
 800b310:	250c      	movcc	r5, #12
 800b312:	4629      	mov	r1, r5
 800b314:	4638      	mov	r0, r7
 800b316:	f7ff ffa5 	bl	800b264 <sbrk_aligned>
 800b31a:	3001      	adds	r0, #1
 800b31c:	d02b      	beq.n	800b376 <_malloc_r+0xd2>
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	442b      	add	r3, r5
 800b322:	6023      	str	r3, [r4, #0]
 800b324:	e00e      	b.n	800b344 <_malloc_r+0xa0>
 800b326:	6822      	ldr	r2, [r4, #0]
 800b328:	1b52      	subs	r2, r2, r5
 800b32a:	d41e      	bmi.n	800b36a <_malloc_r+0xc6>
 800b32c:	2a0b      	cmp	r2, #11
 800b32e:	d916      	bls.n	800b35e <_malloc_r+0xba>
 800b330:	1961      	adds	r1, r4, r5
 800b332:	42a3      	cmp	r3, r4
 800b334:	6025      	str	r5, [r4, #0]
 800b336:	bf18      	it	ne
 800b338:	6059      	strne	r1, [r3, #4]
 800b33a:	6863      	ldr	r3, [r4, #4]
 800b33c:	bf08      	it	eq
 800b33e:	6031      	streq	r1, [r6, #0]
 800b340:	5162      	str	r2, [r4, r5]
 800b342:	604b      	str	r3, [r1, #4]
 800b344:	4638      	mov	r0, r7
 800b346:	f104 060b 	add.w	r6, r4, #11
 800b34a:	f000 fa6d 	bl	800b828 <__malloc_unlock>
 800b34e:	f026 0607 	bic.w	r6, r6, #7
 800b352:	1d23      	adds	r3, r4, #4
 800b354:	1af2      	subs	r2, r6, r3
 800b356:	d0b6      	beq.n	800b2c6 <_malloc_r+0x22>
 800b358:	1b9b      	subs	r3, r3, r6
 800b35a:	50a3      	str	r3, [r4, r2]
 800b35c:	e7b3      	b.n	800b2c6 <_malloc_r+0x22>
 800b35e:	6862      	ldr	r2, [r4, #4]
 800b360:	42a3      	cmp	r3, r4
 800b362:	bf0c      	ite	eq
 800b364:	6032      	streq	r2, [r6, #0]
 800b366:	605a      	strne	r2, [r3, #4]
 800b368:	e7ec      	b.n	800b344 <_malloc_r+0xa0>
 800b36a:	4623      	mov	r3, r4
 800b36c:	6864      	ldr	r4, [r4, #4]
 800b36e:	e7b2      	b.n	800b2d6 <_malloc_r+0x32>
 800b370:	4634      	mov	r4, r6
 800b372:	6876      	ldr	r6, [r6, #4]
 800b374:	e7b9      	b.n	800b2ea <_malloc_r+0x46>
 800b376:	230c      	movs	r3, #12
 800b378:	603b      	str	r3, [r7, #0]
 800b37a:	4638      	mov	r0, r7
 800b37c:	f000 fa54 	bl	800b828 <__malloc_unlock>
 800b380:	e7a1      	b.n	800b2c6 <_malloc_r+0x22>
 800b382:	6025      	str	r5, [r4, #0]
 800b384:	e7de      	b.n	800b344 <_malloc_r+0xa0>
 800b386:	bf00      	nop
 800b388:	200008f4 	.word	0x200008f4

0800b38c <__sfputc_r>:
 800b38c:	6893      	ldr	r3, [r2, #8]
 800b38e:	3b01      	subs	r3, #1
 800b390:	2b00      	cmp	r3, #0
 800b392:	b410      	push	{r4}
 800b394:	6093      	str	r3, [r2, #8]
 800b396:	da08      	bge.n	800b3aa <__sfputc_r+0x1e>
 800b398:	6994      	ldr	r4, [r2, #24]
 800b39a:	42a3      	cmp	r3, r4
 800b39c:	db01      	blt.n	800b3a2 <__sfputc_r+0x16>
 800b39e:	290a      	cmp	r1, #10
 800b3a0:	d103      	bne.n	800b3aa <__sfputc_r+0x1e>
 800b3a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3a6:	f7fd bd51 	b.w	8008e4c <__swbuf_r>
 800b3aa:	6813      	ldr	r3, [r2, #0]
 800b3ac:	1c58      	adds	r0, r3, #1
 800b3ae:	6010      	str	r0, [r2, #0]
 800b3b0:	7019      	strb	r1, [r3, #0]
 800b3b2:	4608      	mov	r0, r1
 800b3b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3b8:	4770      	bx	lr

0800b3ba <__sfputs_r>:
 800b3ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3bc:	4606      	mov	r6, r0
 800b3be:	460f      	mov	r7, r1
 800b3c0:	4614      	mov	r4, r2
 800b3c2:	18d5      	adds	r5, r2, r3
 800b3c4:	42ac      	cmp	r4, r5
 800b3c6:	d101      	bne.n	800b3cc <__sfputs_r+0x12>
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	e007      	b.n	800b3dc <__sfputs_r+0x22>
 800b3cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3d0:	463a      	mov	r2, r7
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	f7ff ffda 	bl	800b38c <__sfputc_r>
 800b3d8:	1c43      	adds	r3, r0, #1
 800b3da:	d1f3      	bne.n	800b3c4 <__sfputs_r+0xa>
 800b3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3e0 <_vfiprintf_r>:
 800b3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e4:	460d      	mov	r5, r1
 800b3e6:	b09d      	sub	sp, #116	; 0x74
 800b3e8:	4614      	mov	r4, r2
 800b3ea:	4698      	mov	r8, r3
 800b3ec:	4606      	mov	r6, r0
 800b3ee:	b118      	cbz	r0, 800b3f8 <_vfiprintf_r+0x18>
 800b3f0:	6983      	ldr	r3, [r0, #24]
 800b3f2:	b90b      	cbnz	r3, 800b3f8 <_vfiprintf_r+0x18>
 800b3f4:	f7fe fd80 	bl	8009ef8 <__sinit>
 800b3f8:	4b89      	ldr	r3, [pc, #548]	; (800b620 <_vfiprintf_r+0x240>)
 800b3fa:	429d      	cmp	r5, r3
 800b3fc:	d11b      	bne.n	800b436 <_vfiprintf_r+0x56>
 800b3fe:	6875      	ldr	r5, [r6, #4]
 800b400:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b402:	07d9      	lsls	r1, r3, #31
 800b404:	d405      	bmi.n	800b412 <_vfiprintf_r+0x32>
 800b406:	89ab      	ldrh	r3, [r5, #12]
 800b408:	059a      	lsls	r2, r3, #22
 800b40a:	d402      	bmi.n	800b412 <_vfiprintf_r+0x32>
 800b40c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b40e:	f7ff f984 	bl	800a71a <__retarget_lock_acquire_recursive>
 800b412:	89ab      	ldrh	r3, [r5, #12]
 800b414:	071b      	lsls	r3, r3, #28
 800b416:	d501      	bpl.n	800b41c <_vfiprintf_r+0x3c>
 800b418:	692b      	ldr	r3, [r5, #16]
 800b41a:	b9eb      	cbnz	r3, 800b458 <_vfiprintf_r+0x78>
 800b41c:	4629      	mov	r1, r5
 800b41e:	4630      	mov	r0, r6
 800b420:	f7fd fd66 	bl	8008ef0 <__swsetup_r>
 800b424:	b1c0      	cbz	r0, 800b458 <_vfiprintf_r+0x78>
 800b426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b428:	07dc      	lsls	r4, r3, #31
 800b42a:	d50e      	bpl.n	800b44a <_vfiprintf_r+0x6a>
 800b42c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b430:	b01d      	add	sp, #116	; 0x74
 800b432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b436:	4b7b      	ldr	r3, [pc, #492]	; (800b624 <_vfiprintf_r+0x244>)
 800b438:	429d      	cmp	r5, r3
 800b43a:	d101      	bne.n	800b440 <_vfiprintf_r+0x60>
 800b43c:	68b5      	ldr	r5, [r6, #8]
 800b43e:	e7df      	b.n	800b400 <_vfiprintf_r+0x20>
 800b440:	4b79      	ldr	r3, [pc, #484]	; (800b628 <_vfiprintf_r+0x248>)
 800b442:	429d      	cmp	r5, r3
 800b444:	bf08      	it	eq
 800b446:	68f5      	ldreq	r5, [r6, #12]
 800b448:	e7da      	b.n	800b400 <_vfiprintf_r+0x20>
 800b44a:	89ab      	ldrh	r3, [r5, #12]
 800b44c:	0598      	lsls	r0, r3, #22
 800b44e:	d4ed      	bmi.n	800b42c <_vfiprintf_r+0x4c>
 800b450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b452:	f7ff f963 	bl	800a71c <__retarget_lock_release_recursive>
 800b456:	e7e9      	b.n	800b42c <_vfiprintf_r+0x4c>
 800b458:	2300      	movs	r3, #0
 800b45a:	9309      	str	r3, [sp, #36]	; 0x24
 800b45c:	2320      	movs	r3, #32
 800b45e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b462:	f8cd 800c 	str.w	r8, [sp, #12]
 800b466:	2330      	movs	r3, #48	; 0x30
 800b468:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b62c <_vfiprintf_r+0x24c>
 800b46c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b470:	f04f 0901 	mov.w	r9, #1
 800b474:	4623      	mov	r3, r4
 800b476:	469a      	mov	sl, r3
 800b478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b47c:	b10a      	cbz	r2, 800b482 <_vfiprintf_r+0xa2>
 800b47e:	2a25      	cmp	r2, #37	; 0x25
 800b480:	d1f9      	bne.n	800b476 <_vfiprintf_r+0x96>
 800b482:	ebba 0b04 	subs.w	fp, sl, r4
 800b486:	d00b      	beq.n	800b4a0 <_vfiprintf_r+0xc0>
 800b488:	465b      	mov	r3, fp
 800b48a:	4622      	mov	r2, r4
 800b48c:	4629      	mov	r1, r5
 800b48e:	4630      	mov	r0, r6
 800b490:	f7ff ff93 	bl	800b3ba <__sfputs_r>
 800b494:	3001      	adds	r0, #1
 800b496:	f000 80aa 	beq.w	800b5ee <_vfiprintf_r+0x20e>
 800b49a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b49c:	445a      	add	r2, fp
 800b49e:	9209      	str	r2, [sp, #36]	; 0x24
 800b4a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	f000 80a2 	beq.w	800b5ee <_vfiprintf_r+0x20e>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4b4:	f10a 0a01 	add.w	sl, sl, #1
 800b4b8:	9304      	str	r3, [sp, #16]
 800b4ba:	9307      	str	r3, [sp, #28]
 800b4bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4c0:	931a      	str	r3, [sp, #104]	; 0x68
 800b4c2:	4654      	mov	r4, sl
 800b4c4:	2205      	movs	r2, #5
 800b4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ca:	4858      	ldr	r0, [pc, #352]	; (800b62c <_vfiprintf_r+0x24c>)
 800b4cc:	f7f4 fe90 	bl	80001f0 <memchr>
 800b4d0:	9a04      	ldr	r2, [sp, #16]
 800b4d2:	b9d8      	cbnz	r0, 800b50c <_vfiprintf_r+0x12c>
 800b4d4:	06d1      	lsls	r1, r2, #27
 800b4d6:	bf44      	itt	mi
 800b4d8:	2320      	movmi	r3, #32
 800b4da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4de:	0713      	lsls	r3, r2, #28
 800b4e0:	bf44      	itt	mi
 800b4e2:	232b      	movmi	r3, #43	; 0x2b
 800b4e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4e8:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ec:	2b2a      	cmp	r3, #42	; 0x2a
 800b4ee:	d015      	beq.n	800b51c <_vfiprintf_r+0x13c>
 800b4f0:	9a07      	ldr	r2, [sp, #28]
 800b4f2:	4654      	mov	r4, sl
 800b4f4:	2000      	movs	r0, #0
 800b4f6:	f04f 0c0a 	mov.w	ip, #10
 800b4fa:	4621      	mov	r1, r4
 800b4fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b500:	3b30      	subs	r3, #48	; 0x30
 800b502:	2b09      	cmp	r3, #9
 800b504:	d94e      	bls.n	800b5a4 <_vfiprintf_r+0x1c4>
 800b506:	b1b0      	cbz	r0, 800b536 <_vfiprintf_r+0x156>
 800b508:	9207      	str	r2, [sp, #28]
 800b50a:	e014      	b.n	800b536 <_vfiprintf_r+0x156>
 800b50c:	eba0 0308 	sub.w	r3, r0, r8
 800b510:	fa09 f303 	lsl.w	r3, r9, r3
 800b514:	4313      	orrs	r3, r2
 800b516:	9304      	str	r3, [sp, #16]
 800b518:	46a2      	mov	sl, r4
 800b51a:	e7d2      	b.n	800b4c2 <_vfiprintf_r+0xe2>
 800b51c:	9b03      	ldr	r3, [sp, #12]
 800b51e:	1d19      	adds	r1, r3, #4
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	9103      	str	r1, [sp, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	bfbb      	ittet	lt
 800b528:	425b      	neglt	r3, r3
 800b52a:	f042 0202 	orrlt.w	r2, r2, #2
 800b52e:	9307      	strge	r3, [sp, #28]
 800b530:	9307      	strlt	r3, [sp, #28]
 800b532:	bfb8      	it	lt
 800b534:	9204      	strlt	r2, [sp, #16]
 800b536:	7823      	ldrb	r3, [r4, #0]
 800b538:	2b2e      	cmp	r3, #46	; 0x2e
 800b53a:	d10c      	bne.n	800b556 <_vfiprintf_r+0x176>
 800b53c:	7863      	ldrb	r3, [r4, #1]
 800b53e:	2b2a      	cmp	r3, #42	; 0x2a
 800b540:	d135      	bne.n	800b5ae <_vfiprintf_r+0x1ce>
 800b542:	9b03      	ldr	r3, [sp, #12]
 800b544:	1d1a      	adds	r2, r3, #4
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	9203      	str	r2, [sp, #12]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	bfb8      	it	lt
 800b54e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b552:	3402      	adds	r4, #2
 800b554:	9305      	str	r3, [sp, #20]
 800b556:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b63c <_vfiprintf_r+0x25c>
 800b55a:	7821      	ldrb	r1, [r4, #0]
 800b55c:	2203      	movs	r2, #3
 800b55e:	4650      	mov	r0, sl
 800b560:	f7f4 fe46 	bl	80001f0 <memchr>
 800b564:	b140      	cbz	r0, 800b578 <_vfiprintf_r+0x198>
 800b566:	2340      	movs	r3, #64	; 0x40
 800b568:	eba0 000a 	sub.w	r0, r0, sl
 800b56c:	fa03 f000 	lsl.w	r0, r3, r0
 800b570:	9b04      	ldr	r3, [sp, #16]
 800b572:	4303      	orrs	r3, r0
 800b574:	3401      	adds	r4, #1
 800b576:	9304      	str	r3, [sp, #16]
 800b578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b57c:	482c      	ldr	r0, [pc, #176]	; (800b630 <_vfiprintf_r+0x250>)
 800b57e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b582:	2206      	movs	r2, #6
 800b584:	f7f4 fe34 	bl	80001f0 <memchr>
 800b588:	2800      	cmp	r0, #0
 800b58a:	d03f      	beq.n	800b60c <_vfiprintf_r+0x22c>
 800b58c:	4b29      	ldr	r3, [pc, #164]	; (800b634 <_vfiprintf_r+0x254>)
 800b58e:	bb1b      	cbnz	r3, 800b5d8 <_vfiprintf_r+0x1f8>
 800b590:	9b03      	ldr	r3, [sp, #12]
 800b592:	3307      	adds	r3, #7
 800b594:	f023 0307 	bic.w	r3, r3, #7
 800b598:	3308      	adds	r3, #8
 800b59a:	9303      	str	r3, [sp, #12]
 800b59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b59e:	443b      	add	r3, r7
 800b5a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b5a2:	e767      	b.n	800b474 <_vfiprintf_r+0x94>
 800b5a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5a8:	460c      	mov	r4, r1
 800b5aa:	2001      	movs	r0, #1
 800b5ac:	e7a5      	b.n	800b4fa <_vfiprintf_r+0x11a>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	3401      	adds	r4, #1
 800b5b2:	9305      	str	r3, [sp, #20]
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	f04f 0c0a 	mov.w	ip, #10
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5c0:	3a30      	subs	r2, #48	; 0x30
 800b5c2:	2a09      	cmp	r2, #9
 800b5c4:	d903      	bls.n	800b5ce <_vfiprintf_r+0x1ee>
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d0c5      	beq.n	800b556 <_vfiprintf_r+0x176>
 800b5ca:	9105      	str	r1, [sp, #20]
 800b5cc:	e7c3      	b.n	800b556 <_vfiprintf_r+0x176>
 800b5ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e7f0      	b.n	800b5ba <_vfiprintf_r+0x1da>
 800b5d8:	ab03      	add	r3, sp, #12
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	462a      	mov	r2, r5
 800b5de:	4b16      	ldr	r3, [pc, #88]	; (800b638 <_vfiprintf_r+0x258>)
 800b5e0:	a904      	add	r1, sp, #16
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	f7fc f996 	bl	8007914 <_printf_float>
 800b5e8:	4607      	mov	r7, r0
 800b5ea:	1c78      	adds	r0, r7, #1
 800b5ec:	d1d6      	bne.n	800b59c <_vfiprintf_r+0x1bc>
 800b5ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5f0:	07d9      	lsls	r1, r3, #31
 800b5f2:	d405      	bmi.n	800b600 <_vfiprintf_r+0x220>
 800b5f4:	89ab      	ldrh	r3, [r5, #12]
 800b5f6:	059a      	lsls	r2, r3, #22
 800b5f8:	d402      	bmi.n	800b600 <_vfiprintf_r+0x220>
 800b5fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5fc:	f7ff f88e 	bl	800a71c <__retarget_lock_release_recursive>
 800b600:	89ab      	ldrh	r3, [r5, #12]
 800b602:	065b      	lsls	r3, r3, #25
 800b604:	f53f af12 	bmi.w	800b42c <_vfiprintf_r+0x4c>
 800b608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b60a:	e711      	b.n	800b430 <_vfiprintf_r+0x50>
 800b60c:	ab03      	add	r3, sp, #12
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	462a      	mov	r2, r5
 800b612:	4b09      	ldr	r3, [pc, #36]	; (800b638 <_vfiprintf_r+0x258>)
 800b614:	a904      	add	r1, sp, #16
 800b616:	4630      	mov	r0, r6
 800b618:	f7fc fc20 	bl	8007e5c <_printf_i>
 800b61c:	e7e4      	b.n	800b5e8 <_vfiprintf_r+0x208>
 800b61e:	bf00      	nop
 800b620:	0800c2c0 	.word	0x0800c2c0
 800b624:	0800c2e0 	.word	0x0800c2e0
 800b628:	0800c2a0 	.word	0x0800c2a0
 800b62c:	0800c4d4 	.word	0x0800c4d4
 800b630:	0800c4de 	.word	0x0800c4de
 800b634:	08007915 	.word	0x08007915
 800b638:	0800b3bb 	.word	0x0800b3bb
 800b63c:	0800c4da 	.word	0x0800c4da

0800b640 <nan>:
 800b640:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b648 <nan+0x8>
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	00000000 	.word	0x00000000
 800b64c:	7ff80000 	.word	0x7ff80000

0800b650 <_sbrk_r>:
 800b650:	b538      	push	{r3, r4, r5, lr}
 800b652:	4d06      	ldr	r5, [pc, #24]	; (800b66c <_sbrk_r+0x1c>)
 800b654:	2300      	movs	r3, #0
 800b656:	4604      	mov	r4, r0
 800b658:	4608      	mov	r0, r1
 800b65a:	602b      	str	r3, [r5, #0]
 800b65c:	f7f6 fecc 	bl	80023f8 <_sbrk>
 800b660:	1c43      	adds	r3, r0, #1
 800b662:	d102      	bne.n	800b66a <_sbrk_r+0x1a>
 800b664:	682b      	ldr	r3, [r5, #0]
 800b666:	b103      	cbz	r3, 800b66a <_sbrk_r+0x1a>
 800b668:	6023      	str	r3, [r4, #0]
 800b66a:	bd38      	pop	{r3, r4, r5, pc}
 800b66c:	200008fc 	.word	0x200008fc

0800b670 <__sread>:
 800b670:	b510      	push	{r4, lr}
 800b672:	460c      	mov	r4, r1
 800b674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b678:	f000 f8dc 	bl	800b834 <_read_r>
 800b67c:	2800      	cmp	r0, #0
 800b67e:	bfab      	itete	ge
 800b680:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b682:	89a3      	ldrhlt	r3, [r4, #12]
 800b684:	181b      	addge	r3, r3, r0
 800b686:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b68a:	bfac      	ite	ge
 800b68c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b68e:	81a3      	strhlt	r3, [r4, #12]
 800b690:	bd10      	pop	{r4, pc}

0800b692 <__swrite>:
 800b692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b696:	461f      	mov	r7, r3
 800b698:	898b      	ldrh	r3, [r1, #12]
 800b69a:	05db      	lsls	r3, r3, #23
 800b69c:	4605      	mov	r5, r0
 800b69e:	460c      	mov	r4, r1
 800b6a0:	4616      	mov	r6, r2
 800b6a2:	d505      	bpl.n	800b6b0 <__swrite+0x1e>
 800b6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6a8:	2302      	movs	r3, #2
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f000 f8a4 	bl	800b7f8 <_lseek_r>
 800b6b0:	89a3      	ldrh	r3, [r4, #12]
 800b6b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6ba:	81a3      	strh	r3, [r4, #12]
 800b6bc:	4632      	mov	r2, r6
 800b6be:	463b      	mov	r3, r7
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c6:	f000 b823 	b.w	800b710 <_write_r>

0800b6ca <__sseek>:
 800b6ca:	b510      	push	{r4, lr}
 800b6cc:	460c      	mov	r4, r1
 800b6ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6d2:	f000 f891 	bl	800b7f8 <_lseek_r>
 800b6d6:	1c43      	adds	r3, r0, #1
 800b6d8:	89a3      	ldrh	r3, [r4, #12]
 800b6da:	bf15      	itete	ne
 800b6dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6e6:	81a3      	strheq	r3, [r4, #12]
 800b6e8:	bf18      	it	ne
 800b6ea:	81a3      	strhne	r3, [r4, #12]
 800b6ec:	bd10      	pop	{r4, pc}

0800b6ee <__sclose>:
 800b6ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6f2:	f000 b83d 	b.w	800b770 <_close_r>

0800b6f6 <__ascii_wctomb>:
 800b6f6:	b149      	cbz	r1, 800b70c <__ascii_wctomb+0x16>
 800b6f8:	2aff      	cmp	r2, #255	; 0xff
 800b6fa:	bf85      	ittet	hi
 800b6fc:	238a      	movhi	r3, #138	; 0x8a
 800b6fe:	6003      	strhi	r3, [r0, #0]
 800b700:	700a      	strbls	r2, [r1, #0]
 800b702:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b706:	bf98      	it	ls
 800b708:	2001      	movls	r0, #1
 800b70a:	4770      	bx	lr
 800b70c:	4608      	mov	r0, r1
 800b70e:	4770      	bx	lr

0800b710 <_write_r>:
 800b710:	b538      	push	{r3, r4, r5, lr}
 800b712:	4d07      	ldr	r5, [pc, #28]	; (800b730 <_write_r+0x20>)
 800b714:	4604      	mov	r4, r0
 800b716:	4608      	mov	r0, r1
 800b718:	4611      	mov	r1, r2
 800b71a:	2200      	movs	r2, #0
 800b71c:	602a      	str	r2, [r5, #0]
 800b71e:	461a      	mov	r2, r3
 800b720:	f7f6 fe19 	bl	8002356 <_write>
 800b724:	1c43      	adds	r3, r0, #1
 800b726:	d102      	bne.n	800b72e <_write_r+0x1e>
 800b728:	682b      	ldr	r3, [r5, #0]
 800b72a:	b103      	cbz	r3, 800b72e <_write_r+0x1e>
 800b72c:	6023      	str	r3, [r4, #0]
 800b72e:	bd38      	pop	{r3, r4, r5, pc}
 800b730:	200008fc 	.word	0x200008fc

0800b734 <__assert_func>:
 800b734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b736:	4614      	mov	r4, r2
 800b738:	461a      	mov	r2, r3
 800b73a:	4b09      	ldr	r3, [pc, #36]	; (800b760 <__assert_func+0x2c>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4605      	mov	r5, r0
 800b740:	68d8      	ldr	r0, [r3, #12]
 800b742:	b14c      	cbz	r4, 800b758 <__assert_func+0x24>
 800b744:	4b07      	ldr	r3, [pc, #28]	; (800b764 <__assert_func+0x30>)
 800b746:	9100      	str	r1, [sp, #0]
 800b748:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b74c:	4906      	ldr	r1, [pc, #24]	; (800b768 <__assert_func+0x34>)
 800b74e:	462b      	mov	r3, r5
 800b750:	f000 f81e 	bl	800b790 <fiprintf>
 800b754:	f000 f880 	bl	800b858 <abort>
 800b758:	4b04      	ldr	r3, [pc, #16]	; (800b76c <__assert_func+0x38>)
 800b75a:	461c      	mov	r4, r3
 800b75c:	e7f3      	b.n	800b746 <__assert_func+0x12>
 800b75e:	bf00      	nop
 800b760:	2000000c 	.word	0x2000000c
 800b764:	0800c4e5 	.word	0x0800c4e5
 800b768:	0800c4f2 	.word	0x0800c4f2
 800b76c:	0800c520 	.word	0x0800c520

0800b770 <_close_r>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	4d06      	ldr	r5, [pc, #24]	; (800b78c <_close_r+0x1c>)
 800b774:	2300      	movs	r3, #0
 800b776:	4604      	mov	r4, r0
 800b778:	4608      	mov	r0, r1
 800b77a:	602b      	str	r3, [r5, #0]
 800b77c:	f7f6 fe07 	bl	800238e <_close>
 800b780:	1c43      	adds	r3, r0, #1
 800b782:	d102      	bne.n	800b78a <_close_r+0x1a>
 800b784:	682b      	ldr	r3, [r5, #0]
 800b786:	b103      	cbz	r3, 800b78a <_close_r+0x1a>
 800b788:	6023      	str	r3, [r4, #0]
 800b78a:	bd38      	pop	{r3, r4, r5, pc}
 800b78c:	200008fc 	.word	0x200008fc

0800b790 <fiprintf>:
 800b790:	b40e      	push	{r1, r2, r3}
 800b792:	b503      	push	{r0, r1, lr}
 800b794:	4601      	mov	r1, r0
 800b796:	ab03      	add	r3, sp, #12
 800b798:	4805      	ldr	r0, [pc, #20]	; (800b7b0 <fiprintf+0x20>)
 800b79a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b79e:	6800      	ldr	r0, [r0, #0]
 800b7a0:	9301      	str	r3, [sp, #4]
 800b7a2:	f7ff fe1d 	bl	800b3e0 <_vfiprintf_r>
 800b7a6:	b002      	add	sp, #8
 800b7a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7ac:	b003      	add	sp, #12
 800b7ae:	4770      	bx	lr
 800b7b0:	2000000c 	.word	0x2000000c

0800b7b4 <_fstat_r>:
 800b7b4:	b538      	push	{r3, r4, r5, lr}
 800b7b6:	4d07      	ldr	r5, [pc, #28]	; (800b7d4 <_fstat_r+0x20>)
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	4608      	mov	r0, r1
 800b7be:	4611      	mov	r1, r2
 800b7c0:	602b      	str	r3, [r5, #0]
 800b7c2:	f7f6 fdf0 	bl	80023a6 <_fstat>
 800b7c6:	1c43      	adds	r3, r0, #1
 800b7c8:	d102      	bne.n	800b7d0 <_fstat_r+0x1c>
 800b7ca:	682b      	ldr	r3, [r5, #0]
 800b7cc:	b103      	cbz	r3, 800b7d0 <_fstat_r+0x1c>
 800b7ce:	6023      	str	r3, [r4, #0]
 800b7d0:	bd38      	pop	{r3, r4, r5, pc}
 800b7d2:	bf00      	nop
 800b7d4:	200008fc 	.word	0x200008fc

0800b7d8 <_isatty_r>:
 800b7d8:	b538      	push	{r3, r4, r5, lr}
 800b7da:	4d06      	ldr	r5, [pc, #24]	; (800b7f4 <_isatty_r+0x1c>)
 800b7dc:	2300      	movs	r3, #0
 800b7de:	4604      	mov	r4, r0
 800b7e0:	4608      	mov	r0, r1
 800b7e2:	602b      	str	r3, [r5, #0]
 800b7e4:	f7f6 fdef 	bl	80023c6 <_isatty>
 800b7e8:	1c43      	adds	r3, r0, #1
 800b7ea:	d102      	bne.n	800b7f2 <_isatty_r+0x1a>
 800b7ec:	682b      	ldr	r3, [r5, #0]
 800b7ee:	b103      	cbz	r3, 800b7f2 <_isatty_r+0x1a>
 800b7f0:	6023      	str	r3, [r4, #0]
 800b7f2:	bd38      	pop	{r3, r4, r5, pc}
 800b7f4:	200008fc 	.word	0x200008fc

0800b7f8 <_lseek_r>:
 800b7f8:	b538      	push	{r3, r4, r5, lr}
 800b7fa:	4d07      	ldr	r5, [pc, #28]	; (800b818 <_lseek_r+0x20>)
 800b7fc:	4604      	mov	r4, r0
 800b7fe:	4608      	mov	r0, r1
 800b800:	4611      	mov	r1, r2
 800b802:	2200      	movs	r2, #0
 800b804:	602a      	str	r2, [r5, #0]
 800b806:	461a      	mov	r2, r3
 800b808:	f7f6 fde8 	bl	80023dc <_lseek>
 800b80c:	1c43      	adds	r3, r0, #1
 800b80e:	d102      	bne.n	800b816 <_lseek_r+0x1e>
 800b810:	682b      	ldr	r3, [r5, #0]
 800b812:	b103      	cbz	r3, 800b816 <_lseek_r+0x1e>
 800b814:	6023      	str	r3, [r4, #0]
 800b816:	bd38      	pop	{r3, r4, r5, pc}
 800b818:	200008fc 	.word	0x200008fc

0800b81c <__malloc_lock>:
 800b81c:	4801      	ldr	r0, [pc, #4]	; (800b824 <__malloc_lock+0x8>)
 800b81e:	f7fe bf7c 	b.w	800a71a <__retarget_lock_acquire_recursive>
 800b822:	bf00      	nop
 800b824:	200008f0 	.word	0x200008f0

0800b828 <__malloc_unlock>:
 800b828:	4801      	ldr	r0, [pc, #4]	; (800b830 <__malloc_unlock+0x8>)
 800b82a:	f7fe bf77 	b.w	800a71c <__retarget_lock_release_recursive>
 800b82e:	bf00      	nop
 800b830:	200008f0 	.word	0x200008f0

0800b834 <_read_r>:
 800b834:	b538      	push	{r3, r4, r5, lr}
 800b836:	4d07      	ldr	r5, [pc, #28]	; (800b854 <_read_r+0x20>)
 800b838:	4604      	mov	r4, r0
 800b83a:	4608      	mov	r0, r1
 800b83c:	4611      	mov	r1, r2
 800b83e:	2200      	movs	r2, #0
 800b840:	602a      	str	r2, [r5, #0]
 800b842:	461a      	mov	r2, r3
 800b844:	f7f6 fd6a 	bl	800231c <_read>
 800b848:	1c43      	adds	r3, r0, #1
 800b84a:	d102      	bne.n	800b852 <_read_r+0x1e>
 800b84c:	682b      	ldr	r3, [r5, #0]
 800b84e:	b103      	cbz	r3, 800b852 <_read_r+0x1e>
 800b850:	6023      	str	r3, [r4, #0]
 800b852:	bd38      	pop	{r3, r4, r5, pc}
 800b854:	200008fc 	.word	0x200008fc

0800b858 <abort>:
 800b858:	b508      	push	{r3, lr}
 800b85a:	2006      	movs	r0, #6
 800b85c:	f000 f82c 	bl	800b8b8 <raise>
 800b860:	2001      	movs	r0, #1
 800b862:	f7f6 fd51 	bl	8002308 <_exit>

0800b866 <_raise_r>:
 800b866:	291f      	cmp	r1, #31
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	4604      	mov	r4, r0
 800b86c:	460d      	mov	r5, r1
 800b86e:	d904      	bls.n	800b87a <_raise_r+0x14>
 800b870:	2316      	movs	r3, #22
 800b872:	6003      	str	r3, [r0, #0]
 800b874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b878:	bd38      	pop	{r3, r4, r5, pc}
 800b87a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b87c:	b112      	cbz	r2, 800b884 <_raise_r+0x1e>
 800b87e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b882:	b94b      	cbnz	r3, 800b898 <_raise_r+0x32>
 800b884:	4620      	mov	r0, r4
 800b886:	f000 f831 	bl	800b8ec <_getpid_r>
 800b88a:	462a      	mov	r2, r5
 800b88c:	4601      	mov	r1, r0
 800b88e:	4620      	mov	r0, r4
 800b890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b894:	f000 b818 	b.w	800b8c8 <_kill_r>
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d00a      	beq.n	800b8b2 <_raise_r+0x4c>
 800b89c:	1c59      	adds	r1, r3, #1
 800b89e:	d103      	bne.n	800b8a8 <_raise_r+0x42>
 800b8a0:	2316      	movs	r3, #22
 800b8a2:	6003      	str	r3, [r0, #0]
 800b8a4:	2001      	movs	r0, #1
 800b8a6:	e7e7      	b.n	800b878 <_raise_r+0x12>
 800b8a8:	2400      	movs	r4, #0
 800b8aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	4798      	blx	r3
 800b8b2:	2000      	movs	r0, #0
 800b8b4:	e7e0      	b.n	800b878 <_raise_r+0x12>
	...

0800b8b8 <raise>:
 800b8b8:	4b02      	ldr	r3, [pc, #8]	; (800b8c4 <raise+0xc>)
 800b8ba:	4601      	mov	r1, r0
 800b8bc:	6818      	ldr	r0, [r3, #0]
 800b8be:	f7ff bfd2 	b.w	800b866 <_raise_r>
 800b8c2:	bf00      	nop
 800b8c4:	2000000c 	.word	0x2000000c

0800b8c8 <_kill_r>:
 800b8c8:	b538      	push	{r3, r4, r5, lr}
 800b8ca:	4d07      	ldr	r5, [pc, #28]	; (800b8e8 <_kill_r+0x20>)
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	4608      	mov	r0, r1
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	602b      	str	r3, [r5, #0]
 800b8d6:	f7f6 fd07 	bl	80022e8 <_kill>
 800b8da:	1c43      	adds	r3, r0, #1
 800b8dc:	d102      	bne.n	800b8e4 <_kill_r+0x1c>
 800b8de:	682b      	ldr	r3, [r5, #0]
 800b8e0:	b103      	cbz	r3, 800b8e4 <_kill_r+0x1c>
 800b8e2:	6023      	str	r3, [r4, #0]
 800b8e4:	bd38      	pop	{r3, r4, r5, pc}
 800b8e6:	bf00      	nop
 800b8e8:	200008fc 	.word	0x200008fc

0800b8ec <_getpid_r>:
 800b8ec:	f7f6 bcf4 	b.w	80022d8 <_getpid>

0800b8f0 <atan>:
 800b8f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f4:	ec55 4b10 	vmov	r4, r5, d0
 800b8f8:	4bc3      	ldr	r3, [pc, #780]	; (800bc08 <atan+0x318>)
 800b8fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b8fe:	429e      	cmp	r6, r3
 800b900:	46ab      	mov	fp, r5
 800b902:	dd18      	ble.n	800b936 <atan+0x46>
 800b904:	4bc1      	ldr	r3, [pc, #772]	; (800bc0c <atan+0x31c>)
 800b906:	429e      	cmp	r6, r3
 800b908:	dc01      	bgt.n	800b90e <atan+0x1e>
 800b90a:	d109      	bne.n	800b920 <atan+0x30>
 800b90c:	b144      	cbz	r4, 800b920 <atan+0x30>
 800b90e:	4622      	mov	r2, r4
 800b910:	462b      	mov	r3, r5
 800b912:	4620      	mov	r0, r4
 800b914:	4629      	mov	r1, r5
 800b916:	f7f4 fcc1 	bl	800029c <__adddf3>
 800b91a:	4604      	mov	r4, r0
 800b91c:	460d      	mov	r5, r1
 800b91e:	e006      	b.n	800b92e <atan+0x3e>
 800b920:	f1bb 0f00 	cmp.w	fp, #0
 800b924:	f300 8131 	bgt.w	800bb8a <atan+0x29a>
 800b928:	a59b      	add	r5, pc, #620	; (adr r5, 800bb98 <atan+0x2a8>)
 800b92a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b92e:	ec45 4b10 	vmov	d0, r4, r5
 800b932:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b936:	4bb6      	ldr	r3, [pc, #728]	; (800bc10 <atan+0x320>)
 800b938:	429e      	cmp	r6, r3
 800b93a:	dc14      	bgt.n	800b966 <atan+0x76>
 800b93c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b940:	429e      	cmp	r6, r3
 800b942:	dc0d      	bgt.n	800b960 <atan+0x70>
 800b944:	a396      	add	r3, pc, #600	; (adr r3, 800bba0 <atan+0x2b0>)
 800b946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94a:	ee10 0a10 	vmov	r0, s0
 800b94e:	4629      	mov	r1, r5
 800b950:	f7f4 fca4 	bl	800029c <__adddf3>
 800b954:	4baf      	ldr	r3, [pc, #700]	; (800bc14 <atan+0x324>)
 800b956:	2200      	movs	r2, #0
 800b958:	f7f5 f8e6 	bl	8000b28 <__aeabi_dcmpgt>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	d1e6      	bne.n	800b92e <atan+0x3e>
 800b960:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b964:	e02b      	b.n	800b9be <atan+0xce>
 800b966:	f000 f963 	bl	800bc30 <fabs>
 800b96a:	4bab      	ldr	r3, [pc, #684]	; (800bc18 <atan+0x328>)
 800b96c:	429e      	cmp	r6, r3
 800b96e:	ec55 4b10 	vmov	r4, r5, d0
 800b972:	f300 80bf 	bgt.w	800baf4 <atan+0x204>
 800b976:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b97a:	429e      	cmp	r6, r3
 800b97c:	f300 80a0 	bgt.w	800bac0 <atan+0x1d0>
 800b980:	ee10 2a10 	vmov	r2, s0
 800b984:	ee10 0a10 	vmov	r0, s0
 800b988:	462b      	mov	r3, r5
 800b98a:	4629      	mov	r1, r5
 800b98c:	f7f4 fc86 	bl	800029c <__adddf3>
 800b990:	4ba0      	ldr	r3, [pc, #640]	; (800bc14 <atan+0x324>)
 800b992:	2200      	movs	r2, #0
 800b994:	f7f4 fc80 	bl	8000298 <__aeabi_dsub>
 800b998:	2200      	movs	r2, #0
 800b99a:	4606      	mov	r6, r0
 800b99c:	460f      	mov	r7, r1
 800b99e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	4629      	mov	r1, r5
 800b9a6:	f7f4 fc79 	bl	800029c <__adddf3>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	4639      	mov	r1, r7
 800b9b2:	f7f4 ff53 	bl	800085c <__aeabi_ddiv>
 800b9b6:	f04f 0a00 	mov.w	sl, #0
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	460d      	mov	r5, r1
 800b9be:	4622      	mov	r2, r4
 800b9c0:	462b      	mov	r3, r5
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	4629      	mov	r1, r5
 800b9c6:	f7f4 fe1f 	bl	8000608 <__aeabi_dmul>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	4680      	mov	r8, r0
 800b9d0:	4689      	mov	r9, r1
 800b9d2:	f7f4 fe19 	bl	8000608 <__aeabi_dmul>
 800b9d6:	a374      	add	r3, pc, #464	; (adr r3, 800bba8 <atan+0x2b8>)
 800b9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9dc:	4606      	mov	r6, r0
 800b9de:	460f      	mov	r7, r1
 800b9e0:	f7f4 fe12 	bl	8000608 <__aeabi_dmul>
 800b9e4:	a372      	add	r3, pc, #456	; (adr r3, 800bbb0 <atan+0x2c0>)
 800b9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ea:	f7f4 fc57 	bl	800029c <__adddf3>
 800b9ee:	4632      	mov	r2, r6
 800b9f0:	463b      	mov	r3, r7
 800b9f2:	f7f4 fe09 	bl	8000608 <__aeabi_dmul>
 800b9f6:	a370      	add	r3, pc, #448	; (adr r3, 800bbb8 <atan+0x2c8>)
 800b9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fc:	f7f4 fc4e 	bl	800029c <__adddf3>
 800ba00:	4632      	mov	r2, r6
 800ba02:	463b      	mov	r3, r7
 800ba04:	f7f4 fe00 	bl	8000608 <__aeabi_dmul>
 800ba08:	a36d      	add	r3, pc, #436	; (adr r3, 800bbc0 <atan+0x2d0>)
 800ba0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0e:	f7f4 fc45 	bl	800029c <__adddf3>
 800ba12:	4632      	mov	r2, r6
 800ba14:	463b      	mov	r3, r7
 800ba16:	f7f4 fdf7 	bl	8000608 <__aeabi_dmul>
 800ba1a:	a36b      	add	r3, pc, #428	; (adr r3, 800bbc8 <atan+0x2d8>)
 800ba1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba20:	f7f4 fc3c 	bl	800029c <__adddf3>
 800ba24:	4632      	mov	r2, r6
 800ba26:	463b      	mov	r3, r7
 800ba28:	f7f4 fdee 	bl	8000608 <__aeabi_dmul>
 800ba2c:	a368      	add	r3, pc, #416	; (adr r3, 800bbd0 <atan+0x2e0>)
 800ba2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba32:	f7f4 fc33 	bl	800029c <__adddf3>
 800ba36:	4642      	mov	r2, r8
 800ba38:	464b      	mov	r3, r9
 800ba3a:	f7f4 fde5 	bl	8000608 <__aeabi_dmul>
 800ba3e:	a366      	add	r3, pc, #408	; (adr r3, 800bbd8 <atan+0x2e8>)
 800ba40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba44:	4680      	mov	r8, r0
 800ba46:	4689      	mov	r9, r1
 800ba48:	4630      	mov	r0, r6
 800ba4a:	4639      	mov	r1, r7
 800ba4c:	f7f4 fddc 	bl	8000608 <__aeabi_dmul>
 800ba50:	a363      	add	r3, pc, #396	; (adr r3, 800bbe0 <atan+0x2f0>)
 800ba52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba56:	f7f4 fc1f 	bl	8000298 <__aeabi_dsub>
 800ba5a:	4632      	mov	r2, r6
 800ba5c:	463b      	mov	r3, r7
 800ba5e:	f7f4 fdd3 	bl	8000608 <__aeabi_dmul>
 800ba62:	a361      	add	r3, pc, #388	; (adr r3, 800bbe8 <atan+0x2f8>)
 800ba64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba68:	f7f4 fc16 	bl	8000298 <__aeabi_dsub>
 800ba6c:	4632      	mov	r2, r6
 800ba6e:	463b      	mov	r3, r7
 800ba70:	f7f4 fdca 	bl	8000608 <__aeabi_dmul>
 800ba74:	a35e      	add	r3, pc, #376	; (adr r3, 800bbf0 <atan+0x300>)
 800ba76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7a:	f7f4 fc0d 	bl	8000298 <__aeabi_dsub>
 800ba7e:	4632      	mov	r2, r6
 800ba80:	463b      	mov	r3, r7
 800ba82:	f7f4 fdc1 	bl	8000608 <__aeabi_dmul>
 800ba86:	a35c      	add	r3, pc, #368	; (adr r3, 800bbf8 <atan+0x308>)
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	f7f4 fc04 	bl	8000298 <__aeabi_dsub>
 800ba90:	4632      	mov	r2, r6
 800ba92:	463b      	mov	r3, r7
 800ba94:	f7f4 fdb8 	bl	8000608 <__aeabi_dmul>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	4640      	mov	r0, r8
 800ba9e:	4649      	mov	r1, r9
 800baa0:	f7f4 fbfc 	bl	800029c <__adddf3>
 800baa4:	4622      	mov	r2, r4
 800baa6:	462b      	mov	r3, r5
 800baa8:	f7f4 fdae 	bl	8000608 <__aeabi_dmul>
 800baac:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800bab0:	4602      	mov	r2, r0
 800bab2:	460b      	mov	r3, r1
 800bab4:	d14b      	bne.n	800bb4e <atan+0x25e>
 800bab6:	4620      	mov	r0, r4
 800bab8:	4629      	mov	r1, r5
 800baba:	f7f4 fbed 	bl	8000298 <__aeabi_dsub>
 800babe:	e72c      	b.n	800b91a <atan+0x2a>
 800bac0:	ee10 0a10 	vmov	r0, s0
 800bac4:	4b53      	ldr	r3, [pc, #332]	; (800bc14 <atan+0x324>)
 800bac6:	2200      	movs	r2, #0
 800bac8:	4629      	mov	r1, r5
 800baca:	f7f4 fbe5 	bl	8000298 <__aeabi_dsub>
 800bace:	4b51      	ldr	r3, [pc, #324]	; (800bc14 <atan+0x324>)
 800bad0:	4606      	mov	r6, r0
 800bad2:	460f      	mov	r7, r1
 800bad4:	2200      	movs	r2, #0
 800bad6:	4620      	mov	r0, r4
 800bad8:	4629      	mov	r1, r5
 800bada:	f7f4 fbdf 	bl	800029c <__adddf3>
 800bade:	4602      	mov	r2, r0
 800bae0:	460b      	mov	r3, r1
 800bae2:	4630      	mov	r0, r6
 800bae4:	4639      	mov	r1, r7
 800bae6:	f7f4 feb9 	bl	800085c <__aeabi_ddiv>
 800baea:	f04f 0a01 	mov.w	sl, #1
 800baee:	4604      	mov	r4, r0
 800baf0:	460d      	mov	r5, r1
 800baf2:	e764      	b.n	800b9be <atan+0xce>
 800baf4:	4b49      	ldr	r3, [pc, #292]	; (800bc1c <atan+0x32c>)
 800baf6:	429e      	cmp	r6, r3
 800baf8:	da1d      	bge.n	800bb36 <atan+0x246>
 800bafa:	ee10 0a10 	vmov	r0, s0
 800bafe:	4b48      	ldr	r3, [pc, #288]	; (800bc20 <atan+0x330>)
 800bb00:	2200      	movs	r2, #0
 800bb02:	4629      	mov	r1, r5
 800bb04:	f7f4 fbc8 	bl	8000298 <__aeabi_dsub>
 800bb08:	4b45      	ldr	r3, [pc, #276]	; (800bc20 <atan+0x330>)
 800bb0a:	4606      	mov	r6, r0
 800bb0c:	460f      	mov	r7, r1
 800bb0e:	2200      	movs	r2, #0
 800bb10:	4620      	mov	r0, r4
 800bb12:	4629      	mov	r1, r5
 800bb14:	f7f4 fd78 	bl	8000608 <__aeabi_dmul>
 800bb18:	4b3e      	ldr	r3, [pc, #248]	; (800bc14 <atan+0x324>)
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f7f4 fbbe 	bl	800029c <__adddf3>
 800bb20:	4602      	mov	r2, r0
 800bb22:	460b      	mov	r3, r1
 800bb24:	4630      	mov	r0, r6
 800bb26:	4639      	mov	r1, r7
 800bb28:	f7f4 fe98 	bl	800085c <__aeabi_ddiv>
 800bb2c:	f04f 0a02 	mov.w	sl, #2
 800bb30:	4604      	mov	r4, r0
 800bb32:	460d      	mov	r5, r1
 800bb34:	e743      	b.n	800b9be <atan+0xce>
 800bb36:	462b      	mov	r3, r5
 800bb38:	ee10 2a10 	vmov	r2, s0
 800bb3c:	4939      	ldr	r1, [pc, #228]	; (800bc24 <atan+0x334>)
 800bb3e:	2000      	movs	r0, #0
 800bb40:	f7f4 fe8c 	bl	800085c <__aeabi_ddiv>
 800bb44:	f04f 0a03 	mov.w	sl, #3
 800bb48:	4604      	mov	r4, r0
 800bb4a:	460d      	mov	r5, r1
 800bb4c:	e737      	b.n	800b9be <atan+0xce>
 800bb4e:	4b36      	ldr	r3, [pc, #216]	; (800bc28 <atan+0x338>)
 800bb50:	4e36      	ldr	r6, [pc, #216]	; (800bc2c <atan+0x33c>)
 800bb52:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bb56:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800bb5a:	e9da 2300 	ldrd	r2, r3, [sl]
 800bb5e:	f7f4 fb9b 	bl	8000298 <__aeabi_dsub>
 800bb62:	4622      	mov	r2, r4
 800bb64:	462b      	mov	r3, r5
 800bb66:	f7f4 fb97 	bl	8000298 <__aeabi_dsub>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bb72:	f7f4 fb91 	bl	8000298 <__aeabi_dsub>
 800bb76:	f1bb 0f00 	cmp.w	fp, #0
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	460d      	mov	r5, r1
 800bb7e:	f6bf aed6 	bge.w	800b92e <atan+0x3e>
 800bb82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb86:	461d      	mov	r5, r3
 800bb88:	e6d1      	b.n	800b92e <atan+0x3e>
 800bb8a:	a51d      	add	r5, pc, #116	; (adr r5, 800bc00 <atan+0x310>)
 800bb8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb90:	e6cd      	b.n	800b92e <atan+0x3e>
 800bb92:	bf00      	nop
 800bb94:	f3af 8000 	nop.w
 800bb98:	54442d18 	.word	0x54442d18
 800bb9c:	bff921fb 	.word	0xbff921fb
 800bba0:	8800759c 	.word	0x8800759c
 800bba4:	7e37e43c 	.word	0x7e37e43c
 800bba8:	e322da11 	.word	0xe322da11
 800bbac:	3f90ad3a 	.word	0x3f90ad3a
 800bbb0:	24760deb 	.word	0x24760deb
 800bbb4:	3fa97b4b 	.word	0x3fa97b4b
 800bbb8:	a0d03d51 	.word	0xa0d03d51
 800bbbc:	3fb10d66 	.word	0x3fb10d66
 800bbc0:	c54c206e 	.word	0xc54c206e
 800bbc4:	3fb745cd 	.word	0x3fb745cd
 800bbc8:	920083ff 	.word	0x920083ff
 800bbcc:	3fc24924 	.word	0x3fc24924
 800bbd0:	5555550d 	.word	0x5555550d
 800bbd4:	3fd55555 	.word	0x3fd55555
 800bbd8:	2c6a6c2f 	.word	0x2c6a6c2f
 800bbdc:	bfa2b444 	.word	0xbfa2b444
 800bbe0:	52defd9a 	.word	0x52defd9a
 800bbe4:	3fadde2d 	.word	0x3fadde2d
 800bbe8:	af749a6d 	.word	0xaf749a6d
 800bbec:	3fb3b0f2 	.word	0x3fb3b0f2
 800bbf0:	fe231671 	.word	0xfe231671
 800bbf4:	3fbc71c6 	.word	0x3fbc71c6
 800bbf8:	9998ebc4 	.word	0x9998ebc4
 800bbfc:	3fc99999 	.word	0x3fc99999
 800bc00:	54442d18 	.word	0x54442d18
 800bc04:	3ff921fb 	.word	0x3ff921fb
 800bc08:	440fffff 	.word	0x440fffff
 800bc0c:	7ff00000 	.word	0x7ff00000
 800bc10:	3fdbffff 	.word	0x3fdbffff
 800bc14:	3ff00000 	.word	0x3ff00000
 800bc18:	3ff2ffff 	.word	0x3ff2ffff
 800bc1c:	40038000 	.word	0x40038000
 800bc20:	3ff80000 	.word	0x3ff80000
 800bc24:	bff00000 	.word	0xbff00000
 800bc28:	0800c648 	.word	0x0800c648
 800bc2c:	0800c628 	.word	0x0800c628

0800bc30 <fabs>:
 800bc30:	ec51 0b10 	vmov	r0, r1, d0
 800bc34:	ee10 2a10 	vmov	r2, s0
 800bc38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bc3c:	ec43 2b10 	vmov	d0, r2, r3
 800bc40:	4770      	bx	lr

0800bc42 <atan2>:
 800bc42:	f000 b801 	b.w	800bc48 <__ieee754_atan2>
	...

0800bc48 <__ieee754_atan2>:
 800bc48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc4c:	ec57 6b11 	vmov	r6, r7, d1
 800bc50:	4273      	negs	r3, r6
 800bc52:	f8df e184 	ldr.w	lr, [pc, #388]	; 800bdd8 <__ieee754_atan2+0x190>
 800bc56:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bc5a:	4333      	orrs	r3, r6
 800bc5c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bc60:	4573      	cmp	r3, lr
 800bc62:	ec51 0b10 	vmov	r0, r1, d0
 800bc66:	ee11 8a10 	vmov	r8, s2
 800bc6a:	d80a      	bhi.n	800bc82 <__ieee754_atan2+0x3a>
 800bc6c:	4244      	negs	r4, r0
 800bc6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bc72:	4304      	orrs	r4, r0
 800bc74:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bc78:	4574      	cmp	r4, lr
 800bc7a:	ee10 9a10 	vmov	r9, s0
 800bc7e:	468c      	mov	ip, r1
 800bc80:	d907      	bls.n	800bc92 <__ieee754_atan2+0x4a>
 800bc82:	4632      	mov	r2, r6
 800bc84:	463b      	mov	r3, r7
 800bc86:	f7f4 fb09 	bl	800029c <__adddf3>
 800bc8a:	ec41 0b10 	vmov	d0, r0, r1
 800bc8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc92:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800bc96:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bc9a:	4334      	orrs	r4, r6
 800bc9c:	d103      	bne.n	800bca6 <__ieee754_atan2+0x5e>
 800bc9e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bca2:	f7ff be25 	b.w	800b8f0 <atan>
 800bca6:	17bc      	asrs	r4, r7, #30
 800bca8:	f004 0402 	and.w	r4, r4, #2
 800bcac:	ea53 0909 	orrs.w	r9, r3, r9
 800bcb0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bcb4:	d107      	bne.n	800bcc6 <__ieee754_atan2+0x7e>
 800bcb6:	2c02      	cmp	r4, #2
 800bcb8:	d060      	beq.n	800bd7c <__ieee754_atan2+0x134>
 800bcba:	2c03      	cmp	r4, #3
 800bcbc:	d1e5      	bne.n	800bc8a <__ieee754_atan2+0x42>
 800bcbe:	a142      	add	r1, pc, #264	; (adr r1, 800bdc8 <__ieee754_atan2+0x180>)
 800bcc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcc4:	e7e1      	b.n	800bc8a <__ieee754_atan2+0x42>
 800bcc6:	ea52 0808 	orrs.w	r8, r2, r8
 800bcca:	d106      	bne.n	800bcda <__ieee754_atan2+0x92>
 800bccc:	f1bc 0f00 	cmp.w	ip, #0
 800bcd0:	da5f      	bge.n	800bd92 <__ieee754_atan2+0x14a>
 800bcd2:	a13f      	add	r1, pc, #252	; (adr r1, 800bdd0 <__ieee754_atan2+0x188>)
 800bcd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcd8:	e7d7      	b.n	800bc8a <__ieee754_atan2+0x42>
 800bcda:	4572      	cmp	r2, lr
 800bcdc:	d10f      	bne.n	800bcfe <__ieee754_atan2+0xb6>
 800bcde:	4293      	cmp	r3, r2
 800bce0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800bce4:	d107      	bne.n	800bcf6 <__ieee754_atan2+0xae>
 800bce6:	2c02      	cmp	r4, #2
 800bce8:	d84c      	bhi.n	800bd84 <__ieee754_atan2+0x13c>
 800bcea:	4b35      	ldr	r3, [pc, #212]	; (800bdc0 <__ieee754_atan2+0x178>)
 800bcec:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bcf0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bcf4:	e7c9      	b.n	800bc8a <__ieee754_atan2+0x42>
 800bcf6:	2c02      	cmp	r4, #2
 800bcf8:	d848      	bhi.n	800bd8c <__ieee754_atan2+0x144>
 800bcfa:	4b32      	ldr	r3, [pc, #200]	; (800bdc4 <__ieee754_atan2+0x17c>)
 800bcfc:	e7f6      	b.n	800bcec <__ieee754_atan2+0xa4>
 800bcfe:	4573      	cmp	r3, lr
 800bd00:	d0e4      	beq.n	800bccc <__ieee754_atan2+0x84>
 800bd02:	1a9b      	subs	r3, r3, r2
 800bd04:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bd08:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bd0c:	da1e      	bge.n	800bd4c <__ieee754_atan2+0x104>
 800bd0e:	2f00      	cmp	r7, #0
 800bd10:	da01      	bge.n	800bd16 <__ieee754_atan2+0xce>
 800bd12:	323c      	adds	r2, #60	; 0x3c
 800bd14:	db1e      	blt.n	800bd54 <__ieee754_atan2+0x10c>
 800bd16:	4632      	mov	r2, r6
 800bd18:	463b      	mov	r3, r7
 800bd1a:	f7f4 fd9f 	bl	800085c <__aeabi_ddiv>
 800bd1e:	ec41 0b10 	vmov	d0, r0, r1
 800bd22:	f7ff ff85 	bl	800bc30 <fabs>
 800bd26:	f7ff fde3 	bl	800b8f0 <atan>
 800bd2a:	ec51 0b10 	vmov	r0, r1, d0
 800bd2e:	2c01      	cmp	r4, #1
 800bd30:	d013      	beq.n	800bd5a <__ieee754_atan2+0x112>
 800bd32:	2c02      	cmp	r4, #2
 800bd34:	d015      	beq.n	800bd62 <__ieee754_atan2+0x11a>
 800bd36:	2c00      	cmp	r4, #0
 800bd38:	d0a7      	beq.n	800bc8a <__ieee754_atan2+0x42>
 800bd3a:	a319      	add	r3, pc, #100	; (adr r3, 800bda0 <__ieee754_atan2+0x158>)
 800bd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd40:	f7f4 faaa 	bl	8000298 <__aeabi_dsub>
 800bd44:	a318      	add	r3, pc, #96	; (adr r3, 800bda8 <__ieee754_atan2+0x160>)
 800bd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4a:	e014      	b.n	800bd76 <__ieee754_atan2+0x12e>
 800bd4c:	a118      	add	r1, pc, #96	; (adr r1, 800bdb0 <__ieee754_atan2+0x168>)
 800bd4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd52:	e7ec      	b.n	800bd2e <__ieee754_atan2+0xe6>
 800bd54:	2000      	movs	r0, #0
 800bd56:	2100      	movs	r1, #0
 800bd58:	e7e9      	b.n	800bd2e <__ieee754_atan2+0xe6>
 800bd5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd5e:	4619      	mov	r1, r3
 800bd60:	e793      	b.n	800bc8a <__ieee754_atan2+0x42>
 800bd62:	a30f      	add	r3, pc, #60	; (adr r3, 800bda0 <__ieee754_atan2+0x158>)
 800bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd68:	f7f4 fa96 	bl	8000298 <__aeabi_dsub>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	460b      	mov	r3, r1
 800bd70:	a10d      	add	r1, pc, #52	; (adr r1, 800bda8 <__ieee754_atan2+0x160>)
 800bd72:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd76:	f7f4 fa8f 	bl	8000298 <__aeabi_dsub>
 800bd7a:	e786      	b.n	800bc8a <__ieee754_atan2+0x42>
 800bd7c:	a10a      	add	r1, pc, #40	; (adr r1, 800bda8 <__ieee754_atan2+0x160>)
 800bd7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd82:	e782      	b.n	800bc8a <__ieee754_atan2+0x42>
 800bd84:	a10c      	add	r1, pc, #48	; (adr r1, 800bdb8 <__ieee754_atan2+0x170>)
 800bd86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd8a:	e77e      	b.n	800bc8a <__ieee754_atan2+0x42>
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	2100      	movs	r1, #0
 800bd90:	e77b      	b.n	800bc8a <__ieee754_atan2+0x42>
 800bd92:	a107      	add	r1, pc, #28	; (adr r1, 800bdb0 <__ieee754_atan2+0x168>)
 800bd94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd98:	e777      	b.n	800bc8a <__ieee754_atan2+0x42>
 800bd9a:	bf00      	nop
 800bd9c:	f3af 8000 	nop.w
 800bda0:	33145c07 	.word	0x33145c07
 800bda4:	3ca1a626 	.word	0x3ca1a626
 800bda8:	54442d18 	.word	0x54442d18
 800bdac:	400921fb 	.word	0x400921fb
 800bdb0:	54442d18 	.word	0x54442d18
 800bdb4:	3ff921fb 	.word	0x3ff921fb
 800bdb8:	54442d18 	.word	0x54442d18
 800bdbc:	3fe921fb 	.word	0x3fe921fb
 800bdc0:	0800c668 	.word	0x0800c668
 800bdc4:	0800c680 	.word	0x0800c680
 800bdc8:	54442d18 	.word	0x54442d18
 800bdcc:	c00921fb 	.word	0xc00921fb
 800bdd0:	54442d18 	.word	0x54442d18
 800bdd4:	bff921fb 	.word	0xbff921fb
 800bdd8:	7ff00000 	.word	0x7ff00000

0800bddc <_init>:
 800bddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdde:	bf00      	nop
 800bde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bde2:	bc08      	pop	{r3}
 800bde4:	469e      	mov	lr, r3
 800bde6:	4770      	bx	lr

0800bde8 <_fini>:
 800bde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdea:	bf00      	nop
 800bdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdee:	bc08      	pop	{r3}
 800bdf0:	469e      	mov	lr, r3
 800bdf2:	4770      	bx	lr
