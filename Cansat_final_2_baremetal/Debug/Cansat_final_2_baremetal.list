
Cansat_final_2_baremetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a0  0800bdb8  0800bdb8  0001bdb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c658  0800c658  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c658  0800c658  0001c658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c660  0800c660  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c660  0800c660  0001c660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c664  0800c664  0001c664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  200001e0  0800c848  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000900  0800c848  00020900  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149b7  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d88  00000000  00000000  00034bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00037950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  00038a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019240  00000000  00000000  00039a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018701  00000000  00000000  00052c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093b74  00000000  00000000  0006b361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000feed5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b94  00000000  00000000  000fef28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bd9c 	.word	0x0800bd9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800bd9c 	.word	0x0800bd9c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <Init>:
	 * et elle configure ce dernier pour qu'il réalise des mesures en continu.
	 * @param p_hi2c1 Pointeur vers une structure I2C qui contient l'information de configuration pour un i2c particulier
	 * @retval None
	 */
void Init(I2C_HandleTypeDef* p_hi2c1)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af04      	add	r7, sp, #16
 800100e:	6078      	str	r0, [r7, #4]

	uint8_t buff[6];
	buff[0] = 0x80;
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD,  PWR_MGMT_1,  1, &buff[0], 1, 10);
 8001014:	230a      	movs	r3, #10
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	2301      	movs	r3, #1
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2301      	movs	r3, #1
 8001024:	226b      	movs	r2, #107	; 0x6b
 8001026:	21d0      	movs	r1, #208	; 0xd0
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f002 fd97 	bl	8003b5c <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800102e:	2064      	movs	r0, #100	; 0x64
 8001030:	f001 fd94 	bl	8002b5c <HAL_Delay>
	buff[0] = 0x1;
 8001034:	2301      	movs	r3, #1
 8001036:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD, PWR_MGMT_1,  1, &buff[0], 1, 10);
 8001038:	230a      	movs	r3, #10
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	2301      	movs	r3, #1
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	226b      	movs	r2, #107	; 0x6b
 800104a:	21d0      	movs	r1, #208	; 0xd0
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f002 fd85 	bl	8003b5c <HAL_I2C_Mem_Write>


	/********* changement de la sensibilité de l'accélérometre  00=2g 01=4g 10=8g 11=16g *********/
	HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD,  ACCEL_CONFIG,  1, &buff[0], 1, 10);
 8001052:	230a      	movs	r3, #10
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	2301      	movs	r3, #1
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	221c      	movs	r2, #28
 8001064:	21d0      	movs	r1, #208	; 0xd0
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f002 fe72 	bl	8003d50 <HAL_I2C_Mem_Read>

	//Pour mettre 00
	buff[0] =(buff[0] & (0b11100111)) ;
 800106c:	7a3b      	ldrb	r3, [r7, #8]
 800106e:	f023 0318 	bic.w	r3, r3, #24
 8001072:	b2db      	uxtb	r3, r3
 8001074:	723b      	strb	r3, [r7, #8]
	//buff[0] =(buff[0] & (0b11110111)) ;
	//buff[0] =(buff[0] | (0b00010000)) ;
	//Pour mettre 11
	//buff[0] =(buff[0] | (0b00011000)) ;

	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD,  ACCEL_CONFIG,  1, &buff[0], 1, 10);
 8001076:	230a      	movs	r3, #10
 8001078:	9302      	str	r3, [sp, #8]
 800107a:	2301      	movs	r3, #1
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2301      	movs	r3, #1
 8001086:	221c      	movs	r2, #28
 8001088:	21d0      	movs	r1, #208	; 0xd0
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f002 fd66 	bl	8003b5c <HAL_I2C_Mem_Write>


	buff[0]=0x2; // Bypass pour activer le magnétomètre
 8001090:	2302      	movs	r3, #2
 8001092:	723b      	strb	r3, [r7, #8]
		  if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,INT_PIN_CFG,1,&buff[0],1,10)!=HAL_OK){
 8001094:	230a      	movs	r3, #10
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	2301      	movs	r3, #1
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2301      	movs	r3, #1
 80010a4:	2237      	movs	r2, #55	; 0x37
 80010a6:	21d0      	movs	r1, #208	; 0xd0
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f002 fd57 	bl	8003b5c <HAL_I2C_Mem_Write>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <Init+0xb6>
			  printf("probleme activation magnetometre --> fct Init \r\n");
 80010b4:	4851      	ldr	r0, [pc, #324]	; (80011fc <Init+0x1f4>)
 80010b6:	f007 f85d 	bl	8008174 <puts>
		  	  Error_Handler();
 80010ba:	f000 ff51 	bl	8001f60 <Error_Handler>
		  }
	buff[0]=0x16; // configuration mesure en continu du magnétomètre
 80010be:	2316      	movs	r3, #22
 80010c0:	723b      	strb	r3, [r7, #8]
		 	  if(HAL_I2C_Mem_Write(p_hi2c1,MAGNETO_ADD,AK8963_CNTL,1,&buff[0],1,10)!=HAL_OK){
 80010c2:	230a      	movs	r3, #10
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	2301      	movs	r3, #1
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	220a      	movs	r2, #10
 80010d4:	2118      	movs	r1, #24
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f002 fd40 	bl	8003b5c <HAL_I2C_Mem_Write>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d004      	beq.n	80010ec <Init+0xe4>
		 		  printf("probleme configuration mesure magnetometre --> fct Init \r\n");
 80010e2:	4847      	ldr	r0, [pc, #284]	; (8001200 <Init+0x1f8>)
 80010e4:	f007 f846 	bl	8008174 <puts>
		 	  	  Error_Handler();
 80010e8:	f000 ff3a 	bl	8001f60 <Error_Handler>

		 	  }

	/********** Réglage de la bande passante **********/

	buff[0]=0x3;
 80010ec:	2303      	movs	r3, #3
 80010ee:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,CONFIG,1,&buff[0],1,10)!=HAL_OK){
 80010f0:	230a      	movs	r3, #10
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2301      	movs	r3, #1
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	221a      	movs	r2, #26
 8001102:	21d0      	movs	r1, #208	; 0xd0
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f002 fd29 	bl	8003b5c <HAL_I2C_Mem_Write>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d004      	beq.n	800111a <Init+0x112>
		printf("probleme bande passante --> fct Init \r\n");
 8001110:	483c      	ldr	r0, [pc, #240]	; (8001204 <Init+0x1fc>)
 8001112:	f007 f82f 	bl	8008174 <puts>
		Error_Handler();
 8001116:	f000 ff23 	bl	8001f60 <Error_Handler>
			Error_Handler();
		}
*/

	// bande passante à 250Hz : FCHOICE = 11 => FCHOICE_b = 00, DLPF_CFG = 000
		HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD,  GYRO_CONFIG,  1, &buff[0], 1, 10);
 800111a:	230a      	movs	r3, #10
 800111c:	9302      	str	r3, [sp, #8]
 800111e:	2301      	movs	r3, #1
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2301      	movs	r3, #1
 800112a:	221b      	movs	r2, #27
 800112c:	21d0      	movs	r1, #208	; 0xd0
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f002 fe0e 	bl	8003d50 <HAL_I2C_Mem_Read>
		//Pour mettre 00 dans FCHOICE_b
		buff[0] =(buff[0] & (0b11111100)) ;
 8001134:	7a3b      	ldrb	r3, [r7, #8]
 8001136:	f023 0303 	bic.w	r3, r3, #3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	723b      	strb	r3, [r7, #8]
		if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,GYRO_CONFIG,1,&buff[0],1,10)!=HAL_OK){
 800113e:	230a      	movs	r3, #10
 8001140:	9302      	str	r3, [sp, #8]
 8001142:	2301      	movs	r3, #1
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2301      	movs	r3, #1
 800114e:	221b      	movs	r2, #27
 8001150:	21d0      	movs	r1, #208	; 0xd0
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f002 fd02 	bl	8003b5c <HAL_I2C_Mem_Write>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <Init+0x15a>
				Error_Handler(); }
 800115e:	f000 feff 	bl	8001f60 <Error_Handler>
		//Pour mettre 000 dans DLPF_CFG
		HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD, CONFIG,  1, &buff[0], 1, 10);
 8001162:	230a      	movs	r3, #10
 8001164:	9302      	str	r3, [sp, #8]
 8001166:	2301      	movs	r3, #1
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	221a      	movs	r2, #26
 8001174:	21d0      	movs	r1, #208	; 0xd0
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f002 fdea 	bl	8003d50 <HAL_I2C_Mem_Read>
		buff[0] =(buff[0] & (0b11111000)) ;
 800117c:	7a3b      	ldrb	r3, [r7, #8]
 800117e:	f023 0307 	bic.w	r3, r3, #7
 8001182:	b2db      	uxtb	r3, r3
 8001184:	723b      	strb	r3, [r7, #8]
		if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,CONFIG,1,&buff[0],1,10)!=HAL_OK){
 8001186:	230a      	movs	r3, #10
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2301      	movs	r3, #1
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	221a      	movs	r2, #26
 8001198:	21d0      	movs	r1, #208	; 0xd0
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f002 fcde 	bl	8003b5c <HAL_I2C_Mem_Write>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <Init+0x1a2>
				Error_Handler();
 80011a6:	f000 fedb 	bl	8001f60 <Error_Handler>
		}
*/

	/*********** Réglage de la fréquence d'échantillonnage **********/

	buff[0]=0xFF;
 80011aa:	23ff      	movs	r3, #255	; 0xff
 80011ac:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,SMPLRT_DIV,1,&buff[0],1,10)!=HAL_OK){
 80011ae:	230a      	movs	r3, #10
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	2301      	movs	r3, #1
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	2219      	movs	r2, #25
 80011c0:	21d0      	movs	r1, #208	; 0xd0
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f002 fcca 	bl	8003b5c <HAL_I2C_Mem_Write>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d004      	beq.n	80011d8 <Init+0x1d0>
		printf("probleme reglage frequence echantillonnage --> Init \r\n");
 80011ce:	480e      	ldr	r0, [pc, #56]	; (8001208 <Init+0x200>)
 80011d0:	f006 ffd0 	bl	8008174 <puts>
		Error_Handler();
 80011d4:	f000 fec4 	bl	8001f60 <Error_Handler>
	}
	HAL_I2C_Mem_Read(p_hi2c1,MPU_ADD,LP_ACCEL_ODR,1,&buff[0],1,10);
 80011d8:	230a      	movs	r3, #10
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	2301      	movs	r3, #1
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2301      	movs	r3, #1
 80011e8:	221e      	movs	r2, #30
 80011ea:	21d0      	movs	r1, #208	; 0xd0
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f002 fdaf 	bl	8003d50 <HAL_I2C_Mem_Read>
	// a faire : changer la valeur de DLPF_CFG à 2 par exemple et voir en mode debug si la valeur des 4 derniers bits de LP_ACCEL_ODR est à 4.

}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	0800bdb8 	.word	0x0800bdb8
 8001200:	0800bde8 	.word	0x0800bde8
 8001204:	0800be24 	.word	0x0800be24
 8001208:	0800be4c 	.word	0x0800be4c
 800120c:	00000000 	.word	0x00000000

08001210 <Measure_M>:
	 * @param hi2cx Pointeur vers une structure I2C qui contient l'information de configuration pour un i2c particulier
	 * @param tableau_donnee_utiles Pointeur vers une zone mémoire de type double contenant l’information de champ magnétique
	 * @retval None
	 */

void Measure_M(I2C_HandleTypeDef* p_hi2c1,double* mag, double* offset, double* coeff){
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b090      	sub	sp, #64	; 0x40
 8001214:	af04      	add	r7, sp, #16
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
		uint8_t buffer[6];
		uint8_t asa[3];
		uint8_t drdy[1];


		HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_ST1,1,drdy,1,20);
 800121e:	2314      	movs	r3, #20
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	2301      	movs	r3, #1
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2301      	movs	r3, #1
 800122e:	2202      	movs	r2, #2
 8001230:	2118      	movs	r1, #24
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f002 fd8c 	bl	8003d50 <HAL_I2C_Mem_Read>
		drdy[0]=((drdy[0])&(00000001));
 8001238:	7d3b      	ldrb	r3, [r7, #20]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	753b      	strb	r3, [r7, #20]
		if(drdy[0]==1){
 8001242:	7d3b      	ldrb	r3, [r7, #20]
 8001244:	2b01      	cmp	r3, #1
 8001246:	f040 8115 	bne.w	8001474 <Measure_M+0x264>

			if((HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_XOUT_L,1,buffer,7,20)==HAL_OK)
 800124a:	2314      	movs	r3, #20
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	2307      	movs	r3, #7
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	2118      	movs	r1, #24
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f002 fd76 	bl	8003d50 <HAL_I2C_Mem_Read>
 8001264:	4603      	mov	r3, r0
					&(HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_ASAX,1,asa,3,20)==HAL_OK)){
 8001266:	2b00      	cmp	r3, #0
 8001268:	bf0c      	ite	eq
 800126a:	2301      	moveq	r3, #1
 800126c:	2300      	movne	r3, #0
 800126e:	b2dc      	uxtb	r4, r3
 8001270:	2314      	movs	r3, #20
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	2303      	movs	r3, #3
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	f107 0318 	add.w	r3, r7, #24
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2301      	movs	r3, #1
 8001280:	2210      	movs	r2, #16
 8001282:	2118      	movs	r1, #24
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f002 fd63 	bl	8003d50 <HAL_I2C_Mem_Read>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf0c      	ite	eq
 8001290:	2301      	moveq	r3, #1
 8001292:	2300      	movne	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4023      	ands	r3, r4
 8001298:	b2db      	uxtb	r3, r3
			if((HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_XOUT_L,1,buffer,7,20)==HAL_OK)
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 80ea 	beq.w	8001474 <Measure_M+0x264>


						x = (uint16_t)((buffer[1]<<8)+ buffer[0]);
 80012a0:	7f7b      	ldrb	r3, [r7, #29]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	7f3b      	ldrb	r3, [r7, #28]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4413      	add	r3, r2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
						y = (uint16_t)((buffer[3]<<8)+ buffer[2]);
 80012b2:	7ffb      	ldrb	r3, [r7, #31]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	7fbb      	ldrb	r3, [r7, #30]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4413      	add	r3, r2
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
						z = (uint16_t)((buffer[5]<<8)+ buffer[4]);
 80012c4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	857b      	strh	r3, [r7, #42]	; 0x2a
						asax=asa[0];
 80012da:	7e3b      	ldrb	r3, [r7, #24]
 80012dc:	853b      	strh	r3, [r7, #40]	; 0x28
						asay=asa[1];
 80012de:	7e7b      	ldrb	r3, [r7, #25]
 80012e0:	84fb      	strh	r3, [r7, #38]	; 0x26
						asaz=asa[2];
 80012e2:	7ebb      	ldrb	r3, [r7, #26]
 80012e4:	84bb      	strh	r3, [r7, #36]	; 0x24
						mag[0] = (x*((((asax-128)*0.5)/128)+1)*4912)/32760;
 80012e6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f922 	bl	8000534 <__aeabi_i2d>
 80012f0:	4604      	mov	r4, r0
 80012f2:	460d      	mov	r5, r1
 80012f4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80012f8:	3b80      	subs	r3, #128	; 0x80
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f91a 	bl	8000534 <__aeabi_i2d>
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b62      	ldr	r3, [pc, #392]	; (8001490 <Measure_M+0x280>)
 8001306:	f7ff f97f 	bl	8000608 <__aeabi_dmul>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	4b5f      	ldr	r3, [pc, #380]	; (8001494 <Measure_M+0x284>)
 8001318:	f7ff faa0 	bl	800085c <__aeabi_ddiv>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	4b5b      	ldr	r3, [pc, #364]	; (8001498 <Measure_M+0x288>)
 800132a:	f7fe ffb7 	bl	800029c <__adddf3>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4620      	mov	r0, r4
 8001334:	4629      	mov	r1, r5
 8001336:	f7ff f967 	bl	8000608 <__aeabi_dmul>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	a34f      	add	r3, pc, #316	; (adr r3, 8001480 <Measure_M+0x270>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff f95e 	bl	8000608 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	a34c      	add	r3, pc, #304	; (adr r3, 8001488 <Measure_M+0x278>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7ff fa7f 	bl	800085c <__aeabi_ddiv>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	68b9      	ldr	r1, [r7, #8]
 8001364:	e9c1 2300 	strd	r2, r3, [r1]
						mag[1] = (y*((((asay-128)*0.5)/128)+1)*4912)/32760;
 8001368:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8e1 	bl	8000534 <__aeabi_i2d>
 8001372:	4604      	mov	r4, r0
 8001374:	460d      	mov	r5, r1
 8001376:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800137a:	3b80      	subs	r3, #128	; 0x80
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8d9 	bl	8000534 <__aeabi_i2d>
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b42      	ldr	r3, [pc, #264]	; (8001490 <Measure_M+0x280>)
 8001388:	f7ff f93e 	bl	8000608 <__aeabi_dmul>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	4b3e      	ldr	r3, [pc, #248]	; (8001494 <Measure_M+0x284>)
 800139a:	f7ff fa5f 	bl	800085c <__aeabi_ddiv>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <Measure_M+0x288>)
 80013ac:	f7fe ff76 	bl	800029c <__adddf3>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4620      	mov	r0, r4
 80013b6:	4629      	mov	r1, r5
 80013b8:	f7ff f926 	bl	8000608 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	a32e      	add	r3, pc, #184	; (adr r3, 8001480 <Measure_M+0x270>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7ff f91d 	bl	8000608 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	f103 0408 	add.w	r4, r3, #8
 80013dc:	a32a      	add	r3, pc, #168	; (adr r3, 8001488 <Measure_M+0x278>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	f7ff fa3b 	bl	800085c <__aeabi_ddiv>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	e9c4 2300 	strd	r2, r3, [r4]
						mag[2] = (z*((((asaz-128)*0.5)/128)+1)*4912)/32760;
 80013ee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f89e 	bl	8000534 <__aeabi_i2d>
 80013f8:	4604      	mov	r4, r0
 80013fa:	460d      	mov	r5, r1
 80013fc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001400:	3b80      	subs	r3, #128	; 0x80
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f896 	bl	8000534 <__aeabi_i2d>
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	4b20      	ldr	r3, [pc, #128]	; (8001490 <Measure_M+0x280>)
 800140e:	f7ff f8fb 	bl	8000608 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <Measure_M+0x284>)
 8001420:	f7ff fa1c 	bl	800085c <__aeabi_ddiv>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <Measure_M+0x288>)
 8001432:	f7fe ff33 	bl	800029c <__adddf3>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4620      	mov	r0, r4
 800143c:	4629      	mov	r1, r5
 800143e:	f7ff f8e3 	bl	8000608 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	a30d      	add	r3, pc, #52	; (adr r3, 8001480 <Measure_M+0x270>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	f7ff f8da 	bl	8000608 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	f103 0410 	add.w	r4, r3, #16
 8001462:	a309      	add	r3, pc, #36	; (adr r3, 8001488 <Measure_M+0x278>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff f9f8 	bl	800085c <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	e9c4 2300 	strd	r2, r3, [r4]
						mag[2] = (mag[2]-offset[2])*coeff[2];
						*/

			}
		}
}
 8001474:	bf00      	nop
 8001476:	3730      	adds	r7, #48	; 0x30
 8001478:	46bd      	mov	sp, r7
 800147a:	bdb0      	pop	{r4, r5, r7, pc}
 800147c:	f3af 8000 	nop.w
 8001480:	00000000 	.word	0x00000000
 8001484:	40b33000 	.word	0x40b33000
 8001488:	00000000 	.word	0x00000000
 800148c:	40dffe00 	.word	0x40dffe00
 8001490:	3fe00000 	.word	0x3fe00000
 8001494:	40600000 	.word	0x40600000
 8001498:	3ff00000 	.word	0x3ff00000
 800149c:	00000000 	.word	0x00000000

080014a0 <magnetic_field_to_degree>:
#include <math.h>



float magnetic_field_to_degree(double* mag_calibrated)
{
 80014a0:	b5b0      	push	{r4, r5, r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	float heading = atan2(-mag_calibrated[1], mag_calibrated[0]); // atan2(y,x)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3308      	adds	r3, #8
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	4614      	mov	r4, r2
 80014b2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	ed93 7b00 	vldr	d7, [r3]
 80014bc:	eeb0 1a47 	vmov.f32	s2, s14
 80014c0:	eef0 1a67 	vmov.f32	s3, s15
 80014c4:	ec45 4b10 	vmov	d0, r4, r5
 80014c8:	f00a fb9b 	bl	800bc02 <atan2>
 80014cc:	ec53 2b10 	vmov	r2, r3, d0
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fb90 	bl	8000bf8 <__aeabi_d2f>
 80014d8:	4603      	mov	r3, r0
 80014da:	613b      	str	r3, [r7, #16]


	  //float declinationAngle = 0.22; // Angle de déclinaison magnétique pour Paris
	  float declinationAngle = 0.21; // Angle de déclinaison magnétique pour Barcelone
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <magnetic_field_to_degree+0xb8>)
 80014de:	60fb      	str	r3, [r7, #12]
	  heading += declinationAngle;   // site pour connaitre la déclinaison : https://www.ngdc.noaa.gov/geomag/calculators/magcalc
 80014e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80014e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ec:	edc7 7a04 	vstr	s15, [r7, #16]


	  float headingDegrees = heading * 180 / M_PI; // Conversion en degrés
 80014f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80014f4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800155c <magnetic_field_to_degree+0xbc>
 80014f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fc:	ee17 0a90 	vmov	r0, s15
 8001500:	f7ff f82a 	bl	8000558 <__aeabi_f2d>
 8001504:	a312      	add	r3, pc, #72	; (adr r3, 8001550 <magnetic_field_to_degree+0xb0>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7ff f9a7 	bl	800085c <__aeabi_ddiv>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff fb6f 	bl	8000bf8 <__aeabi_d2f>
 800151a:	4603      	mov	r3, r0
 800151c:	617b      	str	r3, [r7, #20]

	  if(headingDegrees<=0){
 800151e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001522:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	d807      	bhi.n	800153c <magnetic_field_to_degree+0x9c>
			  headingDegrees+=360;
 800152c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001530:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001560 <magnetic_field_to_degree+0xc0>
 8001534:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001538:	edc7 7a05 	vstr	s15, [r7, #20]
		  }



	  return headingDegrees;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	ee07 3a90 	vmov	s15, r3
}
 8001542:	eeb0 0a67 	vmov.f32	s0, s15
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bdb0      	pop	{r4, r5, r7, pc}
 800154c:	f3af 8000 	nop.w
 8001550:	54442d18 	.word	0x54442d18
 8001554:	400921fb 	.word	0x400921fb
 8001558:	3e570a3d 	.word	0x3e570a3d
 800155c:	43340000 	.word	0x43340000
 8001560:	43b40000 	.word	0x43b40000

08001564 <Delta_theta_calculation>:

double Delta_theta_calculation(TypeDataCansat DataCansat){
 8001564:	b084      	sub	sp, #16
 8001566:	b580      	push	{r7, lr}
 8001568:	b088      	sub	sp, #32
 800156a:	af00      	add	r7, sp, #0
 800156c:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001570:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	double theta_target = 0;
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double latitude_vector = DataCansat.GPS.latitude_Target - DataCansat.GPS.latitude_Cansat;
 8001580:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001584:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001588:	f7fe fe86 	bl	8000298 <__aeabi_dsub>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double longitude_vector = DataCansat.GPS.longitude_Target - DataCansat.GPS.longitude_Cansat;
 8001594:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001598:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800159c:	f7fe fe7c 	bl	8000298 <__aeabi_dsub>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	theta_target = atan(longitude_vector/latitude_vector);
 80015a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015b0:	f7ff f954 	bl	800085c <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	ec43 2b17 	vmov	d7, r2, r3
 80015bc:	eeb0 0a47 	vmov.f32	s0, s14
 80015c0:	eef0 0a67 	vmov.f32	s1, s15
 80015c4:	f00a f974 	bl	800b8b0 <atan>
 80015c8:	ed87 0b06 	vstr	d0, [r7, #24]

	double Delta_theta = theta_target - DataCansat.IMU.MagnetometerData.degree_angle;
 80015cc:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80015d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015d4:	f7fe fe60 	bl	8000298 <__aeabi_dsub>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	e9c7 2300 	strd	r2, r3, [r7]

	return Delta_theta;
 80015e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015e4:	ec43 2b17 	vmov	d7, r2, r3
}
 80015e8:	eeb0 0a47 	vmov.f32	s0, s14
 80015ec:	eef0 0a67 	vmov.f32	s1, s15
 80015f0:	3720      	adds	r7, #32
 80015f2:	46bd      	mov	sp, r7
 80015f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015f8:	b004      	add	sp, #16
 80015fa:	4770      	bx	lr

080015fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	4b34      	ldr	r3, [pc, #208]	; (80016e8 <MX_GPIO_Init+0xec>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a33      	ldr	r2, [pc, #204]	; (80016e8 <MX_GPIO_Init+0xec>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <MX_GPIO_Init+0xec>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <MX_GPIO_Init+0xec>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a2c      	ldr	r2, [pc, #176]	; (80016e8 <MX_GPIO_Init+0xec>)
 8001638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <MX_GPIO_Init+0xec>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <MX_GPIO_Init+0xec>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a25      	ldr	r2, [pc, #148]	; (80016e8 <MX_GPIO_Init+0xec>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <MX_GPIO_Init+0xec>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <MX_GPIO_Init+0xec>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <MX_GPIO_Init+0xec>)
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <MX_GPIO_Init+0xec>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	2120      	movs	r1, #32
 8001686:	4819      	ldr	r0, [pc, #100]	; (80016ec <MX_GPIO_Init+0xf0>)
 8001688:	f001 fdcc 	bl	8003224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800168c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001692:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	4813      	ldr	r0, [pc, #76]	; (80016f0 <MX_GPIO_Init+0xf4>)
 80016a4:	f001 fc22 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016a8:	2320      	movs	r3, #32
 80016aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	480b      	ldr	r0, [pc, #44]	; (80016ec <MX_GPIO_Init+0xf0>)
 80016c0:	f001 fc14 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4804      	ldr	r0, [pc, #16]	; (80016ec <MX_GPIO_Init+0xf0>)
 80016da:	f001 fc07 	bl	8002eec <HAL_GPIO_Init>

}
 80016de:	bf00      	nop
 80016e0:	3728      	adds	r7, #40	; 0x28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40020800 	.word	0x40020800

080016f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_I2C1_Init+0x50>)
 80016fa:	4a13      	ldr	r2, [pc, #76]	; (8001748 <MX_I2C1_Init+0x54>)
 80016fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_I2C1_Init+0x50>)
 8001700:	4a12      	ldr	r2, [pc, #72]	; (800174c <MX_I2C1_Init+0x58>)
 8001702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_I2C1_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_I2C1_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_I2C1_Init+0x50>)
 8001712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001716:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001718:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <MX_I2C1_Init+0x50>)
 800171a:	2200      	movs	r2, #0
 800171c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_I2C1_Init+0x50>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <MX_I2C1_Init+0x50>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_I2C1_Init+0x50>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001730:	4804      	ldr	r0, [pc, #16]	; (8001744 <MX_I2C1_Init+0x50>)
 8001732:	f001 fdab 	bl	800328c <HAL_I2C_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800173c:	f000 fc10 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200001fc 	.word	0x200001fc
 8001748:	40005400 	.word	0x40005400
 800174c:	000186a0 	.word	0x000186a0

08001750 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <HAL_I2C_MspInit+0x84>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d12c      	bne.n	80017cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_I2C_MspInit+0x88>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <HAL_I2C_MspInit+0x88>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_I2C_MspInit+0x88>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800178e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001794:	2312      	movs	r3, #18
 8001796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179c:	2303      	movs	r3, #3
 800179e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017a0:	2304      	movs	r3, #4
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4619      	mov	r1, r3
 80017aa:	480c      	ldr	r0, [pc, #48]	; (80017dc <HAL_I2C_MspInit+0x8c>)
 80017ac:	f001 fb9e 	bl	8002eec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_I2C_MspInit+0x88>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <HAL_I2C_MspInit+0x88>)
 80017ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017be:	6413      	str	r3, [r2, #64]	; 0x40
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_I2C_MspInit+0x88>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017cc:	bf00      	nop
 80017ce:	3728      	adds	r7, #40	; 0x28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40005400 	.word	0x40005400
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020400 	.word	0x40020400

080017e0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80017e8:	1d39      	adds	r1, r7, #4
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017ee:	2201      	movs	r2, #1
 80017f0:	4803      	ldr	r0, [pc, #12]	; (8001800 <__io_putchar+0x20>)
 80017f2:	f004 ff60 	bl	80066b6 <HAL_UART_Transmit>
return ch;
 80017f6:	687b      	ldr	r3, [r7, #4]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200008a8 	.word	0x200008a8

08001804 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){ // fonction de callback de l'UART
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]


	if(huart == &huart1){
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a07      	ldr	r2, [pc, #28]	; (800182c <HAL_UART_RxCpltCallback+0x28>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d107      	bne.n	8001824 <HAL_UART_RxCpltCallback+0x20>

		it_rx_gps = 1;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_UART_RxCpltCallback+0x2c>)
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t *)&uart_gps_rx, 1);
 800181a:	2201      	movs	r2, #1
 800181c:	4905      	ldr	r1, [pc, #20]	; (8001834 <HAL_UART_RxCpltCallback+0x30>)
 800181e:	4803      	ldr	r0, [pc, #12]	; (800182c <HAL_UART_RxCpltCallback+0x28>)
 8001820:	f004 ffdb 	bl	80067da <HAL_UART_Receive_IT>

	}

}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000864 	.word	0x20000864
 8001830:	20000325 	.word	0x20000325
 8001834:	20000320 	.word	0x20000320

08001838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001838:	b5b0      	push	{r4, r5, r7, lr}
 800183a:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 800183e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	int gps_state = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001846:	f001 f917 	bl	8002a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800184a:	f000 fb1f 	bl	8001e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800184e:	f7ff fed5 	bl	80015fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001852:	f001 f819 	bl	8002888 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001856:	f7ff ff4d 	bl	80016f4 <MX_I2C1_Init>
  MX_TIM2_Init();
 800185a:	f000 fdf5 	bl	8002448 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800185e:	f000 ffe9 	bl	8002834 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001862:	f000 fe71 	bl	8002548 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001866:	f000 febd 	bl	80025e4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  printf("------------------------\r\n");
 800186a:	48c1      	ldr	r0, [pc, #772]	; (8001b70 <main+0x338>)
 800186c:	f006 fc82 	bl	8008174 <puts>
  printf("------------------------\r\n");
 8001870:	48bf      	ldr	r0, [pc, #764]	; (8001b70 <main+0x338>)
 8001872:	f006 fc7f 	bl	8008174 <puts>
  printf("------------------------\r\n");
 8001876:	48be      	ldr	r0, [pc, #760]	; (8001b70 <main+0x338>)
 8001878:	f006 fc7c 	bl	8008174 <puts>
  printf("------------------------\r\n");
 800187c:	48bc      	ldr	r0, [pc, #752]	; (8001b70 <main+0x338>)
 800187e:	f006 fc79 	bl	8008174 <puts>
  printf("initialisation du CanSat\r\n");
 8001882:	48bc      	ldr	r0, [pc, #752]	; (8001b74 <main+0x33c>)
 8001884:	f006 fc76 	bl	8008174 <puts>
  printf("------------------------\r\n");
 8001888:	48b9      	ldr	r0, [pc, #740]	; (8001b70 <main+0x338>)
 800188a:	f006 fc73 	bl	8008174 <puts>
  printf("------------------------\r\n");
 800188e:	48b8      	ldr	r0, [pc, #736]	; (8001b70 <main+0x338>)
 8001890:	f006 fc70 	bl	8008174 <puts>
  printf("------------------------\r\n");
 8001894:	48b6      	ldr	r0, [pc, #728]	; (8001b70 <main+0x338>)
 8001896:	f006 fc6d 	bl	8008174 <puts>
  printf("------------------------\r\n");
 800189a:	48b5      	ldr	r0, [pc, #724]	; (8001b70 <main+0x338>)
 800189c:	f006 fc6a 	bl	8008174 <puts>

    int x=0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    int i=0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    int Devices[100]={0};
 80018ac:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80018b0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80018b4:	4618      	mov	r0, r3
 80018b6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80018ba:	461a      	mov	r2, r3
 80018bc:	2100      	movs	r1, #0
 80018be:	f005 ff61 	bl	8007784 <memset>

   uint8_t pData[100] = {0};
 80018c2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80018c6:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	3304      	adds	r3, #4
 80018d0:	2260      	movs	r2, #96	; 0x60
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f005 ff55 	bl	8007784 <memset>
   /**********                           *********
    * ******** INIT MPU-9250 (IMU_10DOF) *********
    * ********                           *********
    */

   printf("initialisation de l'IMU \r\n \r\n");
 80018da:	48a7      	ldr	r0, [pc, #668]	; (8001b78 <main+0x340>)
 80018dc:	f006 fc4a 	bl	8008174 <puts>

   // Initialisation du capteur MPU-9250

   Init(&hi2c1);
 80018e0:	48a6      	ldr	r0, [pc, #664]	; (8001b7c <main+0x344>)
 80018e2:	f7ff fb91 	bl	8001008 <Init>

   // vérification identité capteur MPU-9250

   pData[0]= WHO_AM_I_MPU9250;
 80018e6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80018ea:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80018ee:	2275      	movs	r2, #117	; 0x75
 80018f0:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Master_Transmit(&hi2c1, MPU_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 80018f2:	1d3a      	adds	r2, r7, #4
 80018f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2301      	movs	r3, #1
 80018fc:	21d0      	movs	r1, #208	; 0xd0
 80018fe:	489f      	ldr	r0, [pc, #636]	; (8001b7c <main+0x344>)
 8001900:	f001 fe08 	bl	8003514 <HAL_I2C_Master_Transmit>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <main+0xd8>
    {
  	  printf("il y a une erreur avec I2C Master Transmit \r\n");
 800190a:	489d      	ldr	r0, [pc, #628]	; (8001b80 <main+0x348>)
 800190c:	f006 fc32 	bl	8008174 <puts>
    }
    if(HAL_I2C_Master_Receive(&hi2c1, MPU_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001910:	1d3a      	adds	r2, r7, #4
 8001912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2301      	movs	r3, #1
 800191a:	21d0      	movs	r1, #208	; 0xd0
 800191c:	4897      	ldr	r0, [pc, #604]	; (8001b7c <main+0x344>)
 800191e:	f001 fef7 	bl	8003710 <HAL_I2C_Master_Receive>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <main+0xf6>
    {
  	  printf("il y a une erreur avec I2C Master Receive \r\n");
 8001928:	4896      	ldr	r0, [pc, #600]	; (8001b84 <main+0x34c>)
 800192a:	f006 fc23 	bl	8008174 <puts>
    }


    printf(" L'identifiant du capteur est : %x \r\n", pData[0]);
 800192e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001932:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	4893      	ldr	r0, [pc, #588]	; (8001b88 <main+0x350>)
 800193c:	f006 fb94 	bl	8008068 <iprintf>
    if((pData[0] =! 0x71))
 8001940:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001944:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
    {
  	  printf("ce n'est pas le bon capteur \r\n");
    }
    else
  	  printf("MPU-9250 identified \r\n");
 800194c:	488f      	ldr	r0, [pc, #572]	; (8001b8c <main+0x354>)
 800194e:	f006 fc11 	bl	8008174 <puts>

    // vérification identité AK8963C (magnétomètre)

    pData[0]= WHO_AM_I_AK8963;
 8001952:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001956:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
      if(HAL_I2C_Master_Transmit(&hi2c1, MAGNETO_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 800195e:	1d3a      	adds	r2, r7, #4
 8001960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2301      	movs	r3, #1
 8001968:	2118      	movs	r1, #24
 800196a:	4884      	ldr	r0, [pc, #528]	; (8001b7c <main+0x344>)
 800196c:	f001 fdd2 	bl	8003514 <HAL_I2C_Master_Transmit>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <main+0x144>
      {
    	  printf("il y a une erreur avec I2C Master Transmit \r\n");
 8001976:	4882      	ldr	r0, [pc, #520]	; (8001b80 <main+0x348>)
 8001978:	f006 fbfc 	bl	8008174 <puts>
      }
      if(HAL_I2C_Master_Receive(&hi2c1, MAGNETO_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 800197c:	1d3a      	adds	r2, r7, #4
 800197e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2301      	movs	r3, #1
 8001986:	2118      	movs	r1, #24
 8001988:	487c      	ldr	r0, [pc, #496]	; (8001b7c <main+0x344>)
 800198a:	f001 fec1 	bl	8003710 <HAL_I2C_Master_Receive>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d002      	beq.n	800199a <main+0x162>
      {
    	  printf("il y a une erreur avec I2C Master Receive \r\n");
 8001994:	487b      	ldr	r0, [pc, #492]	; (8001b84 <main+0x34c>)
 8001996:	f006 fbed 	bl	8008174 <puts>
      }


      printf(" L'identifiant du magnétomètre est : %x \r\n", pData[0]);
 800199a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800199e:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	487a      	ldr	r0, [pc, #488]	; (8001b90 <main+0x358>)
 80019a8:	f006 fb5e 	bl	8008068 <iprintf>
      if((pData[0] =! 0x48))
 80019ac:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80019b0:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
      {
    	  printf("ce n'est pas le bon capteur \r\n  ****** \r\n ****** \r\n ****** \r\n");
      }
      else
    	  printf("AK8963C identified \r\n  ****** \r\n ****** \r\n ****** \r\n");
 80019b8:	4876      	ldr	r0, [pc, #472]	; (8001b94 <main+0x35c>)
 80019ba:	f006 fbdb 	bl	8008174 <puts>



  // check les périphériques i2c disponibles

    for (i=0;i<256;i++){
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80019c4:	e02a      	b.n	8001a1c <main+0x1e4>
         	  if(HAL_I2C_IsDeviceReady(&hi2c1, i, 4, 20)==HAL_OK){
 80019c6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80019ca:	b299      	uxth	r1, r3
 80019cc:	2314      	movs	r3, #20
 80019ce:	2204      	movs	r2, #4
 80019d0:	486a      	ldr	r0, [pc, #424]	; (8001b7c <main+0x344>)
 80019d2:	f002 fbe3 	bl	800419c <HAL_I2C_IsDeviceReady>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d11a      	bne.n	8001a12 <main+0x1da>
         		  Devices[x]=i;
 80019dc:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80019e0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80019e4:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80019e8:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 80019ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
         		  printf("%d \r\n",Devices[x]);
 80019f0:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80019f4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80019f8:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80019fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a00:	4619      	mov	r1, r3
 8001a02:	4865      	ldr	r0, [pc, #404]	; (8001b98 <main+0x360>)
 8001a04:	f006 fb30 	bl	8008068 <iprintf>
         		  x=x+1;
 8001a08:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    for (i=0;i<256;i++){
 8001a12:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001a16:	3301      	adds	r3, #1
 8001a18:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8001a1c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001a20:	2bff      	cmp	r3, #255	; 0xff
 8001a22:	ddd0      	ble.n	80019c6 <main+0x18e>
    	  *            entrée des données GPS de la cible
    	  ***********************************************************/

    	  //Position GPS cible : 43°13'18.7"N 0°03'10.0"W  --> données telles que décrites dans le règlement 2023

    	  pDataCansat.GPS.latitude_Target = 43.2218611;
 8001a24:	495d      	ldr	r1, [pc, #372]	; (8001b9c <main+0x364>)
 8001a26:	a34e      	add	r3, pc, #312	; (adr r3, 8001b60 <main+0x328>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	e9c1 2308 	strd	r2, r3, [r1, #32]
    	  pDataCansat.GPS.longitude_Target = -0.05277777777777778;
 8001a30:	495a      	ldr	r1, [pc, #360]	; (8001b9c <main+0x364>)
 8001a32:	a34d      	add	r3, pc, #308	; (adr r3, 8001b68 <main+0x330>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    /**********                              *********
     * ******** INITIALISATION Pololu_sds01a *********
     * ********                              *********
     */

    uint16_t gpio_value = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
    int Drop_flag = 0; // flag that indicates if the Cansat probe has been launch, in order to begin the missions
 8001a42:	2300      	movs	r3, #0
 8001a44:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    /**********                       *********
     * ******** INITIALISATION Servos *********
     * ********                       *********
     */

    int altitude_ouverture_ballons = 30; // altitude à partir de laquelle on démarre l'opération
 8001a48:	231e      	movs	r3, #30
 8001a4a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    									 // d'ouverture de la structure gonflable
    									 // à déterminer expérimentalement --> prendre en compte l'altitude locale

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4853      	ldr	r0, [pc, #332]	; (8001ba0 <main+0x368>)
 8001a52:	f003 ff21 	bl	8005898 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001a56:	2104      	movs	r1, #4
 8001a58:	4851      	ldr	r0, [pc, #324]	; (8001ba0 <main+0x368>)
 8001a5a:	f003 ff1d 	bl	8005898 <HAL_TIM_PWM_Start>


    /************* INITIALISATION TIMER3 *************/ //pour calculer l'angle et déclencher le mouvement des servos toutes les secondes

    int demarrage_tim3 = 1;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230


    HAL_UART_Receive_IT(&huart1, (uint8_t *)&uart_gps_rx, 1);
 8001a64:	2201      	movs	r2, #1
 8001a66:	494f      	ldr	r1, [pc, #316]	; (8001ba4 <main+0x36c>)
 8001a68:	484f      	ldr	r0, [pc, #316]	; (8001ba8 <main+0x370>)
 8001a6a:	f004 feb6 	bl	80067da <HAL_UART_Receive_IT>
  {
	  /************** Récupération des données GPS *************/

	  //GPS_data_reading(it_rx_gps, data_rdy, first_data, pDataCansat, coordonnees, uart_gps_rx, i);

	  if(it_rx_gps){
 8001a6e:	4b4f      	ldr	r3, [pc, #316]	; (8001bac <main+0x374>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 81a2 	beq.w	8001dbc <main+0x584>
	  	  		if(data_rdy == 1){
 8001a78:	4b4d      	ldr	r3, [pc, #308]	; (8001bb0 <main+0x378>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	f040 8155 	bne.w	8001d2c <main+0x4f4>
	  	  				for(int j = 0; j<=50;j++){
 8001a82:	2300      	movs	r3, #0
 8001a84:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8001a88:	e00f      	b.n	8001aaa <main+0x272>
	  	  					position[j] = coordonnees[j+18]; //position[] comprend la latitude et la longitude telles que sur la trame reçue
 8001a8a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001a8e:	3312      	adds	r3, #18
 8001a90:	4a48      	ldr	r2, [pc, #288]	; (8001bb4 <main+0x37c>)
 8001a92:	5cd1      	ldrb	r1, [r2, r3]
 8001a94:	4a48      	ldr	r2, [pc, #288]	; (8001bb8 <main+0x380>)
 8001a96:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001a9a:	4413      	add	r3, r2
 8001a9c:	460a      	mov	r2, r1
 8001a9e:	701a      	strb	r2, [r3, #0]
	  	  				for(int j = 0; j<=50;j++){
 8001aa0:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8001aaa:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001aae:	2b32      	cmp	r3, #50	; 0x32
 8001ab0:	ddeb      	ble.n	8001a8a <main+0x252>
	  	  					//En effet, les coordonnes sont d'abord de cette forme : "$GNGGA,121933.000,4902.36627,N,00204.31287,E,1,05,13.3,0.0,M,0.0,M,,*4D"
	  	  					//On sélectionne donc la partie qui est après l'identifieur et l'heure mais avant le ",E,".
	  	  				}

	  	  				for(int k = 0; k<=9;k++){
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001ab8:	e00f      	b.n	8001ada <main+0x2a2>
	  	  					latitude_data[k] = position[k+1]; //latitude non convertie
 8001aba:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001abe:	3301      	adds	r3, #1
 8001ac0:	4a3d      	ldr	r2, [pc, #244]	; (8001bb8 <main+0x380>)
 8001ac2:	5cd1      	ldrb	r1, [r2, r3]
 8001ac4:	4a3d      	ldr	r2, [pc, #244]	; (8001bbc <main+0x384>)
 8001ac6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001aca:	4413      	add	r3, r2
 8001acc:	460a      	mov	r2, r1
 8001ace:	701a      	strb	r2, [r3, #0]
	  	  				for(int k = 0; k<=9;k++){
 8001ad0:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001ada:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001ade:	2b09      	cmp	r3, #9
 8001ae0:	ddeb      	ble.n	8001aba <main+0x282>
	  	  				}
	  	  				for(int l = 0; l<=10;l++){
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001ae8:	e00f      	b.n	8001b0a <main+0x2d2>
	  	  					longitude_data[l] = position[l+14]; //longitude non convertie
 8001aea:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001aee:	330e      	adds	r3, #14
 8001af0:	4a31      	ldr	r2, [pc, #196]	; (8001bb8 <main+0x380>)
 8001af2:	5cd1      	ldrb	r1, [r2, r3]
 8001af4:	4a32      	ldr	r2, [pc, #200]	; (8001bc0 <main+0x388>)
 8001af6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001afa:	4413      	add	r3, r2
 8001afc:	460a      	mov	r2, r1
 8001afe:	701a      	strb	r2, [r3, #0]
	  	  				for(int l = 0; l<=10;l++){
 8001b00:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001b04:	3301      	adds	r3, #1
 8001b06:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001b0a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001b0e:	2b0a      	cmp	r3, #10
 8001b10:	ddeb      	ble.n	8001aea <main+0x2b2>
	  	  				}
	  	  				for(int h = 0; h<=4; h++){
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8001b18:	e00f      	b.n	8001b3a <main+0x302>
	  	  					altitude_data[h] = position[h+37]; //altitude non convertie
 8001b1a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001b1e:	3325      	adds	r3, #37	; 0x25
 8001b20:	4a25      	ldr	r2, [pc, #148]	; (8001bb8 <main+0x380>)
 8001b22:	5cd1      	ldrb	r1, [r2, r3]
 8001b24:	4a27      	ldr	r2, [pc, #156]	; (8001bc4 <main+0x38c>)
 8001b26:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001b2a:	4413      	add	r3, r2
 8001b2c:	460a      	mov	r2, r1
 8001b2e:	701a      	strb	r2, [r3, #0]
	  	  				for(int h = 0; h<=4; h++){
 8001b30:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001b34:	3301      	adds	r3, #1
 8001b36:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8001b3a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	ddeb      	ble.n	8001b1a <main+0x2e2>
	  	  				}

	  	  				lat2[0] = latitude_data[0];
 8001b42:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <main+0x384>)
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <main+0x390>)
 8001b48:	701a      	strb	r2, [r3, #0]
	  	  				lat2[1] = latitude_data[1]; //lat2 -> les deux digits avant la virgue du degré de la lat.
 8001b4a:	4b1c      	ldr	r3, [pc, #112]	; (8001bbc <main+0x384>)
 8001b4c:	785a      	ldrb	r2, [r3, #1]
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <main+0x390>)
 8001b50:	705a      	strb	r2, [r3, #1]

	  	  				for(int m = 0; m<=6;m++){
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001b58:	e048      	b.n	8001bec <main+0x3b4>
 8001b5a:	bf00      	nop
 8001b5c:	f3af 8000 	nop.w
 8001b60:	f1cc6096 	.word	0xf1cc6096
 8001b64:	40459c65 	.word	0x40459c65
 8001b68:	5b05b05b 	.word	0x5b05b05b
 8001b6c:	bfab05b0 	.word	0xbfab05b0
 8001b70:	0800bed0 	.word	0x0800bed0
 8001b74:	0800beec 	.word	0x0800beec
 8001b78:	0800bf08 	.word	0x0800bf08
 8001b7c:	200001fc 	.word	0x200001fc
 8001b80:	0800bf28 	.word	0x0800bf28
 8001b84:	0800bf58 	.word	0x0800bf58
 8001b88:	0800bf84 	.word	0x0800bf84
 8001b8c:	0800bfac 	.word	0x0800bfac
 8001b90:	0800bfc4 	.word	0x0800bfc4
 8001b94:	0800bff4 	.word	0x0800bff4
 8001b98:	0800c028 	.word	0x0800c028
 8001b9c:	20000250 	.word	0x20000250
 8001ba0:	2000078c 	.word	0x2000078c
 8001ba4:	20000320 	.word	0x20000320
 8001ba8:	20000864 	.word	0x20000864
 8001bac:	20000325 	.word	0x20000325
 8001bb0:	20000784 	.word	0x20000784
 8001bb4:	20000328 	.word	0x20000328
 8001bb8:	20000730 	.word	0x20000730
 8001bbc:	2000071c 	.word	0x2000071c
 8001bc0:	20000710 	.word	0x20000710
 8001bc4:	20000728 	.word	0x20000728
 8001bc8:	20000764 	.word	0x20000764
	  	  					lat7[m] = latitude_data[m+2]; //lat 7 -> ce qui reste après la virgule de la lat.
 8001bcc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	4a98      	ldr	r2, [pc, #608]	; (8001e34 <main+0x5fc>)
 8001bd4:	5cd1      	ldrb	r1, [r2, r3]
 8001bd6:	4a98      	ldr	r2, [pc, #608]	; (8001e38 <main+0x600>)
 8001bd8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001bdc:	4413      	add	r3, r2
 8001bde:	460a      	mov	r2, r1
 8001be0:	701a      	strb	r2, [r3, #0]
	  	  				for(int m = 0; m<=6;m++){
 8001be2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001be6:	3301      	adds	r3, #1
 8001be8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001bec:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001bf0:	2b06      	cmp	r3, #6
 8001bf2:	ddeb      	ble.n	8001bcc <main+0x394>
	  	  				}

	  	  				long3[0] = longitude_data[0];
 8001bf4:	4b91      	ldr	r3, [pc, #580]	; (8001e3c <main+0x604>)
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	4b91      	ldr	r3, [pc, #580]	; (8001e40 <main+0x608>)
 8001bfa:	701a      	strb	r2, [r3, #0]
	  	  				long3[1] = longitude_data[1];
 8001bfc:	4b8f      	ldr	r3, [pc, #572]	; (8001e3c <main+0x604>)
 8001bfe:	785a      	ldrb	r2, [r3, #1]
 8001c00:	4b8f      	ldr	r3, [pc, #572]	; (8001e40 <main+0x608>)
 8001c02:	705a      	strb	r2, [r3, #1]
	  	  				long3[2] = longitude_data[2]; //long3 -> les trois digits avant la virgule du degré de la long.
 8001c04:	4b8d      	ldr	r3, [pc, #564]	; (8001e3c <main+0x604>)
 8001c06:	789a      	ldrb	r2, [r3, #2]
 8001c08:	4b8d      	ldr	r3, [pc, #564]	; (8001e40 <main+0x608>)
 8001c0a:	709a      	strb	r2, [r3, #2]

	  	  				for(int n = 0; n<=6;n++){
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001c12:	e00f      	b.n	8001c34 <main+0x3fc>
	  	  					long7[n] = longitude_data[n+3]; //long7 -> ce qui reste après la virgule de la long.
 8001c14:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001c18:	3303      	adds	r3, #3
 8001c1a:	4a88      	ldr	r2, [pc, #544]	; (8001e3c <main+0x604>)
 8001c1c:	5cd1      	ldrb	r1, [r2, r3]
 8001c1e:	4a89      	ldr	r2, [pc, #548]	; (8001e44 <main+0x60c>)
 8001c20:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001c24:	4413      	add	r3, r2
 8001c26:	460a      	mov	r2, r1
 8001c28:	701a      	strb	r2, [r3, #0]
	  	  				for(int n = 0; n<=6;n++){
 8001c2a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001c2e:	3301      	adds	r3, #1
 8001c30:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001c34:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001c38:	2b06      	cmp	r3, #6
 8001c3a:	ddeb      	ble.n	8001c14 <main+0x3dc>
	  	  				}

	  	  				float deg_lat = atof(lat2);
 8001c3c:	4882      	ldr	r0, [pc, #520]	; (8001e48 <main+0x610>)
 8001c3e:	f005 fd65 	bl	800770c <atof>
 8001c42:	ec53 2b10 	vmov	r2, r3, d0
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f7fe ffd5 	bl	8000bf8 <__aeabi_d2f>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	  	  				float reste_lat = atof(lat7); //conversion du char[lat] en float[lat]
 8001c54:	4878      	ldr	r0, [pc, #480]	; (8001e38 <main+0x600>)
 8001c56:	f005 fd59 	bl	800770c <atof>
 8001c5a:	ec53 2b10 	vmov	r2, r3, d0
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f7fe ffc9 	bl	8000bf8 <__aeabi_d2f>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

	  	  				float deg_long = atof(long3);
 8001c6c:	4874      	ldr	r0, [pc, #464]	; (8001e40 <main+0x608>)
 8001c6e:	f005 fd4d 	bl	800770c <atof>
 8001c72:	ec53 2b10 	vmov	r2, r3, d0
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f7fe ffbd 	bl	8000bf8 <__aeabi_d2f>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
	  	  				float reste_long = atof(long7); //conversion du char[long] en float[long]
 8001c84:	486f      	ldr	r0, [pc, #444]	; (8001e44 <main+0x60c>)
 8001c86:	f005 fd41 	bl	800770c <atof>
 8001c8a:	ec53 2b10 	vmov	r2, r3, d0
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7fe ffb1 	bl	8000bf8 <__aeabi_d2f>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

	  	  				pDataCansat.GPS.latitude_Cansat = deg_lat + (reste_lat/60); //latitude convertie
 8001c9c:	edd7 7a80 	vldr	s15, [r7, #512]	; 0x200
 8001ca0:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8001e4c <main+0x614>
 8001ca4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ca8:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 8001cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb0:	ee17 0a90 	vmov	r0, s15
 8001cb4:	f7fe fc50 	bl	8000558 <__aeabi_f2d>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4964      	ldr	r1, [pc, #400]	; (8001e50 <main+0x618>)
 8001cbe:	e9c1 2300 	strd	r2, r3, [r1]
	  	  				pDataCansat.GPS.longitude_Cansat = deg_long + (reste_long/60); //longitude convertie
 8001cc2:	edd7 7a7e 	vldr	s15, [r7, #504]	; 0x1f8
 8001cc6:	eddf 6a61 	vldr	s13, [pc, #388]	; 8001e4c <main+0x614>
 8001cca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cce:	edd7 7a7f 	vldr	s15, [r7, #508]	; 0x1fc
 8001cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd6:	ee17 0a90 	vmov	r0, s15
 8001cda:	f7fe fc3d 	bl	8000558 <__aeabi_f2d>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	495b      	ldr	r1, [pc, #364]	; (8001e50 <main+0x618>)
 8001ce4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  	  				pDataCansat.GPS.altitude_Cansat = atof(altitude_data);
 8001ce8:	485a      	ldr	r0, [pc, #360]	; (8001e54 <main+0x61c>)
 8001cea:	f005 fd0f 	bl	800770c <atof>
 8001cee:	eeb0 7a40 	vmov.f32	s14, s0
 8001cf2:	eef0 7a60 	vmov.f32	s15, s1
 8001cf6:	4b56      	ldr	r3, [pc, #344]	; (8001e50 <main+0x618>)
 8001cf8:	ed83 7b04 	vstr	d7, [r3, #16]

	  	  				//printf("donnees du GPS : latitude = %f, longitude = %f, altitude = %f, - - - - - - - - GPS \r\n", pDataCansat.GPS.latitude_Cansat, pDataCansat.GPS.longitude_Cansat, pDataCansat.GPS.altitude_Cansat);

	  	  				//nombre de satellites
	  	  				for(int k = 0; k<2;k++){
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8001d02:	e00f      	b.n	8001d24 <main+0x4ec>
	  	  				satellites[k] = coordonnees[k+45]; //satellites[] comprend le nombre de stellites que sur la trame reçue
 8001d04:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001d08:	332d      	adds	r3, #45	; 0x2d
 8001d0a:	4a53      	ldr	r2, [pc, #332]	; (8001e58 <main+0x620>)
 8001d0c:	5cd1      	ldrb	r1, [r2, r3]
 8001d0e:	4a53      	ldr	r2, [pc, #332]	; (8001e5c <main+0x624>)
 8001d10:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001d14:	4413      	add	r3, r2
 8001d16:	460a      	mov	r2, r1
 8001d18:	701a      	strb	r2, [r3, #0]
	  	  				for(int k = 0; k<2;k++){
 8001d1a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001d1e:	3301      	adds	r3, #1
 8001d20:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8001d24:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	ddeb      	ble.n	8001d04 <main+0x4cc>
	  	  				}
	  	  		}
	  	  		if(uart_gps_rx[0]==10){
 8001d2c:	4b4c      	ldr	r3, [pc, #304]	; (8001e60 <main+0x628>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b0a      	cmp	r3, #10
 8001d32:	d040      	beq.n	8001db6 <main+0x57e>
	  	  			//HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY); //Arrangement de la trame
	  	  		}
	  	  		else{
	  	  			uart_pc_tx[0]=uart_gps_rx[0];
 8001d34:	4b4a      	ldr	r3, [pc, #296]	; (8001e60 <main+0x628>)
 8001d36:	781a      	ldrb	r2, [r3, #0]
 8001d38:	4b4a      	ldr	r3, [pc, #296]	; (8001e64 <main+0x62c>)
 8001d3a:	701a      	strb	r2, [r3, #0]
	  	  			//HAL_UART_Transmit(&huart2, uart_pc_tx, 1, HAL_MAX_DELAY);
	  	  			coordonnees[i] = uart_pc_tx[0]; //On copie ce qui passe dans l'UART dans un tableau coordonnees[i].
 8001d3c:	4b49      	ldr	r3, [pc, #292]	; (8001e64 <main+0x62c>)
 8001d3e:	7819      	ldrb	r1, [r3, #0]
 8001d40:	4a45      	ldr	r2, [pc, #276]	; (8001e58 <main+0x620>)
 8001d42:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001d46:	4413      	add	r3, r2
 8001d48:	460a      	mov	r2, r1
 8001d4a:	701a      	strb	r2, [r3, #0]
	  	  			if(i >= 4){
 8001d4c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	dd2b      	ble.n	8001dac <main+0x574>
	  	  				if(strncmp("OK*35",&coordonnees[i-4],5) == 0){
 8001d54:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001d58:	3b04      	subs	r3, #4
 8001d5a:	4a3f      	ldr	r2, [pc, #252]	; (8001e58 <main+0x620>)
 8001d5c:	4413      	add	r3, r2
 8001d5e:	2205      	movs	r2, #5
 8001d60:	4619      	mov	r1, r3
 8001d62:	4841      	ldr	r0, [pc, #260]	; (8001e68 <main+0x630>)
 8001d64:	f006 fa0e 	bl	8008184 <strncmp>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10e      	bne.n	8001d8c <main+0x554>
	  	  						i = 0; //Si on trouve "OK", on réinitialise i à 0 pour synchroniser notre trame.
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	  	  						if(first_data == 1){
 8001d74:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <main+0x634>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d103      	bne.n	8001d84 <main+0x54c>
	  	  							data_rdy = 1; //Si la trame est initialisée, le premier caractère du tableau voulu est prêt.
 8001d7c:	4b3c      	ldr	r3, [pc, #240]	; (8001e70 <main+0x638>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	e018      	b.n	8001db6 <main+0x57e>
	  	  						}
	  	  						else first_data = 1; //Permet d'enregistrer le tableau désiré.
 8001d84:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <main+0x634>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	e014      	b.n	8001db6 <main+0x57e>
	  	  					}
	  	  				else{
	  	  						if(i == GPS_TRAME_SIZE-1){
 8001d8c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001d90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d103      	bne.n	8001da0 <main+0x568>
	  	  							i = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8001d9e:	e00a      	b.n	8001db6 <main+0x57e>
	  	  						}
	  	  						else{
	  	  							i++;
 8001da0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001da4:	3301      	adds	r3, #1
 8001da6:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8001daa:	e004      	b.n	8001db6 <main+0x57e>
	  	  					}

	  	  				}
	  	  			}
	  	  			else i++;
 8001dac:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001db0:	3301      	adds	r3, #1
 8001db2:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	  	  		}
	  	  	it_rx_gps = 0;
 8001db6:	4b2f      	ldr	r3, [pc, #188]	; (8001e74 <main+0x63c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
	  	  	}


	  /************** Détection du largage ***************/

	  if( Drop_flag == 0 )
 8001dbc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d103      	bne.n	8001dcc <main+0x594>
	  {
	  Drop_flag = Drop_detection();
 8001dc4:	f000 f8d2 	bl	8001f6c <Drop_detection>
 8001dc8:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234
	  }

	  	  	  if(Drop_flag) // largage détecté, démarrage des missions
 8001dcc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f43f ae4c 	beq.w	8001a6e <main+0x236>
	  	  	  {
	  	  		 /*************** Lecture du champ magnétique terrestre **************/

	  	  		  Measure_M(&hi2c1, pDataCansat.IMU.MagnetometerData.mag_raw, pDataCansat.IMU.MagnetometerData.offset, pDataCansat.IMU.MagnetometerData.offset);
 8001dd6:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <main+0x640>)
 8001dd8:	4a27      	ldr	r2, [pc, #156]	; (8001e78 <main+0x640>)
 8001dda:	4928      	ldr	r1, [pc, #160]	; (8001e7c <main+0x644>)
 8001ddc:	4828      	ldr	r0, [pc, #160]	; (8001e80 <main+0x648>)
 8001dde:	f7ff fa17 	bl	8001210 <Measure_M>
	  	  		  //printf("champ magnetique --- selon x : %f , selon y : %f \r\n", pDataCansat.IMU.MagnetometerData.mag_raw[0], pDataCansat.IMU.MagnetometerData.mag_raw[1]);
	  	  		  HAL_Delay(50);
 8001de2:	2032      	movs	r0, #50	; 0x32
 8001de4:	f000 feba 	bl	8002b5c <HAL_Delay>

	  	  		 /*************** Conversion du champ magnétique en degrées **************/

	  	  		  magnetic_field_to_degree(pDataCansat.IMU.MagnetometerData.mag_raw);
 8001de8:	4824      	ldr	r0, [pc, #144]	; (8001e7c <main+0x644>)
 8001dea:	f7ff fb59 	bl	80014a0 <magnetic_field_to_degree>

	  	  		  if( demarrage_tim3 )
 8001dee:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00b      	beq.n	8001e0e <main+0x5d6>
	  	  		  {
	  	  			if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8001df6:	4823      	ldr	r0, [pc, #140]	; (8001e84 <main+0x64c>)
 8001df8:	f003 fc92 	bl	8005720 <HAL_TIM_Base_Start_IT>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <main+0x5d0>
	  	  			{
	  	  				printf("defaut d'initialisation du tim3");
 8001e02:	4821      	ldr	r0, [pc, #132]	; (8001e88 <main+0x650>)
 8001e04:	f006 f930 	bl	8008068 <iprintf>
	  	  			}
	  	  			demarrage_tim3 = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	  	  		  }



	  	  		  if(pDataCansat.GPS.altitude_Cansat <= altitude_ouverture_ballons )
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <main+0x618>)
 8001e10:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001e14:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8001e18:	f7fe fb8c 	bl	8000534 <__aeabi_i2d>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4620      	mov	r0, r4
 8001e22:	4629      	mov	r1, r5
 8001e24:	f7fe fe6c 	bl	8000b00 <__aeabi_dcmple>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <main+0x5fa>
	  	  		  {
	  	  			  // fonction d'ouverture des ballons
	  	  			 declenchement_structure_gonflable();
 8001e2e:	f000 f97f 	bl	8002130 <declenchement_structure_gonflable>
	  if(it_rx_gps){
 8001e32:	e61c      	b.n	8001a6e <main+0x236>
 8001e34:	2000071c 	.word	0x2000071c
 8001e38:	20000768 	.word	0x20000768
 8001e3c:	20000710 	.word	0x20000710
 8001e40:	20000770 	.word	0x20000770
 8001e44:	20000774 	.word	0x20000774
 8001e48:	20000764 	.word	0x20000764
 8001e4c:	42700000 	.word	0x42700000
 8001e50:	20000250 	.word	0x20000250
 8001e54:	20000728 	.word	0x20000728
 8001e58:	20000328 	.word	0x20000328
 8001e5c:	2000077c 	.word	0x2000077c
 8001e60:	20000320 	.word	0x20000320
 8001e64:	20000324 	.word	0x20000324
 8001e68:	0800c030 	.word	0x0800c030
 8001e6c:	20000780 	.word	0x20000780
 8001e70:	20000784 	.word	0x20000784
 8001e74:	20000325 	.word	0x20000325
 8001e78:	200002c8 	.word	0x200002c8
 8001e7c:	200002b0 	.word	0x200002b0
 8001e80:	200001fc 	.word	0x200001fc
 8001e84:	200007d4 	.word	0x200007d4
 8001e88:	0800c038 	.word	0x0800c038

08001e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b094      	sub	sp, #80	; 0x50
 8001e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e92:	f107 0320 	add.w	r3, r7, #32
 8001e96:	2230      	movs	r2, #48	; 0x30
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f005 fc72 	bl	8007784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <SystemClock_Config+0xcc>)
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	4a27      	ldr	r2, [pc, #156]	; (8001f58 <SystemClock_Config+0xcc>)
 8001eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec0:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <SystemClock_Config+0xcc>)
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ecc:	2300      	movs	r3, #0
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <SystemClock_Config+0xd0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a21      	ldr	r2, [pc, #132]	; (8001f5c <SystemClock_Config+0xd0>)
 8001ed6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <SystemClock_Config+0xd0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eec:	2301      	movs	r3, #1
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ef0:	2310      	movs	r3, #16
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001efc:	2310      	movs	r3, #16
 8001efe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001f00:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001f04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f06:	2304      	movs	r3, #4
 8001f08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f0a:	2304      	movs	r3, #4
 8001f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f0e:	f107 0320 	add.w	r3, r7, #32
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 ff1c 	bl	8004d50 <HAL_RCC_OscConfig>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001f1e:	f000 f81f 	bl	8001f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f22:	230f      	movs	r3, #15
 8001f24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f26:	2302      	movs	r3, #2
 8001f28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	2102      	movs	r1, #2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 f97e 	bl	8005240 <HAL_RCC_ClockConfig>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f4a:	f000 f809 	bl	8001f60 <Error_Handler>
  }
}
 8001f4e:	bf00      	nop
 8001f50:	3750      	adds	r7, #80	; 0x50
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40007000 	.word	0x40007000

08001f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f64:	b672      	cpsid	i
}
 8001f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <Error_Handler+0x8>
	...

08001f6c <Drop_detection>:
	 * @param Drop_flag Drapeau qui permet d'indiquer que le Cansat a été largué
	 * @retval None
	 */

int Drop_detection()
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
		int flag = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]
		uint16_t gpio_value = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	807b      	strh	r3, [r7, #2]

		gpio_value = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);  // prend la valeur 1 lorsque pas d'obstacles
 8001f7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f7e:	4809      	ldr	r0, [pc, #36]	; (8001fa4 <Drop_detection+0x38>)
 8001f80:	f001 f938 	bl	80031f4 <HAL_GPIO_ReadPin>
 8001f84:	4603      	mov	r3, r0
 8001f86:	807b      	strh	r3, [r7, #2]
															// prend la valeur 0 lorsque detection d'un obstacle
		//printf("valeur du capteur IR : %d \r\n", gpio_value);

		if(gpio_value == 1)
 8001f88:	887b      	ldrh	r3, [r7, #2]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d104      	bne.n	8001f98 <Drop_detection+0x2c>
		{
			flag = 1;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	607b      	str	r3, [r7, #4]
			printf("*** \r\n *** \r\n *** \r\n *** \r\n *** \r\n *** \r\n largage effectue \r\n *** \r\n *** \r\n *** \r\n *** \r\n *** \r\n *** \r\n");
 8001f92:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <Drop_detection+0x3c>)
 8001f94:	f006 f8ee 	bl	8008174 <puts>
		}

		return flag;
 8001f98:	687b      	ldr	r3, [r7, #4]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	0800c058 	.word	0x0800c058

08001fac <servoSetPositionLeft>:
 	 * @brief Positionnement du servo gauche
 	 * @Note Cette fonction permet de placer le servo comme on le souhaite avec 4 positions différentes
	 * @param int position : 0,1,2 ou 3
	 * @retval None
	 */
void servoSetPositionLeft (int position){
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	if (position == 0){
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d105      	bne.n	8001fc6 <servoSetPositionLeft+0x1a>
		//TIM2->CCR1 = POSITION_0_LEFT;
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 400);
 8001fba:	4b14      	ldr	r3, [pc, #80]	; (800200c <servoSetPositionLeft+0x60>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001fc2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);
	}
	else {
		printf("Vous ne devez mettre en entree que 0,1,2 ou 3 \r\n");
	}
}
 8001fc4:	e01d      	b.n	8002002 <servoSetPositionLeft+0x56>
	else if (position == 1){
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d105      	bne.n	8001fd8 <servoSetPositionLeft+0x2c>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 600);
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	; (800200c <servoSetPositionLeft+0x60>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001fd4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001fd6:	e014      	b.n	8002002 <servoSetPositionLeft+0x56>
	else if (position == 2){
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d105      	bne.n	8001fea <servoSetPositionLeft+0x3e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <servoSetPositionLeft+0x60>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fe6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001fe8:	e00b      	b.n	8002002 <servoSetPositionLeft+0x56>
	else if (position == 3){
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d105      	bne.n	8001ffc <servoSetPositionLeft+0x50>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <servoSetPositionLeft+0x60>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ffa:	e002      	b.n	8002002 <servoSetPositionLeft+0x56>
		printf("Vous ne devez mettre en entree que 0,1,2 ou 3 \r\n");
 8001ffc:	4804      	ldr	r0, [pc, #16]	; (8002010 <servoSetPositionLeft+0x64>)
 8001ffe:	f006 f8b9 	bl	8008174 <puts>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	2000078c 	.word	0x2000078c
 8002010:	0800c0c0 	.word	0x0800c0c0

08002014 <servoSetPositionRight>:
 	 * @brief Positionnement du servo droit
 	 * @Note Cette fonction permet de placer le servo comme on le souhaite avec 4 positions différentes
	 * @param int position : 0,1,2 ou 3
	 * @retval None
	 */
void servoSetPositionRight (int position){
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	if (position == 0){
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d105      	bne.n	800202e <servoSetPositionRight+0x1a>
		//TIM2->CCR2 = POSITION_0_RIGHT;
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 400);
 8002022:	4b14      	ldr	r3, [pc, #80]	; (8002074 <servoSetPositionRight+0x60>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800202a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1500);
	}
	else {
		printf("Vous ne devez mettre en entree 0,1,2 ou 3 \r\n");
	}
}
 800202c:	e01d      	b.n	800206a <servoSetPositionRight+0x56>
	else if (position == 1){
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d105      	bne.n	8002040 <servoSetPositionRight+0x2c>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 600);              //   Attention, Channel 1 --> servo gauche
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <servoSetPositionRight+0x60>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f44f 7216 	mov.w	r2, #600	; 0x258
 800203c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800203e:	e014      	b.n	800206a <servoSetPositionRight+0x56>
	else if (position == 2){
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d105      	bne.n	8002052 <servoSetPositionRight+0x3e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <servoSetPositionRight+0x60>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800204e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002050:	e00b      	b.n	800206a <servoSetPositionRight+0x56>
	else if (position == 3){
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d105      	bne.n	8002064 <servoSetPositionRight+0x50>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1500);
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <servoSetPositionRight+0x60>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002060:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002062:	e002      	b.n	800206a <servoSetPositionRight+0x56>
		printf("Vous ne devez mettre en entree 0,1,2 ou 3 \r\n");
 8002064:	4804      	ldr	r0, [pc, #16]	; (8002078 <servoSetPositionRight+0x64>)
 8002066:	f006 f885 	bl	8008174 <puts>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000078c 	.word	0x2000078c
 8002078:	0800c0f0 	.word	0x0800c0f0

0800207c <choice_direction_intensity>:
 	 * @Note Cette fonction permet de choisir la direction dans laquelle le cansat doit aller ainsi que son intensité grâce à une différence d'angle
	 * @param int delta_teta : difference d'angle comprise entre 0 et 360 degrés
	 * @retval None
	 */

void choice_direction_intensity(unsigned int delta_teta){
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
	if ((delta_teta<epsilon) || (delta_teta>360-epsilon)){
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b04      	cmp	r3, #4
 8002088:	d903      	bls.n	8002092 <choice_direction_intensity+0x16>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 8002090:	d306      	bcc.n	80020a0 <choice_direction_intensity+0x24>
		servoSetPositionLeft(0);
 8002092:	2000      	movs	r0, #0
 8002094:	f7ff ff8a 	bl	8001fac <servoSetPositionLeft>
		servoSetPositionRight(0);
 8002098:	2000      	movs	r0, #0
 800209a:	f7ff ffbb 	bl	8002014 <servoSetPositionRight>
	}
	else {
		printf("cas non traité \r\n");
	}

}
 800209e:	e040      	b.n	8002122 <choice_direction_intensity+0xa6>
	else if (delta_teta<teta_low){
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b1d      	cmp	r3, #29
 80020a4:	d806      	bhi.n	80020b4 <choice_direction_intensity+0x38>
		servoSetPositionLeft(0);
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7ff ff80 	bl	8001fac <servoSetPositionLeft>
		servoSetPositionRight(1);
 80020ac:	2001      	movs	r0, #1
 80020ae:	f7ff ffb1 	bl	8002014 <servoSetPositionRight>
}
 80020b2:	e036      	b.n	8002122 <choice_direction_intensity+0xa6>
	else if (delta_teta>360-teta_low){
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80020ba:	d906      	bls.n	80020ca <choice_direction_intensity+0x4e>
		servoSetPositionLeft(1);
 80020bc:	2001      	movs	r0, #1
 80020be:	f7ff ff75 	bl	8001fac <servoSetPositionLeft>
		servoSetPositionRight(0);
 80020c2:	2000      	movs	r0, #0
 80020c4:	f7ff ffa6 	bl	8002014 <servoSetPositionRight>
}
 80020c8:	e02b      	b.n	8002122 <choice_direction_intensity+0xa6>
	else if (delta_teta<teta_high){
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b63      	cmp	r3, #99	; 0x63
 80020ce:	d806      	bhi.n	80020de <choice_direction_intensity+0x62>
		servoSetPositionLeft(0);
 80020d0:	2000      	movs	r0, #0
 80020d2:	f7ff ff6b 	bl	8001fac <servoSetPositionLeft>
		servoSetPositionRight(2);
 80020d6:	2002      	movs	r0, #2
 80020d8:	f7ff ff9c 	bl	8002014 <servoSetPositionRight>
}
 80020dc:	e021      	b.n	8002122 <choice_direction_intensity+0xa6>
	else if (delta_teta>360-teta_high){
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020e4:	d906      	bls.n	80020f4 <choice_direction_intensity+0x78>
		servoSetPositionLeft(2);
 80020e6:	2002      	movs	r0, #2
 80020e8:	f7ff ff60 	bl	8001fac <servoSetPositionLeft>
		servoSetPositionRight(0);
 80020ec:	2000      	movs	r0, #0
 80020ee:	f7ff ff91 	bl	8002014 <servoSetPositionRight>
}
 80020f2:	e016      	b.n	8002122 <choice_direction_intensity+0xa6>
	else if (delta_teta<=180){
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2bb4      	cmp	r3, #180	; 0xb4
 80020f8:	d806      	bhi.n	8002108 <choice_direction_intensity+0x8c>
		servoSetPositionLeft(0);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f7ff ff56 	bl	8001fac <servoSetPositionLeft>
		servoSetPositionRight(3);
 8002100:	2003      	movs	r0, #3
 8002102:	f7ff ff87 	bl	8002014 <servoSetPositionRight>
}
 8002106:	e00c      	b.n	8002122 <choice_direction_intensity+0xa6>
	else if (delta_teta>180){
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2bb4      	cmp	r3, #180	; 0xb4
 800210c:	d906      	bls.n	800211c <choice_direction_intensity+0xa0>
		servoSetPositionLeft(3);
 800210e:	2003      	movs	r0, #3
 8002110:	f7ff ff4c 	bl	8001fac <servoSetPositionLeft>
		servoSetPositionRight(0);
 8002114:	2000      	movs	r0, #0
 8002116:	f7ff ff7d 	bl	8002014 <servoSetPositionRight>
}
 800211a:	e002      	b.n	8002122 <choice_direction_intensity+0xa6>
		printf("cas non traité \r\n");
 800211c:	4803      	ldr	r0, [pc, #12]	; (800212c <choice_direction_intensity+0xb0>)
 800211e:	f006 f829 	bl	8008174 <puts>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	0800c11c 	.word	0x0800c11c

08002130 <declenchement_structure_gonflable>:


/********** fonctions MISSION SECONDAIRE ***********/


void declenchement_structure_gonflable(){
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0

	  int x;
	  TIM4->CCR1 = 1000;
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <declenchement_structure_gonflable+0x40>)
 8002138:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800213c:	635a      	str	r2, [r3, #52]	; 0x34

	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800213e:	2100      	movs	r1, #0
 8002140:	480c      	ldr	r0, [pc, #48]	; (8002174 <declenchement_structure_gonflable+0x44>)
 8002142:	f003 fba9 	bl	8005898 <HAL_TIM_PWM_Start>

	  for(x=1000;x<2500;x=x+1){
 8002146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	e006      	b.n	800215c <declenchement_structure_gonflable+0x2c>
	  			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, x);
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <declenchement_structure_gonflable+0x48>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	635a      	str	r2, [r3, #52]	; 0x34
	  for(x=1000;x<2500;x=x+1){
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3301      	adds	r3, #1
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002162:	4293      	cmp	r3, r2
 8002164:	ddf3      	ble.n	800214e <declenchement_structure_gonflable+0x1e>

	  		  }

}
 8002166:	bf00      	nop
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40000800 	.word	0x40000800
 8002174:	2000081c 	.word	0x2000081c
 8002178:	200007d4 	.word	0x200007d4

0800217c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <HAL_MspInit+0x4c>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	4a0f      	ldr	r2, [pc, #60]	; (80021c8 <HAL_MspInit+0x4c>)
 800218c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002190:	6453      	str	r3, [r2, #68]	; 0x44
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <HAL_MspInit+0x4c>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	603b      	str	r3, [r7, #0]
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <HAL_MspInit+0x4c>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	4a08      	ldr	r2, [pc, #32]	; (80021c8 <HAL_MspInit+0x4c>)
 80021a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ac:	6413      	str	r3, [r2, #64]	; 0x40
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_MspInit+0x4c>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021ba:	2007      	movs	r0, #7
 80021bc:	f000 fdc2 	bl	8002d44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40023800 	.word	0x40023800

080021cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021d0:	e7fe      	b.n	80021d0 <NMI_Handler+0x4>

080021d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d6:	e7fe      	b.n	80021d6 <HardFault_Handler+0x4>

080021d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <MemManage_Handler+0x4>

080021de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021e2:	e7fe      	b.n	80021e2 <BusFault_Handler+0x4>

080021e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <UsageFault_Handler+0x4>

080021ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002218:	f000 fc80 	bl	8002b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}

08002220 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b0b1      	sub	sp, #196	; 0xc4
 8002224:	af30      	add	r7, sp, #192	; 0xc0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002226:	4814      	ldr	r0, [pc, #80]	; (8002278 <TIM3_IRQHandler+0x58>)
 8002228:	f003 fbe6 	bl	80059f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /*************** Calcul du delta theta ***************/

  pDataCansat.eCompass.Delta_theta = Delta_theta_calculation(pDataCansat);
 800222c:	4c13      	ldr	r4, [pc, #76]	; (800227c <TIM3_IRQHandler+0x5c>)
 800222e:	4668      	mov	r0, sp
 8002230:	f104 0310 	add.w	r3, r4, #16
 8002234:	22c0      	movs	r2, #192	; 0xc0
 8002236:	4619      	mov	r1, r3
 8002238:	f005 fa96 	bl	8007768 <memcpy>
 800223c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002240:	f7ff f990 	bl	8001564 <Delta_theta_calculation>
 8002244:	eeb0 7a40 	vmov.f32	s14, s0
 8002248:	eef0 7a60 	vmov.f32	s15, s1
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <TIM3_IRQHandler+0x5c>)
 800224e:	ed83 7b32 	vstr	d7, [r3, #200]	; 0xc8

  /*************** Mise en marche des servos pour corriger la direction **************/

  choice_direction_intensity(pDataCansat.eCompass.Delta_theta);
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <TIM3_IRQHandler+0x5c>)
 8002254:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8002258:	4610      	mov	r0, r2
 800225a:	4619      	mov	r1, r3
 800225c:	f7fe fcac 	bl	8000bb8 <__aeabi_d2uiz>
 8002260:	4603      	mov	r3, r0
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ff0a 	bl	800207c <choice_direction_intensity>

  /*************** clignottement LED pour verif ****************/

  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002268:	2120      	movs	r1, #32
 800226a:	4805      	ldr	r0, [pc, #20]	; (8002280 <TIM3_IRQHandler+0x60>)
 800226c:	f000 fff3 	bl	8003256 <HAL_GPIO_TogglePin>

  /* USER CODE END TIM3_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	3704      	adds	r7, #4
 8002274:	46bd      	mov	sp, r7
 8002276:	bd90      	pop	{r4, r7, pc}
 8002278:	200007d4 	.word	0x200007d4
 800227c:	20000250 	.word	0x20000250
 8002280:	40020000 	.word	0x40020000

08002284 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <USART1_IRQHandler+0x10>)
 800228a:	f004 fad7 	bl	800683c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000864 	.word	0x20000864

08002298 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
	return 1;
 800229c:	2301      	movs	r3, #1
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <_kill>:

int _kill(int pid, int sig)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022b2:	f005 fa2f 	bl	8007714 <__errno>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2216      	movs	r2, #22
 80022ba:	601a      	str	r2, [r3, #0]
	return -1;
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <_exit>:

void _exit (int status)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ffe7 	bl	80022a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022da:	e7fe      	b.n	80022da <_exit+0x12>

080022dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	e00a      	b.n	8002304 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022ee:	f3af 8000 	nop.w
 80022f2:	4601      	mov	r1, r0
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	60ba      	str	r2, [r7, #8]
 80022fa:	b2ca      	uxtb	r2, r1
 80022fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3301      	adds	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	dbf0      	blt.n	80022ee <_read+0x12>
	}

return len;
 800230c:	687b      	ldr	r3, [r7, #4]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	e009      	b.n	800233c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	60ba      	str	r2, [r7, #8]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fa55 	bl	80017e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	3301      	adds	r3, #1
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	429a      	cmp	r2, r3
 8002342:	dbf1      	blt.n	8002328 <_write+0x12>
	}
	return len;
 8002344:	687b      	ldr	r3, [r7, #4]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <_close>:

int _close(int file)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
	return -1;
 8002356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002376:	605a      	str	r2, [r3, #4]
	return 0;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <_isatty>:

int _isatty(int file)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
	return 1;
 800238e:	2301      	movs	r3, #1
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
	return 0;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c0:	4a14      	ldr	r2, [pc, #80]	; (8002414 <_sbrk+0x5c>)
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <_sbrk+0x60>)
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023cc:	4b13      	ldr	r3, [pc, #76]	; (800241c <_sbrk+0x64>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <_sbrk+0x64>)
 80023d6:	4a12      	ldr	r2, [pc, #72]	; (8002420 <_sbrk+0x68>)
 80023d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <_sbrk+0x64>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d207      	bcs.n	80023f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e8:	f005 f994 	bl	8007714 <__errno>
 80023ec:	4603      	mov	r3, r0
 80023ee:	220c      	movs	r2, #12
 80023f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023f6:	e009      	b.n	800240c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <_sbrk+0x64>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023fe:	4b07      	ldr	r3, [pc, #28]	; (800241c <_sbrk+0x64>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	4a05      	ldr	r2, [pc, #20]	; (800241c <_sbrk+0x64>)
 8002408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800240a:	68fb      	ldr	r3, [r7, #12]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20020000 	.word	0x20020000
 8002418:	00000400 	.word	0x00000400
 800241c:	20000788 	.word	0x20000788
 8002420:	20000900 	.word	0x20000900

08002424 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <SystemInit+0x20>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	4a05      	ldr	r2, [pc, #20]	; (8002444 <SystemInit+0x20>)
 8002430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08e      	sub	sp, #56	; 0x38
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245c:	f107 0320 	add.w	r3, r7, #32
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002466:	1d3b      	adds	r3, r7, #4
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
 8002474:	615a      	str	r2, [r3, #20]
 8002476:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002478:	4b32      	ldr	r3, [pc, #200]	; (8002544 <MX_TIM2_Init+0xfc>)
 800247a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800247e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002480:	4b30      	ldr	r3, [pc, #192]	; (8002544 <MX_TIM2_Init+0xfc>)
 8002482:	2253      	movs	r2, #83	; 0x53
 8002484:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002486:	4b2f      	ldr	r3, [pc, #188]	; (8002544 <MX_TIM2_Init+0xfc>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800248c:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <MX_TIM2_Init+0xfc>)
 800248e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002492:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002494:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <MX_TIM2_Init+0xfc>)
 8002496:	2200      	movs	r2, #0
 8002498:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800249a:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <MX_TIM2_Init+0xfc>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024a0:	4828      	ldr	r0, [pc, #160]	; (8002544 <MX_TIM2_Init+0xfc>)
 80024a2:	f003 f8ed 	bl	8005680 <HAL_TIM_Base_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80024ac:	f7ff fd58 	bl	8001f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024ba:	4619      	mov	r1, r3
 80024bc:	4821      	ldr	r0, [pc, #132]	; (8002544 <MX_TIM2_Init+0xfc>)
 80024be:	f003 fc65 	bl	8005d8c <HAL_TIM_ConfigClockSource>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80024c8:	f7ff fd4a 	bl	8001f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024cc:	481d      	ldr	r0, [pc, #116]	; (8002544 <MX_TIM2_Init+0xfc>)
 80024ce:	f003 f989 	bl	80057e4 <HAL_TIM_PWM_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80024d8:	f7ff fd42 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024dc:	2300      	movs	r3, #0
 80024de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024e4:	f107 0320 	add.w	r3, r7, #32
 80024e8:	4619      	mov	r1, r3
 80024ea:	4816      	ldr	r0, [pc, #88]	; (8002544 <MX_TIM2_Init+0xfc>)
 80024ec:	f004 f814 	bl	8006518 <HAL_TIMEx_MasterConfigSynchronization>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80024f6:	f7ff fd33 	bl	8001f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024fa:	2360      	movs	r3, #96	; 0x60
 80024fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	2200      	movs	r2, #0
 800250e:	4619      	mov	r1, r3
 8002510:	480c      	ldr	r0, [pc, #48]	; (8002544 <MX_TIM2_Init+0xfc>)
 8002512:	f003 fb79 	bl	8005c08 <HAL_TIM_PWM_ConfigChannel>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800251c:	f7ff fd20 	bl	8001f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	2204      	movs	r2, #4
 8002524:	4619      	mov	r1, r3
 8002526:	4807      	ldr	r0, [pc, #28]	; (8002544 <MX_TIM2_Init+0xfc>)
 8002528:	f003 fb6e 	bl	8005c08 <HAL_TIM_PWM_ConfigChannel>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002532:	f7ff fd15 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002536:	4803      	ldr	r0, [pc, #12]	; (8002544 <MX_TIM2_Init+0xfc>)
 8002538:	f000 f91c 	bl	8002774 <HAL_TIM_MspPostInit>

}
 800253c:	bf00      	nop
 800253e:	3738      	adds	r7, #56	; 0x38
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	2000078c 	.word	0x2000078c

08002548 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800254e:	f107 0308 	add.w	r3, r7, #8
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800255c:	463b      	mov	r3, r7
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002564:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <MX_TIM3_Init+0x94>)
 8002566:	4a1e      	ldr	r2, [pc, #120]	; (80025e0 <MX_TIM3_Init+0x98>)
 8002568:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1999;
 800256a:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <MX_TIM3_Init+0x94>)
 800256c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002570:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002572:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <MX_TIM3_Init+0x94>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 41999;
 8002578:	4b18      	ldr	r3, [pc, #96]	; (80025dc <MX_TIM3_Init+0x94>)
 800257a:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800257e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002580:	4b16      	ldr	r3, [pc, #88]	; (80025dc <MX_TIM3_Init+0x94>)
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <MX_TIM3_Init+0x94>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800258c:	4813      	ldr	r0, [pc, #76]	; (80025dc <MX_TIM3_Init+0x94>)
 800258e:	f003 f877 	bl	8005680 <HAL_TIM_Base_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002598:	f7ff fce2 	bl	8001f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800259c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025a2:	f107 0308 	add.w	r3, r7, #8
 80025a6:	4619      	mov	r1, r3
 80025a8:	480c      	ldr	r0, [pc, #48]	; (80025dc <MX_TIM3_Init+0x94>)
 80025aa:	f003 fbef 	bl	8005d8c <HAL_TIM_ConfigClockSource>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80025b4:	f7ff fcd4 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b8:	2300      	movs	r3, #0
 80025ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025c0:	463b      	mov	r3, r7
 80025c2:	4619      	mov	r1, r3
 80025c4:	4805      	ldr	r0, [pc, #20]	; (80025dc <MX_TIM3_Init+0x94>)
 80025c6:	f003 ffa7 	bl	8006518 <HAL_TIMEx_MasterConfigSynchronization>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80025d0:	f7ff fcc6 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025d4:	bf00      	nop
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	200007d4 	.word	0x200007d4
 80025e0:	40000400 	.word	0x40000400

080025e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08e      	sub	sp, #56	; 0x38
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f8:	f107 0320 	add.w	r3, r7, #32
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
 8002610:	615a      	str	r2, [r3, #20]
 8002612:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002614:	4b2c      	ldr	r3, [pc, #176]	; (80026c8 <MX_TIM4_Init+0xe4>)
 8002616:	4a2d      	ldr	r2, [pc, #180]	; (80026cc <MX_TIM4_Init+0xe8>)
 8002618:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800261a:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <MX_TIM4_Init+0xe4>)
 800261c:	2253      	movs	r2, #83	; 0x53
 800261e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002620:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <MX_TIM4_Init+0xe4>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8002626:	4b28      	ldr	r3, [pc, #160]	; (80026c8 <MX_TIM4_Init+0xe4>)
 8002628:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800262c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800262e:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <MX_TIM4_Init+0xe4>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002634:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <MX_TIM4_Init+0xe4>)
 8002636:	2200      	movs	r2, #0
 8002638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800263a:	4823      	ldr	r0, [pc, #140]	; (80026c8 <MX_TIM4_Init+0xe4>)
 800263c:	f003 f820 	bl	8005680 <HAL_TIM_Base_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002646:	f7ff fc8b 	bl	8001f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800264a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800264e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002650:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002654:	4619      	mov	r1, r3
 8002656:	481c      	ldr	r0, [pc, #112]	; (80026c8 <MX_TIM4_Init+0xe4>)
 8002658:	f003 fb98 	bl	8005d8c <HAL_TIM_ConfigClockSource>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002662:	f7ff fc7d 	bl	8001f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002666:	4818      	ldr	r0, [pc, #96]	; (80026c8 <MX_TIM4_Init+0xe4>)
 8002668:	f003 f8bc 	bl	80057e4 <HAL_TIM_PWM_Init>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002672:	f7ff fc75 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800267e:	f107 0320 	add.w	r3, r7, #32
 8002682:	4619      	mov	r1, r3
 8002684:	4810      	ldr	r0, [pc, #64]	; (80026c8 <MX_TIM4_Init+0xe4>)
 8002686:	f003 ff47 	bl	8006518 <HAL_TIMEx_MasterConfigSynchronization>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002690:	f7ff fc66 	bl	8001f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002694:	2360      	movs	r3, #96	; 0x60
 8002696:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	2200      	movs	r2, #0
 80026a8:	4619      	mov	r1, r3
 80026aa:	4807      	ldr	r0, [pc, #28]	; (80026c8 <MX_TIM4_Init+0xe4>)
 80026ac:	f003 faac 	bl	8005c08 <HAL_TIM_PWM_ConfigChannel>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80026b6:	f7ff fc53 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80026ba:	4803      	ldr	r0, [pc, #12]	; (80026c8 <MX_TIM4_Init+0xe4>)
 80026bc:	f000 f85a 	bl	8002774 <HAL_TIM_MspPostInit>

}
 80026c0:	bf00      	nop
 80026c2:	3738      	adds	r7, #56	; 0x38
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	2000081c 	.word	0x2000081c
 80026cc:	40000800 	.word	0x40000800

080026d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e0:	d10e      	bne.n	8002700 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <HAL_TIM_Base_MspInit+0x98>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a1f      	ldr	r2, [pc, #124]	; (8002768 <HAL_TIM_Base_MspInit+0x98>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_TIM_Base_MspInit+0x98>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80026fe:	e02e      	b.n	800275e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a19      	ldr	r2, [pc, #100]	; (800276c <HAL_TIM_Base_MspInit+0x9c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d116      	bne.n	8002738 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	4b16      	ldr	r3, [pc, #88]	; (8002768 <HAL_TIM_Base_MspInit+0x98>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a15      	ldr	r2, [pc, #84]	; (8002768 <HAL_TIM_Base_MspInit+0x98>)
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b13      	ldr	r3, [pc, #76]	; (8002768 <HAL_TIM_Base_MspInit+0x98>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	2100      	movs	r1, #0
 800272a:	201d      	movs	r0, #29
 800272c:	f000 fb15 	bl	8002d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002730:	201d      	movs	r0, #29
 8002732:	f000 fb2e 	bl	8002d92 <HAL_NVIC_EnableIRQ>
}
 8002736:	e012      	b.n	800275e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM4)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0c      	ldr	r2, [pc, #48]	; (8002770 <HAL_TIM_Base_MspInit+0xa0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d10d      	bne.n	800275e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <HAL_TIM_Base_MspInit+0x98>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	4a07      	ldr	r2, [pc, #28]	; (8002768 <HAL_TIM_Base_MspInit+0x98>)
 800274c:	f043 0304 	orr.w	r3, r3, #4
 8002750:	6413      	str	r3, [r2, #64]	; 0x40
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_TIM_Base_MspInit+0x98>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
}
 800275e:	bf00      	nop
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800
 800276c:	40000400 	.word	0x40000400
 8002770:	40000800 	.word	0x40000800

08002774 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002794:	d11e      	bne.n	80027d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	4b22      	ldr	r3, [pc, #136]	; (8002824 <HAL_TIM_MspPostInit+0xb0>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a21      	ldr	r2, [pc, #132]	; (8002824 <HAL_TIM_MspPostInit+0xb0>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b1f      	ldr	r3, [pc, #124]	; (8002824 <HAL_TIM_MspPostInit+0xb0>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027b2:	2303      	movs	r3, #3
 80027b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027be:	2300      	movs	r3, #0
 80027c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027c2:	2301      	movs	r3, #1
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c6:	f107 0314 	add.w	r3, r7, #20
 80027ca:	4619      	mov	r1, r3
 80027cc:	4816      	ldr	r0, [pc, #88]	; (8002828 <HAL_TIM_MspPostInit+0xb4>)
 80027ce:	f000 fb8d 	bl	8002eec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80027d2:	e022      	b.n	800281a <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM4)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a14      	ldr	r2, [pc, #80]	; (800282c <HAL_TIM_MspPostInit+0xb8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d11d      	bne.n	800281a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <HAL_TIM_MspPostInit+0xb0>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4a0f      	ldr	r2, [pc, #60]	; (8002824 <HAL_TIM_MspPostInit+0xb0>)
 80027e8:	f043 0302 	orr.w	r3, r3, #2
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <HAL_TIM_MspPostInit+0xb0>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027fa:	2340      	movs	r3, #64	; 0x40
 80027fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800280a:	2302      	movs	r3, #2
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	4806      	ldr	r0, [pc, #24]	; (8002830 <HAL_TIM_MspPostInit+0xbc>)
 8002816:	f000 fb69 	bl	8002eec <HAL_GPIO_Init>
}
 800281a:	bf00      	nop
 800281c:	3728      	adds	r7, #40	; 0x28
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	40020000 	.word	0x40020000
 800282c:	40000800 	.word	0x40000800
 8002830:	40020400 	.word	0x40020400

08002834 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 800283a:	4a12      	ldr	r2, [pc, #72]	; (8002884 <MX_USART1_UART_Init+0x50>)
 800283c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 8002840:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002846:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 800284e:	2200      	movs	r2, #0
 8002850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 800285a:	220c      	movs	r2, #12
 800285c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 8002866:	2200      	movs	r2, #0
 8002868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800286a:	4805      	ldr	r0, [pc, #20]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 800286c:	f003 fed6 	bl	800661c <HAL_UART_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002876:	f7ff fb73 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000864 	.word	0x20000864
 8002884:	40011000 	.word	0x40011000

08002888 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 800288e:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <MX_USART2_UART_Init+0x50>)
 8002890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 8002894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028a6:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 80028ae:	220c      	movs	r2, #12
 80028b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028b2:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028be:	4805      	ldr	r0, [pc, #20]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 80028c0:	f003 feac 	bl	800661c <HAL_UART_Init>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028ca:	f7ff fb49 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	200008a8 	.word	0x200008a8
 80028d8:	40004400 	.word	0x40004400

080028dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08c      	sub	sp, #48	; 0x30
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 031c 	add.w	r3, r7, #28
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a45      	ldr	r2, [pc, #276]	; (8002a10 <HAL_UART_MspInit+0x134>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d153      	bne.n	80029a6 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	4b44      	ldr	r3, [pc, #272]	; (8002a14 <HAL_UART_MspInit+0x138>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	4a43      	ldr	r2, [pc, #268]	; (8002a14 <HAL_UART_MspInit+0x138>)
 8002908:	f043 0310 	orr.w	r3, r3, #16
 800290c:	6453      	str	r3, [r2, #68]	; 0x44
 800290e:	4b41      	ldr	r3, [pc, #260]	; (8002a14 <HAL_UART_MspInit+0x138>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f003 0310 	and.w	r3, r3, #16
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	4b3d      	ldr	r3, [pc, #244]	; (8002a14 <HAL_UART_MspInit+0x138>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a3c      	ldr	r2, [pc, #240]	; (8002a14 <HAL_UART_MspInit+0x138>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	4b3a      	ldr	r3, [pc, #232]	; (8002a14 <HAL_UART_MspInit+0x138>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	4b36      	ldr	r3, [pc, #216]	; (8002a14 <HAL_UART_MspInit+0x138>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	4a35      	ldr	r2, [pc, #212]	; (8002a14 <HAL_UART_MspInit+0x138>)
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	6313      	str	r3, [r2, #48]	; 0x30
 8002946:	4b33      	ldr	r3, [pc, #204]	; (8002a14 <HAL_UART_MspInit+0x138>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2302      	movs	r3, #2
 800295a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002960:	2303      	movs	r3, #3
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002964:	2307      	movs	r3, #7
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002968:	f107 031c 	add.w	r3, r7, #28
 800296c:	4619      	mov	r1, r3
 800296e:	482a      	ldr	r0, [pc, #168]	; (8002a18 <HAL_UART_MspInit+0x13c>)
 8002970:	f000 fabc 	bl	8002eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002974:	2308      	movs	r3, #8
 8002976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002978:	2302      	movs	r3, #2
 800297a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002980:	2303      	movs	r3, #3
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002984:	2307      	movs	r3, #7
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002988:	f107 031c 	add.w	r3, r7, #28
 800298c:	4619      	mov	r1, r3
 800298e:	4823      	ldr	r0, [pc, #140]	; (8002a1c <HAL_UART_MspInit+0x140>)
 8002990:	f000 faac 	bl	8002eec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002994:	2200      	movs	r2, #0
 8002996:	2100      	movs	r1, #0
 8002998:	2025      	movs	r0, #37	; 0x25
 800299a:	f000 f9de 	bl	8002d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800299e:	2025      	movs	r0, #37	; 0x25
 80029a0:	f000 f9f7 	bl	8002d92 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80029a4:	e030      	b.n	8002a08 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART2)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a1d      	ldr	r2, [pc, #116]	; (8002a20 <HAL_UART_MspInit+0x144>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d12b      	bne.n	8002a08 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <HAL_UART_MspInit+0x138>)
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <HAL_UART_MspInit+0x138>)
 80029ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029be:	6413      	str	r3, [r2, #64]	; 0x40
 80029c0:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <HAL_UART_MspInit+0x138>)
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029cc:	2300      	movs	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HAL_UART_MspInit+0x138>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	4a0f      	ldr	r2, [pc, #60]	; (8002a14 <HAL_UART_MspInit+0x138>)
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	6313      	str	r3, [r2, #48]	; 0x30
 80029dc:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <HAL_UART_MspInit+0x138>)
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029e8:	230c      	movs	r3, #12
 80029ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ec:	2302      	movs	r3, #2
 80029ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f4:	2303      	movs	r3, #3
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029f8:	2307      	movs	r3, #7
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fc:	f107 031c 	add.w	r3, r7, #28
 8002a00:	4619      	mov	r1, r3
 8002a02:	4805      	ldr	r0, [pc, #20]	; (8002a18 <HAL_UART_MspInit+0x13c>)
 8002a04:	f000 fa72 	bl	8002eec <HAL_GPIO_Init>
}
 8002a08:	bf00      	nop
 8002a0a:	3730      	adds	r7, #48	; 0x30
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40011000 	.word	0x40011000
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40020000 	.word	0x40020000
 8002a1c:	40020400 	.word	0x40020400
 8002a20:	40004400 	.word	0x40004400

08002a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a28:	480d      	ldr	r0, [pc, #52]	; (8002a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a2a:	490e      	ldr	r1, [pc, #56]	; (8002a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a2c:	4a0e      	ldr	r2, [pc, #56]	; (8002a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a30:	e002      	b.n	8002a38 <LoopCopyDataInit>

08002a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a36:	3304      	adds	r3, #4

08002a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a3c:	d3f9      	bcc.n	8002a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a3e:	4a0b      	ldr	r2, [pc, #44]	; (8002a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a40:	4c0b      	ldr	r4, [pc, #44]	; (8002a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a44:	e001      	b.n	8002a4a <LoopFillZerobss>

08002a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a48:	3204      	adds	r2, #4

08002a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a4c:	d3fb      	bcc.n	8002a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a4e:	f7ff fce9 	bl	8002424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a52:	f004 fe65 	bl	8007720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a56:	f7fe feef 	bl	8001838 <main>
  bx  lr    
 8002a5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a64:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002a68:	0800c668 	.word	0x0800c668
  ldr r2, =_sbss
 8002a6c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002a70:	20000900 	.word	0x20000900

08002a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a74:	e7fe      	b.n	8002a74 <ADC_IRQHandler>
	...

08002a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <HAL_Init+0x40>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <HAL_Init+0x40>)
 8002a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_Init+0x40>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <HAL_Init+0x40>)
 8002a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_Init+0x40>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a07      	ldr	r2, [pc, #28]	; (8002ab8 <HAL_Init+0x40>)
 8002a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa0:	2003      	movs	r0, #3
 8002aa2:	f000 f94f 	bl	8002d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f000 f808 	bl	8002abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aac:	f7ff fb66 	bl	800217c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023c00 	.word	0x40023c00

08002abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ac4:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_InitTick+0x54>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <HAL_InitTick+0x58>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	4619      	mov	r1, r3
 8002ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 f967 	bl	8002dae <HAL_SYSTICK_Config>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e00e      	b.n	8002b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b0f      	cmp	r3, #15
 8002aee:	d80a      	bhi.n	8002b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002af0:	2200      	movs	r2, #0
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002af8:	f000 f92f 	bl	8002d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002afc:	4a06      	ldr	r2, [pc, #24]	; (8002b18 <HAL_InitTick+0x5c>)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e000      	b.n	8002b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000000 	.word	0x20000000
 8002b14:	20000008 	.word	0x20000008
 8002b18:	20000004 	.word	0x20000004

08002b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <HAL_IncTick+0x20>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <HAL_IncTick+0x24>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <HAL_IncTick+0x24>)
 8002b2e:	6013      	str	r3, [r2, #0]
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000008 	.word	0x20000008
 8002b40:	200008ec 	.word	0x200008ec

08002b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return uwTick;
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <HAL_GetTick+0x14>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	200008ec 	.word	0x200008ec

08002b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b64:	f7ff ffee 	bl	8002b44 <HAL_GetTick>
 8002b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b74:	d005      	beq.n	8002b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b76:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <HAL_Delay+0x44>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4413      	add	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b82:	bf00      	nop
 8002b84:	f7ff ffde 	bl	8002b44 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d8f7      	bhi.n	8002b84 <HAL_Delay+0x28>
  {
  }
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000008 	.word	0x20000008

08002ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bd6:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	60d3      	str	r3, [r2, #12]
}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <__NVIC_GetPriorityGrouping+0x18>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	0a1b      	lsrs	r3, r3, #8
 8002bf6:	f003 0307 	and.w	r3, r3, #7
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	db0b      	blt.n	8002c32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	f003 021f 	and.w	r2, r3, #31
 8002c20:	4907      	ldr	r1, [pc, #28]	; (8002c40 <__NVIC_EnableIRQ+0x38>)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	2001      	movs	r0, #1
 8002c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000e100 	.word	0xe000e100

08002c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	6039      	str	r1, [r7, #0]
 8002c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	db0a      	blt.n	8002c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	490c      	ldr	r1, [pc, #48]	; (8002c90 <__NVIC_SetPriority+0x4c>)
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	0112      	lsls	r2, r2, #4
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	440b      	add	r3, r1
 8002c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c6c:	e00a      	b.n	8002c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	4908      	ldr	r1, [pc, #32]	; (8002c94 <__NVIC_SetPriority+0x50>)
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	3b04      	subs	r3, #4
 8002c7c:	0112      	lsls	r2, r2, #4
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	440b      	add	r3, r1
 8002c82:	761a      	strb	r2, [r3, #24]
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	e000e100 	.word	0xe000e100
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b089      	sub	sp, #36	; 0x24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f1c3 0307 	rsb	r3, r3, #7
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	bf28      	it	cs
 8002cb6:	2304      	movcs	r3, #4
 8002cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	2b06      	cmp	r3, #6
 8002cc0:	d902      	bls.n	8002cc8 <NVIC_EncodePriority+0x30>
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3b03      	subs	r3, #3
 8002cc6:	e000      	b.n	8002cca <NVIC_EncodePriority+0x32>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43da      	mvns	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	401a      	ands	r2, r3
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ce0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cea:	43d9      	mvns	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf0:	4313      	orrs	r3, r2
         );
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3724      	adds	r7, #36	; 0x24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d10:	d301      	bcc.n	8002d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d12:	2301      	movs	r3, #1
 8002d14:	e00f      	b.n	8002d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d16:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <SysTick_Config+0x40>)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d1e:	210f      	movs	r1, #15
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d24:	f7ff ff8e 	bl	8002c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <SysTick_Config+0x40>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d2e:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <SysTick_Config+0x40>)
 8002d30:	2207      	movs	r2, #7
 8002d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	e000e010 	.word	0xe000e010

08002d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ff29 	bl	8002ba4 <__NVIC_SetPriorityGrouping>
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b086      	sub	sp, #24
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	4603      	mov	r3, r0
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d6c:	f7ff ff3e 	bl	8002bec <__NVIC_GetPriorityGrouping>
 8002d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	68b9      	ldr	r1, [r7, #8]
 8002d76:	6978      	ldr	r0, [r7, #20]
 8002d78:	f7ff ff8e 	bl	8002c98 <NVIC_EncodePriority>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ff5d 	bl	8002c44 <__NVIC_SetPriority>
}
 8002d8a:	bf00      	nop
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	4603      	mov	r3, r0
 8002d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff31 	bl	8002c08 <__NVIC_EnableIRQ>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff ffa2 	bl	8002d00 <SysTick_Config>
 8002dbc:	4603      	mov	r3, r0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dd4:	f7ff feb6 	bl	8002b44 <HAL_GetTick>
 8002dd8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d008      	beq.n	8002df8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2280      	movs	r2, #128	; 0x80
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e052      	b.n	8002e9e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0216 	bic.w	r2, r2, #22
 8002e06:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e16:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d103      	bne.n	8002e28 <HAL_DMA_Abort+0x62>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0208 	bic.w	r2, r2, #8
 8002e36:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e48:	e013      	b.n	8002e72 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e4a:	f7ff fe7b 	bl	8002b44 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b05      	cmp	r3, #5
 8002e56:	d90c      	bls.n	8002e72 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2203      	movs	r2, #3
 8002e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e015      	b.n	8002e9e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1e4      	bne.n	8002e4a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e84:	223f      	movs	r2, #63	; 0x3f
 8002e86:	409a      	lsls	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d004      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2280      	movs	r2, #128	; 0x80
 8002ebe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e00c      	b.n	8002ede <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2205      	movs	r2, #5
 8002ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0201 	bic.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b089      	sub	sp, #36	; 0x24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	e159      	b.n	80031bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f08:	2201      	movs	r2, #1
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	f040 8148 	bne.w	80031b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d005      	beq.n	8002f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d130      	bne.n	8002fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	2203      	movs	r2, #3
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f74:	2201      	movs	r2, #1
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 0201 	and.w	r2, r3, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d017      	beq.n	8002fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d123      	bne.n	8003030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	08da      	lsrs	r2, r3, #3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3208      	adds	r2, #8
 8002ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	220f      	movs	r2, #15
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	08da      	lsrs	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3208      	adds	r2, #8
 800302a:	69b9      	ldr	r1, [r7, #24]
 800302c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	2203      	movs	r2, #3
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0203 	and.w	r2, r3, #3
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 80a2 	beq.w	80031b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	4b57      	ldr	r3, [pc, #348]	; (80031d4 <HAL_GPIO_Init+0x2e8>)
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	4a56      	ldr	r2, [pc, #344]	; (80031d4 <HAL_GPIO_Init+0x2e8>)
 800307c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003080:	6453      	str	r3, [r2, #68]	; 0x44
 8003082:	4b54      	ldr	r3, [pc, #336]	; (80031d4 <HAL_GPIO_Init+0x2e8>)
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800308e:	4a52      	ldr	r2, [pc, #328]	; (80031d8 <HAL_GPIO_Init+0x2ec>)
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	089b      	lsrs	r3, r3, #2
 8003094:	3302      	adds	r3, #2
 8003096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	220f      	movs	r2, #15
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4013      	ands	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a49      	ldr	r2, [pc, #292]	; (80031dc <HAL_GPIO_Init+0x2f0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d019      	beq.n	80030ee <HAL_GPIO_Init+0x202>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a48      	ldr	r2, [pc, #288]	; (80031e0 <HAL_GPIO_Init+0x2f4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <HAL_GPIO_Init+0x1fe>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a47      	ldr	r2, [pc, #284]	; (80031e4 <HAL_GPIO_Init+0x2f8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00d      	beq.n	80030e6 <HAL_GPIO_Init+0x1fa>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a46      	ldr	r2, [pc, #280]	; (80031e8 <HAL_GPIO_Init+0x2fc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d007      	beq.n	80030e2 <HAL_GPIO_Init+0x1f6>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a45      	ldr	r2, [pc, #276]	; (80031ec <HAL_GPIO_Init+0x300>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d101      	bne.n	80030de <HAL_GPIO_Init+0x1f2>
 80030da:	2304      	movs	r3, #4
 80030dc:	e008      	b.n	80030f0 <HAL_GPIO_Init+0x204>
 80030de:	2307      	movs	r3, #7
 80030e0:	e006      	b.n	80030f0 <HAL_GPIO_Init+0x204>
 80030e2:	2303      	movs	r3, #3
 80030e4:	e004      	b.n	80030f0 <HAL_GPIO_Init+0x204>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e002      	b.n	80030f0 <HAL_GPIO_Init+0x204>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <HAL_GPIO_Init+0x204>
 80030ee:	2300      	movs	r3, #0
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	f002 0203 	and.w	r2, r2, #3
 80030f6:	0092      	lsls	r2, r2, #2
 80030f8:	4093      	lsls	r3, r2
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003100:	4935      	ldr	r1, [pc, #212]	; (80031d8 <HAL_GPIO_Init+0x2ec>)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	089b      	lsrs	r3, r3, #2
 8003106:	3302      	adds	r3, #2
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800310e:	4b38      	ldr	r3, [pc, #224]	; (80031f0 <HAL_GPIO_Init+0x304>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003132:	4a2f      	ldr	r2, [pc, #188]	; (80031f0 <HAL_GPIO_Init+0x304>)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003138:	4b2d      	ldr	r3, [pc, #180]	; (80031f0 <HAL_GPIO_Init+0x304>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800315c:	4a24      	ldr	r2, [pc, #144]	; (80031f0 <HAL_GPIO_Init+0x304>)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003162:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <HAL_GPIO_Init+0x304>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	43db      	mvns	r3, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4013      	ands	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003186:	4a1a      	ldr	r2, [pc, #104]	; (80031f0 <HAL_GPIO_Init+0x304>)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800318c:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <HAL_GPIO_Init+0x304>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031b0:	4a0f      	ldr	r2, [pc, #60]	; (80031f0 <HAL_GPIO_Init+0x304>)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3301      	adds	r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2b0f      	cmp	r3, #15
 80031c0:	f67f aea2 	bls.w	8002f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	3724      	adds	r7, #36	; 0x24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40013800 	.word	0x40013800
 80031dc:	40020000 	.word	0x40020000
 80031e0:	40020400 	.word	0x40020400
 80031e4:	40020800 	.word	0x40020800
 80031e8:	40020c00 	.word	0x40020c00
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40013c00 	.word	0x40013c00

080031f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	887b      	ldrh	r3, [r7, #2]
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
 8003210:	e001      	b.n	8003216 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003216:	7bfb      	ldrb	r3, [r7, #15]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	807b      	strh	r3, [r7, #2]
 8003230:	4613      	mov	r3, r2
 8003232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003234:	787b      	ldrb	r3, [r7, #1]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800323a:	887a      	ldrh	r2, [r7, #2]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003240:	e003      	b.n	800324a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003242:	887b      	ldrh	r3, [r7, #2]
 8003244:	041a      	lsls	r2, r3, #16
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	619a      	str	r2, [r3, #24]
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003256:	b480      	push	{r7}
 8003258:	b085      	sub	sp, #20
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	460b      	mov	r3, r1
 8003260:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003268:	887a      	ldrh	r2, [r7, #2]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4013      	ands	r3, r2
 800326e:	041a      	lsls	r2, r3, #16
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	43d9      	mvns	r1, r3
 8003274:	887b      	ldrh	r3, [r7, #2]
 8003276:	400b      	ands	r3, r1
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	619a      	str	r2, [r3, #24]
}
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e12b      	b.n	80034f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fe fa4c 	bl	8001750 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2224      	movs	r2, #36	; 0x24
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032f0:	f002 f99e 	bl	8005630 <HAL_RCC_GetPCLK1Freq>
 80032f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4a81      	ldr	r2, [pc, #516]	; (8003500 <HAL_I2C_Init+0x274>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d807      	bhi.n	8003310 <HAL_I2C_Init+0x84>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4a80      	ldr	r2, [pc, #512]	; (8003504 <HAL_I2C_Init+0x278>)
 8003304:	4293      	cmp	r3, r2
 8003306:	bf94      	ite	ls
 8003308:	2301      	movls	r3, #1
 800330a:	2300      	movhi	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	e006      	b.n	800331e <HAL_I2C_Init+0x92>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a7d      	ldr	r2, [pc, #500]	; (8003508 <HAL_I2C_Init+0x27c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	bf94      	ite	ls
 8003318:	2301      	movls	r3, #1
 800331a:	2300      	movhi	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e0e7      	b.n	80034f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4a78      	ldr	r2, [pc, #480]	; (800350c <HAL_I2C_Init+0x280>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	0c9b      	lsrs	r3, r3, #18
 8003330:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4a6a      	ldr	r2, [pc, #424]	; (8003500 <HAL_I2C_Init+0x274>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d802      	bhi.n	8003360 <HAL_I2C_Init+0xd4>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	3301      	adds	r3, #1
 800335e:	e009      	b.n	8003374 <HAL_I2C_Init+0xe8>
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	4a69      	ldr	r2, [pc, #420]	; (8003510 <HAL_I2C_Init+0x284>)
 800336c:	fba2 2303 	umull	r2, r3, r2, r3
 8003370:	099b      	lsrs	r3, r3, #6
 8003372:	3301      	adds	r3, #1
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	430b      	orrs	r3, r1
 800337a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003386:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	495c      	ldr	r1, [pc, #368]	; (8003500 <HAL_I2C_Init+0x274>)
 8003390:	428b      	cmp	r3, r1
 8003392:	d819      	bhi.n	80033c8 <HAL_I2C_Init+0x13c>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1e59      	subs	r1, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a2:	1c59      	adds	r1, r3, #1
 80033a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033a8:	400b      	ands	r3, r1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_I2C_Init+0x138>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1e59      	subs	r1, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c2:	e051      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 80033c4:	2304      	movs	r3, #4
 80033c6:	e04f      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d111      	bne.n	80033f4 <HAL_I2C_Init+0x168>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	1e58      	subs	r0, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	440b      	add	r3, r1
 80033de:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e2:	3301      	adds	r3, #1
 80033e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	e012      	b.n	800341a <HAL_I2C_Init+0x18e>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1e58      	subs	r0, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	0099      	lsls	r1, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	fbb0 f3f3 	udiv	r3, r0, r3
 800340a:	3301      	adds	r3, #1
 800340c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_Init+0x196>
 800341e:	2301      	movs	r3, #1
 8003420:	e022      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10e      	bne.n	8003448 <HAL_I2C_Init+0x1bc>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1e58      	subs	r0, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6859      	ldr	r1, [r3, #4]
 8003432:	460b      	mov	r3, r1
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	440b      	add	r3, r1
 8003438:	fbb0 f3f3 	udiv	r3, r0, r3
 800343c:	3301      	adds	r3, #1
 800343e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003446:	e00f      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	0099      	lsls	r1, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	fbb0 f3f3 	udiv	r3, r0, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	6809      	ldr	r1, [r1, #0]
 800346c:	4313      	orrs	r3, r2
 800346e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69da      	ldr	r2, [r3, #28]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003496:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6911      	ldr	r1, [r2, #16]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68d2      	ldr	r2, [r2, #12]
 80034a2:	4311      	orrs	r1, r2
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	430b      	orrs	r3, r1
 80034aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	000186a0 	.word	0x000186a0
 8003504:	001e847f 	.word	0x001e847f
 8003508:	003d08ff 	.word	0x003d08ff
 800350c:	431bde83 	.word	0x431bde83
 8003510:	10624dd3 	.word	0x10624dd3

08003514 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	461a      	mov	r2, r3
 8003520:	460b      	mov	r3, r1
 8003522:	817b      	strh	r3, [r7, #10]
 8003524:	4613      	mov	r3, r2
 8003526:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003528:	f7ff fb0c 	bl	8002b44 <HAL_GetTick>
 800352c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b20      	cmp	r3, #32
 8003538:	f040 80e0 	bne.w	80036fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	2319      	movs	r3, #25
 8003542:	2201      	movs	r2, #1
 8003544:	4970      	ldr	r1, [pc, #448]	; (8003708 <HAL_I2C_Master_Transmit+0x1f4>)
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f001 fa24 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003552:	2302      	movs	r3, #2
 8003554:	e0d3      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_I2C_Master_Transmit+0x50>
 8003560:	2302      	movs	r3, #2
 8003562:	e0cc      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b01      	cmp	r3, #1
 8003578:	d007      	beq.n	800358a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0201 	orr.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003598:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2221      	movs	r2, #33	; 0x21
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2210      	movs	r2, #16
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	893a      	ldrh	r2, [r7, #8]
 80035ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4a50      	ldr	r2, [pc, #320]	; (800370c <HAL_I2C_Master_Transmit+0x1f8>)
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035cc:	8979      	ldrh	r1, [r7, #10]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	6a3a      	ldr	r2, [r7, #32]
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 ff10 	bl	80043f8 <I2C_MasterRequestWrite>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e08d      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e2:	2300      	movs	r3, #0
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035f8:	e066      	b.n	80036c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	6a39      	ldr	r1, [r7, #32]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f001 fa9e 	bl	8004b40 <I2C_WaitOnTXEFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00d      	beq.n	8003626 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	2b04      	cmp	r3, #4
 8003610:	d107      	bne.n	8003622 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003620:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e06b      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	781a      	ldrb	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b04      	cmp	r3, #4
 8003662:	d11b      	bne.n	800369c <HAL_I2C_Master_Transmit+0x188>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003668:	2b00      	cmp	r3, #0
 800366a:	d017      	beq.n	800369c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	781a      	ldrb	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	6a39      	ldr	r1, [r7, #32]
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f001 fa8e 	bl	8004bc2 <I2C_WaitOnBTFFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00d      	beq.n	80036c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d107      	bne.n	80036c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e01a      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d194      	bne.n	80035fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	e000      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036fc:	2302      	movs	r3, #2
  }
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	00100002 	.word	0x00100002
 800370c:	ffff0000 	.word	0xffff0000

08003710 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08c      	sub	sp, #48	; 0x30
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	461a      	mov	r2, r3
 800371c:	460b      	mov	r3, r1
 800371e:	817b      	strh	r3, [r7, #10]
 8003720:	4613      	mov	r3, r2
 8003722:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003724:	f7ff fa0e 	bl	8002b44 <HAL_GetTick>
 8003728:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b20      	cmp	r3, #32
 8003734:	f040 820b 	bne.w	8003b4e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	2319      	movs	r3, #25
 800373e:	2201      	movs	r2, #1
 8003740:	497c      	ldr	r1, [pc, #496]	; (8003934 <HAL_I2C_Master_Receive+0x224>)
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f001 f926 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800374e:	2302      	movs	r3, #2
 8003750:	e1fe      	b.n	8003b50 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_I2C_Master_Receive+0x50>
 800375c:	2302      	movs	r3, #2
 800375e:	e1f7      	b.n	8003b50 <HAL_I2C_Master_Receive+0x440>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b01      	cmp	r3, #1
 8003774:	d007      	beq.n	8003786 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f042 0201 	orr.w	r2, r2, #1
 8003784:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003794:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2222      	movs	r2, #34	; 0x22
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2210      	movs	r2, #16
 80037a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	893a      	ldrh	r2, [r7, #8]
 80037b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4a5c      	ldr	r2, [pc, #368]	; (8003938 <HAL_I2C_Master_Receive+0x228>)
 80037c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037c8:	8979      	ldrh	r1, [r7, #10]
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 fe94 	bl	80044fc <I2C_MasterRequestRead>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e1b8      	b.n	8003b50 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d113      	bne.n	800380e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e6:	2300      	movs	r3, #0
 80037e8:	623b      	str	r3, [r7, #32]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	623b      	str	r3, [r7, #32]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	623b      	str	r3, [r7, #32]
 80037fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e18c      	b.n	8003b28 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003812:	2b01      	cmp	r3, #1
 8003814:	d11b      	bne.n	800384e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003824:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	61fb      	str	r3, [r7, #28]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	e16c      	b.n	8003b28 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003852:	2b02      	cmp	r3, #2
 8003854:	d11b      	bne.n	800388e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003864:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003874:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003876:	2300      	movs	r3, #0
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	e14c      	b.n	8003b28 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800389c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038b4:	e138      	b.n	8003b28 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	f200 80f1 	bhi.w	8003aa2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d123      	bne.n	8003910 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f001 f9b9 	bl	8004c44 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e139      	b.n	8003b50 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003904:	b29b      	uxth	r3, r3
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800390e:	e10b      	b.n	8003b28 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003914:	2b02      	cmp	r3, #2
 8003916:	d14e      	bne.n	80039b6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	2200      	movs	r2, #0
 8003920:	4906      	ldr	r1, [pc, #24]	; (800393c <HAL_I2C_Master_Receive+0x22c>)
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f001 f836 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d008      	beq.n	8003940 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e10e      	b.n	8003b50 <HAL_I2C_Master_Receive+0x440>
 8003932:	bf00      	nop
 8003934:	00100002 	.word	0x00100002
 8003938:	ffff0000 	.word	0xffff0000
 800393c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039b4:	e0b8      	b.n	8003b28 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	2200      	movs	r2, #0
 80039be:	4966      	ldr	r1, [pc, #408]	; (8003b58 <HAL_I2C_Master_Receive+0x448>)
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 ffe7 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0bf      	b.n	8003b50 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	2200      	movs	r2, #0
 8003a1a:	494f      	ldr	r1, [pc, #316]	; (8003b58 <HAL_I2C_Master_Receive+0x448>)
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 ffb9 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e091      	b.n	8003b50 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003aa0:	e042      	b.n	8003b28 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f001 f8cc 	bl	8004c44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e04c      	b.n	8003b50 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d118      	bne.n	8003b28 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f47f aec2 	bne.w	80038b6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e000      	b.n	8003b50 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b4e:	2302      	movs	r3, #2
  }
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3728      	adds	r7, #40	; 0x28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	00010004 	.word	0x00010004

08003b5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af02      	add	r7, sp, #8
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	4608      	mov	r0, r1
 8003b66:	4611      	mov	r1, r2
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	817b      	strh	r3, [r7, #10]
 8003b6e:	460b      	mov	r3, r1
 8003b70:	813b      	strh	r3, [r7, #8]
 8003b72:	4613      	mov	r3, r2
 8003b74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b76:	f7fe ffe5 	bl	8002b44 <HAL_GetTick>
 8003b7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	f040 80d9 	bne.w	8003d3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	2319      	movs	r3, #25
 8003b90:	2201      	movs	r2, #1
 8003b92:	496d      	ldr	r1, [pc, #436]	; (8003d48 <HAL_I2C_Mem_Write+0x1ec>)
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 fefd 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e0cc      	b.n	8003d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_I2C_Mem_Write+0x56>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e0c5      	b.n	8003d3e <HAL_I2C_Mem_Write+0x1e2>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d007      	beq.n	8003bd8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003be6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2221      	movs	r2, #33	; 0x21
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2240      	movs	r2, #64	; 0x40
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a3a      	ldr	r2, [r7, #32]
 8003c02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4a4d      	ldr	r2, [pc, #308]	; (8003d4c <HAL_I2C_Mem_Write+0x1f0>)
 8003c18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c1a:	88f8      	ldrh	r0, [r7, #6]
 8003c1c:	893a      	ldrh	r2, [r7, #8]
 8003c1e:	8979      	ldrh	r1, [r7, #10]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	9301      	str	r3, [sp, #4]
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	4603      	mov	r3, r0
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 fd34 	bl	8004698 <I2C_RequestMemoryWrite>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d052      	beq.n	8003cdc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e081      	b.n	8003d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 ff7e 	bl	8004b40 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00d      	beq.n	8003c66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d107      	bne.n	8003c62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e06b      	b.n	8003d3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	781a      	ldrb	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d11b      	bne.n	8003cdc <HAL_I2C_Mem_Write+0x180>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d017      	beq.n	8003cdc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	781a      	ldrb	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1aa      	bne.n	8003c3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 ff6a 	bl	8004bc2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00d      	beq.n	8003d10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d107      	bne.n	8003d0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e016      	b.n	8003d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e000      	b.n	8003d3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d3c:	2302      	movs	r3, #2
  }
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	00100002 	.word	0x00100002
 8003d4c:	ffff0000 	.word	0xffff0000

08003d50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08c      	sub	sp, #48	; 0x30
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	4608      	mov	r0, r1
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4603      	mov	r3, r0
 8003d60:	817b      	strh	r3, [r7, #10]
 8003d62:	460b      	mov	r3, r1
 8003d64:	813b      	strh	r3, [r7, #8]
 8003d66:	4613      	mov	r3, r2
 8003d68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d6a:	f7fe feeb 	bl	8002b44 <HAL_GetTick>
 8003d6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	f040 8208 	bne.w	800418e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	2319      	movs	r3, #25
 8003d84:	2201      	movs	r2, #1
 8003d86:	497b      	ldr	r1, [pc, #492]	; (8003f74 <HAL_I2C_Mem_Read+0x224>)
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 fe03 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d94:	2302      	movs	r3, #2
 8003d96:	e1fb      	b.n	8004190 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_I2C_Mem_Read+0x56>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e1f4      	b.n	8004190 <HAL_I2C_Mem_Read+0x440>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d007      	beq.n	8003dcc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2222      	movs	r2, #34	; 0x22
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2240      	movs	r2, #64	; 0x40
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003df6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4a5b      	ldr	r2, [pc, #364]	; (8003f78 <HAL_I2C_Mem_Read+0x228>)
 8003e0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e0e:	88f8      	ldrh	r0, [r7, #6]
 8003e10:	893a      	ldrh	r2, [r7, #8]
 8003e12:	8979      	ldrh	r1, [r7, #10]
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	9301      	str	r3, [sp, #4]
 8003e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 fcd0 	bl	80047c4 <I2C_RequestMemoryRead>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e1b0      	b.n	8004190 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d113      	bne.n	8003e5e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e36:	2300      	movs	r3, #0
 8003e38:	623b      	str	r3, [r7, #32]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	623b      	str	r3, [r7, #32]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	623b      	str	r3, [r7, #32]
 8003e4a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	e184      	b.n	8004168 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d11b      	bne.n	8003e9e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	61fb      	str	r3, [r7, #28]
 8003e8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e164      	b.n	8004168 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d11b      	bne.n	8003ede <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ec4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	e144      	b.n	8004168 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ef4:	e138      	b.n	8004168 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	f200 80f1 	bhi.w	80040e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d123      	bne.n	8003f50 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 fe99 	bl	8004c44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e139      	b.n	8004190 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f4e:	e10b      	b.n	8004168 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d14e      	bne.n	8003ff6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5e:	2200      	movs	r2, #0
 8003f60:	4906      	ldr	r1, [pc, #24]	; (8003f7c <HAL_I2C_Mem_Read+0x22c>)
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 fd16 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d008      	beq.n	8003f80 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e10e      	b.n	8004190 <HAL_I2C_Mem_Read+0x440>
 8003f72:	bf00      	nop
 8003f74:	00100002 	.word	0x00100002
 8003f78:	ffff0000 	.word	0xffff0000
 8003f7c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ff4:	e0b8      	b.n	8004168 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	4966      	ldr	r1, [pc, #408]	; (8004198 <HAL_I2C_Mem_Read+0x448>)
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 fcc7 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0bf      	b.n	8004190 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004058:	2200      	movs	r2, #0
 800405a:	494f      	ldr	r1, [pc, #316]	; (8004198 <HAL_I2C_Mem_Read+0x448>)
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 fc99 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e091      	b.n	8004190 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800407a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691a      	ldr	r2, [r3, #16]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040e0:	e042      	b.n	8004168 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fdac 	bl	8004c44 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e04c      	b.n	8004190 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b04      	cmp	r3, #4
 8004134:	d118      	bne.n	8004168 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416c:	2b00      	cmp	r3, #0
 800416e:	f47f aec2 	bne.w	8003ef6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2220      	movs	r2, #32
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	e000      	b.n	8004190 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800418e:	2302      	movs	r3, #2
  }
}
 8004190:	4618      	mov	r0, r3
 8004192:	3728      	adds	r7, #40	; 0x28
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	00010004 	.word	0x00010004

0800419c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b08a      	sub	sp, #40	; 0x28
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	460b      	mov	r3, r1
 80041aa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80041ac:	f7fe fcca 	bl	8002b44 <HAL_GetTick>
 80041b0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b20      	cmp	r3, #32
 80041c0:	f040 8111 	bne.w	80043e6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	2319      	movs	r3, #25
 80041ca:	2201      	movs	r2, #1
 80041cc:	4988      	ldr	r1, [pc, #544]	; (80043f0 <HAL_I2C_IsDeviceReady+0x254>)
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 fbe0 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80041da:	2302      	movs	r3, #2
 80041dc:	e104      	b.n	80043e8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_I2C_IsDeviceReady+0x50>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e0fd      	b.n	80043e8 <HAL_I2C_IsDeviceReady+0x24c>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d007      	beq.n	8004212 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0201 	orr.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004220:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2224      	movs	r2, #36	; 0x24
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4a70      	ldr	r2, [pc, #448]	; (80043f4 <HAL_I2C_IsDeviceReady+0x258>)
 8004234:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004244:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2200      	movs	r2, #0
 800424e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 fb9e 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00d      	beq.n	800427a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800426c:	d103      	bne.n	8004276 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004274:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e0b6      	b.n	80043e8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800427a:	897b      	ldrh	r3, [r7, #10]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	461a      	mov	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004288:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800428a:	f7fe fc5b 	bl	8002b44 <HAL_GetTick>
 800428e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b02      	cmp	r3, #2
 800429c:	bf0c      	ite	eq
 800429e:	2301      	moveq	r3, #1
 80042a0:	2300      	movne	r3, #0
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b4:	bf0c      	ite	eq
 80042b6:	2301      	moveq	r3, #1
 80042b8:	2300      	movne	r3, #0
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80042be:	e025      	b.n	800430c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042c0:	f7fe fc40 	bl	8002b44 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d302      	bcc.n	80042d6 <HAL_I2C_IsDeviceReady+0x13a>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d103      	bne.n	80042de <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	22a0      	movs	r2, #160	; 0xa0
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	bf0c      	ite	eq
 80042ec:	2301      	moveq	r3, #1
 80042ee:	2300      	movne	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2ba0      	cmp	r3, #160	; 0xa0
 8004316:	d005      	beq.n	8004324 <HAL_I2C_IsDeviceReady+0x188>
 8004318:	7dfb      	ldrb	r3, [r7, #23]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d102      	bne.n	8004324 <HAL_I2C_IsDeviceReady+0x188>
 800431e:	7dbb      	ldrb	r3, [r7, #22]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0cd      	beq.n	80042c0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b02      	cmp	r3, #2
 8004338:	d129      	bne.n	800438e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004348:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434a:	2300      	movs	r3, #0
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	2319      	movs	r3, #25
 8004366:	2201      	movs	r2, #1
 8004368:	4921      	ldr	r1, [pc, #132]	; (80043f0 <HAL_I2C_IsDeviceReady+0x254>)
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 fb12 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e036      	b.n	80043e8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	e02c      	b.n	80043e8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043a6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	2319      	movs	r3, #25
 80043ae:	2201      	movs	r2, #1
 80043b0:	490f      	ldr	r1, [pc, #60]	; (80043f0 <HAL_I2C_IsDeviceReady+0x254>)
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 faee 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e012      	b.n	80043e8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	3301      	adds	r3, #1
 80043c6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	f4ff af32 	bcc.w	8004236 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80043e6:	2302      	movs	r3, #2
  }
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3720      	adds	r7, #32
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	00100002 	.word	0x00100002
 80043f4:	ffff0000 	.word	0xffff0000

080043f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af02      	add	r7, sp, #8
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	460b      	mov	r3, r1
 8004406:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2b08      	cmp	r3, #8
 8004412:	d006      	beq.n	8004422 <I2C_MasterRequestWrite+0x2a>
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d003      	beq.n	8004422 <I2C_MasterRequestWrite+0x2a>
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004420:	d108      	bne.n	8004434 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	e00b      	b.n	800444c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004438:	2b12      	cmp	r3, #18
 800443a:	d107      	bne.n	800444c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800444a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fa9b 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00d      	beq.n	8004480 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004472:	d103      	bne.n	800447c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800447a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e035      	b.n	80044ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004488:	d108      	bne.n	800449c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800448a:	897b      	ldrh	r3, [r7, #10]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004498:	611a      	str	r2, [r3, #16]
 800449a:	e01b      	b.n	80044d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800449c:	897b      	ldrh	r3, [r7, #10]
 800449e:	11db      	asrs	r3, r3, #7
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f003 0306 	and.w	r3, r3, #6
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	f063 030f 	orn	r3, r3, #15
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	490e      	ldr	r1, [pc, #56]	; (80044f4 <I2C_MasterRequestWrite+0xfc>)
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 fac1 	bl	8004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e010      	b.n	80044ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044ca:	897b      	ldrh	r3, [r7, #10]
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	4907      	ldr	r1, [pc, #28]	; (80044f8 <I2C_MasterRequestWrite+0x100>)
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 fab1 	bl	8004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	00010008 	.word	0x00010008
 80044f8:	00010002 	.word	0x00010002

080044fc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af02      	add	r7, sp, #8
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	607a      	str	r2, [r7, #4]
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	460b      	mov	r3, r1
 800450a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004520:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d006      	beq.n	8004536 <I2C_MasterRequestRead+0x3a>
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d003      	beq.n	8004536 <I2C_MasterRequestRead+0x3a>
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004534:	d108      	bne.n	8004548 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	e00b      	b.n	8004560 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	2b11      	cmp	r3, #17
 800454e:	d107      	bne.n	8004560 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800455e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 fa11 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00d      	beq.n	8004594 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004586:	d103      	bne.n	8004590 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800458e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e079      	b.n	8004688 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800459c:	d108      	bne.n	80045b0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800459e:	897b      	ldrh	r3, [r7, #10]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	611a      	str	r2, [r3, #16]
 80045ae:	e05f      	b.n	8004670 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045b0:	897b      	ldrh	r3, [r7, #10]
 80045b2:	11db      	asrs	r3, r3, #7
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	f003 0306 	and.w	r3, r3, #6
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	f063 030f 	orn	r3, r3, #15
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	4930      	ldr	r1, [pc, #192]	; (8004690 <I2C_MasterRequestRead+0x194>)
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 fa37 	bl	8004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e054      	b.n	8004688 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045de:	897b      	ldrh	r3, [r7, #10]
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	4929      	ldr	r1, [pc, #164]	; (8004694 <I2C_MasterRequestRead+0x198>)
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 fa27 	bl	8004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e044      	b.n	8004688 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fe:	2300      	movs	r3, #0
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004622:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f9af 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00d      	beq.n	8004658 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800464a:	d103      	bne.n	8004654 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004652:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e017      	b.n	8004688 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004658:	897b      	ldrh	r3, [r7, #10]
 800465a:	11db      	asrs	r3, r3, #7
 800465c:	b2db      	uxtb	r3, r3
 800465e:	f003 0306 	and.w	r3, r3, #6
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f063 030e 	orn	r3, r3, #14
 8004668:	b2da      	uxtb	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	4907      	ldr	r1, [pc, #28]	; (8004694 <I2C_MasterRequestRead+0x198>)
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f9e3 	bl	8004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	00010008 	.word	0x00010008
 8004694:	00010002 	.word	0x00010002

08004698 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af02      	add	r7, sp, #8
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	4608      	mov	r0, r1
 80046a2:	4611      	mov	r1, r2
 80046a4:	461a      	mov	r2, r3
 80046a6:	4603      	mov	r3, r0
 80046a8:	817b      	strh	r3, [r7, #10]
 80046aa:	460b      	mov	r3, r1
 80046ac:	813b      	strh	r3, [r7, #8]
 80046ae:	4613      	mov	r3, r2
 80046b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f960 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00d      	beq.n	80046f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e8:	d103      	bne.n	80046f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e05f      	b.n	80047b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046f6:	897b      	ldrh	r3, [r7, #10]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	461a      	mov	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004704:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	6a3a      	ldr	r2, [r7, #32]
 800470a:	492d      	ldr	r1, [pc, #180]	; (80047c0 <I2C_RequestMemoryWrite+0x128>)
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f998 	bl	8004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e04c      	b.n	80047b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004734:	6a39      	ldr	r1, [r7, #32]
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 fa02 	bl	8004b40 <I2C_WaitOnTXEFlagUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00d      	beq.n	800475e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	2b04      	cmp	r3, #4
 8004748:	d107      	bne.n	800475a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004758:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e02b      	b.n	80047b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800475e:	88fb      	ldrh	r3, [r7, #6]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d105      	bne.n	8004770 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004764:	893b      	ldrh	r3, [r7, #8]
 8004766:	b2da      	uxtb	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	611a      	str	r2, [r3, #16]
 800476e:	e021      	b.n	80047b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004770:	893b      	ldrh	r3, [r7, #8]
 8004772:	0a1b      	lsrs	r3, r3, #8
 8004774:	b29b      	uxth	r3, r3
 8004776:	b2da      	uxtb	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800477e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004780:	6a39      	ldr	r1, [r7, #32]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f9dc 	bl	8004b40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00d      	beq.n	80047aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	2b04      	cmp	r3, #4
 8004794:	d107      	bne.n	80047a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e005      	b.n	80047b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047aa:	893b      	ldrh	r3, [r7, #8]
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	00010002 	.word	0x00010002

080047c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af02      	add	r7, sp, #8
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	4608      	mov	r0, r1
 80047ce:	4611      	mov	r1, r2
 80047d0:	461a      	mov	r2, r3
 80047d2:	4603      	mov	r3, r0
 80047d4:	817b      	strh	r3, [r7, #10]
 80047d6:	460b      	mov	r3, r1
 80047d8:	813b      	strh	r3, [r7, #8]
 80047da:	4613      	mov	r3, r2
 80047dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	2200      	movs	r2, #0
 8004806:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 f8c2 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00d      	beq.n	8004832 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004824:	d103      	bne.n	800482e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800482c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e0aa      	b.n	8004988 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004832:	897b      	ldrh	r3, [r7, #10]
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004840:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	6a3a      	ldr	r2, [r7, #32]
 8004846:	4952      	ldr	r1, [pc, #328]	; (8004990 <I2C_RequestMemoryRead+0x1cc>)
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f8fa 	bl	8004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e097      	b.n	8004988 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004858:	2300      	movs	r3, #0
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800486e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004870:	6a39      	ldr	r1, [r7, #32]
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f964 	bl	8004b40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00d      	beq.n	800489a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	2b04      	cmp	r3, #4
 8004884:	d107      	bne.n	8004896 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004894:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e076      	b.n	8004988 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800489a:	88fb      	ldrh	r3, [r7, #6]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d105      	bne.n	80048ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048a0:	893b      	ldrh	r3, [r7, #8]
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	611a      	str	r2, [r3, #16]
 80048aa:	e021      	b.n	80048f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048ac:	893b      	ldrh	r3, [r7, #8]
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048bc:	6a39      	ldr	r1, [r7, #32]
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 f93e 	bl	8004b40 <I2C_WaitOnTXEFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00d      	beq.n	80048e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d107      	bne.n	80048e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e050      	b.n	8004988 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048e6:	893b      	ldrh	r3, [r7, #8]
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f2:	6a39      	ldr	r1, [r7, #32]
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f923 	bl	8004b40 <I2C_WaitOnTXEFlagUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00d      	beq.n	800491c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	2b04      	cmp	r3, #4
 8004906:	d107      	bne.n	8004918 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004916:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e035      	b.n	8004988 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800492a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	2200      	movs	r2, #0
 8004934:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f82b 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00d      	beq.n	8004960 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004952:	d103      	bne.n	800495c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800495a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e013      	b.n	8004988 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004960:	897b      	ldrh	r3, [r7, #10]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	b2da      	uxtb	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	6a3a      	ldr	r2, [r7, #32]
 8004974:	4906      	ldr	r1, [pc, #24]	; (8004990 <I2C_RequestMemoryRead+0x1cc>)
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f863 	bl	8004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	00010002 	.word	0x00010002

08004994 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	4613      	mov	r3, r2
 80049a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049a4:	e025      	b.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ac:	d021      	beq.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ae:	f7fe f8c9 	bl	8002b44 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d302      	bcc.n	80049c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d116      	bne.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f043 0220 	orr.w	r2, r3, #32
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e023      	b.n	8004a3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	0c1b      	lsrs	r3, r3, #16
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d10d      	bne.n	8004a18 <I2C_WaitOnFlagUntilTimeout+0x84>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	43da      	mvns	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4013      	ands	r3, r2
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bf0c      	ite	eq
 8004a0e:	2301      	moveq	r3, #1
 8004a10:	2300      	movne	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	e00c      	b.n	8004a32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	43da      	mvns	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4013      	ands	r3, r2
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d0b6      	beq.n	80049a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
 8004a4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a50:	e051      	b.n	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a60:	d123      	bne.n	8004aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f043 0204 	orr.w	r2, r3, #4
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e046      	b.n	8004b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ab0:	d021      	beq.n	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab2:	f7fe f847 	bl	8002b44 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d302      	bcc.n	8004ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d116      	bne.n	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f043 0220 	orr.w	r2, r3, #32
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e020      	b.n	8004b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	0c1b      	lsrs	r3, r3, #16
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d10c      	bne.n	8004b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	43da      	mvns	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bf14      	ite	ne
 8004b12:	2301      	movne	r3, #1
 8004b14:	2300      	moveq	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	e00b      	b.n	8004b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	43da      	mvns	r2, r3
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4013      	ands	r3, r2
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	bf14      	ite	ne
 8004b2c:	2301      	movne	r3, #1
 8004b2e:	2300      	moveq	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d18d      	bne.n	8004a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b4c:	e02d      	b.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 f8ce 	bl	8004cf0 <I2C_IsAcknowledgeFailed>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e02d      	b.n	8004bba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b64:	d021      	beq.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b66:	f7fd ffed 	bl	8002b44 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d302      	bcc.n	8004b7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d116      	bne.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f043 0220 	orr.w	r2, r3, #32
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e007      	b.n	8004bba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb4:	2b80      	cmp	r3, #128	; 0x80
 8004bb6:	d1ca      	bne.n	8004b4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bce:	e02d      	b.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f88d 	bl	8004cf0 <I2C_IsAcknowledgeFailed>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e02d      	b.n	8004c3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004be6:	d021      	beq.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be8:	f7fd ffac 	bl	8002b44 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d302      	bcc.n	8004bfe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d116      	bne.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	f043 0220 	orr.w	r2, r3, #32
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e007      	b.n	8004c3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d1ca      	bne.n	8004bd0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c50:	e042      	b.n	8004cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	2b10      	cmp	r3, #16
 8004c5e:	d119      	bne.n	8004c94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0210 	mvn.w	r2, #16
 8004c68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e029      	b.n	8004ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c94:	f7fd ff56 	bl	8002b44 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d302      	bcc.n	8004caa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d116      	bne.n	8004cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	f043 0220 	orr.w	r2, r3, #32
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e007      	b.n	8004ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce2:	2b40      	cmp	r3, #64	; 0x40
 8004ce4:	d1b5      	bne.n	8004c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d06:	d11b      	bne.n	8004d40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	f043 0204 	orr.w	r2, r3, #4
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
	...

08004d50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e267      	b.n	8005232 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d075      	beq.n	8004e5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d6e:	4b88      	ldr	r3, [pc, #544]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 030c 	and.w	r3, r3, #12
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d00c      	beq.n	8004d94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d7a:	4b85      	ldr	r3, [pc, #532]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d112      	bne.n	8004dac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d86:	4b82      	ldr	r3, [pc, #520]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d92:	d10b      	bne.n	8004dac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d94:	4b7e      	ldr	r3, [pc, #504]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d05b      	beq.n	8004e58 <HAL_RCC_OscConfig+0x108>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d157      	bne.n	8004e58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e242      	b.n	8005232 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db4:	d106      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x74>
 8004db6:	4b76      	ldr	r3, [pc, #472]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a75      	ldr	r2, [pc, #468]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	e01d      	b.n	8004e00 <HAL_RCC_OscConfig+0xb0>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dcc:	d10c      	bne.n	8004de8 <HAL_RCC_OscConfig+0x98>
 8004dce:	4b70      	ldr	r3, [pc, #448]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a6f      	ldr	r2, [pc, #444]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	4b6d      	ldr	r3, [pc, #436]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a6c      	ldr	r2, [pc, #432]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	e00b      	b.n	8004e00 <HAL_RCC_OscConfig+0xb0>
 8004de8:	4b69      	ldr	r3, [pc, #420]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a68      	ldr	r2, [pc, #416]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	4b66      	ldr	r3, [pc, #408]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a65      	ldr	r2, [pc, #404]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d013      	beq.n	8004e30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e08:	f7fd fe9c 	bl	8002b44 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e10:	f7fd fe98 	bl	8002b44 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b64      	cmp	r3, #100	; 0x64
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e207      	b.n	8005232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e22:	4b5b      	ldr	r3, [pc, #364]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0f0      	beq.n	8004e10 <HAL_RCC_OscConfig+0xc0>
 8004e2e:	e014      	b.n	8004e5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e30:	f7fd fe88 	bl	8002b44 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e38:	f7fd fe84 	bl	8002b44 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b64      	cmp	r3, #100	; 0x64
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e1f3      	b.n	8005232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e4a:	4b51      	ldr	r3, [pc, #324]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f0      	bne.n	8004e38 <HAL_RCC_OscConfig+0xe8>
 8004e56:	e000      	b.n	8004e5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d063      	beq.n	8004f2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e66:	4b4a      	ldr	r3, [pc, #296]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 030c 	and.w	r3, r3, #12
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00b      	beq.n	8004e8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e72:	4b47      	ldr	r3, [pc, #284]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e7a:	2b08      	cmp	r3, #8
 8004e7c:	d11c      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e7e:	4b44      	ldr	r3, [pc, #272]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d116      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e8a:	4b41      	ldr	r3, [pc, #260]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d005      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x152>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d001      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e1c7      	b.n	8005232 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea2:	4b3b      	ldr	r3, [pc, #236]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	4937      	ldr	r1, [pc, #220]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eb6:	e03a      	b.n	8004f2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d020      	beq.n	8004f02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ec0:	4b34      	ldr	r3, [pc, #208]	; (8004f94 <HAL_RCC_OscConfig+0x244>)
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec6:	f7fd fe3d 	bl	8002b44 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ece:	f7fd fe39 	bl	8002b44 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e1a8      	b.n	8005232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ee0:	4b2b      	ldr	r3, [pc, #172]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0f0      	beq.n	8004ece <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eec:	4b28      	ldr	r3, [pc, #160]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4925      	ldr	r1, [pc, #148]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	600b      	str	r3, [r1, #0]
 8004f00:	e015      	b.n	8004f2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f02:	4b24      	ldr	r3, [pc, #144]	; (8004f94 <HAL_RCC_OscConfig+0x244>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f08:	f7fd fe1c 	bl	8002b44 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f10:	f7fd fe18 	bl	8002b44 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e187      	b.n	8005232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f22:	4b1b      	ldr	r3, [pc, #108]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f0      	bne.n	8004f10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d036      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d016      	beq.n	8004f70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f42:	4b15      	ldr	r3, [pc, #84]	; (8004f98 <HAL_RCC_OscConfig+0x248>)
 8004f44:	2201      	movs	r2, #1
 8004f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f48:	f7fd fdfc 	bl	8002b44 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f50:	f7fd fdf8 	bl	8002b44 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e167      	b.n	8005232 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f62:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <HAL_RCC_OscConfig+0x240>)
 8004f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0x200>
 8004f6e:	e01b      	b.n	8004fa8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f70:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <HAL_RCC_OscConfig+0x248>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f76:	f7fd fde5 	bl	8002b44 <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f7c:	e00e      	b.n	8004f9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f7e:	f7fd fde1 	bl	8002b44 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d907      	bls.n	8004f9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e150      	b.n	8005232 <HAL_RCC_OscConfig+0x4e2>
 8004f90:	40023800 	.word	0x40023800
 8004f94:	42470000 	.word	0x42470000
 8004f98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f9c:	4b88      	ldr	r3, [pc, #544]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 8004f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1ea      	bne.n	8004f7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 8097 	beq.w	80050e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fba:	4b81      	ldr	r3, [pc, #516]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10f      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	4b7d      	ldr	r3, [pc, #500]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	4a7c      	ldr	r2, [pc, #496]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 8004fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fd6:	4b7a      	ldr	r3, [pc, #488]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fde:	60bb      	str	r3, [r7, #8]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe6:	4b77      	ldr	r3, [pc, #476]	; (80051c4 <HAL_RCC_OscConfig+0x474>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d118      	bne.n	8005024 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ff2:	4b74      	ldr	r3, [pc, #464]	; (80051c4 <HAL_RCC_OscConfig+0x474>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a73      	ldr	r2, [pc, #460]	; (80051c4 <HAL_RCC_OscConfig+0x474>)
 8004ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ffe:	f7fd fda1 	bl	8002b44 <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005006:	f7fd fd9d 	bl	8002b44 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e10c      	b.n	8005232 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005018:	4b6a      	ldr	r3, [pc, #424]	; (80051c4 <HAL_RCC_OscConfig+0x474>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0f0      	beq.n	8005006 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d106      	bne.n	800503a <HAL_RCC_OscConfig+0x2ea>
 800502c:	4b64      	ldr	r3, [pc, #400]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 800502e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005030:	4a63      	ldr	r2, [pc, #396]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	6713      	str	r3, [r2, #112]	; 0x70
 8005038:	e01c      	b.n	8005074 <HAL_RCC_OscConfig+0x324>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2b05      	cmp	r3, #5
 8005040:	d10c      	bne.n	800505c <HAL_RCC_OscConfig+0x30c>
 8005042:	4b5f      	ldr	r3, [pc, #380]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 8005044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005046:	4a5e      	ldr	r2, [pc, #376]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 8005048:	f043 0304 	orr.w	r3, r3, #4
 800504c:	6713      	str	r3, [r2, #112]	; 0x70
 800504e:	4b5c      	ldr	r3, [pc, #368]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 8005050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005052:	4a5b      	ldr	r2, [pc, #364]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 8005054:	f043 0301 	orr.w	r3, r3, #1
 8005058:	6713      	str	r3, [r2, #112]	; 0x70
 800505a:	e00b      	b.n	8005074 <HAL_RCC_OscConfig+0x324>
 800505c:	4b58      	ldr	r3, [pc, #352]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 800505e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005060:	4a57      	ldr	r2, [pc, #348]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 8005062:	f023 0301 	bic.w	r3, r3, #1
 8005066:	6713      	str	r3, [r2, #112]	; 0x70
 8005068:	4b55      	ldr	r3, [pc, #340]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 800506a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506c:	4a54      	ldr	r2, [pc, #336]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 800506e:	f023 0304 	bic.w	r3, r3, #4
 8005072:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d015      	beq.n	80050a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507c:	f7fd fd62 	bl	8002b44 <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005082:	e00a      	b.n	800509a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005084:	f7fd fd5e 	bl	8002b44 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005092:	4293      	cmp	r3, r2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e0cb      	b.n	8005232 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800509a:	4b49      	ldr	r3, [pc, #292]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 800509c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0ee      	beq.n	8005084 <HAL_RCC_OscConfig+0x334>
 80050a6:	e014      	b.n	80050d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050a8:	f7fd fd4c 	bl	8002b44 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ae:	e00a      	b.n	80050c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050b0:	f7fd fd48 	bl	8002b44 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80050be:	4293      	cmp	r3, r2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e0b5      	b.n	8005232 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050c6:	4b3e      	ldr	r3, [pc, #248]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 80050c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1ee      	bne.n	80050b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050d2:	7dfb      	ldrb	r3, [r7, #23]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d105      	bne.n	80050e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d8:	4b39      	ldr	r3, [pc, #228]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050dc:	4a38      	ldr	r2, [pc, #224]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 80050de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 80a1 	beq.w	8005230 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050ee:	4b34      	ldr	r3, [pc, #208]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 030c 	and.w	r3, r3, #12
 80050f6:	2b08      	cmp	r3, #8
 80050f8:	d05c      	beq.n	80051b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d141      	bne.n	8005186 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005102:	4b31      	ldr	r3, [pc, #196]	; (80051c8 <HAL_RCC_OscConfig+0x478>)
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005108:	f7fd fd1c 	bl	8002b44 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005110:	f7fd fd18 	bl	8002b44 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e087      	b.n	8005232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005122:	4b27      	ldr	r3, [pc, #156]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f0      	bne.n	8005110 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69da      	ldr	r2, [r3, #28]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	019b      	lsls	r3, r3, #6
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	085b      	lsrs	r3, r3, #1
 8005146:	3b01      	subs	r3, #1
 8005148:	041b      	lsls	r3, r3, #16
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	061b      	lsls	r3, r3, #24
 8005152:	491b      	ldr	r1, [pc, #108]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 8005154:	4313      	orrs	r3, r2
 8005156:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005158:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <HAL_RCC_OscConfig+0x478>)
 800515a:	2201      	movs	r2, #1
 800515c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800515e:	f7fd fcf1 	bl	8002b44 <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005166:	f7fd fced 	bl	8002b44 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e05c      	b.n	8005232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005178:	4b11      	ldr	r3, [pc, #68]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0f0      	beq.n	8005166 <HAL_RCC_OscConfig+0x416>
 8005184:	e054      	b.n	8005230 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005186:	4b10      	ldr	r3, [pc, #64]	; (80051c8 <HAL_RCC_OscConfig+0x478>)
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800518c:	f7fd fcda 	bl	8002b44 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005194:	f7fd fcd6 	bl	8002b44 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e045      	b.n	8005232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a6:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <HAL_RCC_OscConfig+0x470>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f0      	bne.n	8005194 <HAL_RCC_OscConfig+0x444>
 80051b2:	e03d      	b.n	8005230 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d107      	bne.n	80051cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e038      	b.n	8005232 <HAL_RCC_OscConfig+0x4e2>
 80051c0:	40023800 	.word	0x40023800
 80051c4:	40007000 	.word	0x40007000
 80051c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051cc:	4b1b      	ldr	r3, [pc, #108]	; (800523c <HAL_RCC_OscConfig+0x4ec>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d028      	beq.n	800522c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d121      	bne.n	800522c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d11a      	bne.n	800522c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051fc:	4013      	ands	r3, r2
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005202:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005204:	4293      	cmp	r3, r2
 8005206:	d111      	bne.n	800522c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005212:	085b      	lsrs	r3, r3, #1
 8005214:	3b01      	subs	r3, #1
 8005216:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005218:	429a      	cmp	r2, r3
 800521a:	d107      	bne.n	800522c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005226:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005228:	429a      	cmp	r2, r3
 800522a:	d001      	beq.n	8005230 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e000      	b.n	8005232 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40023800 	.word	0x40023800

08005240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e0cc      	b.n	80053ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005254:	4b68      	ldr	r3, [pc, #416]	; (80053f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d90c      	bls.n	800527c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005262:	4b65      	ldr	r3, [pc, #404]	; (80053f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800526a:	4b63      	ldr	r3, [pc, #396]	; (80053f8 <HAL_RCC_ClockConfig+0x1b8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	429a      	cmp	r2, r3
 8005276:	d001      	beq.n	800527c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e0b8      	b.n	80053ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d020      	beq.n	80052ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005294:	4b59      	ldr	r3, [pc, #356]	; (80053fc <HAL_RCC_ClockConfig+0x1bc>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	4a58      	ldr	r2, [pc, #352]	; (80053fc <HAL_RCC_ClockConfig+0x1bc>)
 800529a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800529e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0308 	and.w	r3, r3, #8
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d005      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052ac:	4b53      	ldr	r3, [pc, #332]	; (80053fc <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	4a52      	ldr	r2, [pc, #328]	; (80053fc <HAL_RCC_ClockConfig+0x1bc>)
 80052b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052b8:	4b50      	ldr	r3, [pc, #320]	; (80053fc <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	494d      	ldr	r1, [pc, #308]	; (80053fc <HAL_RCC_ClockConfig+0x1bc>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d044      	beq.n	8005360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d107      	bne.n	80052ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052de:	4b47      	ldr	r3, [pc, #284]	; (80053fc <HAL_RCC_ClockConfig+0x1bc>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d119      	bne.n	800531e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e07f      	b.n	80053ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d003      	beq.n	80052fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d107      	bne.n	800530e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052fe:	4b3f      	ldr	r3, [pc, #252]	; (80053fc <HAL_RCC_ClockConfig+0x1bc>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d109      	bne.n	800531e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e06f      	b.n	80053ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800530e:	4b3b      	ldr	r3, [pc, #236]	; (80053fc <HAL_RCC_ClockConfig+0x1bc>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e067      	b.n	80053ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800531e:	4b37      	ldr	r3, [pc, #220]	; (80053fc <HAL_RCC_ClockConfig+0x1bc>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f023 0203 	bic.w	r2, r3, #3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	4934      	ldr	r1, [pc, #208]	; (80053fc <HAL_RCC_ClockConfig+0x1bc>)
 800532c:	4313      	orrs	r3, r2
 800532e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005330:	f7fd fc08 	bl	8002b44 <HAL_GetTick>
 8005334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005336:	e00a      	b.n	800534e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005338:	f7fd fc04 	bl	8002b44 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	f241 3288 	movw	r2, #5000	; 0x1388
 8005346:	4293      	cmp	r3, r2
 8005348:	d901      	bls.n	800534e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e04f      	b.n	80053ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534e:	4b2b      	ldr	r3, [pc, #172]	; (80053fc <HAL_RCC_ClockConfig+0x1bc>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 020c 	and.w	r2, r3, #12
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	429a      	cmp	r2, r3
 800535e:	d1eb      	bne.n	8005338 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005360:	4b25      	ldr	r3, [pc, #148]	; (80053f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d20c      	bcs.n	8005388 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536e:	4b22      	ldr	r3, [pc, #136]	; (80053f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005376:	4b20      	ldr	r3, [pc, #128]	; (80053f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d001      	beq.n	8005388 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e032      	b.n	80053ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d008      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005394:	4b19      	ldr	r3, [pc, #100]	; (80053fc <HAL_RCC_ClockConfig+0x1bc>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	4916      	ldr	r1, [pc, #88]	; (80053fc <HAL_RCC_ClockConfig+0x1bc>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d009      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053b2:	4b12      	ldr	r3, [pc, #72]	; (80053fc <HAL_RCC_ClockConfig+0x1bc>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	490e      	ldr	r1, [pc, #56]	; (80053fc <HAL_RCC_ClockConfig+0x1bc>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053c6:	f000 f821 	bl	800540c <HAL_RCC_GetSysClockFreq>
 80053ca:	4602      	mov	r2, r0
 80053cc:	4b0b      	ldr	r3, [pc, #44]	; (80053fc <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	091b      	lsrs	r3, r3, #4
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	490a      	ldr	r1, [pc, #40]	; (8005400 <HAL_RCC_ClockConfig+0x1c0>)
 80053d8:	5ccb      	ldrb	r3, [r1, r3]
 80053da:	fa22 f303 	lsr.w	r3, r2, r3
 80053de:	4a09      	ldr	r2, [pc, #36]	; (8005404 <HAL_RCC_ClockConfig+0x1c4>)
 80053e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053e2:	4b09      	ldr	r3, [pc, #36]	; (8005408 <HAL_RCC_ClockConfig+0x1c8>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fd fb68 	bl	8002abc <HAL_InitTick>

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	40023c00 	.word	0x40023c00
 80053fc:	40023800 	.word	0x40023800
 8005400:	0800c130 	.word	0x0800c130
 8005404:	20000000 	.word	0x20000000
 8005408:	20000004 	.word	0x20000004

0800540c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800540c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005410:	b094      	sub	sp, #80	; 0x50
 8005412:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	647b      	str	r3, [r7, #68]	; 0x44
 8005418:	2300      	movs	r3, #0
 800541a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800541c:	2300      	movs	r3, #0
 800541e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005424:	4b79      	ldr	r3, [pc, #484]	; (800560c <HAL_RCC_GetSysClockFreq+0x200>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 030c 	and.w	r3, r3, #12
 800542c:	2b08      	cmp	r3, #8
 800542e:	d00d      	beq.n	800544c <HAL_RCC_GetSysClockFreq+0x40>
 8005430:	2b08      	cmp	r3, #8
 8005432:	f200 80e1 	bhi.w	80055f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <HAL_RCC_GetSysClockFreq+0x34>
 800543a:	2b04      	cmp	r3, #4
 800543c:	d003      	beq.n	8005446 <HAL_RCC_GetSysClockFreq+0x3a>
 800543e:	e0db      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005440:	4b73      	ldr	r3, [pc, #460]	; (8005610 <HAL_RCC_GetSysClockFreq+0x204>)
 8005442:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005444:	e0db      	b.n	80055fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005446:	4b73      	ldr	r3, [pc, #460]	; (8005614 <HAL_RCC_GetSysClockFreq+0x208>)
 8005448:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800544a:	e0d8      	b.n	80055fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800544c:	4b6f      	ldr	r3, [pc, #444]	; (800560c <HAL_RCC_GetSysClockFreq+0x200>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005454:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005456:	4b6d      	ldr	r3, [pc, #436]	; (800560c <HAL_RCC_GetSysClockFreq+0x200>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d063      	beq.n	800552a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005462:	4b6a      	ldr	r3, [pc, #424]	; (800560c <HAL_RCC_GetSysClockFreq+0x200>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	099b      	lsrs	r3, r3, #6
 8005468:	2200      	movs	r2, #0
 800546a:	63bb      	str	r3, [r7, #56]	; 0x38
 800546c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005474:	633b      	str	r3, [r7, #48]	; 0x30
 8005476:	2300      	movs	r3, #0
 8005478:	637b      	str	r3, [r7, #52]	; 0x34
 800547a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800547e:	4622      	mov	r2, r4
 8005480:	462b      	mov	r3, r5
 8005482:	f04f 0000 	mov.w	r0, #0
 8005486:	f04f 0100 	mov.w	r1, #0
 800548a:	0159      	lsls	r1, r3, #5
 800548c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005490:	0150      	lsls	r0, r2, #5
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4621      	mov	r1, r4
 8005498:	1a51      	subs	r1, r2, r1
 800549a:	6139      	str	r1, [r7, #16]
 800549c:	4629      	mov	r1, r5
 800549e:	eb63 0301 	sbc.w	r3, r3, r1
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054b0:	4659      	mov	r1, fp
 80054b2:	018b      	lsls	r3, r1, #6
 80054b4:	4651      	mov	r1, sl
 80054b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054ba:	4651      	mov	r1, sl
 80054bc:	018a      	lsls	r2, r1, #6
 80054be:	4651      	mov	r1, sl
 80054c0:	ebb2 0801 	subs.w	r8, r2, r1
 80054c4:	4659      	mov	r1, fp
 80054c6:	eb63 0901 	sbc.w	r9, r3, r1
 80054ca:	f04f 0200 	mov.w	r2, #0
 80054ce:	f04f 0300 	mov.w	r3, #0
 80054d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054de:	4690      	mov	r8, r2
 80054e0:	4699      	mov	r9, r3
 80054e2:	4623      	mov	r3, r4
 80054e4:	eb18 0303 	adds.w	r3, r8, r3
 80054e8:	60bb      	str	r3, [r7, #8]
 80054ea:	462b      	mov	r3, r5
 80054ec:	eb49 0303 	adc.w	r3, r9, r3
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	f04f 0200 	mov.w	r2, #0
 80054f6:	f04f 0300 	mov.w	r3, #0
 80054fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054fe:	4629      	mov	r1, r5
 8005500:	024b      	lsls	r3, r1, #9
 8005502:	4621      	mov	r1, r4
 8005504:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005508:	4621      	mov	r1, r4
 800550a:	024a      	lsls	r2, r1, #9
 800550c:	4610      	mov	r0, r2
 800550e:	4619      	mov	r1, r3
 8005510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005512:	2200      	movs	r2, #0
 8005514:	62bb      	str	r3, [r7, #40]	; 0x28
 8005516:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005518:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800551c:	f7fb fbbc 	bl	8000c98 <__aeabi_uldivmod>
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	4613      	mov	r3, r2
 8005526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005528:	e058      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800552a:	4b38      	ldr	r3, [pc, #224]	; (800560c <HAL_RCC_GetSysClockFreq+0x200>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	099b      	lsrs	r3, r3, #6
 8005530:	2200      	movs	r2, #0
 8005532:	4618      	mov	r0, r3
 8005534:	4611      	mov	r1, r2
 8005536:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800553a:	623b      	str	r3, [r7, #32]
 800553c:	2300      	movs	r3, #0
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
 8005540:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005544:	4642      	mov	r2, r8
 8005546:	464b      	mov	r3, r9
 8005548:	f04f 0000 	mov.w	r0, #0
 800554c:	f04f 0100 	mov.w	r1, #0
 8005550:	0159      	lsls	r1, r3, #5
 8005552:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005556:	0150      	lsls	r0, r2, #5
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4641      	mov	r1, r8
 800555e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005562:	4649      	mov	r1, r9
 8005564:	eb63 0b01 	sbc.w	fp, r3, r1
 8005568:	f04f 0200 	mov.w	r2, #0
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005574:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005578:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800557c:	ebb2 040a 	subs.w	r4, r2, sl
 8005580:	eb63 050b 	sbc.w	r5, r3, fp
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	f04f 0300 	mov.w	r3, #0
 800558c:	00eb      	lsls	r3, r5, #3
 800558e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005592:	00e2      	lsls	r2, r4, #3
 8005594:	4614      	mov	r4, r2
 8005596:	461d      	mov	r5, r3
 8005598:	4643      	mov	r3, r8
 800559a:	18e3      	adds	r3, r4, r3
 800559c:	603b      	str	r3, [r7, #0]
 800559e:	464b      	mov	r3, r9
 80055a0:	eb45 0303 	adc.w	r3, r5, r3
 80055a4:	607b      	str	r3, [r7, #4]
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055b2:	4629      	mov	r1, r5
 80055b4:	028b      	lsls	r3, r1, #10
 80055b6:	4621      	mov	r1, r4
 80055b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055bc:	4621      	mov	r1, r4
 80055be:	028a      	lsls	r2, r1, #10
 80055c0:	4610      	mov	r0, r2
 80055c2:	4619      	mov	r1, r3
 80055c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c6:	2200      	movs	r2, #0
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	61fa      	str	r2, [r7, #28]
 80055cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055d0:	f7fb fb62 	bl	8000c98 <__aeabi_uldivmod>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4613      	mov	r3, r2
 80055da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055dc:	4b0b      	ldr	r3, [pc, #44]	; (800560c <HAL_RCC_GetSysClockFreq+0x200>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	0c1b      	lsrs	r3, r3, #16
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	3301      	adds	r3, #1
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80055ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055f6:	e002      	b.n	80055fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055f8:	4b05      	ldr	r3, [pc, #20]	; (8005610 <HAL_RCC_GetSysClockFreq+0x204>)
 80055fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005600:	4618      	mov	r0, r3
 8005602:	3750      	adds	r7, #80	; 0x50
 8005604:	46bd      	mov	sp, r7
 8005606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800560a:	bf00      	nop
 800560c:	40023800 	.word	0x40023800
 8005610:	00f42400 	.word	0x00f42400
 8005614:	007a1200 	.word	0x007a1200

08005618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800561c:	4b03      	ldr	r3, [pc, #12]	; (800562c <HAL_RCC_GetHCLKFreq+0x14>)
 800561e:	681b      	ldr	r3, [r3, #0]
}
 8005620:	4618      	mov	r0, r3
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	20000000 	.word	0x20000000

08005630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005634:	f7ff fff0 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 8005638:	4602      	mov	r2, r0
 800563a:	4b05      	ldr	r3, [pc, #20]	; (8005650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	0a9b      	lsrs	r3, r3, #10
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	4903      	ldr	r1, [pc, #12]	; (8005654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005646:	5ccb      	ldrb	r3, [r1, r3]
 8005648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800564c:	4618      	mov	r0, r3
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40023800 	.word	0x40023800
 8005654:	0800c140 	.word	0x0800c140

08005658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800565c:	f7ff ffdc 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 8005660:	4602      	mov	r2, r0
 8005662:	4b05      	ldr	r3, [pc, #20]	; (8005678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	0b5b      	lsrs	r3, r3, #13
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	4903      	ldr	r1, [pc, #12]	; (800567c <HAL_RCC_GetPCLK2Freq+0x24>)
 800566e:	5ccb      	ldrb	r3, [r1, r3]
 8005670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005674:	4618      	mov	r0, r3
 8005676:	bd80      	pop	{r7, pc}
 8005678:	40023800 	.word	0x40023800
 800567c:	0800c140 	.word	0x0800c140

08005680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e041      	b.n	8005716 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d106      	bne.n	80056ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7fd f812 	bl	80026d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3304      	adds	r3, #4
 80056bc:	4619      	mov	r1, r3
 80056be:	4610      	mov	r0, r2
 80056c0:	f000 fc5e 	bl	8005f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
	...

08005720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b01      	cmp	r3, #1
 8005732:	d001      	beq.n	8005738 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e044      	b.n	80057c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0201 	orr.w	r2, r2, #1
 800574e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a1e      	ldr	r2, [pc, #120]	; (80057d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d018      	beq.n	800578c <HAL_TIM_Base_Start_IT+0x6c>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005762:	d013      	beq.n	800578c <HAL_TIM_Base_Start_IT+0x6c>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1a      	ldr	r2, [pc, #104]	; (80057d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00e      	beq.n	800578c <HAL_TIM_Base_Start_IT+0x6c>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a19      	ldr	r2, [pc, #100]	; (80057d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d009      	beq.n	800578c <HAL_TIM_Base_Start_IT+0x6c>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a17      	ldr	r2, [pc, #92]	; (80057dc <HAL_TIM_Base_Start_IT+0xbc>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d004      	beq.n	800578c <HAL_TIM_Base_Start_IT+0x6c>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a16      	ldr	r2, [pc, #88]	; (80057e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d111      	bne.n	80057b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b06      	cmp	r3, #6
 800579c:	d010      	beq.n	80057c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 0201 	orr.w	r2, r2, #1
 80057ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ae:	e007      	b.n	80057c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	40010000 	.word	0x40010000
 80057d4:	40000400 	.word	0x40000400
 80057d8:	40000800 	.word	0x40000800
 80057dc:	40000c00 	.word	0x40000c00
 80057e0:	40014000 	.word	0x40014000

080057e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e041      	b.n	800587a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d106      	bne.n	8005810 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f839 	bl	8005882 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3304      	adds	r3, #4
 8005820:	4619      	mov	r1, r3
 8005822:	4610      	mov	r0, r2
 8005824:	f000 fbac 	bl	8005f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
	...

08005898 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d109      	bne.n	80058bc <HAL_TIM_PWM_Start+0x24>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	bf14      	ite	ne
 80058b4:	2301      	movne	r3, #1
 80058b6:	2300      	moveq	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	e022      	b.n	8005902 <HAL_TIM_PWM_Start+0x6a>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d109      	bne.n	80058d6 <HAL_TIM_PWM_Start+0x3e>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	bf14      	ite	ne
 80058ce:	2301      	movne	r3, #1
 80058d0:	2300      	moveq	r3, #0
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	e015      	b.n	8005902 <HAL_TIM_PWM_Start+0x6a>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d109      	bne.n	80058f0 <HAL_TIM_PWM_Start+0x58>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	bf14      	ite	ne
 80058e8:	2301      	movne	r3, #1
 80058ea:	2300      	moveq	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	e008      	b.n	8005902 <HAL_TIM_PWM_Start+0x6a>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	bf14      	ite	ne
 80058fc:	2301      	movne	r3, #1
 80058fe:	2300      	moveq	r3, #0
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e068      	b.n	80059dc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d104      	bne.n	800591a <HAL_TIM_PWM_Start+0x82>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005918:	e013      	b.n	8005942 <HAL_TIM_PWM_Start+0xaa>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b04      	cmp	r3, #4
 800591e:	d104      	bne.n	800592a <HAL_TIM_PWM_Start+0x92>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005928:	e00b      	b.n	8005942 <HAL_TIM_PWM_Start+0xaa>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b08      	cmp	r3, #8
 800592e:	d104      	bne.n	800593a <HAL_TIM_PWM_Start+0xa2>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005938:	e003      	b.n	8005942 <HAL_TIM_PWM_Start+0xaa>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2202      	movs	r2, #2
 800593e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2201      	movs	r2, #1
 8005948:	6839      	ldr	r1, [r7, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fdbe 	bl	80064cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a23      	ldr	r2, [pc, #140]	; (80059e4 <HAL_TIM_PWM_Start+0x14c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d107      	bne.n	800596a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005968:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1d      	ldr	r2, [pc, #116]	; (80059e4 <HAL_TIM_PWM_Start+0x14c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d018      	beq.n	80059a6 <HAL_TIM_PWM_Start+0x10e>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597c:	d013      	beq.n	80059a6 <HAL_TIM_PWM_Start+0x10e>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a19      	ldr	r2, [pc, #100]	; (80059e8 <HAL_TIM_PWM_Start+0x150>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00e      	beq.n	80059a6 <HAL_TIM_PWM_Start+0x10e>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a17      	ldr	r2, [pc, #92]	; (80059ec <HAL_TIM_PWM_Start+0x154>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d009      	beq.n	80059a6 <HAL_TIM_PWM_Start+0x10e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a16      	ldr	r2, [pc, #88]	; (80059f0 <HAL_TIM_PWM_Start+0x158>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d004      	beq.n	80059a6 <HAL_TIM_PWM_Start+0x10e>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a14      	ldr	r2, [pc, #80]	; (80059f4 <HAL_TIM_PWM_Start+0x15c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d111      	bne.n	80059ca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b06      	cmp	r3, #6
 80059b6:	d010      	beq.n	80059da <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0201 	orr.w	r2, r2, #1
 80059c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c8:	e007      	b.n	80059da <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f042 0201 	orr.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40010000 	.word	0x40010000
 80059e8:	40000400 	.word	0x40000400
 80059ec:	40000800 	.word	0x40000800
 80059f0:	40000c00 	.word	0x40000c00
 80059f4:	40014000 	.word	0x40014000

080059f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d122      	bne.n	8005a54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d11b      	bne.n	8005a54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f06f 0202 	mvn.w	r2, #2
 8005a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	f003 0303 	and.w	r3, r3, #3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fa81 	bl	8005f42 <HAL_TIM_IC_CaptureCallback>
 8005a40:	e005      	b.n	8005a4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fa73 	bl	8005f2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fa84 	bl	8005f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d122      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d11b      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f06f 0204 	mvn.w	r2, #4
 8005a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fa57 	bl	8005f42 <HAL_TIM_IC_CaptureCallback>
 8005a94:	e005      	b.n	8005aa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fa49 	bl	8005f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fa5a 	bl	8005f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b08      	cmp	r3, #8
 8005ab4:	d122      	bne.n	8005afc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d11b      	bne.n	8005afc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f06f 0208 	mvn.w	r2, #8
 8005acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2204      	movs	r2, #4
 8005ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	f003 0303 	and.w	r3, r3, #3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fa2d 	bl	8005f42 <HAL_TIM_IC_CaptureCallback>
 8005ae8:	e005      	b.n	8005af6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fa1f 	bl	8005f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fa30 	bl	8005f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	2b10      	cmp	r3, #16
 8005b08:	d122      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f003 0310 	and.w	r3, r3, #16
 8005b14:	2b10      	cmp	r3, #16
 8005b16:	d11b      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f06f 0210 	mvn.w	r2, #16
 8005b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2208      	movs	r2, #8
 8005b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fa03 	bl	8005f42 <HAL_TIM_IC_CaptureCallback>
 8005b3c:	e005      	b.n	8005b4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f9f5 	bl	8005f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fa06 	bl	8005f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d10e      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d107      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f06f 0201 	mvn.w	r2, #1
 8005b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f9cf 	bl	8005f1a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b86:	2b80      	cmp	r3, #128	; 0x80
 8005b88:	d10e      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b94:	2b80      	cmp	r3, #128	; 0x80
 8005b96:	d107      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fd30 	bl	8006608 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	d10e      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc0:	2b40      	cmp	r3, #64	; 0x40
 8005bc2:	d107      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f9cb 	bl	8005f6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f003 0320 	and.w	r3, r3, #32
 8005bde:	2b20      	cmp	r3, #32
 8005be0:	d10e      	bne.n	8005c00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f003 0320 	and.w	r3, r3, #32
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	d107      	bne.n	8005c00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f06f 0220 	mvn.w	r2, #32
 8005bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fcfa 	bl	80065f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c00:	bf00      	nop
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d101      	bne.n	8005c26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c22:	2302      	movs	r3, #2
 8005c24:	e0ae      	b.n	8005d84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b0c      	cmp	r3, #12
 8005c32:	f200 809f 	bhi.w	8005d74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c36:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005c71 	.word	0x08005c71
 8005c40:	08005d75 	.word	0x08005d75
 8005c44:	08005d75 	.word	0x08005d75
 8005c48:	08005d75 	.word	0x08005d75
 8005c4c:	08005cb1 	.word	0x08005cb1
 8005c50:	08005d75 	.word	0x08005d75
 8005c54:	08005d75 	.word	0x08005d75
 8005c58:	08005d75 	.word	0x08005d75
 8005c5c:	08005cf3 	.word	0x08005cf3
 8005c60:	08005d75 	.word	0x08005d75
 8005c64:	08005d75 	.word	0x08005d75
 8005c68:	08005d75 	.word	0x08005d75
 8005c6c:	08005d33 	.word	0x08005d33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68b9      	ldr	r1, [r7, #8]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 fa02 	bl	8006080 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699a      	ldr	r2, [r3, #24]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0208 	orr.w	r2, r2, #8
 8005c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699a      	ldr	r2, [r3, #24]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0204 	bic.w	r2, r2, #4
 8005c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6999      	ldr	r1, [r3, #24]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	691a      	ldr	r2, [r3, #16]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	619a      	str	r2, [r3, #24]
      break;
 8005cae:	e064      	b.n	8005d7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68b9      	ldr	r1, [r7, #8]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fa48 	bl	800614c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6999      	ldr	r1, [r3, #24]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	021a      	lsls	r2, r3, #8
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	619a      	str	r2, [r3, #24]
      break;
 8005cf0:	e043      	b.n	8005d7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68b9      	ldr	r1, [r7, #8]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fa93 	bl	8006224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69da      	ldr	r2, [r3, #28]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 0208 	orr.w	r2, r2, #8
 8005d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69da      	ldr	r2, [r3, #28]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0204 	bic.w	r2, r2, #4
 8005d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69d9      	ldr	r1, [r3, #28]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	61da      	str	r2, [r3, #28]
      break;
 8005d30:	e023      	b.n	8005d7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fadd 	bl	80062f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69da      	ldr	r2, [r3, #28]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69da      	ldr	r2, [r3, #28]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69d9      	ldr	r1, [r3, #28]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	021a      	lsls	r2, r3, #8
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	61da      	str	r2, [r3, #28]
      break;
 8005d72:	e002      	b.n	8005d7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	75fb      	strb	r3, [r7, #23]
      break;
 8005d78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d101      	bne.n	8005da8 <HAL_TIM_ConfigClockSource+0x1c>
 8005da4:	2302      	movs	r3, #2
 8005da6:	e0b4      	b.n	8005f12 <HAL_TIM_ConfigClockSource+0x186>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005de0:	d03e      	beq.n	8005e60 <HAL_TIM_ConfigClockSource+0xd4>
 8005de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005de6:	f200 8087 	bhi.w	8005ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dee:	f000 8086 	beq.w	8005efe <HAL_TIM_ConfigClockSource+0x172>
 8005df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df6:	d87f      	bhi.n	8005ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8005df8:	2b70      	cmp	r3, #112	; 0x70
 8005dfa:	d01a      	beq.n	8005e32 <HAL_TIM_ConfigClockSource+0xa6>
 8005dfc:	2b70      	cmp	r3, #112	; 0x70
 8005dfe:	d87b      	bhi.n	8005ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8005e00:	2b60      	cmp	r3, #96	; 0x60
 8005e02:	d050      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0x11a>
 8005e04:	2b60      	cmp	r3, #96	; 0x60
 8005e06:	d877      	bhi.n	8005ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8005e08:	2b50      	cmp	r3, #80	; 0x50
 8005e0a:	d03c      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0xfa>
 8005e0c:	2b50      	cmp	r3, #80	; 0x50
 8005e0e:	d873      	bhi.n	8005ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8005e10:	2b40      	cmp	r3, #64	; 0x40
 8005e12:	d058      	beq.n	8005ec6 <HAL_TIM_ConfigClockSource+0x13a>
 8005e14:	2b40      	cmp	r3, #64	; 0x40
 8005e16:	d86f      	bhi.n	8005ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8005e18:	2b30      	cmp	r3, #48	; 0x30
 8005e1a:	d064      	beq.n	8005ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8005e1c:	2b30      	cmp	r3, #48	; 0x30
 8005e1e:	d86b      	bhi.n	8005ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8005e20:	2b20      	cmp	r3, #32
 8005e22:	d060      	beq.n	8005ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8005e24:	2b20      	cmp	r3, #32
 8005e26:	d867      	bhi.n	8005ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d05c      	beq.n	8005ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8005e2c:	2b10      	cmp	r3, #16
 8005e2e:	d05a      	beq.n	8005ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8005e30:	e062      	b.n	8005ef8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6818      	ldr	r0, [r3, #0]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	6899      	ldr	r1, [r3, #8]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f000 fb23 	bl	800648c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	609a      	str	r2, [r3, #8]
      break;
 8005e5e:	e04f      	b.n	8005f00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6818      	ldr	r0, [r3, #0]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	6899      	ldr	r1, [r3, #8]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f000 fb0c 	bl	800648c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689a      	ldr	r2, [r3, #8]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e82:	609a      	str	r2, [r3, #8]
      break;
 8005e84:	e03c      	b.n	8005f00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6818      	ldr	r0, [r3, #0]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	6859      	ldr	r1, [r3, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	461a      	mov	r2, r3
 8005e94:	f000 fa80 	bl	8006398 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2150      	movs	r1, #80	; 0x50
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 fad9 	bl	8006456 <TIM_ITRx_SetConfig>
      break;
 8005ea4:	e02c      	b.n	8005f00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6818      	ldr	r0, [r3, #0]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	6859      	ldr	r1, [r3, #4]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	f000 fa9f 	bl	80063f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2160      	movs	r1, #96	; 0x60
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fac9 	bl	8006456 <TIM_ITRx_SetConfig>
      break;
 8005ec4:	e01c      	b.n	8005f00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	6859      	ldr	r1, [r3, #4]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f000 fa60 	bl	8006398 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2140      	movs	r1, #64	; 0x40
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 fab9 	bl	8006456 <TIM_ITRx_SetConfig>
      break;
 8005ee4:	e00c      	b.n	8005f00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	f000 fab0 	bl	8006456 <TIM_ITRx_SetConfig>
      break;
 8005ef6:	e003      	b.n	8005f00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	73fb      	strb	r3, [r7, #15]
      break;
 8005efc:	e000      	b.n	8005f00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005efe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
	...

08005f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a34      	ldr	r2, [pc, #208]	; (8006064 <TIM_Base_SetConfig+0xe4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00f      	beq.n	8005fb8 <TIM_Base_SetConfig+0x38>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f9e:	d00b      	beq.n	8005fb8 <TIM_Base_SetConfig+0x38>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a31      	ldr	r2, [pc, #196]	; (8006068 <TIM_Base_SetConfig+0xe8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d007      	beq.n	8005fb8 <TIM_Base_SetConfig+0x38>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a30      	ldr	r2, [pc, #192]	; (800606c <TIM_Base_SetConfig+0xec>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d003      	beq.n	8005fb8 <TIM_Base_SetConfig+0x38>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a2f      	ldr	r2, [pc, #188]	; (8006070 <TIM_Base_SetConfig+0xf0>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d108      	bne.n	8005fca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a25      	ldr	r2, [pc, #148]	; (8006064 <TIM_Base_SetConfig+0xe4>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d01b      	beq.n	800600a <TIM_Base_SetConfig+0x8a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd8:	d017      	beq.n	800600a <TIM_Base_SetConfig+0x8a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a22      	ldr	r2, [pc, #136]	; (8006068 <TIM_Base_SetConfig+0xe8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d013      	beq.n	800600a <TIM_Base_SetConfig+0x8a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a21      	ldr	r2, [pc, #132]	; (800606c <TIM_Base_SetConfig+0xec>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00f      	beq.n	800600a <TIM_Base_SetConfig+0x8a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a20      	ldr	r2, [pc, #128]	; (8006070 <TIM_Base_SetConfig+0xf0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00b      	beq.n	800600a <TIM_Base_SetConfig+0x8a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a1f      	ldr	r2, [pc, #124]	; (8006074 <TIM_Base_SetConfig+0xf4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d007      	beq.n	800600a <TIM_Base_SetConfig+0x8a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a1e      	ldr	r2, [pc, #120]	; (8006078 <TIM_Base_SetConfig+0xf8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d003      	beq.n	800600a <TIM_Base_SetConfig+0x8a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a1d      	ldr	r2, [pc, #116]	; (800607c <TIM_Base_SetConfig+0xfc>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d108      	bne.n	800601c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a08      	ldr	r2, [pc, #32]	; (8006064 <TIM_Base_SetConfig+0xe4>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d103      	bne.n	8006050 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	615a      	str	r2, [r3, #20]
}
 8006056:	bf00      	nop
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	40010000 	.word	0x40010000
 8006068:	40000400 	.word	0x40000400
 800606c:	40000800 	.word	0x40000800
 8006070:	40000c00 	.word	0x40000c00
 8006074:	40014000 	.word	0x40014000
 8006078:	40014400 	.word	0x40014400
 800607c:	40014800 	.word	0x40014800

08006080 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	f023 0201 	bic.w	r2, r3, #1
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0303 	bic.w	r3, r3, #3
 80060b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f023 0302 	bic.w	r3, r3, #2
 80060c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a1c      	ldr	r2, [pc, #112]	; (8006148 <TIM_OC1_SetConfig+0xc8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d10c      	bne.n	80060f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f023 0308 	bic.w	r3, r3, #8
 80060e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f023 0304 	bic.w	r3, r3, #4
 80060f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a13      	ldr	r2, [pc, #76]	; (8006148 <TIM_OC1_SetConfig+0xc8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d111      	bne.n	8006122 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800610c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	621a      	str	r2, [r3, #32]
}
 800613c:	bf00      	nop
 800613e:	371c      	adds	r7, #28
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	40010000 	.word	0x40010000

0800614c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	f023 0210 	bic.w	r2, r3, #16
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800617a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	021b      	lsls	r3, r3, #8
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	4313      	orrs	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f023 0320 	bic.w	r3, r3, #32
 8006196:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a1e      	ldr	r2, [pc, #120]	; (8006220 <TIM_OC2_SetConfig+0xd4>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d10d      	bne.n	80061c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	011b      	lsls	r3, r3, #4
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a15      	ldr	r2, [pc, #84]	; (8006220 <TIM_OC2_SetConfig+0xd4>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d113      	bne.n	80061f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	621a      	str	r2, [r3, #32]
}
 8006212:	bf00      	nop
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	40010000 	.word	0x40010000

08006224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006224:	b480      	push	{r7}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0303 	bic.w	r3, r3, #3
 800625a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800626c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	021b      	lsls	r3, r3, #8
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a1d      	ldr	r2, [pc, #116]	; (80062f4 <TIM_OC3_SetConfig+0xd0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d10d      	bne.n	800629e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006288:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	021b      	lsls	r3, r3, #8
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	4313      	orrs	r3, r2
 8006294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800629c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a14      	ldr	r2, [pc, #80]	; (80062f4 <TIM_OC3_SetConfig+0xd0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d113      	bne.n	80062ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	4313      	orrs	r3, r2
 80062c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	011b      	lsls	r3, r3, #4
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	621a      	str	r2, [r3, #32]
}
 80062e8:	bf00      	nop
 80062ea:	371c      	adds	r7, #28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	40010000 	.word	0x40010000

080062f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800632e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	021b      	lsls	r3, r3, #8
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	031b      	lsls	r3, r3, #12
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	4313      	orrs	r3, r2
 800634e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a10      	ldr	r2, [pc, #64]	; (8006394 <TIM_OC4_SetConfig+0x9c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d109      	bne.n	800636c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800635e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	019b      	lsls	r3, r3, #6
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	621a      	str	r2, [r3, #32]
}
 8006386:	bf00      	nop
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40010000 	.word	0x40010000

08006398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	f023 0201 	bic.w	r2, r3, #1
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	011b      	lsls	r3, r3, #4
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f023 030a 	bic.w	r3, r3, #10
 80063d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	4313      	orrs	r3, r2
 80063dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	621a      	str	r2, [r3, #32]
}
 80063ea:	bf00      	nop
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b087      	sub	sp, #28
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	60b9      	str	r1, [r7, #8]
 8006400:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	f023 0210 	bic.w	r2, r3, #16
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006420:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	031b      	lsls	r3, r3, #12
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	4313      	orrs	r3, r2
 800642a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006432:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	4313      	orrs	r3, r2
 800643c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	621a      	str	r2, [r3, #32]
}
 800644a:	bf00      	nop
 800644c:	371c      	adds	r7, #28
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006456:	b480      	push	{r7}
 8006458:	b085      	sub	sp, #20
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	f043 0307 	orr.w	r3, r3, #7
 8006478:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	609a      	str	r2, [r3, #8]
}
 8006480:	bf00      	nop
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	021a      	lsls	r2, r3, #8
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	431a      	orrs	r2, r3
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	609a      	str	r2, [r3, #8]
}
 80064c0:	bf00      	nop
 80064c2:	371c      	adds	r7, #28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f003 031f 	and.w	r3, r3, #31
 80064de:	2201      	movs	r2, #1
 80064e0:	fa02 f303 	lsl.w	r3, r2, r3
 80064e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6a1a      	ldr	r2, [r3, #32]
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	43db      	mvns	r3, r3
 80064ee:	401a      	ands	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a1a      	ldr	r2, [r3, #32]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f003 031f 	and.w	r3, r3, #31
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	fa01 f303 	lsl.w	r3, r1, r3
 8006504:	431a      	orrs	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	621a      	str	r2, [r3, #32]
}
 800650a:	bf00      	nop
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
	...

08006518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800652c:	2302      	movs	r3, #2
 800652e:	e050      	b.n	80065d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4313      	orrs	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a1c      	ldr	r2, [pc, #112]	; (80065e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d018      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800657c:	d013      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a18      	ldr	r2, [pc, #96]	; (80065e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d00e      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a16      	ldr	r2, [pc, #88]	; (80065e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d009      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a15      	ldr	r2, [pc, #84]	; (80065ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d004      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a13      	ldr	r2, [pc, #76]	; (80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d10c      	bne.n	80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	40010000 	.word	0x40010000
 80065e4:	40000400 	.word	0x40000400
 80065e8:	40000800 	.word	0x40000800
 80065ec:	40000c00 	.word	0x40000c00
 80065f0:	40014000 	.word	0x40014000

080065f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e03f      	b.n	80066ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d106      	bne.n	8006648 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7fc f94a 	bl	80028dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2224      	movs	r2, #36	; 0x24
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800665e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fddf 	bl	8007224 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	691a      	ldr	r2, [r3, #16]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006674:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	695a      	ldr	r2, [r3, #20]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006684:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006694:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2220      	movs	r2, #32
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b08a      	sub	sp, #40	; 0x28
 80066ba:	af02      	add	r7, sp, #8
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	603b      	str	r3, [r7, #0]
 80066c2:	4613      	mov	r3, r2
 80066c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b20      	cmp	r3, #32
 80066d4:	d17c      	bne.n	80067d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <HAL_UART_Transmit+0x2c>
 80066dc:	88fb      	ldrh	r3, [r7, #6]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e075      	b.n	80067d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d101      	bne.n	80066f4 <HAL_UART_Transmit+0x3e>
 80066f0:	2302      	movs	r3, #2
 80066f2:	e06e      	b.n	80067d2 <HAL_UART_Transmit+0x11c>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2221      	movs	r2, #33	; 0x21
 8006706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800670a:	f7fc fa1b 	bl	8002b44 <HAL_GetTick>
 800670e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	88fa      	ldrh	r2, [r7, #6]
 8006714:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	88fa      	ldrh	r2, [r7, #6]
 800671a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006724:	d108      	bne.n	8006738 <HAL_UART_Transmit+0x82>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d104      	bne.n	8006738 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800672e:	2300      	movs	r3, #0
 8006730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	e003      	b.n	8006740 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800673c:	2300      	movs	r3, #0
 800673e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006748:	e02a      	b.n	80067a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	2200      	movs	r2, #0
 8006752:	2180      	movs	r1, #128	; 0x80
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 fb1f 	bl	8006d98 <UART_WaitOnFlagUntilTimeout>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e036      	b.n	80067d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10b      	bne.n	8006782 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006778:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	3302      	adds	r3, #2
 800677e:	61bb      	str	r3, [r7, #24]
 8006780:	e007      	b.n	8006792 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	781a      	ldrb	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	3301      	adds	r3, #1
 8006790:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006796:	b29b      	uxth	r3, r3
 8006798:	3b01      	subs	r3, #1
 800679a:	b29a      	uxth	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1cf      	bne.n	800674a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2200      	movs	r2, #0
 80067b2:	2140      	movs	r1, #64	; 0x40
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 faef 	bl	8006d98 <UART_WaitOnFlagUntilTimeout>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e006      	b.n	80067d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80067cc:	2300      	movs	r3, #0
 80067ce:	e000      	b.n	80067d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80067d0:	2302      	movs	r3, #2
  }
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3720      	adds	r7, #32
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	60f8      	str	r0, [r7, #12]
 80067e2:	60b9      	str	r1, [r7, #8]
 80067e4:	4613      	mov	r3, r2
 80067e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b20      	cmp	r3, #32
 80067f2:	d11d      	bne.n	8006830 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d002      	beq.n	8006800 <HAL_UART_Receive_IT+0x26>
 80067fa:	88fb      	ldrh	r3, [r7, #6]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e016      	b.n	8006832 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800680a:	2b01      	cmp	r3, #1
 800680c:	d101      	bne.n	8006812 <HAL_UART_Receive_IT+0x38>
 800680e:	2302      	movs	r3, #2
 8006810:	e00f      	b.n	8006832 <HAL_UART_Receive_IT+0x58>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006820:	88fb      	ldrh	r3, [r7, #6]
 8006822:	461a      	mov	r2, r3
 8006824:	68b9      	ldr	r1, [r7, #8]
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 fb24 	bl	8006e74 <UART_Start_Receive_IT>
 800682c:	4603      	mov	r3, r0
 800682e:	e000      	b.n	8006832 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006830:	2302      	movs	r3, #2
  }
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b0ba      	sub	sp, #232	; 0xe8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006862:	2300      	movs	r3, #0
 8006864:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006868:	2300      	movs	r3, #0
 800686a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800686e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800687a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10f      	bne.n	80068a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b00      	cmp	r3, #0
 800688c:	d009      	beq.n	80068a2 <HAL_UART_IRQHandler+0x66>
 800688e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fc07 	bl	80070ae <UART_Receive_IT>
      return;
 80068a0:	e256      	b.n	8006d50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 80de 	beq.w	8006a68 <HAL_UART_IRQHandler+0x22c>
 80068ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d106      	bne.n	80068c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 80d1 	beq.w	8006a68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00b      	beq.n	80068ea <HAL_UART_IRQHandler+0xae>
 80068d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d005      	beq.n	80068ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	f043 0201 	orr.w	r2, r3, #1
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ee:	f003 0304 	and.w	r3, r3, #4
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00b      	beq.n	800690e <HAL_UART_IRQHandler+0xd2>
 80068f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d005      	beq.n	800690e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	f043 0202 	orr.w	r2, r3, #2
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800690e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00b      	beq.n	8006932 <HAL_UART_IRQHandler+0xf6>
 800691a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d005      	beq.n	8006932 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	f043 0204 	orr.w	r2, r3, #4
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d011      	beq.n	8006962 <HAL_UART_IRQHandler+0x126>
 800693e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d105      	bne.n	8006956 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800694a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695a:	f043 0208 	orr.w	r2, r3, #8
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 81ed 	beq.w	8006d46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800696c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006970:	f003 0320 	and.w	r3, r3, #32
 8006974:	2b00      	cmp	r3, #0
 8006976:	d008      	beq.n	800698a <HAL_UART_IRQHandler+0x14e>
 8006978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800697c:	f003 0320 	and.w	r3, r3, #32
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fb92 	bl	80070ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006994:	2b40      	cmp	r3, #64	; 0x40
 8006996:	bf0c      	ite	eq
 8006998:	2301      	moveq	r3, #1
 800699a:	2300      	movne	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d103      	bne.n	80069b6 <HAL_UART_IRQHandler+0x17a>
 80069ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d04f      	beq.n	8006a56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fa9a 	bl	8006ef0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c6:	2b40      	cmp	r3, #64	; 0x40
 80069c8:	d141      	bne.n	8006a4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3314      	adds	r3, #20
 80069d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3314      	adds	r3, #20
 80069f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1d9      	bne.n	80069ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d013      	beq.n	8006a46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	4a7d      	ldr	r2, [pc, #500]	; (8006c18 <HAL_UART_IRQHandler+0x3dc>)
 8006a24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fc fa3b 	bl	8002ea6 <HAL_DMA_Abort_IT>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d016      	beq.n	8006a64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a40:	4610      	mov	r0, r2
 8006a42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a44:	e00e      	b.n	8006a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f990 	bl	8006d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a4c:	e00a      	b.n	8006a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f98c 	bl	8006d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a54:	e006      	b.n	8006a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f988 	bl	8006d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006a62:	e170      	b.n	8006d46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a64:	bf00      	nop
    return;
 8006a66:	e16e      	b.n	8006d46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	f040 814a 	bne.w	8006d06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a76:	f003 0310 	and.w	r3, r3, #16
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 8143 	beq.w	8006d06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a84:	f003 0310 	and.w	r3, r3, #16
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 813c 	beq.w	8006d06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60bb      	str	r3, [r7, #8]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	60bb      	str	r3, [r7, #8]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	60bb      	str	r3, [r7, #8]
 8006aa2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aae:	2b40      	cmp	r3, #64	; 0x40
 8006ab0:	f040 80b4 	bne.w	8006c1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ac0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 8140 	beq.w	8006d4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ace:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	f080 8139 	bcs.w	8006d4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ade:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aea:	f000 8088 	beq.w	8006bfe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	330c      	adds	r3, #12
 8006af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	330c      	adds	r3, #12
 8006b16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1d9      	bne.n	8006aee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3314      	adds	r3, #20
 8006b40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b4c:	f023 0301 	bic.w	r3, r3, #1
 8006b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3314      	adds	r3, #20
 8006b5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e1      	bne.n	8006b3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3314      	adds	r3, #20
 8006b7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3314      	adds	r3, #20
 8006b96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ba0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1e3      	bne.n	8006b76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	330c      	adds	r3, #12
 8006bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc6:	e853 3f00 	ldrex	r3, [r3]
 8006bca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bce:	f023 0310 	bic.w	r3, r3, #16
 8006bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	330c      	adds	r3, #12
 8006bdc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006be0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006be2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006be6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006be8:	e841 2300 	strex	r3, r2, [r1]
 8006bec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e3      	bne.n	8006bbc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7fc f8e4 	bl	8002dc6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f8b6 	bl	8006d80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c14:	e099      	b.n	8006d4a <HAL_UART_IRQHandler+0x50e>
 8006c16:	bf00      	nop
 8006c18:	08006fb7 	.word	0x08006fb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 808b 	beq.w	8006d4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006c38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 8086 	beq.w	8006d4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	330c      	adds	r3, #12
 8006c48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	330c      	adds	r3, #12
 8006c62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c66:	647a      	str	r2, [r7, #68]	; 0x44
 8006c68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e3      	bne.n	8006c42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3314      	adds	r3, #20
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	e853 3f00 	ldrex	r3, [r3]
 8006c88:	623b      	str	r3, [r7, #32]
   return(result);
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	f023 0301 	bic.w	r3, r3, #1
 8006c90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3314      	adds	r3, #20
 8006c9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c9e:	633a      	str	r2, [r7, #48]	; 0x30
 8006ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e3      	bne.n	8006c7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	330c      	adds	r3, #12
 8006cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0310 	bic.w	r3, r3, #16
 8006cd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	330c      	adds	r3, #12
 8006ce0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ce4:	61fa      	str	r2, [r7, #28]
 8006ce6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	69b9      	ldr	r1, [r7, #24]
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e3      	bne.n	8006cc0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f83e 	bl	8006d80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d04:	e023      	b.n	8006d4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d009      	beq.n	8006d26 <HAL_UART_IRQHandler+0x4ea>
 8006d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f95d 	bl	8006fde <UART_Transmit_IT>
    return;
 8006d24:	e014      	b.n	8006d50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00e      	beq.n	8006d50 <HAL_UART_IRQHandler+0x514>
 8006d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d008      	beq.n	8006d50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f99d 	bl	800707e <UART_EndTransmit_IT>
    return;
 8006d44:	e004      	b.n	8006d50 <HAL_UART_IRQHandler+0x514>
    return;
 8006d46:	bf00      	nop
 8006d48:	e002      	b.n	8006d50 <HAL_UART_IRQHandler+0x514>
      return;
 8006d4a:	bf00      	nop
 8006d4c:	e000      	b.n	8006d50 <HAL_UART_IRQHandler+0x514>
      return;
 8006d4e:	bf00      	nop
  }
}
 8006d50:	37e8      	adds	r7, #232	; 0xe8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop

08006d58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	460b      	mov	r3, r1
 8006d8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b090      	sub	sp, #64	; 0x40
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	4613      	mov	r3, r2
 8006da6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da8:	e050      	b.n	8006e4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006db0:	d04c      	beq.n	8006e4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d007      	beq.n	8006dc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006db8:	f7fb fec4 	bl	8002b44 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d241      	bcs.n	8006e4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	330c      	adds	r3, #12
 8006dce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd2:	e853 3f00 	ldrex	r3, [r3]
 8006dd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	330c      	adds	r3, #12
 8006de6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006de8:	637a      	str	r2, [r7, #52]	; 0x34
 8006dea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006df0:	e841 2300 	strex	r3, r2, [r1]
 8006df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1e5      	bne.n	8006dc8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3314      	adds	r3, #20
 8006e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	e853 3f00 	ldrex	r3, [r3]
 8006e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f023 0301 	bic.w	r3, r3, #1
 8006e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3314      	adds	r3, #20
 8006e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e1c:	623a      	str	r2, [r7, #32]
 8006e1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	69f9      	ldr	r1, [r7, #28]
 8006e22:	6a3a      	ldr	r2, [r7, #32]
 8006e24:	e841 2300 	strex	r3, r2, [r1]
 8006e28:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1e5      	bne.n	8006dfc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e00f      	b.n	8006e6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	4013      	ands	r3, r2
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	bf0c      	ite	eq
 8006e5c:	2301      	moveq	r3, #1
 8006e5e:	2300      	movne	r3, #0
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	79fb      	ldrb	r3, [r7, #7]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d09f      	beq.n	8006daa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3740      	adds	r7, #64	; 0x40
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	88fa      	ldrh	r2, [r7, #6]
 8006e8c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	88fa      	ldrh	r2, [r7, #6]
 8006e92:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2222      	movs	r2, #34	; 0x22
 8006e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d007      	beq.n	8006ec2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ec0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	695a      	ldr	r2, [r3, #20]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f042 0201 	orr.w	r2, r2, #1
 8006ed0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68da      	ldr	r2, [r3, #12]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f042 0220 	orr.w	r2, r2, #32
 8006ee0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b095      	sub	sp, #84	; 0x54
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	330c      	adds	r3, #12
 8006efe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f02:	e853 3f00 	ldrex	r3, [r3]
 8006f06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	330c      	adds	r3, #12
 8006f16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f18:	643a      	str	r2, [r7, #64]	; 0x40
 8006f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f20:	e841 2300 	strex	r3, r2, [r1]
 8006f24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e5      	bne.n	8006ef8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3314      	adds	r3, #20
 8006f32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	e853 3f00 	ldrex	r3, [r3]
 8006f3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	f023 0301 	bic.w	r3, r3, #1
 8006f42:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3314      	adds	r3, #20
 8006f4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f54:	e841 2300 	strex	r3, r2, [r1]
 8006f58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1e5      	bne.n	8006f2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d119      	bne.n	8006f9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	330c      	adds	r3, #12
 8006f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	e853 3f00 	ldrex	r3, [r3]
 8006f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f023 0310 	bic.w	r3, r3, #16
 8006f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	330c      	adds	r3, #12
 8006f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f88:	61ba      	str	r2, [r7, #24]
 8006f8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8c:	6979      	ldr	r1, [r7, #20]
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	e841 2300 	strex	r3, r2, [r1]
 8006f94:	613b      	str	r3, [r7, #16]
   return(result);
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e5      	bne.n	8006f68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006faa:	bf00      	nop
 8006fac:	3754      	adds	r7, #84	; 0x54
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f7ff fecb 	bl	8006d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fd6:	bf00      	nop
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b085      	sub	sp, #20
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b21      	cmp	r3, #33	; 0x21
 8006ff0:	d13e      	bne.n	8007070 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffa:	d114      	bne.n	8007026 <UART_Transmit_IT+0x48>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d110      	bne.n	8007026 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007018:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	1c9a      	adds	r2, r3, #2
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	621a      	str	r2, [r3, #32]
 8007024:	e008      	b.n	8007038 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	1c59      	adds	r1, r3, #1
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6211      	str	r1, [r2, #32]
 8007030:	781a      	ldrb	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800703c:	b29b      	uxth	r3, r3
 800703e:	3b01      	subs	r3, #1
 8007040:	b29b      	uxth	r3, r3
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	4619      	mov	r1, r3
 8007046:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10f      	bne.n	800706c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68da      	ldr	r2, [r3, #12]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800705a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68da      	ldr	r2, [r3, #12]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800706a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800706c:	2300      	movs	r3, #0
 800706e:	e000      	b.n	8007072 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007070:	2302      	movs	r3, #2
  }
}
 8007072:	4618      	mov	r0, r3
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68da      	ldr	r2, [r3, #12]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007094:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2220      	movs	r2, #32
 800709a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7ff fe5a 	bl	8006d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b08c      	sub	sp, #48	; 0x30
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b22      	cmp	r3, #34	; 0x22
 80070c0:	f040 80ab 	bne.w	800721a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070cc:	d117      	bne.n	80070fe <UART_Receive_IT+0x50>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d113      	bne.n	80070fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f6:	1c9a      	adds	r2, r3, #2
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	629a      	str	r2, [r3, #40]	; 0x28
 80070fc:	e026      	b.n	800714c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007102:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007104:	2300      	movs	r3, #0
 8007106:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007110:	d007      	beq.n	8007122 <UART_Receive_IT+0x74>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10a      	bne.n	8007130 <UART_Receive_IT+0x82>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d106      	bne.n	8007130 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	b2da      	uxtb	r2, r3
 800712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712c:	701a      	strb	r2, [r3, #0]
 800712e:	e008      	b.n	8007142 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800713c:	b2da      	uxtb	r2, r3
 800713e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007140:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007150:	b29b      	uxth	r3, r3
 8007152:	3b01      	subs	r3, #1
 8007154:	b29b      	uxth	r3, r3
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	4619      	mov	r1, r3
 800715a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800715c:	2b00      	cmp	r3, #0
 800715e:	d15a      	bne.n	8007216 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68da      	ldr	r2, [r3, #12]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0220 	bic.w	r2, r2, #32
 800716e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800717e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	695a      	ldr	r2, [r3, #20]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0201 	bic.w	r2, r2, #1
 800718e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2220      	movs	r2, #32
 8007194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719c:	2b01      	cmp	r3, #1
 800719e:	d135      	bne.n	800720c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	330c      	adds	r3, #12
 80071ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	613b      	str	r3, [r7, #16]
   return(result);
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f023 0310 	bic.w	r3, r3, #16
 80071bc:	627b      	str	r3, [r7, #36]	; 0x24
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	330c      	adds	r3, #12
 80071c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c6:	623a      	str	r2, [r7, #32]
 80071c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	69f9      	ldr	r1, [r7, #28]
 80071cc:	6a3a      	ldr	r2, [r7, #32]
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e5      	bne.n	80071a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0310 	and.w	r3, r3, #16
 80071e4:	2b10      	cmp	r3, #16
 80071e6:	d10a      	bne.n	80071fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071e8:	2300      	movs	r3, #0
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7ff fdbb 	bl	8006d80 <HAL_UARTEx_RxEventCallback>
 800720a:	e002      	b.n	8007212 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7fa faf9 	bl	8001804 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007212:	2300      	movs	r3, #0
 8007214:	e002      	b.n	800721c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	e000      	b.n	800721c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800721a:	2302      	movs	r3, #2
  }
}
 800721c:	4618      	mov	r0, r3
 800721e:	3730      	adds	r7, #48	; 0x30
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007228:	b0c0      	sub	sp, #256	; 0x100
 800722a:	af00      	add	r7, sp, #0
 800722c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800723c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007240:	68d9      	ldr	r1, [r3, #12]
 8007242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	ea40 0301 	orr.w	r3, r0, r1
 800724c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800724e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	431a      	orrs	r2, r3
 800725c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	431a      	orrs	r2, r3
 8007264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	4313      	orrs	r3, r2
 800726c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800727c:	f021 010c 	bic.w	r1, r1, #12
 8007280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800728a:	430b      	orrs	r3, r1
 800728c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800728e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800729a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800729e:	6999      	ldr	r1, [r3, #24]
 80072a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	ea40 0301 	orr.w	r3, r0, r1
 80072aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	4b8f      	ldr	r3, [pc, #572]	; (80074f0 <UART_SetConfig+0x2cc>)
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d005      	beq.n	80072c4 <UART_SetConfig+0xa0>
 80072b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	4b8d      	ldr	r3, [pc, #564]	; (80074f4 <UART_SetConfig+0x2d0>)
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d104      	bne.n	80072ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072c4:	f7fe f9c8 	bl	8005658 <HAL_RCC_GetPCLK2Freq>
 80072c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80072cc:	e003      	b.n	80072d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072ce:	f7fe f9af 	bl	8005630 <HAL_RCC_GetPCLK1Freq>
 80072d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072e0:	f040 810c 	bne.w	80074fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072e8:	2200      	movs	r2, #0
 80072ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80072f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80072f6:	4622      	mov	r2, r4
 80072f8:	462b      	mov	r3, r5
 80072fa:	1891      	adds	r1, r2, r2
 80072fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80072fe:	415b      	adcs	r3, r3
 8007300:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007302:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007306:	4621      	mov	r1, r4
 8007308:	eb12 0801 	adds.w	r8, r2, r1
 800730c:	4629      	mov	r1, r5
 800730e:	eb43 0901 	adc.w	r9, r3, r1
 8007312:	f04f 0200 	mov.w	r2, #0
 8007316:	f04f 0300 	mov.w	r3, #0
 800731a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800731e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007322:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007326:	4690      	mov	r8, r2
 8007328:	4699      	mov	r9, r3
 800732a:	4623      	mov	r3, r4
 800732c:	eb18 0303 	adds.w	r3, r8, r3
 8007330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007334:	462b      	mov	r3, r5
 8007336:	eb49 0303 	adc.w	r3, r9, r3
 800733a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800733e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800734a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800734e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007352:	460b      	mov	r3, r1
 8007354:	18db      	adds	r3, r3, r3
 8007356:	653b      	str	r3, [r7, #80]	; 0x50
 8007358:	4613      	mov	r3, r2
 800735a:	eb42 0303 	adc.w	r3, r2, r3
 800735e:	657b      	str	r3, [r7, #84]	; 0x54
 8007360:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007364:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007368:	f7f9 fc96 	bl	8000c98 <__aeabi_uldivmod>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	4b61      	ldr	r3, [pc, #388]	; (80074f8 <UART_SetConfig+0x2d4>)
 8007372:	fba3 2302 	umull	r2, r3, r3, r2
 8007376:	095b      	lsrs	r3, r3, #5
 8007378:	011c      	lsls	r4, r3, #4
 800737a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800737e:	2200      	movs	r2, #0
 8007380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007384:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007388:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800738c:	4642      	mov	r2, r8
 800738e:	464b      	mov	r3, r9
 8007390:	1891      	adds	r1, r2, r2
 8007392:	64b9      	str	r1, [r7, #72]	; 0x48
 8007394:	415b      	adcs	r3, r3
 8007396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007398:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800739c:	4641      	mov	r1, r8
 800739e:	eb12 0a01 	adds.w	sl, r2, r1
 80073a2:	4649      	mov	r1, r9
 80073a4:	eb43 0b01 	adc.w	fp, r3, r1
 80073a8:	f04f 0200 	mov.w	r2, #0
 80073ac:	f04f 0300 	mov.w	r3, #0
 80073b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073bc:	4692      	mov	sl, r2
 80073be:	469b      	mov	fp, r3
 80073c0:	4643      	mov	r3, r8
 80073c2:	eb1a 0303 	adds.w	r3, sl, r3
 80073c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073ca:	464b      	mov	r3, r9
 80073cc:	eb4b 0303 	adc.w	r3, fp, r3
 80073d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80073e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80073e8:	460b      	mov	r3, r1
 80073ea:	18db      	adds	r3, r3, r3
 80073ec:	643b      	str	r3, [r7, #64]	; 0x40
 80073ee:	4613      	mov	r3, r2
 80073f0:	eb42 0303 	adc.w	r3, r2, r3
 80073f4:	647b      	str	r3, [r7, #68]	; 0x44
 80073f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80073fe:	f7f9 fc4b 	bl	8000c98 <__aeabi_uldivmod>
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	4611      	mov	r1, r2
 8007408:	4b3b      	ldr	r3, [pc, #236]	; (80074f8 <UART_SetConfig+0x2d4>)
 800740a:	fba3 2301 	umull	r2, r3, r3, r1
 800740e:	095b      	lsrs	r3, r3, #5
 8007410:	2264      	movs	r2, #100	; 0x64
 8007412:	fb02 f303 	mul.w	r3, r2, r3
 8007416:	1acb      	subs	r3, r1, r3
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800741e:	4b36      	ldr	r3, [pc, #216]	; (80074f8 <UART_SetConfig+0x2d4>)
 8007420:	fba3 2302 	umull	r2, r3, r3, r2
 8007424:	095b      	lsrs	r3, r3, #5
 8007426:	005b      	lsls	r3, r3, #1
 8007428:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800742c:	441c      	add	r4, r3
 800742e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007432:	2200      	movs	r2, #0
 8007434:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007438:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800743c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007440:	4642      	mov	r2, r8
 8007442:	464b      	mov	r3, r9
 8007444:	1891      	adds	r1, r2, r2
 8007446:	63b9      	str	r1, [r7, #56]	; 0x38
 8007448:	415b      	adcs	r3, r3
 800744a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800744c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007450:	4641      	mov	r1, r8
 8007452:	1851      	adds	r1, r2, r1
 8007454:	6339      	str	r1, [r7, #48]	; 0x30
 8007456:	4649      	mov	r1, r9
 8007458:	414b      	adcs	r3, r1
 800745a:	637b      	str	r3, [r7, #52]	; 0x34
 800745c:	f04f 0200 	mov.w	r2, #0
 8007460:	f04f 0300 	mov.w	r3, #0
 8007464:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007468:	4659      	mov	r1, fp
 800746a:	00cb      	lsls	r3, r1, #3
 800746c:	4651      	mov	r1, sl
 800746e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007472:	4651      	mov	r1, sl
 8007474:	00ca      	lsls	r2, r1, #3
 8007476:	4610      	mov	r0, r2
 8007478:	4619      	mov	r1, r3
 800747a:	4603      	mov	r3, r0
 800747c:	4642      	mov	r2, r8
 800747e:	189b      	adds	r3, r3, r2
 8007480:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007484:	464b      	mov	r3, r9
 8007486:	460a      	mov	r2, r1
 8007488:	eb42 0303 	adc.w	r3, r2, r3
 800748c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800749c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80074a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80074a4:	460b      	mov	r3, r1
 80074a6:	18db      	adds	r3, r3, r3
 80074a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80074aa:	4613      	mov	r3, r2
 80074ac:	eb42 0303 	adc.w	r3, r2, r3
 80074b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80074ba:	f7f9 fbed 	bl	8000c98 <__aeabi_uldivmod>
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	4b0d      	ldr	r3, [pc, #52]	; (80074f8 <UART_SetConfig+0x2d4>)
 80074c4:	fba3 1302 	umull	r1, r3, r3, r2
 80074c8:	095b      	lsrs	r3, r3, #5
 80074ca:	2164      	movs	r1, #100	; 0x64
 80074cc:	fb01 f303 	mul.w	r3, r1, r3
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	00db      	lsls	r3, r3, #3
 80074d4:	3332      	adds	r3, #50	; 0x32
 80074d6:	4a08      	ldr	r2, [pc, #32]	; (80074f8 <UART_SetConfig+0x2d4>)
 80074d8:	fba2 2303 	umull	r2, r3, r2, r3
 80074dc:	095b      	lsrs	r3, r3, #5
 80074de:	f003 0207 	and.w	r2, r3, #7
 80074e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4422      	add	r2, r4
 80074ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074ec:	e105      	b.n	80076fa <UART_SetConfig+0x4d6>
 80074ee:	bf00      	nop
 80074f0:	40011000 	.word	0x40011000
 80074f4:	40011400 	.word	0x40011400
 80074f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007500:	2200      	movs	r2, #0
 8007502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007506:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800750a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800750e:	4642      	mov	r2, r8
 8007510:	464b      	mov	r3, r9
 8007512:	1891      	adds	r1, r2, r2
 8007514:	6239      	str	r1, [r7, #32]
 8007516:	415b      	adcs	r3, r3
 8007518:	627b      	str	r3, [r7, #36]	; 0x24
 800751a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800751e:	4641      	mov	r1, r8
 8007520:	1854      	adds	r4, r2, r1
 8007522:	4649      	mov	r1, r9
 8007524:	eb43 0501 	adc.w	r5, r3, r1
 8007528:	f04f 0200 	mov.w	r2, #0
 800752c:	f04f 0300 	mov.w	r3, #0
 8007530:	00eb      	lsls	r3, r5, #3
 8007532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007536:	00e2      	lsls	r2, r4, #3
 8007538:	4614      	mov	r4, r2
 800753a:	461d      	mov	r5, r3
 800753c:	4643      	mov	r3, r8
 800753e:	18e3      	adds	r3, r4, r3
 8007540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007544:	464b      	mov	r3, r9
 8007546:	eb45 0303 	adc.w	r3, r5, r3
 800754a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800754e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800755a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800755e:	f04f 0200 	mov.w	r2, #0
 8007562:	f04f 0300 	mov.w	r3, #0
 8007566:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800756a:	4629      	mov	r1, r5
 800756c:	008b      	lsls	r3, r1, #2
 800756e:	4621      	mov	r1, r4
 8007570:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007574:	4621      	mov	r1, r4
 8007576:	008a      	lsls	r2, r1, #2
 8007578:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800757c:	f7f9 fb8c 	bl	8000c98 <__aeabi_uldivmod>
 8007580:	4602      	mov	r2, r0
 8007582:	460b      	mov	r3, r1
 8007584:	4b60      	ldr	r3, [pc, #384]	; (8007708 <UART_SetConfig+0x4e4>)
 8007586:	fba3 2302 	umull	r2, r3, r3, r2
 800758a:	095b      	lsrs	r3, r3, #5
 800758c:	011c      	lsls	r4, r3, #4
 800758e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007592:	2200      	movs	r2, #0
 8007594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007598:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800759c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80075a0:	4642      	mov	r2, r8
 80075a2:	464b      	mov	r3, r9
 80075a4:	1891      	adds	r1, r2, r2
 80075a6:	61b9      	str	r1, [r7, #24]
 80075a8:	415b      	adcs	r3, r3
 80075aa:	61fb      	str	r3, [r7, #28]
 80075ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075b0:	4641      	mov	r1, r8
 80075b2:	1851      	adds	r1, r2, r1
 80075b4:	6139      	str	r1, [r7, #16]
 80075b6:	4649      	mov	r1, r9
 80075b8:	414b      	adcs	r3, r1
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	f04f 0200 	mov.w	r2, #0
 80075c0:	f04f 0300 	mov.w	r3, #0
 80075c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075c8:	4659      	mov	r1, fp
 80075ca:	00cb      	lsls	r3, r1, #3
 80075cc:	4651      	mov	r1, sl
 80075ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075d2:	4651      	mov	r1, sl
 80075d4:	00ca      	lsls	r2, r1, #3
 80075d6:	4610      	mov	r0, r2
 80075d8:	4619      	mov	r1, r3
 80075da:	4603      	mov	r3, r0
 80075dc:	4642      	mov	r2, r8
 80075de:	189b      	adds	r3, r3, r2
 80075e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075e4:	464b      	mov	r3, r9
 80075e6:	460a      	mov	r2, r1
 80075e8:	eb42 0303 	adc.w	r3, r2, r3
 80075ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80075fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80075fc:	f04f 0200 	mov.w	r2, #0
 8007600:	f04f 0300 	mov.w	r3, #0
 8007604:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007608:	4649      	mov	r1, r9
 800760a:	008b      	lsls	r3, r1, #2
 800760c:	4641      	mov	r1, r8
 800760e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007612:	4641      	mov	r1, r8
 8007614:	008a      	lsls	r2, r1, #2
 8007616:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800761a:	f7f9 fb3d 	bl	8000c98 <__aeabi_uldivmod>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	4b39      	ldr	r3, [pc, #228]	; (8007708 <UART_SetConfig+0x4e4>)
 8007624:	fba3 1302 	umull	r1, r3, r3, r2
 8007628:	095b      	lsrs	r3, r3, #5
 800762a:	2164      	movs	r1, #100	; 0x64
 800762c:	fb01 f303 	mul.w	r3, r1, r3
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	011b      	lsls	r3, r3, #4
 8007634:	3332      	adds	r3, #50	; 0x32
 8007636:	4a34      	ldr	r2, [pc, #208]	; (8007708 <UART_SetConfig+0x4e4>)
 8007638:	fba2 2303 	umull	r2, r3, r2, r3
 800763c:	095b      	lsrs	r3, r3, #5
 800763e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007642:	441c      	add	r4, r3
 8007644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007648:	2200      	movs	r2, #0
 800764a:	673b      	str	r3, [r7, #112]	; 0x70
 800764c:	677a      	str	r2, [r7, #116]	; 0x74
 800764e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007652:	4642      	mov	r2, r8
 8007654:	464b      	mov	r3, r9
 8007656:	1891      	adds	r1, r2, r2
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	415b      	adcs	r3, r3
 800765c:	60fb      	str	r3, [r7, #12]
 800765e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007662:	4641      	mov	r1, r8
 8007664:	1851      	adds	r1, r2, r1
 8007666:	6039      	str	r1, [r7, #0]
 8007668:	4649      	mov	r1, r9
 800766a:	414b      	adcs	r3, r1
 800766c:	607b      	str	r3, [r7, #4]
 800766e:	f04f 0200 	mov.w	r2, #0
 8007672:	f04f 0300 	mov.w	r3, #0
 8007676:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800767a:	4659      	mov	r1, fp
 800767c:	00cb      	lsls	r3, r1, #3
 800767e:	4651      	mov	r1, sl
 8007680:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007684:	4651      	mov	r1, sl
 8007686:	00ca      	lsls	r2, r1, #3
 8007688:	4610      	mov	r0, r2
 800768a:	4619      	mov	r1, r3
 800768c:	4603      	mov	r3, r0
 800768e:	4642      	mov	r2, r8
 8007690:	189b      	adds	r3, r3, r2
 8007692:	66bb      	str	r3, [r7, #104]	; 0x68
 8007694:	464b      	mov	r3, r9
 8007696:	460a      	mov	r2, r1
 8007698:	eb42 0303 	adc.w	r3, r2, r3
 800769c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800769e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	663b      	str	r3, [r7, #96]	; 0x60
 80076a8:	667a      	str	r2, [r7, #100]	; 0x64
 80076aa:	f04f 0200 	mov.w	r2, #0
 80076ae:	f04f 0300 	mov.w	r3, #0
 80076b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80076b6:	4649      	mov	r1, r9
 80076b8:	008b      	lsls	r3, r1, #2
 80076ba:	4641      	mov	r1, r8
 80076bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076c0:	4641      	mov	r1, r8
 80076c2:	008a      	lsls	r2, r1, #2
 80076c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80076c8:	f7f9 fae6 	bl	8000c98 <__aeabi_uldivmod>
 80076cc:	4602      	mov	r2, r0
 80076ce:	460b      	mov	r3, r1
 80076d0:	4b0d      	ldr	r3, [pc, #52]	; (8007708 <UART_SetConfig+0x4e4>)
 80076d2:	fba3 1302 	umull	r1, r3, r3, r2
 80076d6:	095b      	lsrs	r3, r3, #5
 80076d8:	2164      	movs	r1, #100	; 0x64
 80076da:	fb01 f303 	mul.w	r3, r1, r3
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	011b      	lsls	r3, r3, #4
 80076e2:	3332      	adds	r3, #50	; 0x32
 80076e4:	4a08      	ldr	r2, [pc, #32]	; (8007708 <UART_SetConfig+0x4e4>)
 80076e6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ea:	095b      	lsrs	r3, r3, #5
 80076ec:	f003 020f 	and.w	r2, r3, #15
 80076f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4422      	add	r2, r4
 80076f8:	609a      	str	r2, [r3, #8]
}
 80076fa:	bf00      	nop
 80076fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007700:	46bd      	mov	sp, r7
 8007702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007706:	bf00      	nop
 8007708:	51eb851f 	.word	0x51eb851f

0800770c <atof>:
 800770c:	2100      	movs	r1, #0
 800770e:	f001 bb71 	b.w	8008df4 <strtod>
	...

08007714 <__errno>:
 8007714:	4b01      	ldr	r3, [pc, #4]	; (800771c <__errno+0x8>)
 8007716:	6818      	ldr	r0, [r3, #0]
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	2000000c 	.word	0x2000000c

08007720 <__libc_init_array>:
 8007720:	b570      	push	{r4, r5, r6, lr}
 8007722:	4d0d      	ldr	r5, [pc, #52]	; (8007758 <__libc_init_array+0x38>)
 8007724:	4c0d      	ldr	r4, [pc, #52]	; (800775c <__libc_init_array+0x3c>)
 8007726:	1b64      	subs	r4, r4, r5
 8007728:	10a4      	asrs	r4, r4, #2
 800772a:	2600      	movs	r6, #0
 800772c:	42a6      	cmp	r6, r4
 800772e:	d109      	bne.n	8007744 <__libc_init_array+0x24>
 8007730:	4d0b      	ldr	r5, [pc, #44]	; (8007760 <__libc_init_array+0x40>)
 8007732:	4c0c      	ldr	r4, [pc, #48]	; (8007764 <__libc_init_array+0x44>)
 8007734:	f004 fb32 	bl	800bd9c <_init>
 8007738:	1b64      	subs	r4, r4, r5
 800773a:	10a4      	asrs	r4, r4, #2
 800773c:	2600      	movs	r6, #0
 800773e:	42a6      	cmp	r6, r4
 8007740:	d105      	bne.n	800774e <__libc_init_array+0x2e>
 8007742:	bd70      	pop	{r4, r5, r6, pc}
 8007744:	f855 3b04 	ldr.w	r3, [r5], #4
 8007748:	4798      	blx	r3
 800774a:	3601      	adds	r6, #1
 800774c:	e7ee      	b.n	800772c <__libc_init_array+0xc>
 800774e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007752:	4798      	blx	r3
 8007754:	3601      	adds	r6, #1
 8007756:	e7f2      	b.n	800773e <__libc_init_array+0x1e>
 8007758:	0800c660 	.word	0x0800c660
 800775c:	0800c660 	.word	0x0800c660
 8007760:	0800c660 	.word	0x0800c660
 8007764:	0800c664 	.word	0x0800c664

08007768 <memcpy>:
 8007768:	440a      	add	r2, r1
 800776a:	4291      	cmp	r1, r2
 800776c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007770:	d100      	bne.n	8007774 <memcpy+0xc>
 8007772:	4770      	bx	lr
 8007774:	b510      	push	{r4, lr}
 8007776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800777a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800777e:	4291      	cmp	r1, r2
 8007780:	d1f9      	bne.n	8007776 <memcpy+0xe>
 8007782:	bd10      	pop	{r4, pc}

08007784 <memset>:
 8007784:	4402      	add	r2, r0
 8007786:	4603      	mov	r3, r0
 8007788:	4293      	cmp	r3, r2
 800778a:	d100      	bne.n	800778e <memset+0xa>
 800778c:	4770      	bx	lr
 800778e:	f803 1b01 	strb.w	r1, [r3], #1
 8007792:	e7f9      	b.n	8007788 <memset+0x4>

08007794 <__cvt>:
 8007794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007798:	ec55 4b10 	vmov	r4, r5, d0
 800779c:	2d00      	cmp	r5, #0
 800779e:	460e      	mov	r6, r1
 80077a0:	4619      	mov	r1, r3
 80077a2:	462b      	mov	r3, r5
 80077a4:	bfbb      	ittet	lt
 80077a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80077aa:	461d      	movlt	r5, r3
 80077ac:	2300      	movge	r3, #0
 80077ae:	232d      	movlt	r3, #45	; 0x2d
 80077b0:	700b      	strb	r3, [r1, #0]
 80077b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80077b8:	4691      	mov	r9, r2
 80077ba:	f023 0820 	bic.w	r8, r3, #32
 80077be:	bfbc      	itt	lt
 80077c0:	4622      	movlt	r2, r4
 80077c2:	4614      	movlt	r4, r2
 80077c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077c8:	d005      	beq.n	80077d6 <__cvt+0x42>
 80077ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80077ce:	d100      	bne.n	80077d2 <__cvt+0x3e>
 80077d0:	3601      	adds	r6, #1
 80077d2:	2102      	movs	r1, #2
 80077d4:	e000      	b.n	80077d8 <__cvt+0x44>
 80077d6:	2103      	movs	r1, #3
 80077d8:	ab03      	add	r3, sp, #12
 80077da:	9301      	str	r3, [sp, #4]
 80077dc:	ab02      	add	r3, sp, #8
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	ec45 4b10 	vmov	d0, r4, r5
 80077e4:	4653      	mov	r3, sl
 80077e6:	4632      	mov	r2, r6
 80077e8:	f001 fc5e 	bl	80090a8 <_dtoa_r>
 80077ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80077f0:	4607      	mov	r7, r0
 80077f2:	d102      	bne.n	80077fa <__cvt+0x66>
 80077f4:	f019 0f01 	tst.w	r9, #1
 80077f8:	d022      	beq.n	8007840 <__cvt+0xac>
 80077fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077fe:	eb07 0906 	add.w	r9, r7, r6
 8007802:	d110      	bne.n	8007826 <__cvt+0x92>
 8007804:	783b      	ldrb	r3, [r7, #0]
 8007806:	2b30      	cmp	r3, #48	; 0x30
 8007808:	d10a      	bne.n	8007820 <__cvt+0x8c>
 800780a:	2200      	movs	r2, #0
 800780c:	2300      	movs	r3, #0
 800780e:	4620      	mov	r0, r4
 8007810:	4629      	mov	r1, r5
 8007812:	f7f9 f961 	bl	8000ad8 <__aeabi_dcmpeq>
 8007816:	b918      	cbnz	r0, 8007820 <__cvt+0x8c>
 8007818:	f1c6 0601 	rsb	r6, r6, #1
 800781c:	f8ca 6000 	str.w	r6, [sl]
 8007820:	f8da 3000 	ldr.w	r3, [sl]
 8007824:	4499      	add	r9, r3
 8007826:	2200      	movs	r2, #0
 8007828:	2300      	movs	r3, #0
 800782a:	4620      	mov	r0, r4
 800782c:	4629      	mov	r1, r5
 800782e:	f7f9 f953 	bl	8000ad8 <__aeabi_dcmpeq>
 8007832:	b108      	cbz	r0, 8007838 <__cvt+0xa4>
 8007834:	f8cd 900c 	str.w	r9, [sp, #12]
 8007838:	2230      	movs	r2, #48	; 0x30
 800783a:	9b03      	ldr	r3, [sp, #12]
 800783c:	454b      	cmp	r3, r9
 800783e:	d307      	bcc.n	8007850 <__cvt+0xbc>
 8007840:	9b03      	ldr	r3, [sp, #12]
 8007842:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007844:	1bdb      	subs	r3, r3, r7
 8007846:	4638      	mov	r0, r7
 8007848:	6013      	str	r3, [r2, #0]
 800784a:	b004      	add	sp, #16
 800784c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007850:	1c59      	adds	r1, r3, #1
 8007852:	9103      	str	r1, [sp, #12]
 8007854:	701a      	strb	r2, [r3, #0]
 8007856:	e7f0      	b.n	800783a <__cvt+0xa6>

08007858 <__exponent>:
 8007858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800785a:	4603      	mov	r3, r0
 800785c:	2900      	cmp	r1, #0
 800785e:	bfb8      	it	lt
 8007860:	4249      	neglt	r1, r1
 8007862:	f803 2b02 	strb.w	r2, [r3], #2
 8007866:	bfb4      	ite	lt
 8007868:	222d      	movlt	r2, #45	; 0x2d
 800786a:	222b      	movge	r2, #43	; 0x2b
 800786c:	2909      	cmp	r1, #9
 800786e:	7042      	strb	r2, [r0, #1]
 8007870:	dd2a      	ble.n	80078c8 <__exponent+0x70>
 8007872:	f10d 0407 	add.w	r4, sp, #7
 8007876:	46a4      	mov	ip, r4
 8007878:	270a      	movs	r7, #10
 800787a:	46a6      	mov	lr, r4
 800787c:	460a      	mov	r2, r1
 800787e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007882:	fb07 1516 	mls	r5, r7, r6, r1
 8007886:	3530      	adds	r5, #48	; 0x30
 8007888:	2a63      	cmp	r2, #99	; 0x63
 800788a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800788e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007892:	4631      	mov	r1, r6
 8007894:	dcf1      	bgt.n	800787a <__exponent+0x22>
 8007896:	3130      	adds	r1, #48	; 0x30
 8007898:	f1ae 0502 	sub.w	r5, lr, #2
 800789c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80078a0:	1c44      	adds	r4, r0, #1
 80078a2:	4629      	mov	r1, r5
 80078a4:	4561      	cmp	r1, ip
 80078a6:	d30a      	bcc.n	80078be <__exponent+0x66>
 80078a8:	f10d 0209 	add.w	r2, sp, #9
 80078ac:	eba2 020e 	sub.w	r2, r2, lr
 80078b0:	4565      	cmp	r5, ip
 80078b2:	bf88      	it	hi
 80078b4:	2200      	movhi	r2, #0
 80078b6:	4413      	add	r3, r2
 80078b8:	1a18      	subs	r0, r3, r0
 80078ba:	b003      	add	sp, #12
 80078bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80078c6:	e7ed      	b.n	80078a4 <__exponent+0x4c>
 80078c8:	2330      	movs	r3, #48	; 0x30
 80078ca:	3130      	adds	r1, #48	; 0x30
 80078cc:	7083      	strb	r3, [r0, #2]
 80078ce:	70c1      	strb	r1, [r0, #3]
 80078d0:	1d03      	adds	r3, r0, #4
 80078d2:	e7f1      	b.n	80078b8 <__exponent+0x60>

080078d4 <_printf_float>:
 80078d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d8:	ed2d 8b02 	vpush	{d8}
 80078dc:	b08d      	sub	sp, #52	; 0x34
 80078de:	460c      	mov	r4, r1
 80078e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80078e4:	4616      	mov	r6, r2
 80078e6:	461f      	mov	r7, r3
 80078e8:	4605      	mov	r5, r0
 80078ea:	f002 fef1 	bl	800a6d0 <_localeconv_r>
 80078ee:	f8d0 a000 	ldr.w	sl, [r0]
 80078f2:	4650      	mov	r0, sl
 80078f4:	f7f8 fc74 	bl	80001e0 <strlen>
 80078f8:	2300      	movs	r3, #0
 80078fa:	930a      	str	r3, [sp, #40]	; 0x28
 80078fc:	6823      	ldr	r3, [r4, #0]
 80078fe:	9305      	str	r3, [sp, #20]
 8007900:	f8d8 3000 	ldr.w	r3, [r8]
 8007904:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007908:	3307      	adds	r3, #7
 800790a:	f023 0307 	bic.w	r3, r3, #7
 800790e:	f103 0208 	add.w	r2, r3, #8
 8007912:	f8c8 2000 	str.w	r2, [r8]
 8007916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800791e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007922:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007926:	9307      	str	r3, [sp, #28]
 8007928:	f8cd 8018 	str.w	r8, [sp, #24]
 800792c:	ee08 0a10 	vmov	s16, r0
 8007930:	4b9f      	ldr	r3, [pc, #636]	; (8007bb0 <_printf_float+0x2dc>)
 8007932:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800793a:	f7f9 f8ff 	bl	8000b3c <__aeabi_dcmpun>
 800793e:	bb88      	cbnz	r0, 80079a4 <_printf_float+0xd0>
 8007940:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007944:	4b9a      	ldr	r3, [pc, #616]	; (8007bb0 <_printf_float+0x2dc>)
 8007946:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800794a:	f7f9 f8d9 	bl	8000b00 <__aeabi_dcmple>
 800794e:	bb48      	cbnz	r0, 80079a4 <_printf_float+0xd0>
 8007950:	2200      	movs	r2, #0
 8007952:	2300      	movs	r3, #0
 8007954:	4640      	mov	r0, r8
 8007956:	4649      	mov	r1, r9
 8007958:	f7f9 f8c8 	bl	8000aec <__aeabi_dcmplt>
 800795c:	b110      	cbz	r0, 8007964 <_printf_float+0x90>
 800795e:	232d      	movs	r3, #45	; 0x2d
 8007960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007964:	4b93      	ldr	r3, [pc, #588]	; (8007bb4 <_printf_float+0x2e0>)
 8007966:	4894      	ldr	r0, [pc, #592]	; (8007bb8 <_printf_float+0x2e4>)
 8007968:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800796c:	bf94      	ite	ls
 800796e:	4698      	movls	r8, r3
 8007970:	4680      	movhi	r8, r0
 8007972:	2303      	movs	r3, #3
 8007974:	6123      	str	r3, [r4, #16]
 8007976:	9b05      	ldr	r3, [sp, #20]
 8007978:	f023 0204 	bic.w	r2, r3, #4
 800797c:	6022      	str	r2, [r4, #0]
 800797e:	f04f 0900 	mov.w	r9, #0
 8007982:	9700      	str	r7, [sp, #0]
 8007984:	4633      	mov	r3, r6
 8007986:	aa0b      	add	r2, sp, #44	; 0x2c
 8007988:	4621      	mov	r1, r4
 800798a:	4628      	mov	r0, r5
 800798c:	f000 f9d8 	bl	8007d40 <_printf_common>
 8007990:	3001      	adds	r0, #1
 8007992:	f040 8090 	bne.w	8007ab6 <_printf_float+0x1e2>
 8007996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800799a:	b00d      	add	sp, #52	; 0x34
 800799c:	ecbd 8b02 	vpop	{d8}
 80079a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a4:	4642      	mov	r2, r8
 80079a6:	464b      	mov	r3, r9
 80079a8:	4640      	mov	r0, r8
 80079aa:	4649      	mov	r1, r9
 80079ac:	f7f9 f8c6 	bl	8000b3c <__aeabi_dcmpun>
 80079b0:	b140      	cbz	r0, 80079c4 <_printf_float+0xf0>
 80079b2:	464b      	mov	r3, r9
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	bfbc      	itt	lt
 80079b8:	232d      	movlt	r3, #45	; 0x2d
 80079ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80079be:	487f      	ldr	r0, [pc, #508]	; (8007bbc <_printf_float+0x2e8>)
 80079c0:	4b7f      	ldr	r3, [pc, #508]	; (8007bc0 <_printf_float+0x2ec>)
 80079c2:	e7d1      	b.n	8007968 <_printf_float+0x94>
 80079c4:	6863      	ldr	r3, [r4, #4]
 80079c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80079ca:	9206      	str	r2, [sp, #24]
 80079cc:	1c5a      	adds	r2, r3, #1
 80079ce:	d13f      	bne.n	8007a50 <_printf_float+0x17c>
 80079d0:	2306      	movs	r3, #6
 80079d2:	6063      	str	r3, [r4, #4]
 80079d4:	9b05      	ldr	r3, [sp, #20]
 80079d6:	6861      	ldr	r1, [r4, #4]
 80079d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80079dc:	2300      	movs	r3, #0
 80079de:	9303      	str	r3, [sp, #12]
 80079e0:	ab0a      	add	r3, sp, #40	; 0x28
 80079e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80079e6:	ab09      	add	r3, sp, #36	; 0x24
 80079e8:	ec49 8b10 	vmov	d0, r8, r9
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	6022      	str	r2, [r4, #0]
 80079f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80079f4:	4628      	mov	r0, r5
 80079f6:	f7ff fecd 	bl	8007794 <__cvt>
 80079fa:	9b06      	ldr	r3, [sp, #24]
 80079fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079fe:	2b47      	cmp	r3, #71	; 0x47
 8007a00:	4680      	mov	r8, r0
 8007a02:	d108      	bne.n	8007a16 <_printf_float+0x142>
 8007a04:	1cc8      	adds	r0, r1, #3
 8007a06:	db02      	blt.n	8007a0e <_printf_float+0x13a>
 8007a08:	6863      	ldr	r3, [r4, #4]
 8007a0a:	4299      	cmp	r1, r3
 8007a0c:	dd41      	ble.n	8007a92 <_printf_float+0x1be>
 8007a0e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007a12:	fa5f fb8b 	uxtb.w	fp, fp
 8007a16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a1a:	d820      	bhi.n	8007a5e <_printf_float+0x18a>
 8007a1c:	3901      	subs	r1, #1
 8007a1e:	465a      	mov	r2, fp
 8007a20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a24:	9109      	str	r1, [sp, #36]	; 0x24
 8007a26:	f7ff ff17 	bl	8007858 <__exponent>
 8007a2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a2c:	1813      	adds	r3, r2, r0
 8007a2e:	2a01      	cmp	r2, #1
 8007a30:	4681      	mov	r9, r0
 8007a32:	6123      	str	r3, [r4, #16]
 8007a34:	dc02      	bgt.n	8007a3c <_printf_float+0x168>
 8007a36:	6822      	ldr	r2, [r4, #0]
 8007a38:	07d2      	lsls	r2, r2, #31
 8007a3a:	d501      	bpl.n	8007a40 <_printf_float+0x16c>
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	6123      	str	r3, [r4, #16]
 8007a40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d09c      	beq.n	8007982 <_printf_float+0xae>
 8007a48:	232d      	movs	r3, #45	; 0x2d
 8007a4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a4e:	e798      	b.n	8007982 <_printf_float+0xae>
 8007a50:	9a06      	ldr	r2, [sp, #24]
 8007a52:	2a47      	cmp	r2, #71	; 0x47
 8007a54:	d1be      	bne.n	80079d4 <_printf_float+0x100>
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1bc      	bne.n	80079d4 <_printf_float+0x100>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e7b9      	b.n	80079d2 <_printf_float+0xfe>
 8007a5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a62:	d118      	bne.n	8007a96 <_printf_float+0x1c2>
 8007a64:	2900      	cmp	r1, #0
 8007a66:	6863      	ldr	r3, [r4, #4]
 8007a68:	dd0b      	ble.n	8007a82 <_printf_float+0x1ae>
 8007a6a:	6121      	str	r1, [r4, #16]
 8007a6c:	b913      	cbnz	r3, 8007a74 <_printf_float+0x1a0>
 8007a6e:	6822      	ldr	r2, [r4, #0]
 8007a70:	07d0      	lsls	r0, r2, #31
 8007a72:	d502      	bpl.n	8007a7a <_printf_float+0x1a6>
 8007a74:	3301      	adds	r3, #1
 8007a76:	440b      	add	r3, r1
 8007a78:	6123      	str	r3, [r4, #16]
 8007a7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a7c:	f04f 0900 	mov.w	r9, #0
 8007a80:	e7de      	b.n	8007a40 <_printf_float+0x16c>
 8007a82:	b913      	cbnz	r3, 8007a8a <_printf_float+0x1b6>
 8007a84:	6822      	ldr	r2, [r4, #0]
 8007a86:	07d2      	lsls	r2, r2, #31
 8007a88:	d501      	bpl.n	8007a8e <_printf_float+0x1ba>
 8007a8a:	3302      	adds	r3, #2
 8007a8c:	e7f4      	b.n	8007a78 <_printf_float+0x1a4>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e7f2      	b.n	8007a78 <_printf_float+0x1a4>
 8007a92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a98:	4299      	cmp	r1, r3
 8007a9a:	db05      	blt.n	8007aa8 <_printf_float+0x1d4>
 8007a9c:	6823      	ldr	r3, [r4, #0]
 8007a9e:	6121      	str	r1, [r4, #16]
 8007aa0:	07d8      	lsls	r0, r3, #31
 8007aa2:	d5ea      	bpl.n	8007a7a <_printf_float+0x1a6>
 8007aa4:	1c4b      	adds	r3, r1, #1
 8007aa6:	e7e7      	b.n	8007a78 <_printf_float+0x1a4>
 8007aa8:	2900      	cmp	r1, #0
 8007aaa:	bfd4      	ite	le
 8007aac:	f1c1 0202 	rsble	r2, r1, #2
 8007ab0:	2201      	movgt	r2, #1
 8007ab2:	4413      	add	r3, r2
 8007ab4:	e7e0      	b.n	8007a78 <_printf_float+0x1a4>
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	055a      	lsls	r2, r3, #21
 8007aba:	d407      	bmi.n	8007acc <_printf_float+0x1f8>
 8007abc:	6923      	ldr	r3, [r4, #16]
 8007abe:	4642      	mov	r2, r8
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	47b8      	blx	r7
 8007ac6:	3001      	adds	r0, #1
 8007ac8:	d12c      	bne.n	8007b24 <_printf_float+0x250>
 8007aca:	e764      	b.n	8007996 <_printf_float+0xc2>
 8007acc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ad0:	f240 80e0 	bls.w	8007c94 <_printf_float+0x3c0>
 8007ad4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ad8:	2200      	movs	r2, #0
 8007ada:	2300      	movs	r3, #0
 8007adc:	f7f8 fffc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d034      	beq.n	8007b4e <_printf_float+0x27a>
 8007ae4:	4a37      	ldr	r2, [pc, #220]	; (8007bc4 <_printf_float+0x2f0>)
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	4631      	mov	r1, r6
 8007aea:	4628      	mov	r0, r5
 8007aec:	47b8      	blx	r7
 8007aee:	3001      	adds	r0, #1
 8007af0:	f43f af51 	beq.w	8007996 <_printf_float+0xc2>
 8007af4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007af8:	429a      	cmp	r2, r3
 8007afa:	db02      	blt.n	8007b02 <_printf_float+0x22e>
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	07d8      	lsls	r0, r3, #31
 8007b00:	d510      	bpl.n	8007b24 <_printf_float+0x250>
 8007b02:	ee18 3a10 	vmov	r3, s16
 8007b06:	4652      	mov	r2, sl
 8007b08:	4631      	mov	r1, r6
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	47b8      	blx	r7
 8007b0e:	3001      	adds	r0, #1
 8007b10:	f43f af41 	beq.w	8007996 <_printf_float+0xc2>
 8007b14:	f04f 0800 	mov.w	r8, #0
 8007b18:	f104 091a 	add.w	r9, r4, #26
 8007b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	4543      	cmp	r3, r8
 8007b22:	dc09      	bgt.n	8007b38 <_printf_float+0x264>
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	079b      	lsls	r3, r3, #30
 8007b28:	f100 8105 	bmi.w	8007d36 <_printf_float+0x462>
 8007b2c:	68e0      	ldr	r0, [r4, #12]
 8007b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b30:	4298      	cmp	r0, r3
 8007b32:	bfb8      	it	lt
 8007b34:	4618      	movlt	r0, r3
 8007b36:	e730      	b.n	800799a <_printf_float+0xc6>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	464a      	mov	r2, r9
 8007b3c:	4631      	mov	r1, r6
 8007b3e:	4628      	mov	r0, r5
 8007b40:	47b8      	blx	r7
 8007b42:	3001      	adds	r0, #1
 8007b44:	f43f af27 	beq.w	8007996 <_printf_float+0xc2>
 8007b48:	f108 0801 	add.w	r8, r8, #1
 8007b4c:	e7e6      	b.n	8007b1c <_printf_float+0x248>
 8007b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	dc39      	bgt.n	8007bc8 <_printf_float+0x2f4>
 8007b54:	4a1b      	ldr	r2, [pc, #108]	; (8007bc4 <_printf_float+0x2f0>)
 8007b56:	2301      	movs	r3, #1
 8007b58:	4631      	mov	r1, r6
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	47b8      	blx	r7
 8007b5e:	3001      	adds	r0, #1
 8007b60:	f43f af19 	beq.w	8007996 <_printf_float+0xc2>
 8007b64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	d102      	bne.n	8007b72 <_printf_float+0x29e>
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	07d9      	lsls	r1, r3, #31
 8007b70:	d5d8      	bpl.n	8007b24 <_printf_float+0x250>
 8007b72:	ee18 3a10 	vmov	r3, s16
 8007b76:	4652      	mov	r2, sl
 8007b78:	4631      	mov	r1, r6
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	47b8      	blx	r7
 8007b7e:	3001      	adds	r0, #1
 8007b80:	f43f af09 	beq.w	8007996 <_printf_float+0xc2>
 8007b84:	f04f 0900 	mov.w	r9, #0
 8007b88:	f104 0a1a 	add.w	sl, r4, #26
 8007b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b8e:	425b      	negs	r3, r3
 8007b90:	454b      	cmp	r3, r9
 8007b92:	dc01      	bgt.n	8007b98 <_printf_float+0x2c4>
 8007b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b96:	e792      	b.n	8007abe <_printf_float+0x1ea>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	4652      	mov	r2, sl
 8007b9c:	4631      	mov	r1, r6
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	47b8      	blx	r7
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	f43f aef7 	beq.w	8007996 <_printf_float+0xc2>
 8007ba8:	f109 0901 	add.w	r9, r9, #1
 8007bac:	e7ee      	b.n	8007b8c <_printf_float+0x2b8>
 8007bae:	bf00      	nop
 8007bb0:	7fefffff 	.word	0x7fefffff
 8007bb4:	0800c14c 	.word	0x0800c14c
 8007bb8:	0800c150 	.word	0x0800c150
 8007bbc:	0800c158 	.word	0x0800c158
 8007bc0:	0800c154 	.word	0x0800c154
 8007bc4:	0800c15c 	.word	0x0800c15c
 8007bc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	bfa8      	it	ge
 8007bd0:	461a      	movge	r2, r3
 8007bd2:	2a00      	cmp	r2, #0
 8007bd4:	4691      	mov	r9, r2
 8007bd6:	dc37      	bgt.n	8007c48 <_printf_float+0x374>
 8007bd8:	f04f 0b00 	mov.w	fp, #0
 8007bdc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007be0:	f104 021a 	add.w	r2, r4, #26
 8007be4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007be6:	9305      	str	r3, [sp, #20]
 8007be8:	eba3 0309 	sub.w	r3, r3, r9
 8007bec:	455b      	cmp	r3, fp
 8007bee:	dc33      	bgt.n	8007c58 <_printf_float+0x384>
 8007bf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	db3b      	blt.n	8007c70 <_printf_float+0x39c>
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	07da      	lsls	r2, r3, #31
 8007bfc:	d438      	bmi.n	8007c70 <_printf_float+0x39c>
 8007bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c00:	9a05      	ldr	r2, [sp, #20]
 8007c02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c04:	1a9a      	subs	r2, r3, r2
 8007c06:	eba3 0901 	sub.w	r9, r3, r1
 8007c0a:	4591      	cmp	r9, r2
 8007c0c:	bfa8      	it	ge
 8007c0e:	4691      	movge	r9, r2
 8007c10:	f1b9 0f00 	cmp.w	r9, #0
 8007c14:	dc35      	bgt.n	8007c82 <_printf_float+0x3ae>
 8007c16:	f04f 0800 	mov.w	r8, #0
 8007c1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c1e:	f104 0a1a 	add.w	sl, r4, #26
 8007c22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c26:	1a9b      	subs	r3, r3, r2
 8007c28:	eba3 0309 	sub.w	r3, r3, r9
 8007c2c:	4543      	cmp	r3, r8
 8007c2e:	f77f af79 	ble.w	8007b24 <_printf_float+0x250>
 8007c32:	2301      	movs	r3, #1
 8007c34:	4652      	mov	r2, sl
 8007c36:	4631      	mov	r1, r6
 8007c38:	4628      	mov	r0, r5
 8007c3a:	47b8      	blx	r7
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	f43f aeaa 	beq.w	8007996 <_printf_float+0xc2>
 8007c42:	f108 0801 	add.w	r8, r8, #1
 8007c46:	e7ec      	b.n	8007c22 <_printf_float+0x34e>
 8007c48:	4613      	mov	r3, r2
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	4642      	mov	r2, r8
 8007c4e:	4628      	mov	r0, r5
 8007c50:	47b8      	blx	r7
 8007c52:	3001      	adds	r0, #1
 8007c54:	d1c0      	bne.n	8007bd8 <_printf_float+0x304>
 8007c56:	e69e      	b.n	8007996 <_printf_float+0xc2>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	9205      	str	r2, [sp, #20]
 8007c60:	47b8      	blx	r7
 8007c62:	3001      	adds	r0, #1
 8007c64:	f43f ae97 	beq.w	8007996 <_printf_float+0xc2>
 8007c68:	9a05      	ldr	r2, [sp, #20]
 8007c6a:	f10b 0b01 	add.w	fp, fp, #1
 8007c6e:	e7b9      	b.n	8007be4 <_printf_float+0x310>
 8007c70:	ee18 3a10 	vmov	r3, s16
 8007c74:	4652      	mov	r2, sl
 8007c76:	4631      	mov	r1, r6
 8007c78:	4628      	mov	r0, r5
 8007c7a:	47b8      	blx	r7
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	d1be      	bne.n	8007bfe <_printf_float+0x32a>
 8007c80:	e689      	b.n	8007996 <_printf_float+0xc2>
 8007c82:	9a05      	ldr	r2, [sp, #20]
 8007c84:	464b      	mov	r3, r9
 8007c86:	4442      	add	r2, r8
 8007c88:	4631      	mov	r1, r6
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	47b8      	blx	r7
 8007c8e:	3001      	adds	r0, #1
 8007c90:	d1c1      	bne.n	8007c16 <_printf_float+0x342>
 8007c92:	e680      	b.n	8007996 <_printf_float+0xc2>
 8007c94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c96:	2a01      	cmp	r2, #1
 8007c98:	dc01      	bgt.n	8007c9e <_printf_float+0x3ca>
 8007c9a:	07db      	lsls	r3, r3, #31
 8007c9c:	d538      	bpl.n	8007d10 <_printf_float+0x43c>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	4642      	mov	r2, r8
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	47b8      	blx	r7
 8007ca8:	3001      	adds	r0, #1
 8007caa:	f43f ae74 	beq.w	8007996 <_printf_float+0xc2>
 8007cae:	ee18 3a10 	vmov	r3, s16
 8007cb2:	4652      	mov	r2, sl
 8007cb4:	4631      	mov	r1, r6
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	47b8      	blx	r7
 8007cba:	3001      	adds	r0, #1
 8007cbc:	f43f ae6b 	beq.w	8007996 <_printf_float+0xc2>
 8007cc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f7f8 ff06 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ccc:	b9d8      	cbnz	r0, 8007d06 <_printf_float+0x432>
 8007cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd0:	f108 0201 	add.w	r2, r8, #1
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	4631      	mov	r1, r6
 8007cd8:	4628      	mov	r0, r5
 8007cda:	47b8      	blx	r7
 8007cdc:	3001      	adds	r0, #1
 8007cde:	d10e      	bne.n	8007cfe <_printf_float+0x42a>
 8007ce0:	e659      	b.n	8007996 <_printf_float+0xc2>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	4652      	mov	r2, sl
 8007ce6:	4631      	mov	r1, r6
 8007ce8:	4628      	mov	r0, r5
 8007cea:	47b8      	blx	r7
 8007cec:	3001      	adds	r0, #1
 8007cee:	f43f ae52 	beq.w	8007996 <_printf_float+0xc2>
 8007cf2:	f108 0801 	add.w	r8, r8, #1
 8007cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	4543      	cmp	r3, r8
 8007cfc:	dcf1      	bgt.n	8007ce2 <_printf_float+0x40e>
 8007cfe:	464b      	mov	r3, r9
 8007d00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d04:	e6dc      	b.n	8007ac0 <_printf_float+0x1ec>
 8007d06:	f04f 0800 	mov.w	r8, #0
 8007d0a:	f104 0a1a 	add.w	sl, r4, #26
 8007d0e:	e7f2      	b.n	8007cf6 <_printf_float+0x422>
 8007d10:	2301      	movs	r3, #1
 8007d12:	4642      	mov	r2, r8
 8007d14:	e7df      	b.n	8007cd6 <_printf_float+0x402>
 8007d16:	2301      	movs	r3, #1
 8007d18:	464a      	mov	r2, r9
 8007d1a:	4631      	mov	r1, r6
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	47b8      	blx	r7
 8007d20:	3001      	adds	r0, #1
 8007d22:	f43f ae38 	beq.w	8007996 <_printf_float+0xc2>
 8007d26:	f108 0801 	add.w	r8, r8, #1
 8007d2a:	68e3      	ldr	r3, [r4, #12]
 8007d2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d2e:	1a5b      	subs	r3, r3, r1
 8007d30:	4543      	cmp	r3, r8
 8007d32:	dcf0      	bgt.n	8007d16 <_printf_float+0x442>
 8007d34:	e6fa      	b.n	8007b2c <_printf_float+0x258>
 8007d36:	f04f 0800 	mov.w	r8, #0
 8007d3a:	f104 0919 	add.w	r9, r4, #25
 8007d3e:	e7f4      	b.n	8007d2a <_printf_float+0x456>

08007d40 <_printf_common>:
 8007d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d44:	4616      	mov	r6, r2
 8007d46:	4699      	mov	r9, r3
 8007d48:	688a      	ldr	r2, [r1, #8]
 8007d4a:	690b      	ldr	r3, [r1, #16]
 8007d4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d50:	4293      	cmp	r3, r2
 8007d52:	bfb8      	it	lt
 8007d54:	4613      	movlt	r3, r2
 8007d56:	6033      	str	r3, [r6, #0]
 8007d58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d5c:	4607      	mov	r7, r0
 8007d5e:	460c      	mov	r4, r1
 8007d60:	b10a      	cbz	r2, 8007d66 <_printf_common+0x26>
 8007d62:	3301      	adds	r3, #1
 8007d64:	6033      	str	r3, [r6, #0]
 8007d66:	6823      	ldr	r3, [r4, #0]
 8007d68:	0699      	lsls	r1, r3, #26
 8007d6a:	bf42      	ittt	mi
 8007d6c:	6833      	ldrmi	r3, [r6, #0]
 8007d6e:	3302      	addmi	r3, #2
 8007d70:	6033      	strmi	r3, [r6, #0]
 8007d72:	6825      	ldr	r5, [r4, #0]
 8007d74:	f015 0506 	ands.w	r5, r5, #6
 8007d78:	d106      	bne.n	8007d88 <_printf_common+0x48>
 8007d7a:	f104 0a19 	add.w	sl, r4, #25
 8007d7e:	68e3      	ldr	r3, [r4, #12]
 8007d80:	6832      	ldr	r2, [r6, #0]
 8007d82:	1a9b      	subs	r3, r3, r2
 8007d84:	42ab      	cmp	r3, r5
 8007d86:	dc26      	bgt.n	8007dd6 <_printf_common+0x96>
 8007d88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d8c:	1e13      	subs	r3, r2, #0
 8007d8e:	6822      	ldr	r2, [r4, #0]
 8007d90:	bf18      	it	ne
 8007d92:	2301      	movne	r3, #1
 8007d94:	0692      	lsls	r2, r2, #26
 8007d96:	d42b      	bmi.n	8007df0 <_printf_common+0xb0>
 8007d98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d9c:	4649      	mov	r1, r9
 8007d9e:	4638      	mov	r0, r7
 8007da0:	47c0      	blx	r8
 8007da2:	3001      	adds	r0, #1
 8007da4:	d01e      	beq.n	8007de4 <_printf_common+0xa4>
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	68e5      	ldr	r5, [r4, #12]
 8007daa:	6832      	ldr	r2, [r6, #0]
 8007dac:	f003 0306 	and.w	r3, r3, #6
 8007db0:	2b04      	cmp	r3, #4
 8007db2:	bf08      	it	eq
 8007db4:	1aad      	subeq	r5, r5, r2
 8007db6:	68a3      	ldr	r3, [r4, #8]
 8007db8:	6922      	ldr	r2, [r4, #16]
 8007dba:	bf0c      	ite	eq
 8007dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dc0:	2500      	movne	r5, #0
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	bfc4      	itt	gt
 8007dc6:	1a9b      	subgt	r3, r3, r2
 8007dc8:	18ed      	addgt	r5, r5, r3
 8007dca:	2600      	movs	r6, #0
 8007dcc:	341a      	adds	r4, #26
 8007dce:	42b5      	cmp	r5, r6
 8007dd0:	d11a      	bne.n	8007e08 <_printf_common+0xc8>
 8007dd2:	2000      	movs	r0, #0
 8007dd4:	e008      	b.n	8007de8 <_printf_common+0xa8>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	4652      	mov	r2, sl
 8007dda:	4649      	mov	r1, r9
 8007ddc:	4638      	mov	r0, r7
 8007dde:	47c0      	blx	r8
 8007de0:	3001      	adds	r0, #1
 8007de2:	d103      	bne.n	8007dec <_printf_common+0xac>
 8007de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dec:	3501      	adds	r5, #1
 8007dee:	e7c6      	b.n	8007d7e <_printf_common+0x3e>
 8007df0:	18e1      	adds	r1, r4, r3
 8007df2:	1c5a      	adds	r2, r3, #1
 8007df4:	2030      	movs	r0, #48	; 0x30
 8007df6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007dfa:	4422      	add	r2, r4
 8007dfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e04:	3302      	adds	r3, #2
 8007e06:	e7c7      	b.n	8007d98 <_printf_common+0x58>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	4622      	mov	r2, r4
 8007e0c:	4649      	mov	r1, r9
 8007e0e:	4638      	mov	r0, r7
 8007e10:	47c0      	blx	r8
 8007e12:	3001      	adds	r0, #1
 8007e14:	d0e6      	beq.n	8007de4 <_printf_common+0xa4>
 8007e16:	3601      	adds	r6, #1
 8007e18:	e7d9      	b.n	8007dce <_printf_common+0x8e>
	...

08007e1c <_printf_i>:
 8007e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e20:	7e0f      	ldrb	r7, [r1, #24]
 8007e22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e24:	2f78      	cmp	r7, #120	; 0x78
 8007e26:	4691      	mov	r9, r2
 8007e28:	4680      	mov	r8, r0
 8007e2a:	460c      	mov	r4, r1
 8007e2c:	469a      	mov	sl, r3
 8007e2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e32:	d807      	bhi.n	8007e44 <_printf_i+0x28>
 8007e34:	2f62      	cmp	r7, #98	; 0x62
 8007e36:	d80a      	bhi.n	8007e4e <_printf_i+0x32>
 8007e38:	2f00      	cmp	r7, #0
 8007e3a:	f000 80d8 	beq.w	8007fee <_printf_i+0x1d2>
 8007e3e:	2f58      	cmp	r7, #88	; 0x58
 8007e40:	f000 80a3 	beq.w	8007f8a <_printf_i+0x16e>
 8007e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e4c:	e03a      	b.n	8007ec4 <_printf_i+0xa8>
 8007e4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e52:	2b15      	cmp	r3, #21
 8007e54:	d8f6      	bhi.n	8007e44 <_printf_i+0x28>
 8007e56:	a101      	add	r1, pc, #4	; (adr r1, 8007e5c <_printf_i+0x40>)
 8007e58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e5c:	08007eb5 	.word	0x08007eb5
 8007e60:	08007ec9 	.word	0x08007ec9
 8007e64:	08007e45 	.word	0x08007e45
 8007e68:	08007e45 	.word	0x08007e45
 8007e6c:	08007e45 	.word	0x08007e45
 8007e70:	08007e45 	.word	0x08007e45
 8007e74:	08007ec9 	.word	0x08007ec9
 8007e78:	08007e45 	.word	0x08007e45
 8007e7c:	08007e45 	.word	0x08007e45
 8007e80:	08007e45 	.word	0x08007e45
 8007e84:	08007e45 	.word	0x08007e45
 8007e88:	08007fd5 	.word	0x08007fd5
 8007e8c:	08007ef9 	.word	0x08007ef9
 8007e90:	08007fb7 	.word	0x08007fb7
 8007e94:	08007e45 	.word	0x08007e45
 8007e98:	08007e45 	.word	0x08007e45
 8007e9c:	08007ff7 	.word	0x08007ff7
 8007ea0:	08007e45 	.word	0x08007e45
 8007ea4:	08007ef9 	.word	0x08007ef9
 8007ea8:	08007e45 	.word	0x08007e45
 8007eac:	08007e45 	.word	0x08007e45
 8007eb0:	08007fbf 	.word	0x08007fbf
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	1d1a      	adds	r2, r3, #4
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	602a      	str	r2, [r5, #0]
 8007ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ec0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e0a3      	b.n	8008010 <_printf_i+0x1f4>
 8007ec8:	6820      	ldr	r0, [r4, #0]
 8007eca:	6829      	ldr	r1, [r5, #0]
 8007ecc:	0606      	lsls	r6, r0, #24
 8007ece:	f101 0304 	add.w	r3, r1, #4
 8007ed2:	d50a      	bpl.n	8007eea <_printf_i+0xce>
 8007ed4:	680e      	ldr	r6, [r1, #0]
 8007ed6:	602b      	str	r3, [r5, #0]
 8007ed8:	2e00      	cmp	r6, #0
 8007eda:	da03      	bge.n	8007ee4 <_printf_i+0xc8>
 8007edc:	232d      	movs	r3, #45	; 0x2d
 8007ede:	4276      	negs	r6, r6
 8007ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ee4:	485e      	ldr	r0, [pc, #376]	; (8008060 <_printf_i+0x244>)
 8007ee6:	230a      	movs	r3, #10
 8007ee8:	e019      	b.n	8007f1e <_printf_i+0x102>
 8007eea:	680e      	ldr	r6, [r1, #0]
 8007eec:	602b      	str	r3, [r5, #0]
 8007eee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ef2:	bf18      	it	ne
 8007ef4:	b236      	sxthne	r6, r6
 8007ef6:	e7ef      	b.n	8007ed8 <_printf_i+0xbc>
 8007ef8:	682b      	ldr	r3, [r5, #0]
 8007efa:	6820      	ldr	r0, [r4, #0]
 8007efc:	1d19      	adds	r1, r3, #4
 8007efe:	6029      	str	r1, [r5, #0]
 8007f00:	0601      	lsls	r1, r0, #24
 8007f02:	d501      	bpl.n	8007f08 <_printf_i+0xec>
 8007f04:	681e      	ldr	r6, [r3, #0]
 8007f06:	e002      	b.n	8007f0e <_printf_i+0xf2>
 8007f08:	0646      	lsls	r6, r0, #25
 8007f0a:	d5fb      	bpl.n	8007f04 <_printf_i+0xe8>
 8007f0c:	881e      	ldrh	r6, [r3, #0]
 8007f0e:	4854      	ldr	r0, [pc, #336]	; (8008060 <_printf_i+0x244>)
 8007f10:	2f6f      	cmp	r7, #111	; 0x6f
 8007f12:	bf0c      	ite	eq
 8007f14:	2308      	moveq	r3, #8
 8007f16:	230a      	movne	r3, #10
 8007f18:	2100      	movs	r1, #0
 8007f1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f1e:	6865      	ldr	r5, [r4, #4]
 8007f20:	60a5      	str	r5, [r4, #8]
 8007f22:	2d00      	cmp	r5, #0
 8007f24:	bfa2      	ittt	ge
 8007f26:	6821      	ldrge	r1, [r4, #0]
 8007f28:	f021 0104 	bicge.w	r1, r1, #4
 8007f2c:	6021      	strge	r1, [r4, #0]
 8007f2e:	b90e      	cbnz	r6, 8007f34 <_printf_i+0x118>
 8007f30:	2d00      	cmp	r5, #0
 8007f32:	d04d      	beq.n	8007fd0 <_printf_i+0x1b4>
 8007f34:	4615      	mov	r5, r2
 8007f36:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f3a:	fb03 6711 	mls	r7, r3, r1, r6
 8007f3e:	5dc7      	ldrb	r7, [r0, r7]
 8007f40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f44:	4637      	mov	r7, r6
 8007f46:	42bb      	cmp	r3, r7
 8007f48:	460e      	mov	r6, r1
 8007f4a:	d9f4      	bls.n	8007f36 <_printf_i+0x11a>
 8007f4c:	2b08      	cmp	r3, #8
 8007f4e:	d10b      	bne.n	8007f68 <_printf_i+0x14c>
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	07de      	lsls	r6, r3, #31
 8007f54:	d508      	bpl.n	8007f68 <_printf_i+0x14c>
 8007f56:	6923      	ldr	r3, [r4, #16]
 8007f58:	6861      	ldr	r1, [r4, #4]
 8007f5a:	4299      	cmp	r1, r3
 8007f5c:	bfde      	ittt	le
 8007f5e:	2330      	movle	r3, #48	; 0x30
 8007f60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f64:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007f68:	1b52      	subs	r2, r2, r5
 8007f6a:	6122      	str	r2, [r4, #16]
 8007f6c:	f8cd a000 	str.w	sl, [sp]
 8007f70:	464b      	mov	r3, r9
 8007f72:	aa03      	add	r2, sp, #12
 8007f74:	4621      	mov	r1, r4
 8007f76:	4640      	mov	r0, r8
 8007f78:	f7ff fee2 	bl	8007d40 <_printf_common>
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	d14c      	bne.n	800801a <_printf_i+0x1fe>
 8007f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f84:	b004      	add	sp, #16
 8007f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f8a:	4835      	ldr	r0, [pc, #212]	; (8008060 <_printf_i+0x244>)
 8007f8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f90:	6829      	ldr	r1, [r5, #0]
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f98:	6029      	str	r1, [r5, #0]
 8007f9a:	061d      	lsls	r5, r3, #24
 8007f9c:	d514      	bpl.n	8007fc8 <_printf_i+0x1ac>
 8007f9e:	07df      	lsls	r7, r3, #31
 8007fa0:	bf44      	itt	mi
 8007fa2:	f043 0320 	orrmi.w	r3, r3, #32
 8007fa6:	6023      	strmi	r3, [r4, #0]
 8007fa8:	b91e      	cbnz	r6, 8007fb2 <_printf_i+0x196>
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	f023 0320 	bic.w	r3, r3, #32
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	2310      	movs	r3, #16
 8007fb4:	e7b0      	b.n	8007f18 <_printf_i+0xfc>
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	f043 0320 	orr.w	r3, r3, #32
 8007fbc:	6023      	str	r3, [r4, #0]
 8007fbe:	2378      	movs	r3, #120	; 0x78
 8007fc0:	4828      	ldr	r0, [pc, #160]	; (8008064 <_printf_i+0x248>)
 8007fc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fc6:	e7e3      	b.n	8007f90 <_printf_i+0x174>
 8007fc8:	0659      	lsls	r1, r3, #25
 8007fca:	bf48      	it	mi
 8007fcc:	b2b6      	uxthmi	r6, r6
 8007fce:	e7e6      	b.n	8007f9e <_printf_i+0x182>
 8007fd0:	4615      	mov	r5, r2
 8007fd2:	e7bb      	b.n	8007f4c <_printf_i+0x130>
 8007fd4:	682b      	ldr	r3, [r5, #0]
 8007fd6:	6826      	ldr	r6, [r4, #0]
 8007fd8:	6961      	ldr	r1, [r4, #20]
 8007fda:	1d18      	adds	r0, r3, #4
 8007fdc:	6028      	str	r0, [r5, #0]
 8007fde:	0635      	lsls	r5, r6, #24
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	d501      	bpl.n	8007fe8 <_printf_i+0x1cc>
 8007fe4:	6019      	str	r1, [r3, #0]
 8007fe6:	e002      	b.n	8007fee <_printf_i+0x1d2>
 8007fe8:	0670      	lsls	r0, r6, #25
 8007fea:	d5fb      	bpl.n	8007fe4 <_printf_i+0x1c8>
 8007fec:	8019      	strh	r1, [r3, #0]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	6123      	str	r3, [r4, #16]
 8007ff2:	4615      	mov	r5, r2
 8007ff4:	e7ba      	b.n	8007f6c <_printf_i+0x150>
 8007ff6:	682b      	ldr	r3, [r5, #0]
 8007ff8:	1d1a      	adds	r2, r3, #4
 8007ffa:	602a      	str	r2, [r5, #0]
 8007ffc:	681d      	ldr	r5, [r3, #0]
 8007ffe:	6862      	ldr	r2, [r4, #4]
 8008000:	2100      	movs	r1, #0
 8008002:	4628      	mov	r0, r5
 8008004:	f7f8 f8f4 	bl	80001f0 <memchr>
 8008008:	b108      	cbz	r0, 800800e <_printf_i+0x1f2>
 800800a:	1b40      	subs	r0, r0, r5
 800800c:	6060      	str	r0, [r4, #4]
 800800e:	6863      	ldr	r3, [r4, #4]
 8008010:	6123      	str	r3, [r4, #16]
 8008012:	2300      	movs	r3, #0
 8008014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008018:	e7a8      	b.n	8007f6c <_printf_i+0x150>
 800801a:	6923      	ldr	r3, [r4, #16]
 800801c:	462a      	mov	r2, r5
 800801e:	4649      	mov	r1, r9
 8008020:	4640      	mov	r0, r8
 8008022:	47d0      	blx	sl
 8008024:	3001      	adds	r0, #1
 8008026:	d0ab      	beq.n	8007f80 <_printf_i+0x164>
 8008028:	6823      	ldr	r3, [r4, #0]
 800802a:	079b      	lsls	r3, r3, #30
 800802c:	d413      	bmi.n	8008056 <_printf_i+0x23a>
 800802e:	68e0      	ldr	r0, [r4, #12]
 8008030:	9b03      	ldr	r3, [sp, #12]
 8008032:	4298      	cmp	r0, r3
 8008034:	bfb8      	it	lt
 8008036:	4618      	movlt	r0, r3
 8008038:	e7a4      	b.n	8007f84 <_printf_i+0x168>
 800803a:	2301      	movs	r3, #1
 800803c:	4632      	mov	r2, r6
 800803e:	4649      	mov	r1, r9
 8008040:	4640      	mov	r0, r8
 8008042:	47d0      	blx	sl
 8008044:	3001      	adds	r0, #1
 8008046:	d09b      	beq.n	8007f80 <_printf_i+0x164>
 8008048:	3501      	adds	r5, #1
 800804a:	68e3      	ldr	r3, [r4, #12]
 800804c:	9903      	ldr	r1, [sp, #12]
 800804e:	1a5b      	subs	r3, r3, r1
 8008050:	42ab      	cmp	r3, r5
 8008052:	dcf2      	bgt.n	800803a <_printf_i+0x21e>
 8008054:	e7eb      	b.n	800802e <_printf_i+0x212>
 8008056:	2500      	movs	r5, #0
 8008058:	f104 0619 	add.w	r6, r4, #25
 800805c:	e7f5      	b.n	800804a <_printf_i+0x22e>
 800805e:	bf00      	nop
 8008060:	0800c15e 	.word	0x0800c15e
 8008064:	0800c16f 	.word	0x0800c16f

08008068 <iprintf>:
 8008068:	b40f      	push	{r0, r1, r2, r3}
 800806a:	4b0a      	ldr	r3, [pc, #40]	; (8008094 <iprintf+0x2c>)
 800806c:	b513      	push	{r0, r1, r4, lr}
 800806e:	681c      	ldr	r4, [r3, #0]
 8008070:	b124      	cbz	r4, 800807c <iprintf+0x14>
 8008072:	69a3      	ldr	r3, [r4, #24]
 8008074:	b913      	cbnz	r3, 800807c <iprintf+0x14>
 8008076:	4620      	mov	r0, r4
 8008078:	f001 ff1e 	bl	8009eb8 <__sinit>
 800807c:	ab05      	add	r3, sp, #20
 800807e:	9a04      	ldr	r2, [sp, #16]
 8008080:	68a1      	ldr	r1, [r4, #8]
 8008082:	9301      	str	r3, [sp, #4]
 8008084:	4620      	mov	r0, r4
 8008086:	f003 f98b 	bl	800b3a0 <_vfiprintf_r>
 800808a:	b002      	add	sp, #8
 800808c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008090:	b004      	add	sp, #16
 8008092:	4770      	bx	lr
 8008094:	2000000c 	.word	0x2000000c

08008098 <_puts_r>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	460e      	mov	r6, r1
 800809c:	4605      	mov	r5, r0
 800809e:	b118      	cbz	r0, 80080a8 <_puts_r+0x10>
 80080a0:	6983      	ldr	r3, [r0, #24]
 80080a2:	b90b      	cbnz	r3, 80080a8 <_puts_r+0x10>
 80080a4:	f001 ff08 	bl	8009eb8 <__sinit>
 80080a8:	69ab      	ldr	r3, [r5, #24]
 80080aa:	68ac      	ldr	r4, [r5, #8]
 80080ac:	b913      	cbnz	r3, 80080b4 <_puts_r+0x1c>
 80080ae:	4628      	mov	r0, r5
 80080b0:	f001 ff02 	bl	8009eb8 <__sinit>
 80080b4:	4b2c      	ldr	r3, [pc, #176]	; (8008168 <_puts_r+0xd0>)
 80080b6:	429c      	cmp	r4, r3
 80080b8:	d120      	bne.n	80080fc <_puts_r+0x64>
 80080ba:	686c      	ldr	r4, [r5, #4]
 80080bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080be:	07db      	lsls	r3, r3, #31
 80080c0:	d405      	bmi.n	80080ce <_puts_r+0x36>
 80080c2:	89a3      	ldrh	r3, [r4, #12]
 80080c4:	0598      	lsls	r0, r3, #22
 80080c6:	d402      	bmi.n	80080ce <_puts_r+0x36>
 80080c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080ca:	f002 fb06 	bl	800a6da <__retarget_lock_acquire_recursive>
 80080ce:	89a3      	ldrh	r3, [r4, #12]
 80080d0:	0719      	lsls	r1, r3, #28
 80080d2:	d51d      	bpl.n	8008110 <_puts_r+0x78>
 80080d4:	6923      	ldr	r3, [r4, #16]
 80080d6:	b1db      	cbz	r3, 8008110 <_puts_r+0x78>
 80080d8:	3e01      	subs	r6, #1
 80080da:	68a3      	ldr	r3, [r4, #8]
 80080dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080e0:	3b01      	subs	r3, #1
 80080e2:	60a3      	str	r3, [r4, #8]
 80080e4:	bb39      	cbnz	r1, 8008136 <_puts_r+0x9e>
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	da38      	bge.n	800815c <_puts_r+0xc4>
 80080ea:	4622      	mov	r2, r4
 80080ec:	210a      	movs	r1, #10
 80080ee:	4628      	mov	r0, r5
 80080f0:	f000 fe8c 	bl	8008e0c <__swbuf_r>
 80080f4:	3001      	adds	r0, #1
 80080f6:	d011      	beq.n	800811c <_puts_r+0x84>
 80080f8:	250a      	movs	r5, #10
 80080fa:	e011      	b.n	8008120 <_puts_r+0x88>
 80080fc:	4b1b      	ldr	r3, [pc, #108]	; (800816c <_puts_r+0xd4>)
 80080fe:	429c      	cmp	r4, r3
 8008100:	d101      	bne.n	8008106 <_puts_r+0x6e>
 8008102:	68ac      	ldr	r4, [r5, #8]
 8008104:	e7da      	b.n	80080bc <_puts_r+0x24>
 8008106:	4b1a      	ldr	r3, [pc, #104]	; (8008170 <_puts_r+0xd8>)
 8008108:	429c      	cmp	r4, r3
 800810a:	bf08      	it	eq
 800810c:	68ec      	ldreq	r4, [r5, #12]
 800810e:	e7d5      	b.n	80080bc <_puts_r+0x24>
 8008110:	4621      	mov	r1, r4
 8008112:	4628      	mov	r0, r5
 8008114:	f000 fecc 	bl	8008eb0 <__swsetup_r>
 8008118:	2800      	cmp	r0, #0
 800811a:	d0dd      	beq.n	80080d8 <_puts_r+0x40>
 800811c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008120:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008122:	07da      	lsls	r2, r3, #31
 8008124:	d405      	bmi.n	8008132 <_puts_r+0x9a>
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	059b      	lsls	r3, r3, #22
 800812a:	d402      	bmi.n	8008132 <_puts_r+0x9a>
 800812c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800812e:	f002 fad5 	bl	800a6dc <__retarget_lock_release_recursive>
 8008132:	4628      	mov	r0, r5
 8008134:	bd70      	pop	{r4, r5, r6, pc}
 8008136:	2b00      	cmp	r3, #0
 8008138:	da04      	bge.n	8008144 <_puts_r+0xac>
 800813a:	69a2      	ldr	r2, [r4, #24]
 800813c:	429a      	cmp	r2, r3
 800813e:	dc06      	bgt.n	800814e <_puts_r+0xb6>
 8008140:	290a      	cmp	r1, #10
 8008142:	d004      	beq.n	800814e <_puts_r+0xb6>
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	1c5a      	adds	r2, r3, #1
 8008148:	6022      	str	r2, [r4, #0]
 800814a:	7019      	strb	r1, [r3, #0]
 800814c:	e7c5      	b.n	80080da <_puts_r+0x42>
 800814e:	4622      	mov	r2, r4
 8008150:	4628      	mov	r0, r5
 8008152:	f000 fe5b 	bl	8008e0c <__swbuf_r>
 8008156:	3001      	adds	r0, #1
 8008158:	d1bf      	bne.n	80080da <_puts_r+0x42>
 800815a:	e7df      	b.n	800811c <_puts_r+0x84>
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	250a      	movs	r5, #10
 8008160:	1c5a      	adds	r2, r3, #1
 8008162:	6022      	str	r2, [r4, #0]
 8008164:	701d      	strb	r5, [r3, #0]
 8008166:	e7db      	b.n	8008120 <_puts_r+0x88>
 8008168:	0800c280 	.word	0x0800c280
 800816c:	0800c2a0 	.word	0x0800c2a0
 8008170:	0800c260 	.word	0x0800c260

08008174 <puts>:
 8008174:	4b02      	ldr	r3, [pc, #8]	; (8008180 <puts+0xc>)
 8008176:	4601      	mov	r1, r0
 8008178:	6818      	ldr	r0, [r3, #0]
 800817a:	f7ff bf8d 	b.w	8008098 <_puts_r>
 800817e:	bf00      	nop
 8008180:	2000000c 	.word	0x2000000c

08008184 <strncmp>:
 8008184:	b510      	push	{r4, lr}
 8008186:	b17a      	cbz	r2, 80081a8 <strncmp+0x24>
 8008188:	4603      	mov	r3, r0
 800818a:	3901      	subs	r1, #1
 800818c:	1884      	adds	r4, r0, r2
 800818e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008192:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008196:	4290      	cmp	r0, r2
 8008198:	d101      	bne.n	800819e <strncmp+0x1a>
 800819a:	42a3      	cmp	r3, r4
 800819c:	d101      	bne.n	80081a2 <strncmp+0x1e>
 800819e:	1a80      	subs	r0, r0, r2
 80081a0:	bd10      	pop	{r4, pc}
 80081a2:	2800      	cmp	r0, #0
 80081a4:	d1f3      	bne.n	800818e <strncmp+0xa>
 80081a6:	e7fa      	b.n	800819e <strncmp+0x1a>
 80081a8:	4610      	mov	r0, r2
 80081aa:	e7f9      	b.n	80081a0 <strncmp+0x1c>

080081ac <sulp>:
 80081ac:	b570      	push	{r4, r5, r6, lr}
 80081ae:	4604      	mov	r4, r0
 80081b0:	460d      	mov	r5, r1
 80081b2:	ec45 4b10 	vmov	d0, r4, r5
 80081b6:	4616      	mov	r6, r2
 80081b8:	f002 fe82 	bl	800aec0 <__ulp>
 80081bc:	ec51 0b10 	vmov	r0, r1, d0
 80081c0:	b17e      	cbz	r6, 80081e2 <sulp+0x36>
 80081c2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80081c6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	dd09      	ble.n	80081e2 <sulp+0x36>
 80081ce:	051b      	lsls	r3, r3, #20
 80081d0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80081d4:	2400      	movs	r4, #0
 80081d6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80081da:	4622      	mov	r2, r4
 80081dc:	462b      	mov	r3, r5
 80081de:	f7f8 fa13 	bl	8000608 <__aeabi_dmul>
 80081e2:	bd70      	pop	{r4, r5, r6, pc}
 80081e4:	0000      	movs	r0, r0
	...

080081e8 <_strtod_l>:
 80081e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ec:	ed2d 8b02 	vpush	{d8}
 80081f0:	b09d      	sub	sp, #116	; 0x74
 80081f2:	461f      	mov	r7, r3
 80081f4:	2300      	movs	r3, #0
 80081f6:	9318      	str	r3, [sp, #96]	; 0x60
 80081f8:	4ba2      	ldr	r3, [pc, #648]	; (8008484 <_strtod_l+0x29c>)
 80081fa:	9213      	str	r2, [sp, #76]	; 0x4c
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	9305      	str	r3, [sp, #20]
 8008200:	4604      	mov	r4, r0
 8008202:	4618      	mov	r0, r3
 8008204:	4688      	mov	r8, r1
 8008206:	f7f7 ffeb 	bl	80001e0 <strlen>
 800820a:	f04f 0a00 	mov.w	sl, #0
 800820e:	4605      	mov	r5, r0
 8008210:	f04f 0b00 	mov.w	fp, #0
 8008214:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008218:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800821a:	781a      	ldrb	r2, [r3, #0]
 800821c:	2a2b      	cmp	r2, #43	; 0x2b
 800821e:	d04e      	beq.n	80082be <_strtod_l+0xd6>
 8008220:	d83b      	bhi.n	800829a <_strtod_l+0xb2>
 8008222:	2a0d      	cmp	r2, #13
 8008224:	d834      	bhi.n	8008290 <_strtod_l+0xa8>
 8008226:	2a08      	cmp	r2, #8
 8008228:	d834      	bhi.n	8008294 <_strtod_l+0xac>
 800822a:	2a00      	cmp	r2, #0
 800822c:	d03e      	beq.n	80082ac <_strtod_l+0xc4>
 800822e:	2300      	movs	r3, #0
 8008230:	930a      	str	r3, [sp, #40]	; 0x28
 8008232:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008234:	7833      	ldrb	r3, [r6, #0]
 8008236:	2b30      	cmp	r3, #48	; 0x30
 8008238:	f040 80b0 	bne.w	800839c <_strtod_l+0x1b4>
 800823c:	7873      	ldrb	r3, [r6, #1]
 800823e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008242:	2b58      	cmp	r3, #88	; 0x58
 8008244:	d168      	bne.n	8008318 <_strtod_l+0x130>
 8008246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008248:	9301      	str	r3, [sp, #4]
 800824a:	ab18      	add	r3, sp, #96	; 0x60
 800824c:	9702      	str	r7, [sp, #8]
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	4a8d      	ldr	r2, [pc, #564]	; (8008488 <_strtod_l+0x2a0>)
 8008252:	ab19      	add	r3, sp, #100	; 0x64
 8008254:	a917      	add	r1, sp, #92	; 0x5c
 8008256:	4620      	mov	r0, r4
 8008258:	f001 ff32 	bl	800a0c0 <__gethex>
 800825c:	f010 0707 	ands.w	r7, r0, #7
 8008260:	4605      	mov	r5, r0
 8008262:	d005      	beq.n	8008270 <_strtod_l+0x88>
 8008264:	2f06      	cmp	r7, #6
 8008266:	d12c      	bne.n	80082c2 <_strtod_l+0xda>
 8008268:	3601      	adds	r6, #1
 800826a:	2300      	movs	r3, #0
 800826c:	9617      	str	r6, [sp, #92]	; 0x5c
 800826e:	930a      	str	r3, [sp, #40]	; 0x28
 8008270:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008272:	2b00      	cmp	r3, #0
 8008274:	f040 8590 	bne.w	8008d98 <_strtod_l+0xbb0>
 8008278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800827a:	b1eb      	cbz	r3, 80082b8 <_strtod_l+0xd0>
 800827c:	4652      	mov	r2, sl
 800827e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008282:	ec43 2b10 	vmov	d0, r2, r3
 8008286:	b01d      	add	sp, #116	; 0x74
 8008288:	ecbd 8b02 	vpop	{d8}
 800828c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008290:	2a20      	cmp	r2, #32
 8008292:	d1cc      	bne.n	800822e <_strtod_l+0x46>
 8008294:	3301      	adds	r3, #1
 8008296:	9317      	str	r3, [sp, #92]	; 0x5c
 8008298:	e7be      	b.n	8008218 <_strtod_l+0x30>
 800829a:	2a2d      	cmp	r2, #45	; 0x2d
 800829c:	d1c7      	bne.n	800822e <_strtod_l+0x46>
 800829e:	2201      	movs	r2, #1
 80082a0:	920a      	str	r2, [sp, #40]	; 0x28
 80082a2:	1c5a      	adds	r2, r3, #1
 80082a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80082a6:	785b      	ldrb	r3, [r3, #1]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1c2      	bne.n	8008232 <_strtod_l+0x4a>
 80082ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f040 856e 	bne.w	8008d94 <_strtod_l+0xbac>
 80082b8:	4652      	mov	r2, sl
 80082ba:	465b      	mov	r3, fp
 80082bc:	e7e1      	b.n	8008282 <_strtod_l+0x9a>
 80082be:	2200      	movs	r2, #0
 80082c0:	e7ee      	b.n	80082a0 <_strtod_l+0xb8>
 80082c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80082c4:	b13a      	cbz	r2, 80082d6 <_strtod_l+0xee>
 80082c6:	2135      	movs	r1, #53	; 0x35
 80082c8:	a81a      	add	r0, sp, #104	; 0x68
 80082ca:	f002 ff04 	bl	800b0d6 <__copybits>
 80082ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80082d0:	4620      	mov	r0, r4
 80082d2:	f002 fac3 	bl	800a85c <_Bfree>
 80082d6:	3f01      	subs	r7, #1
 80082d8:	2f04      	cmp	r7, #4
 80082da:	d806      	bhi.n	80082ea <_strtod_l+0x102>
 80082dc:	e8df f007 	tbb	[pc, r7]
 80082e0:	1714030a 	.word	0x1714030a
 80082e4:	0a          	.byte	0x0a
 80082e5:	00          	.byte	0x00
 80082e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80082ea:	0728      	lsls	r0, r5, #28
 80082ec:	d5c0      	bpl.n	8008270 <_strtod_l+0x88>
 80082ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80082f2:	e7bd      	b.n	8008270 <_strtod_l+0x88>
 80082f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80082f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80082fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80082fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008302:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008306:	e7f0      	b.n	80082ea <_strtod_l+0x102>
 8008308:	f8df b180 	ldr.w	fp, [pc, #384]	; 800848c <_strtod_l+0x2a4>
 800830c:	e7ed      	b.n	80082ea <_strtod_l+0x102>
 800830e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008312:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008316:	e7e8      	b.n	80082ea <_strtod_l+0x102>
 8008318:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	9217      	str	r2, [sp, #92]	; 0x5c
 800831e:	785b      	ldrb	r3, [r3, #1]
 8008320:	2b30      	cmp	r3, #48	; 0x30
 8008322:	d0f9      	beq.n	8008318 <_strtod_l+0x130>
 8008324:	2b00      	cmp	r3, #0
 8008326:	d0a3      	beq.n	8008270 <_strtod_l+0x88>
 8008328:	2301      	movs	r3, #1
 800832a:	f04f 0900 	mov.w	r9, #0
 800832e:	9304      	str	r3, [sp, #16]
 8008330:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008332:	9308      	str	r3, [sp, #32]
 8008334:	f8cd 901c 	str.w	r9, [sp, #28]
 8008338:	464f      	mov	r7, r9
 800833a:	220a      	movs	r2, #10
 800833c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800833e:	7806      	ldrb	r6, [r0, #0]
 8008340:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008344:	b2d9      	uxtb	r1, r3
 8008346:	2909      	cmp	r1, #9
 8008348:	d92a      	bls.n	80083a0 <_strtod_l+0x1b8>
 800834a:	9905      	ldr	r1, [sp, #20]
 800834c:	462a      	mov	r2, r5
 800834e:	f7ff ff19 	bl	8008184 <strncmp>
 8008352:	b398      	cbz	r0, 80083bc <_strtod_l+0x1d4>
 8008354:	2000      	movs	r0, #0
 8008356:	4632      	mov	r2, r6
 8008358:	463d      	mov	r5, r7
 800835a:	9005      	str	r0, [sp, #20]
 800835c:	4603      	mov	r3, r0
 800835e:	2a65      	cmp	r2, #101	; 0x65
 8008360:	d001      	beq.n	8008366 <_strtod_l+0x17e>
 8008362:	2a45      	cmp	r2, #69	; 0x45
 8008364:	d118      	bne.n	8008398 <_strtod_l+0x1b0>
 8008366:	b91d      	cbnz	r5, 8008370 <_strtod_l+0x188>
 8008368:	9a04      	ldr	r2, [sp, #16]
 800836a:	4302      	orrs	r2, r0
 800836c:	d09e      	beq.n	80082ac <_strtod_l+0xc4>
 800836e:	2500      	movs	r5, #0
 8008370:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008374:	f108 0201 	add.w	r2, r8, #1
 8008378:	9217      	str	r2, [sp, #92]	; 0x5c
 800837a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800837e:	2a2b      	cmp	r2, #43	; 0x2b
 8008380:	d075      	beq.n	800846e <_strtod_l+0x286>
 8008382:	2a2d      	cmp	r2, #45	; 0x2d
 8008384:	d07b      	beq.n	800847e <_strtod_l+0x296>
 8008386:	f04f 0c00 	mov.w	ip, #0
 800838a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800838e:	2909      	cmp	r1, #9
 8008390:	f240 8082 	bls.w	8008498 <_strtod_l+0x2b0>
 8008394:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008398:	2600      	movs	r6, #0
 800839a:	e09d      	b.n	80084d8 <_strtod_l+0x2f0>
 800839c:	2300      	movs	r3, #0
 800839e:	e7c4      	b.n	800832a <_strtod_l+0x142>
 80083a0:	2f08      	cmp	r7, #8
 80083a2:	bfd8      	it	le
 80083a4:	9907      	ldrle	r1, [sp, #28]
 80083a6:	f100 0001 	add.w	r0, r0, #1
 80083aa:	bfda      	itte	le
 80083ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80083b0:	9307      	strle	r3, [sp, #28]
 80083b2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80083b6:	3701      	adds	r7, #1
 80083b8:	9017      	str	r0, [sp, #92]	; 0x5c
 80083ba:	e7bf      	b.n	800833c <_strtod_l+0x154>
 80083bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083be:	195a      	adds	r2, r3, r5
 80083c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80083c2:	5d5a      	ldrb	r2, [r3, r5]
 80083c4:	2f00      	cmp	r7, #0
 80083c6:	d037      	beq.n	8008438 <_strtod_l+0x250>
 80083c8:	9005      	str	r0, [sp, #20]
 80083ca:	463d      	mov	r5, r7
 80083cc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80083d0:	2b09      	cmp	r3, #9
 80083d2:	d912      	bls.n	80083fa <_strtod_l+0x212>
 80083d4:	2301      	movs	r3, #1
 80083d6:	e7c2      	b.n	800835e <_strtod_l+0x176>
 80083d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083da:	1c5a      	adds	r2, r3, #1
 80083dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80083de:	785a      	ldrb	r2, [r3, #1]
 80083e0:	3001      	adds	r0, #1
 80083e2:	2a30      	cmp	r2, #48	; 0x30
 80083e4:	d0f8      	beq.n	80083d8 <_strtod_l+0x1f0>
 80083e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80083ea:	2b08      	cmp	r3, #8
 80083ec:	f200 84d9 	bhi.w	8008da2 <_strtod_l+0xbba>
 80083f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083f2:	9005      	str	r0, [sp, #20]
 80083f4:	2000      	movs	r0, #0
 80083f6:	9308      	str	r3, [sp, #32]
 80083f8:	4605      	mov	r5, r0
 80083fa:	3a30      	subs	r2, #48	; 0x30
 80083fc:	f100 0301 	add.w	r3, r0, #1
 8008400:	d014      	beq.n	800842c <_strtod_l+0x244>
 8008402:	9905      	ldr	r1, [sp, #20]
 8008404:	4419      	add	r1, r3
 8008406:	9105      	str	r1, [sp, #20]
 8008408:	462b      	mov	r3, r5
 800840a:	eb00 0e05 	add.w	lr, r0, r5
 800840e:	210a      	movs	r1, #10
 8008410:	4573      	cmp	r3, lr
 8008412:	d113      	bne.n	800843c <_strtod_l+0x254>
 8008414:	182b      	adds	r3, r5, r0
 8008416:	2b08      	cmp	r3, #8
 8008418:	f105 0501 	add.w	r5, r5, #1
 800841c:	4405      	add	r5, r0
 800841e:	dc1c      	bgt.n	800845a <_strtod_l+0x272>
 8008420:	9907      	ldr	r1, [sp, #28]
 8008422:	230a      	movs	r3, #10
 8008424:	fb03 2301 	mla	r3, r3, r1, r2
 8008428:	9307      	str	r3, [sp, #28]
 800842a:	2300      	movs	r3, #0
 800842c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800842e:	1c51      	adds	r1, r2, #1
 8008430:	9117      	str	r1, [sp, #92]	; 0x5c
 8008432:	7852      	ldrb	r2, [r2, #1]
 8008434:	4618      	mov	r0, r3
 8008436:	e7c9      	b.n	80083cc <_strtod_l+0x1e4>
 8008438:	4638      	mov	r0, r7
 800843a:	e7d2      	b.n	80083e2 <_strtod_l+0x1fa>
 800843c:	2b08      	cmp	r3, #8
 800843e:	dc04      	bgt.n	800844a <_strtod_l+0x262>
 8008440:	9e07      	ldr	r6, [sp, #28]
 8008442:	434e      	muls	r6, r1
 8008444:	9607      	str	r6, [sp, #28]
 8008446:	3301      	adds	r3, #1
 8008448:	e7e2      	b.n	8008410 <_strtod_l+0x228>
 800844a:	f103 0c01 	add.w	ip, r3, #1
 800844e:	f1bc 0f10 	cmp.w	ip, #16
 8008452:	bfd8      	it	le
 8008454:	fb01 f909 	mulle.w	r9, r1, r9
 8008458:	e7f5      	b.n	8008446 <_strtod_l+0x25e>
 800845a:	2d10      	cmp	r5, #16
 800845c:	bfdc      	itt	le
 800845e:	230a      	movle	r3, #10
 8008460:	fb03 2909 	mlale	r9, r3, r9, r2
 8008464:	e7e1      	b.n	800842a <_strtod_l+0x242>
 8008466:	2300      	movs	r3, #0
 8008468:	9305      	str	r3, [sp, #20]
 800846a:	2301      	movs	r3, #1
 800846c:	e77c      	b.n	8008368 <_strtod_l+0x180>
 800846e:	f04f 0c00 	mov.w	ip, #0
 8008472:	f108 0202 	add.w	r2, r8, #2
 8008476:	9217      	str	r2, [sp, #92]	; 0x5c
 8008478:	f898 2002 	ldrb.w	r2, [r8, #2]
 800847c:	e785      	b.n	800838a <_strtod_l+0x1a2>
 800847e:	f04f 0c01 	mov.w	ip, #1
 8008482:	e7f6      	b.n	8008472 <_strtod_l+0x28a>
 8008484:	0800c328 	.word	0x0800c328
 8008488:	0800c180 	.word	0x0800c180
 800848c:	7ff00000 	.word	0x7ff00000
 8008490:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008492:	1c51      	adds	r1, r2, #1
 8008494:	9117      	str	r1, [sp, #92]	; 0x5c
 8008496:	7852      	ldrb	r2, [r2, #1]
 8008498:	2a30      	cmp	r2, #48	; 0x30
 800849a:	d0f9      	beq.n	8008490 <_strtod_l+0x2a8>
 800849c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80084a0:	2908      	cmp	r1, #8
 80084a2:	f63f af79 	bhi.w	8008398 <_strtod_l+0x1b0>
 80084a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80084aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80084ac:	9206      	str	r2, [sp, #24]
 80084ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80084b0:	1c51      	adds	r1, r2, #1
 80084b2:	9117      	str	r1, [sp, #92]	; 0x5c
 80084b4:	7852      	ldrb	r2, [r2, #1]
 80084b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80084ba:	2e09      	cmp	r6, #9
 80084bc:	d937      	bls.n	800852e <_strtod_l+0x346>
 80084be:	9e06      	ldr	r6, [sp, #24]
 80084c0:	1b89      	subs	r1, r1, r6
 80084c2:	2908      	cmp	r1, #8
 80084c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80084c8:	dc02      	bgt.n	80084d0 <_strtod_l+0x2e8>
 80084ca:	4576      	cmp	r6, lr
 80084cc:	bfa8      	it	ge
 80084ce:	4676      	movge	r6, lr
 80084d0:	f1bc 0f00 	cmp.w	ip, #0
 80084d4:	d000      	beq.n	80084d8 <_strtod_l+0x2f0>
 80084d6:	4276      	negs	r6, r6
 80084d8:	2d00      	cmp	r5, #0
 80084da:	d14d      	bne.n	8008578 <_strtod_l+0x390>
 80084dc:	9904      	ldr	r1, [sp, #16]
 80084de:	4301      	orrs	r1, r0
 80084e0:	f47f aec6 	bne.w	8008270 <_strtod_l+0x88>
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f47f aee1 	bne.w	80082ac <_strtod_l+0xc4>
 80084ea:	2a69      	cmp	r2, #105	; 0x69
 80084ec:	d027      	beq.n	800853e <_strtod_l+0x356>
 80084ee:	dc24      	bgt.n	800853a <_strtod_l+0x352>
 80084f0:	2a49      	cmp	r2, #73	; 0x49
 80084f2:	d024      	beq.n	800853e <_strtod_l+0x356>
 80084f4:	2a4e      	cmp	r2, #78	; 0x4e
 80084f6:	f47f aed9 	bne.w	80082ac <_strtod_l+0xc4>
 80084fa:	499f      	ldr	r1, [pc, #636]	; (8008778 <_strtod_l+0x590>)
 80084fc:	a817      	add	r0, sp, #92	; 0x5c
 80084fe:	f002 f837 	bl	800a570 <__match>
 8008502:	2800      	cmp	r0, #0
 8008504:	f43f aed2 	beq.w	80082ac <_strtod_l+0xc4>
 8008508:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	2b28      	cmp	r3, #40	; 0x28
 800850e:	d12d      	bne.n	800856c <_strtod_l+0x384>
 8008510:	499a      	ldr	r1, [pc, #616]	; (800877c <_strtod_l+0x594>)
 8008512:	aa1a      	add	r2, sp, #104	; 0x68
 8008514:	a817      	add	r0, sp, #92	; 0x5c
 8008516:	f002 f83f 	bl	800a598 <__hexnan>
 800851a:	2805      	cmp	r0, #5
 800851c:	d126      	bne.n	800856c <_strtod_l+0x384>
 800851e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008520:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008524:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008528:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800852c:	e6a0      	b.n	8008270 <_strtod_l+0x88>
 800852e:	210a      	movs	r1, #10
 8008530:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008534:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008538:	e7b9      	b.n	80084ae <_strtod_l+0x2c6>
 800853a:	2a6e      	cmp	r2, #110	; 0x6e
 800853c:	e7db      	b.n	80084f6 <_strtod_l+0x30e>
 800853e:	4990      	ldr	r1, [pc, #576]	; (8008780 <_strtod_l+0x598>)
 8008540:	a817      	add	r0, sp, #92	; 0x5c
 8008542:	f002 f815 	bl	800a570 <__match>
 8008546:	2800      	cmp	r0, #0
 8008548:	f43f aeb0 	beq.w	80082ac <_strtod_l+0xc4>
 800854c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800854e:	498d      	ldr	r1, [pc, #564]	; (8008784 <_strtod_l+0x59c>)
 8008550:	3b01      	subs	r3, #1
 8008552:	a817      	add	r0, sp, #92	; 0x5c
 8008554:	9317      	str	r3, [sp, #92]	; 0x5c
 8008556:	f002 f80b 	bl	800a570 <__match>
 800855a:	b910      	cbnz	r0, 8008562 <_strtod_l+0x37a>
 800855c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800855e:	3301      	adds	r3, #1
 8008560:	9317      	str	r3, [sp, #92]	; 0x5c
 8008562:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008794 <_strtod_l+0x5ac>
 8008566:	f04f 0a00 	mov.w	sl, #0
 800856a:	e681      	b.n	8008270 <_strtod_l+0x88>
 800856c:	4886      	ldr	r0, [pc, #536]	; (8008788 <_strtod_l+0x5a0>)
 800856e:	f003 f847 	bl	800b600 <nan>
 8008572:	ec5b ab10 	vmov	sl, fp, d0
 8008576:	e67b      	b.n	8008270 <_strtod_l+0x88>
 8008578:	9b05      	ldr	r3, [sp, #20]
 800857a:	9807      	ldr	r0, [sp, #28]
 800857c:	1af3      	subs	r3, r6, r3
 800857e:	2f00      	cmp	r7, #0
 8008580:	bf08      	it	eq
 8008582:	462f      	moveq	r7, r5
 8008584:	2d10      	cmp	r5, #16
 8008586:	9306      	str	r3, [sp, #24]
 8008588:	46a8      	mov	r8, r5
 800858a:	bfa8      	it	ge
 800858c:	f04f 0810 	movge.w	r8, #16
 8008590:	f7f7 ffc0 	bl	8000514 <__aeabi_ui2d>
 8008594:	2d09      	cmp	r5, #9
 8008596:	4682      	mov	sl, r0
 8008598:	468b      	mov	fp, r1
 800859a:	dd13      	ble.n	80085c4 <_strtod_l+0x3dc>
 800859c:	4b7b      	ldr	r3, [pc, #492]	; (800878c <_strtod_l+0x5a4>)
 800859e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80085a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80085a6:	f7f8 f82f 	bl	8000608 <__aeabi_dmul>
 80085aa:	4682      	mov	sl, r0
 80085ac:	4648      	mov	r0, r9
 80085ae:	468b      	mov	fp, r1
 80085b0:	f7f7 ffb0 	bl	8000514 <__aeabi_ui2d>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	4650      	mov	r0, sl
 80085ba:	4659      	mov	r1, fp
 80085bc:	f7f7 fe6e 	bl	800029c <__adddf3>
 80085c0:	4682      	mov	sl, r0
 80085c2:	468b      	mov	fp, r1
 80085c4:	2d0f      	cmp	r5, #15
 80085c6:	dc38      	bgt.n	800863a <_strtod_l+0x452>
 80085c8:	9b06      	ldr	r3, [sp, #24]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f43f ae50 	beq.w	8008270 <_strtod_l+0x88>
 80085d0:	dd24      	ble.n	800861c <_strtod_l+0x434>
 80085d2:	2b16      	cmp	r3, #22
 80085d4:	dc0b      	bgt.n	80085ee <_strtod_l+0x406>
 80085d6:	496d      	ldr	r1, [pc, #436]	; (800878c <_strtod_l+0x5a4>)
 80085d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80085dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085e0:	4652      	mov	r2, sl
 80085e2:	465b      	mov	r3, fp
 80085e4:	f7f8 f810 	bl	8000608 <__aeabi_dmul>
 80085e8:	4682      	mov	sl, r0
 80085ea:	468b      	mov	fp, r1
 80085ec:	e640      	b.n	8008270 <_strtod_l+0x88>
 80085ee:	9a06      	ldr	r2, [sp, #24]
 80085f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80085f4:	4293      	cmp	r3, r2
 80085f6:	db20      	blt.n	800863a <_strtod_l+0x452>
 80085f8:	4c64      	ldr	r4, [pc, #400]	; (800878c <_strtod_l+0x5a4>)
 80085fa:	f1c5 050f 	rsb	r5, r5, #15
 80085fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008602:	4652      	mov	r2, sl
 8008604:	465b      	mov	r3, fp
 8008606:	e9d1 0100 	ldrd	r0, r1, [r1]
 800860a:	f7f7 fffd 	bl	8000608 <__aeabi_dmul>
 800860e:	9b06      	ldr	r3, [sp, #24]
 8008610:	1b5d      	subs	r5, r3, r5
 8008612:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008616:	e9d4 2300 	ldrd	r2, r3, [r4]
 800861a:	e7e3      	b.n	80085e4 <_strtod_l+0x3fc>
 800861c:	9b06      	ldr	r3, [sp, #24]
 800861e:	3316      	adds	r3, #22
 8008620:	db0b      	blt.n	800863a <_strtod_l+0x452>
 8008622:	9b05      	ldr	r3, [sp, #20]
 8008624:	1b9e      	subs	r6, r3, r6
 8008626:	4b59      	ldr	r3, [pc, #356]	; (800878c <_strtod_l+0x5a4>)
 8008628:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800862c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008630:	4650      	mov	r0, sl
 8008632:	4659      	mov	r1, fp
 8008634:	f7f8 f912 	bl	800085c <__aeabi_ddiv>
 8008638:	e7d6      	b.n	80085e8 <_strtod_l+0x400>
 800863a:	9b06      	ldr	r3, [sp, #24]
 800863c:	eba5 0808 	sub.w	r8, r5, r8
 8008640:	4498      	add	r8, r3
 8008642:	f1b8 0f00 	cmp.w	r8, #0
 8008646:	dd74      	ble.n	8008732 <_strtod_l+0x54a>
 8008648:	f018 030f 	ands.w	r3, r8, #15
 800864c:	d00a      	beq.n	8008664 <_strtod_l+0x47c>
 800864e:	494f      	ldr	r1, [pc, #316]	; (800878c <_strtod_l+0x5a4>)
 8008650:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008654:	4652      	mov	r2, sl
 8008656:	465b      	mov	r3, fp
 8008658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800865c:	f7f7 ffd4 	bl	8000608 <__aeabi_dmul>
 8008660:	4682      	mov	sl, r0
 8008662:	468b      	mov	fp, r1
 8008664:	f038 080f 	bics.w	r8, r8, #15
 8008668:	d04f      	beq.n	800870a <_strtod_l+0x522>
 800866a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800866e:	dd22      	ble.n	80086b6 <_strtod_l+0x4ce>
 8008670:	2500      	movs	r5, #0
 8008672:	462e      	mov	r6, r5
 8008674:	9507      	str	r5, [sp, #28]
 8008676:	9505      	str	r5, [sp, #20]
 8008678:	2322      	movs	r3, #34	; 0x22
 800867a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008794 <_strtod_l+0x5ac>
 800867e:	6023      	str	r3, [r4, #0]
 8008680:	f04f 0a00 	mov.w	sl, #0
 8008684:	9b07      	ldr	r3, [sp, #28]
 8008686:	2b00      	cmp	r3, #0
 8008688:	f43f adf2 	beq.w	8008270 <_strtod_l+0x88>
 800868c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800868e:	4620      	mov	r0, r4
 8008690:	f002 f8e4 	bl	800a85c <_Bfree>
 8008694:	9905      	ldr	r1, [sp, #20]
 8008696:	4620      	mov	r0, r4
 8008698:	f002 f8e0 	bl	800a85c <_Bfree>
 800869c:	4631      	mov	r1, r6
 800869e:	4620      	mov	r0, r4
 80086a0:	f002 f8dc 	bl	800a85c <_Bfree>
 80086a4:	9907      	ldr	r1, [sp, #28]
 80086a6:	4620      	mov	r0, r4
 80086a8:	f002 f8d8 	bl	800a85c <_Bfree>
 80086ac:	4629      	mov	r1, r5
 80086ae:	4620      	mov	r0, r4
 80086b0:	f002 f8d4 	bl	800a85c <_Bfree>
 80086b4:	e5dc      	b.n	8008270 <_strtod_l+0x88>
 80086b6:	4b36      	ldr	r3, [pc, #216]	; (8008790 <_strtod_l+0x5a8>)
 80086b8:	9304      	str	r3, [sp, #16]
 80086ba:	2300      	movs	r3, #0
 80086bc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80086c0:	4650      	mov	r0, sl
 80086c2:	4659      	mov	r1, fp
 80086c4:	4699      	mov	r9, r3
 80086c6:	f1b8 0f01 	cmp.w	r8, #1
 80086ca:	dc21      	bgt.n	8008710 <_strtod_l+0x528>
 80086cc:	b10b      	cbz	r3, 80086d2 <_strtod_l+0x4ea>
 80086ce:	4682      	mov	sl, r0
 80086d0:	468b      	mov	fp, r1
 80086d2:	4b2f      	ldr	r3, [pc, #188]	; (8008790 <_strtod_l+0x5a8>)
 80086d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80086d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80086dc:	4652      	mov	r2, sl
 80086de:	465b      	mov	r3, fp
 80086e0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80086e4:	f7f7 ff90 	bl	8000608 <__aeabi_dmul>
 80086e8:	4b2a      	ldr	r3, [pc, #168]	; (8008794 <_strtod_l+0x5ac>)
 80086ea:	460a      	mov	r2, r1
 80086ec:	400b      	ands	r3, r1
 80086ee:	492a      	ldr	r1, [pc, #168]	; (8008798 <_strtod_l+0x5b0>)
 80086f0:	428b      	cmp	r3, r1
 80086f2:	4682      	mov	sl, r0
 80086f4:	d8bc      	bhi.n	8008670 <_strtod_l+0x488>
 80086f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80086fa:	428b      	cmp	r3, r1
 80086fc:	bf86      	itte	hi
 80086fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800879c <_strtod_l+0x5b4>
 8008702:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8008706:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800870a:	2300      	movs	r3, #0
 800870c:	9304      	str	r3, [sp, #16]
 800870e:	e084      	b.n	800881a <_strtod_l+0x632>
 8008710:	f018 0f01 	tst.w	r8, #1
 8008714:	d005      	beq.n	8008722 <_strtod_l+0x53a>
 8008716:	9b04      	ldr	r3, [sp, #16]
 8008718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871c:	f7f7 ff74 	bl	8000608 <__aeabi_dmul>
 8008720:	2301      	movs	r3, #1
 8008722:	9a04      	ldr	r2, [sp, #16]
 8008724:	3208      	adds	r2, #8
 8008726:	f109 0901 	add.w	r9, r9, #1
 800872a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800872e:	9204      	str	r2, [sp, #16]
 8008730:	e7c9      	b.n	80086c6 <_strtod_l+0x4de>
 8008732:	d0ea      	beq.n	800870a <_strtod_l+0x522>
 8008734:	f1c8 0800 	rsb	r8, r8, #0
 8008738:	f018 020f 	ands.w	r2, r8, #15
 800873c:	d00a      	beq.n	8008754 <_strtod_l+0x56c>
 800873e:	4b13      	ldr	r3, [pc, #76]	; (800878c <_strtod_l+0x5a4>)
 8008740:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008744:	4650      	mov	r0, sl
 8008746:	4659      	mov	r1, fp
 8008748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874c:	f7f8 f886 	bl	800085c <__aeabi_ddiv>
 8008750:	4682      	mov	sl, r0
 8008752:	468b      	mov	fp, r1
 8008754:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008758:	d0d7      	beq.n	800870a <_strtod_l+0x522>
 800875a:	f1b8 0f1f 	cmp.w	r8, #31
 800875e:	dd1f      	ble.n	80087a0 <_strtod_l+0x5b8>
 8008760:	2500      	movs	r5, #0
 8008762:	462e      	mov	r6, r5
 8008764:	9507      	str	r5, [sp, #28]
 8008766:	9505      	str	r5, [sp, #20]
 8008768:	2322      	movs	r3, #34	; 0x22
 800876a:	f04f 0a00 	mov.w	sl, #0
 800876e:	f04f 0b00 	mov.w	fp, #0
 8008772:	6023      	str	r3, [r4, #0]
 8008774:	e786      	b.n	8008684 <_strtod_l+0x49c>
 8008776:	bf00      	nop
 8008778:	0800c159 	.word	0x0800c159
 800877c:	0800c194 	.word	0x0800c194
 8008780:	0800c151 	.word	0x0800c151
 8008784:	0800c1d3 	.word	0x0800c1d3
 8008788:	0800c4e0 	.word	0x0800c4e0
 800878c:	0800c3c0 	.word	0x0800c3c0
 8008790:	0800c398 	.word	0x0800c398
 8008794:	7ff00000 	.word	0x7ff00000
 8008798:	7ca00000 	.word	0x7ca00000
 800879c:	7fefffff 	.word	0x7fefffff
 80087a0:	f018 0310 	ands.w	r3, r8, #16
 80087a4:	bf18      	it	ne
 80087a6:	236a      	movne	r3, #106	; 0x6a
 80087a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008b58 <_strtod_l+0x970>
 80087ac:	9304      	str	r3, [sp, #16]
 80087ae:	4650      	mov	r0, sl
 80087b0:	4659      	mov	r1, fp
 80087b2:	2300      	movs	r3, #0
 80087b4:	f018 0f01 	tst.w	r8, #1
 80087b8:	d004      	beq.n	80087c4 <_strtod_l+0x5dc>
 80087ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 80087be:	f7f7 ff23 	bl	8000608 <__aeabi_dmul>
 80087c2:	2301      	movs	r3, #1
 80087c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80087c8:	f109 0908 	add.w	r9, r9, #8
 80087cc:	d1f2      	bne.n	80087b4 <_strtod_l+0x5cc>
 80087ce:	b10b      	cbz	r3, 80087d4 <_strtod_l+0x5ec>
 80087d0:	4682      	mov	sl, r0
 80087d2:	468b      	mov	fp, r1
 80087d4:	9b04      	ldr	r3, [sp, #16]
 80087d6:	b1c3      	cbz	r3, 800880a <_strtod_l+0x622>
 80087d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80087dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	4659      	mov	r1, fp
 80087e4:	dd11      	ble.n	800880a <_strtod_l+0x622>
 80087e6:	2b1f      	cmp	r3, #31
 80087e8:	f340 8124 	ble.w	8008a34 <_strtod_l+0x84c>
 80087ec:	2b34      	cmp	r3, #52	; 0x34
 80087ee:	bfde      	ittt	le
 80087f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80087f4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80087f8:	fa03 f202 	lslle.w	r2, r3, r2
 80087fc:	f04f 0a00 	mov.w	sl, #0
 8008800:	bfcc      	ite	gt
 8008802:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008806:	ea02 0b01 	andle.w	fp, r2, r1
 800880a:	2200      	movs	r2, #0
 800880c:	2300      	movs	r3, #0
 800880e:	4650      	mov	r0, sl
 8008810:	4659      	mov	r1, fp
 8008812:	f7f8 f961 	bl	8000ad8 <__aeabi_dcmpeq>
 8008816:	2800      	cmp	r0, #0
 8008818:	d1a2      	bne.n	8008760 <_strtod_l+0x578>
 800881a:	9b07      	ldr	r3, [sp, #28]
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	9908      	ldr	r1, [sp, #32]
 8008820:	462b      	mov	r3, r5
 8008822:	463a      	mov	r2, r7
 8008824:	4620      	mov	r0, r4
 8008826:	f002 f881 	bl	800a92c <__s2b>
 800882a:	9007      	str	r0, [sp, #28]
 800882c:	2800      	cmp	r0, #0
 800882e:	f43f af1f 	beq.w	8008670 <_strtod_l+0x488>
 8008832:	9b05      	ldr	r3, [sp, #20]
 8008834:	1b9e      	subs	r6, r3, r6
 8008836:	9b06      	ldr	r3, [sp, #24]
 8008838:	2b00      	cmp	r3, #0
 800883a:	bfb4      	ite	lt
 800883c:	4633      	movlt	r3, r6
 800883e:	2300      	movge	r3, #0
 8008840:	930c      	str	r3, [sp, #48]	; 0x30
 8008842:	9b06      	ldr	r3, [sp, #24]
 8008844:	2500      	movs	r5, #0
 8008846:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800884a:	9312      	str	r3, [sp, #72]	; 0x48
 800884c:	462e      	mov	r6, r5
 800884e:	9b07      	ldr	r3, [sp, #28]
 8008850:	4620      	mov	r0, r4
 8008852:	6859      	ldr	r1, [r3, #4]
 8008854:	f001 ffc2 	bl	800a7dc <_Balloc>
 8008858:	9005      	str	r0, [sp, #20]
 800885a:	2800      	cmp	r0, #0
 800885c:	f43f af0c 	beq.w	8008678 <_strtod_l+0x490>
 8008860:	9b07      	ldr	r3, [sp, #28]
 8008862:	691a      	ldr	r2, [r3, #16]
 8008864:	3202      	adds	r2, #2
 8008866:	f103 010c 	add.w	r1, r3, #12
 800886a:	0092      	lsls	r2, r2, #2
 800886c:	300c      	adds	r0, #12
 800886e:	f7fe ff7b 	bl	8007768 <memcpy>
 8008872:	ec4b ab10 	vmov	d0, sl, fp
 8008876:	aa1a      	add	r2, sp, #104	; 0x68
 8008878:	a919      	add	r1, sp, #100	; 0x64
 800887a:	4620      	mov	r0, r4
 800887c:	f002 fb9c 	bl	800afb8 <__d2b>
 8008880:	ec4b ab18 	vmov	d8, sl, fp
 8008884:	9018      	str	r0, [sp, #96]	; 0x60
 8008886:	2800      	cmp	r0, #0
 8008888:	f43f aef6 	beq.w	8008678 <_strtod_l+0x490>
 800888c:	2101      	movs	r1, #1
 800888e:	4620      	mov	r0, r4
 8008890:	f002 f8e6 	bl	800aa60 <__i2b>
 8008894:	4606      	mov	r6, r0
 8008896:	2800      	cmp	r0, #0
 8008898:	f43f aeee 	beq.w	8008678 <_strtod_l+0x490>
 800889c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800889e:	9904      	ldr	r1, [sp, #16]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	bfab      	itete	ge
 80088a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80088a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80088a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80088aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80088ae:	bfac      	ite	ge
 80088b0:	eb03 0902 	addge.w	r9, r3, r2
 80088b4:	1ad7      	sublt	r7, r2, r3
 80088b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80088b8:	eba3 0801 	sub.w	r8, r3, r1
 80088bc:	4490      	add	r8, r2
 80088be:	4ba1      	ldr	r3, [pc, #644]	; (8008b44 <_strtod_l+0x95c>)
 80088c0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80088c4:	4598      	cmp	r8, r3
 80088c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80088ca:	f280 80c7 	bge.w	8008a5c <_strtod_l+0x874>
 80088ce:	eba3 0308 	sub.w	r3, r3, r8
 80088d2:	2b1f      	cmp	r3, #31
 80088d4:	eba2 0203 	sub.w	r2, r2, r3
 80088d8:	f04f 0101 	mov.w	r1, #1
 80088dc:	f300 80b1 	bgt.w	8008a42 <_strtod_l+0x85a>
 80088e0:	fa01 f303 	lsl.w	r3, r1, r3
 80088e4:	930d      	str	r3, [sp, #52]	; 0x34
 80088e6:	2300      	movs	r3, #0
 80088e8:	9308      	str	r3, [sp, #32]
 80088ea:	eb09 0802 	add.w	r8, r9, r2
 80088ee:	9b04      	ldr	r3, [sp, #16]
 80088f0:	45c1      	cmp	r9, r8
 80088f2:	4417      	add	r7, r2
 80088f4:	441f      	add	r7, r3
 80088f6:	464b      	mov	r3, r9
 80088f8:	bfa8      	it	ge
 80088fa:	4643      	movge	r3, r8
 80088fc:	42bb      	cmp	r3, r7
 80088fe:	bfa8      	it	ge
 8008900:	463b      	movge	r3, r7
 8008902:	2b00      	cmp	r3, #0
 8008904:	bfc2      	ittt	gt
 8008906:	eba8 0803 	subgt.w	r8, r8, r3
 800890a:	1aff      	subgt	r7, r7, r3
 800890c:	eba9 0903 	subgt.w	r9, r9, r3
 8008910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008912:	2b00      	cmp	r3, #0
 8008914:	dd17      	ble.n	8008946 <_strtod_l+0x75e>
 8008916:	4631      	mov	r1, r6
 8008918:	461a      	mov	r2, r3
 800891a:	4620      	mov	r0, r4
 800891c:	f002 f960 	bl	800abe0 <__pow5mult>
 8008920:	4606      	mov	r6, r0
 8008922:	2800      	cmp	r0, #0
 8008924:	f43f aea8 	beq.w	8008678 <_strtod_l+0x490>
 8008928:	4601      	mov	r1, r0
 800892a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800892c:	4620      	mov	r0, r4
 800892e:	f002 f8ad 	bl	800aa8c <__multiply>
 8008932:	900b      	str	r0, [sp, #44]	; 0x2c
 8008934:	2800      	cmp	r0, #0
 8008936:	f43f ae9f 	beq.w	8008678 <_strtod_l+0x490>
 800893a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800893c:	4620      	mov	r0, r4
 800893e:	f001 ff8d 	bl	800a85c <_Bfree>
 8008942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008944:	9318      	str	r3, [sp, #96]	; 0x60
 8008946:	f1b8 0f00 	cmp.w	r8, #0
 800894a:	f300 808c 	bgt.w	8008a66 <_strtod_l+0x87e>
 800894e:	9b06      	ldr	r3, [sp, #24]
 8008950:	2b00      	cmp	r3, #0
 8008952:	dd08      	ble.n	8008966 <_strtod_l+0x77e>
 8008954:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008956:	9905      	ldr	r1, [sp, #20]
 8008958:	4620      	mov	r0, r4
 800895a:	f002 f941 	bl	800abe0 <__pow5mult>
 800895e:	9005      	str	r0, [sp, #20]
 8008960:	2800      	cmp	r0, #0
 8008962:	f43f ae89 	beq.w	8008678 <_strtod_l+0x490>
 8008966:	2f00      	cmp	r7, #0
 8008968:	dd08      	ble.n	800897c <_strtod_l+0x794>
 800896a:	9905      	ldr	r1, [sp, #20]
 800896c:	463a      	mov	r2, r7
 800896e:	4620      	mov	r0, r4
 8008970:	f002 f990 	bl	800ac94 <__lshift>
 8008974:	9005      	str	r0, [sp, #20]
 8008976:	2800      	cmp	r0, #0
 8008978:	f43f ae7e 	beq.w	8008678 <_strtod_l+0x490>
 800897c:	f1b9 0f00 	cmp.w	r9, #0
 8008980:	dd08      	ble.n	8008994 <_strtod_l+0x7ac>
 8008982:	4631      	mov	r1, r6
 8008984:	464a      	mov	r2, r9
 8008986:	4620      	mov	r0, r4
 8008988:	f002 f984 	bl	800ac94 <__lshift>
 800898c:	4606      	mov	r6, r0
 800898e:	2800      	cmp	r0, #0
 8008990:	f43f ae72 	beq.w	8008678 <_strtod_l+0x490>
 8008994:	9a05      	ldr	r2, [sp, #20]
 8008996:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008998:	4620      	mov	r0, r4
 800899a:	f002 fa07 	bl	800adac <__mdiff>
 800899e:	4605      	mov	r5, r0
 80089a0:	2800      	cmp	r0, #0
 80089a2:	f43f ae69 	beq.w	8008678 <_strtod_l+0x490>
 80089a6:	68c3      	ldr	r3, [r0, #12]
 80089a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80089aa:	2300      	movs	r3, #0
 80089ac:	60c3      	str	r3, [r0, #12]
 80089ae:	4631      	mov	r1, r6
 80089b0:	f002 f9e0 	bl	800ad74 <__mcmp>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	da60      	bge.n	8008a7a <_strtod_l+0x892>
 80089b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ba:	ea53 030a 	orrs.w	r3, r3, sl
 80089be:	f040 8082 	bne.w	8008ac6 <_strtod_l+0x8de>
 80089c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d17d      	bne.n	8008ac6 <_strtod_l+0x8de>
 80089ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089ce:	0d1b      	lsrs	r3, r3, #20
 80089d0:	051b      	lsls	r3, r3, #20
 80089d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80089d6:	d976      	bls.n	8008ac6 <_strtod_l+0x8de>
 80089d8:	696b      	ldr	r3, [r5, #20]
 80089da:	b913      	cbnz	r3, 80089e2 <_strtod_l+0x7fa>
 80089dc:	692b      	ldr	r3, [r5, #16]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	dd71      	ble.n	8008ac6 <_strtod_l+0x8de>
 80089e2:	4629      	mov	r1, r5
 80089e4:	2201      	movs	r2, #1
 80089e6:	4620      	mov	r0, r4
 80089e8:	f002 f954 	bl	800ac94 <__lshift>
 80089ec:	4631      	mov	r1, r6
 80089ee:	4605      	mov	r5, r0
 80089f0:	f002 f9c0 	bl	800ad74 <__mcmp>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	dd66      	ble.n	8008ac6 <_strtod_l+0x8de>
 80089f8:	9904      	ldr	r1, [sp, #16]
 80089fa:	4a53      	ldr	r2, [pc, #332]	; (8008b48 <_strtod_l+0x960>)
 80089fc:	465b      	mov	r3, fp
 80089fe:	2900      	cmp	r1, #0
 8008a00:	f000 8081 	beq.w	8008b06 <_strtod_l+0x91e>
 8008a04:	ea02 010b 	and.w	r1, r2, fp
 8008a08:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008a0c:	dc7b      	bgt.n	8008b06 <_strtod_l+0x91e>
 8008a0e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008a12:	f77f aea9 	ble.w	8008768 <_strtod_l+0x580>
 8008a16:	4b4d      	ldr	r3, [pc, #308]	; (8008b4c <_strtod_l+0x964>)
 8008a18:	4650      	mov	r0, sl
 8008a1a:	4659      	mov	r1, fp
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f7f7 fdf3 	bl	8000608 <__aeabi_dmul>
 8008a22:	460b      	mov	r3, r1
 8008a24:	4303      	orrs	r3, r0
 8008a26:	bf08      	it	eq
 8008a28:	2322      	moveq	r3, #34	; 0x22
 8008a2a:	4682      	mov	sl, r0
 8008a2c:	468b      	mov	fp, r1
 8008a2e:	bf08      	it	eq
 8008a30:	6023      	streq	r3, [r4, #0]
 8008a32:	e62b      	b.n	800868c <_strtod_l+0x4a4>
 8008a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a38:	fa02 f303 	lsl.w	r3, r2, r3
 8008a3c:	ea03 0a0a 	and.w	sl, r3, sl
 8008a40:	e6e3      	b.n	800880a <_strtod_l+0x622>
 8008a42:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008a46:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008a4a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008a4e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008a52:	fa01 f308 	lsl.w	r3, r1, r8
 8008a56:	9308      	str	r3, [sp, #32]
 8008a58:	910d      	str	r1, [sp, #52]	; 0x34
 8008a5a:	e746      	b.n	80088ea <_strtod_l+0x702>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	9308      	str	r3, [sp, #32]
 8008a60:	2301      	movs	r3, #1
 8008a62:	930d      	str	r3, [sp, #52]	; 0x34
 8008a64:	e741      	b.n	80088ea <_strtod_l+0x702>
 8008a66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008a68:	4642      	mov	r2, r8
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f002 f912 	bl	800ac94 <__lshift>
 8008a70:	9018      	str	r0, [sp, #96]	; 0x60
 8008a72:	2800      	cmp	r0, #0
 8008a74:	f47f af6b 	bne.w	800894e <_strtod_l+0x766>
 8008a78:	e5fe      	b.n	8008678 <_strtod_l+0x490>
 8008a7a:	465f      	mov	r7, fp
 8008a7c:	d16e      	bne.n	8008b5c <_strtod_l+0x974>
 8008a7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a84:	b342      	cbz	r2, 8008ad8 <_strtod_l+0x8f0>
 8008a86:	4a32      	ldr	r2, [pc, #200]	; (8008b50 <_strtod_l+0x968>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d128      	bne.n	8008ade <_strtod_l+0x8f6>
 8008a8c:	9b04      	ldr	r3, [sp, #16]
 8008a8e:	4651      	mov	r1, sl
 8008a90:	b1eb      	cbz	r3, 8008ace <_strtod_l+0x8e6>
 8008a92:	4b2d      	ldr	r3, [pc, #180]	; (8008b48 <_strtod_l+0x960>)
 8008a94:	403b      	ands	r3, r7
 8008a96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008a9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a9e:	d819      	bhi.n	8008ad4 <_strtod_l+0x8ec>
 8008aa0:	0d1b      	lsrs	r3, r3, #20
 8008aa2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aaa:	4299      	cmp	r1, r3
 8008aac:	d117      	bne.n	8008ade <_strtod_l+0x8f6>
 8008aae:	4b29      	ldr	r3, [pc, #164]	; (8008b54 <_strtod_l+0x96c>)
 8008ab0:	429f      	cmp	r7, r3
 8008ab2:	d102      	bne.n	8008aba <_strtod_l+0x8d2>
 8008ab4:	3101      	adds	r1, #1
 8008ab6:	f43f addf 	beq.w	8008678 <_strtod_l+0x490>
 8008aba:	4b23      	ldr	r3, [pc, #140]	; (8008b48 <_strtod_l+0x960>)
 8008abc:	403b      	ands	r3, r7
 8008abe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008ac2:	f04f 0a00 	mov.w	sl, #0
 8008ac6:	9b04      	ldr	r3, [sp, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1a4      	bne.n	8008a16 <_strtod_l+0x82e>
 8008acc:	e5de      	b.n	800868c <_strtod_l+0x4a4>
 8008ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ad2:	e7ea      	b.n	8008aaa <_strtod_l+0x8c2>
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	e7e8      	b.n	8008aaa <_strtod_l+0x8c2>
 8008ad8:	ea53 030a 	orrs.w	r3, r3, sl
 8008adc:	d08c      	beq.n	80089f8 <_strtod_l+0x810>
 8008ade:	9b08      	ldr	r3, [sp, #32]
 8008ae0:	b1db      	cbz	r3, 8008b1a <_strtod_l+0x932>
 8008ae2:	423b      	tst	r3, r7
 8008ae4:	d0ef      	beq.n	8008ac6 <_strtod_l+0x8de>
 8008ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ae8:	9a04      	ldr	r2, [sp, #16]
 8008aea:	4650      	mov	r0, sl
 8008aec:	4659      	mov	r1, fp
 8008aee:	b1c3      	cbz	r3, 8008b22 <_strtod_l+0x93a>
 8008af0:	f7ff fb5c 	bl	80081ac <sulp>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	ec51 0b18 	vmov	r0, r1, d8
 8008afc:	f7f7 fbce 	bl	800029c <__adddf3>
 8008b00:	4682      	mov	sl, r0
 8008b02:	468b      	mov	fp, r1
 8008b04:	e7df      	b.n	8008ac6 <_strtod_l+0x8de>
 8008b06:	4013      	ands	r3, r2
 8008b08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008b0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008b10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008b14:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008b18:	e7d5      	b.n	8008ac6 <_strtod_l+0x8de>
 8008b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b1c:	ea13 0f0a 	tst.w	r3, sl
 8008b20:	e7e0      	b.n	8008ae4 <_strtod_l+0x8fc>
 8008b22:	f7ff fb43 	bl	80081ac <sulp>
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	ec51 0b18 	vmov	r0, r1, d8
 8008b2e:	f7f7 fbb3 	bl	8000298 <__aeabi_dsub>
 8008b32:	2200      	movs	r2, #0
 8008b34:	2300      	movs	r3, #0
 8008b36:	4682      	mov	sl, r0
 8008b38:	468b      	mov	fp, r1
 8008b3a:	f7f7 ffcd 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d0c1      	beq.n	8008ac6 <_strtod_l+0x8de>
 8008b42:	e611      	b.n	8008768 <_strtod_l+0x580>
 8008b44:	fffffc02 	.word	0xfffffc02
 8008b48:	7ff00000 	.word	0x7ff00000
 8008b4c:	39500000 	.word	0x39500000
 8008b50:	000fffff 	.word	0x000fffff
 8008b54:	7fefffff 	.word	0x7fefffff
 8008b58:	0800c1a8 	.word	0x0800c1a8
 8008b5c:	4631      	mov	r1, r6
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f002 fa86 	bl	800b070 <__ratio>
 8008b64:	ec59 8b10 	vmov	r8, r9, d0
 8008b68:	ee10 0a10 	vmov	r0, s0
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b72:	4649      	mov	r1, r9
 8008b74:	f7f7 ffc4 	bl	8000b00 <__aeabi_dcmple>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d07a      	beq.n	8008c72 <_strtod_l+0xa8a>
 8008b7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d04a      	beq.n	8008c18 <_strtod_l+0xa30>
 8008b82:	4b95      	ldr	r3, [pc, #596]	; (8008dd8 <_strtod_l+0xbf0>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008b8a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008dd8 <_strtod_l+0xbf0>
 8008b8e:	f04f 0800 	mov.w	r8, #0
 8008b92:	4b92      	ldr	r3, [pc, #584]	; (8008ddc <_strtod_l+0xbf4>)
 8008b94:	403b      	ands	r3, r7
 8008b96:	930d      	str	r3, [sp, #52]	; 0x34
 8008b98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b9a:	4b91      	ldr	r3, [pc, #580]	; (8008de0 <_strtod_l+0xbf8>)
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	f040 80b0 	bne.w	8008d02 <_strtod_l+0xb1a>
 8008ba2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ba6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008baa:	ec4b ab10 	vmov	d0, sl, fp
 8008bae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008bb2:	f002 f985 	bl	800aec0 <__ulp>
 8008bb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008bba:	ec53 2b10 	vmov	r2, r3, d0
 8008bbe:	f7f7 fd23 	bl	8000608 <__aeabi_dmul>
 8008bc2:	4652      	mov	r2, sl
 8008bc4:	465b      	mov	r3, fp
 8008bc6:	f7f7 fb69 	bl	800029c <__adddf3>
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4983      	ldr	r1, [pc, #524]	; (8008ddc <_strtod_l+0xbf4>)
 8008bce:	4a85      	ldr	r2, [pc, #532]	; (8008de4 <_strtod_l+0xbfc>)
 8008bd0:	4019      	ands	r1, r3
 8008bd2:	4291      	cmp	r1, r2
 8008bd4:	4682      	mov	sl, r0
 8008bd6:	d960      	bls.n	8008c9a <_strtod_l+0xab2>
 8008bd8:	ee18 3a90 	vmov	r3, s17
 8008bdc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d104      	bne.n	8008bee <_strtod_l+0xa06>
 8008be4:	ee18 3a10 	vmov	r3, s16
 8008be8:	3301      	adds	r3, #1
 8008bea:	f43f ad45 	beq.w	8008678 <_strtod_l+0x490>
 8008bee:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008df0 <_strtod_l+0xc08>
 8008bf2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008bf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f001 fe2f 	bl	800a85c <_Bfree>
 8008bfe:	9905      	ldr	r1, [sp, #20]
 8008c00:	4620      	mov	r0, r4
 8008c02:	f001 fe2b 	bl	800a85c <_Bfree>
 8008c06:	4631      	mov	r1, r6
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f001 fe27 	bl	800a85c <_Bfree>
 8008c0e:	4629      	mov	r1, r5
 8008c10:	4620      	mov	r0, r4
 8008c12:	f001 fe23 	bl	800a85c <_Bfree>
 8008c16:	e61a      	b.n	800884e <_strtod_l+0x666>
 8008c18:	f1ba 0f00 	cmp.w	sl, #0
 8008c1c:	d11b      	bne.n	8008c56 <_strtod_l+0xa6e>
 8008c1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c22:	b9f3      	cbnz	r3, 8008c62 <_strtod_l+0xa7a>
 8008c24:	4b6c      	ldr	r3, [pc, #432]	; (8008dd8 <_strtod_l+0xbf0>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	4640      	mov	r0, r8
 8008c2a:	4649      	mov	r1, r9
 8008c2c:	f7f7 ff5e 	bl	8000aec <__aeabi_dcmplt>
 8008c30:	b9d0      	cbnz	r0, 8008c68 <_strtod_l+0xa80>
 8008c32:	4640      	mov	r0, r8
 8008c34:	4649      	mov	r1, r9
 8008c36:	4b6c      	ldr	r3, [pc, #432]	; (8008de8 <_strtod_l+0xc00>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f7f7 fce5 	bl	8000608 <__aeabi_dmul>
 8008c3e:	4680      	mov	r8, r0
 8008c40:	4689      	mov	r9, r1
 8008c42:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008c46:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008c4a:	9315      	str	r3, [sp, #84]	; 0x54
 8008c4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008c50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008c54:	e79d      	b.n	8008b92 <_strtod_l+0x9aa>
 8008c56:	f1ba 0f01 	cmp.w	sl, #1
 8008c5a:	d102      	bne.n	8008c62 <_strtod_l+0xa7a>
 8008c5c:	2f00      	cmp	r7, #0
 8008c5e:	f43f ad83 	beq.w	8008768 <_strtod_l+0x580>
 8008c62:	4b62      	ldr	r3, [pc, #392]	; (8008dec <_strtod_l+0xc04>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	e78e      	b.n	8008b86 <_strtod_l+0x99e>
 8008c68:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008de8 <_strtod_l+0xc00>
 8008c6c:	f04f 0800 	mov.w	r8, #0
 8008c70:	e7e7      	b.n	8008c42 <_strtod_l+0xa5a>
 8008c72:	4b5d      	ldr	r3, [pc, #372]	; (8008de8 <_strtod_l+0xc00>)
 8008c74:	4640      	mov	r0, r8
 8008c76:	4649      	mov	r1, r9
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f7f7 fcc5 	bl	8000608 <__aeabi_dmul>
 8008c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c80:	4680      	mov	r8, r0
 8008c82:	4689      	mov	r9, r1
 8008c84:	b933      	cbnz	r3, 8008c94 <_strtod_l+0xaac>
 8008c86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c8a:	900e      	str	r0, [sp, #56]	; 0x38
 8008c8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008c92:	e7dd      	b.n	8008c50 <_strtod_l+0xa68>
 8008c94:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008c98:	e7f9      	b.n	8008c8e <_strtod_l+0xaa6>
 8008c9a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008c9e:	9b04      	ldr	r3, [sp, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1a8      	bne.n	8008bf6 <_strtod_l+0xa0e>
 8008ca4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ca8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008caa:	0d1b      	lsrs	r3, r3, #20
 8008cac:	051b      	lsls	r3, r3, #20
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d1a1      	bne.n	8008bf6 <_strtod_l+0xa0e>
 8008cb2:	4640      	mov	r0, r8
 8008cb4:	4649      	mov	r1, r9
 8008cb6:	f7f8 f807 	bl	8000cc8 <__aeabi_d2lz>
 8008cba:	f7f7 fc77 	bl	80005ac <__aeabi_l2d>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	4640      	mov	r0, r8
 8008cc4:	4649      	mov	r1, r9
 8008cc6:	f7f7 fae7 	bl	8000298 <__aeabi_dsub>
 8008cca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ccc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cd0:	ea43 030a 	orr.w	r3, r3, sl
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	4680      	mov	r8, r0
 8008cd8:	4689      	mov	r9, r1
 8008cda:	d055      	beq.n	8008d88 <_strtod_l+0xba0>
 8008cdc:	a336      	add	r3, pc, #216	; (adr r3, 8008db8 <_strtod_l+0xbd0>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	f7f7 ff03 	bl	8000aec <__aeabi_dcmplt>
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	f47f acd0 	bne.w	800868c <_strtod_l+0x4a4>
 8008cec:	a334      	add	r3, pc, #208	; (adr r3, 8008dc0 <_strtod_l+0xbd8>)
 8008cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf2:	4640      	mov	r0, r8
 8008cf4:	4649      	mov	r1, r9
 8008cf6:	f7f7 ff17 	bl	8000b28 <__aeabi_dcmpgt>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	f43f af7b 	beq.w	8008bf6 <_strtod_l+0xa0e>
 8008d00:	e4c4      	b.n	800868c <_strtod_l+0x4a4>
 8008d02:	9b04      	ldr	r3, [sp, #16]
 8008d04:	b333      	cbz	r3, 8008d54 <_strtod_l+0xb6c>
 8008d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d08:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d0c:	d822      	bhi.n	8008d54 <_strtod_l+0xb6c>
 8008d0e:	a32e      	add	r3, pc, #184	; (adr r3, 8008dc8 <_strtod_l+0xbe0>)
 8008d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d14:	4640      	mov	r0, r8
 8008d16:	4649      	mov	r1, r9
 8008d18:	f7f7 fef2 	bl	8000b00 <__aeabi_dcmple>
 8008d1c:	b1a0      	cbz	r0, 8008d48 <_strtod_l+0xb60>
 8008d1e:	4649      	mov	r1, r9
 8008d20:	4640      	mov	r0, r8
 8008d22:	f7f7 ff49 	bl	8000bb8 <__aeabi_d2uiz>
 8008d26:	2801      	cmp	r0, #1
 8008d28:	bf38      	it	cc
 8008d2a:	2001      	movcc	r0, #1
 8008d2c:	f7f7 fbf2 	bl	8000514 <__aeabi_ui2d>
 8008d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d32:	4680      	mov	r8, r0
 8008d34:	4689      	mov	r9, r1
 8008d36:	bb23      	cbnz	r3, 8008d82 <_strtod_l+0xb9a>
 8008d38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d3c:	9010      	str	r0, [sp, #64]	; 0x40
 8008d3e:	9311      	str	r3, [sp, #68]	; 0x44
 8008d40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d44:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d4c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008d50:	1a9b      	subs	r3, r3, r2
 8008d52:	9309      	str	r3, [sp, #36]	; 0x24
 8008d54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d58:	eeb0 0a48 	vmov.f32	s0, s16
 8008d5c:	eef0 0a68 	vmov.f32	s1, s17
 8008d60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008d64:	f002 f8ac 	bl	800aec0 <__ulp>
 8008d68:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d6c:	ec53 2b10 	vmov	r2, r3, d0
 8008d70:	f7f7 fc4a 	bl	8000608 <__aeabi_dmul>
 8008d74:	ec53 2b18 	vmov	r2, r3, d8
 8008d78:	f7f7 fa90 	bl	800029c <__adddf3>
 8008d7c:	4682      	mov	sl, r0
 8008d7e:	468b      	mov	fp, r1
 8008d80:	e78d      	b.n	8008c9e <_strtod_l+0xab6>
 8008d82:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008d86:	e7db      	b.n	8008d40 <_strtod_l+0xb58>
 8008d88:	a311      	add	r3, pc, #68	; (adr r3, 8008dd0 <_strtod_l+0xbe8>)
 8008d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8e:	f7f7 fead 	bl	8000aec <__aeabi_dcmplt>
 8008d92:	e7b2      	b.n	8008cfa <_strtod_l+0xb12>
 8008d94:	2300      	movs	r3, #0
 8008d96:	930a      	str	r3, [sp, #40]	; 0x28
 8008d98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008d9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d9c:	6013      	str	r3, [r2, #0]
 8008d9e:	f7ff ba6b 	b.w	8008278 <_strtod_l+0x90>
 8008da2:	2a65      	cmp	r2, #101	; 0x65
 8008da4:	f43f ab5f 	beq.w	8008466 <_strtod_l+0x27e>
 8008da8:	2a45      	cmp	r2, #69	; 0x45
 8008daa:	f43f ab5c 	beq.w	8008466 <_strtod_l+0x27e>
 8008dae:	2301      	movs	r3, #1
 8008db0:	f7ff bb94 	b.w	80084dc <_strtod_l+0x2f4>
 8008db4:	f3af 8000 	nop.w
 8008db8:	94a03595 	.word	0x94a03595
 8008dbc:	3fdfffff 	.word	0x3fdfffff
 8008dc0:	35afe535 	.word	0x35afe535
 8008dc4:	3fe00000 	.word	0x3fe00000
 8008dc8:	ffc00000 	.word	0xffc00000
 8008dcc:	41dfffff 	.word	0x41dfffff
 8008dd0:	94a03595 	.word	0x94a03595
 8008dd4:	3fcfffff 	.word	0x3fcfffff
 8008dd8:	3ff00000 	.word	0x3ff00000
 8008ddc:	7ff00000 	.word	0x7ff00000
 8008de0:	7fe00000 	.word	0x7fe00000
 8008de4:	7c9fffff 	.word	0x7c9fffff
 8008de8:	3fe00000 	.word	0x3fe00000
 8008dec:	bff00000 	.word	0xbff00000
 8008df0:	7fefffff 	.word	0x7fefffff

08008df4 <strtod>:
 8008df4:	460a      	mov	r2, r1
 8008df6:	4601      	mov	r1, r0
 8008df8:	4802      	ldr	r0, [pc, #8]	; (8008e04 <strtod+0x10>)
 8008dfa:	4b03      	ldr	r3, [pc, #12]	; (8008e08 <strtod+0x14>)
 8008dfc:	6800      	ldr	r0, [r0, #0]
 8008dfe:	f7ff b9f3 	b.w	80081e8 <_strtod_l>
 8008e02:	bf00      	nop
 8008e04:	2000000c 	.word	0x2000000c
 8008e08:	20000074 	.word	0x20000074

08008e0c <__swbuf_r>:
 8008e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0e:	460e      	mov	r6, r1
 8008e10:	4614      	mov	r4, r2
 8008e12:	4605      	mov	r5, r0
 8008e14:	b118      	cbz	r0, 8008e1e <__swbuf_r+0x12>
 8008e16:	6983      	ldr	r3, [r0, #24]
 8008e18:	b90b      	cbnz	r3, 8008e1e <__swbuf_r+0x12>
 8008e1a:	f001 f84d 	bl	8009eb8 <__sinit>
 8008e1e:	4b21      	ldr	r3, [pc, #132]	; (8008ea4 <__swbuf_r+0x98>)
 8008e20:	429c      	cmp	r4, r3
 8008e22:	d12b      	bne.n	8008e7c <__swbuf_r+0x70>
 8008e24:	686c      	ldr	r4, [r5, #4]
 8008e26:	69a3      	ldr	r3, [r4, #24]
 8008e28:	60a3      	str	r3, [r4, #8]
 8008e2a:	89a3      	ldrh	r3, [r4, #12]
 8008e2c:	071a      	lsls	r2, r3, #28
 8008e2e:	d52f      	bpl.n	8008e90 <__swbuf_r+0x84>
 8008e30:	6923      	ldr	r3, [r4, #16]
 8008e32:	b36b      	cbz	r3, 8008e90 <__swbuf_r+0x84>
 8008e34:	6923      	ldr	r3, [r4, #16]
 8008e36:	6820      	ldr	r0, [r4, #0]
 8008e38:	1ac0      	subs	r0, r0, r3
 8008e3a:	6963      	ldr	r3, [r4, #20]
 8008e3c:	b2f6      	uxtb	r6, r6
 8008e3e:	4283      	cmp	r3, r0
 8008e40:	4637      	mov	r7, r6
 8008e42:	dc04      	bgt.n	8008e4e <__swbuf_r+0x42>
 8008e44:	4621      	mov	r1, r4
 8008e46:	4628      	mov	r0, r5
 8008e48:	f000 ffa2 	bl	8009d90 <_fflush_r>
 8008e4c:	bb30      	cbnz	r0, 8008e9c <__swbuf_r+0x90>
 8008e4e:	68a3      	ldr	r3, [r4, #8]
 8008e50:	3b01      	subs	r3, #1
 8008e52:	60a3      	str	r3, [r4, #8]
 8008e54:	6823      	ldr	r3, [r4, #0]
 8008e56:	1c5a      	adds	r2, r3, #1
 8008e58:	6022      	str	r2, [r4, #0]
 8008e5a:	701e      	strb	r6, [r3, #0]
 8008e5c:	6963      	ldr	r3, [r4, #20]
 8008e5e:	3001      	adds	r0, #1
 8008e60:	4283      	cmp	r3, r0
 8008e62:	d004      	beq.n	8008e6e <__swbuf_r+0x62>
 8008e64:	89a3      	ldrh	r3, [r4, #12]
 8008e66:	07db      	lsls	r3, r3, #31
 8008e68:	d506      	bpl.n	8008e78 <__swbuf_r+0x6c>
 8008e6a:	2e0a      	cmp	r6, #10
 8008e6c:	d104      	bne.n	8008e78 <__swbuf_r+0x6c>
 8008e6e:	4621      	mov	r1, r4
 8008e70:	4628      	mov	r0, r5
 8008e72:	f000 ff8d 	bl	8009d90 <_fflush_r>
 8008e76:	b988      	cbnz	r0, 8008e9c <__swbuf_r+0x90>
 8008e78:	4638      	mov	r0, r7
 8008e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ea8 <__swbuf_r+0x9c>)
 8008e7e:	429c      	cmp	r4, r3
 8008e80:	d101      	bne.n	8008e86 <__swbuf_r+0x7a>
 8008e82:	68ac      	ldr	r4, [r5, #8]
 8008e84:	e7cf      	b.n	8008e26 <__swbuf_r+0x1a>
 8008e86:	4b09      	ldr	r3, [pc, #36]	; (8008eac <__swbuf_r+0xa0>)
 8008e88:	429c      	cmp	r4, r3
 8008e8a:	bf08      	it	eq
 8008e8c:	68ec      	ldreq	r4, [r5, #12]
 8008e8e:	e7ca      	b.n	8008e26 <__swbuf_r+0x1a>
 8008e90:	4621      	mov	r1, r4
 8008e92:	4628      	mov	r0, r5
 8008e94:	f000 f80c 	bl	8008eb0 <__swsetup_r>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d0cb      	beq.n	8008e34 <__swbuf_r+0x28>
 8008e9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008ea0:	e7ea      	b.n	8008e78 <__swbuf_r+0x6c>
 8008ea2:	bf00      	nop
 8008ea4:	0800c280 	.word	0x0800c280
 8008ea8:	0800c2a0 	.word	0x0800c2a0
 8008eac:	0800c260 	.word	0x0800c260

08008eb0 <__swsetup_r>:
 8008eb0:	4b32      	ldr	r3, [pc, #200]	; (8008f7c <__swsetup_r+0xcc>)
 8008eb2:	b570      	push	{r4, r5, r6, lr}
 8008eb4:	681d      	ldr	r5, [r3, #0]
 8008eb6:	4606      	mov	r6, r0
 8008eb8:	460c      	mov	r4, r1
 8008eba:	b125      	cbz	r5, 8008ec6 <__swsetup_r+0x16>
 8008ebc:	69ab      	ldr	r3, [r5, #24]
 8008ebe:	b913      	cbnz	r3, 8008ec6 <__swsetup_r+0x16>
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	f000 fff9 	bl	8009eb8 <__sinit>
 8008ec6:	4b2e      	ldr	r3, [pc, #184]	; (8008f80 <__swsetup_r+0xd0>)
 8008ec8:	429c      	cmp	r4, r3
 8008eca:	d10f      	bne.n	8008eec <__swsetup_r+0x3c>
 8008ecc:	686c      	ldr	r4, [r5, #4]
 8008ece:	89a3      	ldrh	r3, [r4, #12]
 8008ed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ed4:	0719      	lsls	r1, r3, #28
 8008ed6:	d42c      	bmi.n	8008f32 <__swsetup_r+0x82>
 8008ed8:	06dd      	lsls	r5, r3, #27
 8008eda:	d411      	bmi.n	8008f00 <__swsetup_r+0x50>
 8008edc:	2309      	movs	r3, #9
 8008ede:	6033      	str	r3, [r6, #0]
 8008ee0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ee4:	81a3      	strh	r3, [r4, #12]
 8008ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eea:	e03e      	b.n	8008f6a <__swsetup_r+0xba>
 8008eec:	4b25      	ldr	r3, [pc, #148]	; (8008f84 <__swsetup_r+0xd4>)
 8008eee:	429c      	cmp	r4, r3
 8008ef0:	d101      	bne.n	8008ef6 <__swsetup_r+0x46>
 8008ef2:	68ac      	ldr	r4, [r5, #8]
 8008ef4:	e7eb      	b.n	8008ece <__swsetup_r+0x1e>
 8008ef6:	4b24      	ldr	r3, [pc, #144]	; (8008f88 <__swsetup_r+0xd8>)
 8008ef8:	429c      	cmp	r4, r3
 8008efa:	bf08      	it	eq
 8008efc:	68ec      	ldreq	r4, [r5, #12]
 8008efe:	e7e6      	b.n	8008ece <__swsetup_r+0x1e>
 8008f00:	0758      	lsls	r0, r3, #29
 8008f02:	d512      	bpl.n	8008f2a <__swsetup_r+0x7a>
 8008f04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f06:	b141      	cbz	r1, 8008f1a <__swsetup_r+0x6a>
 8008f08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f0c:	4299      	cmp	r1, r3
 8008f0e:	d002      	beq.n	8008f16 <__swsetup_r+0x66>
 8008f10:	4630      	mov	r0, r6
 8008f12:	f002 f93b 	bl	800b18c <_free_r>
 8008f16:	2300      	movs	r3, #0
 8008f18:	6363      	str	r3, [r4, #52]	; 0x34
 8008f1a:	89a3      	ldrh	r3, [r4, #12]
 8008f1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f20:	81a3      	strh	r3, [r4, #12]
 8008f22:	2300      	movs	r3, #0
 8008f24:	6063      	str	r3, [r4, #4]
 8008f26:	6923      	ldr	r3, [r4, #16]
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	89a3      	ldrh	r3, [r4, #12]
 8008f2c:	f043 0308 	orr.w	r3, r3, #8
 8008f30:	81a3      	strh	r3, [r4, #12]
 8008f32:	6923      	ldr	r3, [r4, #16]
 8008f34:	b94b      	cbnz	r3, 8008f4a <__swsetup_r+0x9a>
 8008f36:	89a3      	ldrh	r3, [r4, #12]
 8008f38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f40:	d003      	beq.n	8008f4a <__swsetup_r+0x9a>
 8008f42:	4621      	mov	r1, r4
 8008f44:	4630      	mov	r0, r6
 8008f46:	f001 fbef 	bl	800a728 <__smakebuf_r>
 8008f4a:	89a0      	ldrh	r0, [r4, #12]
 8008f4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f50:	f010 0301 	ands.w	r3, r0, #1
 8008f54:	d00a      	beq.n	8008f6c <__swsetup_r+0xbc>
 8008f56:	2300      	movs	r3, #0
 8008f58:	60a3      	str	r3, [r4, #8]
 8008f5a:	6963      	ldr	r3, [r4, #20]
 8008f5c:	425b      	negs	r3, r3
 8008f5e:	61a3      	str	r3, [r4, #24]
 8008f60:	6923      	ldr	r3, [r4, #16]
 8008f62:	b943      	cbnz	r3, 8008f76 <__swsetup_r+0xc6>
 8008f64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f68:	d1ba      	bne.n	8008ee0 <__swsetup_r+0x30>
 8008f6a:	bd70      	pop	{r4, r5, r6, pc}
 8008f6c:	0781      	lsls	r1, r0, #30
 8008f6e:	bf58      	it	pl
 8008f70:	6963      	ldrpl	r3, [r4, #20]
 8008f72:	60a3      	str	r3, [r4, #8]
 8008f74:	e7f4      	b.n	8008f60 <__swsetup_r+0xb0>
 8008f76:	2000      	movs	r0, #0
 8008f78:	e7f7      	b.n	8008f6a <__swsetup_r+0xba>
 8008f7a:	bf00      	nop
 8008f7c:	2000000c 	.word	0x2000000c
 8008f80:	0800c280 	.word	0x0800c280
 8008f84:	0800c2a0 	.word	0x0800c2a0
 8008f88:	0800c260 	.word	0x0800c260

08008f8c <quorem>:
 8008f8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f90:	6903      	ldr	r3, [r0, #16]
 8008f92:	690c      	ldr	r4, [r1, #16]
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	4607      	mov	r7, r0
 8008f98:	f2c0 8081 	blt.w	800909e <quorem+0x112>
 8008f9c:	3c01      	subs	r4, #1
 8008f9e:	f101 0814 	add.w	r8, r1, #20
 8008fa2:	f100 0514 	add.w	r5, r0, #20
 8008fa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008faa:	9301      	str	r3, [sp, #4]
 8008fac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008fbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008fc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fc4:	d331      	bcc.n	800902a <quorem+0x9e>
 8008fc6:	f04f 0e00 	mov.w	lr, #0
 8008fca:	4640      	mov	r0, r8
 8008fcc:	46ac      	mov	ip, r5
 8008fce:	46f2      	mov	sl, lr
 8008fd0:	f850 2b04 	ldr.w	r2, [r0], #4
 8008fd4:	b293      	uxth	r3, r2
 8008fd6:	fb06 e303 	mla	r3, r6, r3, lr
 8008fda:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	ebaa 0303 	sub.w	r3, sl, r3
 8008fe4:	f8dc a000 	ldr.w	sl, [ip]
 8008fe8:	0c12      	lsrs	r2, r2, #16
 8008fea:	fa13 f38a 	uxtah	r3, r3, sl
 8008fee:	fb06 e202 	mla	r2, r6, r2, lr
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	9b00      	ldr	r3, [sp, #0]
 8008ff6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ffa:	b292      	uxth	r2, r2
 8008ffc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009000:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009004:	f8bd 3000 	ldrh.w	r3, [sp]
 8009008:	4581      	cmp	r9, r0
 800900a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800900e:	f84c 3b04 	str.w	r3, [ip], #4
 8009012:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009016:	d2db      	bcs.n	8008fd0 <quorem+0x44>
 8009018:	f855 300b 	ldr.w	r3, [r5, fp]
 800901c:	b92b      	cbnz	r3, 800902a <quorem+0x9e>
 800901e:	9b01      	ldr	r3, [sp, #4]
 8009020:	3b04      	subs	r3, #4
 8009022:	429d      	cmp	r5, r3
 8009024:	461a      	mov	r2, r3
 8009026:	d32e      	bcc.n	8009086 <quorem+0xfa>
 8009028:	613c      	str	r4, [r7, #16]
 800902a:	4638      	mov	r0, r7
 800902c:	f001 fea2 	bl	800ad74 <__mcmp>
 8009030:	2800      	cmp	r0, #0
 8009032:	db24      	blt.n	800907e <quorem+0xf2>
 8009034:	3601      	adds	r6, #1
 8009036:	4628      	mov	r0, r5
 8009038:	f04f 0c00 	mov.w	ip, #0
 800903c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009040:	f8d0 e000 	ldr.w	lr, [r0]
 8009044:	b293      	uxth	r3, r2
 8009046:	ebac 0303 	sub.w	r3, ip, r3
 800904a:	0c12      	lsrs	r2, r2, #16
 800904c:	fa13 f38e 	uxtah	r3, r3, lr
 8009050:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009054:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009058:	b29b      	uxth	r3, r3
 800905a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800905e:	45c1      	cmp	r9, r8
 8009060:	f840 3b04 	str.w	r3, [r0], #4
 8009064:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009068:	d2e8      	bcs.n	800903c <quorem+0xb0>
 800906a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800906e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009072:	b922      	cbnz	r2, 800907e <quorem+0xf2>
 8009074:	3b04      	subs	r3, #4
 8009076:	429d      	cmp	r5, r3
 8009078:	461a      	mov	r2, r3
 800907a:	d30a      	bcc.n	8009092 <quorem+0x106>
 800907c:	613c      	str	r4, [r7, #16]
 800907e:	4630      	mov	r0, r6
 8009080:	b003      	add	sp, #12
 8009082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009086:	6812      	ldr	r2, [r2, #0]
 8009088:	3b04      	subs	r3, #4
 800908a:	2a00      	cmp	r2, #0
 800908c:	d1cc      	bne.n	8009028 <quorem+0x9c>
 800908e:	3c01      	subs	r4, #1
 8009090:	e7c7      	b.n	8009022 <quorem+0x96>
 8009092:	6812      	ldr	r2, [r2, #0]
 8009094:	3b04      	subs	r3, #4
 8009096:	2a00      	cmp	r2, #0
 8009098:	d1f0      	bne.n	800907c <quorem+0xf0>
 800909a:	3c01      	subs	r4, #1
 800909c:	e7eb      	b.n	8009076 <quorem+0xea>
 800909e:	2000      	movs	r0, #0
 80090a0:	e7ee      	b.n	8009080 <quorem+0xf4>
 80090a2:	0000      	movs	r0, r0
 80090a4:	0000      	movs	r0, r0
	...

080090a8 <_dtoa_r>:
 80090a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ac:	ed2d 8b04 	vpush	{d8-d9}
 80090b0:	ec57 6b10 	vmov	r6, r7, d0
 80090b4:	b093      	sub	sp, #76	; 0x4c
 80090b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80090b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80090bc:	9106      	str	r1, [sp, #24]
 80090be:	ee10 aa10 	vmov	sl, s0
 80090c2:	4604      	mov	r4, r0
 80090c4:	9209      	str	r2, [sp, #36]	; 0x24
 80090c6:	930c      	str	r3, [sp, #48]	; 0x30
 80090c8:	46bb      	mov	fp, r7
 80090ca:	b975      	cbnz	r5, 80090ea <_dtoa_r+0x42>
 80090cc:	2010      	movs	r0, #16
 80090ce:	f001 fb6b 	bl	800a7a8 <malloc>
 80090d2:	4602      	mov	r2, r0
 80090d4:	6260      	str	r0, [r4, #36]	; 0x24
 80090d6:	b920      	cbnz	r0, 80090e2 <_dtoa_r+0x3a>
 80090d8:	4ba7      	ldr	r3, [pc, #668]	; (8009378 <_dtoa_r+0x2d0>)
 80090da:	21ea      	movs	r1, #234	; 0xea
 80090dc:	48a7      	ldr	r0, [pc, #668]	; (800937c <_dtoa_r+0x2d4>)
 80090de:	f002 fb09 	bl	800b6f4 <__assert_func>
 80090e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80090e6:	6005      	str	r5, [r0, #0]
 80090e8:	60c5      	str	r5, [r0, #12]
 80090ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090ec:	6819      	ldr	r1, [r3, #0]
 80090ee:	b151      	cbz	r1, 8009106 <_dtoa_r+0x5e>
 80090f0:	685a      	ldr	r2, [r3, #4]
 80090f2:	604a      	str	r2, [r1, #4]
 80090f4:	2301      	movs	r3, #1
 80090f6:	4093      	lsls	r3, r2
 80090f8:	608b      	str	r3, [r1, #8]
 80090fa:	4620      	mov	r0, r4
 80090fc:	f001 fbae 	bl	800a85c <_Bfree>
 8009100:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009102:	2200      	movs	r2, #0
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	1e3b      	subs	r3, r7, #0
 8009108:	bfaa      	itet	ge
 800910a:	2300      	movge	r3, #0
 800910c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009110:	f8c8 3000 	strge.w	r3, [r8]
 8009114:	4b9a      	ldr	r3, [pc, #616]	; (8009380 <_dtoa_r+0x2d8>)
 8009116:	bfbc      	itt	lt
 8009118:	2201      	movlt	r2, #1
 800911a:	f8c8 2000 	strlt.w	r2, [r8]
 800911e:	ea33 030b 	bics.w	r3, r3, fp
 8009122:	d11b      	bne.n	800915c <_dtoa_r+0xb4>
 8009124:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009126:	f242 730f 	movw	r3, #9999	; 0x270f
 800912a:	6013      	str	r3, [r2, #0]
 800912c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009130:	4333      	orrs	r3, r6
 8009132:	f000 8592 	beq.w	8009c5a <_dtoa_r+0xbb2>
 8009136:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009138:	b963      	cbnz	r3, 8009154 <_dtoa_r+0xac>
 800913a:	4b92      	ldr	r3, [pc, #584]	; (8009384 <_dtoa_r+0x2dc>)
 800913c:	e022      	b.n	8009184 <_dtoa_r+0xdc>
 800913e:	4b92      	ldr	r3, [pc, #584]	; (8009388 <_dtoa_r+0x2e0>)
 8009140:	9301      	str	r3, [sp, #4]
 8009142:	3308      	adds	r3, #8
 8009144:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009146:	6013      	str	r3, [r2, #0]
 8009148:	9801      	ldr	r0, [sp, #4]
 800914a:	b013      	add	sp, #76	; 0x4c
 800914c:	ecbd 8b04 	vpop	{d8-d9}
 8009150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009154:	4b8b      	ldr	r3, [pc, #556]	; (8009384 <_dtoa_r+0x2dc>)
 8009156:	9301      	str	r3, [sp, #4]
 8009158:	3303      	adds	r3, #3
 800915a:	e7f3      	b.n	8009144 <_dtoa_r+0x9c>
 800915c:	2200      	movs	r2, #0
 800915e:	2300      	movs	r3, #0
 8009160:	4650      	mov	r0, sl
 8009162:	4659      	mov	r1, fp
 8009164:	f7f7 fcb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009168:	ec4b ab19 	vmov	d9, sl, fp
 800916c:	4680      	mov	r8, r0
 800916e:	b158      	cbz	r0, 8009188 <_dtoa_r+0xe0>
 8009170:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009172:	2301      	movs	r3, #1
 8009174:	6013      	str	r3, [r2, #0]
 8009176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 856b 	beq.w	8009c54 <_dtoa_r+0xbac>
 800917e:	4883      	ldr	r0, [pc, #524]	; (800938c <_dtoa_r+0x2e4>)
 8009180:	6018      	str	r0, [r3, #0]
 8009182:	1e43      	subs	r3, r0, #1
 8009184:	9301      	str	r3, [sp, #4]
 8009186:	e7df      	b.n	8009148 <_dtoa_r+0xa0>
 8009188:	ec4b ab10 	vmov	d0, sl, fp
 800918c:	aa10      	add	r2, sp, #64	; 0x40
 800918e:	a911      	add	r1, sp, #68	; 0x44
 8009190:	4620      	mov	r0, r4
 8009192:	f001 ff11 	bl	800afb8 <__d2b>
 8009196:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800919a:	ee08 0a10 	vmov	s16, r0
 800919e:	2d00      	cmp	r5, #0
 80091a0:	f000 8084 	beq.w	80092ac <_dtoa_r+0x204>
 80091a4:	ee19 3a90 	vmov	r3, s19
 80091a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80091b0:	4656      	mov	r6, sl
 80091b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80091b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80091ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80091be:	4b74      	ldr	r3, [pc, #464]	; (8009390 <_dtoa_r+0x2e8>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	4630      	mov	r0, r6
 80091c4:	4639      	mov	r1, r7
 80091c6:	f7f7 f867 	bl	8000298 <__aeabi_dsub>
 80091ca:	a365      	add	r3, pc, #404	; (adr r3, 8009360 <_dtoa_r+0x2b8>)
 80091cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d0:	f7f7 fa1a 	bl	8000608 <__aeabi_dmul>
 80091d4:	a364      	add	r3, pc, #400	; (adr r3, 8009368 <_dtoa_r+0x2c0>)
 80091d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091da:	f7f7 f85f 	bl	800029c <__adddf3>
 80091de:	4606      	mov	r6, r0
 80091e0:	4628      	mov	r0, r5
 80091e2:	460f      	mov	r7, r1
 80091e4:	f7f7 f9a6 	bl	8000534 <__aeabi_i2d>
 80091e8:	a361      	add	r3, pc, #388	; (adr r3, 8009370 <_dtoa_r+0x2c8>)
 80091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ee:	f7f7 fa0b 	bl	8000608 <__aeabi_dmul>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4630      	mov	r0, r6
 80091f8:	4639      	mov	r1, r7
 80091fa:	f7f7 f84f 	bl	800029c <__adddf3>
 80091fe:	4606      	mov	r6, r0
 8009200:	460f      	mov	r7, r1
 8009202:	f7f7 fcb1 	bl	8000b68 <__aeabi_d2iz>
 8009206:	2200      	movs	r2, #0
 8009208:	9000      	str	r0, [sp, #0]
 800920a:	2300      	movs	r3, #0
 800920c:	4630      	mov	r0, r6
 800920e:	4639      	mov	r1, r7
 8009210:	f7f7 fc6c 	bl	8000aec <__aeabi_dcmplt>
 8009214:	b150      	cbz	r0, 800922c <_dtoa_r+0x184>
 8009216:	9800      	ldr	r0, [sp, #0]
 8009218:	f7f7 f98c 	bl	8000534 <__aeabi_i2d>
 800921c:	4632      	mov	r2, r6
 800921e:	463b      	mov	r3, r7
 8009220:	f7f7 fc5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009224:	b910      	cbnz	r0, 800922c <_dtoa_r+0x184>
 8009226:	9b00      	ldr	r3, [sp, #0]
 8009228:	3b01      	subs	r3, #1
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	9b00      	ldr	r3, [sp, #0]
 800922e:	2b16      	cmp	r3, #22
 8009230:	d85a      	bhi.n	80092e8 <_dtoa_r+0x240>
 8009232:	9a00      	ldr	r2, [sp, #0]
 8009234:	4b57      	ldr	r3, [pc, #348]	; (8009394 <_dtoa_r+0x2ec>)
 8009236:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800923a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923e:	ec51 0b19 	vmov	r0, r1, d9
 8009242:	f7f7 fc53 	bl	8000aec <__aeabi_dcmplt>
 8009246:	2800      	cmp	r0, #0
 8009248:	d050      	beq.n	80092ec <_dtoa_r+0x244>
 800924a:	9b00      	ldr	r3, [sp, #0]
 800924c:	3b01      	subs	r3, #1
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	2300      	movs	r3, #0
 8009252:	930b      	str	r3, [sp, #44]	; 0x2c
 8009254:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009256:	1b5d      	subs	r5, r3, r5
 8009258:	1e6b      	subs	r3, r5, #1
 800925a:	9305      	str	r3, [sp, #20]
 800925c:	bf45      	ittet	mi
 800925e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009262:	9304      	strmi	r3, [sp, #16]
 8009264:	2300      	movpl	r3, #0
 8009266:	2300      	movmi	r3, #0
 8009268:	bf4c      	ite	mi
 800926a:	9305      	strmi	r3, [sp, #20]
 800926c:	9304      	strpl	r3, [sp, #16]
 800926e:	9b00      	ldr	r3, [sp, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	db3d      	blt.n	80092f0 <_dtoa_r+0x248>
 8009274:	9b05      	ldr	r3, [sp, #20]
 8009276:	9a00      	ldr	r2, [sp, #0]
 8009278:	920a      	str	r2, [sp, #40]	; 0x28
 800927a:	4413      	add	r3, r2
 800927c:	9305      	str	r3, [sp, #20]
 800927e:	2300      	movs	r3, #0
 8009280:	9307      	str	r3, [sp, #28]
 8009282:	9b06      	ldr	r3, [sp, #24]
 8009284:	2b09      	cmp	r3, #9
 8009286:	f200 8089 	bhi.w	800939c <_dtoa_r+0x2f4>
 800928a:	2b05      	cmp	r3, #5
 800928c:	bfc4      	itt	gt
 800928e:	3b04      	subgt	r3, #4
 8009290:	9306      	strgt	r3, [sp, #24]
 8009292:	9b06      	ldr	r3, [sp, #24]
 8009294:	f1a3 0302 	sub.w	r3, r3, #2
 8009298:	bfcc      	ite	gt
 800929a:	2500      	movgt	r5, #0
 800929c:	2501      	movle	r5, #1
 800929e:	2b03      	cmp	r3, #3
 80092a0:	f200 8087 	bhi.w	80093b2 <_dtoa_r+0x30a>
 80092a4:	e8df f003 	tbb	[pc, r3]
 80092a8:	59383a2d 	.word	0x59383a2d
 80092ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80092b0:	441d      	add	r5, r3
 80092b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80092b6:	2b20      	cmp	r3, #32
 80092b8:	bfc1      	itttt	gt
 80092ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80092be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80092c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80092c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80092ca:	bfda      	itte	le
 80092cc:	f1c3 0320 	rsble	r3, r3, #32
 80092d0:	fa06 f003 	lslle.w	r0, r6, r3
 80092d4:	4318      	orrgt	r0, r3
 80092d6:	f7f7 f91d 	bl	8000514 <__aeabi_ui2d>
 80092da:	2301      	movs	r3, #1
 80092dc:	4606      	mov	r6, r0
 80092de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80092e2:	3d01      	subs	r5, #1
 80092e4:	930e      	str	r3, [sp, #56]	; 0x38
 80092e6:	e76a      	b.n	80091be <_dtoa_r+0x116>
 80092e8:	2301      	movs	r3, #1
 80092ea:	e7b2      	b.n	8009252 <_dtoa_r+0x1aa>
 80092ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80092ee:	e7b1      	b.n	8009254 <_dtoa_r+0x1ac>
 80092f0:	9b04      	ldr	r3, [sp, #16]
 80092f2:	9a00      	ldr	r2, [sp, #0]
 80092f4:	1a9b      	subs	r3, r3, r2
 80092f6:	9304      	str	r3, [sp, #16]
 80092f8:	4253      	negs	r3, r2
 80092fa:	9307      	str	r3, [sp, #28]
 80092fc:	2300      	movs	r3, #0
 80092fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009300:	e7bf      	b.n	8009282 <_dtoa_r+0x1da>
 8009302:	2300      	movs	r3, #0
 8009304:	9308      	str	r3, [sp, #32]
 8009306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009308:	2b00      	cmp	r3, #0
 800930a:	dc55      	bgt.n	80093b8 <_dtoa_r+0x310>
 800930c:	2301      	movs	r3, #1
 800930e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009312:	461a      	mov	r2, r3
 8009314:	9209      	str	r2, [sp, #36]	; 0x24
 8009316:	e00c      	b.n	8009332 <_dtoa_r+0x28a>
 8009318:	2301      	movs	r3, #1
 800931a:	e7f3      	b.n	8009304 <_dtoa_r+0x25c>
 800931c:	2300      	movs	r3, #0
 800931e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009320:	9308      	str	r3, [sp, #32]
 8009322:	9b00      	ldr	r3, [sp, #0]
 8009324:	4413      	add	r3, r2
 8009326:	9302      	str	r3, [sp, #8]
 8009328:	3301      	adds	r3, #1
 800932a:	2b01      	cmp	r3, #1
 800932c:	9303      	str	r3, [sp, #12]
 800932e:	bfb8      	it	lt
 8009330:	2301      	movlt	r3, #1
 8009332:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009334:	2200      	movs	r2, #0
 8009336:	6042      	str	r2, [r0, #4]
 8009338:	2204      	movs	r2, #4
 800933a:	f102 0614 	add.w	r6, r2, #20
 800933e:	429e      	cmp	r6, r3
 8009340:	6841      	ldr	r1, [r0, #4]
 8009342:	d93d      	bls.n	80093c0 <_dtoa_r+0x318>
 8009344:	4620      	mov	r0, r4
 8009346:	f001 fa49 	bl	800a7dc <_Balloc>
 800934a:	9001      	str	r0, [sp, #4]
 800934c:	2800      	cmp	r0, #0
 800934e:	d13b      	bne.n	80093c8 <_dtoa_r+0x320>
 8009350:	4b11      	ldr	r3, [pc, #68]	; (8009398 <_dtoa_r+0x2f0>)
 8009352:	4602      	mov	r2, r0
 8009354:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009358:	e6c0      	b.n	80090dc <_dtoa_r+0x34>
 800935a:	2301      	movs	r3, #1
 800935c:	e7df      	b.n	800931e <_dtoa_r+0x276>
 800935e:	bf00      	nop
 8009360:	636f4361 	.word	0x636f4361
 8009364:	3fd287a7 	.word	0x3fd287a7
 8009368:	8b60c8b3 	.word	0x8b60c8b3
 800936c:	3fc68a28 	.word	0x3fc68a28
 8009370:	509f79fb 	.word	0x509f79fb
 8009374:	3fd34413 	.word	0x3fd34413
 8009378:	0800c1dd 	.word	0x0800c1dd
 800937c:	0800c1f4 	.word	0x0800c1f4
 8009380:	7ff00000 	.word	0x7ff00000
 8009384:	0800c1d9 	.word	0x0800c1d9
 8009388:	0800c1d0 	.word	0x0800c1d0
 800938c:	0800c15d 	.word	0x0800c15d
 8009390:	3ff80000 	.word	0x3ff80000
 8009394:	0800c3c0 	.word	0x0800c3c0
 8009398:	0800c24f 	.word	0x0800c24f
 800939c:	2501      	movs	r5, #1
 800939e:	2300      	movs	r3, #0
 80093a0:	9306      	str	r3, [sp, #24]
 80093a2:	9508      	str	r5, [sp, #32]
 80093a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093ac:	2200      	movs	r2, #0
 80093ae:	2312      	movs	r3, #18
 80093b0:	e7b0      	b.n	8009314 <_dtoa_r+0x26c>
 80093b2:	2301      	movs	r3, #1
 80093b4:	9308      	str	r3, [sp, #32]
 80093b6:	e7f5      	b.n	80093a4 <_dtoa_r+0x2fc>
 80093b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093be:	e7b8      	b.n	8009332 <_dtoa_r+0x28a>
 80093c0:	3101      	adds	r1, #1
 80093c2:	6041      	str	r1, [r0, #4]
 80093c4:	0052      	lsls	r2, r2, #1
 80093c6:	e7b8      	b.n	800933a <_dtoa_r+0x292>
 80093c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093ca:	9a01      	ldr	r2, [sp, #4]
 80093cc:	601a      	str	r2, [r3, #0]
 80093ce:	9b03      	ldr	r3, [sp, #12]
 80093d0:	2b0e      	cmp	r3, #14
 80093d2:	f200 809d 	bhi.w	8009510 <_dtoa_r+0x468>
 80093d6:	2d00      	cmp	r5, #0
 80093d8:	f000 809a 	beq.w	8009510 <_dtoa_r+0x468>
 80093dc:	9b00      	ldr	r3, [sp, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	dd32      	ble.n	8009448 <_dtoa_r+0x3a0>
 80093e2:	4ab7      	ldr	r2, [pc, #732]	; (80096c0 <_dtoa_r+0x618>)
 80093e4:	f003 030f 	and.w	r3, r3, #15
 80093e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80093ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093f0:	9b00      	ldr	r3, [sp, #0]
 80093f2:	05d8      	lsls	r0, r3, #23
 80093f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80093f8:	d516      	bpl.n	8009428 <_dtoa_r+0x380>
 80093fa:	4bb2      	ldr	r3, [pc, #712]	; (80096c4 <_dtoa_r+0x61c>)
 80093fc:	ec51 0b19 	vmov	r0, r1, d9
 8009400:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009404:	f7f7 fa2a 	bl	800085c <__aeabi_ddiv>
 8009408:	f007 070f 	and.w	r7, r7, #15
 800940c:	4682      	mov	sl, r0
 800940e:	468b      	mov	fp, r1
 8009410:	2503      	movs	r5, #3
 8009412:	4eac      	ldr	r6, [pc, #688]	; (80096c4 <_dtoa_r+0x61c>)
 8009414:	b957      	cbnz	r7, 800942c <_dtoa_r+0x384>
 8009416:	4642      	mov	r2, r8
 8009418:	464b      	mov	r3, r9
 800941a:	4650      	mov	r0, sl
 800941c:	4659      	mov	r1, fp
 800941e:	f7f7 fa1d 	bl	800085c <__aeabi_ddiv>
 8009422:	4682      	mov	sl, r0
 8009424:	468b      	mov	fp, r1
 8009426:	e028      	b.n	800947a <_dtoa_r+0x3d2>
 8009428:	2502      	movs	r5, #2
 800942a:	e7f2      	b.n	8009412 <_dtoa_r+0x36a>
 800942c:	07f9      	lsls	r1, r7, #31
 800942e:	d508      	bpl.n	8009442 <_dtoa_r+0x39a>
 8009430:	4640      	mov	r0, r8
 8009432:	4649      	mov	r1, r9
 8009434:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009438:	f7f7 f8e6 	bl	8000608 <__aeabi_dmul>
 800943c:	3501      	adds	r5, #1
 800943e:	4680      	mov	r8, r0
 8009440:	4689      	mov	r9, r1
 8009442:	107f      	asrs	r7, r7, #1
 8009444:	3608      	adds	r6, #8
 8009446:	e7e5      	b.n	8009414 <_dtoa_r+0x36c>
 8009448:	f000 809b 	beq.w	8009582 <_dtoa_r+0x4da>
 800944c:	9b00      	ldr	r3, [sp, #0]
 800944e:	4f9d      	ldr	r7, [pc, #628]	; (80096c4 <_dtoa_r+0x61c>)
 8009450:	425e      	negs	r6, r3
 8009452:	4b9b      	ldr	r3, [pc, #620]	; (80096c0 <_dtoa_r+0x618>)
 8009454:	f006 020f 	and.w	r2, r6, #15
 8009458:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800945c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009460:	ec51 0b19 	vmov	r0, r1, d9
 8009464:	f7f7 f8d0 	bl	8000608 <__aeabi_dmul>
 8009468:	1136      	asrs	r6, r6, #4
 800946a:	4682      	mov	sl, r0
 800946c:	468b      	mov	fp, r1
 800946e:	2300      	movs	r3, #0
 8009470:	2502      	movs	r5, #2
 8009472:	2e00      	cmp	r6, #0
 8009474:	d17a      	bne.n	800956c <_dtoa_r+0x4c4>
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1d3      	bne.n	8009422 <_dtoa_r+0x37a>
 800947a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 8082 	beq.w	8009586 <_dtoa_r+0x4de>
 8009482:	4b91      	ldr	r3, [pc, #580]	; (80096c8 <_dtoa_r+0x620>)
 8009484:	2200      	movs	r2, #0
 8009486:	4650      	mov	r0, sl
 8009488:	4659      	mov	r1, fp
 800948a:	f7f7 fb2f 	bl	8000aec <__aeabi_dcmplt>
 800948e:	2800      	cmp	r0, #0
 8009490:	d079      	beq.n	8009586 <_dtoa_r+0x4de>
 8009492:	9b03      	ldr	r3, [sp, #12]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d076      	beq.n	8009586 <_dtoa_r+0x4de>
 8009498:	9b02      	ldr	r3, [sp, #8]
 800949a:	2b00      	cmp	r3, #0
 800949c:	dd36      	ble.n	800950c <_dtoa_r+0x464>
 800949e:	9b00      	ldr	r3, [sp, #0]
 80094a0:	4650      	mov	r0, sl
 80094a2:	4659      	mov	r1, fp
 80094a4:	1e5f      	subs	r7, r3, #1
 80094a6:	2200      	movs	r2, #0
 80094a8:	4b88      	ldr	r3, [pc, #544]	; (80096cc <_dtoa_r+0x624>)
 80094aa:	f7f7 f8ad 	bl	8000608 <__aeabi_dmul>
 80094ae:	9e02      	ldr	r6, [sp, #8]
 80094b0:	4682      	mov	sl, r0
 80094b2:	468b      	mov	fp, r1
 80094b4:	3501      	adds	r5, #1
 80094b6:	4628      	mov	r0, r5
 80094b8:	f7f7 f83c 	bl	8000534 <__aeabi_i2d>
 80094bc:	4652      	mov	r2, sl
 80094be:	465b      	mov	r3, fp
 80094c0:	f7f7 f8a2 	bl	8000608 <__aeabi_dmul>
 80094c4:	4b82      	ldr	r3, [pc, #520]	; (80096d0 <_dtoa_r+0x628>)
 80094c6:	2200      	movs	r2, #0
 80094c8:	f7f6 fee8 	bl	800029c <__adddf3>
 80094cc:	46d0      	mov	r8, sl
 80094ce:	46d9      	mov	r9, fp
 80094d0:	4682      	mov	sl, r0
 80094d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80094d6:	2e00      	cmp	r6, #0
 80094d8:	d158      	bne.n	800958c <_dtoa_r+0x4e4>
 80094da:	4b7e      	ldr	r3, [pc, #504]	; (80096d4 <_dtoa_r+0x62c>)
 80094dc:	2200      	movs	r2, #0
 80094de:	4640      	mov	r0, r8
 80094e0:	4649      	mov	r1, r9
 80094e2:	f7f6 fed9 	bl	8000298 <__aeabi_dsub>
 80094e6:	4652      	mov	r2, sl
 80094e8:	465b      	mov	r3, fp
 80094ea:	4680      	mov	r8, r0
 80094ec:	4689      	mov	r9, r1
 80094ee:	f7f7 fb1b 	bl	8000b28 <__aeabi_dcmpgt>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	f040 8295 	bne.w	8009a22 <_dtoa_r+0x97a>
 80094f8:	4652      	mov	r2, sl
 80094fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80094fe:	4640      	mov	r0, r8
 8009500:	4649      	mov	r1, r9
 8009502:	f7f7 faf3 	bl	8000aec <__aeabi_dcmplt>
 8009506:	2800      	cmp	r0, #0
 8009508:	f040 8289 	bne.w	8009a1e <_dtoa_r+0x976>
 800950c:	ec5b ab19 	vmov	sl, fp, d9
 8009510:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009512:	2b00      	cmp	r3, #0
 8009514:	f2c0 8148 	blt.w	80097a8 <_dtoa_r+0x700>
 8009518:	9a00      	ldr	r2, [sp, #0]
 800951a:	2a0e      	cmp	r2, #14
 800951c:	f300 8144 	bgt.w	80097a8 <_dtoa_r+0x700>
 8009520:	4b67      	ldr	r3, [pc, #412]	; (80096c0 <_dtoa_r+0x618>)
 8009522:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009526:	e9d3 8900 	ldrd	r8, r9, [r3]
 800952a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800952c:	2b00      	cmp	r3, #0
 800952e:	f280 80d5 	bge.w	80096dc <_dtoa_r+0x634>
 8009532:	9b03      	ldr	r3, [sp, #12]
 8009534:	2b00      	cmp	r3, #0
 8009536:	f300 80d1 	bgt.w	80096dc <_dtoa_r+0x634>
 800953a:	f040 826f 	bne.w	8009a1c <_dtoa_r+0x974>
 800953e:	4b65      	ldr	r3, [pc, #404]	; (80096d4 <_dtoa_r+0x62c>)
 8009540:	2200      	movs	r2, #0
 8009542:	4640      	mov	r0, r8
 8009544:	4649      	mov	r1, r9
 8009546:	f7f7 f85f 	bl	8000608 <__aeabi_dmul>
 800954a:	4652      	mov	r2, sl
 800954c:	465b      	mov	r3, fp
 800954e:	f7f7 fae1 	bl	8000b14 <__aeabi_dcmpge>
 8009552:	9e03      	ldr	r6, [sp, #12]
 8009554:	4637      	mov	r7, r6
 8009556:	2800      	cmp	r0, #0
 8009558:	f040 8245 	bne.w	80099e6 <_dtoa_r+0x93e>
 800955c:	9d01      	ldr	r5, [sp, #4]
 800955e:	2331      	movs	r3, #49	; 0x31
 8009560:	f805 3b01 	strb.w	r3, [r5], #1
 8009564:	9b00      	ldr	r3, [sp, #0]
 8009566:	3301      	adds	r3, #1
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	e240      	b.n	80099ee <_dtoa_r+0x946>
 800956c:	07f2      	lsls	r2, r6, #31
 800956e:	d505      	bpl.n	800957c <_dtoa_r+0x4d4>
 8009570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009574:	f7f7 f848 	bl	8000608 <__aeabi_dmul>
 8009578:	3501      	adds	r5, #1
 800957a:	2301      	movs	r3, #1
 800957c:	1076      	asrs	r6, r6, #1
 800957e:	3708      	adds	r7, #8
 8009580:	e777      	b.n	8009472 <_dtoa_r+0x3ca>
 8009582:	2502      	movs	r5, #2
 8009584:	e779      	b.n	800947a <_dtoa_r+0x3d2>
 8009586:	9f00      	ldr	r7, [sp, #0]
 8009588:	9e03      	ldr	r6, [sp, #12]
 800958a:	e794      	b.n	80094b6 <_dtoa_r+0x40e>
 800958c:	9901      	ldr	r1, [sp, #4]
 800958e:	4b4c      	ldr	r3, [pc, #304]	; (80096c0 <_dtoa_r+0x618>)
 8009590:	4431      	add	r1, r6
 8009592:	910d      	str	r1, [sp, #52]	; 0x34
 8009594:	9908      	ldr	r1, [sp, #32]
 8009596:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800959a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800959e:	2900      	cmp	r1, #0
 80095a0:	d043      	beq.n	800962a <_dtoa_r+0x582>
 80095a2:	494d      	ldr	r1, [pc, #308]	; (80096d8 <_dtoa_r+0x630>)
 80095a4:	2000      	movs	r0, #0
 80095a6:	f7f7 f959 	bl	800085c <__aeabi_ddiv>
 80095aa:	4652      	mov	r2, sl
 80095ac:	465b      	mov	r3, fp
 80095ae:	f7f6 fe73 	bl	8000298 <__aeabi_dsub>
 80095b2:	9d01      	ldr	r5, [sp, #4]
 80095b4:	4682      	mov	sl, r0
 80095b6:	468b      	mov	fp, r1
 80095b8:	4649      	mov	r1, r9
 80095ba:	4640      	mov	r0, r8
 80095bc:	f7f7 fad4 	bl	8000b68 <__aeabi_d2iz>
 80095c0:	4606      	mov	r6, r0
 80095c2:	f7f6 ffb7 	bl	8000534 <__aeabi_i2d>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	4640      	mov	r0, r8
 80095cc:	4649      	mov	r1, r9
 80095ce:	f7f6 fe63 	bl	8000298 <__aeabi_dsub>
 80095d2:	3630      	adds	r6, #48	; 0x30
 80095d4:	f805 6b01 	strb.w	r6, [r5], #1
 80095d8:	4652      	mov	r2, sl
 80095da:	465b      	mov	r3, fp
 80095dc:	4680      	mov	r8, r0
 80095de:	4689      	mov	r9, r1
 80095e0:	f7f7 fa84 	bl	8000aec <__aeabi_dcmplt>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d163      	bne.n	80096b0 <_dtoa_r+0x608>
 80095e8:	4642      	mov	r2, r8
 80095ea:	464b      	mov	r3, r9
 80095ec:	4936      	ldr	r1, [pc, #216]	; (80096c8 <_dtoa_r+0x620>)
 80095ee:	2000      	movs	r0, #0
 80095f0:	f7f6 fe52 	bl	8000298 <__aeabi_dsub>
 80095f4:	4652      	mov	r2, sl
 80095f6:	465b      	mov	r3, fp
 80095f8:	f7f7 fa78 	bl	8000aec <__aeabi_dcmplt>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	f040 80b5 	bne.w	800976c <_dtoa_r+0x6c4>
 8009602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009604:	429d      	cmp	r5, r3
 8009606:	d081      	beq.n	800950c <_dtoa_r+0x464>
 8009608:	4b30      	ldr	r3, [pc, #192]	; (80096cc <_dtoa_r+0x624>)
 800960a:	2200      	movs	r2, #0
 800960c:	4650      	mov	r0, sl
 800960e:	4659      	mov	r1, fp
 8009610:	f7f6 fffa 	bl	8000608 <__aeabi_dmul>
 8009614:	4b2d      	ldr	r3, [pc, #180]	; (80096cc <_dtoa_r+0x624>)
 8009616:	4682      	mov	sl, r0
 8009618:	468b      	mov	fp, r1
 800961a:	4640      	mov	r0, r8
 800961c:	4649      	mov	r1, r9
 800961e:	2200      	movs	r2, #0
 8009620:	f7f6 fff2 	bl	8000608 <__aeabi_dmul>
 8009624:	4680      	mov	r8, r0
 8009626:	4689      	mov	r9, r1
 8009628:	e7c6      	b.n	80095b8 <_dtoa_r+0x510>
 800962a:	4650      	mov	r0, sl
 800962c:	4659      	mov	r1, fp
 800962e:	f7f6 ffeb 	bl	8000608 <__aeabi_dmul>
 8009632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009634:	9d01      	ldr	r5, [sp, #4]
 8009636:	930f      	str	r3, [sp, #60]	; 0x3c
 8009638:	4682      	mov	sl, r0
 800963a:	468b      	mov	fp, r1
 800963c:	4649      	mov	r1, r9
 800963e:	4640      	mov	r0, r8
 8009640:	f7f7 fa92 	bl	8000b68 <__aeabi_d2iz>
 8009644:	4606      	mov	r6, r0
 8009646:	f7f6 ff75 	bl	8000534 <__aeabi_i2d>
 800964a:	3630      	adds	r6, #48	; 0x30
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	4640      	mov	r0, r8
 8009652:	4649      	mov	r1, r9
 8009654:	f7f6 fe20 	bl	8000298 <__aeabi_dsub>
 8009658:	f805 6b01 	strb.w	r6, [r5], #1
 800965c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800965e:	429d      	cmp	r5, r3
 8009660:	4680      	mov	r8, r0
 8009662:	4689      	mov	r9, r1
 8009664:	f04f 0200 	mov.w	r2, #0
 8009668:	d124      	bne.n	80096b4 <_dtoa_r+0x60c>
 800966a:	4b1b      	ldr	r3, [pc, #108]	; (80096d8 <_dtoa_r+0x630>)
 800966c:	4650      	mov	r0, sl
 800966e:	4659      	mov	r1, fp
 8009670:	f7f6 fe14 	bl	800029c <__adddf3>
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	4640      	mov	r0, r8
 800967a:	4649      	mov	r1, r9
 800967c:	f7f7 fa54 	bl	8000b28 <__aeabi_dcmpgt>
 8009680:	2800      	cmp	r0, #0
 8009682:	d173      	bne.n	800976c <_dtoa_r+0x6c4>
 8009684:	4652      	mov	r2, sl
 8009686:	465b      	mov	r3, fp
 8009688:	4913      	ldr	r1, [pc, #76]	; (80096d8 <_dtoa_r+0x630>)
 800968a:	2000      	movs	r0, #0
 800968c:	f7f6 fe04 	bl	8000298 <__aeabi_dsub>
 8009690:	4602      	mov	r2, r0
 8009692:	460b      	mov	r3, r1
 8009694:	4640      	mov	r0, r8
 8009696:	4649      	mov	r1, r9
 8009698:	f7f7 fa28 	bl	8000aec <__aeabi_dcmplt>
 800969c:	2800      	cmp	r0, #0
 800969e:	f43f af35 	beq.w	800950c <_dtoa_r+0x464>
 80096a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80096a4:	1e6b      	subs	r3, r5, #1
 80096a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80096a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80096ac:	2b30      	cmp	r3, #48	; 0x30
 80096ae:	d0f8      	beq.n	80096a2 <_dtoa_r+0x5fa>
 80096b0:	9700      	str	r7, [sp, #0]
 80096b2:	e049      	b.n	8009748 <_dtoa_r+0x6a0>
 80096b4:	4b05      	ldr	r3, [pc, #20]	; (80096cc <_dtoa_r+0x624>)
 80096b6:	f7f6 ffa7 	bl	8000608 <__aeabi_dmul>
 80096ba:	4680      	mov	r8, r0
 80096bc:	4689      	mov	r9, r1
 80096be:	e7bd      	b.n	800963c <_dtoa_r+0x594>
 80096c0:	0800c3c0 	.word	0x0800c3c0
 80096c4:	0800c398 	.word	0x0800c398
 80096c8:	3ff00000 	.word	0x3ff00000
 80096cc:	40240000 	.word	0x40240000
 80096d0:	401c0000 	.word	0x401c0000
 80096d4:	40140000 	.word	0x40140000
 80096d8:	3fe00000 	.word	0x3fe00000
 80096dc:	9d01      	ldr	r5, [sp, #4]
 80096de:	4656      	mov	r6, sl
 80096e0:	465f      	mov	r7, fp
 80096e2:	4642      	mov	r2, r8
 80096e4:	464b      	mov	r3, r9
 80096e6:	4630      	mov	r0, r6
 80096e8:	4639      	mov	r1, r7
 80096ea:	f7f7 f8b7 	bl	800085c <__aeabi_ddiv>
 80096ee:	f7f7 fa3b 	bl	8000b68 <__aeabi_d2iz>
 80096f2:	4682      	mov	sl, r0
 80096f4:	f7f6 ff1e 	bl	8000534 <__aeabi_i2d>
 80096f8:	4642      	mov	r2, r8
 80096fa:	464b      	mov	r3, r9
 80096fc:	f7f6 ff84 	bl	8000608 <__aeabi_dmul>
 8009700:	4602      	mov	r2, r0
 8009702:	460b      	mov	r3, r1
 8009704:	4630      	mov	r0, r6
 8009706:	4639      	mov	r1, r7
 8009708:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800970c:	f7f6 fdc4 	bl	8000298 <__aeabi_dsub>
 8009710:	f805 6b01 	strb.w	r6, [r5], #1
 8009714:	9e01      	ldr	r6, [sp, #4]
 8009716:	9f03      	ldr	r7, [sp, #12]
 8009718:	1bae      	subs	r6, r5, r6
 800971a:	42b7      	cmp	r7, r6
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	d135      	bne.n	800978e <_dtoa_r+0x6e6>
 8009722:	f7f6 fdbb 	bl	800029c <__adddf3>
 8009726:	4642      	mov	r2, r8
 8009728:	464b      	mov	r3, r9
 800972a:	4606      	mov	r6, r0
 800972c:	460f      	mov	r7, r1
 800972e:	f7f7 f9fb 	bl	8000b28 <__aeabi_dcmpgt>
 8009732:	b9d0      	cbnz	r0, 800976a <_dtoa_r+0x6c2>
 8009734:	4642      	mov	r2, r8
 8009736:	464b      	mov	r3, r9
 8009738:	4630      	mov	r0, r6
 800973a:	4639      	mov	r1, r7
 800973c:	f7f7 f9cc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009740:	b110      	cbz	r0, 8009748 <_dtoa_r+0x6a0>
 8009742:	f01a 0f01 	tst.w	sl, #1
 8009746:	d110      	bne.n	800976a <_dtoa_r+0x6c2>
 8009748:	4620      	mov	r0, r4
 800974a:	ee18 1a10 	vmov	r1, s16
 800974e:	f001 f885 	bl	800a85c <_Bfree>
 8009752:	2300      	movs	r3, #0
 8009754:	9800      	ldr	r0, [sp, #0]
 8009756:	702b      	strb	r3, [r5, #0]
 8009758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800975a:	3001      	adds	r0, #1
 800975c:	6018      	str	r0, [r3, #0]
 800975e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009760:	2b00      	cmp	r3, #0
 8009762:	f43f acf1 	beq.w	8009148 <_dtoa_r+0xa0>
 8009766:	601d      	str	r5, [r3, #0]
 8009768:	e4ee      	b.n	8009148 <_dtoa_r+0xa0>
 800976a:	9f00      	ldr	r7, [sp, #0]
 800976c:	462b      	mov	r3, r5
 800976e:	461d      	mov	r5, r3
 8009770:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009774:	2a39      	cmp	r2, #57	; 0x39
 8009776:	d106      	bne.n	8009786 <_dtoa_r+0x6de>
 8009778:	9a01      	ldr	r2, [sp, #4]
 800977a:	429a      	cmp	r2, r3
 800977c:	d1f7      	bne.n	800976e <_dtoa_r+0x6c6>
 800977e:	9901      	ldr	r1, [sp, #4]
 8009780:	2230      	movs	r2, #48	; 0x30
 8009782:	3701      	adds	r7, #1
 8009784:	700a      	strb	r2, [r1, #0]
 8009786:	781a      	ldrb	r2, [r3, #0]
 8009788:	3201      	adds	r2, #1
 800978a:	701a      	strb	r2, [r3, #0]
 800978c:	e790      	b.n	80096b0 <_dtoa_r+0x608>
 800978e:	4ba6      	ldr	r3, [pc, #664]	; (8009a28 <_dtoa_r+0x980>)
 8009790:	2200      	movs	r2, #0
 8009792:	f7f6 ff39 	bl	8000608 <__aeabi_dmul>
 8009796:	2200      	movs	r2, #0
 8009798:	2300      	movs	r3, #0
 800979a:	4606      	mov	r6, r0
 800979c:	460f      	mov	r7, r1
 800979e:	f7f7 f99b 	bl	8000ad8 <__aeabi_dcmpeq>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d09d      	beq.n	80096e2 <_dtoa_r+0x63a>
 80097a6:	e7cf      	b.n	8009748 <_dtoa_r+0x6a0>
 80097a8:	9a08      	ldr	r2, [sp, #32]
 80097aa:	2a00      	cmp	r2, #0
 80097ac:	f000 80d7 	beq.w	800995e <_dtoa_r+0x8b6>
 80097b0:	9a06      	ldr	r2, [sp, #24]
 80097b2:	2a01      	cmp	r2, #1
 80097b4:	f300 80ba 	bgt.w	800992c <_dtoa_r+0x884>
 80097b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097ba:	2a00      	cmp	r2, #0
 80097bc:	f000 80b2 	beq.w	8009924 <_dtoa_r+0x87c>
 80097c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80097c4:	9e07      	ldr	r6, [sp, #28]
 80097c6:	9d04      	ldr	r5, [sp, #16]
 80097c8:	9a04      	ldr	r2, [sp, #16]
 80097ca:	441a      	add	r2, r3
 80097cc:	9204      	str	r2, [sp, #16]
 80097ce:	9a05      	ldr	r2, [sp, #20]
 80097d0:	2101      	movs	r1, #1
 80097d2:	441a      	add	r2, r3
 80097d4:	4620      	mov	r0, r4
 80097d6:	9205      	str	r2, [sp, #20]
 80097d8:	f001 f942 	bl	800aa60 <__i2b>
 80097dc:	4607      	mov	r7, r0
 80097de:	2d00      	cmp	r5, #0
 80097e0:	dd0c      	ble.n	80097fc <_dtoa_r+0x754>
 80097e2:	9b05      	ldr	r3, [sp, #20]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	dd09      	ble.n	80097fc <_dtoa_r+0x754>
 80097e8:	42ab      	cmp	r3, r5
 80097ea:	9a04      	ldr	r2, [sp, #16]
 80097ec:	bfa8      	it	ge
 80097ee:	462b      	movge	r3, r5
 80097f0:	1ad2      	subs	r2, r2, r3
 80097f2:	9204      	str	r2, [sp, #16]
 80097f4:	9a05      	ldr	r2, [sp, #20]
 80097f6:	1aed      	subs	r5, r5, r3
 80097f8:	1ad3      	subs	r3, r2, r3
 80097fa:	9305      	str	r3, [sp, #20]
 80097fc:	9b07      	ldr	r3, [sp, #28]
 80097fe:	b31b      	cbz	r3, 8009848 <_dtoa_r+0x7a0>
 8009800:	9b08      	ldr	r3, [sp, #32]
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 80af 	beq.w	8009966 <_dtoa_r+0x8be>
 8009808:	2e00      	cmp	r6, #0
 800980a:	dd13      	ble.n	8009834 <_dtoa_r+0x78c>
 800980c:	4639      	mov	r1, r7
 800980e:	4632      	mov	r2, r6
 8009810:	4620      	mov	r0, r4
 8009812:	f001 f9e5 	bl	800abe0 <__pow5mult>
 8009816:	ee18 2a10 	vmov	r2, s16
 800981a:	4601      	mov	r1, r0
 800981c:	4607      	mov	r7, r0
 800981e:	4620      	mov	r0, r4
 8009820:	f001 f934 	bl	800aa8c <__multiply>
 8009824:	ee18 1a10 	vmov	r1, s16
 8009828:	4680      	mov	r8, r0
 800982a:	4620      	mov	r0, r4
 800982c:	f001 f816 	bl	800a85c <_Bfree>
 8009830:	ee08 8a10 	vmov	s16, r8
 8009834:	9b07      	ldr	r3, [sp, #28]
 8009836:	1b9a      	subs	r2, r3, r6
 8009838:	d006      	beq.n	8009848 <_dtoa_r+0x7a0>
 800983a:	ee18 1a10 	vmov	r1, s16
 800983e:	4620      	mov	r0, r4
 8009840:	f001 f9ce 	bl	800abe0 <__pow5mult>
 8009844:	ee08 0a10 	vmov	s16, r0
 8009848:	2101      	movs	r1, #1
 800984a:	4620      	mov	r0, r4
 800984c:	f001 f908 	bl	800aa60 <__i2b>
 8009850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009852:	2b00      	cmp	r3, #0
 8009854:	4606      	mov	r6, r0
 8009856:	f340 8088 	ble.w	800996a <_dtoa_r+0x8c2>
 800985a:	461a      	mov	r2, r3
 800985c:	4601      	mov	r1, r0
 800985e:	4620      	mov	r0, r4
 8009860:	f001 f9be 	bl	800abe0 <__pow5mult>
 8009864:	9b06      	ldr	r3, [sp, #24]
 8009866:	2b01      	cmp	r3, #1
 8009868:	4606      	mov	r6, r0
 800986a:	f340 8081 	ble.w	8009970 <_dtoa_r+0x8c8>
 800986e:	f04f 0800 	mov.w	r8, #0
 8009872:	6933      	ldr	r3, [r6, #16]
 8009874:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009878:	6918      	ldr	r0, [r3, #16]
 800987a:	f001 f8a1 	bl	800a9c0 <__hi0bits>
 800987e:	f1c0 0020 	rsb	r0, r0, #32
 8009882:	9b05      	ldr	r3, [sp, #20]
 8009884:	4418      	add	r0, r3
 8009886:	f010 001f 	ands.w	r0, r0, #31
 800988a:	f000 8092 	beq.w	80099b2 <_dtoa_r+0x90a>
 800988e:	f1c0 0320 	rsb	r3, r0, #32
 8009892:	2b04      	cmp	r3, #4
 8009894:	f340 808a 	ble.w	80099ac <_dtoa_r+0x904>
 8009898:	f1c0 001c 	rsb	r0, r0, #28
 800989c:	9b04      	ldr	r3, [sp, #16]
 800989e:	4403      	add	r3, r0
 80098a0:	9304      	str	r3, [sp, #16]
 80098a2:	9b05      	ldr	r3, [sp, #20]
 80098a4:	4403      	add	r3, r0
 80098a6:	4405      	add	r5, r0
 80098a8:	9305      	str	r3, [sp, #20]
 80098aa:	9b04      	ldr	r3, [sp, #16]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	dd07      	ble.n	80098c0 <_dtoa_r+0x818>
 80098b0:	ee18 1a10 	vmov	r1, s16
 80098b4:	461a      	mov	r2, r3
 80098b6:	4620      	mov	r0, r4
 80098b8:	f001 f9ec 	bl	800ac94 <__lshift>
 80098bc:	ee08 0a10 	vmov	s16, r0
 80098c0:	9b05      	ldr	r3, [sp, #20]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	dd05      	ble.n	80098d2 <_dtoa_r+0x82a>
 80098c6:	4631      	mov	r1, r6
 80098c8:	461a      	mov	r2, r3
 80098ca:	4620      	mov	r0, r4
 80098cc:	f001 f9e2 	bl	800ac94 <__lshift>
 80098d0:	4606      	mov	r6, r0
 80098d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d06e      	beq.n	80099b6 <_dtoa_r+0x90e>
 80098d8:	ee18 0a10 	vmov	r0, s16
 80098dc:	4631      	mov	r1, r6
 80098de:	f001 fa49 	bl	800ad74 <__mcmp>
 80098e2:	2800      	cmp	r0, #0
 80098e4:	da67      	bge.n	80099b6 <_dtoa_r+0x90e>
 80098e6:	9b00      	ldr	r3, [sp, #0]
 80098e8:	3b01      	subs	r3, #1
 80098ea:	ee18 1a10 	vmov	r1, s16
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	220a      	movs	r2, #10
 80098f2:	2300      	movs	r3, #0
 80098f4:	4620      	mov	r0, r4
 80098f6:	f000 ffd3 	bl	800a8a0 <__multadd>
 80098fa:	9b08      	ldr	r3, [sp, #32]
 80098fc:	ee08 0a10 	vmov	s16, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	f000 81b1 	beq.w	8009c68 <_dtoa_r+0xbc0>
 8009906:	2300      	movs	r3, #0
 8009908:	4639      	mov	r1, r7
 800990a:	220a      	movs	r2, #10
 800990c:	4620      	mov	r0, r4
 800990e:	f000 ffc7 	bl	800a8a0 <__multadd>
 8009912:	9b02      	ldr	r3, [sp, #8]
 8009914:	2b00      	cmp	r3, #0
 8009916:	4607      	mov	r7, r0
 8009918:	f300 808e 	bgt.w	8009a38 <_dtoa_r+0x990>
 800991c:	9b06      	ldr	r3, [sp, #24]
 800991e:	2b02      	cmp	r3, #2
 8009920:	dc51      	bgt.n	80099c6 <_dtoa_r+0x91e>
 8009922:	e089      	b.n	8009a38 <_dtoa_r+0x990>
 8009924:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009926:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800992a:	e74b      	b.n	80097c4 <_dtoa_r+0x71c>
 800992c:	9b03      	ldr	r3, [sp, #12]
 800992e:	1e5e      	subs	r6, r3, #1
 8009930:	9b07      	ldr	r3, [sp, #28]
 8009932:	42b3      	cmp	r3, r6
 8009934:	bfbf      	itttt	lt
 8009936:	9b07      	ldrlt	r3, [sp, #28]
 8009938:	9607      	strlt	r6, [sp, #28]
 800993a:	1af2      	sublt	r2, r6, r3
 800993c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800993e:	bfb6      	itet	lt
 8009940:	189b      	addlt	r3, r3, r2
 8009942:	1b9e      	subge	r6, r3, r6
 8009944:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009946:	9b03      	ldr	r3, [sp, #12]
 8009948:	bfb8      	it	lt
 800994a:	2600      	movlt	r6, #0
 800994c:	2b00      	cmp	r3, #0
 800994e:	bfb7      	itett	lt
 8009950:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009954:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009958:	1a9d      	sublt	r5, r3, r2
 800995a:	2300      	movlt	r3, #0
 800995c:	e734      	b.n	80097c8 <_dtoa_r+0x720>
 800995e:	9e07      	ldr	r6, [sp, #28]
 8009960:	9d04      	ldr	r5, [sp, #16]
 8009962:	9f08      	ldr	r7, [sp, #32]
 8009964:	e73b      	b.n	80097de <_dtoa_r+0x736>
 8009966:	9a07      	ldr	r2, [sp, #28]
 8009968:	e767      	b.n	800983a <_dtoa_r+0x792>
 800996a:	9b06      	ldr	r3, [sp, #24]
 800996c:	2b01      	cmp	r3, #1
 800996e:	dc18      	bgt.n	80099a2 <_dtoa_r+0x8fa>
 8009970:	f1ba 0f00 	cmp.w	sl, #0
 8009974:	d115      	bne.n	80099a2 <_dtoa_r+0x8fa>
 8009976:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800997a:	b993      	cbnz	r3, 80099a2 <_dtoa_r+0x8fa>
 800997c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009980:	0d1b      	lsrs	r3, r3, #20
 8009982:	051b      	lsls	r3, r3, #20
 8009984:	b183      	cbz	r3, 80099a8 <_dtoa_r+0x900>
 8009986:	9b04      	ldr	r3, [sp, #16]
 8009988:	3301      	adds	r3, #1
 800998a:	9304      	str	r3, [sp, #16]
 800998c:	9b05      	ldr	r3, [sp, #20]
 800998e:	3301      	adds	r3, #1
 8009990:	9305      	str	r3, [sp, #20]
 8009992:	f04f 0801 	mov.w	r8, #1
 8009996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009998:	2b00      	cmp	r3, #0
 800999a:	f47f af6a 	bne.w	8009872 <_dtoa_r+0x7ca>
 800999e:	2001      	movs	r0, #1
 80099a0:	e76f      	b.n	8009882 <_dtoa_r+0x7da>
 80099a2:	f04f 0800 	mov.w	r8, #0
 80099a6:	e7f6      	b.n	8009996 <_dtoa_r+0x8ee>
 80099a8:	4698      	mov	r8, r3
 80099aa:	e7f4      	b.n	8009996 <_dtoa_r+0x8ee>
 80099ac:	f43f af7d 	beq.w	80098aa <_dtoa_r+0x802>
 80099b0:	4618      	mov	r0, r3
 80099b2:	301c      	adds	r0, #28
 80099b4:	e772      	b.n	800989c <_dtoa_r+0x7f4>
 80099b6:	9b03      	ldr	r3, [sp, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	dc37      	bgt.n	8009a2c <_dtoa_r+0x984>
 80099bc:	9b06      	ldr	r3, [sp, #24]
 80099be:	2b02      	cmp	r3, #2
 80099c0:	dd34      	ble.n	8009a2c <_dtoa_r+0x984>
 80099c2:	9b03      	ldr	r3, [sp, #12]
 80099c4:	9302      	str	r3, [sp, #8]
 80099c6:	9b02      	ldr	r3, [sp, #8]
 80099c8:	b96b      	cbnz	r3, 80099e6 <_dtoa_r+0x93e>
 80099ca:	4631      	mov	r1, r6
 80099cc:	2205      	movs	r2, #5
 80099ce:	4620      	mov	r0, r4
 80099d0:	f000 ff66 	bl	800a8a0 <__multadd>
 80099d4:	4601      	mov	r1, r0
 80099d6:	4606      	mov	r6, r0
 80099d8:	ee18 0a10 	vmov	r0, s16
 80099dc:	f001 f9ca 	bl	800ad74 <__mcmp>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	f73f adbb 	bgt.w	800955c <_dtoa_r+0x4b4>
 80099e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099e8:	9d01      	ldr	r5, [sp, #4]
 80099ea:	43db      	mvns	r3, r3
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	f04f 0800 	mov.w	r8, #0
 80099f2:	4631      	mov	r1, r6
 80099f4:	4620      	mov	r0, r4
 80099f6:	f000 ff31 	bl	800a85c <_Bfree>
 80099fa:	2f00      	cmp	r7, #0
 80099fc:	f43f aea4 	beq.w	8009748 <_dtoa_r+0x6a0>
 8009a00:	f1b8 0f00 	cmp.w	r8, #0
 8009a04:	d005      	beq.n	8009a12 <_dtoa_r+0x96a>
 8009a06:	45b8      	cmp	r8, r7
 8009a08:	d003      	beq.n	8009a12 <_dtoa_r+0x96a>
 8009a0a:	4641      	mov	r1, r8
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f000 ff25 	bl	800a85c <_Bfree>
 8009a12:	4639      	mov	r1, r7
 8009a14:	4620      	mov	r0, r4
 8009a16:	f000 ff21 	bl	800a85c <_Bfree>
 8009a1a:	e695      	b.n	8009748 <_dtoa_r+0x6a0>
 8009a1c:	2600      	movs	r6, #0
 8009a1e:	4637      	mov	r7, r6
 8009a20:	e7e1      	b.n	80099e6 <_dtoa_r+0x93e>
 8009a22:	9700      	str	r7, [sp, #0]
 8009a24:	4637      	mov	r7, r6
 8009a26:	e599      	b.n	800955c <_dtoa_r+0x4b4>
 8009a28:	40240000 	.word	0x40240000
 8009a2c:	9b08      	ldr	r3, [sp, #32]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f000 80ca 	beq.w	8009bc8 <_dtoa_r+0xb20>
 8009a34:	9b03      	ldr	r3, [sp, #12]
 8009a36:	9302      	str	r3, [sp, #8]
 8009a38:	2d00      	cmp	r5, #0
 8009a3a:	dd05      	ble.n	8009a48 <_dtoa_r+0x9a0>
 8009a3c:	4639      	mov	r1, r7
 8009a3e:	462a      	mov	r2, r5
 8009a40:	4620      	mov	r0, r4
 8009a42:	f001 f927 	bl	800ac94 <__lshift>
 8009a46:	4607      	mov	r7, r0
 8009a48:	f1b8 0f00 	cmp.w	r8, #0
 8009a4c:	d05b      	beq.n	8009b06 <_dtoa_r+0xa5e>
 8009a4e:	6879      	ldr	r1, [r7, #4]
 8009a50:	4620      	mov	r0, r4
 8009a52:	f000 fec3 	bl	800a7dc <_Balloc>
 8009a56:	4605      	mov	r5, r0
 8009a58:	b928      	cbnz	r0, 8009a66 <_dtoa_r+0x9be>
 8009a5a:	4b87      	ldr	r3, [pc, #540]	; (8009c78 <_dtoa_r+0xbd0>)
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009a62:	f7ff bb3b 	b.w	80090dc <_dtoa_r+0x34>
 8009a66:	693a      	ldr	r2, [r7, #16]
 8009a68:	3202      	adds	r2, #2
 8009a6a:	0092      	lsls	r2, r2, #2
 8009a6c:	f107 010c 	add.w	r1, r7, #12
 8009a70:	300c      	adds	r0, #12
 8009a72:	f7fd fe79 	bl	8007768 <memcpy>
 8009a76:	2201      	movs	r2, #1
 8009a78:	4629      	mov	r1, r5
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f001 f90a 	bl	800ac94 <__lshift>
 8009a80:	9b01      	ldr	r3, [sp, #4]
 8009a82:	f103 0901 	add.w	r9, r3, #1
 8009a86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	9305      	str	r3, [sp, #20]
 8009a8e:	f00a 0301 	and.w	r3, sl, #1
 8009a92:	46b8      	mov	r8, r7
 8009a94:	9304      	str	r3, [sp, #16]
 8009a96:	4607      	mov	r7, r0
 8009a98:	4631      	mov	r1, r6
 8009a9a:	ee18 0a10 	vmov	r0, s16
 8009a9e:	f7ff fa75 	bl	8008f8c <quorem>
 8009aa2:	4641      	mov	r1, r8
 8009aa4:	9002      	str	r0, [sp, #8]
 8009aa6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009aaa:	ee18 0a10 	vmov	r0, s16
 8009aae:	f001 f961 	bl	800ad74 <__mcmp>
 8009ab2:	463a      	mov	r2, r7
 8009ab4:	9003      	str	r0, [sp, #12]
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	4620      	mov	r0, r4
 8009aba:	f001 f977 	bl	800adac <__mdiff>
 8009abe:	68c2      	ldr	r2, [r0, #12]
 8009ac0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8009ac4:	4605      	mov	r5, r0
 8009ac6:	bb02      	cbnz	r2, 8009b0a <_dtoa_r+0xa62>
 8009ac8:	4601      	mov	r1, r0
 8009aca:	ee18 0a10 	vmov	r0, s16
 8009ace:	f001 f951 	bl	800ad74 <__mcmp>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	9207      	str	r2, [sp, #28]
 8009ada:	f000 febf 	bl	800a85c <_Bfree>
 8009ade:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009ae2:	ea43 0102 	orr.w	r1, r3, r2
 8009ae6:	9b04      	ldr	r3, [sp, #16]
 8009ae8:	430b      	orrs	r3, r1
 8009aea:	464d      	mov	r5, r9
 8009aec:	d10f      	bne.n	8009b0e <_dtoa_r+0xa66>
 8009aee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009af2:	d02a      	beq.n	8009b4a <_dtoa_r+0xaa2>
 8009af4:	9b03      	ldr	r3, [sp, #12]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	dd02      	ble.n	8009b00 <_dtoa_r+0xa58>
 8009afa:	9b02      	ldr	r3, [sp, #8]
 8009afc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009b00:	f88b a000 	strb.w	sl, [fp]
 8009b04:	e775      	b.n	80099f2 <_dtoa_r+0x94a>
 8009b06:	4638      	mov	r0, r7
 8009b08:	e7ba      	b.n	8009a80 <_dtoa_r+0x9d8>
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	e7e2      	b.n	8009ad4 <_dtoa_r+0xa2c>
 8009b0e:	9b03      	ldr	r3, [sp, #12]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	db04      	blt.n	8009b1e <_dtoa_r+0xa76>
 8009b14:	9906      	ldr	r1, [sp, #24]
 8009b16:	430b      	orrs	r3, r1
 8009b18:	9904      	ldr	r1, [sp, #16]
 8009b1a:	430b      	orrs	r3, r1
 8009b1c:	d122      	bne.n	8009b64 <_dtoa_r+0xabc>
 8009b1e:	2a00      	cmp	r2, #0
 8009b20:	ddee      	ble.n	8009b00 <_dtoa_r+0xa58>
 8009b22:	ee18 1a10 	vmov	r1, s16
 8009b26:	2201      	movs	r2, #1
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f001 f8b3 	bl	800ac94 <__lshift>
 8009b2e:	4631      	mov	r1, r6
 8009b30:	ee08 0a10 	vmov	s16, r0
 8009b34:	f001 f91e 	bl	800ad74 <__mcmp>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	dc03      	bgt.n	8009b44 <_dtoa_r+0xa9c>
 8009b3c:	d1e0      	bne.n	8009b00 <_dtoa_r+0xa58>
 8009b3e:	f01a 0f01 	tst.w	sl, #1
 8009b42:	d0dd      	beq.n	8009b00 <_dtoa_r+0xa58>
 8009b44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b48:	d1d7      	bne.n	8009afa <_dtoa_r+0xa52>
 8009b4a:	2339      	movs	r3, #57	; 0x39
 8009b4c:	f88b 3000 	strb.w	r3, [fp]
 8009b50:	462b      	mov	r3, r5
 8009b52:	461d      	mov	r5, r3
 8009b54:	3b01      	subs	r3, #1
 8009b56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009b5a:	2a39      	cmp	r2, #57	; 0x39
 8009b5c:	d071      	beq.n	8009c42 <_dtoa_r+0xb9a>
 8009b5e:	3201      	adds	r2, #1
 8009b60:	701a      	strb	r2, [r3, #0]
 8009b62:	e746      	b.n	80099f2 <_dtoa_r+0x94a>
 8009b64:	2a00      	cmp	r2, #0
 8009b66:	dd07      	ble.n	8009b78 <_dtoa_r+0xad0>
 8009b68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b6c:	d0ed      	beq.n	8009b4a <_dtoa_r+0xaa2>
 8009b6e:	f10a 0301 	add.w	r3, sl, #1
 8009b72:	f88b 3000 	strb.w	r3, [fp]
 8009b76:	e73c      	b.n	80099f2 <_dtoa_r+0x94a>
 8009b78:	9b05      	ldr	r3, [sp, #20]
 8009b7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009b7e:	4599      	cmp	r9, r3
 8009b80:	d047      	beq.n	8009c12 <_dtoa_r+0xb6a>
 8009b82:	ee18 1a10 	vmov	r1, s16
 8009b86:	2300      	movs	r3, #0
 8009b88:	220a      	movs	r2, #10
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f000 fe88 	bl	800a8a0 <__multadd>
 8009b90:	45b8      	cmp	r8, r7
 8009b92:	ee08 0a10 	vmov	s16, r0
 8009b96:	f04f 0300 	mov.w	r3, #0
 8009b9a:	f04f 020a 	mov.w	r2, #10
 8009b9e:	4641      	mov	r1, r8
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	d106      	bne.n	8009bb2 <_dtoa_r+0xb0a>
 8009ba4:	f000 fe7c 	bl	800a8a0 <__multadd>
 8009ba8:	4680      	mov	r8, r0
 8009baa:	4607      	mov	r7, r0
 8009bac:	f109 0901 	add.w	r9, r9, #1
 8009bb0:	e772      	b.n	8009a98 <_dtoa_r+0x9f0>
 8009bb2:	f000 fe75 	bl	800a8a0 <__multadd>
 8009bb6:	4639      	mov	r1, r7
 8009bb8:	4680      	mov	r8, r0
 8009bba:	2300      	movs	r3, #0
 8009bbc:	220a      	movs	r2, #10
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f000 fe6e 	bl	800a8a0 <__multadd>
 8009bc4:	4607      	mov	r7, r0
 8009bc6:	e7f1      	b.n	8009bac <_dtoa_r+0xb04>
 8009bc8:	9b03      	ldr	r3, [sp, #12]
 8009bca:	9302      	str	r3, [sp, #8]
 8009bcc:	9d01      	ldr	r5, [sp, #4]
 8009bce:	ee18 0a10 	vmov	r0, s16
 8009bd2:	4631      	mov	r1, r6
 8009bd4:	f7ff f9da 	bl	8008f8c <quorem>
 8009bd8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009bdc:	9b01      	ldr	r3, [sp, #4]
 8009bde:	f805 ab01 	strb.w	sl, [r5], #1
 8009be2:	1aea      	subs	r2, r5, r3
 8009be4:	9b02      	ldr	r3, [sp, #8]
 8009be6:	4293      	cmp	r3, r2
 8009be8:	dd09      	ble.n	8009bfe <_dtoa_r+0xb56>
 8009bea:	ee18 1a10 	vmov	r1, s16
 8009bee:	2300      	movs	r3, #0
 8009bf0:	220a      	movs	r2, #10
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f000 fe54 	bl	800a8a0 <__multadd>
 8009bf8:	ee08 0a10 	vmov	s16, r0
 8009bfc:	e7e7      	b.n	8009bce <_dtoa_r+0xb26>
 8009bfe:	9b02      	ldr	r3, [sp, #8]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	bfc8      	it	gt
 8009c04:	461d      	movgt	r5, r3
 8009c06:	9b01      	ldr	r3, [sp, #4]
 8009c08:	bfd8      	it	le
 8009c0a:	2501      	movle	r5, #1
 8009c0c:	441d      	add	r5, r3
 8009c0e:	f04f 0800 	mov.w	r8, #0
 8009c12:	ee18 1a10 	vmov	r1, s16
 8009c16:	2201      	movs	r2, #1
 8009c18:	4620      	mov	r0, r4
 8009c1a:	f001 f83b 	bl	800ac94 <__lshift>
 8009c1e:	4631      	mov	r1, r6
 8009c20:	ee08 0a10 	vmov	s16, r0
 8009c24:	f001 f8a6 	bl	800ad74 <__mcmp>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	dc91      	bgt.n	8009b50 <_dtoa_r+0xaa8>
 8009c2c:	d102      	bne.n	8009c34 <_dtoa_r+0xb8c>
 8009c2e:	f01a 0f01 	tst.w	sl, #1
 8009c32:	d18d      	bne.n	8009b50 <_dtoa_r+0xaa8>
 8009c34:	462b      	mov	r3, r5
 8009c36:	461d      	mov	r5, r3
 8009c38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c3c:	2a30      	cmp	r2, #48	; 0x30
 8009c3e:	d0fa      	beq.n	8009c36 <_dtoa_r+0xb8e>
 8009c40:	e6d7      	b.n	80099f2 <_dtoa_r+0x94a>
 8009c42:	9a01      	ldr	r2, [sp, #4]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d184      	bne.n	8009b52 <_dtoa_r+0xaaa>
 8009c48:	9b00      	ldr	r3, [sp, #0]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	9300      	str	r3, [sp, #0]
 8009c4e:	2331      	movs	r3, #49	; 0x31
 8009c50:	7013      	strb	r3, [r2, #0]
 8009c52:	e6ce      	b.n	80099f2 <_dtoa_r+0x94a>
 8009c54:	4b09      	ldr	r3, [pc, #36]	; (8009c7c <_dtoa_r+0xbd4>)
 8009c56:	f7ff ba95 	b.w	8009184 <_dtoa_r+0xdc>
 8009c5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f47f aa6e 	bne.w	800913e <_dtoa_r+0x96>
 8009c62:	4b07      	ldr	r3, [pc, #28]	; (8009c80 <_dtoa_r+0xbd8>)
 8009c64:	f7ff ba8e 	b.w	8009184 <_dtoa_r+0xdc>
 8009c68:	9b02      	ldr	r3, [sp, #8]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	dcae      	bgt.n	8009bcc <_dtoa_r+0xb24>
 8009c6e:	9b06      	ldr	r3, [sp, #24]
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	f73f aea8 	bgt.w	80099c6 <_dtoa_r+0x91e>
 8009c76:	e7a9      	b.n	8009bcc <_dtoa_r+0xb24>
 8009c78:	0800c24f 	.word	0x0800c24f
 8009c7c:	0800c15c 	.word	0x0800c15c
 8009c80:	0800c1d0 	.word	0x0800c1d0

08009c84 <__sflush_r>:
 8009c84:	898a      	ldrh	r2, [r1, #12]
 8009c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c8a:	4605      	mov	r5, r0
 8009c8c:	0710      	lsls	r0, r2, #28
 8009c8e:	460c      	mov	r4, r1
 8009c90:	d458      	bmi.n	8009d44 <__sflush_r+0xc0>
 8009c92:	684b      	ldr	r3, [r1, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	dc05      	bgt.n	8009ca4 <__sflush_r+0x20>
 8009c98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	dc02      	bgt.n	8009ca4 <__sflush_r+0x20>
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ca6:	2e00      	cmp	r6, #0
 8009ca8:	d0f9      	beq.n	8009c9e <__sflush_r+0x1a>
 8009caa:	2300      	movs	r3, #0
 8009cac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cb0:	682f      	ldr	r7, [r5, #0]
 8009cb2:	602b      	str	r3, [r5, #0]
 8009cb4:	d032      	beq.n	8009d1c <__sflush_r+0x98>
 8009cb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cb8:	89a3      	ldrh	r3, [r4, #12]
 8009cba:	075a      	lsls	r2, r3, #29
 8009cbc:	d505      	bpl.n	8009cca <__sflush_r+0x46>
 8009cbe:	6863      	ldr	r3, [r4, #4]
 8009cc0:	1ac0      	subs	r0, r0, r3
 8009cc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cc4:	b10b      	cbz	r3, 8009cca <__sflush_r+0x46>
 8009cc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cc8:	1ac0      	subs	r0, r0, r3
 8009cca:	2300      	movs	r3, #0
 8009ccc:	4602      	mov	r2, r0
 8009cce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cd0:	6a21      	ldr	r1, [r4, #32]
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	47b0      	blx	r6
 8009cd6:	1c43      	adds	r3, r0, #1
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	d106      	bne.n	8009cea <__sflush_r+0x66>
 8009cdc:	6829      	ldr	r1, [r5, #0]
 8009cde:	291d      	cmp	r1, #29
 8009ce0:	d82c      	bhi.n	8009d3c <__sflush_r+0xb8>
 8009ce2:	4a2a      	ldr	r2, [pc, #168]	; (8009d8c <__sflush_r+0x108>)
 8009ce4:	40ca      	lsrs	r2, r1
 8009ce6:	07d6      	lsls	r6, r2, #31
 8009ce8:	d528      	bpl.n	8009d3c <__sflush_r+0xb8>
 8009cea:	2200      	movs	r2, #0
 8009cec:	6062      	str	r2, [r4, #4]
 8009cee:	04d9      	lsls	r1, r3, #19
 8009cf0:	6922      	ldr	r2, [r4, #16]
 8009cf2:	6022      	str	r2, [r4, #0]
 8009cf4:	d504      	bpl.n	8009d00 <__sflush_r+0x7c>
 8009cf6:	1c42      	adds	r2, r0, #1
 8009cf8:	d101      	bne.n	8009cfe <__sflush_r+0x7a>
 8009cfa:	682b      	ldr	r3, [r5, #0]
 8009cfc:	b903      	cbnz	r3, 8009d00 <__sflush_r+0x7c>
 8009cfe:	6560      	str	r0, [r4, #84]	; 0x54
 8009d00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d02:	602f      	str	r7, [r5, #0]
 8009d04:	2900      	cmp	r1, #0
 8009d06:	d0ca      	beq.n	8009c9e <__sflush_r+0x1a>
 8009d08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d0c:	4299      	cmp	r1, r3
 8009d0e:	d002      	beq.n	8009d16 <__sflush_r+0x92>
 8009d10:	4628      	mov	r0, r5
 8009d12:	f001 fa3b 	bl	800b18c <_free_r>
 8009d16:	2000      	movs	r0, #0
 8009d18:	6360      	str	r0, [r4, #52]	; 0x34
 8009d1a:	e7c1      	b.n	8009ca0 <__sflush_r+0x1c>
 8009d1c:	6a21      	ldr	r1, [r4, #32]
 8009d1e:	2301      	movs	r3, #1
 8009d20:	4628      	mov	r0, r5
 8009d22:	47b0      	blx	r6
 8009d24:	1c41      	adds	r1, r0, #1
 8009d26:	d1c7      	bne.n	8009cb8 <__sflush_r+0x34>
 8009d28:	682b      	ldr	r3, [r5, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d0c4      	beq.n	8009cb8 <__sflush_r+0x34>
 8009d2e:	2b1d      	cmp	r3, #29
 8009d30:	d001      	beq.n	8009d36 <__sflush_r+0xb2>
 8009d32:	2b16      	cmp	r3, #22
 8009d34:	d101      	bne.n	8009d3a <__sflush_r+0xb6>
 8009d36:	602f      	str	r7, [r5, #0]
 8009d38:	e7b1      	b.n	8009c9e <__sflush_r+0x1a>
 8009d3a:	89a3      	ldrh	r3, [r4, #12]
 8009d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d40:	81a3      	strh	r3, [r4, #12]
 8009d42:	e7ad      	b.n	8009ca0 <__sflush_r+0x1c>
 8009d44:	690f      	ldr	r7, [r1, #16]
 8009d46:	2f00      	cmp	r7, #0
 8009d48:	d0a9      	beq.n	8009c9e <__sflush_r+0x1a>
 8009d4a:	0793      	lsls	r3, r2, #30
 8009d4c:	680e      	ldr	r6, [r1, #0]
 8009d4e:	bf08      	it	eq
 8009d50:	694b      	ldreq	r3, [r1, #20]
 8009d52:	600f      	str	r7, [r1, #0]
 8009d54:	bf18      	it	ne
 8009d56:	2300      	movne	r3, #0
 8009d58:	eba6 0807 	sub.w	r8, r6, r7
 8009d5c:	608b      	str	r3, [r1, #8]
 8009d5e:	f1b8 0f00 	cmp.w	r8, #0
 8009d62:	dd9c      	ble.n	8009c9e <__sflush_r+0x1a>
 8009d64:	6a21      	ldr	r1, [r4, #32]
 8009d66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d68:	4643      	mov	r3, r8
 8009d6a:	463a      	mov	r2, r7
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	47b0      	blx	r6
 8009d70:	2800      	cmp	r0, #0
 8009d72:	dc06      	bgt.n	8009d82 <__sflush_r+0xfe>
 8009d74:	89a3      	ldrh	r3, [r4, #12]
 8009d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d7a:	81a3      	strh	r3, [r4, #12]
 8009d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d80:	e78e      	b.n	8009ca0 <__sflush_r+0x1c>
 8009d82:	4407      	add	r7, r0
 8009d84:	eba8 0800 	sub.w	r8, r8, r0
 8009d88:	e7e9      	b.n	8009d5e <__sflush_r+0xda>
 8009d8a:	bf00      	nop
 8009d8c:	20400001 	.word	0x20400001

08009d90 <_fflush_r>:
 8009d90:	b538      	push	{r3, r4, r5, lr}
 8009d92:	690b      	ldr	r3, [r1, #16]
 8009d94:	4605      	mov	r5, r0
 8009d96:	460c      	mov	r4, r1
 8009d98:	b913      	cbnz	r3, 8009da0 <_fflush_r+0x10>
 8009d9a:	2500      	movs	r5, #0
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	b118      	cbz	r0, 8009daa <_fflush_r+0x1a>
 8009da2:	6983      	ldr	r3, [r0, #24]
 8009da4:	b90b      	cbnz	r3, 8009daa <_fflush_r+0x1a>
 8009da6:	f000 f887 	bl	8009eb8 <__sinit>
 8009daa:	4b14      	ldr	r3, [pc, #80]	; (8009dfc <_fflush_r+0x6c>)
 8009dac:	429c      	cmp	r4, r3
 8009dae:	d11b      	bne.n	8009de8 <_fflush_r+0x58>
 8009db0:	686c      	ldr	r4, [r5, #4]
 8009db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d0ef      	beq.n	8009d9a <_fflush_r+0xa>
 8009dba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009dbc:	07d0      	lsls	r0, r2, #31
 8009dbe:	d404      	bmi.n	8009dca <_fflush_r+0x3a>
 8009dc0:	0599      	lsls	r1, r3, #22
 8009dc2:	d402      	bmi.n	8009dca <_fflush_r+0x3a>
 8009dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dc6:	f000 fc88 	bl	800a6da <__retarget_lock_acquire_recursive>
 8009dca:	4628      	mov	r0, r5
 8009dcc:	4621      	mov	r1, r4
 8009dce:	f7ff ff59 	bl	8009c84 <__sflush_r>
 8009dd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dd4:	07da      	lsls	r2, r3, #31
 8009dd6:	4605      	mov	r5, r0
 8009dd8:	d4e0      	bmi.n	8009d9c <_fflush_r+0xc>
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	059b      	lsls	r3, r3, #22
 8009dde:	d4dd      	bmi.n	8009d9c <_fflush_r+0xc>
 8009de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009de2:	f000 fc7b 	bl	800a6dc <__retarget_lock_release_recursive>
 8009de6:	e7d9      	b.n	8009d9c <_fflush_r+0xc>
 8009de8:	4b05      	ldr	r3, [pc, #20]	; (8009e00 <_fflush_r+0x70>)
 8009dea:	429c      	cmp	r4, r3
 8009dec:	d101      	bne.n	8009df2 <_fflush_r+0x62>
 8009dee:	68ac      	ldr	r4, [r5, #8]
 8009df0:	e7df      	b.n	8009db2 <_fflush_r+0x22>
 8009df2:	4b04      	ldr	r3, [pc, #16]	; (8009e04 <_fflush_r+0x74>)
 8009df4:	429c      	cmp	r4, r3
 8009df6:	bf08      	it	eq
 8009df8:	68ec      	ldreq	r4, [r5, #12]
 8009dfa:	e7da      	b.n	8009db2 <_fflush_r+0x22>
 8009dfc:	0800c280 	.word	0x0800c280
 8009e00:	0800c2a0 	.word	0x0800c2a0
 8009e04:	0800c260 	.word	0x0800c260

08009e08 <std>:
 8009e08:	2300      	movs	r3, #0
 8009e0a:	b510      	push	{r4, lr}
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	e9c0 3300 	strd	r3, r3, [r0]
 8009e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e16:	6083      	str	r3, [r0, #8]
 8009e18:	8181      	strh	r1, [r0, #12]
 8009e1a:	6643      	str	r3, [r0, #100]	; 0x64
 8009e1c:	81c2      	strh	r2, [r0, #14]
 8009e1e:	6183      	str	r3, [r0, #24]
 8009e20:	4619      	mov	r1, r3
 8009e22:	2208      	movs	r2, #8
 8009e24:	305c      	adds	r0, #92	; 0x5c
 8009e26:	f7fd fcad 	bl	8007784 <memset>
 8009e2a:	4b05      	ldr	r3, [pc, #20]	; (8009e40 <std+0x38>)
 8009e2c:	6263      	str	r3, [r4, #36]	; 0x24
 8009e2e:	4b05      	ldr	r3, [pc, #20]	; (8009e44 <std+0x3c>)
 8009e30:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e32:	4b05      	ldr	r3, [pc, #20]	; (8009e48 <std+0x40>)
 8009e34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e36:	4b05      	ldr	r3, [pc, #20]	; (8009e4c <std+0x44>)
 8009e38:	6224      	str	r4, [r4, #32]
 8009e3a:	6323      	str	r3, [r4, #48]	; 0x30
 8009e3c:	bd10      	pop	{r4, pc}
 8009e3e:	bf00      	nop
 8009e40:	0800b631 	.word	0x0800b631
 8009e44:	0800b653 	.word	0x0800b653
 8009e48:	0800b68b 	.word	0x0800b68b
 8009e4c:	0800b6af 	.word	0x0800b6af

08009e50 <_cleanup_r>:
 8009e50:	4901      	ldr	r1, [pc, #4]	; (8009e58 <_cleanup_r+0x8>)
 8009e52:	f000 b8af 	b.w	8009fb4 <_fwalk_reent>
 8009e56:	bf00      	nop
 8009e58:	08009d91 	.word	0x08009d91

08009e5c <__sfmoreglue>:
 8009e5c:	b570      	push	{r4, r5, r6, lr}
 8009e5e:	2268      	movs	r2, #104	; 0x68
 8009e60:	1e4d      	subs	r5, r1, #1
 8009e62:	4355      	muls	r5, r2
 8009e64:	460e      	mov	r6, r1
 8009e66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e6a:	f001 f9fb 	bl	800b264 <_malloc_r>
 8009e6e:	4604      	mov	r4, r0
 8009e70:	b140      	cbz	r0, 8009e84 <__sfmoreglue+0x28>
 8009e72:	2100      	movs	r1, #0
 8009e74:	e9c0 1600 	strd	r1, r6, [r0]
 8009e78:	300c      	adds	r0, #12
 8009e7a:	60a0      	str	r0, [r4, #8]
 8009e7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e80:	f7fd fc80 	bl	8007784 <memset>
 8009e84:	4620      	mov	r0, r4
 8009e86:	bd70      	pop	{r4, r5, r6, pc}

08009e88 <__sfp_lock_acquire>:
 8009e88:	4801      	ldr	r0, [pc, #4]	; (8009e90 <__sfp_lock_acquire+0x8>)
 8009e8a:	f000 bc26 	b.w	800a6da <__retarget_lock_acquire_recursive>
 8009e8e:	bf00      	nop
 8009e90:	200008f1 	.word	0x200008f1

08009e94 <__sfp_lock_release>:
 8009e94:	4801      	ldr	r0, [pc, #4]	; (8009e9c <__sfp_lock_release+0x8>)
 8009e96:	f000 bc21 	b.w	800a6dc <__retarget_lock_release_recursive>
 8009e9a:	bf00      	nop
 8009e9c:	200008f1 	.word	0x200008f1

08009ea0 <__sinit_lock_acquire>:
 8009ea0:	4801      	ldr	r0, [pc, #4]	; (8009ea8 <__sinit_lock_acquire+0x8>)
 8009ea2:	f000 bc1a 	b.w	800a6da <__retarget_lock_acquire_recursive>
 8009ea6:	bf00      	nop
 8009ea8:	200008f2 	.word	0x200008f2

08009eac <__sinit_lock_release>:
 8009eac:	4801      	ldr	r0, [pc, #4]	; (8009eb4 <__sinit_lock_release+0x8>)
 8009eae:	f000 bc15 	b.w	800a6dc <__retarget_lock_release_recursive>
 8009eb2:	bf00      	nop
 8009eb4:	200008f2 	.word	0x200008f2

08009eb8 <__sinit>:
 8009eb8:	b510      	push	{r4, lr}
 8009eba:	4604      	mov	r4, r0
 8009ebc:	f7ff fff0 	bl	8009ea0 <__sinit_lock_acquire>
 8009ec0:	69a3      	ldr	r3, [r4, #24]
 8009ec2:	b11b      	cbz	r3, 8009ecc <__sinit+0x14>
 8009ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ec8:	f7ff bff0 	b.w	8009eac <__sinit_lock_release>
 8009ecc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ed0:	6523      	str	r3, [r4, #80]	; 0x50
 8009ed2:	4b13      	ldr	r3, [pc, #76]	; (8009f20 <__sinit+0x68>)
 8009ed4:	4a13      	ldr	r2, [pc, #76]	; (8009f24 <__sinit+0x6c>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009eda:	42a3      	cmp	r3, r4
 8009edc:	bf04      	itt	eq
 8009ede:	2301      	moveq	r3, #1
 8009ee0:	61a3      	streq	r3, [r4, #24]
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f000 f820 	bl	8009f28 <__sfp>
 8009ee8:	6060      	str	r0, [r4, #4]
 8009eea:	4620      	mov	r0, r4
 8009eec:	f000 f81c 	bl	8009f28 <__sfp>
 8009ef0:	60a0      	str	r0, [r4, #8]
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f000 f818 	bl	8009f28 <__sfp>
 8009ef8:	2200      	movs	r2, #0
 8009efa:	60e0      	str	r0, [r4, #12]
 8009efc:	2104      	movs	r1, #4
 8009efe:	6860      	ldr	r0, [r4, #4]
 8009f00:	f7ff ff82 	bl	8009e08 <std>
 8009f04:	68a0      	ldr	r0, [r4, #8]
 8009f06:	2201      	movs	r2, #1
 8009f08:	2109      	movs	r1, #9
 8009f0a:	f7ff ff7d 	bl	8009e08 <std>
 8009f0e:	68e0      	ldr	r0, [r4, #12]
 8009f10:	2202      	movs	r2, #2
 8009f12:	2112      	movs	r1, #18
 8009f14:	f7ff ff78 	bl	8009e08 <std>
 8009f18:	2301      	movs	r3, #1
 8009f1a:	61a3      	str	r3, [r4, #24]
 8009f1c:	e7d2      	b.n	8009ec4 <__sinit+0xc>
 8009f1e:	bf00      	nop
 8009f20:	0800c148 	.word	0x0800c148
 8009f24:	08009e51 	.word	0x08009e51

08009f28 <__sfp>:
 8009f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2a:	4607      	mov	r7, r0
 8009f2c:	f7ff ffac 	bl	8009e88 <__sfp_lock_acquire>
 8009f30:	4b1e      	ldr	r3, [pc, #120]	; (8009fac <__sfp+0x84>)
 8009f32:	681e      	ldr	r6, [r3, #0]
 8009f34:	69b3      	ldr	r3, [r6, #24]
 8009f36:	b913      	cbnz	r3, 8009f3e <__sfp+0x16>
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f7ff ffbd 	bl	8009eb8 <__sinit>
 8009f3e:	3648      	adds	r6, #72	; 0x48
 8009f40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f44:	3b01      	subs	r3, #1
 8009f46:	d503      	bpl.n	8009f50 <__sfp+0x28>
 8009f48:	6833      	ldr	r3, [r6, #0]
 8009f4a:	b30b      	cbz	r3, 8009f90 <__sfp+0x68>
 8009f4c:	6836      	ldr	r6, [r6, #0]
 8009f4e:	e7f7      	b.n	8009f40 <__sfp+0x18>
 8009f50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f54:	b9d5      	cbnz	r5, 8009f8c <__sfp+0x64>
 8009f56:	4b16      	ldr	r3, [pc, #88]	; (8009fb0 <__sfp+0x88>)
 8009f58:	60e3      	str	r3, [r4, #12]
 8009f5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f5e:	6665      	str	r5, [r4, #100]	; 0x64
 8009f60:	f000 fbba 	bl	800a6d8 <__retarget_lock_init_recursive>
 8009f64:	f7ff ff96 	bl	8009e94 <__sfp_lock_release>
 8009f68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f70:	6025      	str	r5, [r4, #0]
 8009f72:	61a5      	str	r5, [r4, #24]
 8009f74:	2208      	movs	r2, #8
 8009f76:	4629      	mov	r1, r5
 8009f78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f7c:	f7fd fc02 	bl	8007784 <memset>
 8009f80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f88:	4620      	mov	r0, r4
 8009f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f8c:	3468      	adds	r4, #104	; 0x68
 8009f8e:	e7d9      	b.n	8009f44 <__sfp+0x1c>
 8009f90:	2104      	movs	r1, #4
 8009f92:	4638      	mov	r0, r7
 8009f94:	f7ff ff62 	bl	8009e5c <__sfmoreglue>
 8009f98:	4604      	mov	r4, r0
 8009f9a:	6030      	str	r0, [r6, #0]
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	d1d5      	bne.n	8009f4c <__sfp+0x24>
 8009fa0:	f7ff ff78 	bl	8009e94 <__sfp_lock_release>
 8009fa4:	230c      	movs	r3, #12
 8009fa6:	603b      	str	r3, [r7, #0]
 8009fa8:	e7ee      	b.n	8009f88 <__sfp+0x60>
 8009faa:	bf00      	nop
 8009fac:	0800c148 	.word	0x0800c148
 8009fb0:	ffff0001 	.word	0xffff0001

08009fb4 <_fwalk_reent>:
 8009fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fb8:	4606      	mov	r6, r0
 8009fba:	4688      	mov	r8, r1
 8009fbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009fc0:	2700      	movs	r7, #0
 8009fc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fc6:	f1b9 0901 	subs.w	r9, r9, #1
 8009fca:	d505      	bpl.n	8009fd8 <_fwalk_reent+0x24>
 8009fcc:	6824      	ldr	r4, [r4, #0]
 8009fce:	2c00      	cmp	r4, #0
 8009fd0:	d1f7      	bne.n	8009fc2 <_fwalk_reent+0xe>
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fd8:	89ab      	ldrh	r3, [r5, #12]
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d907      	bls.n	8009fee <_fwalk_reent+0x3a>
 8009fde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	d003      	beq.n	8009fee <_fwalk_reent+0x3a>
 8009fe6:	4629      	mov	r1, r5
 8009fe8:	4630      	mov	r0, r6
 8009fea:	47c0      	blx	r8
 8009fec:	4307      	orrs	r7, r0
 8009fee:	3568      	adds	r5, #104	; 0x68
 8009ff0:	e7e9      	b.n	8009fc6 <_fwalk_reent+0x12>

08009ff2 <rshift>:
 8009ff2:	6903      	ldr	r3, [r0, #16]
 8009ff4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ffc:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a000:	f100 0414 	add.w	r4, r0, #20
 800a004:	dd45      	ble.n	800a092 <rshift+0xa0>
 800a006:	f011 011f 	ands.w	r1, r1, #31
 800a00a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a00e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a012:	d10c      	bne.n	800a02e <rshift+0x3c>
 800a014:	f100 0710 	add.w	r7, r0, #16
 800a018:	4629      	mov	r1, r5
 800a01a:	42b1      	cmp	r1, r6
 800a01c:	d334      	bcc.n	800a088 <rshift+0x96>
 800a01e:	1a9b      	subs	r3, r3, r2
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	1eea      	subs	r2, r5, #3
 800a024:	4296      	cmp	r6, r2
 800a026:	bf38      	it	cc
 800a028:	2300      	movcc	r3, #0
 800a02a:	4423      	add	r3, r4
 800a02c:	e015      	b.n	800a05a <rshift+0x68>
 800a02e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a032:	f1c1 0820 	rsb	r8, r1, #32
 800a036:	40cf      	lsrs	r7, r1
 800a038:	f105 0e04 	add.w	lr, r5, #4
 800a03c:	46a1      	mov	r9, r4
 800a03e:	4576      	cmp	r6, lr
 800a040:	46f4      	mov	ip, lr
 800a042:	d815      	bhi.n	800a070 <rshift+0x7e>
 800a044:	1a9a      	subs	r2, r3, r2
 800a046:	0092      	lsls	r2, r2, #2
 800a048:	3a04      	subs	r2, #4
 800a04a:	3501      	adds	r5, #1
 800a04c:	42ae      	cmp	r6, r5
 800a04e:	bf38      	it	cc
 800a050:	2200      	movcc	r2, #0
 800a052:	18a3      	adds	r3, r4, r2
 800a054:	50a7      	str	r7, [r4, r2]
 800a056:	b107      	cbz	r7, 800a05a <rshift+0x68>
 800a058:	3304      	adds	r3, #4
 800a05a:	1b1a      	subs	r2, r3, r4
 800a05c:	42a3      	cmp	r3, r4
 800a05e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a062:	bf08      	it	eq
 800a064:	2300      	moveq	r3, #0
 800a066:	6102      	str	r2, [r0, #16]
 800a068:	bf08      	it	eq
 800a06a:	6143      	streq	r3, [r0, #20]
 800a06c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a070:	f8dc c000 	ldr.w	ip, [ip]
 800a074:	fa0c fc08 	lsl.w	ip, ip, r8
 800a078:	ea4c 0707 	orr.w	r7, ip, r7
 800a07c:	f849 7b04 	str.w	r7, [r9], #4
 800a080:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a084:	40cf      	lsrs	r7, r1
 800a086:	e7da      	b.n	800a03e <rshift+0x4c>
 800a088:	f851 cb04 	ldr.w	ip, [r1], #4
 800a08c:	f847 cf04 	str.w	ip, [r7, #4]!
 800a090:	e7c3      	b.n	800a01a <rshift+0x28>
 800a092:	4623      	mov	r3, r4
 800a094:	e7e1      	b.n	800a05a <rshift+0x68>

0800a096 <__hexdig_fun>:
 800a096:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a09a:	2b09      	cmp	r3, #9
 800a09c:	d802      	bhi.n	800a0a4 <__hexdig_fun+0xe>
 800a09e:	3820      	subs	r0, #32
 800a0a0:	b2c0      	uxtb	r0, r0
 800a0a2:	4770      	bx	lr
 800a0a4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a0a8:	2b05      	cmp	r3, #5
 800a0aa:	d801      	bhi.n	800a0b0 <__hexdig_fun+0x1a>
 800a0ac:	3847      	subs	r0, #71	; 0x47
 800a0ae:	e7f7      	b.n	800a0a0 <__hexdig_fun+0xa>
 800a0b0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a0b4:	2b05      	cmp	r3, #5
 800a0b6:	d801      	bhi.n	800a0bc <__hexdig_fun+0x26>
 800a0b8:	3827      	subs	r0, #39	; 0x27
 800a0ba:	e7f1      	b.n	800a0a0 <__hexdig_fun+0xa>
 800a0bc:	2000      	movs	r0, #0
 800a0be:	4770      	bx	lr

0800a0c0 <__gethex>:
 800a0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c4:	ed2d 8b02 	vpush	{d8}
 800a0c8:	b089      	sub	sp, #36	; 0x24
 800a0ca:	ee08 0a10 	vmov	s16, r0
 800a0ce:	9304      	str	r3, [sp, #16]
 800a0d0:	4bb4      	ldr	r3, [pc, #720]	; (800a3a4 <__gethex+0x2e4>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	9301      	str	r3, [sp, #4]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	468b      	mov	fp, r1
 800a0da:	4690      	mov	r8, r2
 800a0dc:	f7f6 f880 	bl	80001e0 <strlen>
 800a0e0:	9b01      	ldr	r3, [sp, #4]
 800a0e2:	f8db 2000 	ldr.w	r2, [fp]
 800a0e6:	4403      	add	r3, r0
 800a0e8:	4682      	mov	sl, r0
 800a0ea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a0ee:	9305      	str	r3, [sp, #20]
 800a0f0:	1c93      	adds	r3, r2, #2
 800a0f2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a0f6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a0fa:	32fe      	adds	r2, #254	; 0xfe
 800a0fc:	18d1      	adds	r1, r2, r3
 800a0fe:	461f      	mov	r7, r3
 800a100:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a104:	9100      	str	r1, [sp, #0]
 800a106:	2830      	cmp	r0, #48	; 0x30
 800a108:	d0f8      	beq.n	800a0fc <__gethex+0x3c>
 800a10a:	f7ff ffc4 	bl	800a096 <__hexdig_fun>
 800a10e:	4604      	mov	r4, r0
 800a110:	2800      	cmp	r0, #0
 800a112:	d13a      	bne.n	800a18a <__gethex+0xca>
 800a114:	9901      	ldr	r1, [sp, #4]
 800a116:	4652      	mov	r2, sl
 800a118:	4638      	mov	r0, r7
 800a11a:	f7fe f833 	bl	8008184 <strncmp>
 800a11e:	4605      	mov	r5, r0
 800a120:	2800      	cmp	r0, #0
 800a122:	d168      	bne.n	800a1f6 <__gethex+0x136>
 800a124:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a128:	eb07 060a 	add.w	r6, r7, sl
 800a12c:	f7ff ffb3 	bl	800a096 <__hexdig_fun>
 800a130:	2800      	cmp	r0, #0
 800a132:	d062      	beq.n	800a1fa <__gethex+0x13a>
 800a134:	4633      	mov	r3, r6
 800a136:	7818      	ldrb	r0, [r3, #0]
 800a138:	2830      	cmp	r0, #48	; 0x30
 800a13a:	461f      	mov	r7, r3
 800a13c:	f103 0301 	add.w	r3, r3, #1
 800a140:	d0f9      	beq.n	800a136 <__gethex+0x76>
 800a142:	f7ff ffa8 	bl	800a096 <__hexdig_fun>
 800a146:	2301      	movs	r3, #1
 800a148:	fab0 f480 	clz	r4, r0
 800a14c:	0964      	lsrs	r4, r4, #5
 800a14e:	4635      	mov	r5, r6
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	463a      	mov	r2, r7
 800a154:	4616      	mov	r6, r2
 800a156:	3201      	adds	r2, #1
 800a158:	7830      	ldrb	r0, [r6, #0]
 800a15a:	f7ff ff9c 	bl	800a096 <__hexdig_fun>
 800a15e:	2800      	cmp	r0, #0
 800a160:	d1f8      	bne.n	800a154 <__gethex+0x94>
 800a162:	9901      	ldr	r1, [sp, #4]
 800a164:	4652      	mov	r2, sl
 800a166:	4630      	mov	r0, r6
 800a168:	f7fe f80c 	bl	8008184 <strncmp>
 800a16c:	b980      	cbnz	r0, 800a190 <__gethex+0xd0>
 800a16e:	b94d      	cbnz	r5, 800a184 <__gethex+0xc4>
 800a170:	eb06 050a 	add.w	r5, r6, sl
 800a174:	462a      	mov	r2, r5
 800a176:	4616      	mov	r6, r2
 800a178:	3201      	adds	r2, #1
 800a17a:	7830      	ldrb	r0, [r6, #0]
 800a17c:	f7ff ff8b 	bl	800a096 <__hexdig_fun>
 800a180:	2800      	cmp	r0, #0
 800a182:	d1f8      	bne.n	800a176 <__gethex+0xb6>
 800a184:	1bad      	subs	r5, r5, r6
 800a186:	00ad      	lsls	r5, r5, #2
 800a188:	e004      	b.n	800a194 <__gethex+0xd4>
 800a18a:	2400      	movs	r4, #0
 800a18c:	4625      	mov	r5, r4
 800a18e:	e7e0      	b.n	800a152 <__gethex+0x92>
 800a190:	2d00      	cmp	r5, #0
 800a192:	d1f7      	bne.n	800a184 <__gethex+0xc4>
 800a194:	7833      	ldrb	r3, [r6, #0]
 800a196:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a19a:	2b50      	cmp	r3, #80	; 0x50
 800a19c:	d13b      	bne.n	800a216 <__gethex+0x156>
 800a19e:	7873      	ldrb	r3, [r6, #1]
 800a1a0:	2b2b      	cmp	r3, #43	; 0x2b
 800a1a2:	d02c      	beq.n	800a1fe <__gethex+0x13e>
 800a1a4:	2b2d      	cmp	r3, #45	; 0x2d
 800a1a6:	d02e      	beq.n	800a206 <__gethex+0x146>
 800a1a8:	1c71      	adds	r1, r6, #1
 800a1aa:	f04f 0900 	mov.w	r9, #0
 800a1ae:	7808      	ldrb	r0, [r1, #0]
 800a1b0:	f7ff ff71 	bl	800a096 <__hexdig_fun>
 800a1b4:	1e43      	subs	r3, r0, #1
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b18      	cmp	r3, #24
 800a1ba:	d82c      	bhi.n	800a216 <__gethex+0x156>
 800a1bc:	f1a0 0210 	sub.w	r2, r0, #16
 800a1c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a1c4:	f7ff ff67 	bl	800a096 <__hexdig_fun>
 800a1c8:	1e43      	subs	r3, r0, #1
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	2b18      	cmp	r3, #24
 800a1ce:	d91d      	bls.n	800a20c <__gethex+0x14c>
 800a1d0:	f1b9 0f00 	cmp.w	r9, #0
 800a1d4:	d000      	beq.n	800a1d8 <__gethex+0x118>
 800a1d6:	4252      	negs	r2, r2
 800a1d8:	4415      	add	r5, r2
 800a1da:	f8cb 1000 	str.w	r1, [fp]
 800a1de:	b1e4      	cbz	r4, 800a21a <__gethex+0x15a>
 800a1e0:	9b00      	ldr	r3, [sp, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	bf14      	ite	ne
 800a1e6:	2700      	movne	r7, #0
 800a1e8:	2706      	moveq	r7, #6
 800a1ea:	4638      	mov	r0, r7
 800a1ec:	b009      	add	sp, #36	; 0x24
 800a1ee:	ecbd 8b02 	vpop	{d8}
 800a1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f6:	463e      	mov	r6, r7
 800a1f8:	4625      	mov	r5, r4
 800a1fa:	2401      	movs	r4, #1
 800a1fc:	e7ca      	b.n	800a194 <__gethex+0xd4>
 800a1fe:	f04f 0900 	mov.w	r9, #0
 800a202:	1cb1      	adds	r1, r6, #2
 800a204:	e7d3      	b.n	800a1ae <__gethex+0xee>
 800a206:	f04f 0901 	mov.w	r9, #1
 800a20a:	e7fa      	b.n	800a202 <__gethex+0x142>
 800a20c:	230a      	movs	r3, #10
 800a20e:	fb03 0202 	mla	r2, r3, r2, r0
 800a212:	3a10      	subs	r2, #16
 800a214:	e7d4      	b.n	800a1c0 <__gethex+0x100>
 800a216:	4631      	mov	r1, r6
 800a218:	e7df      	b.n	800a1da <__gethex+0x11a>
 800a21a:	1bf3      	subs	r3, r6, r7
 800a21c:	3b01      	subs	r3, #1
 800a21e:	4621      	mov	r1, r4
 800a220:	2b07      	cmp	r3, #7
 800a222:	dc0b      	bgt.n	800a23c <__gethex+0x17c>
 800a224:	ee18 0a10 	vmov	r0, s16
 800a228:	f000 fad8 	bl	800a7dc <_Balloc>
 800a22c:	4604      	mov	r4, r0
 800a22e:	b940      	cbnz	r0, 800a242 <__gethex+0x182>
 800a230:	4b5d      	ldr	r3, [pc, #372]	; (800a3a8 <__gethex+0x2e8>)
 800a232:	4602      	mov	r2, r0
 800a234:	21de      	movs	r1, #222	; 0xde
 800a236:	485d      	ldr	r0, [pc, #372]	; (800a3ac <__gethex+0x2ec>)
 800a238:	f001 fa5c 	bl	800b6f4 <__assert_func>
 800a23c:	3101      	adds	r1, #1
 800a23e:	105b      	asrs	r3, r3, #1
 800a240:	e7ee      	b.n	800a220 <__gethex+0x160>
 800a242:	f100 0914 	add.w	r9, r0, #20
 800a246:	f04f 0b00 	mov.w	fp, #0
 800a24a:	f1ca 0301 	rsb	r3, sl, #1
 800a24e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a252:	f8cd b000 	str.w	fp, [sp]
 800a256:	9306      	str	r3, [sp, #24]
 800a258:	42b7      	cmp	r7, r6
 800a25a:	d340      	bcc.n	800a2de <__gethex+0x21e>
 800a25c:	9802      	ldr	r0, [sp, #8]
 800a25e:	9b00      	ldr	r3, [sp, #0]
 800a260:	f840 3b04 	str.w	r3, [r0], #4
 800a264:	eba0 0009 	sub.w	r0, r0, r9
 800a268:	1080      	asrs	r0, r0, #2
 800a26a:	0146      	lsls	r6, r0, #5
 800a26c:	6120      	str	r0, [r4, #16]
 800a26e:	4618      	mov	r0, r3
 800a270:	f000 fba6 	bl	800a9c0 <__hi0bits>
 800a274:	1a30      	subs	r0, r6, r0
 800a276:	f8d8 6000 	ldr.w	r6, [r8]
 800a27a:	42b0      	cmp	r0, r6
 800a27c:	dd63      	ble.n	800a346 <__gethex+0x286>
 800a27e:	1b87      	subs	r7, r0, r6
 800a280:	4639      	mov	r1, r7
 800a282:	4620      	mov	r0, r4
 800a284:	f000 ff4a 	bl	800b11c <__any_on>
 800a288:	4682      	mov	sl, r0
 800a28a:	b1a8      	cbz	r0, 800a2b8 <__gethex+0x1f8>
 800a28c:	1e7b      	subs	r3, r7, #1
 800a28e:	1159      	asrs	r1, r3, #5
 800a290:	f003 021f 	and.w	r2, r3, #31
 800a294:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a298:	f04f 0a01 	mov.w	sl, #1
 800a29c:	fa0a f202 	lsl.w	r2, sl, r2
 800a2a0:	420a      	tst	r2, r1
 800a2a2:	d009      	beq.n	800a2b8 <__gethex+0x1f8>
 800a2a4:	4553      	cmp	r3, sl
 800a2a6:	dd05      	ble.n	800a2b4 <__gethex+0x1f4>
 800a2a8:	1eb9      	subs	r1, r7, #2
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f000 ff36 	bl	800b11c <__any_on>
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	d145      	bne.n	800a340 <__gethex+0x280>
 800a2b4:	f04f 0a02 	mov.w	sl, #2
 800a2b8:	4639      	mov	r1, r7
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f7ff fe99 	bl	8009ff2 <rshift>
 800a2c0:	443d      	add	r5, r7
 800a2c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a2c6:	42ab      	cmp	r3, r5
 800a2c8:	da4c      	bge.n	800a364 <__gethex+0x2a4>
 800a2ca:	ee18 0a10 	vmov	r0, s16
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	f000 fac4 	bl	800a85c <_Bfree>
 800a2d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	6013      	str	r3, [r2, #0]
 800a2da:	27a3      	movs	r7, #163	; 0xa3
 800a2dc:	e785      	b.n	800a1ea <__gethex+0x12a>
 800a2de:	1e73      	subs	r3, r6, #1
 800a2e0:	9a05      	ldr	r2, [sp, #20]
 800a2e2:	9303      	str	r3, [sp, #12]
 800a2e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d019      	beq.n	800a320 <__gethex+0x260>
 800a2ec:	f1bb 0f20 	cmp.w	fp, #32
 800a2f0:	d107      	bne.n	800a302 <__gethex+0x242>
 800a2f2:	9b02      	ldr	r3, [sp, #8]
 800a2f4:	9a00      	ldr	r2, [sp, #0]
 800a2f6:	f843 2b04 	str.w	r2, [r3], #4
 800a2fa:	9302      	str	r3, [sp, #8]
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	469b      	mov	fp, r3
 800a302:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a306:	f7ff fec6 	bl	800a096 <__hexdig_fun>
 800a30a:	9b00      	ldr	r3, [sp, #0]
 800a30c:	f000 000f 	and.w	r0, r0, #15
 800a310:	fa00 f00b 	lsl.w	r0, r0, fp
 800a314:	4303      	orrs	r3, r0
 800a316:	9300      	str	r3, [sp, #0]
 800a318:	f10b 0b04 	add.w	fp, fp, #4
 800a31c:	9b03      	ldr	r3, [sp, #12]
 800a31e:	e00d      	b.n	800a33c <__gethex+0x27c>
 800a320:	9b03      	ldr	r3, [sp, #12]
 800a322:	9a06      	ldr	r2, [sp, #24]
 800a324:	4413      	add	r3, r2
 800a326:	42bb      	cmp	r3, r7
 800a328:	d3e0      	bcc.n	800a2ec <__gethex+0x22c>
 800a32a:	4618      	mov	r0, r3
 800a32c:	9901      	ldr	r1, [sp, #4]
 800a32e:	9307      	str	r3, [sp, #28]
 800a330:	4652      	mov	r2, sl
 800a332:	f7fd ff27 	bl	8008184 <strncmp>
 800a336:	9b07      	ldr	r3, [sp, #28]
 800a338:	2800      	cmp	r0, #0
 800a33a:	d1d7      	bne.n	800a2ec <__gethex+0x22c>
 800a33c:	461e      	mov	r6, r3
 800a33e:	e78b      	b.n	800a258 <__gethex+0x198>
 800a340:	f04f 0a03 	mov.w	sl, #3
 800a344:	e7b8      	b.n	800a2b8 <__gethex+0x1f8>
 800a346:	da0a      	bge.n	800a35e <__gethex+0x29e>
 800a348:	1a37      	subs	r7, r6, r0
 800a34a:	4621      	mov	r1, r4
 800a34c:	ee18 0a10 	vmov	r0, s16
 800a350:	463a      	mov	r2, r7
 800a352:	f000 fc9f 	bl	800ac94 <__lshift>
 800a356:	1bed      	subs	r5, r5, r7
 800a358:	4604      	mov	r4, r0
 800a35a:	f100 0914 	add.w	r9, r0, #20
 800a35e:	f04f 0a00 	mov.w	sl, #0
 800a362:	e7ae      	b.n	800a2c2 <__gethex+0x202>
 800a364:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a368:	42a8      	cmp	r0, r5
 800a36a:	dd72      	ble.n	800a452 <__gethex+0x392>
 800a36c:	1b45      	subs	r5, r0, r5
 800a36e:	42ae      	cmp	r6, r5
 800a370:	dc36      	bgt.n	800a3e0 <__gethex+0x320>
 800a372:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a376:	2b02      	cmp	r3, #2
 800a378:	d02a      	beq.n	800a3d0 <__gethex+0x310>
 800a37a:	2b03      	cmp	r3, #3
 800a37c:	d02c      	beq.n	800a3d8 <__gethex+0x318>
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d11c      	bne.n	800a3bc <__gethex+0x2fc>
 800a382:	42ae      	cmp	r6, r5
 800a384:	d11a      	bne.n	800a3bc <__gethex+0x2fc>
 800a386:	2e01      	cmp	r6, #1
 800a388:	d112      	bne.n	800a3b0 <__gethex+0x2f0>
 800a38a:	9a04      	ldr	r2, [sp, #16]
 800a38c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a390:	6013      	str	r3, [r2, #0]
 800a392:	2301      	movs	r3, #1
 800a394:	6123      	str	r3, [r4, #16]
 800a396:	f8c9 3000 	str.w	r3, [r9]
 800a39a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a39c:	2762      	movs	r7, #98	; 0x62
 800a39e:	601c      	str	r4, [r3, #0]
 800a3a0:	e723      	b.n	800a1ea <__gethex+0x12a>
 800a3a2:	bf00      	nop
 800a3a4:	0800c328 	.word	0x0800c328
 800a3a8:	0800c24f 	.word	0x0800c24f
 800a3ac:	0800c2c0 	.word	0x0800c2c0
 800a3b0:	1e71      	subs	r1, r6, #1
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f000 feb2 	bl	800b11c <__any_on>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d1e6      	bne.n	800a38a <__gethex+0x2ca>
 800a3bc:	ee18 0a10 	vmov	r0, s16
 800a3c0:	4621      	mov	r1, r4
 800a3c2:	f000 fa4b 	bl	800a85c <_Bfree>
 800a3c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	6013      	str	r3, [r2, #0]
 800a3cc:	2750      	movs	r7, #80	; 0x50
 800a3ce:	e70c      	b.n	800a1ea <__gethex+0x12a>
 800a3d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1f2      	bne.n	800a3bc <__gethex+0x2fc>
 800a3d6:	e7d8      	b.n	800a38a <__gethex+0x2ca>
 800a3d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1d5      	bne.n	800a38a <__gethex+0x2ca>
 800a3de:	e7ed      	b.n	800a3bc <__gethex+0x2fc>
 800a3e0:	1e6f      	subs	r7, r5, #1
 800a3e2:	f1ba 0f00 	cmp.w	sl, #0
 800a3e6:	d131      	bne.n	800a44c <__gethex+0x38c>
 800a3e8:	b127      	cbz	r7, 800a3f4 <__gethex+0x334>
 800a3ea:	4639      	mov	r1, r7
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f000 fe95 	bl	800b11c <__any_on>
 800a3f2:	4682      	mov	sl, r0
 800a3f4:	117b      	asrs	r3, r7, #5
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a3fc:	f007 071f 	and.w	r7, r7, #31
 800a400:	fa01 f707 	lsl.w	r7, r1, r7
 800a404:	421f      	tst	r7, r3
 800a406:	4629      	mov	r1, r5
 800a408:	4620      	mov	r0, r4
 800a40a:	bf18      	it	ne
 800a40c:	f04a 0a02 	orrne.w	sl, sl, #2
 800a410:	1b76      	subs	r6, r6, r5
 800a412:	f7ff fdee 	bl	8009ff2 <rshift>
 800a416:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a41a:	2702      	movs	r7, #2
 800a41c:	f1ba 0f00 	cmp.w	sl, #0
 800a420:	d048      	beq.n	800a4b4 <__gethex+0x3f4>
 800a422:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a426:	2b02      	cmp	r3, #2
 800a428:	d015      	beq.n	800a456 <__gethex+0x396>
 800a42a:	2b03      	cmp	r3, #3
 800a42c:	d017      	beq.n	800a45e <__gethex+0x39e>
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d109      	bne.n	800a446 <__gethex+0x386>
 800a432:	f01a 0f02 	tst.w	sl, #2
 800a436:	d006      	beq.n	800a446 <__gethex+0x386>
 800a438:	f8d9 0000 	ldr.w	r0, [r9]
 800a43c:	ea4a 0a00 	orr.w	sl, sl, r0
 800a440:	f01a 0f01 	tst.w	sl, #1
 800a444:	d10e      	bne.n	800a464 <__gethex+0x3a4>
 800a446:	f047 0710 	orr.w	r7, r7, #16
 800a44a:	e033      	b.n	800a4b4 <__gethex+0x3f4>
 800a44c:	f04f 0a01 	mov.w	sl, #1
 800a450:	e7d0      	b.n	800a3f4 <__gethex+0x334>
 800a452:	2701      	movs	r7, #1
 800a454:	e7e2      	b.n	800a41c <__gethex+0x35c>
 800a456:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a458:	f1c3 0301 	rsb	r3, r3, #1
 800a45c:	9315      	str	r3, [sp, #84]	; 0x54
 800a45e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a460:	2b00      	cmp	r3, #0
 800a462:	d0f0      	beq.n	800a446 <__gethex+0x386>
 800a464:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a468:	f104 0314 	add.w	r3, r4, #20
 800a46c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a470:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a474:	f04f 0c00 	mov.w	ip, #0
 800a478:	4618      	mov	r0, r3
 800a47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a47e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a482:	d01c      	beq.n	800a4be <__gethex+0x3fe>
 800a484:	3201      	adds	r2, #1
 800a486:	6002      	str	r2, [r0, #0]
 800a488:	2f02      	cmp	r7, #2
 800a48a:	f104 0314 	add.w	r3, r4, #20
 800a48e:	d13f      	bne.n	800a510 <__gethex+0x450>
 800a490:	f8d8 2000 	ldr.w	r2, [r8]
 800a494:	3a01      	subs	r2, #1
 800a496:	42b2      	cmp	r2, r6
 800a498:	d10a      	bne.n	800a4b0 <__gethex+0x3f0>
 800a49a:	1171      	asrs	r1, r6, #5
 800a49c:	2201      	movs	r2, #1
 800a49e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a4a2:	f006 061f 	and.w	r6, r6, #31
 800a4a6:	fa02 f606 	lsl.w	r6, r2, r6
 800a4aa:	421e      	tst	r6, r3
 800a4ac:	bf18      	it	ne
 800a4ae:	4617      	movne	r7, r2
 800a4b0:	f047 0720 	orr.w	r7, r7, #32
 800a4b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4b6:	601c      	str	r4, [r3, #0]
 800a4b8:	9b04      	ldr	r3, [sp, #16]
 800a4ba:	601d      	str	r5, [r3, #0]
 800a4bc:	e695      	b.n	800a1ea <__gethex+0x12a>
 800a4be:	4299      	cmp	r1, r3
 800a4c0:	f843 cc04 	str.w	ip, [r3, #-4]
 800a4c4:	d8d8      	bhi.n	800a478 <__gethex+0x3b8>
 800a4c6:	68a3      	ldr	r3, [r4, #8]
 800a4c8:	459b      	cmp	fp, r3
 800a4ca:	db19      	blt.n	800a500 <__gethex+0x440>
 800a4cc:	6861      	ldr	r1, [r4, #4]
 800a4ce:	ee18 0a10 	vmov	r0, s16
 800a4d2:	3101      	adds	r1, #1
 800a4d4:	f000 f982 	bl	800a7dc <_Balloc>
 800a4d8:	4681      	mov	r9, r0
 800a4da:	b918      	cbnz	r0, 800a4e4 <__gethex+0x424>
 800a4dc:	4b1a      	ldr	r3, [pc, #104]	; (800a548 <__gethex+0x488>)
 800a4de:	4602      	mov	r2, r0
 800a4e0:	2184      	movs	r1, #132	; 0x84
 800a4e2:	e6a8      	b.n	800a236 <__gethex+0x176>
 800a4e4:	6922      	ldr	r2, [r4, #16]
 800a4e6:	3202      	adds	r2, #2
 800a4e8:	f104 010c 	add.w	r1, r4, #12
 800a4ec:	0092      	lsls	r2, r2, #2
 800a4ee:	300c      	adds	r0, #12
 800a4f0:	f7fd f93a 	bl	8007768 <memcpy>
 800a4f4:	4621      	mov	r1, r4
 800a4f6:	ee18 0a10 	vmov	r0, s16
 800a4fa:	f000 f9af 	bl	800a85c <_Bfree>
 800a4fe:	464c      	mov	r4, r9
 800a500:	6923      	ldr	r3, [r4, #16]
 800a502:	1c5a      	adds	r2, r3, #1
 800a504:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a508:	6122      	str	r2, [r4, #16]
 800a50a:	2201      	movs	r2, #1
 800a50c:	615a      	str	r2, [r3, #20]
 800a50e:	e7bb      	b.n	800a488 <__gethex+0x3c8>
 800a510:	6922      	ldr	r2, [r4, #16]
 800a512:	455a      	cmp	r2, fp
 800a514:	dd0b      	ble.n	800a52e <__gethex+0x46e>
 800a516:	2101      	movs	r1, #1
 800a518:	4620      	mov	r0, r4
 800a51a:	f7ff fd6a 	bl	8009ff2 <rshift>
 800a51e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a522:	3501      	adds	r5, #1
 800a524:	42ab      	cmp	r3, r5
 800a526:	f6ff aed0 	blt.w	800a2ca <__gethex+0x20a>
 800a52a:	2701      	movs	r7, #1
 800a52c:	e7c0      	b.n	800a4b0 <__gethex+0x3f0>
 800a52e:	f016 061f 	ands.w	r6, r6, #31
 800a532:	d0fa      	beq.n	800a52a <__gethex+0x46a>
 800a534:	4453      	add	r3, sl
 800a536:	f1c6 0620 	rsb	r6, r6, #32
 800a53a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a53e:	f000 fa3f 	bl	800a9c0 <__hi0bits>
 800a542:	42b0      	cmp	r0, r6
 800a544:	dbe7      	blt.n	800a516 <__gethex+0x456>
 800a546:	e7f0      	b.n	800a52a <__gethex+0x46a>
 800a548:	0800c24f 	.word	0x0800c24f

0800a54c <L_shift>:
 800a54c:	f1c2 0208 	rsb	r2, r2, #8
 800a550:	0092      	lsls	r2, r2, #2
 800a552:	b570      	push	{r4, r5, r6, lr}
 800a554:	f1c2 0620 	rsb	r6, r2, #32
 800a558:	6843      	ldr	r3, [r0, #4]
 800a55a:	6804      	ldr	r4, [r0, #0]
 800a55c:	fa03 f506 	lsl.w	r5, r3, r6
 800a560:	432c      	orrs	r4, r5
 800a562:	40d3      	lsrs	r3, r2
 800a564:	6004      	str	r4, [r0, #0]
 800a566:	f840 3f04 	str.w	r3, [r0, #4]!
 800a56a:	4288      	cmp	r0, r1
 800a56c:	d3f4      	bcc.n	800a558 <L_shift+0xc>
 800a56e:	bd70      	pop	{r4, r5, r6, pc}

0800a570 <__match>:
 800a570:	b530      	push	{r4, r5, lr}
 800a572:	6803      	ldr	r3, [r0, #0]
 800a574:	3301      	adds	r3, #1
 800a576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a57a:	b914      	cbnz	r4, 800a582 <__match+0x12>
 800a57c:	6003      	str	r3, [r0, #0]
 800a57e:	2001      	movs	r0, #1
 800a580:	bd30      	pop	{r4, r5, pc}
 800a582:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a586:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a58a:	2d19      	cmp	r5, #25
 800a58c:	bf98      	it	ls
 800a58e:	3220      	addls	r2, #32
 800a590:	42a2      	cmp	r2, r4
 800a592:	d0f0      	beq.n	800a576 <__match+0x6>
 800a594:	2000      	movs	r0, #0
 800a596:	e7f3      	b.n	800a580 <__match+0x10>

0800a598 <__hexnan>:
 800a598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a59c:	680b      	ldr	r3, [r1, #0]
 800a59e:	115e      	asrs	r6, r3, #5
 800a5a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a5a4:	f013 031f 	ands.w	r3, r3, #31
 800a5a8:	b087      	sub	sp, #28
 800a5aa:	bf18      	it	ne
 800a5ac:	3604      	addne	r6, #4
 800a5ae:	2500      	movs	r5, #0
 800a5b0:	1f37      	subs	r7, r6, #4
 800a5b2:	4690      	mov	r8, r2
 800a5b4:	6802      	ldr	r2, [r0, #0]
 800a5b6:	9301      	str	r3, [sp, #4]
 800a5b8:	4682      	mov	sl, r0
 800a5ba:	f846 5c04 	str.w	r5, [r6, #-4]
 800a5be:	46b9      	mov	r9, r7
 800a5c0:	463c      	mov	r4, r7
 800a5c2:	9502      	str	r5, [sp, #8]
 800a5c4:	46ab      	mov	fp, r5
 800a5c6:	7851      	ldrb	r1, [r2, #1]
 800a5c8:	1c53      	adds	r3, r2, #1
 800a5ca:	9303      	str	r3, [sp, #12]
 800a5cc:	b341      	cbz	r1, 800a620 <__hexnan+0x88>
 800a5ce:	4608      	mov	r0, r1
 800a5d0:	9205      	str	r2, [sp, #20]
 800a5d2:	9104      	str	r1, [sp, #16]
 800a5d4:	f7ff fd5f 	bl	800a096 <__hexdig_fun>
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	d14f      	bne.n	800a67c <__hexnan+0xe4>
 800a5dc:	9904      	ldr	r1, [sp, #16]
 800a5de:	9a05      	ldr	r2, [sp, #20]
 800a5e0:	2920      	cmp	r1, #32
 800a5e2:	d818      	bhi.n	800a616 <__hexnan+0x7e>
 800a5e4:	9b02      	ldr	r3, [sp, #8]
 800a5e6:	459b      	cmp	fp, r3
 800a5e8:	dd13      	ble.n	800a612 <__hexnan+0x7a>
 800a5ea:	454c      	cmp	r4, r9
 800a5ec:	d206      	bcs.n	800a5fc <__hexnan+0x64>
 800a5ee:	2d07      	cmp	r5, #7
 800a5f0:	dc04      	bgt.n	800a5fc <__hexnan+0x64>
 800a5f2:	462a      	mov	r2, r5
 800a5f4:	4649      	mov	r1, r9
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f7ff ffa8 	bl	800a54c <L_shift>
 800a5fc:	4544      	cmp	r4, r8
 800a5fe:	d950      	bls.n	800a6a2 <__hexnan+0x10a>
 800a600:	2300      	movs	r3, #0
 800a602:	f1a4 0904 	sub.w	r9, r4, #4
 800a606:	f844 3c04 	str.w	r3, [r4, #-4]
 800a60a:	f8cd b008 	str.w	fp, [sp, #8]
 800a60e:	464c      	mov	r4, r9
 800a610:	461d      	mov	r5, r3
 800a612:	9a03      	ldr	r2, [sp, #12]
 800a614:	e7d7      	b.n	800a5c6 <__hexnan+0x2e>
 800a616:	2929      	cmp	r1, #41	; 0x29
 800a618:	d156      	bne.n	800a6c8 <__hexnan+0x130>
 800a61a:	3202      	adds	r2, #2
 800a61c:	f8ca 2000 	str.w	r2, [sl]
 800a620:	f1bb 0f00 	cmp.w	fp, #0
 800a624:	d050      	beq.n	800a6c8 <__hexnan+0x130>
 800a626:	454c      	cmp	r4, r9
 800a628:	d206      	bcs.n	800a638 <__hexnan+0xa0>
 800a62a:	2d07      	cmp	r5, #7
 800a62c:	dc04      	bgt.n	800a638 <__hexnan+0xa0>
 800a62e:	462a      	mov	r2, r5
 800a630:	4649      	mov	r1, r9
 800a632:	4620      	mov	r0, r4
 800a634:	f7ff ff8a 	bl	800a54c <L_shift>
 800a638:	4544      	cmp	r4, r8
 800a63a:	d934      	bls.n	800a6a6 <__hexnan+0x10e>
 800a63c:	f1a8 0204 	sub.w	r2, r8, #4
 800a640:	4623      	mov	r3, r4
 800a642:	f853 1b04 	ldr.w	r1, [r3], #4
 800a646:	f842 1f04 	str.w	r1, [r2, #4]!
 800a64a:	429f      	cmp	r7, r3
 800a64c:	d2f9      	bcs.n	800a642 <__hexnan+0xaa>
 800a64e:	1b3b      	subs	r3, r7, r4
 800a650:	f023 0303 	bic.w	r3, r3, #3
 800a654:	3304      	adds	r3, #4
 800a656:	3401      	adds	r4, #1
 800a658:	3e03      	subs	r6, #3
 800a65a:	42b4      	cmp	r4, r6
 800a65c:	bf88      	it	hi
 800a65e:	2304      	movhi	r3, #4
 800a660:	4443      	add	r3, r8
 800a662:	2200      	movs	r2, #0
 800a664:	f843 2b04 	str.w	r2, [r3], #4
 800a668:	429f      	cmp	r7, r3
 800a66a:	d2fb      	bcs.n	800a664 <__hexnan+0xcc>
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	b91b      	cbnz	r3, 800a678 <__hexnan+0xe0>
 800a670:	4547      	cmp	r7, r8
 800a672:	d127      	bne.n	800a6c4 <__hexnan+0x12c>
 800a674:	2301      	movs	r3, #1
 800a676:	603b      	str	r3, [r7, #0]
 800a678:	2005      	movs	r0, #5
 800a67a:	e026      	b.n	800a6ca <__hexnan+0x132>
 800a67c:	3501      	adds	r5, #1
 800a67e:	2d08      	cmp	r5, #8
 800a680:	f10b 0b01 	add.w	fp, fp, #1
 800a684:	dd06      	ble.n	800a694 <__hexnan+0xfc>
 800a686:	4544      	cmp	r4, r8
 800a688:	d9c3      	bls.n	800a612 <__hexnan+0x7a>
 800a68a:	2300      	movs	r3, #0
 800a68c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a690:	2501      	movs	r5, #1
 800a692:	3c04      	subs	r4, #4
 800a694:	6822      	ldr	r2, [r4, #0]
 800a696:	f000 000f 	and.w	r0, r0, #15
 800a69a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a69e:	6022      	str	r2, [r4, #0]
 800a6a0:	e7b7      	b.n	800a612 <__hexnan+0x7a>
 800a6a2:	2508      	movs	r5, #8
 800a6a4:	e7b5      	b.n	800a612 <__hexnan+0x7a>
 800a6a6:	9b01      	ldr	r3, [sp, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d0df      	beq.n	800a66c <__hexnan+0xd4>
 800a6ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6b0:	f1c3 0320 	rsb	r3, r3, #32
 800a6b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a6b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a6bc:	401a      	ands	r2, r3
 800a6be:	f846 2c04 	str.w	r2, [r6, #-4]
 800a6c2:	e7d3      	b.n	800a66c <__hexnan+0xd4>
 800a6c4:	3f04      	subs	r7, #4
 800a6c6:	e7d1      	b.n	800a66c <__hexnan+0xd4>
 800a6c8:	2004      	movs	r0, #4
 800a6ca:	b007      	add	sp, #28
 800a6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a6d0 <_localeconv_r>:
 800a6d0:	4800      	ldr	r0, [pc, #0]	; (800a6d4 <_localeconv_r+0x4>)
 800a6d2:	4770      	bx	lr
 800a6d4:	20000164 	.word	0x20000164

0800a6d8 <__retarget_lock_init_recursive>:
 800a6d8:	4770      	bx	lr

0800a6da <__retarget_lock_acquire_recursive>:
 800a6da:	4770      	bx	lr

0800a6dc <__retarget_lock_release_recursive>:
 800a6dc:	4770      	bx	lr

0800a6de <__swhatbuf_r>:
 800a6de:	b570      	push	{r4, r5, r6, lr}
 800a6e0:	460e      	mov	r6, r1
 800a6e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6e6:	2900      	cmp	r1, #0
 800a6e8:	b096      	sub	sp, #88	; 0x58
 800a6ea:	4614      	mov	r4, r2
 800a6ec:	461d      	mov	r5, r3
 800a6ee:	da08      	bge.n	800a702 <__swhatbuf_r+0x24>
 800a6f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	602a      	str	r2, [r5, #0]
 800a6f8:	061a      	lsls	r2, r3, #24
 800a6fa:	d410      	bmi.n	800a71e <__swhatbuf_r+0x40>
 800a6fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a700:	e00e      	b.n	800a720 <__swhatbuf_r+0x42>
 800a702:	466a      	mov	r2, sp
 800a704:	f001 f836 	bl	800b774 <_fstat_r>
 800a708:	2800      	cmp	r0, #0
 800a70a:	dbf1      	blt.n	800a6f0 <__swhatbuf_r+0x12>
 800a70c:	9a01      	ldr	r2, [sp, #4]
 800a70e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a712:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a716:	425a      	negs	r2, r3
 800a718:	415a      	adcs	r2, r3
 800a71a:	602a      	str	r2, [r5, #0]
 800a71c:	e7ee      	b.n	800a6fc <__swhatbuf_r+0x1e>
 800a71e:	2340      	movs	r3, #64	; 0x40
 800a720:	2000      	movs	r0, #0
 800a722:	6023      	str	r3, [r4, #0]
 800a724:	b016      	add	sp, #88	; 0x58
 800a726:	bd70      	pop	{r4, r5, r6, pc}

0800a728 <__smakebuf_r>:
 800a728:	898b      	ldrh	r3, [r1, #12]
 800a72a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a72c:	079d      	lsls	r5, r3, #30
 800a72e:	4606      	mov	r6, r0
 800a730:	460c      	mov	r4, r1
 800a732:	d507      	bpl.n	800a744 <__smakebuf_r+0x1c>
 800a734:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a738:	6023      	str	r3, [r4, #0]
 800a73a:	6123      	str	r3, [r4, #16]
 800a73c:	2301      	movs	r3, #1
 800a73e:	6163      	str	r3, [r4, #20]
 800a740:	b002      	add	sp, #8
 800a742:	bd70      	pop	{r4, r5, r6, pc}
 800a744:	ab01      	add	r3, sp, #4
 800a746:	466a      	mov	r2, sp
 800a748:	f7ff ffc9 	bl	800a6de <__swhatbuf_r>
 800a74c:	9900      	ldr	r1, [sp, #0]
 800a74e:	4605      	mov	r5, r0
 800a750:	4630      	mov	r0, r6
 800a752:	f000 fd87 	bl	800b264 <_malloc_r>
 800a756:	b948      	cbnz	r0, 800a76c <__smakebuf_r+0x44>
 800a758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a75c:	059a      	lsls	r2, r3, #22
 800a75e:	d4ef      	bmi.n	800a740 <__smakebuf_r+0x18>
 800a760:	f023 0303 	bic.w	r3, r3, #3
 800a764:	f043 0302 	orr.w	r3, r3, #2
 800a768:	81a3      	strh	r3, [r4, #12]
 800a76a:	e7e3      	b.n	800a734 <__smakebuf_r+0xc>
 800a76c:	4b0d      	ldr	r3, [pc, #52]	; (800a7a4 <__smakebuf_r+0x7c>)
 800a76e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a770:	89a3      	ldrh	r3, [r4, #12]
 800a772:	6020      	str	r0, [r4, #0]
 800a774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a778:	81a3      	strh	r3, [r4, #12]
 800a77a:	9b00      	ldr	r3, [sp, #0]
 800a77c:	6163      	str	r3, [r4, #20]
 800a77e:	9b01      	ldr	r3, [sp, #4]
 800a780:	6120      	str	r0, [r4, #16]
 800a782:	b15b      	cbz	r3, 800a79c <__smakebuf_r+0x74>
 800a784:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a788:	4630      	mov	r0, r6
 800a78a:	f001 f805 	bl	800b798 <_isatty_r>
 800a78e:	b128      	cbz	r0, 800a79c <__smakebuf_r+0x74>
 800a790:	89a3      	ldrh	r3, [r4, #12]
 800a792:	f023 0303 	bic.w	r3, r3, #3
 800a796:	f043 0301 	orr.w	r3, r3, #1
 800a79a:	81a3      	strh	r3, [r4, #12]
 800a79c:	89a0      	ldrh	r0, [r4, #12]
 800a79e:	4305      	orrs	r5, r0
 800a7a0:	81a5      	strh	r5, [r4, #12]
 800a7a2:	e7cd      	b.n	800a740 <__smakebuf_r+0x18>
 800a7a4:	08009e51 	.word	0x08009e51

0800a7a8 <malloc>:
 800a7a8:	4b02      	ldr	r3, [pc, #8]	; (800a7b4 <malloc+0xc>)
 800a7aa:	4601      	mov	r1, r0
 800a7ac:	6818      	ldr	r0, [r3, #0]
 800a7ae:	f000 bd59 	b.w	800b264 <_malloc_r>
 800a7b2:	bf00      	nop
 800a7b4:	2000000c 	.word	0x2000000c

0800a7b8 <__ascii_mbtowc>:
 800a7b8:	b082      	sub	sp, #8
 800a7ba:	b901      	cbnz	r1, 800a7be <__ascii_mbtowc+0x6>
 800a7bc:	a901      	add	r1, sp, #4
 800a7be:	b142      	cbz	r2, 800a7d2 <__ascii_mbtowc+0x1a>
 800a7c0:	b14b      	cbz	r3, 800a7d6 <__ascii_mbtowc+0x1e>
 800a7c2:	7813      	ldrb	r3, [r2, #0]
 800a7c4:	600b      	str	r3, [r1, #0]
 800a7c6:	7812      	ldrb	r2, [r2, #0]
 800a7c8:	1e10      	subs	r0, r2, #0
 800a7ca:	bf18      	it	ne
 800a7cc:	2001      	movne	r0, #1
 800a7ce:	b002      	add	sp, #8
 800a7d0:	4770      	bx	lr
 800a7d2:	4610      	mov	r0, r2
 800a7d4:	e7fb      	b.n	800a7ce <__ascii_mbtowc+0x16>
 800a7d6:	f06f 0001 	mvn.w	r0, #1
 800a7da:	e7f8      	b.n	800a7ce <__ascii_mbtowc+0x16>

0800a7dc <_Balloc>:
 800a7dc:	b570      	push	{r4, r5, r6, lr}
 800a7de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	460d      	mov	r5, r1
 800a7e4:	b976      	cbnz	r6, 800a804 <_Balloc+0x28>
 800a7e6:	2010      	movs	r0, #16
 800a7e8:	f7ff ffde 	bl	800a7a8 <malloc>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	6260      	str	r0, [r4, #36]	; 0x24
 800a7f0:	b920      	cbnz	r0, 800a7fc <_Balloc+0x20>
 800a7f2:	4b18      	ldr	r3, [pc, #96]	; (800a854 <_Balloc+0x78>)
 800a7f4:	4818      	ldr	r0, [pc, #96]	; (800a858 <_Balloc+0x7c>)
 800a7f6:	2166      	movs	r1, #102	; 0x66
 800a7f8:	f000 ff7c 	bl	800b6f4 <__assert_func>
 800a7fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a800:	6006      	str	r6, [r0, #0]
 800a802:	60c6      	str	r6, [r0, #12]
 800a804:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a806:	68f3      	ldr	r3, [r6, #12]
 800a808:	b183      	cbz	r3, 800a82c <_Balloc+0x50>
 800a80a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a812:	b9b8      	cbnz	r0, 800a844 <_Balloc+0x68>
 800a814:	2101      	movs	r1, #1
 800a816:	fa01 f605 	lsl.w	r6, r1, r5
 800a81a:	1d72      	adds	r2, r6, #5
 800a81c:	0092      	lsls	r2, r2, #2
 800a81e:	4620      	mov	r0, r4
 800a820:	f000 fc9d 	bl	800b15e <_calloc_r>
 800a824:	b160      	cbz	r0, 800a840 <_Balloc+0x64>
 800a826:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a82a:	e00e      	b.n	800a84a <_Balloc+0x6e>
 800a82c:	2221      	movs	r2, #33	; 0x21
 800a82e:	2104      	movs	r1, #4
 800a830:	4620      	mov	r0, r4
 800a832:	f000 fc94 	bl	800b15e <_calloc_r>
 800a836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a838:	60f0      	str	r0, [r6, #12]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d1e4      	bne.n	800a80a <_Balloc+0x2e>
 800a840:	2000      	movs	r0, #0
 800a842:	bd70      	pop	{r4, r5, r6, pc}
 800a844:	6802      	ldr	r2, [r0, #0]
 800a846:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a84a:	2300      	movs	r3, #0
 800a84c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a850:	e7f7      	b.n	800a842 <_Balloc+0x66>
 800a852:	bf00      	nop
 800a854:	0800c1dd 	.word	0x0800c1dd
 800a858:	0800c33c 	.word	0x0800c33c

0800a85c <_Bfree>:
 800a85c:	b570      	push	{r4, r5, r6, lr}
 800a85e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a860:	4605      	mov	r5, r0
 800a862:	460c      	mov	r4, r1
 800a864:	b976      	cbnz	r6, 800a884 <_Bfree+0x28>
 800a866:	2010      	movs	r0, #16
 800a868:	f7ff ff9e 	bl	800a7a8 <malloc>
 800a86c:	4602      	mov	r2, r0
 800a86e:	6268      	str	r0, [r5, #36]	; 0x24
 800a870:	b920      	cbnz	r0, 800a87c <_Bfree+0x20>
 800a872:	4b09      	ldr	r3, [pc, #36]	; (800a898 <_Bfree+0x3c>)
 800a874:	4809      	ldr	r0, [pc, #36]	; (800a89c <_Bfree+0x40>)
 800a876:	218a      	movs	r1, #138	; 0x8a
 800a878:	f000 ff3c 	bl	800b6f4 <__assert_func>
 800a87c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a880:	6006      	str	r6, [r0, #0]
 800a882:	60c6      	str	r6, [r0, #12]
 800a884:	b13c      	cbz	r4, 800a896 <_Bfree+0x3a>
 800a886:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a888:	6862      	ldr	r2, [r4, #4]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a890:	6021      	str	r1, [r4, #0]
 800a892:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a896:	bd70      	pop	{r4, r5, r6, pc}
 800a898:	0800c1dd 	.word	0x0800c1dd
 800a89c:	0800c33c 	.word	0x0800c33c

0800a8a0 <__multadd>:
 800a8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a4:	690d      	ldr	r5, [r1, #16]
 800a8a6:	4607      	mov	r7, r0
 800a8a8:	460c      	mov	r4, r1
 800a8aa:	461e      	mov	r6, r3
 800a8ac:	f101 0c14 	add.w	ip, r1, #20
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	f8dc 3000 	ldr.w	r3, [ip]
 800a8b6:	b299      	uxth	r1, r3
 800a8b8:	fb02 6101 	mla	r1, r2, r1, r6
 800a8bc:	0c1e      	lsrs	r6, r3, #16
 800a8be:	0c0b      	lsrs	r3, r1, #16
 800a8c0:	fb02 3306 	mla	r3, r2, r6, r3
 800a8c4:	b289      	uxth	r1, r1
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8cc:	4285      	cmp	r5, r0
 800a8ce:	f84c 1b04 	str.w	r1, [ip], #4
 800a8d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8d6:	dcec      	bgt.n	800a8b2 <__multadd+0x12>
 800a8d8:	b30e      	cbz	r6, 800a91e <__multadd+0x7e>
 800a8da:	68a3      	ldr	r3, [r4, #8]
 800a8dc:	42ab      	cmp	r3, r5
 800a8de:	dc19      	bgt.n	800a914 <__multadd+0x74>
 800a8e0:	6861      	ldr	r1, [r4, #4]
 800a8e2:	4638      	mov	r0, r7
 800a8e4:	3101      	adds	r1, #1
 800a8e6:	f7ff ff79 	bl	800a7dc <_Balloc>
 800a8ea:	4680      	mov	r8, r0
 800a8ec:	b928      	cbnz	r0, 800a8fa <__multadd+0x5a>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	4b0c      	ldr	r3, [pc, #48]	; (800a924 <__multadd+0x84>)
 800a8f2:	480d      	ldr	r0, [pc, #52]	; (800a928 <__multadd+0x88>)
 800a8f4:	21b5      	movs	r1, #181	; 0xb5
 800a8f6:	f000 fefd 	bl	800b6f4 <__assert_func>
 800a8fa:	6922      	ldr	r2, [r4, #16]
 800a8fc:	3202      	adds	r2, #2
 800a8fe:	f104 010c 	add.w	r1, r4, #12
 800a902:	0092      	lsls	r2, r2, #2
 800a904:	300c      	adds	r0, #12
 800a906:	f7fc ff2f 	bl	8007768 <memcpy>
 800a90a:	4621      	mov	r1, r4
 800a90c:	4638      	mov	r0, r7
 800a90e:	f7ff ffa5 	bl	800a85c <_Bfree>
 800a912:	4644      	mov	r4, r8
 800a914:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a918:	3501      	adds	r5, #1
 800a91a:	615e      	str	r6, [r3, #20]
 800a91c:	6125      	str	r5, [r4, #16]
 800a91e:	4620      	mov	r0, r4
 800a920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a924:	0800c24f 	.word	0x0800c24f
 800a928:	0800c33c 	.word	0x0800c33c

0800a92c <__s2b>:
 800a92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a930:	460c      	mov	r4, r1
 800a932:	4615      	mov	r5, r2
 800a934:	461f      	mov	r7, r3
 800a936:	2209      	movs	r2, #9
 800a938:	3308      	adds	r3, #8
 800a93a:	4606      	mov	r6, r0
 800a93c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a940:	2100      	movs	r1, #0
 800a942:	2201      	movs	r2, #1
 800a944:	429a      	cmp	r2, r3
 800a946:	db09      	blt.n	800a95c <__s2b+0x30>
 800a948:	4630      	mov	r0, r6
 800a94a:	f7ff ff47 	bl	800a7dc <_Balloc>
 800a94e:	b940      	cbnz	r0, 800a962 <__s2b+0x36>
 800a950:	4602      	mov	r2, r0
 800a952:	4b19      	ldr	r3, [pc, #100]	; (800a9b8 <__s2b+0x8c>)
 800a954:	4819      	ldr	r0, [pc, #100]	; (800a9bc <__s2b+0x90>)
 800a956:	21ce      	movs	r1, #206	; 0xce
 800a958:	f000 fecc 	bl	800b6f4 <__assert_func>
 800a95c:	0052      	lsls	r2, r2, #1
 800a95e:	3101      	adds	r1, #1
 800a960:	e7f0      	b.n	800a944 <__s2b+0x18>
 800a962:	9b08      	ldr	r3, [sp, #32]
 800a964:	6143      	str	r3, [r0, #20]
 800a966:	2d09      	cmp	r5, #9
 800a968:	f04f 0301 	mov.w	r3, #1
 800a96c:	6103      	str	r3, [r0, #16]
 800a96e:	dd16      	ble.n	800a99e <__s2b+0x72>
 800a970:	f104 0909 	add.w	r9, r4, #9
 800a974:	46c8      	mov	r8, r9
 800a976:	442c      	add	r4, r5
 800a978:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a97c:	4601      	mov	r1, r0
 800a97e:	3b30      	subs	r3, #48	; 0x30
 800a980:	220a      	movs	r2, #10
 800a982:	4630      	mov	r0, r6
 800a984:	f7ff ff8c 	bl	800a8a0 <__multadd>
 800a988:	45a0      	cmp	r8, r4
 800a98a:	d1f5      	bne.n	800a978 <__s2b+0x4c>
 800a98c:	f1a5 0408 	sub.w	r4, r5, #8
 800a990:	444c      	add	r4, r9
 800a992:	1b2d      	subs	r5, r5, r4
 800a994:	1963      	adds	r3, r4, r5
 800a996:	42bb      	cmp	r3, r7
 800a998:	db04      	blt.n	800a9a4 <__s2b+0x78>
 800a99a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a99e:	340a      	adds	r4, #10
 800a9a0:	2509      	movs	r5, #9
 800a9a2:	e7f6      	b.n	800a992 <__s2b+0x66>
 800a9a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a9a8:	4601      	mov	r1, r0
 800a9aa:	3b30      	subs	r3, #48	; 0x30
 800a9ac:	220a      	movs	r2, #10
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	f7ff ff76 	bl	800a8a0 <__multadd>
 800a9b4:	e7ee      	b.n	800a994 <__s2b+0x68>
 800a9b6:	bf00      	nop
 800a9b8:	0800c24f 	.word	0x0800c24f
 800a9bc:	0800c33c 	.word	0x0800c33c

0800a9c0 <__hi0bits>:
 800a9c0:	0c03      	lsrs	r3, r0, #16
 800a9c2:	041b      	lsls	r3, r3, #16
 800a9c4:	b9d3      	cbnz	r3, 800a9fc <__hi0bits+0x3c>
 800a9c6:	0400      	lsls	r0, r0, #16
 800a9c8:	2310      	movs	r3, #16
 800a9ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a9ce:	bf04      	itt	eq
 800a9d0:	0200      	lsleq	r0, r0, #8
 800a9d2:	3308      	addeq	r3, #8
 800a9d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a9d8:	bf04      	itt	eq
 800a9da:	0100      	lsleq	r0, r0, #4
 800a9dc:	3304      	addeq	r3, #4
 800a9de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a9e2:	bf04      	itt	eq
 800a9e4:	0080      	lsleq	r0, r0, #2
 800a9e6:	3302      	addeq	r3, #2
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	db05      	blt.n	800a9f8 <__hi0bits+0x38>
 800a9ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a9f0:	f103 0301 	add.w	r3, r3, #1
 800a9f4:	bf08      	it	eq
 800a9f6:	2320      	moveq	r3, #32
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	4770      	bx	lr
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	e7e4      	b.n	800a9ca <__hi0bits+0xa>

0800aa00 <__lo0bits>:
 800aa00:	6803      	ldr	r3, [r0, #0]
 800aa02:	f013 0207 	ands.w	r2, r3, #7
 800aa06:	4601      	mov	r1, r0
 800aa08:	d00b      	beq.n	800aa22 <__lo0bits+0x22>
 800aa0a:	07da      	lsls	r2, r3, #31
 800aa0c:	d423      	bmi.n	800aa56 <__lo0bits+0x56>
 800aa0e:	0798      	lsls	r0, r3, #30
 800aa10:	bf49      	itett	mi
 800aa12:	085b      	lsrmi	r3, r3, #1
 800aa14:	089b      	lsrpl	r3, r3, #2
 800aa16:	2001      	movmi	r0, #1
 800aa18:	600b      	strmi	r3, [r1, #0]
 800aa1a:	bf5c      	itt	pl
 800aa1c:	600b      	strpl	r3, [r1, #0]
 800aa1e:	2002      	movpl	r0, #2
 800aa20:	4770      	bx	lr
 800aa22:	b298      	uxth	r0, r3
 800aa24:	b9a8      	cbnz	r0, 800aa52 <__lo0bits+0x52>
 800aa26:	0c1b      	lsrs	r3, r3, #16
 800aa28:	2010      	movs	r0, #16
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	b90a      	cbnz	r2, 800aa32 <__lo0bits+0x32>
 800aa2e:	3008      	adds	r0, #8
 800aa30:	0a1b      	lsrs	r3, r3, #8
 800aa32:	071a      	lsls	r2, r3, #28
 800aa34:	bf04      	itt	eq
 800aa36:	091b      	lsreq	r3, r3, #4
 800aa38:	3004      	addeq	r0, #4
 800aa3a:	079a      	lsls	r2, r3, #30
 800aa3c:	bf04      	itt	eq
 800aa3e:	089b      	lsreq	r3, r3, #2
 800aa40:	3002      	addeq	r0, #2
 800aa42:	07da      	lsls	r2, r3, #31
 800aa44:	d403      	bmi.n	800aa4e <__lo0bits+0x4e>
 800aa46:	085b      	lsrs	r3, r3, #1
 800aa48:	f100 0001 	add.w	r0, r0, #1
 800aa4c:	d005      	beq.n	800aa5a <__lo0bits+0x5a>
 800aa4e:	600b      	str	r3, [r1, #0]
 800aa50:	4770      	bx	lr
 800aa52:	4610      	mov	r0, r2
 800aa54:	e7e9      	b.n	800aa2a <__lo0bits+0x2a>
 800aa56:	2000      	movs	r0, #0
 800aa58:	4770      	bx	lr
 800aa5a:	2020      	movs	r0, #32
 800aa5c:	4770      	bx	lr
	...

0800aa60 <__i2b>:
 800aa60:	b510      	push	{r4, lr}
 800aa62:	460c      	mov	r4, r1
 800aa64:	2101      	movs	r1, #1
 800aa66:	f7ff feb9 	bl	800a7dc <_Balloc>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	b928      	cbnz	r0, 800aa7a <__i2b+0x1a>
 800aa6e:	4b05      	ldr	r3, [pc, #20]	; (800aa84 <__i2b+0x24>)
 800aa70:	4805      	ldr	r0, [pc, #20]	; (800aa88 <__i2b+0x28>)
 800aa72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aa76:	f000 fe3d 	bl	800b6f4 <__assert_func>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	6144      	str	r4, [r0, #20]
 800aa7e:	6103      	str	r3, [r0, #16]
 800aa80:	bd10      	pop	{r4, pc}
 800aa82:	bf00      	nop
 800aa84:	0800c24f 	.word	0x0800c24f
 800aa88:	0800c33c 	.word	0x0800c33c

0800aa8c <__multiply>:
 800aa8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa90:	4691      	mov	r9, r2
 800aa92:	690a      	ldr	r2, [r1, #16]
 800aa94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	bfb8      	it	lt
 800aa9c:	460b      	movlt	r3, r1
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	bfbc      	itt	lt
 800aaa2:	464c      	movlt	r4, r9
 800aaa4:	4699      	movlt	r9, r3
 800aaa6:	6927      	ldr	r7, [r4, #16]
 800aaa8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aaac:	68a3      	ldr	r3, [r4, #8]
 800aaae:	6861      	ldr	r1, [r4, #4]
 800aab0:	eb07 060a 	add.w	r6, r7, sl
 800aab4:	42b3      	cmp	r3, r6
 800aab6:	b085      	sub	sp, #20
 800aab8:	bfb8      	it	lt
 800aaba:	3101      	addlt	r1, #1
 800aabc:	f7ff fe8e 	bl	800a7dc <_Balloc>
 800aac0:	b930      	cbnz	r0, 800aad0 <__multiply+0x44>
 800aac2:	4602      	mov	r2, r0
 800aac4:	4b44      	ldr	r3, [pc, #272]	; (800abd8 <__multiply+0x14c>)
 800aac6:	4845      	ldr	r0, [pc, #276]	; (800abdc <__multiply+0x150>)
 800aac8:	f240 115d 	movw	r1, #349	; 0x15d
 800aacc:	f000 fe12 	bl	800b6f4 <__assert_func>
 800aad0:	f100 0514 	add.w	r5, r0, #20
 800aad4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aad8:	462b      	mov	r3, r5
 800aada:	2200      	movs	r2, #0
 800aadc:	4543      	cmp	r3, r8
 800aade:	d321      	bcc.n	800ab24 <__multiply+0x98>
 800aae0:	f104 0314 	add.w	r3, r4, #20
 800aae4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aae8:	f109 0314 	add.w	r3, r9, #20
 800aaec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aaf0:	9202      	str	r2, [sp, #8]
 800aaf2:	1b3a      	subs	r2, r7, r4
 800aaf4:	3a15      	subs	r2, #21
 800aaf6:	f022 0203 	bic.w	r2, r2, #3
 800aafa:	3204      	adds	r2, #4
 800aafc:	f104 0115 	add.w	r1, r4, #21
 800ab00:	428f      	cmp	r7, r1
 800ab02:	bf38      	it	cc
 800ab04:	2204      	movcc	r2, #4
 800ab06:	9201      	str	r2, [sp, #4]
 800ab08:	9a02      	ldr	r2, [sp, #8]
 800ab0a:	9303      	str	r3, [sp, #12]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d80c      	bhi.n	800ab2a <__multiply+0x9e>
 800ab10:	2e00      	cmp	r6, #0
 800ab12:	dd03      	ble.n	800ab1c <__multiply+0x90>
 800ab14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d05a      	beq.n	800abd2 <__multiply+0x146>
 800ab1c:	6106      	str	r6, [r0, #16]
 800ab1e:	b005      	add	sp, #20
 800ab20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab24:	f843 2b04 	str.w	r2, [r3], #4
 800ab28:	e7d8      	b.n	800aadc <__multiply+0x50>
 800ab2a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ab2e:	f1ba 0f00 	cmp.w	sl, #0
 800ab32:	d024      	beq.n	800ab7e <__multiply+0xf2>
 800ab34:	f104 0e14 	add.w	lr, r4, #20
 800ab38:	46a9      	mov	r9, r5
 800ab3a:	f04f 0c00 	mov.w	ip, #0
 800ab3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ab42:	f8d9 1000 	ldr.w	r1, [r9]
 800ab46:	fa1f fb82 	uxth.w	fp, r2
 800ab4a:	b289      	uxth	r1, r1
 800ab4c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ab50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ab54:	f8d9 2000 	ldr.w	r2, [r9]
 800ab58:	4461      	add	r1, ip
 800ab5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab5e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ab62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ab66:	b289      	uxth	r1, r1
 800ab68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab6c:	4577      	cmp	r7, lr
 800ab6e:	f849 1b04 	str.w	r1, [r9], #4
 800ab72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab76:	d8e2      	bhi.n	800ab3e <__multiply+0xb2>
 800ab78:	9a01      	ldr	r2, [sp, #4]
 800ab7a:	f845 c002 	str.w	ip, [r5, r2]
 800ab7e:	9a03      	ldr	r2, [sp, #12]
 800ab80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab84:	3304      	adds	r3, #4
 800ab86:	f1b9 0f00 	cmp.w	r9, #0
 800ab8a:	d020      	beq.n	800abce <__multiply+0x142>
 800ab8c:	6829      	ldr	r1, [r5, #0]
 800ab8e:	f104 0c14 	add.w	ip, r4, #20
 800ab92:	46ae      	mov	lr, r5
 800ab94:	f04f 0a00 	mov.w	sl, #0
 800ab98:	f8bc b000 	ldrh.w	fp, [ip]
 800ab9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aba0:	fb09 220b 	mla	r2, r9, fp, r2
 800aba4:	4492      	add	sl, r2
 800aba6:	b289      	uxth	r1, r1
 800aba8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800abac:	f84e 1b04 	str.w	r1, [lr], #4
 800abb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800abb4:	f8be 1000 	ldrh.w	r1, [lr]
 800abb8:	0c12      	lsrs	r2, r2, #16
 800abba:	fb09 1102 	mla	r1, r9, r2, r1
 800abbe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800abc2:	4567      	cmp	r7, ip
 800abc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800abc8:	d8e6      	bhi.n	800ab98 <__multiply+0x10c>
 800abca:	9a01      	ldr	r2, [sp, #4]
 800abcc:	50a9      	str	r1, [r5, r2]
 800abce:	3504      	adds	r5, #4
 800abd0:	e79a      	b.n	800ab08 <__multiply+0x7c>
 800abd2:	3e01      	subs	r6, #1
 800abd4:	e79c      	b.n	800ab10 <__multiply+0x84>
 800abd6:	bf00      	nop
 800abd8:	0800c24f 	.word	0x0800c24f
 800abdc:	0800c33c 	.word	0x0800c33c

0800abe0 <__pow5mult>:
 800abe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abe4:	4615      	mov	r5, r2
 800abe6:	f012 0203 	ands.w	r2, r2, #3
 800abea:	4606      	mov	r6, r0
 800abec:	460f      	mov	r7, r1
 800abee:	d007      	beq.n	800ac00 <__pow5mult+0x20>
 800abf0:	4c25      	ldr	r4, [pc, #148]	; (800ac88 <__pow5mult+0xa8>)
 800abf2:	3a01      	subs	r2, #1
 800abf4:	2300      	movs	r3, #0
 800abf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800abfa:	f7ff fe51 	bl	800a8a0 <__multadd>
 800abfe:	4607      	mov	r7, r0
 800ac00:	10ad      	asrs	r5, r5, #2
 800ac02:	d03d      	beq.n	800ac80 <__pow5mult+0xa0>
 800ac04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ac06:	b97c      	cbnz	r4, 800ac28 <__pow5mult+0x48>
 800ac08:	2010      	movs	r0, #16
 800ac0a:	f7ff fdcd 	bl	800a7a8 <malloc>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	6270      	str	r0, [r6, #36]	; 0x24
 800ac12:	b928      	cbnz	r0, 800ac20 <__pow5mult+0x40>
 800ac14:	4b1d      	ldr	r3, [pc, #116]	; (800ac8c <__pow5mult+0xac>)
 800ac16:	481e      	ldr	r0, [pc, #120]	; (800ac90 <__pow5mult+0xb0>)
 800ac18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ac1c:	f000 fd6a 	bl	800b6f4 <__assert_func>
 800ac20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac24:	6004      	str	r4, [r0, #0]
 800ac26:	60c4      	str	r4, [r0, #12]
 800ac28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ac2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac30:	b94c      	cbnz	r4, 800ac46 <__pow5mult+0x66>
 800ac32:	f240 2171 	movw	r1, #625	; 0x271
 800ac36:	4630      	mov	r0, r6
 800ac38:	f7ff ff12 	bl	800aa60 <__i2b>
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac42:	4604      	mov	r4, r0
 800ac44:	6003      	str	r3, [r0, #0]
 800ac46:	f04f 0900 	mov.w	r9, #0
 800ac4a:	07eb      	lsls	r3, r5, #31
 800ac4c:	d50a      	bpl.n	800ac64 <__pow5mult+0x84>
 800ac4e:	4639      	mov	r1, r7
 800ac50:	4622      	mov	r2, r4
 800ac52:	4630      	mov	r0, r6
 800ac54:	f7ff ff1a 	bl	800aa8c <__multiply>
 800ac58:	4639      	mov	r1, r7
 800ac5a:	4680      	mov	r8, r0
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	f7ff fdfd 	bl	800a85c <_Bfree>
 800ac62:	4647      	mov	r7, r8
 800ac64:	106d      	asrs	r5, r5, #1
 800ac66:	d00b      	beq.n	800ac80 <__pow5mult+0xa0>
 800ac68:	6820      	ldr	r0, [r4, #0]
 800ac6a:	b938      	cbnz	r0, 800ac7c <__pow5mult+0x9c>
 800ac6c:	4622      	mov	r2, r4
 800ac6e:	4621      	mov	r1, r4
 800ac70:	4630      	mov	r0, r6
 800ac72:	f7ff ff0b 	bl	800aa8c <__multiply>
 800ac76:	6020      	str	r0, [r4, #0]
 800ac78:	f8c0 9000 	str.w	r9, [r0]
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	e7e4      	b.n	800ac4a <__pow5mult+0x6a>
 800ac80:	4638      	mov	r0, r7
 800ac82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac86:	bf00      	nop
 800ac88:	0800c488 	.word	0x0800c488
 800ac8c:	0800c1dd 	.word	0x0800c1dd
 800ac90:	0800c33c 	.word	0x0800c33c

0800ac94 <__lshift>:
 800ac94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac98:	460c      	mov	r4, r1
 800ac9a:	6849      	ldr	r1, [r1, #4]
 800ac9c:	6923      	ldr	r3, [r4, #16]
 800ac9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aca2:	68a3      	ldr	r3, [r4, #8]
 800aca4:	4607      	mov	r7, r0
 800aca6:	4691      	mov	r9, r2
 800aca8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800acac:	f108 0601 	add.w	r6, r8, #1
 800acb0:	42b3      	cmp	r3, r6
 800acb2:	db0b      	blt.n	800accc <__lshift+0x38>
 800acb4:	4638      	mov	r0, r7
 800acb6:	f7ff fd91 	bl	800a7dc <_Balloc>
 800acba:	4605      	mov	r5, r0
 800acbc:	b948      	cbnz	r0, 800acd2 <__lshift+0x3e>
 800acbe:	4602      	mov	r2, r0
 800acc0:	4b2a      	ldr	r3, [pc, #168]	; (800ad6c <__lshift+0xd8>)
 800acc2:	482b      	ldr	r0, [pc, #172]	; (800ad70 <__lshift+0xdc>)
 800acc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800acc8:	f000 fd14 	bl	800b6f4 <__assert_func>
 800accc:	3101      	adds	r1, #1
 800acce:	005b      	lsls	r3, r3, #1
 800acd0:	e7ee      	b.n	800acb0 <__lshift+0x1c>
 800acd2:	2300      	movs	r3, #0
 800acd4:	f100 0114 	add.w	r1, r0, #20
 800acd8:	f100 0210 	add.w	r2, r0, #16
 800acdc:	4618      	mov	r0, r3
 800acde:	4553      	cmp	r3, sl
 800ace0:	db37      	blt.n	800ad52 <__lshift+0xbe>
 800ace2:	6920      	ldr	r0, [r4, #16]
 800ace4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ace8:	f104 0314 	add.w	r3, r4, #20
 800acec:	f019 091f 	ands.w	r9, r9, #31
 800acf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800acf4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800acf8:	d02f      	beq.n	800ad5a <__lshift+0xc6>
 800acfa:	f1c9 0e20 	rsb	lr, r9, #32
 800acfe:	468a      	mov	sl, r1
 800ad00:	f04f 0c00 	mov.w	ip, #0
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	fa02 f209 	lsl.w	r2, r2, r9
 800ad0a:	ea42 020c 	orr.w	r2, r2, ip
 800ad0e:	f84a 2b04 	str.w	r2, [sl], #4
 800ad12:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad16:	4298      	cmp	r0, r3
 800ad18:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ad1c:	d8f2      	bhi.n	800ad04 <__lshift+0x70>
 800ad1e:	1b03      	subs	r3, r0, r4
 800ad20:	3b15      	subs	r3, #21
 800ad22:	f023 0303 	bic.w	r3, r3, #3
 800ad26:	3304      	adds	r3, #4
 800ad28:	f104 0215 	add.w	r2, r4, #21
 800ad2c:	4290      	cmp	r0, r2
 800ad2e:	bf38      	it	cc
 800ad30:	2304      	movcc	r3, #4
 800ad32:	f841 c003 	str.w	ip, [r1, r3]
 800ad36:	f1bc 0f00 	cmp.w	ip, #0
 800ad3a:	d001      	beq.n	800ad40 <__lshift+0xac>
 800ad3c:	f108 0602 	add.w	r6, r8, #2
 800ad40:	3e01      	subs	r6, #1
 800ad42:	4638      	mov	r0, r7
 800ad44:	612e      	str	r6, [r5, #16]
 800ad46:	4621      	mov	r1, r4
 800ad48:	f7ff fd88 	bl	800a85c <_Bfree>
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad52:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad56:	3301      	adds	r3, #1
 800ad58:	e7c1      	b.n	800acde <__lshift+0x4a>
 800ad5a:	3904      	subs	r1, #4
 800ad5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad60:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad64:	4298      	cmp	r0, r3
 800ad66:	d8f9      	bhi.n	800ad5c <__lshift+0xc8>
 800ad68:	e7ea      	b.n	800ad40 <__lshift+0xac>
 800ad6a:	bf00      	nop
 800ad6c:	0800c24f 	.word	0x0800c24f
 800ad70:	0800c33c 	.word	0x0800c33c

0800ad74 <__mcmp>:
 800ad74:	b530      	push	{r4, r5, lr}
 800ad76:	6902      	ldr	r2, [r0, #16]
 800ad78:	690c      	ldr	r4, [r1, #16]
 800ad7a:	1b12      	subs	r2, r2, r4
 800ad7c:	d10e      	bne.n	800ad9c <__mcmp+0x28>
 800ad7e:	f100 0314 	add.w	r3, r0, #20
 800ad82:	3114      	adds	r1, #20
 800ad84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad94:	42a5      	cmp	r5, r4
 800ad96:	d003      	beq.n	800ada0 <__mcmp+0x2c>
 800ad98:	d305      	bcc.n	800ada6 <__mcmp+0x32>
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	4610      	mov	r0, r2
 800ad9e:	bd30      	pop	{r4, r5, pc}
 800ada0:	4283      	cmp	r3, r0
 800ada2:	d3f3      	bcc.n	800ad8c <__mcmp+0x18>
 800ada4:	e7fa      	b.n	800ad9c <__mcmp+0x28>
 800ada6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800adaa:	e7f7      	b.n	800ad9c <__mcmp+0x28>

0800adac <__mdiff>:
 800adac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb0:	460c      	mov	r4, r1
 800adb2:	4606      	mov	r6, r0
 800adb4:	4611      	mov	r1, r2
 800adb6:	4620      	mov	r0, r4
 800adb8:	4690      	mov	r8, r2
 800adba:	f7ff ffdb 	bl	800ad74 <__mcmp>
 800adbe:	1e05      	subs	r5, r0, #0
 800adc0:	d110      	bne.n	800ade4 <__mdiff+0x38>
 800adc2:	4629      	mov	r1, r5
 800adc4:	4630      	mov	r0, r6
 800adc6:	f7ff fd09 	bl	800a7dc <_Balloc>
 800adca:	b930      	cbnz	r0, 800adda <__mdiff+0x2e>
 800adcc:	4b3a      	ldr	r3, [pc, #232]	; (800aeb8 <__mdiff+0x10c>)
 800adce:	4602      	mov	r2, r0
 800add0:	f240 2132 	movw	r1, #562	; 0x232
 800add4:	4839      	ldr	r0, [pc, #228]	; (800aebc <__mdiff+0x110>)
 800add6:	f000 fc8d 	bl	800b6f4 <__assert_func>
 800adda:	2301      	movs	r3, #1
 800addc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ade0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade4:	bfa4      	itt	ge
 800ade6:	4643      	movge	r3, r8
 800ade8:	46a0      	movge	r8, r4
 800adea:	4630      	mov	r0, r6
 800adec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800adf0:	bfa6      	itte	ge
 800adf2:	461c      	movge	r4, r3
 800adf4:	2500      	movge	r5, #0
 800adf6:	2501      	movlt	r5, #1
 800adf8:	f7ff fcf0 	bl	800a7dc <_Balloc>
 800adfc:	b920      	cbnz	r0, 800ae08 <__mdiff+0x5c>
 800adfe:	4b2e      	ldr	r3, [pc, #184]	; (800aeb8 <__mdiff+0x10c>)
 800ae00:	4602      	mov	r2, r0
 800ae02:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ae06:	e7e5      	b.n	800add4 <__mdiff+0x28>
 800ae08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ae0c:	6926      	ldr	r6, [r4, #16]
 800ae0e:	60c5      	str	r5, [r0, #12]
 800ae10:	f104 0914 	add.w	r9, r4, #20
 800ae14:	f108 0514 	add.w	r5, r8, #20
 800ae18:	f100 0e14 	add.w	lr, r0, #20
 800ae1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ae20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ae24:	f108 0210 	add.w	r2, r8, #16
 800ae28:	46f2      	mov	sl, lr
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ae34:	fa1f f883 	uxth.w	r8, r3
 800ae38:	fa11 f18b 	uxtah	r1, r1, fp
 800ae3c:	0c1b      	lsrs	r3, r3, #16
 800ae3e:	eba1 0808 	sub.w	r8, r1, r8
 800ae42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ae46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ae4a:	fa1f f888 	uxth.w	r8, r8
 800ae4e:	1419      	asrs	r1, r3, #16
 800ae50:	454e      	cmp	r6, r9
 800ae52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ae56:	f84a 3b04 	str.w	r3, [sl], #4
 800ae5a:	d8e7      	bhi.n	800ae2c <__mdiff+0x80>
 800ae5c:	1b33      	subs	r3, r6, r4
 800ae5e:	3b15      	subs	r3, #21
 800ae60:	f023 0303 	bic.w	r3, r3, #3
 800ae64:	3304      	adds	r3, #4
 800ae66:	3415      	adds	r4, #21
 800ae68:	42a6      	cmp	r6, r4
 800ae6a:	bf38      	it	cc
 800ae6c:	2304      	movcc	r3, #4
 800ae6e:	441d      	add	r5, r3
 800ae70:	4473      	add	r3, lr
 800ae72:	469e      	mov	lr, r3
 800ae74:	462e      	mov	r6, r5
 800ae76:	4566      	cmp	r6, ip
 800ae78:	d30e      	bcc.n	800ae98 <__mdiff+0xec>
 800ae7a:	f10c 0203 	add.w	r2, ip, #3
 800ae7e:	1b52      	subs	r2, r2, r5
 800ae80:	f022 0203 	bic.w	r2, r2, #3
 800ae84:	3d03      	subs	r5, #3
 800ae86:	45ac      	cmp	ip, r5
 800ae88:	bf38      	it	cc
 800ae8a:	2200      	movcc	r2, #0
 800ae8c:	441a      	add	r2, r3
 800ae8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ae92:	b17b      	cbz	r3, 800aeb4 <__mdiff+0x108>
 800ae94:	6107      	str	r7, [r0, #16]
 800ae96:	e7a3      	b.n	800ade0 <__mdiff+0x34>
 800ae98:	f856 8b04 	ldr.w	r8, [r6], #4
 800ae9c:	fa11 f288 	uxtah	r2, r1, r8
 800aea0:	1414      	asrs	r4, r2, #16
 800aea2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aea6:	b292      	uxth	r2, r2
 800aea8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aeac:	f84e 2b04 	str.w	r2, [lr], #4
 800aeb0:	1421      	asrs	r1, r4, #16
 800aeb2:	e7e0      	b.n	800ae76 <__mdiff+0xca>
 800aeb4:	3f01      	subs	r7, #1
 800aeb6:	e7ea      	b.n	800ae8e <__mdiff+0xe2>
 800aeb8:	0800c24f 	.word	0x0800c24f
 800aebc:	0800c33c 	.word	0x0800c33c

0800aec0 <__ulp>:
 800aec0:	b082      	sub	sp, #8
 800aec2:	ed8d 0b00 	vstr	d0, [sp]
 800aec6:	9b01      	ldr	r3, [sp, #4]
 800aec8:	4912      	ldr	r1, [pc, #72]	; (800af14 <__ulp+0x54>)
 800aeca:	4019      	ands	r1, r3
 800aecc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800aed0:	2900      	cmp	r1, #0
 800aed2:	dd05      	ble.n	800aee0 <__ulp+0x20>
 800aed4:	2200      	movs	r2, #0
 800aed6:	460b      	mov	r3, r1
 800aed8:	ec43 2b10 	vmov	d0, r2, r3
 800aedc:	b002      	add	sp, #8
 800aede:	4770      	bx	lr
 800aee0:	4249      	negs	r1, r1
 800aee2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800aee6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800aeea:	f04f 0200 	mov.w	r2, #0
 800aeee:	f04f 0300 	mov.w	r3, #0
 800aef2:	da04      	bge.n	800aefe <__ulp+0x3e>
 800aef4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800aef8:	fa41 f300 	asr.w	r3, r1, r0
 800aefc:	e7ec      	b.n	800aed8 <__ulp+0x18>
 800aefe:	f1a0 0114 	sub.w	r1, r0, #20
 800af02:	291e      	cmp	r1, #30
 800af04:	bfda      	itte	le
 800af06:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800af0a:	fa20 f101 	lsrle.w	r1, r0, r1
 800af0e:	2101      	movgt	r1, #1
 800af10:	460a      	mov	r2, r1
 800af12:	e7e1      	b.n	800aed8 <__ulp+0x18>
 800af14:	7ff00000 	.word	0x7ff00000

0800af18 <__b2d>:
 800af18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af1a:	6905      	ldr	r5, [r0, #16]
 800af1c:	f100 0714 	add.w	r7, r0, #20
 800af20:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800af24:	1f2e      	subs	r6, r5, #4
 800af26:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800af2a:	4620      	mov	r0, r4
 800af2c:	f7ff fd48 	bl	800a9c0 <__hi0bits>
 800af30:	f1c0 0320 	rsb	r3, r0, #32
 800af34:	280a      	cmp	r0, #10
 800af36:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800afb4 <__b2d+0x9c>
 800af3a:	600b      	str	r3, [r1, #0]
 800af3c:	dc14      	bgt.n	800af68 <__b2d+0x50>
 800af3e:	f1c0 0e0b 	rsb	lr, r0, #11
 800af42:	fa24 f10e 	lsr.w	r1, r4, lr
 800af46:	42b7      	cmp	r7, r6
 800af48:	ea41 030c 	orr.w	r3, r1, ip
 800af4c:	bf34      	ite	cc
 800af4e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800af52:	2100      	movcs	r1, #0
 800af54:	3015      	adds	r0, #21
 800af56:	fa04 f000 	lsl.w	r0, r4, r0
 800af5a:	fa21 f10e 	lsr.w	r1, r1, lr
 800af5e:	ea40 0201 	orr.w	r2, r0, r1
 800af62:	ec43 2b10 	vmov	d0, r2, r3
 800af66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af68:	42b7      	cmp	r7, r6
 800af6a:	bf3a      	itte	cc
 800af6c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800af70:	f1a5 0608 	subcc.w	r6, r5, #8
 800af74:	2100      	movcs	r1, #0
 800af76:	380b      	subs	r0, #11
 800af78:	d017      	beq.n	800afaa <__b2d+0x92>
 800af7a:	f1c0 0c20 	rsb	ip, r0, #32
 800af7e:	fa04 f500 	lsl.w	r5, r4, r0
 800af82:	42be      	cmp	r6, r7
 800af84:	fa21 f40c 	lsr.w	r4, r1, ip
 800af88:	ea45 0504 	orr.w	r5, r5, r4
 800af8c:	bf8c      	ite	hi
 800af8e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800af92:	2400      	movls	r4, #0
 800af94:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800af98:	fa01 f000 	lsl.w	r0, r1, r0
 800af9c:	fa24 f40c 	lsr.w	r4, r4, ip
 800afa0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800afa4:	ea40 0204 	orr.w	r2, r0, r4
 800afa8:	e7db      	b.n	800af62 <__b2d+0x4a>
 800afaa:	ea44 030c 	orr.w	r3, r4, ip
 800afae:	460a      	mov	r2, r1
 800afb0:	e7d7      	b.n	800af62 <__b2d+0x4a>
 800afb2:	bf00      	nop
 800afb4:	3ff00000 	.word	0x3ff00000

0800afb8 <__d2b>:
 800afb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800afbc:	4689      	mov	r9, r1
 800afbe:	2101      	movs	r1, #1
 800afc0:	ec57 6b10 	vmov	r6, r7, d0
 800afc4:	4690      	mov	r8, r2
 800afc6:	f7ff fc09 	bl	800a7dc <_Balloc>
 800afca:	4604      	mov	r4, r0
 800afcc:	b930      	cbnz	r0, 800afdc <__d2b+0x24>
 800afce:	4602      	mov	r2, r0
 800afd0:	4b25      	ldr	r3, [pc, #148]	; (800b068 <__d2b+0xb0>)
 800afd2:	4826      	ldr	r0, [pc, #152]	; (800b06c <__d2b+0xb4>)
 800afd4:	f240 310a 	movw	r1, #778	; 0x30a
 800afd8:	f000 fb8c 	bl	800b6f4 <__assert_func>
 800afdc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800afe0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800afe4:	bb35      	cbnz	r5, 800b034 <__d2b+0x7c>
 800afe6:	2e00      	cmp	r6, #0
 800afe8:	9301      	str	r3, [sp, #4]
 800afea:	d028      	beq.n	800b03e <__d2b+0x86>
 800afec:	4668      	mov	r0, sp
 800afee:	9600      	str	r6, [sp, #0]
 800aff0:	f7ff fd06 	bl	800aa00 <__lo0bits>
 800aff4:	9900      	ldr	r1, [sp, #0]
 800aff6:	b300      	cbz	r0, 800b03a <__d2b+0x82>
 800aff8:	9a01      	ldr	r2, [sp, #4]
 800affa:	f1c0 0320 	rsb	r3, r0, #32
 800affe:	fa02 f303 	lsl.w	r3, r2, r3
 800b002:	430b      	orrs	r3, r1
 800b004:	40c2      	lsrs	r2, r0
 800b006:	6163      	str	r3, [r4, #20]
 800b008:	9201      	str	r2, [sp, #4]
 800b00a:	9b01      	ldr	r3, [sp, #4]
 800b00c:	61a3      	str	r3, [r4, #24]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	bf14      	ite	ne
 800b012:	2202      	movne	r2, #2
 800b014:	2201      	moveq	r2, #1
 800b016:	6122      	str	r2, [r4, #16]
 800b018:	b1d5      	cbz	r5, 800b050 <__d2b+0x98>
 800b01a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b01e:	4405      	add	r5, r0
 800b020:	f8c9 5000 	str.w	r5, [r9]
 800b024:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b028:	f8c8 0000 	str.w	r0, [r8]
 800b02c:	4620      	mov	r0, r4
 800b02e:	b003      	add	sp, #12
 800b030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b034:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b038:	e7d5      	b.n	800afe6 <__d2b+0x2e>
 800b03a:	6161      	str	r1, [r4, #20]
 800b03c:	e7e5      	b.n	800b00a <__d2b+0x52>
 800b03e:	a801      	add	r0, sp, #4
 800b040:	f7ff fcde 	bl	800aa00 <__lo0bits>
 800b044:	9b01      	ldr	r3, [sp, #4]
 800b046:	6163      	str	r3, [r4, #20]
 800b048:	2201      	movs	r2, #1
 800b04a:	6122      	str	r2, [r4, #16]
 800b04c:	3020      	adds	r0, #32
 800b04e:	e7e3      	b.n	800b018 <__d2b+0x60>
 800b050:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b054:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b058:	f8c9 0000 	str.w	r0, [r9]
 800b05c:	6918      	ldr	r0, [r3, #16]
 800b05e:	f7ff fcaf 	bl	800a9c0 <__hi0bits>
 800b062:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b066:	e7df      	b.n	800b028 <__d2b+0x70>
 800b068:	0800c24f 	.word	0x0800c24f
 800b06c:	0800c33c 	.word	0x0800c33c

0800b070 <__ratio>:
 800b070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b074:	4688      	mov	r8, r1
 800b076:	4669      	mov	r1, sp
 800b078:	4681      	mov	r9, r0
 800b07a:	f7ff ff4d 	bl	800af18 <__b2d>
 800b07e:	a901      	add	r1, sp, #4
 800b080:	4640      	mov	r0, r8
 800b082:	ec55 4b10 	vmov	r4, r5, d0
 800b086:	f7ff ff47 	bl	800af18 <__b2d>
 800b08a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b08e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b092:	eba3 0c02 	sub.w	ip, r3, r2
 800b096:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b09a:	1a9b      	subs	r3, r3, r2
 800b09c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b0a0:	ec51 0b10 	vmov	r0, r1, d0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	bfd6      	itet	le
 800b0a8:	460a      	movle	r2, r1
 800b0aa:	462a      	movgt	r2, r5
 800b0ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b0b0:	468b      	mov	fp, r1
 800b0b2:	462f      	mov	r7, r5
 800b0b4:	bfd4      	ite	le
 800b0b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b0ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b0be:	4620      	mov	r0, r4
 800b0c0:	ee10 2a10 	vmov	r2, s0
 800b0c4:	465b      	mov	r3, fp
 800b0c6:	4639      	mov	r1, r7
 800b0c8:	f7f5 fbc8 	bl	800085c <__aeabi_ddiv>
 800b0cc:	ec41 0b10 	vmov	d0, r0, r1
 800b0d0:	b003      	add	sp, #12
 800b0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b0d6 <__copybits>:
 800b0d6:	3901      	subs	r1, #1
 800b0d8:	b570      	push	{r4, r5, r6, lr}
 800b0da:	1149      	asrs	r1, r1, #5
 800b0dc:	6914      	ldr	r4, [r2, #16]
 800b0de:	3101      	adds	r1, #1
 800b0e0:	f102 0314 	add.w	r3, r2, #20
 800b0e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b0e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b0ec:	1f05      	subs	r5, r0, #4
 800b0ee:	42a3      	cmp	r3, r4
 800b0f0:	d30c      	bcc.n	800b10c <__copybits+0x36>
 800b0f2:	1aa3      	subs	r3, r4, r2
 800b0f4:	3b11      	subs	r3, #17
 800b0f6:	f023 0303 	bic.w	r3, r3, #3
 800b0fa:	3211      	adds	r2, #17
 800b0fc:	42a2      	cmp	r2, r4
 800b0fe:	bf88      	it	hi
 800b100:	2300      	movhi	r3, #0
 800b102:	4418      	add	r0, r3
 800b104:	2300      	movs	r3, #0
 800b106:	4288      	cmp	r0, r1
 800b108:	d305      	bcc.n	800b116 <__copybits+0x40>
 800b10a:	bd70      	pop	{r4, r5, r6, pc}
 800b10c:	f853 6b04 	ldr.w	r6, [r3], #4
 800b110:	f845 6f04 	str.w	r6, [r5, #4]!
 800b114:	e7eb      	b.n	800b0ee <__copybits+0x18>
 800b116:	f840 3b04 	str.w	r3, [r0], #4
 800b11a:	e7f4      	b.n	800b106 <__copybits+0x30>

0800b11c <__any_on>:
 800b11c:	f100 0214 	add.w	r2, r0, #20
 800b120:	6900      	ldr	r0, [r0, #16]
 800b122:	114b      	asrs	r3, r1, #5
 800b124:	4298      	cmp	r0, r3
 800b126:	b510      	push	{r4, lr}
 800b128:	db11      	blt.n	800b14e <__any_on+0x32>
 800b12a:	dd0a      	ble.n	800b142 <__any_on+0x26>
 800b12c:	f011 011f 	ands.w	r1, r1, #31
 800b130:	d007      	beq.n	800b142 <__any_on+0x26>
 800b132:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b136:	fa24 f001 	lsr.w	r0, r4, r1
 800b13a:	fa00 f101 	lsl.w	r1, r0, r1
 800b13e:	428c      	cmp	r4, r1
 800b140:	d10b      	bne.n	800b15a <__any_on+0x3e>
 800b142:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b146:	4293      	cmp	r3, r2
 800b148:	d803      	bhi.n	800b152 <__any_on+0x36>
 800b14a:	2000      	movs	r0, #0
 800b14c:	bd10      	pop	{r4, pc}
 800b14e:	4603      	mov	r3, r0
 800b150:	e7f7      	b.n	800b142 <__any_on+0x26>
 800b152:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b156:	2900      	cmp	r1, #0
 800b158:	d0f5      	beq.n	800b146 <__any_on+0x2a>
 800b15a:	2001      	movs	r0, #1
 800b15c:	e7f6      	b.n	800b14c <__any_on+0x30>

0800b15e <_calloc_r>:
 800b15e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b160:	fba1 2402 	umull	r2, r4, r1, r2
 800b164:	b94c      	cbnz	r4, 800b17a <_calloc_r+0x1c>
 800b166:	4611      	mov	r1, r2
 800b168:	9201      	str	r2, [sp, #4]
 800b16a:	f000 f87b 	bl	800b264 <_malloc_r>
 800b16e:	9a01      	ldr	r2, [sp, #4]
 800b170:	4605      	mov	r5, r0
 800b172:	b930      	cbnz	r0, 800b182 <_calloc_r+0x24>
 800b174:	4628      	mov	r0, r5
 800b176:	b003      	add	sp, #12
 800b178:	bd30      	pop	{r4, r5, pc}
 800b17a:	220c      	movs	r2, #12
 800b17c:	6002      	str	r2, [r0, #0]
 800b17e:	2500      	movs	r5, #0
 800b180:	e7f8      	b.n	800b174 <_calloc_r+0x16>
 800b182:	4621      	mov	r1, r4
 800b184:	f7fc fafe 	bl	8007784 <memset>
 800b188:	e7f4      	b.n	800b174 <_calloc_r+0x16>
	...

0800b18c <_free_r>:
 800b18c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b18e:	2900      	cmp	r1, #0
 800b190:	d044      	beq.n	800b21c <_free_r+0x90>
 800b192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b196:	9001      	str	r0, [sp, #4]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f1a1 0404 	sub.w	r4, r1, #4
 800b19e:	bfb8      	it	lt
 800b1a0:	18e4      	addlt	r4, r4, r3
 800b1a2:	f000 fb1b 	bl	800b7dc <__malloc_lock>
 800b1a6:	4a1e      	ldr	r2, [pc, #120]	; (800b220 <_free_r+0x94>)
 800b1a8:	9801      	ldr	r0, [sp, #4]
 800b1aa:	6813      	ldr	r3, [r2, #0]
 800b1ac:	b933      	cbnz	r3, 800b1bc <_free_r+0x30>
 800b1ae:	6063      	str	r3, [r4, #4]
 800b1b0:	6014      	str	r4, [r2, #0]
 800b1b2:	b003      	add	sp, #12
 800b1b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1b8:	f000 bb16 	b.w	800b7e8 <__malloc_unlock>
 800b1bc:	42a3      	cmp	r3, r4
 800b1be:	d908      	bls.n	800b1d2 <_free_r+0x46>
 800b1c0:	6825      	ldr	r5, [r4, #0]
 800b1c2:	1961      	adds	r1, r4, r5
 800b1c4:	428b      	cmp	r3, r1
 800b1c6:	bf01      	itttt	eq
 800b1c8:	6819      	ldreq	r1, [r3, #0]
 800b1ca:	685b      	ldreq	r3, [r3, #4]
 800b1cc:	1949      	addeq	r1, r1, r5
 800b1ce:	6021      	streq	r1, [r4, #0]
 800b1d0:	e7ed      	b.n	800b1ae <_free_r+0x22>
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	b10b      	cbz	r3, 800b1dc <_free_r+0x50>
 800b1d8:	42a3      	cmp	r3, r4
 800b1da:	d9fa      	bls.n	800b1d2 <_free_r+0x46>
 800b1dc:	6811      	ldr	r1, [r2, #0]
 800b1de:	1855      	adds	r5, r2, r1
 800b1e0:	42a5      	cmp	r5, r4
 800b1e2:	d10b      	bne.n	800b1fc <_free_r+0x70>
 800b1e4:	6824      	ldr	r4, [r4, #0]
 800b1e6:	4421      	add	r1, r4
 800b1e8:	1854      	adds	r4, r2, r1
 800b1ea:	42a3      	cmp	r3, r4
 800b1ec:	6011      	str	r1, [r2, #0]
 800b1ee:	d1e0      	bne.n	800b1b2 <_free_r+0x26>
 800b1f0:	681c      	ldr	r4, [r3, #0]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	6053      	str	r3, [r2, #4]
 800b1f6:	4421      	add	r1, r4
 800b1f8:	6011      	str	r1, [r2, #0]
 800b1fa:	e7da      	b.n	800b1b2 <_free_r+0x26>
 800b1fc:	d902      	bls.n	800b204 <_free_r+0x78>
 800b1fe:	230c      	movs	r3, #12
 800b200:	6003      	str	r3, [r0, #0]
 800b202:	e7d6      	b.n	800b1b2 <_free_r+0x26>
 800b204:	6825      	ldr	r5, [r4, #0]
 800b206:	1961      	adds	r1, r4, r5
 800b208:	428b      	cmp	r3, r1
 800b20a:	bf04      	itt	eq
 800b20c:	6819      	ldreq	r1, [r3, #0]
 800b20e:	685b      	ldreq	r3, [r3, #4]
 800b210:	6063      	str	r3, [r4, #4]
 800b212:	bf04      	itt	eq
 800b214:	1949      	addeq	r1, r1, r5
 800b216:	6021      	streq	r1, [r4, #0]
 800b218:	6054      	str	r4, [r2, #4]
 800b21a:	e7ca      	b.n	800b1b2 <_free_r+0x26>
 800b21c:	b003      	add	sp, #12
 800b21e:	bd30      	pop	{r4, r5, pc}
 800b220:	200008f4 	.word	0x200008f4

0800b224 <sbrk_aligned>:
 800b224:	b570      	push	{r4, r5, r6, lr}
 800b226:	4e0e      	ldr	r6, [pc, #56]	; (800b260 <sbrk_aligned+0x3c>)
 800b228:	460c      	mov	r4, r1
 800b22a:	6831      	ldr	r1, [r6, #0]
 800b22c:	4605      	mov	r5, r0
 800b22e:	b911      	cbnz	r1, 800b236 <sbrk_aligned+0x12>
 800b230:	f000 f9ee 	bl	800b610 <_sbrk_r>
 800b234:	6030      	str	r0, [r6, #0]
 800b236:	4621      	mov	r1, r4
 800b238:	4628      	mov	r0, r5
 800b23a:	f000 f9e9 	bl	800b610 <_sbrk_r>
 800b23e:	1c43      	adds	r3, r0, #1
 800b240:	d00a      	beq.n	800b258 <sbrk_aligned+0x34>
 800b242:	1cc4      	adds	r4, r0, #3
 800b244:	f024 0403 	bic.w	r4, r4, #3
 800b248:	42a0      	cmp	r0, r4
 800b24a:	d007      	beq.n	800b25c <sbrk_aligned+0x38>
 800b24c:	1a21      	subs	r1, r4, r0
 800b24e:	4628      	mov	r0, r5
 800b250:	f000 f9de 	bl	800b610 <_sbrk_r>
 800b254:	3001      	adds	r0, #1
 800b256:	d101      	bne.n	800b25c <sbrk_aligned+0x38>
 800b258:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b25c:	4620      	mov	r0, r4
 800b25e:	bd70      	pop	{r4, r5, r6, pc}
 800b260:	200008f8 	.word	0x200008f8

0800b264 <_malloc_r>:
 800b264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b268:	1ccd      	adds	r5, r1, #3
 800b26a:	f025 0503 	bic.w	r5, r5, #3
 800b26e:	3508      	adds	r5, #8
 800b270:	2d0c      	cmp	r5, #12
 800b272:	bf38      	it	cc
 800b274:	250c      	movcc	r5, #12
 800b276:	2d00      	cmp	r5, #0
 800b278:	4607      	mov	r7, r0
 800b27a:	db01      	blt.n	800b280 <_malloc_r+0x1c>
 800b27c:	42a9      	cmp	r1, r5
 800b27e:	d905      	bls.n	800b28c <_malloc_r+0x28>
 800b280:	230c      	movs	r3, #12
 800b282:	603b      	str	r3, [r7, #0]
 800b284:	2600      	movs	r6, #0
 800b286:	4630      	mov	r0, r6
 800b288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b28c:	4e2e      	ldr	r6, [pc, #184]	; (800b348 <_malloc_r+0xe4>)
 800b28e:	f000 faa5 	bl	800b7dc <__malloc_lock>
 800b292:	6833      	ldr	r3, [r6, #0]
 800b294:	461c      	mov	r4, r3
 800b296:	bb34      	cbnz	r4, 800b2e6 <_malloc_r+0x82>
 800b298:	4629      	mov	r1, r5
 800b29a:	4638      	mov	r0, r7
 800b29c:	f7ff ffc2 	bl	800b224 <sbrk_aligned>
 800b2a0:	1c43      	adds	r3, r0, #1
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	d14d      	bne.n	800b342 <_malloc_r+0xde>
 800b2a6:	6834      	ldr	r4, [r6, #0]
 800b2a8:	4626      	mov	r6, r4
 800b2aa:	2e00      	cmp	r6, #0
 800b2ac:	d140      	bne.n	800b330 <_malloc_r+0xcc>
 800b2ae:	6823      	ldr	r3, [r4, #0]
 800b2b0:	4631      	mov	r1, r6
 800b2b2:	4638      	mov	r0, r7
 800b2b4:	eb04 0803 	add.w	r8, r4, r3
 800b2b8:	f000 f9aa 	bl	800b610 <_sbrk_r>
 800b2bc:	4580      	cmp	r8, r0
 800b2be:	d13a      	bne.n	800b336 <_malloc_r+0xd2>
 800b2c0:	6821      	ldr	r1, [r4, #0]
 800b2c2:	3503      	adds	r5, #3
 800b2c4:	1a6d      	subs	r5, r5, r1
 800b2c6:	f025 0503 	bic.w	r5, r5, #3
 800b2ca:	3508      	adds	r5, #8
 800b2cc:	2d0c      	cmp	r5, #12
 800b2ce:	bf38      	it	cc
 800b2d0:	250c      	movcc	r5, #12
 800b2d2:	4629      	mov	r1, r5
 800b2d4:	4638      	mov	r0, r7
 800b2d6:	f7ff ffa5 	bl	800b224 <sbrk_aligned>
 800b2da:	3001      	adds	r0, #1
 800b2dc:	d02b      	beq.n	800b336 <_malloc_r+0xd2>
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	442b      	add	r3, r5
 800b2e2:	6023      	str	r3, [r4, #0]
 800b2e4:	e00e      	b.n	800b304 <_malloc_r+0xa0>
 800b2e6:	6822      	ldr	r2, [r4, #0]
 800b2e8:	1b52      	subs	r2, r2, r5
 800b2ea:	d41e      	bmi.n	800b32a <_malloc_r+0xc6>
 800b2ec:	2a0b      	cmp	r2, #11
 800b2ee:	d916      	bls.n	800b31e <_malloc_r+0xba>
 800b2f0:	1961      	adds	r1, r4, r5
 800b2f2:	42a3      	cmp	r3, r4
 800b2f4:	6025      	str	r5, [r4, #0]
 800b2f6:	bf18      	it	ne
 800b2f8:	6059      	strne	r1, [r3, #4]
 800b2fa:	6863      	ldr	r3, [r4, #4]
 800b2fc:	bf08      	it	eq
 800b2fe:	6031      	streq	r1, [r6, #0]
 800b300:	5162      	str	r2, [r4, r5]
 800b302:	604b      	str	r3, [r1, #4]
 800b304:	4638      	mov	r0, r7
 800b306:	f104 060b 	add.w	r6, r4, #11
 800b30a:	f000 fa6d 	bl	800b7e8 <__malloc_unlock>
 800b30e:	f026 0607 	bic.w	r6, r6, #7
 800b312:	1d23      	adds	r3, r4, #4
 800b314:	1af2      	subs	r2, r6, r3
 800b316:	d0b6      	beq.n	800b286 <_malloc_r+0x22>
 800b318:	1b9b      	subs	r3, r3, r6
 800b31a:	50a3      	str	r3, [r4, r2]
 800b31c:	e7b3      	b.n	800b286 <_malloc_r+0x22>
 800b31e:	6862      	ldr	r2, [r4, #4]
 800b320:	42a3      	cmp	r3, r4
 800b322:	bf0c      	ite	eq
 800b324:	6032      	streq	r2, [r6, #0]
 800b326:	605a      	strne	r2, [r3, #4]
 800b328:	e7ec      	b.n	800b304 <_malloc_r+0xa0>
 800b32a:	4623      	mov	r3, r4
 800b32c:	6864      	ldr	r4, [r4, #4]
 800b32e:	e7b2      	b.n	800b296 <_malloc_r+0x32>
 800b330:	4634      	mov	r4, r6
 800b332:	6876      	ldr	r6, [r6, #4]
 800b334:	e7b9      	b.n	800b2aa <_malloc_r+0x46>
 800b336:	230c      	movs	r3, #12
 800b338:	603b      	str	r3, [r7, #0]
 800b33a:	4638      	mov	r0, r7
 800b33c:	f000 fa54 	bl	800b7e8 <__malloc_unlock>
 800b340:	e7a1      	b.n	800b286 <_malloc_r+0x22>
 800b342:	6025      	str	r5, [r4, #0]
 800b344:	e7de      	b.n	800b304 <_malloc_r+0xa0>
 800b346:	bf00      	nop
 800b348:	200008f4 	.word	0x200008f4

0800b34c <__sfputc_r>:
 800b34c:	6893      	ldr	r3, [r2, #8]
 800b34e:	3b01      	subs	r3, #1
 800b350:	2b00      	cmp	r3, #0
 800b352:	b410      	push	{r4}
 800b354:	6093      	str	r3, [r2, #8]
 800b356:	da08      	bge.n	800b36a <__sfputc_r+0x1e>
 800b358:	6994      	ldr	r4, [r2, #24]
 800b35a:	42a3      	cmp	r3, r4
 800b35c:	db01      	blt.n	800b362 <__sfputc_r+0x16>
 800b35e:	290a      	cmp	r1, #10
 800b360:	d103      	bne.n	800b36a <__sfputc_r+0x1e>
 800b362:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b366:	f7fd bd51 	b.w	8008e0c <__swbuf_r>
 800b36a:	6813      	ldr	r3, [r2, #0]
 800b36c:	1c58      	adds	r0, r3, #1
 800b36e:	6010      	str	r0, [r2, #0]
 800b370:	7019      	strb	r1, [r3, #0]
 800b372:	4608      	mov	r0, r1
 800b374:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <__sfputs_r>:
 800b37a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37c:	4606      	mov	r6, r0
 800b37e:	460f      	mov	r7, r1
 800b380:	4614      	mov	r4, r2
 800b382:	18d5      	adds	r5, r2, r3
 800b384:	42ac      	cmp	r4, r5
 800b386:	d101      	bne.n	800b38c <__sfputs_r+0x12>
 800b388:	2000      	movs	r0, #0
 800b38a:	e007      	b.n	800b39c <__sfputs_r+0x22>
 800b38c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b390:	463a      	mov	r2, r7
 800b392:	4630      	mov	r0, r6
 800b394:	f7ff ffda 	bl	800b34c <__sfputc_r>
 800b398:	1c43      	adds	r3, r0, #1
 800b39a:	d1f3      	bne.n	800b384 <__sfputs_r+0xa>
 800b39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3a0 <_vfiprintf_r>:
 800b3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a4:	460d      	mov	r5, r1
 800b3a6:	b09d      	sub	sp, #116	; 0x74
 800b3a8:	4614      	mov	r4, r2
 800b3aa:	4698      	mov	r8, r3
 800b3ac:	4606      	mov	r6, r0
 800b3ae:	b118      	cbz	r0, 800b3b8 <_vfiprintf_r+0x18>
 800b3b0:	6983      	ldr	r3, [r0, #24]
 800b3b2:	b90b      	cbnz	r3, 800b3b8 <_vfiprintf_r+0x18>
 800b3b4:	f7fe fd80 	bl	8009eb8 <__sinit>
 800b3b8:	4b89      	ldr	r3, [pc, #548]	; (800b5e0 <_vfiprintf_r+0x240>)
 800b3ba:	429d      	cmp	r5, r3
 800b3bc:	d11b      	bne.n	800b3f6 <_vfiprintf_r+0x56>
 800b3be:	6875      	ldr	r5, [r6, #4]
 800b3c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3c2:	07d9      	lsls	r1, r3, #31
 800b3c4:	d405      	bmi.n	800b3d2 <_vfiprintf_r+0x32>
 800b3c6:	89ab      	ldrh	r3, [r5, #12]
 800b3c8:	059a      	lsls	r2, r3, #22
 800b3ca:	d402      	bmi.n	800b3d2 <_vfiprintf_r+0x32>
 800b3cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3ce:	f7ff f984 	bl	800a6da <__retarget_lock_acquire_recursive>
 800b3d2:	89ab      	ldrh	r3, [r5, #12]
 800b3d4:	071b      	lsls	r3, r3, #28
 800b3d6:	d501      	bpl.n	800b3dc <_vfiprintf_r+0x3c>
 800b3d8:	692b      	ldr	r3, [r5, #16]
 800b3da:	b9eb      	cbnz	r3, 800b418 <_vfiprintf_r+0x78>
 800b3dc:	4629      	mov	r1, r5
 800b3de:	4630      	mov	r0, r6
 800b3e0:	f7fd fd66 	bl	8008eb0 <__swsetup_r>
 800b3e4:	b1c0      	cbz	r0, 800b418 <_vfiprintf_r+0x78>
 800b3e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3e8:	07dc      	lsls	r4, r3, #31
 800b3ea:	d50e      	bpl.n	800b40a <_vfiprintf_r+0x6a>
 800b3ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3f0:	b01d      	add	sp, #116	; 0x74
 800b3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f6:	4b7b      	ldr	r3, [pc, #492]	; (800b5e4 <_vfiprintf_r+0x244>)
 800b3f8:	429d      	cmp	r5, r3
 800b3fa:	d101      	bne.n	800b400 <_vfiprintf_r+0x60>
 800b3fc:	68b5      	ldr	r5, [r6, #8]
 800b3fe:	e7df      	b.n	800b3c0 <_vfiprintf_r+0x20>
 800b400:	4b79      	ldr	r3, [pc, #484]	; (800b5e8 <_vfiprintf_r+0x248>)
 800b402:	429d      	cmp	r5, r3
 800b404:	bf08      	it	eq
 800b406:	68f5      	ldreq	r5, [r6, #12]
 800b408:	e7da      	b.n	800b3c0 <_vfiprintf_r+0x20>
 800b40a:	89ab      	ldrh	r3, [r5, #12]
 800b40c:	0598      	lsls	r0, r3, #22
 800b40e:	d4ed      	bmi.n	800b3ec <_vfiprintf_r+0x4c>
 800b410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b412:	f7ff f963 	bl	800a6dc <__retarget_lock_release_recursive>
 800b416:	e7e9      	b.n	800b3ec <_vfiprintf_r+0x4c>
 800b418:	2300      	movs	r3, #0
 800b41a:	9309      	str	r3, [sp, #36]	; 0x24
 800b41c:	2320      	movs	r3, #32
 800b41e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b422:	f8cd 800c 	str.w	r8, [sp, #12]
 800b426:	2330      	movs	r3, #48	; 0x30
 800b428:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b5ec <_vfiprintf_r+0x24c>
 800b42c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b430:	f04f 0901 	mov.w	r9, #1
 800b434:	4623      	mov	r3, r4
 800b436:	469a      	mov	sl, r3
 800b438:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b43c:	b10a      	cbz	r2, 800b442 <_vfiprintf_r+0xa2>
 800b43e:	2a25      	cmp	r2, #37	; 0x25
 800b440:	d1f9      	bne.n	800b436 <_vfiprintf_r+0x96>
 800b442:	ebba 0b04 	subs.w	fp, sl, r4
 800b446:	d00b      	beq.n	800b460 <_vfiprintf_r+0xc0>
 800b448:	465b      	mov	r3, fp
 800b44a:	4622      	mov	r2, r4
 800b44c:	4629      	mov	r1, r5
 800b44e:	4630      	mov	r0, r6
 800b450:	f7ff ff93 	bl	800b37a <__sfputs_r>
 800b454:	3001      	adds	r0, #1
 800b456:	f000 80aa 	beq.w	800b5ae <_vfiprintf_r+0x20e>
 800b45a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b45c:	445a      	add	r2, fp
 800b45e:	9209      	str	r2, [sp, #36]	; 0x24
 800b460:	f89a 3000 	ldrb.w	r3, [sl]
 800b464:	2b00      	cmp	r3, #0
 800b466:	f000 80a2 	beq.w	800b5ae <_vfiprintf_r+0x20e>
 800b46a:	2300      	movs	r3, #0
 800b46c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b470:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b474:	f10a 0a01 	add.w	sl, sl, #1
 800b478:	9304      	str	r3, [sp, #16]
 800b47a:	9307      	str	r3, [sp, #28]
 800b47c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b480:	931a      	str	r3, [sp, #104]	; 0x68
 800b482:	4654      	mov	r4, sl
 800b484:	2205      	movs	r2, #5
 800b486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b48a:	4858      	ldr	r0, [pc, #352]	; (800b5ec <_vfiprintf_r+0x24c>)
 800b48c:	f7f4 feb0 	bl	80001f0 <memchr>
 800b490:	9a04      	ldr	r2, [sp, #16]
 800b492:	b9d8      	cbnz	r0, 800b4cc <_vfiprintf_r+0x12c>
 800b494:	06d1      	lsls	r1, r2, #27
 800b496:	bf44      	itt	mi
 800b498:	2320      	movmi	r3, #32
 800b49a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b49e:	0713      	lsls	r3, r2, #28
 800b4a0:	bf44      	itt	mi
 800b4a2:	232b      	movmi	r3, #43	; 0x2b
 800b4a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4a8:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ac:	2b2a      	cmp	r3, #42	; 0x2a
 800b4ae:	d015      	beq.n	800b4dc <_vfiprintf_r+0x13c>
 800b4b0:	9a07      	ldr	r2, [sp, #28]
 800b4b2:	4654      	mov	r4, sl
 800b4b4:	2000      	movs	r0, #0
 800b4b6:	f04f 0c0a 	mov.w	ip, #10
 800b4ba:	4621      	mov	r1, r4
 800b4bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4c0:	3b30      	subs	r3, #48	; 0x30
 800b4c2:	2b09      	cmp	r3, #9
 800b4c4:	d94e      	bls.n	800b564 <_vfiprintf_r+0x1c4>
 800b4c6:	b1b0      	cbz	r0, 800b4f6 <_vfiprintf_r+0x156>
 800b4c8:	9207      	str	r2, [sp, #28]
 800b4ca:	e014      	b.n	800b4f6 <_vfiprintf_r+0x156>
 800b4cc:	eba0 0308 	sub.w	r3, r0, r8
 800b4d0:	fa09 f303 	lsl.w	r3, r9, r3
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	9304      	str	r3, [sp, #16]
 800b4d8:	46a2      	mov	sl, r4
 800b4da:	e7d2      	b.n	800b482 <_vfiprintf_r+0xe2>
 800b4dc:	9b03      	ldr	r3, [sp, #12]
 800b4de:	1d19      	adds	r1, r3, #4
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	9103      	str	r1, [sp, #12]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	bfbb      	ittet	lt
 800b4e8:	425b      	neglt	r3, r3
 800b4ea:	f042 0202 	orrlt.w	r2, r2, #2
 800b4ee:	9307      	strge	r3, [sp, #28]
 800b4f0:	9307      	strlt	r3, [sp, #28]
 800b4f2:	bfb8      	it	lt
 800b4f4:	9204      	strlt	r2, [sp, #16]
 800b4f6:	7823      	ldrb	r3, [r4, #0]
 800b4f8:	2b2e      	cmp	r3, #46	; 0x2e
 800b4fa:	d10c      	bne.n	800b516 <_vfiprintf_r+0x176>
 800b4fc:	7863      	ldrb	r3, [r4, #1]
 800b4fe:	2b2a      	cmp	r3, #42	; 0x2a
 800b500:	d135      	bne.n	800b56e <_vfiprintf_r+0x1ce>
 800b502:	9b03      	ldr	r3, [sp, #12]
 800b504:	1d1a      	adds	r2, r3, #4
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	9203      	str	r2, [sp, #12]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	bfb8      	it	lt
 800b50e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b512:	3402      	adds	r4, #2
 800b514:	9305      	str	r3, [sp, #20]
 800b516:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b5fc <_vfiprintf_r+0x25c>
 800b51a:	7821      	ldrb	r1, [r4, #0]
 800b51c:	2203      	movs	r2, #3
 800b51e:	4650      	mov	r0, sl
 800b520:	f7f4 fe66 	bl	80001f0 <memchr>
 800b524:	b140      	cbz	r0, 800b538 <_vfiprintf_r+0x198>
 800b526:	2340      	movs	r3, #64	; 0x40
 800b528:	eba0 000a 	sub.w	r0, r0, sl
 800b52c:	fa03 f000 	lsl.w	r0, r3, r0
 800b530:	9b04      	ldr	r3, [sp, #16]
 800b532:	4303      	orrs	r3, r0
 800b534:	3401      	adds	r4, #1
 800b536:	9304      	str	r3, [sp, #16]
 800b538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b53c:	482c      	ldr	r0, [pc, #176]	; (800b5f0 <_vfiprintf_r+0x250>)
 800b53e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b542:	2206      	movs	r2, #6
 800b544:	f7f4 fe54 	bl	80001f0 <memchr>
 800b548:	2800      	cmp	r0, #0
 800b54a:	d03f      	beq.n	800b5cc <_vfiprintf_r+0x22c>
 800b54c:	4b29      	ldr	r3, [pc, #164]	; (800b5f4 <_vfiprintf_r+0x254>)
 800b54e:	bb1b      	cbnz	r3, 800b598 <_vfiprintf_r+0x1f8>
 800b550:	9b03      	ldr	r3, [sp, #12]
 800b552:	3307      	adds	r3, #7
 800b554:	f023 0307 	bic.w	r3, r3, #7
 800b558:	3308      	adds	r3, #8
 800b55a:	9303      	str	r3, [sp, #12]
 800b55c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b55e:	443b      	add	r3, r7
 800b560:	9309      	str	r3, [sp, #36]	; 0x24
 800b562:	e767      	b.n	800b434 <_vfiprintf_r+0x94>
 800b564:	fb0c 3202 	mla	r2, ip, r2, r3
 800b568:	460c      	mov	r4, r1
 800b56a:	2001      	movs	r0, #1
 800b56c:	e7a5      	b.n	800b4ba <_vfiprintf_r+0x11a>
 800b56e:	2300      	movs	r3, #0
 800b570:	3401      	adds	r4, #1
 800b572:	9305      	str	r3, [sp, #20]
 800b574:	4619      	mov	r1, r3
 800b576:	f04f 0c0a 	mov.w	ip, #10
 800b57a:	4620      	mov	r0, r4
 800b57c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b580:	3a30      	subs	r2, #48	; 0x30
 800b582:	2a09      	cmp	r2, #9
 800b584:	d903      	bls.n	800b58e <_vfiprintf_r+0x1ee>
 800b586:	2b00      	cmp	r3, #0
 800b588:	d0c5      	beq.n	800b516 <_vfiprintf_r+0x176>
 800b58a:	9105      	str	r1, [sp, #20]
 800b58c:	e7c3      	b.n	800b516 <_vfiprintf_r+0x176>
 800b58e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b592:	4604      	mov	r4, r0
 800b594:	2301      	movs	r3, #1
 800b596:	e7f0      	b.n	800b57a <_vfiprintf_r+0x1da>
 800b598:	ab03      	add	r3, sp, #12
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	462a      	mov	r2, r5
 800b59e:	4b16      	ldr	r3, [pc, #88]	; (800b5f8 <_vfiprintf_r+0x258>)
 800b5a0:	a904      	add	r1, sp, #16
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f7fc f996 	bl	80078d4 <_printf_float>
 800b5a8:	4607      	mov	r7, r0
 800b5aa:	1c78      	adds	r0, r7, #1
 800b5ac:	d1d6      	bne.n	800b55c <_vfiprintf_r+0x1bc>
 800b5ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5b0:	07d9      	lsls	r1, r3, #31
 800b5b2:	d405      	bmi.n	800b5c0 <_vfiprintf_r+0x220>
 800b5b4:	89ab      	ldrh	r3, [r5, #12]
 800b5b6:	059a      	lsls	r2, r3, #22
 800b5b8:	d402      	bmi.n	800b5c0 <_vfiprintf_r+0x220>
 800b5ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5bc:	f7ff f88e 	bl	800a6dc <__retarget_lock_release_recursive>
 800b5c0:	89ab      	ldrh	r3, [r5, #12]
 800b5c2:	065b      	lsls	r3, r3, #25
 800b5c4:	f53f af12 	bmi.w	800b3ec <_vfiprintf_r+0x4c>
 800b5c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5ca:	e711      	b.n	800b3f0 <_vfiprintf_r+0x50>
 800b5cc:	ab03      	add	r3, sp, #12
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	462a      	mov	r2, r5
 800b5d2:	4b09      	ldr	r3, [pc, #36]	; (800b5f8 <_vfiprintf_r+0x258>)
 800b5d4:	a904      	add	r1, sp, #16
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	f7fc fc20 	bl	8007e1c <_printf_i>
 800b5dc:	e7e4      	b.n	800b5a8 <_vfiprintf_r+0x208>
 800b5de:	bf00      	nop
 800b5e0:	0800c280 	.word	0x0800c280
 800b5e4:	0800c2a0 	.word	0x0800c2a0
 800b5e8:	0800c260 	.word	0x0800c260
 800b5ec:	0800c494 	.word	0x0800c494
 800b5f0:	0800c49e 	.word	0x0800c49e
 800b5f4:	080078d5 	.word	0x080078d5
 800b5f8:	0800b37b 	.word	0x0800b37b
 800b5fc:	0800c49a 	.word	0x0800c49a

0800b600 <nan>:
 800b600:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b608 <nan+0x8>
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	00000000 	.word	0x00000000
 800b60c:	7ff80000 	.word	0x7ff80000

0800b610 <_sbrk_r>:
 800b610:	b538      	push	{r3, r4, r5, lr}
 800b612:	4d06      	ldr	r5, [pc, #24]	; (800b62c <_sbrk_r+0x1c>)
 800b614:	2300      	movs	r3, #0
 800b616:	4604      	mov	r4, r0
 800b618:	4608      	mov	r0, r1
 800b61a:	602b      	str	r3, [r5, #0]
 800b61c:	f7f6 fecc 	bl	80023b8 <_sbrk>
 800b620:	1c43      	adds	r3, r0, #1
 800b622:	d102      	bne.n	800b62a <_sbrk_r+0x1a>
 800b624:	682b      	ldr	r3, [r5, #0]
 800b626:	b103      	cbz	r3, 800b62a <_sbrk_r+0x1a>
 800b628:	6023      	str	r3, [r4, #0]
 800b62a:	bd38      	pop	{r3, r4, r5, pc}
 800b62c:	200008fc 	.word	0x200008fc

0800b630 <__sread>:
 800b630:	b510      	push	{r4, lr}
 800b632:	460c      	mov	r4, r1
 800b634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b638:	f000 f8dc 	bl	800b7f4 <_read_r>
 800b63c:	2800      	cmp	r0, #0
 800b63e:	bfab      	itete	ge
 800b640:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b642:	89a3      	ldrhlt	r3, [r4, #12]
 800b644:	181b      	addge	r3, r3, r0
 800b646:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b64a:	bfac      	ite	ge
 800b64c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b64e:	81a3      	strhlt	r3, [r4, #12]
 800b650:	bd10      	pop	{r4, pc}

0800b652 <__swrite>:
 800b652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b656:	461f      	mov	r7, r3
 800b658:	898b      	ldrh	r3, [r1, #12]
 800b65a:	05db      	lsls	r3, r3, #23
 800b65c:	4605      	mov	r5, r0
 800b65e:	460c      	mov	r4, r1
 800b660:	4616      	mov	r6, r2
 800b662:	d505      	bpl.n	800b670 <__swrite+0x1e>
 800b664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b668:	2302      	movs	r3, #2
 800b66a:	2200      	movs	r2, #0
 800b66c:	f000 f8a4 	bl	800b7b8 <_lseek_r>
 800b670:	89a3      	ldrh	r3, [r4, #12]
 800b672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b676:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b67a:	81a3      	strh	r3, [r4, #12]
 800b67c:	4632      	mov	r2, r6
 800b67e:	463b      	mov	r3, r7
 800b680:	4628      	mov	r0, r5
 800b682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b686:	f000 b823 	b.w	800b6d0 <_write_r>

0800b68a <__sseek>:
 800b68a:	b510      	push	{r4, lr}
 800b68c:	460c      	mov	r4, r1
 800b68e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b692:	f000 f891 	bl	800b7b8 <_lseek_r>
 800b696:	1c43      	adds	r3, r0, #1
 800b698:	89a3      	ldrh	r3, [r4, #12]
 800b69a:	bf15      	itete	ne
 800b69c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b69e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6a6:	81a3      	strheq	r3, [r4, #12]
 800b6a8:	bf18      	it	ne
 800b6aa:	81a3      	strhne	r3, [r4, #12]
 800b6ac:	bd10      	pop	{r4, pc}

0800b6ae <__sclose>:
 800b6ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6b2:	f000 b83d 	b.w	800b730 <_close_r>

0800b6b6 <__ascii_wctomb>:
 800b6b6:	b149      	cbz	r1, 800b6cc <__ascii_wctomb+0x16>
 800b6b8:	2aff      	cmp	r2, #255	; 0xff
 800b6ba:	bf85      	ittet	hi
 800b6bc:	238a      	movhi	r3, #138	; 0x8a
 800b6be:	6003      	strhi	r3, [r0, #0]
 800b6c0:	700a      	strbls	r2, [r1, #0]
 800b6c2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b6c6:	bf98      	it	ls
 800b6c8:	2001      	movls	r0, #1
 800b6ca:	4770      	bx	lr
 800b6cc:	4608      	mov	r0, r1
 800b6ce:	4770      	bx	lr

0800b6d0 <_write_r>:
 800b6d0:	b538      	push	{r3, r4, r5, lr}
 800b6d2:	4d07      	ldr	r5, [pc, #28]	; (800b6f0 <_write_r+0x20>)
 800b6d4:	4604      	mov	r4, r0
 800b6d6:	4608      	mov	r0, r1
 800b6d8:	4611      	mov	r1, r2
 800b6da:	2200      	movs	r2, #0
 800b6dc:	602a      	str	r2, [r5, #0]
 800b6de:	461a      	mov	r2, r3
 800b6e0:	f7f6 fe19 	bl	8002316 <_write>
 800b6e4:	1c43      	adds	r3, r0, #1
 800b6e6:	d102      	bne.n	800b6ee <_write_r+0x1e>
 800b6e8:	682b      	ldr	r3, [r5, #0]
 800b6ea:	b103      	cbz	r3, 800b6ee <_write_r+0x1e>
 800b6ec:	6023      	str	r3, [r4, #0]
 800b6ee:	bd38      	pop	{r3, r4, r5, pc}
 800b6f0:	200008fc 	.word	0x200008fc

0800b6f4 <__assert_func>:
 800b6f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6f6:	4614      	mov	r4, r2
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	4b09      	ldr	r3, [pc, #36]	; (800b720 <__assert_func+0x2c>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	4605      	mov	r5, r0
 800b700:	68d8      	ldr	r0, [r3, #12]
 800b702:	b14c      	cbz	r4, 800b718 <__assert_func+0x24>
 800b704:	4b07      	ldr	r3, [pc, #28]	; (800b724 <__assert_func+0x30>)
 800b706:	9100      	str	r1, [sp, #0]
 800b708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b70c:	4906      	ldr	r1, [pc, #24]	; (800b728 <__assert_func+0x34>)
 800b70e:	462b      	mov	r3, r5
 800b710:	f000 f81e 	bl	800b750 <fiprintf>
 800b714:	f000 f880 	bl	800b818 <abort>
 800b718:	4b04      	ldr	r3, [pc, #16]	; (800b72c <__assert_func+0x38>)
 800b71a:	461c      	mov	r4, r3
 800b71c:	e7f3      	b.n	800b706 <__assert_func+0x12>
 800b71e:	bf00      	nop
 800b720:	2000000c 	.word	0x2000000c
 800b724:	0800c4a5 	.word	0x0800c4a5
 800b728:	0800c4b2 	.word	0x0800c4b2
 800b72c:	0800c4e0 	.word	0x0800c4e0

0800b730 <_close_r>:
 800b730:	b538      	push	{r3, r4, r5, lr}
 800b732:	4d06      	ldr	r5, [pc, #24]	; (800b74c <_close_r+0x1c>)
 800b734:	2300      	movs	r3, #0
 800b736:	4604      	mov	r4, r0
 800b738:	4608      	mov	r0, r1
 800b73a:	602b      	str	r3, [r5, #0]
 800b73c:	f7f6 fe07 	bl	800234e <_close>
 800b740:	1c43      	adds	r3, r0, #1
 800b742:	d102      	bne.n	800b74a <_close_r+0x1a>
 800b744:	682b      	ldr	r3, [r5, #0]
 800b746:	b103      	cbz	r3, 800b74a <_close_r+0x1a>
 800b748:	6023      	str	r3, [r4, #0]
 800b74a:	bd38      	pop	{r3, r4, r5, pc}
 800b74c:	200008fc 	.word	0x200008fc

0800b750 <fiprintf>:
 800b750:	b40e      	push	{r1, r2, r3}
 800b752:	b503      	push	{r0, r1, lr}
 800b754:	4601      	mov	r1, r0
 800b756:	ab03      	add	r3, sp, #12
 800b758:	4805      	ldr	r0, [pc, #20]	; (800b770 <fiprintf+0x20>)
 800b75a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b75e:	6800      	ldr	r0, [r0, #0]
 800b760:	9301      	str	r3, [sp, #4]
 800b762:	f7ff fe1d 	bl	800b3a0 <_vfiprintf_r>
 800b766:	b002      	add	sp, #8
 800b768:	f85d eb04 	ldr.w	lr, [sp], #4
 800b76c:	b003      	add	sp, #12
 800b76e:	4770      	bx	lr
 800b770:	2000000c 	.word	0x2000000c

0800b774 <_fstat_r>:
 800b774:	b538      	push	{r3, r4, r5, lr}
 800b776:	4d07      	ldr	r5, [pc, #28]	; (800b794 <_fstat_r+0x20>)
 800b778:	2300      	movs	r3, #0
 800b77a:	4604      	mov	r4, r0
 800b77c:	4608      	mov	r0, r1
 800b77e:	4611      	mov	r1, r2
 800b780:	602b      	str	r3, [r5, #0]
 800b782:	f7f6 fdf0 	bl	8002366 <_fstat>
 800b786:	1c43      	adds	r3, r0, #1
 800b788:	d102      	bne.n	800b790 <_fstat_r+0x1c>
 800b78a:	682b      	ldr	r3, [r5, #0]
 800b78c:	b103      	cbz	r3, 800b790 <_fstat_r+0x1c>
 800b78e:	6023      	str	r3, [r4, #0]
 800b790:	bd38      	pop	{r3, r4, r5, pc}
 800b792:	bf00      	nop
 800b794:	200008fc 	.word	0x200008fc

0800b798 <_isatty_r>:
 800b798:	b538      	push	{r3, r4, r5, lr}
 800b79a:	4d06      	ldr	r5, [pc, #24]	; (800b7b4 <_isatty_r+0x1c>)
 800b79c:	2300      	movs	r3, #0
 800b79e:	4604      	mov	r4, r0
 800b7a0:	4608      	mov	r0, r1
 800b7a2:	602b      	str	r3, [r5, #0]
 800b7a4:	f7f6 fdef 	bl	8002386 <_isatty>
 800b7a8:	1c43      	adds	r3, r0, #1
 800b7aa:	d102      	bne.n	800b7b2 <_isatty_r+0x1a>
 800b7ac:	682b      	ldr	r3, [r5, #0]
 800b7ae:	b103      	cbz	r3, 800b7b2 <_isatty_r+0x1a>
 800b7b0:	6023      	str	r3, [r4, #0]
 800b7b2:	bd38      	pop	{r3, r4, r5, pc}
 800b7b4:	200008fc 	.word	0x200008fc

0800b7b8 <_lseek_r>:
 800b7b8:	b538      	push	{r3, r4, r5, lr}
 800b7ba:	4d07      	ldr	r5, [pc, #28]	; (800b7d8 <_lseek_r+0x20>)
 800b7bc:	4604      	mov	r4, r0
 800b7be:	4608      	mov	r0, r1
 800b7c0:	4611      	mov	r1, r2
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	602a      	str	r2, [r5, #0]
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	f7f6 fde8 	bl	800239c <_lseek>
 800b7cc:	1c43      	adds	r3, r0, #1
 800b7ce:	d102      	bne.n	800b7d6 <_lseek_r+0x1e>
 800b7d0:	682b      	ldr	r3, [r5, #0]
 800b7d2:	b103      	cbz	r3, 800b7d6 <_lseek_r+0x1e>
 800b7d4:	6023      	str	r3, [r4, #0]
 800b7d6:	bd38      	pop	{r3, r4, r5, pc}
 800b7d8:	200008fc 	.word	0x200008fc

0800b7dc <__malloc_lock>:
 800b7dc:	4801      	ldr	r0, [pc, #4]	; (800b7e4 <__malloc_lock+0x8>)
 800b7de:	f7fe bf7c 	b.w	800a6da <__retarget_lock_acquire_recursive>
 800b7e2:	bf00      	nop
 800b7e4:	200008f0 	.word	0x200008f0

0800b7e8 <__malloc_unlock>:
 800b7e8:	4801      	ldr	r0, [pc, #4]	; (800b7f0 <__malloc_unlock+0x8>)
 800b7ea:	f7fe bf77 	b.w	800a6dc <__retarget_lock_release_recursive>
 800b7ee:	bf00      	nop
 800b7f0:	200008f0 	.word	0x200008f0

0800b7f4 <_read_r>:
 800b7f4:	b538      	push	{r3, r4, r5, lr}
 800b7f6:	4d07      	ldr	r5, [pc, #28]	; (800b814 <_read_r+0x20>)
 800b7f8:	4604      	mov	r4, r0
 800b7fa:	4608      	mov	r0, r1
 800b7fc:	4611      	mov	r1, r2
 800b7fe:	2200      	movs	r2, #0
 800b800:	602a      	str	r2, [r5, #0]
 800b802:	461a      	mov	r2, r3
 800b804:	f7f6 fd6a 	bl	80022dc <_read>
 800b808:	1c43      	adds	r3, r0, #1
 800b80a:	d102      	bne.n	800b812 <_read_r+0x1e>
 800b80c:	682b      	ldr	r3, [r5, #0]
 800b80e:	b103      	cbz	r3, 800b812 <_read_r+0x1e>
 800b810:	6023      	str	r3, [r4, #0]
 800b812:	bd38      	pop	{r3, r4, r5, pc}
 800b814:	200008fc 	.word	0x200008fc

0800b818 <abort>:
 800b818:	b508      	push	{r3, lr}
 800b81a:	2006      	movs	r0, #6
 800b81c:	f000 f82c 	bl	800b878 <raise>
 800b820:	2001      	movs	r0, #1
 800b822:	f7f6 fd51 	bl	80022c8 <_exit>

0800b826 <_raise_r>:
 800b826:	291f      	cmp	r1, #31
 800b828:	b538      	push	{r3, r4, r5, lr}
 800b82a:	4604      	mov	r4, r0
 800b82c:	460d      	mov	r5, r1
 800b82e:	d904      	bls.n	800b83a <_raise_r+0x14>
 800b830:	2316      	movs	r3, #22
 800b832:	6003      	str	r3, [r0, #0]
 800b834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b838:	bd38      	pop	{r3, r4, r5, pc}
 800b83a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b83c:	b112      	cbz	r2, 800b844 <_raise_r+0x1e>
 800b83e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b842:	b94b      	cbnz	r3, 800b858 <_raise_r+0x32>
 800b844:	4620      	mov	r0, r4
 800b846:	f000 f831 	bl	800b8ac <_getpid_r>
 800b84a:	462a      	mov	r2, r5
 800b84c:	4601      	mov	r1, r0
 800b84e:	4620      	mov	r0, r4
 800b850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b854:	f000 b818 	b.w	800b888 <_kill_r>
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d00a      	beq.n	800b872 <_raise_r+0x4c>
 800b85c:	1c59      	adds	r1, r3, #1
 800b85e:	d103      	bne.n	800b868 <_raise_r+0x42>
 800b860:	2316      	movs	r3, #22
 800b862:	6003      	str	r3, [r0, #0]
 800b864:	2001      	movs	r0, #1
 800b866:	e7e7      	b.n	800b838 <_raise_r+0x12>
 800b868:	2400      	movs	r4, #0
 800b86a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b86e:	4628      	mov	r0, r5
 800b870:	4798      	blx	r3
 800b872:	2000      	movs	r0, #0
 800b874:	e7e0      	b.n	800b838 <_raise_r+0x12>
	...

0800b878 <raise>:
 800b878:	4b02      	ldr	r3, [pc, #8]	; (800b884 <raise+0xc>)
 800b87a:	4601      	mov	r1, r0
 800b87c:	6818      	ldr	r0, [r3, #0]
 800b87e:	f7ff bfd2 	b.w	800b826 <_raise_r>
 800b882:	bf00      	nop
 800b884:	2000000c 	.word	0x2000000c

0800b888 <_kill_r>:
 800b888:	b538      	push	{r3, r4, r5, lr}
 800b88a:	4d07      	ldr	r5, [pc, #28]	; (800b8a8 <_kill_r+0x20>)
 800b88c:	2300      	movs	r3, #0
 800b88e:	4604      	mov	r4, r0
 800b890:	4608      	mov	r0, r1
 800b892:	4611      	mov	r1, r2
 800b894:	602b      	str	r3, [r5, #0]
 800b896:	f7f6 fd07 	bl	80022a8 <_kill>
 800b89a:	1c43      	adds	r3, r0, #1
 800b89c:	d102      	bne.n	800b8a4 <_kill_r+0x1c>
 800b89e:	682b      	ldr	r3, [r5, #0]
 800b8a0:	b103      	cbz	r3, 800b8a4 <_kill_r+0x1c>
 800b8a2:	6023      	str	r3, [r4, #0]
 800b8a4:	bd38      	pop	{r3, r4, r5, pc}
 800b8a6:	bf00      	nop
 800b8a8:	200008fc 	.word	0x200008fc

0800b8ac <_getpid_r>:
 800b8ac:	f7f6 bcf4 	b.w	8002298 <_getpid>

0800b8b0 <atan>:
 800b8b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b4:	ec55 4b10 	vmov	r4, r5, d0
 800b8b8:	4bc3      	ldr	r3, [pc, #780]	; (800bbc8 <atan+0x318>)
 800b8ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b8be:	429e      	cmp	r6, r3
 800b8c0:	46ab      	mov	fp, r5
 800b8c2:	dd18      	ble.n	800b8f6 <atan+0x46>
 800b8c4:	4bc1      	ldr	r3, [pc, #772]	; (800bbcc <atan+0x31c>)
 800b8c6:	429e      	cmp	r6, r3
 800b8c8:	dc01      	bgt.n	800b8ce <atan+0x1e>
 800b8ca:	d109      	bne.n	800b8e0 <atan+0x30>
 800b8cc:	b144      	cbz	r4, 800b8e0 <atan+0x30>
 800b8ce:	4622      	mov	r2, r4
 800b8d0:	462b      	mov	r3, r5
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	4629      	mov	r1, r5
 800b8d6:	f7f4 fce1 	bl	800029c <__adddf3>
 800b8da:	4604      	mov	r4, r0
 800b8dc:	460d      	mov	r5, r1
 800b8de:	e006      	b.n	800b8ee <atan+0x3e>
 800b8e0:	f1bb 0f00 	cmp.w	fp, #0
 800b8e4:	f300 8131 	bgt.w	800bb4a <atan+0x29a>
 800b8e8:	a59b      	add	r5, pc, #620	; (adr r5, 800bb58 <atan+0x2a8>)
 800b8ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b8ee:	ec45 4b10 	vmov	d0, r4, r5
 800b8f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f6:	4bb6      	ldr	r3, [pc, #728]	; (800bbd0 <atan+0x320>)
 800b8f8:	429e      	cmp	r6, r3
 800b8fa:	dc14      	bgt.n	800b926 <atan+0x76>
 800b8fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b900:	429e      	cmp	r6, r3
 800b902:	dc0d      	bgt.n	800b920 <atan+0x70>
 800b904:	a396      	add	r3, pc, #600	; (adr r3, 800bb60 <atan+0x2b0>)
 800b906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90a:	ee10 0a10 	vmov	r0, s0
 800b90e:	4629      	mov	r1, r5
 800b910:	f7f4 fcc4 	bl	800029c <__adddf3>
 800b914:	4baf      	ldr	r3, [pc, #700]	; (800bbd4 <atan+0x324>)
 800b916:	2200      	movs	r2, #0
 800b918:	f7f5 f906 	bl	8000b28 <__aeabi_dcmpgt>
 800b91c:	2800      	cmp	r0, #0
 800b91e:	d1e6      	bne.n	800b8ee <atan+0x3e>
 800b920:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b924:	e02b      	b.n	800b97e <atan+0xce>
 800b926:	f000 f963 	bl	800bbf0 <fabs>
 800b92a:	4bab      	ldr	r3, [pc, #684]	; (800bbd8 <atan+0x328>)
 800b92c:	429e      	cmp	r6, r3
 800b92e:	ec55 4b10 	vmov	r4, r5, d0
 800b932:	f300 80bf 	bgt.w	800bab4 <atan+0x204>
 800b936:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b93a:	429e      	cmp	r6, r3
 800b93c:	f300 80a0 	bgt.w	800ba80 <atan+0x1d0>
 800b940:	ee10 2a10 	vmov	r2, s0
 800b944:	ee10 0a10 	vmov	r0, s0
 800b948:	462b      	mov	r3, r5
 800b94a:	4629      	mov	r1, r5
 800b94c:	f7f4 fca6 	bl	800029c <__adddf3>
 800b950:	4ba0      	ldr	r3, [pc, #640]	; (800bbd4 <atan+0x324>)
 800b952:	2200      	movs	r2, #0
 800b954:	f7f4 fca0 	bl	8000298 <__aeabi_dsub>
 800b958:	2200      	movs	r2, #0
 800b95a:	4606      	mov	r6, r0
 800b95c:	460f      	mov	r7, r1
 800b95e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b962:	4620      	mov	r0, r4
 800b964:	4629      	mov	r1, r5
 800b966:	f7f4 fc99 	bl	800029c <__adddf3>
 800b96a:	4602      	mov	r2, r0
 800b96c:	460b      	mov	r3, r1
 800b96e:	4630      	mov	r0, r6
 800b970:	4639      	mov	r1, r7
 800b972:	f7f4 ff73 	bl	800085c <__aeabi_ddiv>
 800b976:	f04f 0a00 	mov.w	sl, #0
 800b97a:	4604      	mov	r4, r0
 800b97c:	460d      	mov	r5, r1
 800b97e:	4622      	mov	r2, r4
 800b980:	462b      	mov	r3, r5
 800b982:	4620      	mov	r0, r4
 800b984:	4629      	mov	r1, r5
 800b986:	f7f4 fe3f 	bl	8000608 <__aeabi_dmul>
 800b98a:	4602      	mov	r2, r0
 800b98c:	460b      	mov	r3, r1
 800b98e:	4680      	mov	r8, r0
 800b990:	4689      	mov	r9, r1
 800b992:	f7f4 fe39 	bl	8000608 <__aeabi_dmul>
 800b996:	a374      	add	r3, pc, #464	; (adr r3, 800bb68 <atan+0x2b8>)
 800b998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99c:	4606      	mov	r6, r0
 800b99e:	460f      	mov	r7, r1
 800b9a0:	f7f4 fe32 	bl	8000608 <__aeabi_dmul>
 800b9a4:	a372      	add	r3, pc, #456	; (adr r3, 800bb70 <atan+0x2c0>)
 800b9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9aa:	f7f4 fc77 	bl	800029c <__adddf3>
 800b9ae:	4632      	mov	r2, r6
 800b9b0:	463b      	mov	r3, r7
 800b9b2:	f7f4 fe29 	bl	8000608 <__aeabi_dmul>
 800b9b6:	a370      	add	r3, pc, #448	; (adr r3, 800bb78 <atan+0x2c8>)
 800b9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9bc:	f7f4 fc6e 	bl	800029c <__adddf3>
 800b9c0:	4632      	mov	r2, r6
 800b9c2:	463b      	mov	r3, r7
 800b9c4:	f7f4 fe20 	bl	8000608 <__aeabi_dmul>
 800b9c8:	a36d      	add	r3, pc, #436	; (adr r3, 800bb80 <atan+0x2d0>)
 800b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ce:	f7f4 fc65 	bl	800029c <__adddf3>
 800b9d2:	4632      	mov	r2, r6
 800b9d4:	463b      	mov	r3, r7
 800b9d6:	f7f4 fe17 	bl	8000608 <__aeabi_dmul>
 800b9da:	a36b      	add	r3, pc, #428	; (adr r3, 800bb88 <atan+0x2d8>)
 800b9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e0:	f7f4 fc5c 	bl	800029c <__adddf3>
 800b9e4:	4632      	mov	r2, r6
 800b9e6:	463b      	mov	r3, r7
 800b9e8:	f7f4 fe0e 	bl	8000608 <__aeabi_dmul>
 800b9ec:	a368      	add	r3, pc, #416	; (adr r3, 800bb90 <atan+0x2e0>)
 800b9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f2:	f7f4 fc53 	bl	800029c <__adddf3>
 800b9f6:	4642      	mov	r2, r8
 800b9f8:	464b      	mov	r3, r9
 800b9fa:	f7f4 fe05 	bl	8000608 <__aeabi_dmul>
 800b9fe:	a366      	add	r3, pc, #408	; (adr r3, 800bb98 <atan+0x2e8>)
 800ba00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba04:	4680      	mov	r8, r0
 800ba06:	4689      	mov	r9, r1
 800ba08:	4630      	mov	r0, r6
 800ba0a:	4639      	mov	r1, r7
 800ba0c:	f7f4 fdfc 	bl	8000608 <__aeabi_dmul>
 800ba10:	a363      	add	r3, pc, #396	; (adr r3, 800bba0 <atan+0x2f0>)
 800ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba16:	f7f4 fc3f 	bl	8000298 <__aeabi_dsub>
 800ba1a:	4632      	mov	r2, r6
 800ba1c:	463b      	mov	r3, r7
 800ba1e:	f7f4 fdf3 	bl	8000608 <__aeabi_dmul>
 800ba22:	a361      	add	r3, pc, #388	; (adr r3, 800bba8 <atan+0x2f8>)
 800ba24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba28:	f7f4 fc36 	bl	8000298 <__aeabi_dsub>
 800ba2c:	4632      	mov	r2, r6
 800ba2e:	463b      	mov	r3, r7
 800ba30:	f7f4 fdea 	bl	8000608 <__aeabi_dmul>
 800ba34:	a35e      	add	r3, pc, #376	; (adr r3, 800bbb0 <atan+0x300>)
 800ba36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3a:	f7f4 fc2d 	bl	8000298 <__aeabi_dsub>
 800ba3e:	4632      	mov	r2, r6
 800ba40:	463b      	mov	r3, r7
 800ba42:	f7f4 fde1 	bl	8000608 <__aeabi_dmul>
 800ba46:	a35c      	add	r3, pc, #368	; (adr r3, 800bbb8 <atan+0x308>)
 800ba48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4c:	f7f4 fc24 	bl	8000298 <__aeabi_dsub>
 800ba50:	4632      	mov	r2, r6
 800ba52:	463b      	mov	r3, r7
 800ba54:	f7f4 fdd8 	bl	8000608 <__aeabi_dmul>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4640      	mov	r0, r8
 800ba5e:	4649      	mov	r1, r9
 800ba60:	f7f4 fc1c 	bl	800029c <__adddf3>
 800ba64:	4622      	mov	r2, r4
 800ba66:	462b      	mov	r3, r5
 800ba68:	f7f4 fdce 	bl	8000608 <__aeabi_dmul>
 800ba6c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800ba70:	4602      	mov	r2, r0
 800ba72:	460b      	mov	r3, r1
 800ba74:	d14b      	bne.n	800bb0e <atan+0x25e>
 800ba76:	4620      	mov	r0, r4
 800ba78:	4629      	mov	r1, r5
 800ba7a:	f7f4 fc0d 	bl	8000298 <__aeabi_dsub>
 800ba7e:	e72c      	b.n	800b8da <atan+0x2a>
 800ba80:	ee10 0a10 	vmov	r0, s0
 800ba84:	4b53      	ldr	r3, [pc, #332]	; (800bbd4 <atan+0x324>)
 800ba86:	2200      	movs	r2, #0
 800ba88:	4629      	mov	r1, r5
 800ba8a:	f7f4 fc05 	bl	8000298 <__aeabi_dsub>
 800ba8e:	4b51      	ldr	r3, [pc, #324]	; (800bbd4 <atan+0x324>)
 800ba90:	4606      	mov	r6, r0
 800ba92:	460f      	mov	r7, r1
 800ba94:	2200      	movs	r2, #0
 800ba96:	4620      	mov	r0, r4
 800ba98:	4629      	mov	r1, r5
 800ba9a:	f7f4 fbff 	bl	800029c <__adddf3>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	460b      	mov	r3, r1
 800baa2:	4630      	mov	r0, r6
 800baa4:	4639      	mov	r1, r7
 800baa6:	f7f4 fed9 	bl	800085c <__aeabi_ddiv>
 800baaa:	f04f 0a01 	mov.w	sl, #1
 800baae:	4604      	mov	r4, r0
 800bab0:	460d      	mov	r5, r1
 800bab2:	e764      	b.n	800b97e <atan+0xce>
 800bab4:	4b49      	ldr	r3, [pc, #292]	; (800bbdc <atan+0x32c>)
 800bab6:	429e      	cmp	r6, r3
 800bab8:	da1d      	bge.n	800baf6 <atan+0x246>
 800baba:	ee10 0a10 	vmov	r0, s0
 800babe:	4b48      	ldr	r3, [pc, #288]	; (800bbe0 <atan+0x330>)
 800bac0:	2200      	movs	r2, #0
 800bac2:	4629      	mov	r1, r5
 800bac4:	f7f4 fbe8 	bl	8000298 <__aeabi_dsub>
 800bac8:	4b45      	ldr	r3, [pc, #276]	; (800bbe0 <atan+0x330>)
 800baca:	4606      	mov	r6, r0
 800bacc:	460f      	mov	r7, r1
 800bace:	2200      	movs	r2, #0
 800bad0:	4620      	mov	r0, r4
 800bad2:	4629      	mov	r1, r5
 800bad4:	f7f4 fd98 	bl	8000608 <__aeabi_dmul>
 800bad8:	4b3e      	ldr	r3, [pc, #248]	; (800bbd4 <atan+0x324>)
 800bada:	2200      	movs	r2, #0
 800badc:	f7f4 fbde 	bl	800029c <__adddf3>
 800bae0:	4602      	mov	r2, r0
 800bae2:	460b      	mov	r3, r1
 800bae4:	4630      	mov	r0, r6
 800bae6:	4639      	mov	r1, r7
 800bae8:	f7f4 feb8 	bl	800085c <__aeabi_ddiv>
 800baec:	f04f 0a02 	mov.w	sl, #2
 800baf0:	4604      	mov	r4, r0
 800baf2:	460d      	mov	r5, r1
 800baf4:	e743      	b.n	800b97e <atan+0xce>
 800baf6:	462b      	mov	r3, r5
 800baf8:	ee10 2a10 	vmov	r2, s0
 800bafc:	4939      	ldr	r1, [pc, #228]	; (800bbe4 <atan+0x334>)
 800bafe:	2000      	movs	r0, #0
 800bb00:	f7f4 feac 	bl	800085c <__aeabi_ddiv>
 800bb04:	f04f 0a03 	mov.w	sl, #3
 800bb08:	4604      	mov	r4, r0
 800bb0a:	460d      	mov	r5, r1
 800bb0c:	e737      	b.n	800b97e <atan+0xce>
 800bb0e:	4b36      	ldr	r3, [pc, #216]	; (800bbe8 <atan+0x338>)
 800bb10:	4e36      	ldr	r6, [pc, #216]	; (800bbec <atan+0x33c>)
 800bb12:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bb16:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800bb1a:	e9da 2300 	ldrd	r2, r3, [sl]
 800bb1e:	f7f4 fbbb 	bl	8000298 <__aeabi_dsub>
 800bb22:	4622      	mov	r2, r4
 800bb24:	462b      	mov	r3, r5
 800bb26:	f7f4 fbb7 	bl	8000298 <__aeabi_dsub>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bb32:	f7f4 fbb1 	bl	8000298 <__aeabi_dsub>
 800bb36:	f1bb 0f00 	cmp.w	fp, #0
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	460d      	mov	r5, r1
 800bb3e:	f6bf aed6 	bge.w	800b8ee <atan+0x3e>
 800bb42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb46:	461d      	mov	r5, r3
 800bb48:	e6d1      	b.n	800b8ee <atan+0x3e>
 800bb4a:	a51d      	add	r5, pc, #116	; (adr r5, 800bbc0 <atan+0x310>)
 800bb4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb50:	e6cd      	b.n	800b8ee <atan+0x3e>
 800bb52:	bf00      	nop
 800bb54:	f3af 8000 	nop.w
 800bb58:	54442d18 	.word	0x54442d18
 800bb5c:	bff921fb 	.word	0xbff921fb
 800bb60:	8800759c 	.word	0x8800759c
 800bb64:	7e37e43c 	.word	0x7e37e43c
 800bb68:	e322da11 	.word	0xe322da11
 800bb6c:	3f90ad3a 	.word	0x3f90ad3a
 800bb70:	24760deb 	.word	0x24760deb
 800bb74:	3fa97b4b 	.word	0x3fa97b4b
 800bb78:	a0d03d51 	.word	0xa0d03d51
 800bb7c:	3fb10d66 	.word	0x3fb10d66
 800bb80:	c54c206e 	.word	0xc54c206e
 800bb84:	3fb745cd 	.word	0x3fb745cd
 800bb88:	920083ff 	.word	0x920083ff
 800bb8c:	3fc24924 	.word	0x3fc24924
 800bb90:	5555550d 	.word	0x5555550d
 800bb94:	3fd55555 	.word	0x3fd55555
 800bb98:	2c6a6c2f 	.word	0x2c6a6c2f
 800bb9c:	bfa2b444 	.word	0xbfa2b444
 800bba0:	52defd9a 	.word	0x52defd9a
 800bba4:	3fadde2d 	.word	0x3fadde2d
 800bba8:	af749a6d 	.word	0xaf749a6d
 800bbac:	3fb3b0f2 	.word	0x3fb3b0f2
 800bbb0:	fe231671 	.word	0xfe231671
 800bbb4:	3fbc71c6 	.word	0x3fbc71c6
 800bbb8:	9998ebc4 	.word	0x9998ebc4
 800bbbc:	3fc99999 	.word	0x3fc99999
 800bbc0:	54442d18 	.word	0x54442d18
 800bbc4:	3ff921fb 	.word	0x3ff921fb
 800bbc8:	440fffff 	.word	0x440fffff
 800bbcc:	7ff00000 	.word	0x7ff00000
 800bbd0:	3fdbffff 	.word	0x3fdbffff
 800bbd4:	3ff00000 	.word	0x3ff00000
 800bbd8:	3ff2ffff 	.word	0x3ff2ffff
 800bbdc:	40038000 	.word	0x40038000
 800bbe0:	3ff80000 	.word	0x3ff80000
 800bbe4:	bff00000 	.word	0xbff00000
 800bbe8:	0800c608 	.word	0x0800c608
 800bbec:	0800c5e8 	.word	0x0800c5e8

0800bbf0 <fabs>:
 800bbf0:	ec51 0b10 	vmov	r0, r1, d0
 800bbf4:	ee10 2a10 	vmov	r2, s0
 800bbf8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bbfc:	ec43 2b10 	vmov	d0, r2, r3
 800bc00:	4770      	bx	lr

0800bc02 <atan2>:
 800bc02:	f000 b801 	b.w	800bc08 <__ieee754_atan2>
	...

0800bc08 <__ieee754_atan2>:
 800bc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc0c:	ec57 6b11 	vmov	r6, r7, d1
 800bc10:	4273      	negs	r3, r6
 800bc12:	f8df e184 	ldr.w	lr, [pc, #388]	; 800bd98 <__ieee754_atan2+0x190>
 800bc16:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bc1a:	4333      	orrs	r3, r6
 800bc1c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bc20:	4573      	cmp	r3, lr
 800bc22:	ec51 0b10 	vmov	r0, r1, d0
 800bc26:	ee11 8a10 	vmov	r8, s2
 800bc2a:	d80a      	bhi.n	800bc42 <__ieee754_atan2+0x3a>
 800bc2c:	4244      	negs	r4, r0
 800bc2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bc32:	4304      	orrs	r4, r0
 800bc34:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bc38:	4574      	cmp	r4, lr
 800bc3a:	ee10 9a10 	vmov	r9, s0
 800bc3e:	468c      	mov	ip, r1
 800bc40:	d907      	bls.n	800bc52 <__ieee754_atan2+0x4a>
 800bc42:	4632      	mov	r2, r6
 800bc44:	463b      	mov	r3, r7
 800bc46:	f7f4 fb29 	bl	800029c <__adddf3>
 800bc4a:	ec41 0b10 	vmov	d0, r0, r1
 800bc4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc52:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800bc56:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bc5a:	4334      	orrs	r4, r6
 800bc5c:	d103      	bne.n	800bc66 <__ieee754_atan2+0x5e>
 800bc5e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc62:	f7ff be25 	b.w	800b8b0 <atan>
 800bc66:	17bc      	asrs	r4, r7, #30
 800bc68:	f004 0402 	and.w	r4, r4, #2
 800bc6c:	ea53 0909 	orrs.w	r9, r3, r9
 800bc70:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bc74:	d107      	bne.n	800bc86 <__ieee754_atan2+0x7e>
 800bc76:	2c02      	cmp	r4, #2
 800bc78:	d060      	beq.n	800bd3c <__ieee754_atan2+0x134>
 800bc7a:	2c03      	cmp	r4, #3
 800bc7c:	d1e5      	bne.n	800bc4a <__ieee754_atan2+0x42>
 800bc7e:	a142      	add	r1, pc, #264	; (adr r1, 800bd88 <__ieee754_atan2+0x180>)
 800bc80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc84:	e7e1      	b.n	800bc4a <__ieee754_atan2+0x42>
 800bc86:	ea52 0808 	orrs.w	r8, r2, r8
 800bc8a:	d106      	bne.n	800bc9a <__ieee754_atan2+0x92>
 800bc8c:	f1bc 0f00 	cmp.w	ip, #0
 800bc90:	da5f      	bge.n	800bd52 <__ieee754_atan2+0x14a>
 800bc92:	a13f      	add	r1, pc, #252	; (adr r1, 800bd90 <__ieee754_atan2+0x188>)
 800bc94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc98:	e7d7      	b.n	800bc4a <__ieee754_atan2+0x42>
 800bc9a:	4572      	cmp	r2, lr
 800bc9c:	d10f      	bne.n	800bcbe <__ieee754_atan2+0xb6>
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800bca4:	d107      	bne.n	800bcb6 <__ieee754_atan2+0xae>
 800bca6:	2c02      	cmp	r4, #2
 800bca8:	d84c      	bhi.n	800bd44 <__ieee754_atan2+0x13c>
 800bcaa:	4b35      	ldr	r3, [pc, #212]	; (800bd80 <__ieee754_atan2+0x178>)
 800bcac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bcb0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bcb4:	e7c9      	b.n	800bc4a <__ieee754_atan2+0x42>
 800bcb6:	2c02      	cmp	r4, #2
 800bcb8:	d848      	bhi.n	800bd4c <__ieee754_atan2+0x144>
 800bcba:	4b32      	ldr	r3, [pc, #200]	; (800bd84 <__ieee754_atan2+0x17c>)
 800bcbc:	e7f6      	b.n	800bcac <__ieee754_atan2+0xa4>
 800bcbe:	4573      	cmp	r3, lr
 800bcc0:	d0e4      	beq.n	800bc8c <__ieee754_atan2+0x84>
 800bcc2:	1a9b      	subs	r3, r3, r2
 800bcc4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bcc8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bccc:	da1e      	bge.n	800bd0c <__ieee754_atan2+0x104>
 800bcce:	2f00      	cmp	r7, #0
 800bcd0:	da01      	bge.n	800bcd6 <__ieee754_atan2+0xce>
 800bcd2:	323c      	adds	r2, #60	; 0x3c
 800bcd4:	db1e      	blt.n	800bd14 <__ieee754_atan2+0x10c>
 800bcd6:	4632      	mov	r2, r6
 800bcd8:	463b      	mov	r3, r7
 800bcda:	f7f4 fdbf 	bl	800085c <__aeabi_ddiv>
 800bcde:	ec41 0b10 	vmov	d0, r0, r1
 800bce2:	f7ff ff85 	bl	800bbf0 <fabs>
 800bce6:	f7ff fde3 	bl	800b8b0 <atan>
 800bcea:	ec51 0b10 	vmov	r0, r1, d0
 800bcee:	2c01      	cmp	r4, #1
 800bcf0:	d013      	beq.n	800bd1a <__ieee754_atan2+0x112>
 800bcf2:	2c02      	cmp	r4, #2
 800bcf4:	d015      	beq.n	800bd22 <__ieee754_atan2+0x11a>
 800bcf6:	2c00      	cmp	r4, #0
 800bcf8:	d0a7      	beq.n	800bc4a <__ieee754_atan2+0x42>
 800bcfa:	a319      	add	r3, pc, #100	; (adr r3, 800bd60 <__ieee754_atan2+0x158>)
 800bcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd00:	f7f4 faca 	bl	8000298 <__aeabi_dsub>
 800bd04:	a318      	add	r3, pc, #96	; (adr r3, 800bd68 <__ieee754_atan2+0x160>)
 800bd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0a:	e014      	b.n	800bd36 <__ieee754_atan2+0x12e>
 800bd0c:	a118      	add	r1, pc, #96	; (adr r1, 800bd70 <__ieee754_atan2+0x168>)
 800bd0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd12:	e7ec      	b.n	800bcee <__ieee754_atan2+0xe6>
 800bd14:	2000      	movs	r0, #0
 800bd16:	2100      	movs	r1, #0
 800bd18:	e7e9      	b.n	800bcee <__ieee754_atan2+0xe6>
 800bd1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd1e:	4619      	mov	r1, r3
 800bd20:	e793      	b.n	800bc4a <__ieee754_atan2+0x42>
 800bd22:	a30f      	add	r3, pc, #60	; (adr r3, 800bd60 <__ieee754_atan2+0x158>)
 800bd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd28:	f7f4 fab6 	bl	8000298 <__aeabi_dsub>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	460b      	mov	r3, r1
 800bd30:	a10d      	add	r1, pc, #52	; (adr r1, 800bd68 <__ieee754_atan2+0x160>)
 800bd32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd36:	f7f4 faaf 	bl	8000298 <__aeabi_dsub>
 800bd3a:	e786      	b.n	800bc4a <__ieee754_atan2+0x42>
 800bd3c:	a10a      	add	r1, pc, #40	; (adr r1, 800bd68 <__ieee754_atan2+0x160>)
 800bd3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd42:	e782      	b.n	800bc4a <__ieee754_atan2+0x42>
 800bd44:	a10c      	add	r1, pc, #48	; (adr r1, 800bd78 <__ieee754_atan2+0x170>)
 800bd46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd4a:	e77e      	b.n	800bc4a <__ieee754_atan2+0x42>
 800bd4c:	2000      	movs	r0, #0
 800bd4e:	2100      	movs	r1, #0
 800bd50:	e77b      	b.n	800bc4a <__ieee754_atan2+0x42>
 800bd52:	a107      	add	r1, pc, #28	; (adr r1, 800bd70 <__ieee754_atan2+0x168>)
 800bd54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd58:	e777      	b.n	800bc4a <__ieee754_atan2+0x42>
 800bd5a:	bf00      	nop
 800bd5c:	f3af 8000 	nop.w
 800bd60:	33145c07 	.word	0x33145c07
 800bd64:	3ca1a626 	.word	0x3ca1a626
 800bd68:	54442d18 	.word	0x54442d18
 800bd6c:	400921fb 	.word	0x400921fb
 800bd70:	54442d18 	.word	0x54442d18
 800bd74:	3ff921fb 	.word	0x3ff921fb
 800bd78:	54442d18 	.word	0x54442d18
 800bd7c:	3fe921fb 	.word	0x3fe921fb
 800bd80:	0800c628 	.word	0x0800c628
 800bd84:	0800c640 	.word	0x0800c640
 800bd88:	54442d18 	.word	0x54442d18
 800bd8c:	c00921fb 	.word	0xc00921fb
 800bd90:	54442d18 	.word	0x54442d18
 800bd94:	bff921fb 	.word	0xbff921fb
 800bd98:	7ff00000 	.word	0x7ff00000

0800bd9c <_init>:
 800bd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9e:	bf00      	nop
 800bda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bda2:	bc08      	pop	{r3}
 800bda4:	469e      	mov	lr, r3
 800bda6:	4770      	bx	lr

0800bda8 <_fini>:
 800bda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdaa:	bf00      	nop
 800bdac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdae:	bc08      	pop	{r3}
 800bdb0:	469e      	mov	lr, r3
 800bdb2:	4770      	bx	lr
