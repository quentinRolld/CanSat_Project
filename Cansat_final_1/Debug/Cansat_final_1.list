
Cansat_final_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecc4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c0  0800ee68  0800ee68  0001ee68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f828  0800f828  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f828  0800f828  0001f828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f830  0800f830  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f830  0800f830  0001f830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f834  0800f834  0001f834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004724  200001e8  0800fa1c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000490c  0800fa1c  0002490c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d4e8  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000434a  00000000  00000000  0003d6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  00041a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a8  00000000  00000000  000430b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be86  00000000  00000000  00044558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e30a  00000000  00000000  000603de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c763  00000000  00000000  0007e6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011ae4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070a0  00000000  00000000  0011ae9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ee4c 	.word	0x0800ee4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800ee4c 	.word	0x0800ee4c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <Task_lancement_Cansat>:
extern TaskHandle_t pxeCompass;
/****************************/



void Task_lancement_Cansat(){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af02      	add	r7, sp, #8

	for(;;){

		xTaskCreate(Task_Mesure_M, "mesure champ magnetique", 500, NULL, osPriorityHigh, &pxMesure_M);
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <Task_lancement_Cansat+0x3c>)
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	2302      	movs	r3, #2
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2300      	movs	r3, #0
 8001018:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800101c:	490a      	ldr	r1, [pc, #40]	; (8001048 <Task_lancement_Cansat+0x40>)
 800101e:	480b      	ldr	r0, [pc, #44]	; (800104c <Task_lancement_Cansat+0x44>)
 8001020:	f008 f956 	bl	80092d0 <xTaskCreate>
		//xTaskCreate(Task_Mesure_AetG, "mesure acceleration lineaire et angulaire", 500, NULL, osPriorityAboveNormal, pxCreatedTask);
		xTaskCreate(Task_eCompass, "eCompass", 500, NULL, osPriorityAboveNormal, &pxeCompass);
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <Task_lancement_Cansat+0x48>)
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	2301      	movs	r3, #1
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2300      	movs	r3, #0
 800102e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001032:	4908      	ldr	r1, [pc, #32]	; (8001054 <Task_lancement_Cansat+0x4c>)
 8001034:	4808      	ldr	r0, [pc, #32]	; (8001058 <Task_lancement_Cansat+0x50>)
 8001036:	f008 f94b 	bl	80092d0 <xTaskCreate>

		vTaskDelete(NULL);
 800103a:	2000      	movs	r0, #0
 800103c:	f008 fa96 	bl	800956c <vTaskDelete>
		xTaskCreate(Task_Mesure_M, "mesure champ magnetique", 500, NULL, osPriorityHigh, &pxMesure_M);
 8001040:	e7e5      	b.n	800100e <Task_lancement_Cansat+0x6>
 8001042:	bf00      	nop
 8001044:	20000210 	.word	0x20000210
 8001048:	0800ee68 	.word	0x0800ee68
 800104c:	0800105d 	.word	0x0800105d
 8001050:	20000214 	.word	0x20000214
 8001054:	0800ee80 	.word	0x0800ee80
 8001058:	08001135 	.word	0x08001135

0800105c <Task_Mesure_M>:
	}
}


void Task_Mesure_M(){
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200;
 8001062:	23c8      	movs	r3, #200	; 0xc8
 8001064:	607b      	str	r3, [r7, #4]

  //Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8001066:	f008 fcd7 	bl	8009a18 <xTaskGetTickCount>
 800106a:	4603      	mov	r3, r0
 800106c:	603b      	str	r3, [r7, #0]

	for(;;){

		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800106e:	463b      	mov	r3, r7
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	4618      	mov	r0, r3
 8001074:	f008 fb0a 	bl	800968c <vTaskDelayUntil>
		printf("mesure champ magnetique \r\n");
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <Task_Mesure_M+0x30>)
 800107a:	f00a f9f1 	bl	800b460 <puts>
		Measure_M(&hi2c1, pDataCansat.IMU.MagnetometerData.mag_raw, pDataCansat.IMU.MagnetometerData.offset, pDataCansat.IMU.MagnetometerData.coeff);
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <Task_Mesure_M+0x34>)
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <Task_Mesure_M+0x38>)
 8001082:	4905      	ldr	r1, [pc, #20]	; (8001098 <Task_Mesure_M+0x3c>)
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <Task_Mesure_M+0x40>)
 8001086:	f000 f9a3 	bl	80013d0 <Measure_M>
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800108a:	e7f0      	b.n	800106e <Task_Mesure_M+0x12>
 800108c:	0800ee8c 	.word	0x0800ee8c
 8001090:	200009f8 	.word	0x200009f8
 8001094:	200009e0 	.word	0x200009e0
 8001098:	200009c8 	.word	0x200009c8
 800109c:	20000914 	.word	0x20000914

080010a0 <Task_GPS_data_reading>:
}

/* On démarre cette tâche dès la mise sous tension du Cansat car le GPS met un peu de temps à se lancer
 * Par la suite, elle tourne en tâche de fond toutes les secondes.
 */
void Task_GPS_data_reading(){
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	b0b4      	sub	sp, #208	; 0xd0
 80010a4:	af30      	add	r7, sp, #192	; 0xc0

	int i = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
	int gps_data_ready_flag = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_gps_rx, 1);
 80010ae:	2201      	movs	r2, #1
 80010b0:	491b      	ldr	r1, [pc, #108]	; (8001120 <Task_GPS_data_reading+0x80>)
 80010b2:	481c      	ldr	r0, [pc, #112]	; (8001124 <Task_GPS_data_reading+0x84>)
 80010b4:	f006 ffd9 	bl	800806a <HAL_UART_Receive_IT>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 20;
 80010b8:	2314      	movs	r3, #20
 80010ba:	607b      	str	r3, [r7, #4]

  //Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80010bc:	f008 fcac 	bl	8009a18 <xTaskGetTickCount>
 80010c0:	4603      	mov	r3, r0
 80010c2:	603b      	str	r3, [r7, #0]

	for(;;){

		//ulTaskNotifyTake(pdTRUE, 500);

		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 80010c4:	463b      	mov	r3, r7
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f008 fadf 	bl	800968c <vTaskDelayUntil>

		GPS_data_reading(pDataCansat, i, gps_data_ready_flag);
 80010ce:	4c16      	ldr	r4, [pc, #88]	; (8001128 <Task_GPS_data_reading+0x88>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	932f      	str	r3, [sp, #188]	; 0xbc
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	932e      	str	r3, [sp, #184]	; 0xb8
 80010d8:	4668      	mov	r0, sp
 80010da:	f104 0310 	add.w	r3, r4, #16
 80010de:	22b8      	movs	r2, #184	; 0xb8
 80010e0:	4619      	mov	r1, r3
 80010e2:	f009 fc22 	bl	800a92a <memcpy>
 80010e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010ea:	f000 fca7 	bl	8001a3c <GPS_data_reading>

		if(gps_data_ready_flag){
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0e7      	beq.n	80010c4 <Task_GPS_data_reading+0x24>
			printf("GPS read ***************** \r\n");
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <Task_GPS_data_reading+0x8c>)
 80010f6:	f00a f9b3 	bl	800b460 <puts>
			printf("latitude : %lf N, longitude : %lf E, altitude : %lf m \r\n", pDataCansat.GPS.latitude_Cansat, pDataCansat.GPS.longitude_Cansat, pDataCansat.GPS.altitude_Cansat);
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <Task_GPS_data_reading+0x88>)
 80010fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <Task_GPS_data_reading+0x88>)
 8001102:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001106:	4908      	ldr	r1, [pc, #32]	; (8001128 <Task_GPS_data_reading+0x88>)
 8001108:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800110c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001110:	e9cd 2300 	strd	r2, r3, [sp]
 8001114:	4622      	mov	r2, r4
 8001116:	462b      	mov	r3, r5
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <Task_GPS_data_reading+0x90>)
 800111a:	f00a f91b 	bl	800b354 <iprintf>
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800111e:	e7d1      	b.n	80010c4 <Task_GPS_data_reading+0x24>
 8001120:	20000a34 	.word	0x20000a34
 8001124:	20000b1c 	.word	0x20000b1c
 8001128:	20000968 	.word	0x20000968
 800112c:	0800eea8 	.word	0x0800eea8
 8001130:	0800eec8 	.word	0x0800eec8

08001134 <Task_eCompass>:
	}
}



void Task_eCompass(){
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b0b5      	sub	sp, #212	; 0xd4
 8001138:	af2e      	add	r7, sp, #184	; 0xb8

	float Cansat_theta = 0;
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
	double Delta_theta = 0;
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 2302 	strd	r2, r3, [r7, #8]

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000;
 800114c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001150:	607b      	str	r3, [r7, #4]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8001152:	f008 fc61 	bl	8009a18 <xTaskGetTickCount>
 8001156:	4603      	mov	r3, r0
 8001158:	603b      	str	r3, [r7, #0]

	for(;;){

		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800115a:	463b      	mov	r3, r7
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4618      	mov	r0, r3
 8001160:	f008 fa94 	bl	800968c <vTaskDelayUntil>
		// ---> Messure accéléro
		// ---> calcul

		//3. Conversion du champ magnétique en degré

		Cansat_theta = magnetic_field_to_degree(pDataCansat.IMU.MagnetometerData.mag_raw);
 8001164:	4814      	ldr	r0, [pc, #80]	; (80011b8 <Task_eCompass+0x84>)
 8001166:	f000 facb 	bl	8001700 <magnetic_field_to_degree>
 800116a:	ed87 0a05 	vstr	s0, [r7, #20]
		pDataCansat.IMU.MagnetometerData.degree_angle = Cansat_theta;
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff f9f2 	bl	8000558 <__aeabi_f2d>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4910      	ldr	r1, [pc, #64]	; (80011bc <Task_eCompass+0x88>)
 800117a:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0

		printf("Cansat theta computed * * * * * * * * * \r\n");
 800117e:	4810      	ldr	r0, [pc, #64]	; (80011c0 <Task_eCompass+0x8c>)
 8001180:	f00a f96e 	bl	800b460 <puts>

		//4. Calcul du Delta theta

		Delta_theta = Delta_theta_calculation(pDataCansat);
 8001184:	4c0d      	ldr	r4, [pc, #52]	; (80011bc <Task_eCompass+0x88>)
 8001186:	4668      	mov	r0, sp
 8001188:	f104 0310 	add.w	r3, r4, #16
 800118c:	22b8      	movs	r2, #184	; 0xb8
 800118e:	4619      	mov	r1, r3
 8001190:	f009 fbcb 	bl	800a92a <memcpy>
 8001194:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001198:	f000 fb14 	bl	80017c4 <Delta_theta_calculation>
 800119c:	ed87 0b02 	vstr	d0, [r7, #8]

		printf("Delta theta computed * * * * * * * * * * \r\n");
 80011a0:	4808      	ldr	r0, [pc, #32]	; (80011c4 <Task_eCompass+0x90>)
 80011a2:	f00a f95d 	bl	800b460 <puts>

		//5. Rotation des servos en conséquence

		choice_direction_intensity(Delta_theta);
 80011a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011aa:	f7ff fd05 	bl	8000bb8 <__aeabi_d2uiz>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 f8a7 	bl	8002304 <choice_direction_intensity>
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 80011b6:	e7d0      	b.n	800115a <Task_eCompass+0x26>
 80011b8:	200009c8 	.word	0x200009c8
 80011bc:	20000968 	.word	0x20000968
 80011c0:	0800ef04 	.word	0x0800ef04
 80011c4:	0800ef30 	.word	0x0800ef30

080011c8 <Init>:
	 * et elle configure ce dernier pour qu'il réalise des mesures en continu.
	 * @param p_hi2c1 Pointeur vers une structure I2C qui contient l'information de configuration pour un i2c particulier
	 * @retval None
	 */
void Init(I2C_HandleTypeDef* p_hi2c1)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af04      	add	r7, sp, #16
 80011ce:	6078      	str	r0, [r7, #4]

	uint8_t buff[6];
	buff[0] = 0x80;
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD,  PWR_MGMT_1,  1, &buff[0], 1, 10);
 80011d4:	230a      	movs	r3, #10
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	2301      	movs	r3, #1
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	226b      	movs	r2, #107	; 0x6b
 80011e6:	21d0      	movs	r1, #208	; 0xd0
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f002 fd5f 	bl	8003cac <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80011ee:	2064      	movs	r0, #100	; 0x64
 80011f0:	f001 fd74 	bl	8002cdc <HAL_Delay>
	buff[0] = 0x1;
 80011f4:	2301      	movs	r3, #1
 80011f6:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD, PWR_MGMT_1,  1, &buff[0], 1, 10);
 80011f8:	230a      	movs	r3, #10
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	2301      	movs	r3, #1
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2301      	movs	r3, #1
 8001208:	226b      	movs	r2, #107	; 0x6b
 800120a:	21d0      	movs	r1, #208	; 0xd0
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f002 fd4d 	bl	8003cac <HAL_I2C_Mem_Write>


	/********* changement de la sensibilité de l'accélérometre  00=2g 01=4g 10=8g 11=16g *********/
	HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD,  ACCEL_CONFIG,  1, &buff[0], 1, 10);
 8001212:	230a      	movs	r3, #10
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	2301      	movs	r3, #1
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	221c      	movs	r2, #28
 8001224:	21d0      	movs	r1, #208	; 0xd0
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f002 fe3a 	bl	8003ea0 <HAL_I2C_Mem_Read>

	//Pour mettre 00
	buff[0] =(buff[0] & (0b11100111)) ;
 800122c:	7a3b      	ldrb	r3, [r7, #8]
 800122e:	f023 0318 	bic.w	r3, r3, #24
 8001232:	b2db      	uxtb	r3, r3
 8001234:	723b      	strb	r3, [r7, #8]
	//buff[0] =(buff[0] & (0b11110111)) ;
	//buff[0] =(buff[0] | (0b00010000)) ;
	//Pour mettre 11
	//buff[0] =(buff[0] | (0b00011000)) ;

	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD,  ACCEL_CONFIG,  1, &buff[0], 1, 10);
 8001236:	230a      	movs	r3, #10
 8001238:	9302      	str	r3, [sp, #8]
 800123a:	2301      	movs	r3, #1
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2301      	movs	r3, #1
 8001246:	221c      	movs	r2, #28
 8001248:	21d0      	movs	r1, #208	; 0xd0
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f002 fd2e 	bl	8003cac <HAL_I2C_Mem_Write>


	buff[0]=0x2; // Bypass pour activer le magnétomètre
 8001250:	2302      	movs	r3, #2
 8001252:	723b      	strb	r3, [r7, #8]
		  if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,INT_PIN_CFG,1,&buff[0],1,10)!=HAL_OK){
 8001254:	230a      	movs	r3, #10
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	2301      	movs	r3, #1
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	2237      	movs	r2, #55	; 0x37
 8001266:	21d0      	movs	r1, #208	; 0xd0
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f002 fd1f 	bl	8003cac <HAL_I2C_Mem_Write>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d004      	beq.n	800127e <Init+0xb6>
			  printf("probleme activation magnetometre --> fct Init \r\n");
 8001274:	4851      	ldr	r0, [pc, #324]	; (80013bc <Init+0x1f4>)
 8001276:	f00a f8f3 	bl	800b460 <puts>
		  	  Error_Handler();
 800127a:	f000 ff9b 	bl	80021b4 <Error_Handler>
		  }
	buff[0]=0x16; // configuration mesure en continu du magnétomètre
 800127e:	2316      	movs	r3, #22
 8001280:	723b      	strb	r3, [r7, #8]
		 	  if(HAL_I2C_Mem_Write(p_hi2c1,MAGNETO_ADD,AK8963_CNTL,1,&buff[0],1,10)!=HAL_OK){
 8001282:	230a      	movs	r3, #10
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	2301      	movs	r3, #1
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2301      	movs	r3, #1
 8001292:	220a      	movs	r2, #10
 8001294:	2118      	movs	r1, #24
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f002 fd08 	bl	8003cac <HAL_I2C_Mem_Write>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d004      	beq.n	80012ac <Init+0xe4>
		 		  printf("probleme configuration mesure magnetometre --> fct Init \r\n");
 80012a2:	4847      	ldr	r0, [pc, #284]	; (80013c0 <Init+0x1f8>)
 80012a4:	f00a f8dc 	bl	800b460 <puts>
		 	  	  Error_Handler();
 80012a8:	f000 ff84 	bl	80021b4 <Error_Handler>

		 	  }

	/********** Réglage de la bande passante **********/

	buff[0]=0x3;
 80012ac:	2303      	movs	r3, #3
 80012ae:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,CONFIG,1,&buff[0],1,10)!=HAL_OK){
 80012b0:	230a      	movs	r3, #10
 80012b2:	9302      	str	r3, [sp, #8]
 80012b4:	2301      	movs	r3, #1
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2301      	movs	r3, #1
 80012c0:	221a      	movs	r2, #26
 80012c2:	21d0      	movs	r1, #208	; 0xd0
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f002 fcf1 	bl	8003cac <HAL_I2C_Mem_Write>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d004      	beq.n	80012da <Init+0x112>
		printf("probleme bande passante --> fct Init \r\n");
 80012d0:	483c      	ldr	r0, [pc, #240]	; (80013c4 <Init+0x1fc>)
 80012d2:	f00a f8c5 	bl	800b460 <puts>
		Error_Handler();
 80012d6:	f000 ff6d 	bl	80021b4 <Error_Handler>
			Error_Handler();
		}
*/

	// bande passante à 250Hz : FCHOICE = 11 => FCHOICE_b = 00, DLPF_CFG = 000
		HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD,  GYRO_CONFIG,  1, &buff[0], 1, 10);
 80012da:	230a      	movs	r3, #10
 80012dc:	9302      	str	r3, [sp, #8]
 80012de:	2301      	movs	r3, #1
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2301      	movs	r3, #1
 80012ea:	221b      	movs	r2, #27
 80012ec:	21d0      	movs	r1, #208	; 0xd0
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f002 fdd6 	bl	8003ea0 <HAL_I2C_Mem_Read>
		//Pour mettre 00 dans FCHOICE_b
		buff[0] =(buff[0] & (0b11111100)) ;
 80012f4:	7a3b      	ldrb	r3, [r7, #8]
 80012f6:	f023 0303 	bic.w	r3, r3, #3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	723b      	strb	r3, [r7, #8]
		if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,GYRO_CONFIG,1,&buff[0],1,10)!=HAL_OK){
 80012fe:	230a      	movs	r3, #10
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	2301      	movs	r3, #1
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2301      	movs	r3, #1
 800130e:	221b      	movs	r2, #27
 8001310:	21d0      	movs	r1, #208	; 0xd0
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f002 fcca 	bl	8003cac <HAL_I2C_Mem_Write>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <Init+0x15a>
				Error_Handler(); }
 800131e:	f000 ff49 	bl	80021b4 <Error_Handler>
		//Pour mettre 000 dans DLPF_CFG
		HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD, CONFIG,  1, &buff[0], 1, 10);
 8001322:	230a      	movs	r3, #10
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	2301      	movs	r3, #1
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2301      	movs	r3, #1
 8001332:	221a      	movs	r2, #26
 8001334:	21d0      	movs	r1, #208	; 0xd0
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f002 fdb2 	bl	8003ea0 <HAL_I2C_Mem_Read>
		buff[0] =(buff[0] & (0b11111000)) ;
 800133c:	7a3b      	ldrb	r3, [r7, #8]
 800133e:	f023 0307 	bic.w	r3, r3, #7
 8001342:	b2db      	uxtb	r3, r3
 8001344:	723b      	strb	r3, [r7, #8]
		if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,CONFIG,1,&buff[0],1,10)!=HAL_OK){
 8001346:	230a      	movs	r3, #10
 8001348:	9302      	str	r3, [sp, #8]
 800134a:	2301      	movs	r3, #1
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2301      	movs	r3, #1
 8001356:	221a      	movs	r2, #26
 8001358:	21d0      	movs	r1, #208	; 0xd0
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f002 fca6 	bl	8003cac <HAL_I2C_Mem_Write>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <Init+0x1a2>
				Error_Handler();
 8001366:	f000 ff25 	bl	80021b4 <Error_Handler>
		}
*/

	/*********** Réglage de la fréquence d'échantillonnage **********/

	buff[0]=0xFF;
 800136a:	23ff      	movs	r3, #255	; 0xff
 800136c:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,SMPLRT_DIV,1,&buff[0],1,10)!=HAL_OK){
 800136e:	230a      	movs	r3, #10
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	2301      	movs	r3, #1
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2301      	movs	r3, #1
 800137e:	2219      	movs	r2, #25
 8001380:	21d0      	movs	r1, #208	; 0xd0
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f002 fc92 	bl	8003cac <HAL_I2C_Mem_Write>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d004      	beq.n	8001398 <Init+0x1d0>
		printf("probleme reglage frequence echantillonnage --> Init \r\n");
 800138e:	480e      	ldr	r0, [pc, #56]	; (80013c8 <Init+0x200>)
 8001390:	f00a f866 	bl	800b460 <puts>
		Error_Handler();
 8001394:	f000 ff0e 	bl	80021b4 <Error_Handler>
	}
	HAL_I2C_Mem_Read(p_hi2c1,MPU_ADD,LP_ACCEL_ODR,1,&buff[0],1,10);
 8001398:	230a      	movs	r3, #10
 800139a:	9302      	str	r3, [sp, #8]
 800139c:	2301      	movs	r3, #1
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	221e      	movs	r2, #30
 80013aa:	21d0      	movs	r1, #208	; 0xd0
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f002 fd77 	bl	8003ea0 <HAL_I2C_Mem_Read>
	// a faire : changer la valeur de DLPF_CFG à 2 par exemple et voir en mode debug si la valeur des 4 derniers bits de LP_ACCEL_ODR est à 4.

}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	0800ef5c 	.word	0x0800ef5c
 80013c0:	0800ef8c 	.word	0x0800ef8c
 80013c4:	0800efc8 	.word	0x0800efc8
 80013c8:	0800eff0 	.word	0x0800eff0
 80013cc:	00000000 	.word	0x00000000

080013d0 <Measure_M>:
	 * @param hi2cx Pointeur vers une structure I2C qui contient l'information de configuration pour un i2c particulier
	 * @param tableau_donnee_utiles Pointeur vers une zone mémoire de type double contenant l’information de champ magnétique
	 * @retval None
	 */

void Measure_M(I2C_HandleTypeDef* p_hi2c1,double* mag, double* offset, double* coeff){
 80013d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013d4:	b090      	sub	sp, #64	; 0x40
 80013d6:	af04      	add	r7, sp, #16
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	603b      	str	r3, [r7, #0]
		uint8_t buffer[6];
		uint8_t asa[3];
		uint8_t drdy[1];


		HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_ST1,1,drdy,1,20);
 80013e0:	2314      	movs	r3, #20
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	2301      	movs	r3, #1
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2301      	movs	r3, #1
 80013f0:	2202      	movs	r2, #2
 80013f2:	2118      	movs	r1, #24
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f002 fd53 	bl	8003ea0 <HAL_I2C_Mem_Read>
		drdy[0]=((drdy[0])&(00000001));
 80013fa:	7d3b      	ldrb	r3, [r7, #20]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	753b      	strb	r3, [r7, #20]
		if(drdy[0]==1){
 8001404:	7d3b      	ldrb	r3, [r7, #20]
 8001406:	2b01      	cmp	r3, #1
 8001408:	f040 8165 	bne.w	80016d6 <Measure_M+0x306>

			if((HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_XOUT_L,1,buffer,7,20)==HAL_OK)
 800140c:	2314      	movs	r3, #20
 800140e:	9302      	str	r3, [sp, #8]
 8001410:	2307      	movs	r3, #7
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2301      	movs	r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	2118      	movs	r1, #24
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f002 fd3d 	bl	8003ea0 <HAL_I2C_Mem_Read>
 8001426:	4603      	mov	r3, r0
					&(HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_ASAX,1,asa,3,20)==HAL_OK)){
 8001428:	2b00      	cmp	r3, #0
 800142a:	bf0c      	ite	eq
 800142c:	2301      	moveq	r3, #1
 800142e:	2300      	movne	r3, #0
 8001430:	b2dc      	uxtb	r4, r3
 8001432:	2314      	movs	r3, #20
 8001434:	9302      	str	r3, [sp, #8]
 8001436:	2303      	movs	r3, #3
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	f107 0318 	add.w	r3, r7, #24
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2301      	movs	r3, #1
 8001442:	2210      	movs	r2, #16
 8001444:	2118      	movs	r1, #24
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f002 fd2a 	bl	8003ea0 <HAL_I2C_Mem_Read>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	bf0c      	ite	eq
 8001452:	2301      	moveq	r3, #1
 8001454:	2300      	movne	r3, #0
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4023      	ands	r3, r4
 800145a:	b2db      	uxtb	r3, r3
			if((HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_XOUT_L,1,buffer,7,20)==HAL_OK)
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 813a 	beq.w	80016d6 <Measure_M+0x306>


						x = (uint16_t)((buffer[1]<<8)+ buffer[0]);
 8001462:	7f7b      	ldrb	r3, [r7, #29]
 8001464:	b29b      	uxth	r3, r3
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b29a      	uxth	r2, r3
 800146a:	7f3b      	ldrb	r3, [r7, #28]
 800146c:	b29b      	uxth	r3, r3
 800146e:	4413      	add	r3, r2
 8001470:	b29b      	uxth	r3, r3
 8001472:	85fb      	strh	r3, [r7, #46]	; 0x2e
						y = (uint16_t)((buffer[3]<<8)+ buffer[2]);
 8001474:	7ffb      	ldrb	r3, [r7, #31]
 8001476:	b29b      	uxth	r3, r3
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	b29a      	uxth	r2, r3
 800147c:	7fbb      	ldrb	r3, [r7, #30]
 800147e:	b29b      	uxth	r3, r3
 8001480:	4413      	add	r3, r2
 8001482:	b29b      	uxth	r3, r3
 8001484:	85bb      	strh	r3, [r7, #44]	; 0x2c
						z = (uint16_t)((buffer[5]<<8)+ buffer[4]);
 8001486:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800148a:	b29b      	uxth	r3, r3
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	b29a      	uxth	r2, r3
 8001490:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001494:	b29b      	uxth	r3, r3
 8001496:	4413      	add	r3, r2
 8001498:	b29b      	uxth	r3, r3
 800149a:	857b      	strh	r3, [r7, #42]	; 0x2a
						asax=asa[0];
 800149c:	7e3b      	ldrb	r3, [r7, #24]
 800149e:	853b      	strh	r3, [r7, #40]	; 0x28
						asay=asa[1];
 80014a0:	7e7b      	ldrb	r3, [r7, #25]
 80014a2:	84fb      	strh	r3, [r7, #38]	; 0x26
						asaz=asa[2];
 80014a4:	7ebb      	ldrb	r3, [r7, #26]
 80014a6:	84bb      	strh	r3, [r7, #36]	; 0x24
						mag[0] = (x*((((asax-128)*0.5)/128)+1)*4912)/32760;
 80014a8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f841 	bl	8000534 <__aeabi_i2d>
 80014b2:	4604      	mov	r4, r0
 80014b4:	460d      	mov	r5, r1
 80014b6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014ba:	3b80      	subs	r3, #128	; 0x80
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff f839 	bl	8000534 <__aeabi_i2d>
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	4b8a      	ldr	r3, [pc, #552]	; (80016f0 <Measure_M+0x320>)
 80014c8:	f7ff f89e 	bl	8000608 <__aeabi_dmul>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	4b86      	ldr	r3, [pc, #536]	; (80016f4 <Measure_M+0x324>)
 80014da:	f7ff f9bf 	bl	800085c <__aeabi_ddiv>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	4b83      	ldr	r3, [pc, #524]	; (80016f8 <Measure_M+0x328>)
 80014ec:	f7fe fed6 	bl	800029c <__adddf3>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4620      	mov	r0, r4
 80014f6:	4629      	mov	r1, r5
 80014f8:	f7ff f886 	bl	8000608 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	a376      	add	r3, pc, #472	; (adr r3, 80016e0 <Measure_M+0x310>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7ff f87d 	bl	8000608 <__aeabi_dmul>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	a374      	add	r3, pc, #464	; (adr r3, 80016e8 <Measure_M+0x318>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff f99e 	bl	800085c <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	e9c1 2300 	strd	r2, r3, [r1]
						mag[1] = (y*((((asay-128)*0.5)/128)+1)*4912)/32760;
 800152a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff f800 	bl	8000534 <__aeabi_i2d>
 8001534:	4604      	mov	r4, r0
 8001536:	460d      	mov	r5, r1
 8001538:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800153c:	3b80      	subs	r3, #128	; 0x80
 800153e:	4618      	mov	r0, r3
 8001540:	f7fe fff8 	bl	8000534 <__aeabi_i2d>
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	4b69      	ldr	r3, [pc, #420]	; (80016f0 <Measure_M+0x320>)
 800154a:	f7ff f85d 	bl	8000608 <__aeabi_dmul>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	4b66      	ldr	r3, [pc, #408]	; (80016f4 <Measure_M+0x324>)
 800155c:	f7ff f97e 	bl	800085c <__aeabi_ddiv>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	4b62      	ldr	r3, [pc, #392]	; (80016f8 <Measure_M+0x328>)
 800156e:	f7fe fe95 	bl	800029c <__adddf3>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4620      	mov	r0, r4
 8001578:	4629      	mov	r1, r5
 800157a:	f7ff f845 	bl	8000608 <__aeabi_dmul>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	a356      	add	r3, pc, #344	; (adr r3, 80016e0 <Measure_M+0x310>)
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	f7ff f83c 	bl	8000608 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	f103 0408 	add.w	r4, r3, #8
 800159e:	a352      	add	r3, pc, #328	; (adr r3, 80016e8 <Measure_M+0x318>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7ff f95a 	bl	800085c <__aeabi_ddiv>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	e9c4 2300 	strd	r2, r3, [r4]
						mag[2] = (z*((((asaz-128)*0.5)/128)+1)*4912)/32760;
 80015b0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ffbd 	bl	8000534 <__aeabi_i2d>
 80015ba:	4604      	mov	r4, r0
 80015bc:	460d      	mov	r5, r1
 80015be:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80015c2:	3b80      	subs	r3, #128	; 0x80
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ffb5 	bl	8000534 <__aeabi_i2d>
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	4b48      	ldr	r3, [pc, #288]	; (80016f0 <Measure_M+0x320>)
 80015d0:	f7ff f81a 	bl	8000608 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	4b44      	ldr	r3, [pc, #272]	; (80016f4 <Measure_M+0x324>)
 80015e2:	f7ff f93b 	bl	800085c <__aeabi_ddiv>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <Measure_M+0x328>)
 80015f4:	f7fe fe52 	bl	800029c <__adddf3>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4620      	mov	r0, r4
 80015fe:	4629      	mov	r1, r5
 8001600:	f7ff f802 	bl	8000608 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	a334      	add	r3, pc, #208	; (adr r3, 80016e0 <Measure_M+0x310>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7fe fff9 	bl	8000608 <__aeabi_dmul>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	f103 0410 	add.w	r4, r3, #16
 8001624:	a330      	add	r3, pc, #192	; (adr r3, 80016e8 <Measure_M+0x318>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	f7ff f917 	bl	800085c <__aeabi_ddiv>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	e9c4 2300 	strd	r2, r3, [r4]

						// calibration

						mag[0] = (mag[0]-offset[0])*coeff[0];
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	e9d3 0100 	ldrd	r0, r1, [r3]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	f7fe fe29 	bl	8000298 <__aeabi_dsub>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	f7fe ffd8 	bl	8000608 <__aeabi_dmul>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	e9c1 2300 	strd	r2, r3, [r1]
						mag[1] = (mag[1]-offset[1])*coeff[1];
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	3308      	adds	r3, #8
 8001666:	e9d3 0100 	ldrd	r0, r1, [r3]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3308      	adds	r3, #8
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7fe fe11 	bl	8000298 <__aeabi_dsub>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4690      	mov	r8, r2
 800167c:	4699      	mov	r9, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	3308      	adds	r3, #8
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	68b9      	ldr	r1, [r7, #8]
 8001688:	f101 0408 	add.w	r4, r1, #8
 800168c:	4640      	mov	r0, r8
 800168e:	4649      	mov	r1, r9
 8001690:	f7fe ffba 	bl	8000608 <__aeabi_dmul>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	e9c4 2300 	strd	r2, r3, [r4]
						mag[2] = (mag[2]-offset[2])*coeff[2];
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	3310      	adds	r3, #16
 80016a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3310      	adds	r3, #16
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	f7fe fdf4 	bl	8000298 <__aeabi_dsub>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4690      	mov	r8, r2
 80016b6:	4699      	mov	r9, r3
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	3310      	adds	r3, #16
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	f101 0410 	add.w	r4, r1, #16
 80016c6:	4640      	mov	r0, r8
 80016c8:	4649      	mov	r1, r9
 80016ca:	f7fe ff9d 	bl	8000608 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	e9c4 2300 	strd	r2, r3, [r4]
						mag[1] = (mag[1]*coeff[1])-offset[1];
						mag[2] = (mag[2]*coeff[2])-offset[2];
					*/
			}
		}
}
 80016d6:	bf00      	nop
 80016d8:	3730      	adds	r7, #48	; 0x30
 80016da:	46bd      	mov	sp, r7
 80016dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016e0:	00000000 	.word	0x00000000
 80016e4:	40b33000 	.word	0x40b33000
 80016e8:	00000000 	.word	0x00000000
 80016ec:	40dffe00 	.word	0x40dffe00
 80016f0:	3fe00000 	.word	0x3fe00000
 80016f4:	40600000 	.word	0x40600000
 80016f8:	3ff00000 	.word	0x3ff00000
 80016fc:	00000000 	.word	0x00000000

08001700 <magnetic_field_to_degree>:
#include <math.h>



float magnetic_field_to_degree(double* mag_calibrated)
{
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	float heading = atan2(-mag_calibrated[1], mag_calibrated[0]); // atan2(y,x)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3308      	adds	r3, #8
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	4614      	mov	r4, r2
 8001712:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	ed93 7b00 	vldr	d7, [r3]
 800171c:	eeb0 1a47 	vmov.f32	s2, s14
 8001720:	eef0 1a67 	vmov.f32	s3, s15
 8001724:	ec45 4b10 	vmov	d0, r4, r5
 8001728:	f00d fac3 	bl	800ecb2 <atan2>
 800172c:	ec53 2b10 	vmov	r2, r3, d0
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff fa60 	bl	8000bf8 <__aeabi_d2f>
 8001738:	4603      	mov	r3, r0
 800173a:	613b      	str	r3, [r7, #16]


	  //float declinationAngle = 0.22; // Angle de déclinaison magnétique pour Paris
	  float declinationAngle = 0.21; // Angle de déclinaison magnétique pour Barcelone
 800173c:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <magnetic_field_to_degree+0xb8>)
 800173e:	60fb      	str	r3, [r7, #12]
	  heading += declinationAngle;   // site pour connaitre la déclinaison : https://www.ngdc.noaa.gov/geomag/calculators/magcalc
 8001740:	ed97 7a04 	vldr	s14, [r7, #16]
 8001744:	edd7 7a03 	vldr	s15, [r7, #12]
 8001748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174c:	edc7 7a04 	vstr	s15, [r7, #16]


	  float headingDegrees = heading * 180 / M_PI; // Conversion en degrés
 8001750:	edd7 7a04 	vldr	s15, [r7, #16]
 8001754:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80017bc <magnetic_field_to_degree+0xbc>
 8001758:	ee67 7a87 	vmul.f32	s15, s15, s14
 800175c:	ee17 0a90 	vmov	r0, s15
 8001760:	f7fe fefa 	bl	8000558 <__aeabi_f2d>
 8001764:	a312      	add	r3, pc, #72	; (adr r3, 80017b0 <magnetic_field_to_degree+0xb0>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	f7ff f877 	bl	800085c <__aeabi_ddiv>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	f7ff fa3f 	bl	8000bf8 <__aeabi_d2f>
 800177a:	4603      	mov	r3, r0
 800177c:	617b      	str	r3, [r7, #20]

	  if(headingDegrees<=0){
 800177e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001782:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178a:	d807      	bhi.n	800179c <magnetic_field_to_degree+0x9c>
			  headingDegrees+=360;
 800178c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001790:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80017c0 <magnetic_field_to_degree+0xc0>
 8001794:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001798:	edc7 7a05 	vstr	s15, [r7, #20]
		  }



	  return headingDegrees;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	ee07 3a90 	vmov	s15, r3
}
 80017a2:	eeb0 0a67 	vmov.f32	s0, s15
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bdb0      	pop	{r4, r5, r7, pc}
 80017ac:	f3af 8000 	nop.w
 80017b0:	54442d18 	.word	0x54442d18
 80017b4:	400921fb 	.word	0x400921fb
 80017b8:	3e570a3d 	.word	0x3e570a3d
 80017bc:	43340000 	.word	0x43340000
 80017c0:	43b40000 	.word	0x43b40000

080017c4 <Delta_theta_calculation>:

double Delta_theta_calculation(TypeDataCansat DataCansat){
 80017c4:	b084      	sub	sp, #16
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b088      	sub	sp, #32
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80017d0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	double theta_target = 0;
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double latitude_vector = DataCansat.GPS.latitude_Target - DataCansat.GPS.latitude_Cansat;
 80017e0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80017e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017e8:	f7fe fd56 	bl	8000298 <__aeabi_dsub>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double longitude_vector = DataCansat.GPS.longitude_Target - DataCansat.GPS.longitude_Cansat;
 80017f4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80017f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017fc:	f7fe fd4c 	bl	8000298 <__aeabi_dsub>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	e9c7 2302 	strd	r2, r3, [r7, #8]

	theta_target = 360 - atan(longitude_vector/latitude_vector);
 8001808:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800180c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001810:	f7ff f824 	bl	800085c <__aeabi_ddiv>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	ec43 2b17 	vmov	d7, r2, r3
 800181c:	eeb0 0a47 	vmov.f32	s0, s14
 8001820:	eef0 0a67 	vmov.f32	s1, s15
 8001824:	f00d f89c 	bl	800e960 <atan>
 8001828:	ec53 2b10 	vmov	r2, r3, d0
 800182c:	f04f 0000 	mov.w	r0, #0
 8001830:	490f      	ldr	r1, [pc, #60]	; (8001870 <Delta_theta_calculation+0xac>)
 8001832:	f7fe fd31 	bl	8000298 <__aeabi_dsub>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double Delta_theta = theta_target - DataCansat.IMU.MagnetometerData.degree_angle;
 800183e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8001842:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001846:	f7fe fd27 	bl	8000298 <__aeabi_dsub>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	e9c7 2300 	strd	r2, r3, [r7]

	return Delta_theta;
 8001852:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001856:	ec43 2b17 	vmov	d7, r2, r3
}
 800185a:	eeb0 0a47 	vmov.f32	s0, s14
 800185e:	eef0 0a67 	vmov.f32	s1, s15
 8001862:	3720      	adds	r7, #32
 8001864:	46bd      	mov	sp, r7
 8001866:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800186a:	b004      	add	sp, #16
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40768000 	.word	0x40768000

08001874 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001884:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <vApplicationGetIdleTaskMemory+0x30>)
 800188a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	2000021c 	.word	0x2000021c
 80018a4:	200002d0 	.word	0x200002d0

080018a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <MX_FREERTOS_Init+0x5c>)
 80018b0:	1d3c      	adds	r4, r7, #4
 80018b2:	461d      	mov	r5, r3
 80018b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f007 fb92 	bl	8008fee <osThreadCreate>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <MX_FREERTOS_Init+0x60>)
 80018ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

xTaskCreate(Task_Drop_detection, "Drop detection", 500, NULL, osPriorityHigh, &pxDrop_detection);
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_FREERTOS_Init+0x64>)
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	2302      	movs	r3, #2
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2300      	movs	r3, #0
 80018da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018de:	490c      	ldr	r1, [pc, #48]	; (8001910 <MX_FREERTOS_Init+0x68>)
 80018e0:	480c      	ldr	r0, [pc, #48]	; (8001914 <MX_FREERTOS_Init+0x6c>)
 80018e2:	f007 fcf5 	bl	80092d0 <xTaskCreate>

xTaskCreate(Task_GPS_data_reading, "Lecture des donnees GPS", 500, NULL, osPriorityAboveNormal, &pxGPS_Handler);
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_FREERTOS_Init+0x70>)
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	2301      	movs	r3, #1
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2300      	movs	r3, #0
 80018f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018f4:	4909      	ldr	r1, [pc, #36]	; (800191c <MX_FREERTOS_Init+0x74>)
 80018f6:	480a      	ldr	r0, [pc, #40]	; (8001920 <MX_FREERTOS_Init+0x78>)
 80018f8:	f007 fcea 	bl	80092d0 <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

}
 80018fc:	bf00      	nop
 80018fe:	3720      	adds	r7, #32
 8001900:	46bd      	mov	sp, r7
 8001902:	bdb0      	pop	{r4, r5, r7, pc}
 8001904:	0800f0a8 	.word	0x0800f0a8
 8001908:	20000218 	.word	0x20000218
 800190c:	20000208 	.word	0x20000208
 8001910:	0800f080 	.word	0x0800f080
 8001914:	080021c1 	.word	0x080021c1
 8001918:	20000204 	.word	0x20000204
 800191c:	0800f090 	.word	0x0800f090
 8001920:	080010a1 	.word	0x080010a1

08001924 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800192c:	2001      	movs	r0, #1
 800192e:	f007 fbaa 	bl	8009086 <osDelay>
 8001932:	e7fb      	b.n	800192c <StartDefaultTask+0x8>

08001934 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
 8001948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b38      	ldr	r3, [pc, #224]	; (8001a30 <MX_GPIO_Init+0xfc>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a37      	ldr	r2, [pc, #220]	; (8001a30 <MX_GPIO_Init+0xfc>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <MX_GPIO_Init+0xfc>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <MX_GPIO_Init+0xfc>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a30      	ldr	r2, [pc, #192]	; (8001a30 <MX_GPIO_Init+0xfc>)
 8001970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b2e      	ldr	r3, [pc, #184]	; (8001a30 <MX_GPIO_Init+0xfc>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <MX_GPIO_Init+0xfc>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a29      	ldr	r2, [pc, #164]	; (8001a30 <MX_GPIO_Init+0xfc>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <MX_GPIO_Init+0xfc>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <MX_GPIO_Init+0xfc>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a22      	ldr	r2, [pc, #136]	; (8001a30 <MX_GPIO_Init+0xfc>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <MX_GPIO_Init+0xfc>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2120      	movs	r1, #32
 80019be:	481d      	ldr	r0, [pc, #116]	; (8001a34 <MX_GPIO_Init+0x100>)
 80019c0:	f001 fcce 	bl	8003360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	4817      	ldr	r0, [pc, #92]	; (8001a38 <MX_GPIO_Init+0x104>)
 80019dc:	f001 fb24 	bl	8003028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019e0:	2320      	movs	r3, #32
 80019e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e4:	2301      	movs	r3, #1
 80019e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2300      	movs	r3, #0
 80019ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4619      	mov	r1, r3
 80019f6:	480f      	ldr	r0, [pc, #60]	; (8001a34 <MX_GPIO_Init+0x100>)
 80019f8:	f001 fb16 	bl	8003028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4808      	ldr	r0, [pc, #32]	; (8001a34 <MX_GPIO_Init+0x100>)
 8001a12:	f001 fb09 	bl	8003028 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2105      	movs	r1, #5
 8001a1a:	2028      	movs	r0, #40	; 0x28
 8001a1c:	f001 fa3a 	bl	8002e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a20:	2028      	movs	r0, #40	; 0x28
 8001a22:	f001 fa53 	bl	8002ecc <HAL_NVIC_EnableIRQ>

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020000 	.word	0x40020000
 8001a38:	40020800 	.word	0x40020800

08001a3c <GPS_data_reading>:





void GPS_data_reading(TypeDataCansat pData, int i, int flag){
 8001a3c:	b084      	sub	sp, #16
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b08c      	sub	sp, #48	; 0x30
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	f107 0c38 	add.w	ip, r7, #56	; 0x38
 8001a48:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


		if(it_rx_gps == 1){
 8001a4c:	4ba6      	ldr	r3, [pc, #664]	; (8001ce8 <GPS_data_reading+0x2ac>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	f040 8142 	bne.w	8001cda <GPS_data_reading+0x29e>
	  		if(data_rdy == 1){
 8001a56:	4ba5      	ldr	r3, [pc, #660]	; (8001cec <GPS_data_reading+0x2b0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	f040 80ee 	bne.w	8001c3c <GPS_data_reading+0x200>
	  				flag = 1;
 8001a60:	2301      	movs	r3, #1
 8001a62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	  				for(int j = 0; j<=47;j++){
 8001a66:	2300      	movs	r3, #0
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a6a:	e00b      	b.n	8001a84 <GPS_data_reading+0x48>
	  					position[j] = coordonnees[j+18]; //position[] comprend la latitude et la longitude telles que sur la trame reçue
 8001a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6e:	3312      	adds	r3, #18
 8001a70:	4a9f      	ldr	r2, [pc, #636]	; (8001cf0 <GPS_data_reading+0x2b4>)
 8001a72:	5cd1      	ldrb	r1, [r2, r3]
 8001a74:	4a9f      	ldr	r2, [pc, #636]	; (8001cf4 <GPS_data_reading+0x2b8>)
 8001a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a78:	4413      	add	r3, r2
 8001a7a:	460a      	mov	r2, r1
 8001a7c:	701a      	strb	r2, [r3, #0]
	  				for(int j = 0; j<=47;j++){
 8001a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a80:	3301      	adds	r3, #1
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a86:	2b2f      	cmp	r3, #47	; 0x2f
 8001a88:	ddf0      	ble.n	8001a6c <GPS_data_reading+0x30>
	  					//En effet, les coordonnes sont d'abord de cette forme : "$GNGGA,121933.000,4902.36627,N,00204.31287,E,1,05,13.3,0.0,M,0.0,M,,*4D"
	  					//On sélectionne donc la partie qui est après l'identifieur et l'heure mais avant le ",E,".
	  				}

	  				for(int k = 0; k<=9;k++){
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a8e:	e00b      	b.n	8001aa8 <GPS_data_reading+0x6c>
	  					latitude_data[k] = position[k+1]; //latitude non convertie
 8001a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a92:	3301      	adds	r3, #1
 8001a94:	4a97      	ldr	r2, [pc, #604]	; (8001cf4 <GPS_data_reading+0x2b8>)
 8001a96:	5cd1      	ldrb	r1, [r2, r3]
 8001a98:	4a97      	ldr	r2, [pc, #604]	; (8001cf8 <GPS_data_reading+0x2bc>)
 8001a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9c:	4413      	add	r3, r2
 8001a9e:	460a      	mov	r2, r1
 8001aa0:	701a      	strb	r2, [r3, #0]
	  				for(int k = 0; k<=9;k++){
 8001aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aaa:	2b09      	cmp	r3, #9
 8001aac:	ddf0      	ble.n	8001a90 <GPS_data_reading+0x54>
	  				}
	  				for(int l = 0; l<=10;l++){
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab2:	e00b      	b.n	8001acc <GPS_data_reading+0x90>
	  					longitude_data[l] = position[l+14]; //longitude non convertie
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	330e      	adds	r3, #14
 8001ab8:	4a8e      	ldr	r2, [pc, #568]	; (8001cf4 <GPS_data_reading+0x2b8>)
 8001aba:	5cd1      	ldrb	r1, [r2, r3]
 8001abc:	4a8f      	ldr	r2, [pc, #572]	; (8001cfc <GPS_data_reading+0x2c0>)
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	4413      	add	r3, r2
 8001ac2:	460a      	mov	r2, r1
 8001ac4:	701a      	strb	r2, [r3, #0]
	  				for(int l = 0; l<=10;l++){
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	3301      	adds	r3, #1
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	2b0a      	cmp	r3, #10
 8001ad0:	ddf0      	ble.n	8001ab4 <GPS_data_reading+0x78>
	  				}
	  				for(int h = 0; h<=4; h++){
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
 8001ad6:	e00b      	b.n	8001af0 <GPS_data_reading+0xb4>
	  					altitude_data[h] = position[h+37]; //altitude non convertie
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	3325      	adds	r3, #37	; 0x25
 8001adc:	4a85      	ldr	r2, [pc, #532]	; (8001cf4 <GPS_data_reading+0x2b8>)
 8001ade:	5cd1      	ldrb	r1, [r2, r3]
 8001ae0:	4a87      	ldr	r2, [pc, #540]	; (8001d00 <GPS_data_reading+0x2c4>)
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	460a      	mov	r2, r1
 8001ae8:	701a      	strb	r2, [r3, #0]
	  				for(int h = 0; h<=4; h++){
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	3301      	adds	r3, #1
 8001aee:	623b      	str	r3, [r7, #32]
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	ddf0      	ble.n	8001ad8 <GPS_data_reading+0x9c>
	  				}

	  				lat2[0] = latitude_data[0];
 8001af6:	4b80      	ldr	r3, [pc, #512]	; (8001cf8 <GPS_data_reading+0x2bc>)
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	4b82      	ldr	r3, [pc, #520]	; (8001d04 <GPS_data_reading+0x2c8>)
 8001afc:	701a      	strb	r2, [r3, #0]
	  				lat2[1] = latitude_data[1]; //lat2 -> les deux digits avant la virgue du degré de la lat.
 8001afe:	4b7e      	ldr	r3, [pc, #504]	; (8001cf8 <GPS_data_reading+0x2bc>)
 8001b00:	785a      	ldrb	r2, [r3, #1]
 8001b02:	4b80      	ldr	r3, [pc, #512]	; (8001d04 <GPS_data_reading+0x2c8>)
 8001b04:	705a      	strb	r2, [r3, #1]

	  				for(int m = 0; m<=6;m++){
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	e00b      	b.n	8001b24 <GPS_data_reading+0xe8>
	  					lat7[m] = latitude_data[m+2]; //lat 7 -> ce qui reste après la virgule de la lat.
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	3302      	adds	r3, #2
 8001b10:	4a79      	ldr	r2, [pc, #484]	; (8001cf8 <GPS_data_reading+0x2bc>)
 8001b12:	5cd1      	ldrb	r1, [r2, r3]
 8001b14:	4a7c      	ldr	r2, [pc, #496]	; (8001d08 <GPS_data_reading+0x2cc>)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	4413      	add	r3, r2
 8001b1a:	460a      	mov	r2, r1
 8001b1c:	701a      	strb	r2, [r3, #0]
	  				for(int m = 0; m<=6;m++){
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3301      	adds	r3, #1
 8001b22:	61fb      	str	r3, [r7, #28]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	ddf0      	ble.n	8001b0c <GPS_data_reading+0xd0>
	  				}

	  				long3[0] = longitude_data[0];
 8001b2a:	4b74      	ldr	r3, [pc, #464]	; (8001cfc <GPS_data_reading+0x2c0>)
 8001b2c:	781a      	ldrb	r2, [r3, #0]
 8001b2e:	4b77      	ldr	r3, [pc, #476]	; (8001d0c <GPS_data_reading+0x2d0>)
 8001b30:	701a      	strb	r2, [r3, #0]
	  				long3[1] = longitude_data[1];
 8001b32:	4b72      	ldr	r3, [pc, #456]	; (8001cfc <GPS_data_reading+0x2c0>)
 8001b34:	785a      	ldrb	r2, [r3, #1]
 8001b36:	4b75      	ldr	r3, [pc, #468]	; (8001d0c <GPS_data_reading+0x2d0>)
 8001b38:	705a      	strb	r2, [r3, #1]
	  				long3[2] = longitude_data[2]; //long3 -> les trois digits avant la virgule du degré de la long.
 8001b3a:	4b70      	ldr	r3, [pc, #448]	; (8001cfc <GPS_data_reading+0x2c0>)
 8001b3c:	789a      	ldrb	r2, [r3, #2]
 8001b3e:	4b73      	ldr	r3, [pc, #460]	; (8001d0c <GPS_data_reading+0x2d0>)
 8001b40:	709a      	strb	r2, [r3, #2]

	  				for(int n = 0; n<=6;n++){
 8001b42:	2300      	movs	r3, #0
 8001b44:	61bb      	str	r3, [r7, #24]
 8001b46:	e00b      	b.n	8001b60 <GPS_data_reading+0x124>
	  					long7[n] = longitude_data[n+3]; //long7 -> ce qui reste après la virgule de la long.
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	3303      	adds	r3, #3
 8001b4c:	4a6b      	ldr	r2, [pc, #428]	; (8001cfc <GPS_data_reading+0x2c0>)
 8001b4e:	5cd1      	ldrb	r1, [r2, r3]
 8001b50:	4a6f      	ldr	r2, [pc, #444]	; (8001d10 <GPS_data_reading+0x2d4>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4413      	add	r3, r2
 8001b56:	460a      	mov	r2, r1
 8001b58:	701a      	strb	r2, [r3, #0]
	  				for(int n = 0; n<=6;n++){
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	61bb      	str	r3, [r7, #24]
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	ddf0      	ble.n	8001b48 <GPS_data_reading+0x10c>
	  				}

	  				float deg_lat = atof(lat2);
 8001b66:	4867      	ldr	r0, [pc, #412]	; (8001d04 <GPS_data_reading+0x2c8>)
 8001b68:	f008 fdb8 	bl	800a6dc <atof>
 8001b6c:	ec53 2b10 	vmov	r2, r3, d0
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	f7ff f840 	bl	8000bf8 <__aeabi_d2f>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	613b      	str	r3, [r7, #16]
	  				float reste_lat = atof(lat7); //conversion du char[lat] en float[lat]
 8001b7c:	4862      	ldr	r0, [pc, #392]	; (8001d08 <GPS_data_reading+0x2cc>)
 8001b7e:	f008 fdad 	bl	800a6dc <atof>
 8001b82:	ec53 2b10 	vmov	r2, r3, d0
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f7ff f835 	bl	8000bf8 <__aeabi_d2f>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	60fb      	str	r3, [r7, #12]

	  				float deg_long = atof(long3);
 8001b92:	485e      	ldr	r0, [pc, #376]	; (8001d0c <GPS_data_reading+0x2d0>)
 8001b94:	f008 fda2 	bl	800a6dc <atof>
 8001b98:	ec53 2b10 	vmov	r2, r3, d0
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f7ff f82a 	bl	8000bf8 <__aeabi_d2f>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60bb      	str	r3, [r7, #8]
	  				float reste_long = atof(long7); //conversion du char[long] en float[long]
 8001ba8:	4859      	ldr	r0, [pc, #356]	; (8001d10 <GPS_data_reading+0x2d4>)
 8001baa:	f008 fd97 	bl	800a6dc <atof>
 8001bae:	ec53 2b10 	vmov	r2, r3, d0
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7ff f81f 	bl	8000bf8 <__aeabi_d2f>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	607b      	str	r3, [r7, #4]

	  				pData.GPS.latitude_Cansat = deg_lat + (reste_lat/60); //latitude convertie
 8001bbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bc2:	eddf 6a54 	vldr	s13, [pc, #336]	; 8001d14 <GPS_data_reading+0x2d8>
 8001bc6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bca:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd2:	ee17 0a90 	vmov	r0, s15
 8001bd6:	f7fe fcbf 	bl	8000558 <__aeabi_f2d>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	  				pData.GPS.longitude_Cansat = deg_long + (reste_long/60); //longitude convertie
 8001be2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001be6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8001d14 <GPS_data_reading+0x2d8>
 8001bea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bee:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf6:	ee17 0a90 	vmov	r0, s15
 8001bfa:	f7fe fcad 	bl	8000558 <__aeabi_f2d>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  				pData.GPS.altitude_Cansat = atof(altitude_data); // altitude convertie
 8001c06:	483e      	ldr	r0, [pc, #248]	; (8001d00 <GPS_data_reading+0x2c4>)
 8001c08:	f008 fd68 	bl	800a6dc <atof>
 8001c0c:	eeb0 7a40 	vmov.f32	s14, s0
 8001c10:	eef0 7a60 	vmov.f32	s15, s1
 8001c14:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48

	  				//nombre de satellites
	  				for(int k = 0; k<2;k++){
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	e00b      	b.n	8001c36 <GPS_data_reading+0x1fa>
	  				satellites[k] = coordonnees[k+45]; //satellites[] indique le nombre de satellites captés
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	332d      	adds	r3, #45	; 0x2d
 8001c22:	4a33      	ldr	r2, [pc, #204]	; (8001cf0 <GPS_data_reading+0x2b4>)
 8001c24:	5cd1      	ldrb	r1, [r2, r3]
 8001c26:	4a3c      	ldr	r2, [pc, #240]	; (8001d18 <GPS_data_reading+0x2dc>)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	460a      	mov	r2, r1
 8001c2e:	701a      	strb	r2, [r3, #0]
	  				for(int k = 0; k<2;k++){
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3301      	adds	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	ddf0      	ble.n	8001c1e <GPS_data_reading+0x1e2>
	  				}
	  		}
	  		if(uart_gps_rx[0]==10){
 8001c3c:	4b37      	ldr	r3, [pc, #220]	; (8001d1c <GPS_data_reading+0x2e0>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b0a      	cmp	r3, #10
 8001c42:	d047      	beq.n	8001cd4 <GPS_data_reading+0x298>
	  			//HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); //Arrangement de la trame
	  		}
	  		else{
	  			uart_pc_tx[0]=uart_gps_rx[0];
 8001c44:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <GPS_data_reading+0x2e0>)
 8001c46:	781a      	ldrb	r2, [r3, #0]
 8001c48:	4b35      	ldr	r3, [pc, #212]	; (8001d20 <GPS_data_reading+0x2e4>)
 8001c4a:	701a      	strb	r2, [r3, #0]
	  			HAL_UART_Transmit(&huart2, (uint8_t*)&uart_pc_tx, 1, HAL_MAX_DELAY);
 8001c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c50:	2201      	movs	r2, #1
 8001c52:	4933      	ldr	r1, [pc, #204]	; (8001d20 <GPS_data_reading+0x2e4>)
 8001c54:	4833      	ldr	r0, [pc, #204]	; (8001d24 <GPS_data_reading+0x2e8>)
 8001c56:	f006 f976 	bl	8007f46 <HAL_UART_Transmit>
	  			coordonnees[i] = uart_pc_tx[0]; //On copie ce qui passe dans l'UART dans un tableau coordonnees[i].
 8001c5a:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <GPS_data_reading+0x2e4>)
 8001c5c:	7819      	ldrb	r1, [r3, #0]
 8001c5e:	4a24      	ldr	r2, [pc, #144]	; (8001cf0 <GPS_data_reading+0x2b4>)
 8001c60:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001c64:	4413      	add	r3, r2
 8001c66:	460a      	mov	r2, r1
 8001c68:	701a      	strb	r2, [r3, #0]
	  			if(i >= 4){
 8001c6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	dd2b      	ble.n	8001cca <GPS_data_reading+0x28e>
	  				if(strncmp("OK*35",&coordonnees[i-4],5) == 0){
 8001c72:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001c76:	3b04      	subs	r3, #4
 8001c78:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <GPS_data_reading+0x2b4>)
 8001c7a:	4413      	add	r3, r2
 8001c7c:	2205      	movs	r2, #5
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4829      	ldr	r0, [pc, #164]	; (8001d28 <GPS_data_reading+0x2ec>)
 8001c82:	f009 fcb2 	bl	800b5ea <strncmp>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10e      	bne.n	8001caa <GPS_data_reading+0x26e>
	  						i = 0; //Si on trouve "OK", on réinitialise i à 0 pour synchroniser notre trame.
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	  						if(first_data == 1){
 8001c92:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <GPS_data_reading+0x2f0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d103      	bne.n	8001ca2 <GPS_data_reading+0x266>
	  							data_rdy = 1; //Si la trame est initialisée, le premier caractère du tableau voulu est prêt.
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <GPS_data_reading+0x2b0>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e018      	b.n	8001cd4 <GPS_data_reading+0x298>
	  						}
	  						else first_data = 1; //Permet d'enregistrer le tableau désiré.
 8001ca2:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <GPS_data_reading+0x2f0>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	e014      	b.n	8001cd4 <GPS_data_reading+0x298>
	  					}
	  				else{
	  						if(i == GPS_TRAME_SIZE-1){
 8001caa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001cae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d103      	bne.n	8001cbe <GPS_data_reading+0x282>
	  							i = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001cbc:	e00a      	b.n	8001cd4 <GPS_data_reading+0x298>
	  						}
	  						else{
	  							i++;
 8001cbe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001cc8:	e004      	b.n	8001cd4 <GPS_data_reading+0x298>
	  					}

	  				}
	  			}
	  			else i++;
 8001cca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001cce:	3301      	adds	r3, #1
 8001cd0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100


		}
		it_rx_gps = 0;
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <GPS_data_reading+0x2ac>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]

	}

}
 8001cda:	bf00      	nop
 8001cdc:	3730      	adds	r7, #48	; 0x30
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ce4:	b004      	add	sp, #16
 8001ce6:	4770      	bx	lr
 8001ce8:	20000a84 	.word	0x20000a84
 8001cec:	20000910 	.word	0x20000910
 8001cf0:	200004d0 	.word	0x200004d0
 8001cf4:	200008d8 	.word	0x200008d8
 8001cf8:	200008c4 	.word	0x200008c4
 8001cfc:	200008b8 	.word	0x200008b8
 8001d00:	200008d0 	.word	0x200008d0
 8001d04:	200008f0 	.word	0x200008f0
 8001d08:	200008f4 	.word	0x200008f4
 8001d0c:	200008fc 	.word	0x200008fc
 8001d10:	20000900 	.word	0x20000900
 8001d14:	42700000 	.word	0x42700000
 8001d18:	20000908 	.word	0x20000908
 8001d1c:	20000a34 	.word	0x20000a34
 8001d20:	20000a38 	.word	0x20000a38
 8001d24:	20000b60 	.word	0x20000b60
 8001d28:	0800f0c4 	.word	0x0800f0c4
 8001d2c:	2000090c 	.word	0x2000090c

08001d30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d36:	4a13      	ldr	r2, [pc, #76]	; (8001d84 <MX_I2C1_Init+0x54>)
 8001d38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d3c:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <MX_I2C1_Init+0x58>)
 8001d3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d6c:	4804      	ldr	r0, [pc, #16]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d6e:	f001 fb35 	bl	80033dc <HAL_I2C_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d78:	f000 fa1c 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000914 	.word	0x20000914
 8001d84:	40005400 	.word	0x40005400
 8001d88:	000186a0 	.word	0x000186a0

08001d8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a21      	ldr	r2, [pc, #132]	; (8001e30 <HAL_I2C_MspInit+0xa4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d13c      	bne.n	8001e28 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_I2C_MspInit+0xa8>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a1f      	ldr	r2, [pc, #124]	; (8001e34 <HAL_I2C_MspInit+0xa8>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_I2C_MspInit+0xa8>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001dca:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd0:	2312      	movs	r3, #18
 8001dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ddc:	2304      	movs	r3, #4
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	4619      	mov	r1, r3
 8001de6:	4814      	ldr	r0, [pc, #80]	; (8001e38 <HAL_I2C_MspInit+0xac>)
 8001de8:	f001 f91e 	bl	8003028 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_I2C_MspInit+0xa8>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	4a0f      	ldr	r2, [pc, #60]	; (8001e34 <HAL_I2C_MspInit+0xa8>)
 8001df6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HAL_I2C_MspInit+0xa8>)
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2105      	movs	r1, #5
 8001e0c:	201f      	movs	r0, #31
 8001e0e:	f001 f841 	bl	8002e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e12:	201f      	movs	r0, #31
 8001e14:	f001 f85a 	bl	8002ecc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2105      	movs	r1, #5
 8001e1c:	2020      	movs	r0, #32
 8001e1e:	f001 f839 	bl	8002e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001e22:	2020      	movs	r0, #32
 8001e24:	f001 f852 	bl	8002ecc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e28:	bf00      	nop
 8001e2a:	3728      	adds	r7, #40	; 0x28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40005400 	.word	0x40005400
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40020400 	.word	0x40020400

08001e3c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001e44:	1d39      	adds	r1, r7, #4
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	4803      	ldr	r0, [pc, #12]	; (8001e5c <__io_putchar+0x20>)
 8001e4e:	f006 f87a 	bl	8007f46 <HAL_UART_Transmit>
return ch;
 8001e52:	687b      	ldr	r3, [r7, #4]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000b60 	.word	0x20000b60

08001e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001e66:	af02      	add	r7, sp, #8
	  *            entrée des données GPS de la cible
	  ***********************************************************/

	  //Position GPS cible : 43°13'18.7"N 0°03'10.0"W  --> données telles que décrites dans le règlement 2023

	  pDataCansat.GPS.latitude_Target = 43.2218611;
 8001e68:	4987      	ldr	r1, [pc, #540]	; (8002088 <main+0x228>)
 8001e6a:	a383      	add	r3, pc, #524	; (adr r3, 8002078 <main+0x218>)
 8001e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e70:	e9c1 2308 	strd	r2, r3, [r1, #32]
	  pDataCansat.GPS.longitude_Target = -0.05277777777777778;
 8001e74:	4984      	ldr	r1, [pc, #528]	; (8002088 <main+0x228>)
 8001e76:	a382      	add	r3, pc, #520	; (adr r3, 8002080 <main+0x220>)
 8001e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e80:	f000 feea 	bl	8002c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e84:	f000 f91a 	bl	80020bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e88:	f7ff fd54 	bl	8001934 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e8c:	f000 fdec 	bl	8002a68 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001e90:	f7ff ff4e 	bl	8001d30 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001e94:	f000 fcd0 	bl	8002838 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001e98:	f000 fdbc 	bl	8002a14 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001e9c:	f000 fc68 	bl	8002770 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("------------------------\r\n");
 8001ea0:	487a      	ldr	r0, [pc, #488]	; (800208c <main+0x22c>)
 8001ea2:	f009 fadd 	bl	800b460 <puts>
  printf("------------------------\r\n");
 8001ea6:	4879      	ldr	r0, [pc, #484]	; (800208c <main+0x22c>)
 8001ea8:	f009 fada 	bl	800b460 <puts>
  printf("------------------------\r\n");
 8001eac:	4877      	ldr	r0, [pc, #476]	; (800208c <main+0x22c>)
 8001eae:	f009 fad7 	bl	800b460 <puts>
  printf("------------------------\r\n");
 8001eb2:	4876      	ldr	r0, [pc, #472]	; (800208c <main+0x22c>)
 8001eb4:	f009 fad4 	bl	800b460 <puts>
  printf("initialisation du CanSat\r\n");
 8001eb8:	4875      	ldr	r0, [pc, #468]	; (8002090 <main+0x230>)
 8001eba:	f009 fad1 	bl	800b460 <puts>
  printf("------------------------\r\n");
 8001ebe:	4873      	ldr	r0, [pc, #460]	; (800208c <main+0x22c>)
 8001ec0:	f009 face 	bl	800b460 <puts>
  printf("------------------------\r\n");
 8001ec4:	4871      	ldr	r0, [pc, #452]	; (800208c <main+0x22c>)
 8001ec6:	f009 facb 	bl	800b460 <puts>
  printf("------------------------\r\n");
 8001eca:	4870      	ldr	r0, [pc, #448]	; (800208c <main+0x22c>)
 8001ecc:	f009 fac8 	bl	800b460 <puts>
  printf("------------------------\r\n");
 8001ed0:	486e      	ldr	r0, [pc, #440]	; (800208c <main+0x22c>)
 8001ed2:	f009 fac5 	bl	800b460 <puts>

    int x=0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    int i=0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
    int Devices[100]={0};
 8001ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001eea:	4618      	mov	r0, r3
 8001eec:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	f008 fd27 	bl	800a946 <memset>

   uint8_t pData[100] = {0};
 8001ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	3304      	adds	r3, #4
 8001f06:	2260      	movs	r2, #96	; 0x60
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f008 fd1b 	bl	800a946 <memset>
   /**********                           *********
    * ******** INIT MPU-9250 (IMU_10DOF) *********
    * ********                           *********
    */

   printf("initialisation de l'IMU \r\n \r\n");
 8001f10:	4860      	ldr	r0, [pc, #384]	; (8002094 <main+0x234>)
 8001f12:	f009 faa5 	bl	800b460 <puts>

   // Initialisation du capteur MPU-9250

   Init(&hi2c1);
 8001f16:	4860      	ldr	r0, [pc, #384]	; (8002098 <main+0x238>)
 8001f18:	f7ff f956 	bl	80011c8 <Init>

   // vérification identité capteur MPU-9250

   pData[0]= WHO_AM_I_MPU9250;
 8001f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f24:	2275      	movs	r2, #117	; 0x75
 8001f26:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Master_Transmit(&hi2c1, MPU_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001f28:	1d3a      	adds	r2, r7, #4
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2301      	movs	r3, #1
 8001f32:	21d0      	movs	r1, #208	; 0xd0
 8001f34:	4858      	ldr	r0, [pc, #352]	; (8002098 <main+0x238>)
 8001f36:	f001 fb95 	bl	8003664 <HAL_I2C_Master_Transmit>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <main+0xe6>
    {
  	  printf("il y a une erreur avec I2C Master Transmit \r\n");
 8001f40:	4856      	ldr	r0, [pc, #344]	; (800209c <main+0x23c>)
 8001f42:	f009 fa8d 	bl	800b460 <puts>
    }
    if(HAL_I2C_Master_Receive(&hi2c1, MPU_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001f46:	1d3a      	adds	r2, r7, #4
 8001f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2301      	movs	r3, #1
 8001f50:	21d0      	movs	r1, #208	; 0xd0
 8001f52:	4851      	ldr	r0, [pc, #324]	; (8002098 <main+0x238>)
 8001f54:	f001 fc84 	bl	8003860 <HAL_I2C_Master_Receive>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <main+0x104>
    {
  	  printf("il y a une erreur avec I2C Master Receive \r\n");
 8001f5e:	4850      	ldr	r0, [pc, #320]	; (80020a0 <main+0x240>)
 8001f60:	f009 fa7e 	bl	800b460 <puts>
    }


    printf(" L'identifiant du capteur est : %x \r\n", pData[0]);
 8001f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	484c      	ldr	r0, [pc, #304]	; (80020a4 <main+0x244>)
 8001f72:	f009 f9ef 	bl	800b354 <iprintf>
    if((pData[0] =! 0x71))
 8001f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
    {
  	  printf("ce n'est pas le bon capteur \r\n");
    }
    else
  	  printf("MPU-9250 identified \r\n");
 8001f82:	4849      	ldr	r0, [pc, #292]	; (80020a8 <main+0x248>)
 8001f84:	f009 fa6c 	bl	800b460 <puts>

    // vérification identité AK8963C (magnétomètre)

    pData[0]= WHO_AM_I_AK8963;
 8001f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
      if(HAL_I2C_Master_Transmit(&hi2c1, MAGNETO_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001f94:	1d3a      	adds	r2, r7, #4
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	2118      	movs	r1, #24
 8001fa0:	483d      	ldr	r0, [pc, #244]	; (8002098 <main+0x238>)
 8001fa2:	f001 fb5f 	bl	8003664 <HAL_I2C_Master_Transmit>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <main+0x152>
      {
    	  printf("il y a une erreur avec I2C Master Transmit \r\n");
 8001fac:	483b      	ldr	r0, [pc, #236]	; (800209c <main+0x23c>)
 8001fae:	f009 fa57 	bl	800b460 <puts>
      }
      if(HAL_I2C_Master_Receive(&hi2c1, MAGNETO_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001fb2:	1d3a      	adds	r2, r7, #4
 8001fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	2301      	movs	r3, #1
 8001fbc:	2118      	movs	r1, #24
 8001fbe:	4836      	ldr	r0, [pc, #216]	; (8002098 <main+0x238>)
 8001fc0:	f001 fc4e 	bl	8003860 <HAL_I2C_Master_Receive>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <main+0x170>
      {
    	  printf("il y a une erreur avec I2C Master Receive \r\n");
 8001fca:	4835      	ldr	r0, [pc, #212]	; (80020a0 <main+0x240>)
 8001fcc:	f009 fa48 	bl	800b460 <puts>
      }


      printf(" L'identifiant du magnétomètre est : %x \r\n", pData[0]);
 8001fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4833      	ldr	r0, [pc, #204]	; (80020ac <main+0x24c>)
 8001fde:	f009 f9b9 	bl	800b354 <iprintf>
      if((pData[0] =! 0x48))
 8001fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
      {
    	  printf("ce n'est pas le bon capteur \r\n  ****** \r\n ****** \r\n ****** \r\n");
      }
      else
    	  printf("AK8963C identified \r\n  ****** \r\n ****** \r\n ****** \r\n");
 8001fee:	4830      	ldr	r0, [pc, #192]	; (80020b0 <main+0x250>)
 8001ff0:	f009 fa36 	bl	800b460 <puts>



  // check les périphériques i2c disponibles

    for (i=0;i<256;i++){
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8001ffa:	e02a      	b.n	8002052 <main+0x1f2>
         	  if(HAL_I2C_IsDeviceReady(&hi2c1, i, 4, 20)==HAL_OK){
 8001ffc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002000:	b299      	uxth	r1, r3
 8002002:	2314      	movs	r3, #20
 8002004:	2204      	movs	r2, #4
 8002006:	4824      	ldr	r0, [pc, #144]	; (8002098 <main+0x238>)
 8002008:	f002 f970 	bl	80042ec <HAL_I2C_IsDeviceReady>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d11a      	bne.n	8002048 <main+0x1e8>
         		  Devices[x]=i;
 8002012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002016:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800201a:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800201e:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8002022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
         		  printf("%d \r\n",Devices[x]);
 8002026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800202e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8002032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002036:	4619      	mov	r1, r3
 8002038:	481e      	ldr	r0, [pc, #120]	; (80020b4 <main+0x254>)
 800203a:	f009 f98b 	bl	800b354 <iprintf>
         		  x=x+1;
 800203e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002042:	3301      	adds	r3, #1
 8002044:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    for (i=0;i<256;i++){
 8002048:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800204c:	3301      	adds	r3, #1
 800204e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8002052:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002056:	2bff      	cmp	r3, #255	; 0xff
 8002058:	ddd0      	ble.n	8001ffc <main+0x19c>
     * ******** INITIALISATION Servos *********
     * ********                       *********
     */


    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800205a:	2100      	movs	r1, #0
 800205c:	4816      	ldr	r0, [pc, #88]	; (80020b8 <main+0x258>)
 800205e:	f005 f9cf 	bl	8007400 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002062:	2104      	movs	r1, #4
 8002064:	4814      	ldr	r0, [pc, #80]	; (80020b8 <main+0x258>)
 8002066:	f005 f9cb 	bl	8007400 <HAL_TIM_PWM_Start>

  //vTaskStartScheduler();
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800206a:	f7ff fc1d 	bl	80018a8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800206e:	f006 ffb7 	bl	8008fe0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002072:	e7fe      	b.n	8002072 <main+0x212>
 8002074:	f3af 8000 	nop.w
 8002078:	f1cc6096 	.word	0xf1cc6096
 800207c:	40459c65 	.word	0x40459c65
 8002080:	5b05b05b 	.word	0x5b05b05b
 8002084:	bfab05b0 	.word	0xbfab05b0
 8002088:	20000968 	.word	0x20000968
 800208c:	0800f0cc 	.word	0x0800f0cc
 8002090:	0800f0e8 	.word	0x0800f0e8
 8002094:	0800f104 	.word	0x0800f104
 8002098:	20000914 	.word	0x20000914
 800209c:	0800f124 	.word	0x0800f124
 80020a0:	0800f154 	.word	0x0800f154
 80020a4:	0800f180 	.word	0x0800f180
 80020a8:	0800f1a8 	.word	0x0800f1a8
 80020ac:	0800f1c0 	.word	0x0800f1c0
 80020b0:	0800f1f0 	.word	0x0800f1f0
 80020b4:	0800f224 	.word	0x0800f224
 80020b8:	20000a8c 	.word	0x20000a8c

080020bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b094      	sub	sp, #80	; 0x50
 80020c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020c2:	f107 0320 	add.w	r3, r7, #32
 80020c6:	2230      	movs	r2, #48	; 0x30
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f008 fc3b 	bl	800a946 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e0:	2300      	movs	r3, #0
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	4b28      	ldr	r3, [pc, #160]	; (8002188 <SystemClock_Config+0xcc>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	4a27      	ldr	r2, [pc, #156]	; (8002188 <SystemClock_Config+0xcc>)
 80020ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ee:	6413      	str	r3, [r2, #64]	; 0x40
 80020f0:	4b25      	ldr	r3, [pc, #148]	; (8002188 <SystemClock_Config+0xcc>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020fc:	2300      	movs	r3, #0
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	4b22      	ldr	r3, [pc, #136]	; (800218c <SystemClock_Config+0xd0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a21      	ldr	r2, [pc, #132]	; (800218c <SystemClock_Config+0xd0>)
 8002106:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b1f      	ldr	r3, [pc, #124]	; (800218c <SystemClock_Config+0xd0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002118:	2302      	movs	r3, #2
 800211a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800211c:	2301      	movs	r3, #1
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002120:	2310      	movs	r3, #16
 8002122:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002124:	2302      	movs	r3, #2
 8002126:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002128:	2300      	movs	r3, #0
 800212a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800212c:	2310      	movs	r3, #16
 800212e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002130:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002134:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002136:	2304      	movs	r3, #4
 8002138:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800213a:	2304      	movs	r3, #4
 800213c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800213e:	f107 0320 	add.w	r3, r7, #32
 8002142:	4618      	mov	r0, r3
 8002144:	f004 fb86 	bl	8006854 <HAL_RCC_OscConfig>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800214e:	f000 f831 	bl	80021b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002152:	230f      	movs	r3, #15
 8002154:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002156:	2302      	movs	r3, #2
 8002158:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800215e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002162:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002168:	f107 030c 	add.w	r3, r7, #12
 800216c:	2102      	movs	r1, #2
 800216e:	4618      	mov	r0, r3
 8002170:	f004 fde8 	bl	8006d44 <HAL_RCC_ClockConfig>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800217a:	f000 f81b 	bl	80021b4 <Error_Handler>
  }
}
 800217e:	bf00      	nop
 8002180:	3750      	adds	r7, #80	; 0x50
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800
 800218c:	40007000 	.word	0x40007000

08002190 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021a2:	f000 fd7b 	bl	8002c9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40010000 	.word	0x40010000

080021b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
}
 80021ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021bc:	e7fe      	b.n	80021bc <Error_Handler+0x8>
	...

080021c0 <Task_Drop_detection>:
	 * @param Drop_flag Drapeau qui permet d'indiquer que le Cansat a été largué
	 * @retval None
	 */

void Task_Drop_detection(void * pvParameters)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	6078      	str	r0, [r7, #4]
	uint16_t gpio_value = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	82fb      	strh	r3, [r7, #22]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500;
 80021cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021d0:	613b      	str	r3, [r7, #16]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80021d2:	f007 fc21 	bl	8009a18 <xTaskGetTickCount>
 80021d6:	4603      	mov	r3, r0
 80021d8:	60fb      	str	r3, [r7, #12]

	for(;;)
	{

		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 80021da:	f107 030c 	add.w	r3, r7, #12
 80021de:	6939      	ldr	r1, [r7, #16]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f007 fa53 	bl	800968c <vTaskDelayUntil>

		gpio_value = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);  // prend la valeur 1 lorsque pas d'obstacles
 80021e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021ea:	4811      	ldr	r0, [pc, #68]	; (8002230 <Task_Drop_detection+0x70>)
 80021ec:	f001 f8a0 	bl	8003330 <HAL_GPIO_ReadPin>
 80021f0:	4603      	mov	r3, r0
 80021f2:	82fb      	strh	r3, [r7, #22]
															// prend la valeur 0 lorsque detection d'un obstacle
		printf("valeur du capteur IR : %d \r\n", gpio_value);
 80021f4:	8afb      	ldrh	r3, [r7, #22]
 80021f6:	4619      	mov	r1, r3
 80021f8:	480e      	ldr	r0, [pc, #56]	; (8002234 <Task_Drop_detection+0x74>)
 80021fa:	f009 f8ab 	bl	800b354 <iprintf>

		if(gpio_value == 1)
 80021fe:	8afb      	ldrh	r3, [r7, #22]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d1ea      	bne.n	80021da <Task_Drop_detection+0x1a>
		{
			Drop_flag = 1;
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <Task_Drop_detection+0x78>)
 8002206:	2201      	movs	r2, #1
 8002208:	601a      	str	r2, [r3, #0]
			printf("largage effectue \r\n");
 800220a:	480c      	ldr	r0, [pc, #48]	; (800223c <Task_Drop_detection+0x7c>)
 800220c:	f009 f928 	bl	800b460 <puts>
			xTaskCreate(Task_lancement_Cansat, "Lancement du Cansat", 500, NULL, osPriorityHigh, &pxLancement_Cansat);
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <Task_Drop_detection+0x80>)
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	2302      	movs	r3, #2
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	2300      	movs	r3, #0
 800221a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800221e:	4909      	ldr	r1, [pc, #36]	; (8002244 <Task_Drop_detection+0x84>)
 8002220:	4809      	ldr	r0, [pc, #36]	; (8002248 <Task_Drop_detection+0x88>)
 8002222:	f007 f855 	bl	80092d0 <xTaskCreate>
			vTaskDelete(NULL);
 8002226:	2000      	movs	r0, #0
 8002228:	f007 f9a0 	bl	800956c <vTaskDelete>
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800222c:	e7d5      	b.n	80021da <Task_Drop_detection+0x1a>
 800222e:	bf00      	nop
 8002230:	40020000 	.word	0x40020000
 8002234:	0800f22c 	.word	0x0800f22c
 8002238:	20000a30 	.word	0x20000a30
 800223c:	0800f24c 	.word	0x0800f24c
 8002240:	2000020c 	.word	0x2000020c
 8002244:	0800f260 	.word	0x0800f260
 8002248:	08001009 	.word	0x08001009

0800224c <servoSetPositionLeft>:
 	 * @brief Positionnement du servo gauche
 	 * @Note Cette fonction permet de placer le servo comme on le souhaite avec 4 positions différentes
	 * @param int position : 0,1,2 ou 3
	 * @retval None
	 */
void servoSetPositionLeft (int position){
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	if (position == 0){
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d104      	bne.n	8002264 <servoSetPositionLeft+0x18>
		TIM2->CCR1 = POSITION_0_LEFT;
 800225a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800225e:	2250      	movs	r2, #80	; 0x50
 8002260:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR1 = POSITION_3_LEFT;
	}
	else {
		printf("Vous ne devez mettre en entree que 0,1,2 ou 3 \r\n");
	}
}
 8002262:	e01a      	b.n	800229a <servoSetPositionLeft+0x4e>
	else if (position == 1){
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d104      	bne.n	8002274 <servoSetPositionLeft+0x28>
			TIM2->CCR1 = POSITION_1_LEFT;
 800226a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800226e:	226e      	movs	r2, #110	; 0x6e
 8002270:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002272:	e012      	b.n	800229a <servoSetPositionLeft+0x4e>
	else if (position == 2){
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d104      	bne.n	8002284 <servoSetPositionLeft+0x38>
			TIM2->CCR1 = POSITION_2_LEFT;
 800227a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800227e:	22aa      	movs	r2, #170	; 0xaa
 8002280:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002282:	e00a      	b.n	800229a <servoSetPositionLeft+0x4e>
	else if (position == 3){
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b03      	cmp	r3, #3
 8002288:	d104      	bne.n	8002294 <servoSetPositionLeft+0x48>
			TIM2->CCR1 = POSITION_3_LEFT;
 800228a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800228e:	22fa      	movs	r2, #250	; 0xfa
 8002290:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002292:	e002      	b.n	800229a <servoSetPositionLeft+0x4e>
		printf("Vous ne devez mettre en entree que 0,1,2 ou 3 \r\n");
 8002294:	4803      	ldr	r0, [pc, #12]	; (80022a4 <servoSetPositionLeft+0x58>)
 8002296:	f009 f8e3 	bl	800b460 <puts>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	0800f274 	.word	0x0800f274

080022a8 <servoSetPositionRight>:
 	 * @brief Positionnement du servo droit
 	 * @Note Cette fonction permet de placer le servo comme on le souhaite avec 4 positions différentes
	 * @param int position : 0,1,2 ou 3
	 * @retval None
	 */
void servoSetPositionRight (int position){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
	if (position == 0){
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d104      	bne.n	80022c0 <servoSetPositionRight+0x18>
		TIM2->CCR2 = POSITION_0_RIGHT;
 80022b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022ba:	22dc      	movs	r2, #220	; 0xdc
 80022bc:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR2 = POSITION_3_RIGHT;
	}
	else {
		printf("Vous ne devez mettre en entree 0,1,2 ou 3 \r\n");
	}
}
 80022be:	e01a      	b.n	80022f6 <servoSetPositionRight+0x4e>
	else if (position == 1){
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d104      	bne.n	80022d0 <servoSetPositionRight+0x28>
			TIM2->CCR2 = POSITION_1_RIGHT;
 80022c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022ca:	22be      	movs	r2, #190	; 0xbe
 80022cc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80022ce:	e012      	b.n	80022f6 <servoSetPositionRight+0x4e>
	else if (position == 2){
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d104      	bne.n	80022e0 <servoSetPositionRight+0x38>
			TIM2->CCR2 = POSITION_2_RIGHT;
 80022d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022da:	2282      	movs	r2, #130	; 0x82
 80022dc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80022de:	e00a      	b.n	80022f6 <servoSetPositionRight+0x4e>
	else if (position == 3){
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d104      	bne.n	80022f0 <servoSetPositionRight+0x48>
			TIM2->CCR2 = POSITION_3_RIGHT;
 80022e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022ea:	223c      	movs	r2, #60	; 0x3c
 80022ec:	639a      	str	r2, [r3, #56]	; 0x38
}
 80022ee:	e002      	b.n	80022f6 <servoSetPositionRight+0x4e>
		printf("Vous ne devez mettre en entree 0,1,2 ou 3 \r\n");
 80022f0:	4803      	ldr	r0, [pc, #12]	; (8002300 <servoSetPositionRight+0x58>)
 80022f2:	f009 f8b5 	bl	800b460 <puts>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	0800f2a4 	.word	0x0800f2a4

08002304 <choice_direction_intensity>:
 	 * @Note Cette fonction permet de choisir la direction dans laquelle le cansat doit aller ainsi que son intensité grâce à une différence d'angle
	 * @param int delta_teta : difference d'angle comprise entre 0 et 360 degrés
	 * @retval None
	 */

void choice_direction_intensity(unsigned int delta_teta){
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
	if ((delta_teta<epsilon) || (delta_teta>360-epsilon)){
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b04      	cmp	r3, #4
 8002310:	d903      	bls.n	800231a <choice_direction_intensity+0x16>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 8002318:	d306      	bcc.n	8002328 <choice_direction_intensity+0x24>
		servoSetPositionLeft(0);
 800231a:	2000      	movs	r0, #0
 800231c:	f7ff ff96 	bl	800224c <servoSetPositionLeft>
		servoSetPositionRight(0);
 8002320:	2000      	movs	r0, #0
 8002322:	f7ff ffc1 	bl	80022a8 <servoSetPositionRight>
	}
	else {
		printf("cas non traité \r\n");
	}

}
 8002326:	e040      	b.n	80023aa <choice_direction_intensity+0xa6>
	else if (delta_teta<teta_low){
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b1d      	cmp	r3, #29
 800232c:	d806      	bhi.n	800233c <choice_direction_intensity+0x38>
		servoSetPositionLeft(0);
 800232e:	2000      	movs	r0, #0
 8002330:	f7ff ff8c 	bl	800224c <servoSetPositionLeft>
		servoSetPositionRight(1);
 8002334:	2001      	movs	r0, #1
 8002336:	f7ff ffb7 	bl	80022a8 <servoSetPositionRight>
}
 800233a:	e036      	b.n	80023aa <choice_direction_intensity+0xa6>
	else if (delta_teta>360-teta_low){
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8002342:	d906      	bls.n	8002352 <choice_direction_intensity+0x4e>
		servoSetPositionLeft(1);
 8002344:	2001      	movs	r0, #1
 8002346:	f7ff ff81 	bl	800224c <servoSetPositionLeft>
		servoSetPositionRight(0);
 800234a:	2000      	movs	r0, #0
 800234c:	f7ff ffac 	bl	80022a8 <servoSetPositionRight>
}
 8002350:	e02b      	b.n	80023aa <choice_direction_intensity+0xa6>
	else if (delta_teta<teta_high){
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b63      	cmp	r3, #99	; 0x63
 8002356:	d806      	bhi.n	8002366 <choice_direction_intensity+0x62>
		servoSetPositionLeft(0);
 8002358:	2000      	movs	r0, #0
 800235a:	f7ff ff77 	bl	800224c <servoSetPositionLeft>
		servoSetPositionRight(2);
 800235e:	2002      	movs	r0, #2
 8002360:	f7ff ffa2 	bl	80022a8 <servoSetPositionRight>
}
 8002364:	e021      	b.n	80023aa <choice_direction_intensity+0xa6>
	else if (delta_teta>360-teta_high){
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800236c:	d906      	bls.n	800237c <choice_direction_intensity+0x78>
		servoSetPositionLeft(2);
 800236e:	2002      	movs	r0, #2
 8002370:	f7ff ff6c 	bl	800224c <servoSetPositionLeft>
		servoSetPositionRight(0);
 8002374:	2000      	movs	r0, #0
 8002376:	f7ff ff97 	bl	80022a8 <servoSetPositionRight>
}
 800237a:	e016      	b.n	80023aa <choice_direction_intensity+0xa6>
	else if (delta_teta<=180){
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2bb4      	cmp	r3, #180	; 0xb4
 8002380:	d806      	bhi.n	8002390 <choice_direction_intensity+0x8c>
		servoSetPositionLeft(0);
 8002382:	2000      	movs	r0, #0
 8002384:	f7ff ff62 	bl	800224c <servoSetPositionLeft>
		servoSetPositionRight(3);
 8002388:	2003      	movs	r0, #3
 800238a:	f7ff ff8d 	bl	80022a8 <servoSetPositionRight>
}
 800238e:	e00c      	b.n	80023aa <choice_direction_intensity+0xa6>
	else if (delta_teta>180){
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2bb4      	cmp	r3, #180	; 0xb4
 8002394:	d906      	bls.n	80023a4 <choice_direction_intensity+0xa0>
		servoSetPositionLeft(3);
 8002396:	2003      	movs	r0, #3
 8002398:	f7ff ff58 	bl	800224c <servoSetPositionLeft>
		servoSetPositionRight(0);
 800239c:	2000      	movs	r0, #0
 800239e:	f7ff ff83 	bl	80022a8 <servoSetPositionRight>
}
 80023a2:	e002      	b.n	80023aa <choice_direction_intensity+0xa6>
		printf("cas non traité \r\n");
 80023a4:	4803      	ldr	r0, [pc, #12]	; (80023b4 <choice_direction_intensity+0xb0>)
 80023a6:	f009 f85b 	bl	800b460 <puts>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	0800f2d0 	.word	0x0800f2d0

080023b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_MspInit+0x54>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	4a11      	ldr	r2, [pc, #68]	; (800240c <HAL_MspInit+0x54>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023cc:	6453      	str	r3, [r2, #68]	; 0x44
 80023ce:	4b0f      	ldr	r3, [pc, #60]	; (800240c <HAL_MspInit+0x54>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_MspInit+0x54>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <HAL_MspInit+0x54>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <HAL_MspInit+0x54>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	210f      	movs	r1, #15
 80023fa:	f06f 0001 	mvn.w	r0, #1
 80023fe:	f000 fd49 	bl	8002e94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800

08002410 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08c      	sub	sp, #48	; 0x30
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002420:	2300      	movs	r3, #0
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	4b2e      	ldr	r3, [pc, #184]	; (80024e0 <HAL_InitTick+0xd0>)
 8002426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002428:	4a2d      	ldr	r2, [pc, #180]	; (80024e0 <HAL_InitTick+0xd0>)
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	6453      	str	r3, [r2, #68]	; 0x44
 8002430:	4b2b      	ldr	r3, [pc, #172]	; (80024e0 <HAL_InitTick+0xd0>)
 8002432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800243c:	f107 020c 	add.w	r2, r7, #12
 8002440:	f107 0310 	add.w	r3, r7, #16
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f004 fe9c 	bl	8007184 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800244c:	f004 fe86 	bl	800715c <HAL_RCC_GetPCLK2Freq>
 8002450:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	4a23      	ldr	r2, [pc, #140]	; (80024e4 <HAL_InitTick+0xd4>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	0c9b      	lsrs	r3, r3, #18
 800245c:	3b01      	subs	r3, #1
 800245e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002460:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <HAL_InitTick+0xd8>)
 8002462:	4a22      	ldr	r2, [pc, #136]	; (80024ec <HAL_InitTick+0xdc>)
 8002464:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <HAL_InitTick+0xd8>)
 8002468:	f240 32e7 	movw	r2, #999	; 0x3e7
 800246c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800246e:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <HAL_InitTick+0xd8>)
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002474:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <HAL_InitTick+0xd8>)
 8002476:	2200      	movs	r2, #0
 8002478:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800247a:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_InitTick+0xd8>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_InitTick+0xd8>)
 8002482:	2200      	movs	r2, #0
 8002484:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002486:	4818      	ldr	r0, [pc, #96]	; (80024e8 <HAL_InitTick+0xd8>)
 8002488:	f004 feae 	bl	80071e8 <HAL_TIM_Base_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002492:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002496:	2b00      	cmp	r3, #0
 8002498:	d11b      	bne.n	80024d2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800249a:	4813      	ldr	r0, [pc, #76]	; (80024e8 <HAL_InitTick+0xd8>)
 800249c:	f004 fefe 	bl	800729c <HAL_TIM_Base_Start_IT>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80024a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d111      	bne.n	80024d2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80024ae:	2019      	movs	r0, #25
 80024b0:	f000 fd0c 	bl	8002ecc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b0f      	cmp	r3, #15
 80024b8:	d808      	bhi.n	80024cc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80024ba:	2200      	movs	r2, #0
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	2019      	movs	r0, #25
 80024c0:	f000 fce8 	bl	8002e94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024c4:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <HAL_InitTick+0xe0>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e002      	b.n	80024d2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80024d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3730      	adds	r7, #48	; 0x30
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800
 80024e4:	431bde83 	.word	0x431bde83
 80024e8:	20000a3c 	.word	0x20000a3c
 80024ec:	40010000 	.word	0x40010000
 80024f0:	20000004 	.word	0x20000004

080024f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <NMI_Handler+0x4>

080024fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024fe:	e7fe      	b.n	80024fe <HardFault_Handler+0x4>

08002500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002504:	e7fe      	b.n	8002504 <MemManage_Handler+0x4>

08002506 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800250a:	e7fe      	b.n	800250a <BusFault_Handler+0x4>

0800250c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002510:	e7fe      	b.n	8002510 <UsageFault_Handler+0x4>

08002512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002524:	4802      	ldr	r0, [pc, #8]	; (8002530 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002526:	f005 f81b 	bl	8007560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000a3c 	.word	0x20000a3c

08002534 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <I2C1_EV_IRQHandler+0x10>)
 800253a:	f002 f805 	bl	8004548 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000914 	.word	0x20000914

08002548 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <I2C1_ER_IRQHandler+0x10>)
 800254e:	f002 f96c 	bl	800482a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000914 	.word	0x20000914

0800255c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
/*
	BaseType_t higher_priority_task_woken = pdFALSE;
	vTaskNotifyGiveFromISR(pxGPS_Handler,&higher_priority_task_woken);
*/
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_gps_rx, 1);
 8002560:	2201      	movs	r2, #1
 8002562:	4906      	ldr	r1, [pc, #24]	; (800257c <USART1_IRQHandler+0x20>)
 8002564:	4806      	ldr	r0, [pc, #24]	; (8002580 <USART1_IRQHandler+0x24>)
 8002566:	f005 fd80 	bl	800806a <HAL_UART_Receive_IT>

	it_rx_gps = 1;
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <USART1_IRQHandler+0x28>)
 800256c:	2201      	movs	r2, #1
 800256e:	601a      	str	r2, [r3, #0]

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002570:	4803      	ldr	r0, [pc, #12]	; (8002580 <USART1_IRQHandler+0x24>)
 8002572:	f005 fdab 	bl	80080cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  //portYIELD_FROM_ISR(higher_priority_task_woken);

  /* USER CODE END USART1_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000a34 	.word	0x20000a34
 8002580:	20000b1c 	.word	0x20000b1c
 8002584:	20000a84 	.word	0x20000a84

08002588 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800258e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002592:	f000 feff 	bl	8003394 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  xTaskCreate(Task_Drop_detection, "Drop detection task", 500, NULL, osPriorityAboveNormal, &pxDrop_detection);
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <EXTI15_10_IRQHandler+0x2c>)
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	2301      	movs	r3, #1
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	2300      	movs	r3, #0
 80025a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80025a4:	4904      	ldr	r1, [pc, #16]	; (80025b8 <EXTI15_10_IRQHandler+0x30>)
 80025a6:	4805      	ldr	r0, [pc, #20]	; (80025bc <EXTI15_10_IRQHandler+0x34>)
 80025a8:	f006 fe92 	bl	80092d0 <xTaskCreate>

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000208 	.word	0x20000208
 80025b8:	0800f2e4 	.word	0x0800f2e4
 80025bc:	080021c1 	.word	0x080021c1

080025c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
	return 1;
 80025c4:	2301      	movs	r3, #1
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <_kill>:

int _kill(int pid, int sig)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025da:	f008 f883 	bl	800a6e4 <__errno>
 80025de:	4603      	mov	r3, r0
 80025e0:	2216      	movs	r2, #22
 80025e2:	601a      	str	r2, [r3, #0]
	return -1;
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <_exit>:

void _exit (int status)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ffe7 	bl	80025d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002602:	e7fe      	b.n	8002602 <_exit+0x12>

08002604 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	e00a      	b.n	800262c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002616:	f3af 8000 	nop.w
 800261a:	4601      	mov	r1, r0
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	60ba      	str	r2, [r7, #8]
 8002622:	b2ca      	uxtb	r2, r1
 8002624:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	3301      	adds	r3, #1
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	429a      	cmp	r2, r3
 8002632:	dbf0      	blt.n	8002616 <_read+0x12>
	}

return len;
 8002634:	687b      	ldr	r3, [r7, #4]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	e009      	b.n	8002664 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	60ba      	str	r2, [r7, #8]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fbef 	bl	8001e3c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	3301      	adds	r3, #1
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	429a      	cmp	r2, r3
 800266a:	dbf1      	blt.n	8002650 <_write+0x12>
	}
	return len;
 800266c:	687b      	ldr	r3, [r7, #4]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <_close>:

int _close(int file)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
	return -1;
 800267e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800269e:	605a      	str	r2, [r3, #4]
	return 0;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <_isatty>:

int _isatty(int file)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
	return 1;
 80026b6:	2301      	movs	r3, #1
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
	return 0;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026e8:	4a14      	ldr	r2, [pc, #80]	; (800273c <_sbrk+0x5c>)
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <_sbrk+0x60>)
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <_sbrk+0x64>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d102      	bne.n	8002702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <_sbrk+0x64>)
 80026fe:	4a12      	ldr	r2, [pc, #72]	; (8002748 <_sbrk+0x68>)
 8002700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002702:	4b10      	ldr	r3, [pc, #64]	; (8002744 <_sbrk+0x64>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	429a      	cmp	r2, r3
 800270e:	d207      	bcs.n	8002720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002710:	f007 ffe8 	bl	800a6e4 <__errno>
 8002714:	4603      	mov	r3, r0
 8002716:	220c      	movs	r2, #12
 8002718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800271a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800271e:	e009      	b.n	8002734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <_sbrk+0x64>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002726:	4b07      	ldr	r3, [pc, #28]	; (8002744 <_sbrk+0x64>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	4a05      	ldr	r2, [pc, #20]	; (8002744 <_sbrk+0x64>)
 8002730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002732:	68fb      	ldr	r3, [r7, #12]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20020000 	.word	0x20020000
 8002740:	00000400 	.word	0x00000400
 8002744:	20000a88 	.word	0x20000a88
 8002748:	20004910 	.word	0x20004910

0800274c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <SystemInit+0x20>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002756:	4a05      	ldr	r2, [pc, #20]	; (800276c <SystemInit+0x20>)
 8002758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800275c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002776:	f107 0320 	add.w	r3, r7, #32
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002780:	1d3b      	adds	r3, r7, #4
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	60da      	str	r2, [r3, #12]
 800278c:	611a      	str	r2, [r3, #16]
 800278e:	615a      	str	r2, [r3, #20]
 8002790:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002792:	4b28      	ldr	r3, [pc, #160]	; (8002834 <MX_TIM2_Init+0xc4>)
 8002794:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002798:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800279a:	4b26      	ldr	r3, [pc, #152]	; (8002834 <MX_TIM2_Init+0xc4>)
 800279c:	2253      	movs	r2, #83	; 0x53
 800279e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a0:	4b24      	ldr	r3, [pc, #144]	; (8002834 <MX_TIM2_Init+0xc4>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80027a6:	4b23      	ldr	r3, [pc, #140]	; (8002834 <MX_TIM2_Init+0xc4>)
 80027a8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80027ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ae:	4b21      	ldr	r3, [pc, #132]	; (8002834 <MX_TIM2_Init+0xc4>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b4:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <MX_TIM2_Init+0xc4>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027ba:	481e      	ldr	r0, [pc, #120]	; (8002834 <MX_TIM2_Init+0xc4>)
 80027bc:	f004 fdd0 	bl	8007360 <HAL_TIM_PWM_Init>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80027c6:	f7ff fcf5 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027d2:	f107 0320 	add.w	r3, r7, #32
 80027d6:	4619      	mov	r1, r3
 80027d8:	4816      	ldr	r0, [pc, #88]	; (8002834 <MX_TIM2_Init+0xc4>)
 80027da:	f005 fae5 	bl	8007da8 <HAL_TIMEx_MasterConfigSynchronization>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80027e4:	f7ff fce6 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027e8:	2360      	movs	r3, #96	; 0x60
 80027ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027f8:	1d3b      	adds	r3, r7, #4
 80027fa:	2200      	movs	r2, #0
 80027fc:	4619      	mov	r1, r3
 80027fe:	480d      	ldr	r0, [pc, #52]	; (8002834 <MX_TIM2_Init+0xc4>)
 8002800:	f004 ffb6 	bl	8007770 <HAL_TIM_PWM_ConfigChannel>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800280a:	f7ff fcd3 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	2204      	movs	r2, #4
 8002812:	4619      	mov	r1, r3
 8002814:	4807      	ldr	r0, [pc, #28]	; (8002834 <MX_TIM2_Init+0xc4>)
 8002816:	f004 ffab 	bl	8007770 <HAL_TIM_PWM_ConfigChannel>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002820:	f7ff fcc8 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002824:	4803      	ldr	r0, [pc, #12]	; (8002834 <MX_TIM2_Init+0xc4>)
 8002826:	f000 f897 	bl	8002958 <HAL_TIM_MspPostInit>

}
 800282a:	bf00      	nop
 800282c:	3728      	adds	r7, #40	; 0x28
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000a8c 	.word	0x20000a8c

08002838 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800283e:	f107 0320 	add.w	r3, r7, #32
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	60da      	str	r2, [r3, #12]
 8002854:	611a      	str	r2, [r3, #16]
 8002856:	615a      	str	r2, [r3, #20]
 8002858:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800285a:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <MX_TIM3_Init+0xac>)
 800285c:	4a22      	ldr	r2, [pc, #136]	; (80028e8 <MX_TIM3_Init+0xb0>)
 800285e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002860:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <MX_TIM3_Init+0xac>)
 8002862:	2253      	movs	r2, #83	; 0x53
 8002864:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002866:	4b1f      	ldr	r3, [pc, #124]	; (80028e4 <MX_TIM3_Init+0xac>)
 8002868:	2200      	movs	r2, #0
 800286a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800286c:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <MX_TIM3_Init+0xac>)
 800286e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002872:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002874:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <MX_TIM3_Init+0xac>)
 8002876:	2200      	movs	r2, #0
 8002878:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287a:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <MX_TIM3_Init+0xac>)
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002880:	4818      	ldr	r0, [pc, #96]	; (80028e4 <MX_TIM3_Init+0xac>)
 8002882:	f004 fd6d 	bl	8007360 <HAL_TIM_PWM_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800288c:	f7ff fc92 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002890:	2300      	movs	r3, #0
 8002892:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002894:	2300      	movs	r3, #0
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002898:	f107 0320 	add.w	r3, r7, #32
 800289c:	4619      	mov	r1, r3
 800289e:	4811      	ldr	r0, [pc, #68]	; (80028e4 <MX_TIM3_Init+0xac>)
 80028a0:	f005 fa82 	bl	8007da8 <HAL_TIMEx_MasterConfigSynchronization>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80028aa:	f7ff fc83 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028ae:	2360      	movs	r3, #96	; 0x60
 80028b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	2200      	movs	r2, #0
 80028c2:	4619      	mov	r1, r3
 80028c4:	4807      	ldr	r0, [pc, #28]	; (80028e4 <MX_TIM3_Init+0xac>)
 80028c6:	f004 ff53 	bl	8007770 <HAL_TIM_PWM_ConfigChannel>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80028d0:	f7ff fc70 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80028d4:	4803      	ldr	r0, [pc, #12]	; (80028e4 <MX_TIM3_Init+0xac>)
 80028d6:	f000 f83f 	bl	8002958 <HAL_TIM_MspPostInit>

}
 80028da:	bf00      	nop
 80028dc:	3728      	adds	r7, #40	; 0x28
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000ad4 	.word	0x20000ad4
 80028e8:	40000400 	.word	0x40000400

080028ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fc:	d10e      	bne.n	800291c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	4b13      	ldr	r3, [pc, #76]	; (8002950 <HAL_TIM_PWM_MspInit+0x64>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	4a12      	ldr	r2, [pc, #72]	; (8002950 <HAL_TIM_PWM_MspInit+0x64>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6413      	str	r3, [r2, #64]	; 0x40
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <HAL_TIM_PWM_MspInit+0x64>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800291a:	e012      	b.n	8002942 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0c      	ldr	r2, [pc, #48]	; (8002954 <HAL_TIM_PWM_MspInit+0x68>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d10d      	bne.n	8002942 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_TIM_PWM_MspInit+0x64>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	4a08      	ldr	r2, [pc, #32]	; (8002950 <HAL_TIM_PWM_MspInit+0x64>)
 8002930:	f043 0302 	orr.w	r3, r3, #2
 8002934:	6413      	str	r3, [r2, #64]	; 0x40
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_TIM_PWM_MspInit+0x64>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	40000400 	.word	0x40000400

08002958 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002978:	d11e      	bne.n	80029b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	4b22      	ldr	r3, [pc, #136]	; (8002a08 <HAL_TIM_MspPostInit+0xb0>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a21      	ldr	r2, [pc, #132]	; (8002a08 <HAL_TIM_MspPostInit+0xb0>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <HAL_TIM_MspPostInit+0xb0>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002996:	2303      	movs	r3, #3
 8002998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a2:	2300      	movs	r3, #0
 80029a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029a6:	2301      	movs	r3, #1
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	4619      	mov	r1, r3
 80029b0:	4816      	ldr	r0, [pc, #88]	; (8002a0c <HAL_TIM_MspPostInit+0xb4>)
 80029b2:	f000 fb39 	bl	8003028 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80029b6:	e022      	b.n	80029fe <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM3)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a14      	ldr	r2, [pc, #80]	; (8002a10 <HAL_TIM_MspPostInit+0xb8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d11d      	bne.n	80029fe <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <HAL_TIM_MspPostInit+0xb0>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a0f      	ldr	r2, [pc, #60]	; (8002a08 <HAL_TIM_MspPostInit+0xb0>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <HAL_TIM_MspPostInit+0xb0>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029de:	2340      	movs	r3, #64	; 0x40
 80029e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	2302      	movs	r3, #2
 80029e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ea:	2300      	movs	r3, #0
 80029ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029ee:	2302      	movs	r3, #2
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f2:	f107 0314 	add.w	r3, r7, #20
 80029f6:	4619      	mov	r1, r3
 80029f8:	4804      	ldr	r0, [pc, #16]	; (8002a0c <HAL_TIM_MspPostInit+0xb4>)
 80029fa:	f000 fb15 	bl	8003028 <HAL_GPIO_Init>
}
 80029fe:	bf00      	nop
 8002a00:	3728      	adds	r7, #40	; 0x28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40020000 	.word	0x40020000
 8002a10:	40000400 	.word	0x40000400

08002a14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a1a:	4a12      	ldr	r2, [pc, #72]	; (8002a64 <MX_USART1_UART_Init+0x50>)
 8002a1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a26:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a38:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a4a:	4805      	ldr	r0, [pc, #20]	; (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a4c:	f005 fa2e 	bl	8007eac <HAL_UART_Init>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a56:	f7ff fbad 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000b1c 	.word	0x20000b1c
 8002a64:	40011000 	.word	0x40011000

08002a68 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <MX_USART2_UART_Init+0x4c>)
 8002a6e:	4a12      	ldr	r2, [pc, #72]	; (8002ab8 <MX_USART2_UART_Init+0x50>)
 8002a70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <MX_USART2_UART_Init+0x4c>)
 8002a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <MX_USART2_UART_Init+0x4c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <MX_USART2_UART_Init+0x4c>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <MX_USART2_UART_Init+0x4c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a8c:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <MX_USART2_UART_Init+0x4c>)
 8002a8e:	220c      	movs	r2, #12
 8002a90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a92:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <MX_USART2_UART_Init+0x4c>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <MX_USART2_UART_Init+0x4c>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a9e:	4805      	ldr	r0, [pc, #20]	; (8002ab4 <MX_USART2_UART_Init+0x4c>)
 8002aa0:	f005 fa04 	bl	8007eac <HAL_UART_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002aaa:	f7ff fb83 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000b60 	.word	0x20000b60
 8002ab8:	40004400 	.word	0x40004400

08002abc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08c      	sub	sp, #48	; 0x30
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 031c 	add.w	r3, r7, #28
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a45      	ldr	r2, [pc, #276]	; (8002bf0 <HAL_UART_MspInit+0x134>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d153      	bne.n	8002b86 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	4b44      	ldr	r3, [pc, #272]	; (8002bf4 <HAL_UART_MspInit+0x138>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	4a43      	ldr	r2, [pc, #268]	; (8002bf4 <HAL_UART_MspInit+0x138>)
 8002ae8:	f043 0310 	orr.w	r3, r3, #16
 8002aec:	6453      	str	r3, [r2, #68]	; 0x44
 8002aee:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <HAL_UART_MspInit+0x138>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	4b3d      	ldr	r3, [pc, #244]	; (8002bf4 <HAL_UART_MspInit+0x138>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	4a3c      	ldr	r2, [pc, #240]	; (8002bf4 <HAL_UART_MspInit+0x138>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0a:	4b3a      	ldr	r3, [pc, #232]	; (8002bf4 <HAL_UART_MspInit+0x138>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <HAL_UART_MspInit+0x138>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	4a35      	ldr	r2, [pc, #212]	; (8002bf4 <HAL_UART_MspInit+0x138>)
 8002b20:	f043 0302 	orr.w	r3, r3, #2
 8002b24:	6313      	str	r3, [r2, #48]	; 0x30
 8002b26:	4b33      	ldr	r3, [pc, #204]	; (8002bf4 <HAL_UART_MspInit+0x138>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b40:	2303      	movs	r3, #3
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b44:	2307      	movs	r3, #7
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b48:	f107 031c 	add.w	r3, r7, #28
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	482a      	ldr	r0, [pc, #168]	; (8002bf8 <HAL_UART_MspInit+0x13c>)
 8002b50:	f000 fa6a 	bl	8003028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b60:	2303      	movs	r3, #3
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b64:	2307      	movs	r3, #7
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b68:	f107 031c 	add.w	r3, r7, #28
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4823      	ldr	r0, [pc, #140]	; (8002bfc <HAL_UART_MspInit+0x140>)
 8002b70:	f000 fa5a 	bl	8003028 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002b74:	2200      	movs	r2, #0
 8002b76:	2105      	movs	r1, #5
 8002b78:	2025      	movs	r0, #37	; 0x25
 8002b7a:	f000 f98b 	bl	8002e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b7e:	2025      	movs	r0, #37	; 0x25
 8002b80:	f000 f9a4 	bl	8002ecc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b84:	e030      	b.n	8002be8 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART2)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1d      	ldr	r2, [pc, #116]	; (8002c00 <HAL_UART_MspInit+0x144>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d12b      	bne.n	8002be8 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <HAL_UART_MspInit+0x138>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	4a16      	ldr	r2, [pc, #88]	; (8002bf4 <HAL_UART_MspInit+0x138>)
 8002b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba0:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <HAL_UART_MspInit+0x138>)
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bac:	2300      	movs	r3, #0
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <HAL_UART_MspInit+0x138>)
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	4a0f      	ldr	r2, [pc, #60]	; (8002bf4 <HAL_UART_MspInit+0x138>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6313      	str	r3, [r2, #48]	; 0x30
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <HAL_UART_MspInit+0x138>)
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002bc8:	230c      	movs	r3, #12
 8002bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bd8:	2307      	movs	r3, #7
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bdc:	f107 031c 	add.w	r3, r7, #28
 8002be0:	4619      	mov	r1, r3
 8002be2:	4805      	ldr	r0, [pc, #20]	; (8002bf8 <HAL_UART_MspInit+0x13c>)
 8002be4:	f000 fa20 	bl	8003028 <HAL_GPIO_Init>
}
 8002be8:	bf00      	nop
 8002bea:	3730      	adds	r7, #48	; 0x30
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40011000 	.word	0x40011000
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40020000 	.word	0x40020000
 8002bfc:	40020400 	.word	0x40020400
 8002c00:	40004400 	.word	0x40004400

08002c04 <Reset_Handler>:
 8002c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c3c <LoopFillZerobss+0x12>
 8002c08:	480d      	ldr	r0, [pc, #52]	; (8002c40 <LoopFillZerobss+0x16>)
 8002c0a:	490e      	ldr	r1, [pc, #56]	; (8002c44 <LoopFillZerobss+0x1a>)
 8002c0c:	4a0e      	ldr	r2, [pc, #56]	; (8002c48 <LoopFillZerobss+0x1e>)
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e002      	b.n	8002c18 <LoopCopyDataInit>

08002c12 <CopyDataInit>:
 8002c12:	58d4      	ldr	r4, [r2, r3]
 8002c14:	50c4      	str	r4, [r0, r3]
 8002c16:	3304      	adds	r3, #4

08002c18 <LoopCopyDataInit>:
 8002c18:	18c4      	adds	r4, r0, r3
 8002c1a:	428c      	cmp	r4, r1
 8002c1c:	d3f9      	bcc.n	8002c12 <CopyDataInit>
 8002c1e:	4a0b      	ldr	r2, [pc, #44]	; (8002c4c <LoopFillZerobss+0x22>)
 8002c20:	4c0b      	ldr	r4, [pc, #44]	; (8002c50 <LoopFillZerobss+0x26>)
 8002c22:	2300      	movs	r3, #0
 8002c24:	e001      	b.n	8002c2a <LoopFillZerobss>

08002c26 <FillZerobss>:
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	3204      	adds	r2, #4

08002c2a <LoopFillZerobss>:
 8002c2a:	42a2      	cmp	r2, r4
 8002c2c:	d3fb      	bcc.n	8002c26 <FillZerobss>
 8002c2e:	f7ff fd8d 	bl	800274c <SystemInit>
 8002c32:	f007 fe53 	bl	800a8dc <__libc_init_array>
 8002c36:	f7ff f913 	bl	8001e60 <main>
 8002c3a:	4770      	bx	lr
 8002c3c:	20020000 	.word	0x20020000
 8002c40:	20000000 	.word	0x20000000
 8002c44:	200001e4 	.word	0x200001e4
 8002c48:	0800f838 	.word	0x0800f838
 8002c4c:	200001e8 	.word	0x200001e8
 8002c50:	2000490c 	.word	0x2000490c

08002c54 <ADC_IRQHandler>:
 8002c54:	e7fe      	b.n	8002c54 <ADC_IRQHandler>
	...

08002c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <HAL_Init+0x40>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0d      	ldr	r2, [pc, #52]	; (8002c98 <HAL_Init+0x40>)
 8002c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_Init+0x40>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <HAL_Init+0x40>)
 8002c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c74:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <HAL_Init+0x40>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a07      	ldr	r2, [pc, #28]	; (8002c98 <HAL_Init+0x40>)
 8002c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c80:	2003      	movs	r0, #3
 8002c82:	f000 f8fc 	bl	8002e7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c86:	200f      	movs	r0, #15
 8002c88:	f7ff fbc2 	bl	8002410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c8c:	f7ff fb94 	bl	80023b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023c00 	.word	0x40023c00

08002c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_IncTick+0x20>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_IncTick+0x24>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4413      	add	r3, r2
 8002cac:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <HAL_IncTick+0x24>)
 8002cae:	6013      	str	r3, [r2, #0]
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000008 	.word	0x20000008
 8002cc0:	20000ba4 	.word	0x20000ba4

08002cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <HAL_GetTick+0x14>)
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000ba4 	.word	0x20000ba4

08002cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ce4:	f7ff ffee 	bl	8002cc4 <HAL_GetTick>
 8002ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cf4:	d005      	beq.n	8002d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_Delay+0x44>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4413      	add	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d02:	bf00      	nop
 8002d04:	f7ff ffde 	bl	8002cc4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d8f7      	bhi.n	8002d04 <HAL_Delay+0x28>
  {
  }
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000008 	.word	0x20000008

08002d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d40:	4013      	ands	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d56:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	60d3      	str	r3, [r2, #12]
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <__NVIC_GetPriorityGrouping+0x18>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	0a1b      	lsrs	r3, r3, #8
 8002d76:	f003 0307 	and.w	r3, r3, #7
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	db0b      	blt.n	8002db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	f003 021f 	and.w	r2, r3, #31
 8002da0:	4907      	ldr	r1, [pc, #28]	; (8002dc0 <__NVIC_EnableIRQ+0x38>)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	2001      	movs	r0, #1
 8002daa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	e000e100 	.word	0xe000e100

08002dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	6039      	str	r1, [r7, #0]
 8002dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	db0a      	blt.n	8002dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	490c      	ldr	r1, [pc, #48]	; (8002e10 <__NVIC_SetPriority+0x4c>)
 8002dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de2:	0112      	lsls	r2, r2, #4
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	440b      	add	r3, r1
 8002de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dec:	e00a      	b.n	8002e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	4908      	ldr	r1, [pc, #32]	; (8002e14 <__NVIC_SetPriority+0x50>)
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	3b04      	subs	r3, #4
 8002dfc:	0112      	lsls	r2, r2, #4
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	440b      	add	r3, r1
 8002e02:	761a      	strb	r2, [r3, #24]
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000e100 	.word	0xe000e100
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b089      	sub	sp, #36	; 0x24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f1c3 0307 	rsb	r3, r3, #7
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	bf28      	it	cs
 8002e36:	2304      	movcs	r3, #4
 8002e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	2b06      	cmp	r3, #6
 8002e40:	d902      	bls.n	8002e48 <NVIC_EncodePriority+0x30>
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3b03      	subs	r3, #3
 8002e46:	e000      	b.n	8002e4a <NVIC_EncodePriority+0x32>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43da      	mvns	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	43d9      	mvns	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e70:	4313      	orrs	r3, r2
         );
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3724      	adds	r7, #36	; 0x24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff ff4c 	bl	8002d24 <__NVIC_SetPriorityGrouping>
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea6:	f7ff ff61 	bl	8002d6c <__NVIC_GetPriorityGrouping>
 8002eaa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	6978      	ldr	r0, [r7, #20]
 8002eb2:	f7ff ffb1 	bl	8002e18 <NVIC_EncodePriority>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff ff80 	bl	8002dc4 <__NVIC_SetPriority>
}
 8002ec4:	bf00      	nop
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff ff54 	bl	8002d88 <__NVIC_EnableIRQ>
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ef6:	f7ff fee5 	bl	8002cc4 <HAL_GetTick>
 8002efa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d008      	beq.n	8002f1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2280      	movs	r2, #128	; 0x80
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e052      	b.n	8002fc0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0216 	bic.w	r2, r2, #22
 8002f28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695a      	ldr	r2, [r3, #20]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d103      	bne.n	8002f4a <HAL_DMA_Abort+0x62>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d007      	beq.n	8002f5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0208 	bic.w	r2, r2, #8
 8002f58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0201 	bic.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f6a:	e013      	b.n	8002f94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f6c:	f7ff feaa 	bl	8002cc4 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	d90c      	bls.n	8002f94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2203      	movs	r2, #3
 8002f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e015      	b.n	8002fc0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e4      	bne.n	8002f6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa6:	223f      	movs	r2, #63	; 0x3f
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d004      	beq.n	8002fe6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2280      	movs	r2, #128	; 0x80
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e00c      	b.n	8003000 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2205      	movs	r2, #5
 8002fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0201 	bic.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800301a:	b2db      	uxtb	r3, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003028:	b480      	push	{r7}
 800302a:	b089      	sub	sp, #36	; 0x24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800303a:	2300      	movs	r3, #0
 800303c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
 8003042:	e159      	b.n	80032f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003044:	2201      	movs	r2, #1
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	429a      	cmp	r2, r3
 800305e:	f040 8148 	bne.w	80032f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b01      	cmp	r3, #1
 800306c:	d005      	beq.n	800307a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003076:	2b02      	cmp	r3, #2
 8003078:	d130      	bne.n	80030dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	2203      	movs	r2, #3
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4013      	ands	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b0:	2201      	movs	r2, #1
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 0201 	and.w	r2, r3, #1
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d017      	beq.n	8003118 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	2203      	movs	r2, #3
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d123      	bne.n	800316c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	08da      	lsrs	r2, r3, #3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3208      	adds	r2, #8
 800312c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003130:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	220f      	movs	r2, #15
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	08da      	lsrs	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3208      	adds	r2, #8
 8003166:	69b9      	ldr	r1, [r7, #24]
 8003168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	2203      	movs	r2, #3
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 0203 	and.w	r2, r3, #3
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80a2 	beq.w	80032f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	4b57      	ldr	r3, [pc, #348]	; (8003310 <HAL_GPIO_Init+0x2e8>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	4a56      	ldr	r2, [pc, #344]	; (8003310 <HAL_GPIO_Init+0x2e8>)
 80031b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031bc:	6453      	str	r3, [r2, #68]	; 0x44
 80031be:	4b54      	ldr	r3, [pc, #336]	; (8003310 <HAL_GPIO_Init+0x2e8>)
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ca:	4a52      	ldr	r2, [pc, #328]	; (8003314 <HAL_GPIO_Init+0x2ec>)
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	089b      	lsrs	r3, r3, #2
 80031d0:	3302      	adds	r3, #2
 80031d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	220f      	movs	r2, #15
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43db      	mvns	r3, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4013      	ands	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a49      	ldr	r2, [pc, #292]	; (8003318 <HAL_GPIO_Init+0x2f0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d019      	beq.n	800322a <HAL_GPIO_Init+0x202>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a48      	ldr	r2, [pc, #288]	; (800331c <HAL_GPIO_Init+0x2f4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <HAL_GPIO_Init+0x1fe>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a47      	ldr	r2, [pc, #284]	; (8003320 <HAL_GPIO_Init+0x2f8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00d      	beq.n	8003222 <HAL_GPIO_Init+0x1fa>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a46      	ldr	r2, [pc, #280]	; (8003324 <HAL_GPIO_Init+0x2fc>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d007      	beq.n	800321e <HAL_GPIO_Init+0x1f6>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a45      	ldr	r2, [pc, #276]	; (8003328 <HAL_GPIO_Init+0x300>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d101      	bne.n	800321a <HAL_GPIO_Init+0x1f2>
 8003216:	2304      	movs	r3, #4
 8003218:	e008      	b.n	800322c <HAL_GPIO_Init+0x204>
 800321a:	2307      	movs	r3, #7
 800321c:	e006      	b.n	800322c <HAL_GPIO_Init+0x204>
 800321e:	2303      	movs	r3, #3
 8003220:	e004      	b.n	800322c <HAL_GPIO_Init+0x204>
 8003222:	2302      	movs	r3, #2
 8003224:	e002      	b.n	800322c <HAL_GPIO_Init+0x204>
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <HAL_GPIO_Init+0x204>
 800322a:	2300      	movs	r3, #0
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	f002 0203 	and.w	r2, r2, #3
 8003232:	0092      	lsls	r2, r2, #2
 8003234:	4093      	lsls	r3, r2
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800323c:	4935      	ldr	r1, [pc, #212]	; (8003314 <HAL_GPIO_Init+0x2ec>)
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	089b      	lsrs	r3, r3, #2
 8003242:	3302      	adds	r3, #2
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800324a:	4b38      	ldr	r3, [pc, #224]	; (800332c <HAL_GPIO_Init+0x304>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	43db      	mvns	r3, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4013      	ands	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800326e:	4a2f      	ldr	r2, [pc, #188]	; (800332c <HAL_GPIO_Init+0x304>)
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003274:	4b2d      	ldr	r3, [pc, #180]	; (800332c <HAL_GPIO_Init+0x304>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	43db      	mvns	r3, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4013      	ands	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003298:	4a24      	ldr	r2, [pc, #144]	; (800332c <HAL_GPIO_Init+0x304>)
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800329e:	4b23      	ldr	r3, [pc, #140]	; (800332c <HAL_GPIO_Init+0x304>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032c2:	4a1a      	ldr	r2, [pc, #104]	; (800332c <HAL_GPIO_Init+0x304>)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032c8:	4b18      	ldr	r3, [pc, #96]	; (800332c <HAL_GPIO_Init+0x304>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032ec:	4a0f      	ldr	r2, [pc, #60]	; (800332c <HAL_GPIO_Init+0x304>)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	3301      	adds	r3, #1
 80032f6:	61fb      	str	r3, [r7, #28]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	2b0f      	cmp	r3, #15
 80032fc:	f67f aea2 	bls.w	8003044 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	3724      	adds	r7, #36	; 0x24
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40023800 	.word	0x40023800
 8003314:	40013800 	.word	0x40013800
 8003318:	40020000 	.word	0x40020000
 800331c:	40020400 	.word	0x40020400
 8003320:	40020800 	.word	0x40020800
 8003324:	40020c00 	.word	0x40020c00
 8003328:	40021000 	.word	0x40021000
 800332c:	40013c00 	.word	0x40013c00

08003330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	887b      	ldrh	r3, [r7, #2]
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003348:	2301      	movs	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
 800334c:	e001      	b.n	8003352 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800334e:	2300      	movs	r3, #0
 8003350:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003352:	7bfb      	ldrb	r3, [r7, #15]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	807b      	strh	r3, [r7, #2]
 800336c:	4613      	mov	r3, r2
 800336e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003370:	787b      	ldrb	r3, [r7, #1]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003376:	887a      	ldrh	r2, [r7, #2]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800337c:	e003      	b.n	8003386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800337e:	887b      	ldrh	r3, [r7, #2]
 8003380:	041a      	lsls	r2, r3, #16
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	619a      	str	r2, [r3, #24]
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
	...

08003394 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800339e:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d006      	beq.n	80033b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033aa:	4a05      	ldr	r2, [pc, #20]	; (80033c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033b0:	88fb      	ldrh	r3, [r7, #6]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 f806 	bl	80033c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80033b8:	bf00      	nop
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40013c00 	.word	0x40013c00

080033c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e12b      	b.n	8003646 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d106      	bne.n	8003408 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7fe fcc2 	bl	8001d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2224      	movs	r2, #36	; 0x24
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0201 	bic.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800342e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800343e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003440:	f003 fe78 	bl	8007134 <HAL_RCC_GetPCLK1Freq>
 8003444:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4a81      	ldr	r2, [pc, #516]	; (8003650 <HAL_I2C_Init+0x274>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d807      	bhi.n	8003460 <HAL_I2C_Init+0x84>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4a80      	ldr	r2, [pc, #512]	; (8003654 <HAL_I2C_Init+0x278>)
 8003454:	4293      	cmp	r3, r2
 8003456:	bf94      	ite	ls
 8003458:	2301      	movls	r3, #1
 800345a:	2300      	movhi	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e006      	b.n	800346e <HAL_I2C_Init+0x92>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4a7d      	ldr	r2, [pc, #500]	; (8003658 <HAL_I2C_Init+0x27c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	bf94      	ite	ls
 8003468:	2301      	movls	r3, #1
 800346a:	2300      	movhi	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e0e7      	b.n	8003646 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4a78      	ldr	r2, [pc, #480]	; (800365c <HAL_I2C_Init+0x280>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	0c9b      	lsrs	r3, r3, #18
 8003480:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	4a6a      	ldr	r2, [pc, #424]	; (8003650 <HAL_I2C_Init+0x274>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d802      	bhi.n	80034b0 <HAL_I2C_Init+0xd4>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	3301      	adds	r3, #1
 80034ae:	e009      	b.n	80034c4 <HAL_I2C_Init+0xe8>
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	4a69      	ldr	r2, [pc, #420]	; (8003660 <HAL_I2C_Init+0x284>)
 80034bc:	fba2 2303 	umull	r2, r3, r2, r3
 80034c0:	099b      	lsrs	r3, r3, #6
 80034c2:	3301      	adds	r3, #1
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	430b      	orrs	r3, r1
 80034ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	495c      	ldr	r1, [pc, #368]	; (8003650 <HAL_I2C_Init+0x274>)
 80034e0:	428b      	cmp	r3, r1
 80034e2:	d819      	bhi.n	8003518 <HAL_I2C_Init+0x13c>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1e59      	subs	r1, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80034f2:	1c59      	adds	r1, r3, #1
 80034f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034f8:	400b      	ands	r3, r1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_I2C_Init+0x138>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1e59      	subs	r1, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	fbb1 f3f3 	udiv	r3, r1, r3
 800350c:	3301      	adds	r3, #1
 800350e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003512:	e051      	b.n	80035b8 <HAL_I2C_Init+0x1dc>
 8003514:	2304      	movs	r3, #4
 8003516:	e04f      	b.n	80035b8 <HAL_I2C_Init+0x1dc>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d111      	bne.n	8003544 <HAL_I2C_Init+0x168>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1e58      	subs	r0, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6859      	ldr	r1, [r3, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	440b      	add	r3, r1
 800352e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003532:	3301      	adds	r3, #1
 8003534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003538:	2b00      	cmp	r3, #0
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	e012      	b.n	800356a <HAL_I2C_Init+0x18e>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	1e58      	subs	r0, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6859      	ldr	r1, [r3, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	0099      	lsls	r1, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	fbb0 f3f3 	udiv	r3, r0, r3
 800355a:	3301      	adds	r3, #1
 800355c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003560:	2b00      	cmp	r3, #0
 8003562:	bf0c      	ite	eq
 8003564:	2301      	moveq	r3, #1
 8003566:	2300      	movne	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_I2C_Init+0x196>
 800356e:	2301      	movs	r3, #1
 8003570:	e022      	b.n	80035b8 <HAL_I2C_Init+0x1dc>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10e      	bne.n	8003598 <HAL_I2C_Init+0x1bc>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1e58      	subs	r0, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6859      	ldr	r1, [r3, #4]
 8003582:	460b      	mov	r3, r1
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	440b      	add	r3, r1
 8003588:	fbb0 f3f3 	udiv	r3, r0, r3
 800358c:	3301      	adds	r3, #1
 800358e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003596:	e00f      	b.n	80035b8 <HAL_I2C_Init+0x1dc>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	1e58      	subs	r0, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6859      	ldr	r1, [r3, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	0099      	lsls	r1, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ae:	3301      	adds	r3, #1
 80035b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	6809      	ldr	r1, [r1, #0]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69da      	ldr	r2, [r3, #28]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6911      	ldr	r1, [r2, #16]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68d2      	ldr	r2, [r2, #12]
 80035f2:	4311      	orrs	r1, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	430b      	orrs	r3, r1
 80035fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	000186a0 	.word	0x000186a0
 8003654:	001e847f 	.word	0x001e847f
 8003658:	003d08ff 	.word	0x003d08ff
 800365c:	431bde83 	.word	0x431bde83
 8003660:	10624dd3 	.word	0x10624dd3

08003664 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	607a      	str	r2, [r7, #4]
 800366e:	461a      	mov	r2, r3
 8003670:	460b      	mov	r3, r1
 8003672:	817b      	strh	r3, [r7, #10]
 8003674:	4613      	mov	r3, r2
 8003676:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003678:	f7ff fb24 	bl	8002cc4 <HAL_GetTick>
 800367c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b20      	cmp	r3, #32
 8003688:	f040 80e0 	bne.w	800384c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	2319      	movs	r3, #25
 8003692:	2201      	movs	r2, #1
 8003694:	4970      	ldr	r1, [pc, #448]	; (8003858 <HAL_I2C_Master_Transmit+0x1f4>)
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f002 feb2 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036a2:	2302      	movs	r3, #2
 80036a4:	e0d3      	b.n	800384e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_I2C_Master_Transmit+0x50>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e0cc      	b.n	800384e <HAL_I2C_Master_Transmit+0x1ea>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d007      	beq.n	80036da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0201 	orr.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2221      	movs	r2, #33	; 0x21
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2210      	movs	r2, #16
 80036f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	893a      	ldrh	r2, [r7, #8]
 800370a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4a50      	ldr	r2, [pc, #320]	; (800385c <HAL_I2C_Master_Transmit+0x1f8>)
 800371a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800371c:	8979      	ldrh	r1, [r7, #10]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	6a3a      	ldr	r2, [r7, #32]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f002 faf6 	bl	8005d14 <I2C_MasterRequestWrite>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e08d      	b.n	800384e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003732:	2300      	movs	r3, #0
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003748:	e066      	b.n	8003818 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	6a39      	ldr	r1, [r7, #32]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f002 ff2c 	bl	80065ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00d      	beq.n	8003776 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	2b04      	cmp	r3, #4
 8003760:	d107      	bne.n	8003772 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003770:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e06b      	b.n	800384e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	781a      	ldrb	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	3b01      	subs	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d11b      	bne.n	80037ec <HAL_I2C_Master_Transmit+0x188>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d017      	beq.n	80037ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	781a      	ldrb	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	6a39      	ldr	r1, [r7, #32]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f002 ff1c 	bl	800662e <I2C_WaitOnBTFFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00d      	beq.n	8003818 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	2b04      	cmp	r3, #4
 8003802:	d107      	bne.n	8003814 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003812:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e01a      	b.n	800384e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381c:	2b00      	cmp	r3, #0
 800381e:	d194      	bne.n	800374a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800382e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	e000      	b.n	800384e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800384c:	2302      	movs	r3, #2
  }
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	00100002 	.word	0x00100002
 800385c:	ffff0000 	.word	0xffff0000

08003860 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08c      	sub	sp, #48	; 0x30
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	461a      	mov	r2, r3
 800386c:	460b      	mov	r3, r1
 800386e:	817b      	strh	r3, [r7, #10]
 8003870:	4613      	mov	r3, r2
 8003872:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003874:	f7ff fa26 	bl	8002cc4 <HAL_GetTick>
 8003878:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b20      	cmp	r3, #32
 8003884:	f040 820b 	bne.w	8003c9e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	2319      	movs	r3, #25
 800388e:	2201      	movs	r2, #1
 8003890:	497c      	ldr	r1, [pc, #496]	; (8003a84 <HAL_I2C_Master_Receive+0x224>)
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f002 fdb4 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800389e:	2302      	movs	r3, #2
 80038a0:	e1fe      	b.n	8003ca0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_I2C_Master_Receive+0x50>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e1f7      	b.n	8003ca0 <HAL_I2C_Master_Receive+0x440>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d007      	beq.n	80038d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0201 	orr.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2222      	movs	r2, #34	; 0x22
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2210      	movs	r2, #16
 80038f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	893a      	ldrh	r2, [r7, #8]
 8003906:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4a5c      	ldr	r2, [pc, #368]	; (8003a88 <HAL_I2C_Master_Receive+0x228>)
 8003916:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003918:	8979      	ldrh	r1, [r7, #10]
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f002 fa7a 	bl	8005e18 <I2C_MasterRequestRead>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e1b8      	b.n	8003ca0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	2b00      	cmp	r3, #0
 8003934:	d113      	bne.n	800395e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003936:	2300      	movs	r3, #0
 8003938:	623b      	str	r3, [r7, #32]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	623b      	str	r3, [r7, #32]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	623b      	str	r3, [r7, #32]
 800394a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	e18c      	b.n	8003c78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003962:	2b01      	cmp	r3, #1
 8003964:	d11b      	bne.n	800399e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003974:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	e16c      	b.n	8003c78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d11b      	bne.n	80039de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c6:	2300      	movs	r3, #0
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	e14c      	b.n	8003c78 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ee:	2300      	movs	r3, #0
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a04:	e138      	b.n	8003c78 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	f200 80f1 	bhi.w	8003bf2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d123      	bne.n	8003a60 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f002 fe79 	bl	8006714 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e139      	b.n	8003ca0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a5e:	e10b      	b.n	8003c78 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d14e      	bne.n	8003b06 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6e:	2200      	movs	r2, #0
 8003a70:	4906      	ldr	r1, [pc, #24]	; (8003a8c <HAL_I2C_Master_Receive+0x22c>)
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f002 fcc4 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d008      	beq.n	8003a90 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e10e      	b.n	8003ca0 <HAL_I2C_Master_Receive+0x440>
 8003a82:	bf00      	nop
 8003a84:	00100002 	.word	0x00100002
 8003a88:	ffff0000 	.word	0xffff0000
 8003a8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b04:	e0b8      	b.n	8003c78 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	4966      	ldr	r1, [pc, #408]	; (8003ca8 <HAL_I2C_Master_Receive+0x448>)
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f002 fc75 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0bf      	b.n	8003ca0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	2200      	movs	r2, #0
 8003b6a:	494f      	ldr	r1, [pc, #316]	; (8003ca8 <HAL_I2C_Master_Receive+0x448>)
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f002 fc47 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e091      	b.n	8003ca0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bf0:	e042      	b.n	8003c78 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f002 fd8c 	bl	8006714 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e04c      	b.n	8003ca0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d118      	bne.n	8003c78 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f47f aec2 	bne.w	8003a06 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e000      	b.n	8003ca0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003c9e:	2302      	movs	r3, #2
  }
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3728      	adds	r7, #40	; 0x28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	00010004 	.word	0x00010004

08003cac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af02      	add	r7, sp, #8
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	4608      	mov	r0, r1
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	461a      	mov	r2, r3
 8003cba:	4603      	mov	r3, r0
 8003cbc:	817b      	strh	r3, [r7, #10]
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	813b      	strh	r3, [r7, #8]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cc6:	f7fe fffd 	bl	8002cc4 <HAL_GetTick>
 8003cca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	f040 80d9 	bne.w	8003e8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	2319      	movs	r3, #25
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	496d      	ldr	r1, [pc, #436]	; (8003e98 <HAL_I2C_Mem_Write+0x1ec>)
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f002 fb8b 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e0cc      	b.n	8003e8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_I2C_Mem_Write+0x56>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e0c5      	b.n	8003e8e <HAL_I2C_Mem_Write+0x1e2>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d007      	beq.n	8003d28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2221      	movs	r2, #33	; 0x21
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2240      	movs	r2, #64	; 0x40
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a3a      	ldr	r2, [r7, #32]
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4a4d      	ldr	r2, [pc, #308]	; (8003e9c <HAL_I2C_Mem_Write+0x1f0>)
 8003d68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d6a:	88f8      	ldrh	r0, [r7, #6]
 8003d6c:	893a      	ldrh	r2, [r7, #8]
 8003d6e:	8979      	ldrh	r1, [r7, #10]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	9301      	str	r3, [sp, #4]
 8003d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	4603      	mov	r3, r0
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f002 f91a 	bl	8005fb4 <I2C_RequestMemoryWrite>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d052      	beq.n	8003e2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e081      	b.n	8003e8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f002 fc0c 	bl	80065ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00d      	beq.n	8003db6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d107      	bne.n	8003db2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e06b      	b.n	8003e8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	781a      	ldrb	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d11b      	bne.n	8003e2c <HAL_I2C_Mem_Write+0x180>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d017      	beq.n	8003e2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	781a      	ldrb	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1aa      	bne.n	8003d8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f002 fbf8 	bl	800662e <I2C_WaitOnBTFFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00d      	beq.n	8003e60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d107      	bne.n	8003e5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e016      	b.n	8003e8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e000      	b.n	8003e8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e8c:	2302      	movs	r3, #2
  }
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	00100002 	.word	0x00100002
 8003e9c:	ffff0000 	.word	0xffff0000

08003ea0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08c      	sub	sp, #48	; 0x30
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	4608      	mov	r0, r1
 8003eaa:	4611      	mov	r1, r2
 8003eac:	461a      	mov	r2, r3
 8003eae:	4603      	mov	r3, r0
 8003eb0:	817b      	strh	r3, [r7, #10]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	813b      	strh	r3, [r7, #8]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eba:	f7fe ff03 	bl	8002cc4 <HAL_GetTick>
 8003ebe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	f040 8208 	bne.w	80042de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	2319      	movs	r3, #25
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	497b      	ldr	r1, [pc, #492]	; (80040c4 <HAL_I2C_Mem_Read+0x224>)
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f002 fa91 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e1fb      	b.n	80042e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_I2C_Mem_Read+0x56>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e1f4      	b.n	80042e0 <HAL_I2C_Mem_Read+0x440>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d007      	beq.n	8003f1c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2222      	movs	r2, #34	; 0x22
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2240      	movs	r2, #64	; 0x40
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4a5b      	ldr	r2, [pc, #364]	; (80040c8 <HAL_I2C_Mem_Read+0x228>)
 8003f5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f5e:	88f8      	ldrh	r0, [r7, #6]
 8003f60:	893a      	ldrh	r2, [r7, #8]
 8003f62:	8979      	ldrh	r1, [r7, #10]
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f002 f8b6 	bl	80060e0 <I2C_RequestMemoryRead>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e1b0      	b.n	80042e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d113      	bne.n	8003fae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f86:	2300      	movs	r3, #0
 8003f88:	623b      	str	r3, [r7, #32]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	623b      	str	r3, [r7, #32]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	623b      	str	r3, [r7, #32]
 8003f9a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	e184      	b.n	80042b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d11b      	bne.n	8003fee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	61fb      	str	r3, [r7, #28]
 8003fda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	e164      	b.n	80042b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d11b      	bne.n	800402e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004004:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004014:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004016:	2300      	movs	r3, #0
 8004018:	61bb      	str	r3, [r7, #24]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	e144      	b.n	80042b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004044:	e138      	b.n	80042b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404a:	2b03      	cmp	r3, #3
 800404c:	f200 80f1 	bhi.w	8004232 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004054:	2b01      	cmp	r3, #1
 8004056:	d123      	bne.n	80040a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f002 fb59 	bl	8006714 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e139      	b.n	80042e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691a      	ldr	r2, [r3, #16]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800409e:	e10b      	b.n	80042b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d14e      	bne.n	8004146 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ae:	2200      	movs	r2, #0
 80040b0:	4906      	ldr	r1, [pc, #24]	; (80040cc <HAL_I2C_Mem_Read+0x22c>)
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f002 f9a4 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e10e      	b.n	80042e0 <HAL_I2C_Mem_Read+0x440>
 80040c2:	bf00      	nop
 80040c4:	00100002 	.word	0x00100002
 80040c8:	ffff0000 	.word	0xffff0000
 80040cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691a      	ldr	r2, [r3, #16]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004144:	e0b8      	b.n	80042b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	2200      	movs	r2, #0
 800414e:	4966      	ldr	r1, [pc, #408]	; (80042e8 <HAL_I2C_Mem_Read+0x448>)
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f002 f955 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0bf      	b.n	80042e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800416e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	2200      	movs	r2, #0
 80041aa:	494f      	ldr	r1, [pc, #316]	; (80042e8 <HAL_I2C_Mem_Read+0x448>)
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f002 f927 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e091      	b.n	80042e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004230:	e042      	b.n	80042b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004234:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f002 fa6c 	bl	8006714 <I2C_WaitOnRXNEFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e04c      	b.n	80042e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004262:	3b01      	subs	r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b04      	cmp	r3, #4
 8004284:	d118      	bne.n	80042b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f47f aec2 	bne.w	8004046 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	e000      	b.n	80042e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80042de:	2302      	movs	r3, #2
  }
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3728      	adds	r7, #40	; 0x28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	00010004 	.word	0x00010004

080042ec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08a      	sub	sp, #40	; 0x28
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	607a      	str	r2, [r7, #4]
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	460b      	mov	r3, r1
 80042fa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80042fc:	f7fe fce2 	bl	8002cc4 <HAL_GetTick>
 8004300:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b20      	cmp	r3, #32
 8004310:	f040 8111 	bne.w	8004536 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	2319      	movs	r3, #25
 800431a:	2201      	movs	r2, #1
 800431c:	4988      	ldr	r1, [pc, #544]	; (8004540 <HAL_I2C_IsDeviceReady+0x254>)
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f002 f86e 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800432a:	2302      	movs	r3, #2
 800432c:	e104      	b.n	8004538 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_I2C_IsDeviceReady+0x50>
 8004338:	2302      	movs	r3, #2
 800433a:	e0fd      	b.n	8004538 <HAL_I2C_IsDeviceReady+0x24c>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b01      	cmp	r3, #1
 8004350:	d007      	beq.n	8004362 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0201 	orr.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004370:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2224      	movs	r2, #36	; 0x24
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4a70      	ldr	r2, [pc, #448]	; (8004544 <HAL_I2C_IsDeviceReady+0x258>)
 8004384:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004394:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2200      	movs	r2, #0
 800439e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f002 f82c 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00d      	beq.n	80043ca <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043bc:	d103      	bne.n	80043c6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e0b6      	b.n	8004538 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043ca:	897b      	ldrh	r3, [r7, #10]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	461a      	mov	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043d8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80043da:	f7fe fc73 	bl	8002cc4 <HAL_GetTick>
 80043de:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	bf0c      	ite	eq
 80043ee:	2301      	moveq	r3, #1
 80043f0:	2300      	movne	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004404:	bf0c      	ite	eq
 8004406:	2301      	moveq	r3, #1
 8004408:	2300      	movne	r3, #0
 800440a:	b2db      	uxtb	r3, r3
 800440c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800440e:	e025      	b.n	800445c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004410:	f7fe fc58 	bl	8002cc4 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d302      	bcc.n	8004426 <HAL_I2C_IsDeviceReady+0x13a>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d103      	bne.n	800442e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	22a0      	movs	r2, #160	; 0xa0
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b02      	cmp	r3, #2
 800443a:	bf0c      	ite	eq
 800443c:	2301      	moveq	r3, #1
 800443e:	2300      	movne	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004452:	bf0c      	ite	eq
 8004454:	2301      	moveq	r3, #1
 8004456:	2300      	movne	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2ba0      	cmp	r3, #160	; 0xa0
 8004466:	d005      	beq.n	8004474 <HAL_I2C_IsDeviceReady+0x188>
 8004468:	7dfb      	ldrb	r3, [r7, #23]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <HAL_I2C_IsDeviceReady+0x188>
 800446e:	7dbb      	ldrb	r3, [r7, #22]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0cd      	beq.n	8004410 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b02      	cmp	r3, #2
 8004488:	d129      	bne.n	80044de <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004498:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	2319      	movs	r3, #25
 80044b6:	2201      	movs	r2, #1
 80044b8:	4921      	ldr	r1, [pc, #132]	; (8004540 <HAL_I2C_IsDeviceReady+0x254>)
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f001 ffa0 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e036      	b.n	8004538 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	e02c      	b.n	8004538 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044f6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	2319      	movs	r3, #25
 80044fe:	2201      	movs	r2, #1
 8004500:	490f      	ldr	r1, [pc, #60]	; (8004540 <HAL_I2C_IsDeviceReady+0x254>)
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f001 ff7c 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e012      	b.n	8004538 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	3301      	adds	r3, #1
 8004516:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	429a      	cmp	r2, r3
 800451e:	f4ff af32 	bcc.w	8004386 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004536:	2302      	movs	r3, #2
  }
}
 8004538:	4618      	mov	r0, r3
 800453a:	3720      	adds	r7, #32
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	00100002 	.word	0x00100002
 8004544:	ffff0000 	.word	0xffff0000

08004548 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004568:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004570:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	2b10      	cmp	r3, #16
 8004576:	d003      	beq.n	8004580 <HAL_I2C_EV_IRQHandler+0x38>
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	2b40      	cmp	r3, #64	; 0x40
 800457c:	f040 80c1 	bne.w	8004702 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10d      	bne.n	80045b6 <HAL_I2C_EV_IRQHandler+0x6e>
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80045a0:	d003      	beq.n	80045aa <HAL_I2C_EV_IRQHandler+0x62>
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80045a8:	d101      	bne.n	80045ae <HAL_I2C_EV_IRQHandler+0x66>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <HAL_I2C_EV_IRQHandler+0x68>
 80045ae:	2300      	movs	r3, #0
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	f000 8132 	beq.w	800481a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00c      	beq.n	80045da <HAL_I2C_EV_IRQHandler+0x92>
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	0a5b      	lsrs	r3, r3, #9
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d006      	beq.n	80045da <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f002 f926 	bl	800681e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fd83 	bl	80050de <I2C_Master_SB>
 80045d8:	e092      	b.n	8004700 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	08db      	lsrs	r3, r3, #3
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d009      	beq.n	80045fa <HAL_I2C_EV_IRQHandler+0xb2>
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	0a5b      	lsrs	r3, r3, #9
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 fdf9 	bl	80051ea <I2C_Master_ADD10>
 80045f8:	e082      	b.n	8004700 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	085b      	lsrs	r3, r3, #1
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d009      	beq.n	800461a <HAL_I2C_EV_IRQHandler+0xd2>
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	0a5b      	lsrs	r3, r3, #9
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fe13 	bl	800523e <I2C_Master_ADDR>
 8004618:	e072      	b.n	8004700 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	089b      	lsrs	r3, r3, #2
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d03b      	beq.n	800469e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004634:	f000 80f3 	beq.w	800481e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	09db      	lsrs	r3, r3, #7
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00f      	beq.n	8004664 <HAL_I2C_EV_IRQHandler+0x11c>
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	0a9b      	lsrs	r3, r3, #10
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d009      	beq.n	8004664 <HAL_I2C_EV_IRQHandler+0x11c>
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	089b      	lsrs	r3, r3, #2
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d103      	bne.n	8004664 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f9f3 	bl	8004a48 <I2C_MasterTransmit_TXE>
 8004662:	e04d      	b.n	8004700 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	089b      	lsrs	r3, r3, #2
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 80d6 	beq.w	800481e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	0a5b      	lsrs	r3, r3, #9
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 80cf 	beq.w	800481e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004680:	7bbb      	ldrb	r3, [r7, #14]
 8004682:	2b21      	cmp	r3, #33	; 0x21
 8004684:	d103      	bne.n	800468e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fa7a 	bl	8004b80 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800468c:	e0c7      	b.n	800481e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	2b40      	cmp	r3, #64	; 0x40
 8004692:	f040 80c4 	bne.w	800481e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fae8 	bl	8004c6c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800469c:	e0bf      	b.n	800481e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ac:	f000 80b7 	beq.w	800481e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	099b      	lsrs	r3, r3, #6
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00f      	beq.n	80046dc <HAL_I2C_EV_IRQHandler+0x194>
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	0a9b      	lsrs	r3, r3, #10
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d009      	beq.n	80046dc <HAL_I2C_EV_IRQHandler+0x194>
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	089b      	lsrs	r3, r3, #2
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d103      	bne.n	80046dc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 fb5d 	bl	8004d94 <I2C_MasterReceive_RXNE>
 80046da:	e011      	b.n	8004700 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	089b      	lsrs	r3, r3, #2
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 809a 	beq.w	800481e <HAL_I2C_EV_IRQHandler+0x2d6>
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	0a5b      	lsrs	r3, r3, #9
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 8093 	beq.w	800481e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 fc06 	bl	8004f0a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046fe:	e08e      	b.n	800481e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004700:	e08d      	b.n	800481e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	2b00      	cmp	r3, #0
 8004708:	d004      	beq.n	8004714 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	61fb      	str	r3, [r7, #28]
 8004712:	e007      	b.n	8004724 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	085b      	lsrs	r3, r3, #1
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d012      	beq.n	8004756 <HAL_I2C_EV_IRQHandler+0x20e>
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	0a5b      	lsrs	r3, r3, #9
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00c      	beq.n	8004756 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800474c:	69b9      	ldr	r1, [r7, #24]
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 ffc4 	bl	80056dc <I2C_Slave_ADDR>
 8004754:	e066      	b.n	8004824 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	091b      	lsrs	r3, r3, #4
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <HAL_I2C_EV_IRQHandler+0x22e>
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	0a5b      	lsrs	r3, r3, #9
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fffe 	bl	8005770 <I2C_Slave_STOPF>
 8004774:	e056      	b.n	8004824 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004776:	7bbb      	ldrb	r3, [r7, #14]
 8004778:	2b21      	cmp	r3, #33	; 0x21
 800477a:	d002      	beq.n	8004782 <HAL_I2C_EV_IRQHandler+0x23a>
 800477c:	7bbb      	ldrb	r3, [r7, #14]
 800477e:	2b29      	cmp	r3, #41	; 0x29
 8004780:	d125      	bne.n	80047ce <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	09db      	lsrs	r3, r3, #7
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00f      	beq.n	80047ae <HAL_I2C_EV_IRQHandler+0x266>
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	0a9b      	lsrs	r3, r3, #10
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <HAL_I2C_EV_IRQHandler+0x266>
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	089b      	lsrs	r3, r3, #2
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d103      	bne.n	80047ae <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 feda 	bl	8005560 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047ac:	e039      	b.n	8004822 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	089b      	lsrs	r3, r3, #2
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d033      	beq.n	8004822 <HAL_I2C_EV_IRQHandler+0x2da>
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	0a5b      	lsrs	r3, r3, #9
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d02d      	beq.n	8004822 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 ff07 	bl	80055da <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047cc:	e029      	b.n	8004822 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	099b      	lsrs	r3, r3, #6
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00f      	beq.n	80047fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	0a9b      	lsrs	r3, r3, #10
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d009      	beq.n	80047fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	089b      	lsrs	r3, r3, #2
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d103      	bne.n	80047fa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 ff12 	bl	800561c <I2C_SlaveReceive_RXNE>
 80047f8:	e014      	b.n	8004824 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	089b      	lsrs	r3, r3, #2
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00e      	beq.n	8004824 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	0a5b      	lsrs	r3, r3, #9
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d008      	beq.n	8004824 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 ff40 	bl	8005698 <I2C_SlaveReceive_BTF>
 8004818:	e004      	b.n	8004824 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800481a:	bf00      	nop
 800481c:	e002      	b.n	8004824 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800481e:	bf00      	nop
 8004820:	e000      	b.n	8004824 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004822:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004824:	3720      	adds	r7, #32
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b08a      	sub	sp, #40	; 0x28
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004842:	2300      	movs	r3, #0
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800484c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	0a1b      	lsrs	r3, r3, #8
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00e      	beq.n	8004878 <HAL_I2C_ER_IRQHandler+0x4e>
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	0a1b      	lsrs	r3, r3, #8
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d008      	beq.n	8004878 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004876:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	0a5b      	lsrs	r3, r3, #9
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00e      	beq.n	80048a2 <HAL_I2C_ER_IRQHandler+0x78>
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	0a1b      	lsrs	r3, r3, #8
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	f043 0302 	orr.w	r3, r3, #2
 8004896:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80048a0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	0a9b      	lsrs	r3, r3, #10
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d03f      	beq.n	800492e <HAL_I2C_ER_IRQHandler+0x104>
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	0a1b      	lsrs	r3, r3, #8
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d039      	beq.n	800492e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80048ba:	7efb      	ldrb	r3, [r7, #27]
 80048bc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048cc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80048d4:	7ebb      	ldrb	r3, [r7, #26]
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d112      	bne.n	8004900 <HAL_I2C_ER_IRQHandler+0xd6>
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10f      	bne.n	8004900 <HAL_I2C_ER_IRQHandler+0xd6>
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
 80048e2:	2b21      	cmp	r3, #33	; 0x21
 80048e4:	d008      	beq.n	80048f8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80048e6:	7cfb      	ldrb	r3, [r7, #19]
 80048e8:	2b29      	cmp	r3, #41	; 0x29
 80048ea:	d005      	beq.n	80048f8 <HAL_I2C_ER_IRQHandler+0xce>
 80048ec:	7cfb      	ldrb	r3, [r7, #19]
 80048ee:	2b28      	cmp	r3, #40	; 0x28
 80048f0:	d106      	bne.n	8004900 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b21      	cmp	r3, #33	; 0x21
 80048f6:	d103      	bne.n	8004900 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f001 f869 	bl	80059d0 <I2C_Slave_AF>
 80048fe:	e016      	b.n	800492e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004908:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	f043 0304 	orr.w	r3, r3, #4
 8004910:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004912:	7efb      	ldrb	r3, [r7, #27]
 8004914:	2b10      	cmp	r3, #16
 8004916:	d002      	beq.n	800491e <HAL_I2C_ER_IRQHandler+0xf4>
 8004918:	7efb      	ldrb	r3, [r7, #27]
 800491a:	2b40      	cmp	r3, #64	; 0x40
 800491c:	d107      	bne.n	800492e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	0adb      	lsrs	r3, r3, #11
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00e      	beq.n	8004958 <HAL_I2C_ER_IRQHandler+0x12e>
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	0a1b      	lsrs	r3, r3, #8
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d008      	beq.n	8004958 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	f043 0308 	orr.w	r3, r3, #8
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004956:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f001 f8a0 	bl	8005ab0 <I2C_ITError>
  }
}
 8004970:	bf00      	nop
 8004972:	3728      	adds	r7, #40	; 0x28
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
 80049d4:	4613      	mov	r3, r2
 80049d6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a56:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a5e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d150      	bne.n	8004b10 <I2C_MasterTransmit_TXE+0xc8>
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	2b21      	cmp	r3, #33	; 0x21
 8004a72:	d14d      	bne.n	8004b10 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d01d      	beq.n	8004ab6 <I2C_MasterTransmit_TXE+0x6e>
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d01a      	beq.n	8004ab6 <I2C_MasterTransmit_TXE+0x6e>
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a86:	d016      	beq.n	8004ab6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a96:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2211      	movs	r2, #17
 8004a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff ff62 	bl	8004978 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ab4:	e060      	b.n	8004b78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ac4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b40      	cmp	r3, #64	; 0x40
 8004aee:	d107      	bne.n	8004b00 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff ff7d 	bl	80049f8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004afe:	e03b      	b.n	8004b78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff ff35 	bl	8004978 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b0e:	e033      	b.n	8004b78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
 8004b12:	2b21      	cmp	r3, #33	; 0x21
 8004b14:	d005      	beq.n	8004b22 <I2C_MasterTransmit_TXE+0xda>
 8004b16:	7bbb      	ldrb	r3, [r7, #14]
 8004b18:	2b40      	cmp	r3, #64	; 0x40
 8004b1a:	d12d      	bne.n	8004b78 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	2b22      	cmp	r3, #34	; 0x22
 8004b20:	d12a      	bne.n	8004b78 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d108      	bne.n	8004b3e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b3a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004b3c:	e01c      	b.n	8004b78 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b40      	cmp	r3, #64	; 0x40
 8004b48:	d103      	bne.n	8004b52 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f88e 	bl	8004c6c <I2C_MemoryTransmit_TXE_BTF>
}
 8004b50:	e012      	b.n	8004b78 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	781a      	ldrb	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b76:	e7ff      	b.n	8004b78 <I2C_MasterTransmit_TXE+0x130>
 8004b78:	bf00      	nop
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b21      	cmp	r3, #33	; 0x21
 8004b98:	d164      	bne.n	8004c64 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d012      	beq.n	8004bca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	781a      	ldrb	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004bc8:	e04c      	b.n	8004c64 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d01d      	beq.n	8004c0c <I2C_MasterTransmit_BTF+0x8c>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b20      	cmp	r3, #32
 8004bd4:	d01a      	beq.n	8004c0c <I2C_MasterTransmit_BTF+0x8c>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bdc:	d016      	beq.n	8004c0c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2211      	movs	r2, #17
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7ff feb7 	bl	8004978 <HAL_I2C_MasterTxCpltCallback>
}
 8004c0a:	e02b      	b.n	8004c64 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c1a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c2a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b40      	cmp	r3, #64	; 0x40
 8004c44:	d107      	bne.n	8004c56 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7ff fed2 	bl	80049f8 <HAL_I2C_MemTxCpltCallback>
}
 8004c54:	e006      	b.n	8004c64 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff fe8a 	bl	8004978 <HAL_I2C_MasterTxCpltCallback>
}
 8004c64:	bf00      	nop
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d11d      	bne.n	8004cc0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d10b      	bne.n	8004ca4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c9c:	1c9a      	adds	r2, r3, #2
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004ca2:	e073      	b.n	8004d8c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	121b      	asrs	r3, r3, #8
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cbe:	e065      	b.n	8004d8c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d10b      	bne.n	8004ce0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cde:	e055      	b.n	8004d8c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d151      	bne.n	8004d8c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	2b22      	cmp	r3, #34	; 0x22
 8004cec:	d10d      	bne.n	8004d0a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cfc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d08:	e040      	b.n	8004d8c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d015      	beq.n	8004d40 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	2b21      	cmp	r3, #33	; 0x21
 8004d18:	d112      	bne.n	8004d40 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	781a      	ldrb	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d3e:	e025      	b.n	8004d8c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d120      	bne.n	8004d8c <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	2b21      	cmp	r3, #33	; 0x21
 8004d4e:	d11d      	bne.n	8004d8c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d5e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d6e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff fe36 	bl	80049f8 <HAL_I2C_MemTxCpltCallback>
}
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b22      	cmp	r3, #34	; 0x22
 8004da6:	f040 80ac 	bne.w	8004f02 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d921      	bls.n	8004dfc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	f040 808c 	bne.w	8004f02 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004dfa:	e082      	b.n	8004f02 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d075      	beq.n	8004ef0 <I2C_MasterReceive_RXNE+0x15c>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d002      	beq.n	8004e10 <I2C_MasterReceive_RXNE+0x7c>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d16f      	bne.n	8004ef0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f001 fc4d 	bl	80066b0 <I2C_WaitOnSTOPRequestThroughIT>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d142      	bne.n	8004ea2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e2a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e3a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691a      	ldr	r2, [r3, #16]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b40      	cmp	r3, #64	; 0x40
 8004e74:	d10a      	bne.n	8004e8c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff fdc1 	bl	8004a0c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e8a:	e03a      	b.n	8004f02 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2212      	movs	r2, #18
 8004e98:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff fd76 	bl	800498c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004ea0:	e02f      	b.n	8004f02 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004eb0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7ff fd99 	bl	8004a20 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004eee:	e008      	b.n	8004f02 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efe:	605a      	str	r2, [r3, #4]
}
 8004f00:	e7ff      	b.n	8004f02 <I2C_MasterReceive_RXNE+0x16e>
 8004f02:	bf00      	nop
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b084      	sub	sp, #16
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f16:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d11b      	bne.n	8004f5a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f30:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004f58:	e0bd      	b.n	80050d6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d129      	bne.n	8004fb8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f72:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d00a      	beq.n	8004f90 <I2C_MasterReceive_BTF+0x86>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d007      	beq.n	8004f90 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f8e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691a      	ldr	r2, [r3, #16]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004fb6:	e08e      	b.n	80050d6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d176      	bne.n	80050b0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d002      	beq.n	8004fce <I2C_MasterReceive_BTF+0xc4>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b10      	cmp	r3, #16
 8004fcc:	d108      	bne.n	8004fe0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e019      	b.n	8005014 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d002      	beq.n	8004fec <I2C_MasterReceive_BTF+0xe2>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d108      	bne.n	8004ffe <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	e00a      	b.n	8005014 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b10      	cmp	r3, #16
 8005002:	d007      	beq.n	8005014 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005012:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800506e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b40      	cmp	r3, #64	; 0x40
 8005082:	d10a      	bne.n	800509a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff fcba 	bl	8004a0c <HAL_I2C_MemRxCpltCallback>
}
 8005098:	e01d      	b.n	80050d6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2212      	movs	r2, #18
 80050a6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7ff fc6f 	bl	800498c <HAL_I2C_MasterRxCpltCallback>
}
 80050ae:	e012      	b.n	80050d6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691a      	ldr	r2, [r3, #16]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050d6:	bf00      	nop
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b40      	cmp	r3, #64	; 0x40
 80050f0:	d117      	bne.n	8005122 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d109      	bne.n	800510e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800510a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800510c:	e067      	b.n	80051de <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005112:	b2db      	uxtb	r3, r3
 8005114:	f043 0301 	orr.w	r3, r3, #1
 8005118:	b2da      	uxtb	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	611a      	str	r2, [r3, #16]
}
 8005120:	e05d      	b.n	80051de <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800512a:	d133      	bne.n	8005194 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b21      	cmp	r3, #33	; 0x21
 8005136:	d109      	bne.n	800514c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513c:	b2db      	uxtb	r3, r3
 800513e:	461a      	mov	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005148:	611a      	str	r2, [r3, #16]
 800514a:	e008      	b.n	800515e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005150:	b2db      	uxtb	r3, r3
 8005152:	f043 0301 	orr.w	r3, r3, #1
 8005156:	b2da      	uxtb	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005162:	2b00      	cmp	r3, #0
 8005164:	d004      	beq.n	8005170 <I2C_Master_SB+0x92>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516c:	2b00      	cmp	r3, #0
 800516e:	d108      	bne.n	8005182 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	2b00      	cmp	r3, #0
 8005176:	d032      	beq.n	80051de <I2C_Master_SB+0x100>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d02d      	beq.n	80051de <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005190:	605a      	str	r2, [r3, #4]
}
 8005192:	e024      	b.n	80051de <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10e      	bne.n	80051ba <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	11db      	asrs	r3, r3, #7
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	f003 0306 	and.w	r3, r3, #6
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	f063 030f 	orn	r3, r3, #15
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	611a      	str	r2, [r3, #16]
}
 80051b8:	e011      	b.n	80051de <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d10d      	bne.n	80051de <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	11db      	asrs	r3, r3, #7
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	f003 0306 	and.w	r3, r3, #6
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	f063 030e 	orn	r3, r3, #14
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	611a      	str	r2, [r3, #16]
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005202:	2b00      	cmp	r3, #0
 8005204:	d004      	beq.n	8005210 <I2C_Master_ADD10+0x26>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d108      	bne.n	8005222 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00c      	beq.n	8005232 <I2C_Master_ADD10+0x48>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d007      	beq.n	8005232 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005230:	605a      	str	r2, [r3, #4]
  }
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800523e:	b480      	push	{r7}
 8005240:	b091      	sub	sp, #68	; 0x44
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800524c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b22      	cmp	r3, #34	; 0x22
 8005266:	f040 8169 	bne.w	800553c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10f      	bne.n	8005292 <I2C_Master_ADDR+0x54>
 8005272:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005276:	2b40      	cmp	r3, #64	; 0x40
 8005278:	d10b      	bne.n	8005292 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800527a:	2300      	movs	r3, #0
 800527c:	633b      	str	r3, [r7, #48]	; 0x30
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	633b      	str	r3, [r7, #48]	; 0x30
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	633b      	str	r3, [r7, #48]	; 0x30
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	e160      	b.n	8005554 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005296:	2b00      	cmp	r3, #0
 8005298:	d11d      	bne.n	80052d6 <I2C_Master_ADDR+0x98>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80052a2:	d118      	bne.n	80052d6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052a4:	2300      	movs	r3, #0
 80052a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052c8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	651a      	str	r2, [r3, #80]	; 0x50
 80052d4:	e13e      	b.n	8005554 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d113      	bne.n	8005308 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052e0:	2300      	movs	r3, #0
 80052e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	e115      	b.n	8005534 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530c:	b29b      	uxth	r3, r3
 800530e:	2b01      	cmp	r3, #1
 8005310:	f040 808a 	bne.w	8005428 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005316:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800531a:	d137      	bne.n	800538c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800533a:	d113      	bne.n	8005364 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800534a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800534c:	2300      	movs	r3, #0
 800534e:	627b      	str	r3, [r7, #36]	; 0x24
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	627b      	str	r3, [r7, #36]	; 0x24
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	e0e7      	b.n	8005534 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005364:	2300      	movs	r3, #0
 8005366:	623b      	str	r3, [r7, #32]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	623b      	str	r3, [r7, #32]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	623b      	str	r3, [r7, #32]
 8005378:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	e0d3      	b.n	8005534 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800538c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538e:	2b08      	cmp	r3, #8
 8005390:	d02e      	beq.n	80053f0 <I2C_Master_ADDR+0x1b2>
 8005392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005394:	2b20      	cmp	r3, #32
 8005396:	d02b      	beq.n	80053f0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539a:	2b12      	cmp	r3, #18
 800539c:	d102      	bne.n	80053a4 <I2C_Master_ADDR+0x166>
 800539e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d125      	bne.n	80053f0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80053a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d00e      	beq.n	80053c8 <I2C_Master_ADDR+0x18a>
 80053aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d00b      	beq.n	80053c8 <I2C_Master_ADDR+0x18a>
 80053b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b2:	2b10      	cmp	r3, #16
 80053b4:	d008      	beq.n	80053c8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	e007      	b.n	80053d8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053d6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d8:	2300      	movs	r3, #0
 80053da:	61fb      	str	r3, [r7, #28]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	61fb      	str	r3, [r7, #28]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	61fb      	str	r3, [r7, #28]
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	e0a1      	b.n	8005534 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053fe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005400:	2300      	movs	r3, #0
 8005402:	61bb      	str	r3, [r7, #24]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	61bb      	str	r3, [r7, #24]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	61bb      	str	r3, [r7, #24]
 8005414:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	e085      	b.n	8005534 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d14d      	bne.n	80054ce <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	2b04      	cmp	r3, #4
 8005436:	d016      	beq.n	8005466 <I2C_Master_ADDR+0x228>
 8005438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543a:	2b02      	cmp	r3, #2
 800543c:	d013      	beq.n	8005466 <I2C_Master_ADDR+0x228>
 800543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005440:	2b10      	cmp	r3, #16
 8005442:	d010      	beq.n	8005466 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005452:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	e007      	b.n	8005476 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005474:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005484:	d117      	bne.n	80054b6 <I2C_Master_ADDR+0x278>
 8005486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005488:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800548c:	d00b      	beq.n	80054a6 <I2C_Master_ADDR+0x268>
 800548e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005490:	2b01      	cmp	r3, #1
 8005492:	d008      	beq.n	80054a6 <I2C_Master_ADDR+0x268>
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	2b08      	cmp	r3, #8
 8005498:	d005      	beq.n	80054a6 <I2C_Master_ADDR+0x268>
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	2b10      	cmp	r3, #16
 800549e:	d002      	beq.n	80054a6 <I2C_Master_ADDR+0x268>
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	2b20      	cmp	r3, #32
 80054a4:	d107      	bne.n	80054b6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054b4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	e032      	b.n	8005534 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054dc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ec:	d117      	bne.n	800551e <I2C_Master_ADDR+0x2e0>
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054f4:	d00b      	beq.n	800550e <I2C_Master_ADDR+0x2d0>
 80054f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d008      	beq.n	800550e <I2C_Master_ADDR+0x2d0>
 80054fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fe:	2b08      	cmp	r3, #8
 8005500:	d005      	beq.n	800550e <I2C_Master_ADDR+0x2d0>
 8005502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005504:	2b10      	cmp	r3, #16
 8005506:	d002      	beq.n	800550e <I2C_Master_ADDR+0x2d0>
 8005508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550a:	2b20      	cmp	r3, #32
 800550c:	d107      	bne.n	800551e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800551c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800551e:	2300      	movs	r3, #0
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	613b      	str	r3, [r7, #16]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800553a:	e00b      	b.n	8005554 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800553c:	2300      	movs	r3, #0
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
}
 8005552:	e7ff      	b.n	8005554 <I2C_Master_ADDR+0x316>
 8005554:	bf00      	nop
 8005556:	3744      	adds	r7, #68	; 0x44
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800556e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005574:	b29b      	uxth	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d02b      	beq.n	80055d2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	781a      	ldrb	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005594:	b29b      	uxth	r3, r3
 8005596:	3b01      	subs	r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d114      	bne.n	80055d2 <I2C_SlaveTransmit_TXE+0x72>
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	2b29      	cmp	r3, #41	; 0x29
 80055ac:	d111      	bne.n	80055d2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2221      	movs	r2, #33	; 0x21
 80055c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2228      	movs	r2, #40	; 0x28
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7ff f9e7 	bl	80049a0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055d2:	bf00      	nop
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d011      	beq.n	8005610 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	781a      	ldrb	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005606:	b29b      	uxth	r3, r3
 8005608:	3b01      	subs	r3, #1
 800560a:	b29a      	uxth	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d02c      	beq.n	8005690 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691a      	ldr	r2, [r3, #16]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005652:	b29b      	uxth	r3, r3
 8005654:	3b01      	subs	r3, #1
 8005656:	b29a      	uxth	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d114      	bne.n	8005690 <I2C_SlaveReceive_RXNE+0x74>
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	2b2a      	cmp	r3, #42	; 0x2a
 800566a:	d111      	bne.n	8005690 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800567a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2222      	movs	r2, #34	; 0x22
 8005680:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2228      	movs	r2, #40	; 0x28
 8005686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff f992 	bl	80049b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005690:	bf00      	nop
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d012      	beq.n	80056d0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	691a      	ldr	r2, [r3, #16]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80056e6:	2300      	movs	r3, #0
 80056e8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056f6:	2b28      	cmp	r3, #40	; 0x28
 80056f8:	d127      	bne.n	800574a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005708:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	089b      	lsrs	r3, r3, #2
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005716:	2301      	movs	r3, #1
 8005718:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	09db      	lsrs	r3, r3, #7
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d103      	bne.n	800572e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	81bb      	strh	r3, [r7, #12]
 800572c:	e002      	b.n	8005734 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800573c:	89ba      	ldrh	r2, [r7, #12]
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	4619      	mov	r1, r3
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7ff f940 	bl	80049c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005748:	e00e      	b.n	8005768 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800574a:	2300      	movs	r3, #0
 800574c:	60bb      	str	r3, [r7, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	60bb      	str	r3, [r7, #8]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	60bb      	str	r3, [r7, #8]
 800575e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005768:	bf00      	nop
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800578e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005790:	2300      	movs	r3, #0
 8005792:	60bb      	str	r3, [r7, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	60bb      	str	r3, [r7, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0201 	orr.w	r2, r2, #1
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057bc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057cc:	d172      	bne.n	80058b4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
 80057d0:	2b22      	cmp	r3, #34	; 0x22
 80057d2:	d002      	beq.n	80057da <I2C_Slave_STOPF+0x6a>
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	2b2a      	cmp	r3, #42	; 0x2a
 80057d8:	d135      	bne.n	8005846 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d005      	beq.n	80057fe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	f043 0204 	orr.w	r2, r3, #4
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800580c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005812:	4618      	mov	r0, r3
 8005814:	f7fd fbfa 	bl	800300c <HAL_DMA_GetState>
 8005818:	4603      	mov	r3, r0
 800581a:	2b01      	cmp	r3, #1
 800581c:	d049      	beq.n	80058b2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	4a69      	ldr	r2, [pc, #420]	; (80059c8 <I2C_Slave_STOPF+0x258>)
 8005824:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	4618      	mov	r0, r3
 800582c:	f7fd fbcc 	bl	8002fc8 <HAL_DMA_Abort_IT>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d03d      	beq.n	80058b2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005840:	4610      	mov	r0, r2
 8005842:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005844:	e035      	b.n	80058b2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	b29a      	uxth	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005858:	b29b      	uxth	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d005      	beq.n	800586a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	f043 0204 	orr.w	r2, r3, #4
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005878:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587e:	4618      	mov	r0, r3
 8005880:	f7fd fbc4 	bl	800300c <HAL_DMA_GetState>
 8005884:	4603      	mov	r3, r0
 8005886:	2b01      	cmp	r3, #1
 8005888:	d014      	beq.n	80058b4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588e:	4a4e      	ldr	r2, [pc, #312]	; (80059c8 <I2C_Slave_STOPF+0x258>)
 8005890:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005896:	4618      	mov	r0, r3
 8005898:	f7fd fb96 	bl	8002fc8 <HAL_DMA_Abort_IT>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d008      	beq.n	80058b4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058ac:	4610      	mov	r0, r2
 80058ae:	4798      	blx	r3
 80058b0:	e000      	b.n	80058b4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058b2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d03e      	beq.n	800593c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d112      	bne.n	80058f2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	3b01      	subs	r3, #1
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fc:	2b40      	cmp	r3, #64	; 0x40
 80058fe:	d112      	bne.n	8005926 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	691a      	ldr	r2, [r3, #16]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591c:	b29b      	uxth	r3, r3
 800591e:	3b01      	subs	r3, #1
 8005920:	b29a      	uxth	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d005      	beq.n	800593c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	f043 0204 	orr.w	r2, r3, #4
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f8b3 	bl	8005ab0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800594a:	e039      	b.n	80059c0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	2b2a      	cmp	r3, #42	; 0x2a
 8005950:	d109      	bne.n	8005966 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2228      	movs	r2, #40	; 0x28
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7ff f827 	bl	80049b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b28      	cmp	r3, #40	; 0x28
 8005970:	d111      	bne.n	8005996 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a15      	ldr	r2, [pc, #84]	; (80059cc <I2C_Slave_STOPF+0x25c>)
 8005976:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2220      	movs	r2, #32
 8005982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7ff f828 	bl	80049e4 <HAL_I2C_ListenCpltCallback>
}
 8005994:	e014      	b.n	80059c0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	2b22      	cmp	r3, #34	; 0x22
 800599c:	d002      	beq.n	80059a4 <I2C_Slave_STOPF+0x234>
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	2b22      	cmp	r3, #34	; 0x22
 80059a2:	d10d      	bne.n	80059c0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fe fffa 	bl	80049b4 <HAL_I2C_SlaveRxCpltCallback>
}
 80059c0:	bf00      	nop
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	080062b1 	.word	0x080062b1
 80059cc:	ffff0000 	.word	0xffff0000

080059d0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059de:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d002      	beq.n	80059f2 <I2C_Slave_AF+0x22>
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b20      	cmp	r3, #32
 80059f0:	d129      	bne.n	8005a46 <I2C_Slave_AF+0x76>
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	2b28      	cmp	r3, #40	; 0x28
 80059f6:	d126      	bne.n	8005a46 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a2c      	ldr	r2, [pc, #176]	; (8005aac <I2C_Slave_AF+0xdc>)
 80059fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a0c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a16:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a26:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fe ffd0 	bl	80049e4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005a44:	e02e      	b.n	8005aa4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
 8005a48:	2b21      	cmp	r3, #33	; 0x21
 8005a4a:	d126      	bne.n	8005a9a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a17      	ldr	r2, [pc, #92]	; (8005aac <I2C_Slave_AF+0xdc>)
 8005a50:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2221      	movs	r2, #33	; 0x21
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a76:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a80:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a90:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fe ff84 	bl	80049a0 <HAL_I2C_SlaveTxCpltCallback>
}
 8005a98:	e004      	b.n	8005aa4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005aa2:	615a      	str	r2, [r3, #20]
}
 8005aa4:	bf00      	nop
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	ffff0000 	.word	0xffff0000

08005ab0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005abe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ac6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ac8:	7bbb      	ldrb	r3, [r7, #14]
 8005aca:	2b10      	cmp	r3, #16
 8005acc:	d002      	beq.n	8005ad4 <I2C_ITError+0x24>
 8005ace:	7bbb      	ldrb	r3, [r7, #14]
 8005ad0:	2b40      	cmp	r3, #64	; 0x40
 8005ad2:	d10a      	bne.n	8005aea <I2C_ITError+0x3a>
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
 8005ad6:	2b22      	cmp	r3, #34	; 0x22
 8005ad8:	d107      	bne.n	8005aea <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ae8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005aea:	7bfb      	ldrb	r3, [r7, #15]
 8005aec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005af0:	2b28      	cmp	r3, #40	; 0x28
 8005af2:	d107      	bne.n	8005b04 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2228      	movs	r2, #40	; 0x28
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b02:	e015      	b.n	8005b30 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b12:	d00a      	beq.n	8005b2a <I2C_ITError+0x7a>
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	2b60      	cmp	r3, #96	; 0x60
 8005b18:	d007      	beq.n	8005b2a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b3e:	d162      	bne.n	8005c06 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b4e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d020      	beq.n	8005ba0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b62:	4a6a      	ldr	r2, [pc, #424]	; (8005d0c <I2C_ITError+0x25c>)
 8005b64:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fd fa2c 	bl	8002fc8 <HAL_DMA_Abort_IT>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 8089 	beq.w	8005c8a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0201 	bic.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	4798      	blx	r3
 8005b9e:	e074      	b.n	8005c8a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	4a59      	ldr	r2, [pc, #356]	; (8005d0c <I2C_ITError+0x25c>)
 8005ba6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fd fa0b 	bl	8002fc8 <HAL_DMA_Abort_IT>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d068      	beq.n	8005c8a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc2:	2b40      	cmp	r3, #64	; 0x40
 8005bc4:	d10b      	bne.n	8005bde <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0201 	bic.w	r2, r2, #1
 8005bec:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c00:	4610      	mov	r0, r2
 8005c02:	4798      	blx	r3
 8005c04:	e041      	b.n	8005c8a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b60      	cmp	r3, #96	; 0x60
 8005c10:	d125      	bne.n	8005c5e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2a:	2b40      	cmp	r3, #64	; 0x40
 8005c2c:	d10b      	bne.n	8005c46 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	b2d2      	uxtb	r2, r2
 8005c3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0201 	bic.w	r2, r2, #1
 8005c54:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fe feec 	bl	8004a34 <HAL_I2C_AbortCpltCallback>
 8005c5c:	e015      	b.n	8005c8a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c68:	2b40      	cmp	r3, #64	; 0x40
 8005c6a:	d10b      	bne.n	8005c84 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691a      	ldr	r2, [r3, #16]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7fe fecb 	bl	8004a20 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10e      	bne.n	8005cb8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d109      	bne.n	8005cb8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d104      	bne.n	8005cb8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d007      	beq.n	8005cc8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cc6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cce:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d113      	bne.n	8005d04 <I2C_ITError+0x254>
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	2b28      	cmp	r3, #40	; 0x28
 8005ce0:	d110      	bne.n	8005d04 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a0a      	ldr	r2, [pc, #40]	; (8005d10 <I2C_ITError+0x260>)
 8005ce6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fe fe70 	bl	80049e4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d04:	bf00      	nop
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	080062b1 	.word	0x080062b1
 8005d10:	ffff0000 	.word	0xffff0000

08005d14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af02      	add	r7, sp, #8
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	607a      	str	r2, [r7, #4]
 8005d1e:	603b      	str	r3, [r7, #0]
 8005d20:	460b      	mov	r3, r1
 8005d22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2b08      	cmp	r3, #8
 8005d2e:	d006      	beq.n	8005d3e <I2C_MasterRequestWrite+0x2a>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d003      	beq.n	8005d3e <I2C_MasterRequestWrite+0x2a>
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d3c:	d108      	bne.n	8005d50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	e00b      	b.n	8005d68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d54:	2b12      	cmp	r3, #18
 8005d56:	d107      	bne.n	8005d68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 fb43 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00d      	beq.n	8005d9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d8e:	d103      	bne.n	8005d98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e035      	b.n	8005e08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005da4:	d108      	bne.n	8005db8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005da6:	897b      	ldrh	r3, [r7, #10]
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	461a      	mov	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005db4:	611a      	str	r2, [r3, #16]
 8005db6:	e01b      	b.n	8005df0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005db8:	897b      	ldrh	r3, [r7, #10]
 8005dba:	11db      	asrs	r3, r3, #7
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	f003 0306 	and.w	r3, r3, #6
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	f063 030f 	orn	r3, r3, #15
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	490e      	ldr	r1, [pc, #56]	; (8005e10 <I2C_MasterRequestWrite+0xfc>)
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 fb69 	bl	80064ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e010      	b.n	8005e08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005de6:	897b      	ldrh	r3, [r7, #10]
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	4907      	ldr	r1, [pc, #28]	; (8005e14 <I2C_MasterRequestWrite+0x100>)
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f000 fb59 	bl	80064ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3718      	adds	r7, #24
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	00010008 	.word	0x00010008
 8005e14:	00010002 	.word	0x00010002

08005e18 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b088      	sub	sp, #32
 8005e1c:	af02      	add	r7, sp, #8
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	607a      	str	r2, [r7, #4]
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	460b      	mov	r3, r1
 8005e26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e3c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b08      	cmp	r3, #8
 8005e42:	d006      	beq.n	8005e52 <I2C_MasterRequestRead+0x3a>
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d003      	beq.n	8005e52 <I2C_MasterRequestRead+0x3a>
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e50:	d108      	bne.n	8005e64 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	e00b      	b.n	8005e7c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e68:	2b11      	cmp	r3, #17
 8005e6a:	d107      	bne.n	8005e7c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 fab9 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00d      	beq.n	8005eb0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ea2:	d103      	bne.n	8005eac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e079      	b.n	8005fa4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eb8:	d108      	bne.n	8005ecc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005eba:	897b      	ldrh	r3, [r7, #10]
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	f043 0301 	orr.w	r3, r3, #1
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	611a      	str	r2, [r3, #16]
 8005eca:	e05f      	b.n	8005f8c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ecc:	897b      	ldrh	r3, [r7, #10]
 8005ece:	11db      	asrs	r3, r3, #7
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	f003 0306 	and.w	r3, r3, #6
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	f063 030f 	orn	r3, r3, #15
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	4930      	ldr	r1, [pc, #192]	; (8005fac <I2C_MasterRequestRead+0x194>)
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 fadf 	bl	80064ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e054      	b.n	8005fa4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005efa:	897b      	ldrh	r3, [r7, #10]
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	4929      	ldr	r1, [pc, #164]	; (8005fb0 <I2C_MasterRequestRead+0x198>)
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 facf 	bl	80064ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e044      	b.n	8005fa4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	613b      	str	r3, [r7, #16]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	613b      	str	r3, [r7, #16]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	613b      	str	r3, [r7, #16]
 8005f2e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f3e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 fa57 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00d      	beq.n	8005f74 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f66:	d103      	bne.n	8005f70 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f6e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e017      	b.n	8005fa4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005f74:	897b      	ldrh	r3, [r7, #10]
 8005f76:	11db      	asrs	r3, r3, #7
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	f003 0306 	and.w	r3, r3, #6
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	f063 030e 	orn	r3, r3, #14
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	4907      	ldr	r1, [pc, #28]	; (8005fb0 <I2C_MasterRequestRead+0x198>)
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 fa8b 	bl	80064ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e000      	b.n	8005fa4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	00010008 	.word	0x00010008
 8005fb0:	00010002 	.word	0x00010002

08005fb4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	817b      	strh	r3, [r7, #10]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	813b      	strh	r3, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 fa08 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00d      	beq.n	8006012 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006004:	d103      	bne.n	800600e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800600c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e05f      	b.n	80060d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006012:	897b      	ldrh	r3, [r7, #10]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	461a      	mov	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006020:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	6a3a      	ldr	r2, [r7, #32]
 8006026:	492d      	ldr	r1, [pc, #180]	; (80060dc <I2C_RequestMemoryWrite+0x128>)
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 fa40 	bl	80064ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e04c      	b.n	80060d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006038:	2300      	movs	r3, #0
 800603a:	617b      	str	r3, [r7, #20]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800604e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006050:	6a39      	ldr	r1, [r7, #32]
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 faaa 	bl	80065ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00d      	beq.n	800607a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	2b04      	cmp	r3, #4
 8006064:	d107      	bne.n	8006076 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006074:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e02b      	b.n	80060d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800607a:	88fb      	ldrh	r3, [r7, #6]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d105      	bne.n	800608c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006080:	893b      	ldrh	r3, [r7, #8]
 8006082:	b2da      	uxtb	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	611a      	str	r2, [r3, #16]
 800608a:	e021      	b.n	80060d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800608c:	893b      	ldrh	r3, [r7, #8]
 800608e:	0a1b      	lsrs	r3, r3, #8
 8006090:	b29b      	uxth	r3, r3
 8006092:	b2da      	uxtb	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800609a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800609c:	6a39      	ldr	r1, [r7, #32]
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 fa84 	bl	80065ac <I2C_WaitOnTXEFlagUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00d      	beq.n	80060c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	d107      	bne.n	80060c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e005      	b.n	80060d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060c6:	893b      	ldrh	r3, [r7, #8]
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	00010002 	.word	0x00010002

080060e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af02      	add	r7, sp, #8
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	4608      	mov	r0, r1
 80060ea:	4611      	mov	r1, r2
 80060ec:	461a      	mov	r2, r3
 80060ee:	4603      	mov	r3, r0
 80060f0:	817b      	strh	r3, [r7, #10]
 80060f2:	460b      	mov	r3, r1
 80060f4:	813b      	strh	r3, [r7, #8]
 80060f6:	4613      	mov	r3, r2
 80060f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006108:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006118:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	2200      	movs	r2, #0
 8006122:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 f96a 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00d      	beq.n	800614e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006140:	d103      	bne.n	800614a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006148:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e0aa      	b.n	80062a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800614e:	897b      	ldrh	r3, [r7, #10]
 8006150:	b2db      	uxtb	r3, r3
 8006152:	461a      	mov	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800615c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	6a3a      	ldr	r2, [r7, #32]
 8006162:	4952      	ldr	r1, [pc, #328]	; (80062ac <I2C_RequestMemoryRead+0x1cc>)
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 f9a2 	bl	80064ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e097      	b.n	80062a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006174:	2300      	movs	r3, #0
 8006176:	617b      	str	r3, [r7, #20]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	617b      	str	r3, [r7, #20]
 8006188:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800618a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800618c:	6a39      	ldr	r1, [r7, #32]
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 fa0c 	bl	80065ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00d      	beq.n	80061b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d107      	bne.n	80061b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e076      	b.n	80062a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061b6:	88fb      	ldrh	r3, [r7, #6]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d105      	bne.n	80061c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061bc:	893b      	ldrh	r3, [r7, #8]
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	611a      	str	r2, [r3, #16]
 80061c6:	e021      	b.n	800620c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80061c8:	893b      	ldrh	r3, [r7, #8]
 80061ca:	0a1b      	lsrs	r3, r3, #8
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d8:	6a39      	ldr	r1, [r7, #32]
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 f9e6 	bl	80065ac <I2C_WaitOnTXEFlagUntilTimeout>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00d      	beq.n	8006202 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d107      	bne.n	80061fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e050      	b.n	80062a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006202:	893b      	ldrh	r3, [r7, #8]
 8006204:	b2da      	uxtb	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800620c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800620e:	6a39      	ldr	r1, [r7, #32]
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 f9cb 	bl	80065ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00d      	beq.n	8006238 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006220:	2b04      	cmp	r3, #4
 8006222:	d107      	bne.n	8006234 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006232:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e035      	b.n	80062a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006246:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	2200      	movs	r2, #0
 8006250:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 f8d3 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00d      	beq.n	800627c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800626e:	d103      	bne.n	8006278 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006276:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e013      	b.n	80062a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800627c:	897b      	ldrh	r3, [r7, #10]
 800627e:	b2db      	uxtb	r3, r3
 8006280:	f043 0301 	orr.w	r3, r3, #1
 8006284:	b2da      	uxtb	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	6a3a      	ldr	r2, [r7, #32]
 8006290:	4906      	ldr	r1, [pc, #24]	; (80062ac <I2C_RequestMemoryRead+0x1cc>)
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f000 f90b 	bl	80064ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e000      	b.n	80062a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	00010002 	.word	0x00010002

080062b0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062b8:	2300      	movs	r3, #0
 80062ba:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80062ca:	4b4b      	ldr	r3, [pc, #300]	; (80063f8 <I2C_DMAAbort+0x148>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	08db      	lsrs	r3, r3, #3
 80062d0:	4a4a      	ldr	r2, [pc, #296]	; (80063fc <I2C_DMAAbort+0x14c>)
 80062d2:	fba2 2303 	umull	r2, r3, r2, r3
 80062d6:	0a1a      	lsrs	r2, r3, #8
 80062d8:	4613      	mov	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	00da      	lsls	r2, r3, #3
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d106      	bne.n	80062f8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	f043 0220 	orr.w	r2, r3, #32
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80062f6:	e00a      	b.n	800630e <I2C_DMAAbort+0x5e>
    }
    count--;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3b01      	subs	r3, #1
 80062fc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800630c:	d0ea      	beq.n	80062e4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631a:	2200      	movs	r2, #0
 800631c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632a:	2200      	movs	r2, #0
 800632c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800633c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2200      	movs	r2, #0
 8006342:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006350:	2200      	movs	r2, #0
 8006352:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	2200      	movs	r2, #0
 8006362:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0201 	bic.w	r2, r2, #1
 8006372:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b60      	cmp	r3, #96	; 0x60
 800637e:	d10e      	bne.n	800639e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2200      	movs	r2, #0
 8006394:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006396:	6978      	ldr	r0, [r7, #20]
 8006398:	f7fe fb4c 	bl	8004a34 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800639c:	e027      	b.n	80063ee <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800639e:	7cfb      	ldrb	r3, [r7, #19]
 80063a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80063a4:	2b28      	cmp	r3, #40	; 0x28
 80063a6:	d117      	bne.n	80063d8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0201 	orr.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	2200      	movs	r2, #0
 80063cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2228      	movs	r2, #40	; 0x28
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80063d6:	e007      	b.n	80063e8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2220      	movs	r2, #32
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80063e8:	6978      	ldr	r0, [r7, #20]
 80063ea:	f7fe fb19 	bl	8004a20 <HAL_I2C_ErrorCallback>
}
 80063ee:	bf00      	nop
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000000 	.word	0x20000000
 80063fc:	14f8b589 	.word	0x14f8b589

08006400 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	603b      	str	r3, [r7, #0]
 800640c:	4613      	mov	r3, r2
 800640e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006410:	e025      	b.n	800645e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006418:	d021      	beq.n	800645e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800641a:	f7fc fc53 	bl	8002cc4 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	429a      	cmp	r2, r3
 8006428:	d302      	bcc.n	8006430 <I2C_WaitOnFlagUntilTimeout+0x30>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d116      	bne.n	800645e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2220      	movs	r2, #32
 800643a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	f043 0220 	orr.w	r2, r3, #32
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e023      	b.n	80064a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	0c1b      	lsrs	r3, r3, #16
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b01      	cmp	r3, #1
 8006466:	d10d      	bne.n	8006484 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	43da      	mvns	r2, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	4013      	ands	r3, r2
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	bf0c      	ite	eq
 800647a:	2301      	moveq	r3, #1
 800647c:	2300      	movne	r3, #0
 800647e:	b2db      	uxtb	r3, r3
 8006480:	461a      	mov	r2, r3
 8006482:	e00c      	b.n	800649e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	43da      	mvns	r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4013      	ands	r3, r2
 8006490:	b29b      	uxth	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	bf0c      	ite	eq
 8006496:	2301      	moveq	r3, #1
 8006498:	2300      	movne	r3, #0
 800649a:	b2db      	uxtb	r3, r3
 800649c:	461a      	mov	r2, r3
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d0b6      	beq.n	8006412 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b084      	sub	sp, #16
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	607a      	str	r2, [r7, #4]
 80064ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064bc:	e051      	b.n	8006562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064cc:	d123      	bne.n	8006516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	f043 0204 	orr.w	r2, r3, #4
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e046      	b.n	80065a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800651c:	d021      	beq.n	8006562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800651e:	f7fc fbd1 	bl	8002cc4 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	429a      	cmp	r2, r3
 800652c:	d302      	bcc.n	8006534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d116      	bne.n	8006562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2220      	movs	r2, #32
 800653e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	f043 0220 	orr.w	r2, r3, #32
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e020      	b.n	80065a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	0c1b      	lsrs	r3, r3, #16
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b01      	cmp	r3, #1
 800656a:	d10c      	bne.n	8006586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	43da      	mvns	r2, r3
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	4013      	ands	r3, r2
 8006578:	b29b      	uxth	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	bf14      	ite	ne
 800657e:	2301      	movne	r3, #1
 8006580:	2300      	moveq	r3, #0
 8006582:	b2db      	uxtb	r3, r3
 8006584:	e00b      	b.n	800659e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	43da      	mvns	r2, r3
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	4013      	ands	r3, r2
 8006592:	b29b      	uxth	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	bf14      	ite	ne
 8006598:	2301      	movne	r3, #1
 800659a:	2300      	moveq	r3, #0
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d18d      	bne.n	80064be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065b8:	e02d      	b.n	8006616 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 f900 	bl	80067c0 <I2C_IsAcknowledgeFailed>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e02d      	b.n	8006626 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065d0:	d021      	beq.n	8006616 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d2:	f7fc fb77 	bl	8002cc4 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d302      	bcc.n	80065e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d116      	bne.n	8006616 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	f043 0220 	orr.w	r2, r3, #32
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e007      	b.n	8006626 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006620:	2b80      	cmp	r3, #128	; 0x80
 8006622:	d1ca      	bne.n	80065ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b084      	sub	sp, #16
 8006632:	af00      	add	r7, sp, #0
 8006634:	60f8      	str	r0, [r7, #12]
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800663a:	e02d      	b.n	8006698 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 f8bf 	bl	80067c0 <I2C_IsAcknowledgeFailed>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e02d      	b.n	80066a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006652:	d021      	beq.n	8006698 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006654:	f7fc fb36 	bl	8002cc4 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	429a      	cmp	r2, r3
 8006662:	d302      	bcc.n	800666a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d116      	bne.n	8006698 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2220      	movs	r2, #32
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006684:	f043 0220 	orr.w	r2, r3, #32
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e007      	b.n	80066a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	f003 0304 	and.w	r3, r3, #4
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d1ca      	bne.n	800663c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80066bc:	4b13      	ldr	r3, [pc, #76]	; (800670c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	08db      	lsrs	r3, r3, #3
 80066c2:	4a13      	ldr	r2, [pc, #76]	; (8006710 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80066c4:	fba2 2303 	umull	r2, r3, r2, r3
 80066c8:	0a1a      	lsrs	r2, r3, #8
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3b01      	subs	r3, #1
 80066d6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d107      	bne.n	80066ee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	f043 0220 	orr.w	r2, r3, #32
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e008      	b.n	8006700 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066fc:	d0e9      	beq.n	80066d2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	20000000 	.word	0x20000000
 8006710:	14f8b589 	.word	0x14f8b589

08006714 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006720:	e042      	b.n	80067a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	f003 0310 	and.w	r3, r3, #16
 800672c:	2b10      	cmp	r3, #16
 800672e:	d119      	bne.n	8006764 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f06f 0210 	mvn.w	r2, #16
 8006738:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e029      	b.n	80067b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006764:	f7fc faae 	bl	8002cc4 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	429a      	cmp	r2, r3
 8006772:	d302      	bcc.n	800677a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d116      	bne.n	80067a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2220      	movs	r2, #32
 8006784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006794:	f043 0220 	orr.w	r2, r3, #32
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e007      	b.n	80067b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b2:	2b40      	cmp	r3, #64	; 0x40
 80067b4:	d1b5      	bne.n	8006722 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d6:	d11b      	bne.n	8006810 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2220      	movs	r2, #32
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fc:	f043 0204 	orr.w	r2, r3, #4
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e000      	b.n	8006812 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800681e:	b480      	push	{r7}
 8006820:	b083      	sub	sp, #12
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800682e:	d103      	bne.n	8006838 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006836:	e007      	b.n	8006848 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006840:	d102      	bne.n	8006848 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2208      	movs	r2, #8
 8006846:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e267      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	d075      	beq.n	800695e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006872:	4b88      	ldr	r3, [pc, #544]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f003 030c 	and.w	r3, r3, #12
 800687a:	2b04      	cmp	r3, #4
 800687c:	d00c      	beq.n	8006898 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800687e:	4b85      	ldr	r3, [pc, #532]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006886:	2b08      	cmp	r3, #8
 8006888:	d112      	bne.n	80068b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800688a:	4b82      	ldr	r3, [pc, #520]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006896:	d10b      	bne.n	80068b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006898:	4b7e      	ldr	r3, [pc, #504]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d05b      	beq.n	800695c <HAL_RCC_OscConfig+0x108>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d157      	bne.n	800695c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e242      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068b8:	d106      	bne.n	80068c8 <HAL_RCC_OscConfig+0x74>
 80068ba:	4b76      	ldr	r3, [pc, #472]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a75      	ldr	r2, [pc, #468]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 80068c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	e01d      	b.n	8006904 <HAL_RCC_OscConfig+0xb0>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068d0:	d10c      	bne.n	80068ec <HAL_RCC_OscConfig+0x98>
 80068d2:	4b70      	ldr	r3, [pc, #448]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a6f      	ldr	r2, [pc, #444]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 80068d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	4b6d      	ldr	r3, [pc, #436]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a6c      	ldr	r2, [pc, #432]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 80068e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068e8:	6013      	str	r3, [r2, #0]
 80068ea:	e00b      	b.n	8006904 <HAL_RCC_OscConfig+0xb0>
 80068ec:	4b69      	ldr	r3, [pc, #420]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a68      	ldr	r2, [pc, #416]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 80068f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	4b66      	ldr	r3, [pc, #408]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a65      	ldr	r2, [pc, #404]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 80068fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d013      	beq.n	8006934 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800690c:	f7fc f9da 	bl	8002cc4 <HAL_GetTick>
 8006910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006912:	e008      	b.n	8006926 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006914:	f7fc f9d6 	bl	8002cc4 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	2b64      	cmp	r3, #100	; 0x64
 8006920:	d901      	bls.n	8006926 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e207      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006926:	4b5b      	ldr	r3, [pc, #364]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d0f0      	beq.n	8006914 <HAL_RCC_OscConfig+0xc0>
 8006932:	e014      	b.n	800695e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006934:	f7fc f9c6 	bl	8002cc4 <HAL_GetTick>
 8006938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800693a:	e008      	b.n	800694e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800693c:	f7fc f9c2 	bl	8002cc4 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	2b64      	cmp	r3, #100	; 0x64
 8006948:	d901      	bls.n	800694e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e1f3      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800694e:	4b51      	ldr	r3, [pc, #324]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1f0      	bne.n	800693c <HAL_RCC_OscConfig+0xe8>
 800695a:	e000      	b.n	800695e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800695c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d063      	beq.n	8006a32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800696a:	4b4a      	ldr	r3, [pc, #296]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f003 030c 	and.w	r3, r3, #12
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00b      	beq.n	800698e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006976:	4b47      	ldr	r3, [pc, #284]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800697e:	2b08      	cmp	r3, #8
 8006980:	d11c      	bne.n	80069bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006982:	4b44      	ldr	r3, [pc, #272]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d116      	bne.n	80069bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800698e:	4b41      	ldr	r3, [pc, #260]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d005      	beq.n	80069a6 <HAL_RCC_OscConfig+0x152>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d001      	beq.n	80069a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e1c7      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069a6:	4b3b      	ldr	r3, [pc, #236]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	4937      	ldr	r1, [pc, #220]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ba:	e03a      	b.n	8006a32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d020      	beq.n	8006a06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069c4:	4b34      	ldr	r3, [pc, #208]	; (8006a98 <HAL_RCC_OscConfig+0x244>)
 80069c6:	2201      	movs	r2, #1
 80069c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ca:	f7fc f97b 	bl	8002cc4 <HAL_GetTick>
 80069ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069d0:	e008      	b.n	80069e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069d2:	f7fc f977 	bl	8002cc4 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d901      	bls.n	80069e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e1a8      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069e4:	4b2b      	ldr	r3, [pc, #172]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0f0      	beq.n	80069d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069f0:	4b28      	ldr	r3, [pc, #160]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	00db      	lsls	r3, r3, #3
 80069fe:	4925      	ldr	r1, [pc, #148]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	600b      	str	r3, [r1, #0]
 8006a04:	e015      	b.n	8006a32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a06:	4b24      	ldr	r3, [pc, #144]	; (8006a98 <HAL_RCC_OscConfig+0x244>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0c:	f7fc f95a 	bl	8002cc4 <HAL_GetTick>
 8006a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a12:	e008      	b.n	8006a26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a14:	f7fc f956 	bl	8002cc4 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e187      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a26:	4b1b      	ldr	r3, [pc, #108]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1f0      	bne.n	8006a14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0308 	and.w	r3, r3, #8
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d036      	beq.n	8006aac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d016      	beq.n	8006a74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a46:	4b15      	ldr	r3, [pc, #84]	; (8006a9c <HAL_RCC_OscConfig+0x248>)
 8006a48:	2201      	movs	r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a4c:	f7fc f93a 	bl	8002cc4 <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a54:	f7fc f936 	bl	8002cc4 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e167      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a66:	4b0b      	ldr	r3, [pc, #44]	; (8006a94 <HAL_RCC_OscConfig+0x240>)
 8006a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d0f0      	beq.n	8006a54 <HAL_RCC_OscConfig+0x200>
 8006a72:	e01b      	b.n	8006aac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a74:	4b09      	ldr	r3, [pc, #36]	; (8006a9c <HAL_RCC_OscConfig+0x248>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a7a:	f7fc f923 	bl	8002cc4 <HAL_GetTick>
 8006a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a80:	e00e      	b.n	8006aa0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a82:	f7fc f91f 	bl	8002cc4 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d907      	bls.n	8006aa0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e150      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
 8006a94:	40023800 	.word	0x40023800
 8006a98:	42470000 	.word	0x42470000
 8006a9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006aa0:	4b88      	ldr	r3, [pc, #544]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa4:	f003 0302 	and.w	r3, r3, #2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1ea      	bne.n	8006a82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 8097 	beq.w	8006be8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006aba:	2300      	movs	r3, #0
 8006abc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006abe:	4b81      	ldr	r3, [pc, #516]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10f      	bne.n	8006aea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aca:	2300      	movs	r3, #0
 8006acc:	60bb      	str	r3, [r7, #8]
 8006ace:	4b7d      	ldr	r3, [pc, #500]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	4a7c      	ldr	r2, [pc, #496]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8006ada:	4b7a      	ldr	r3, [pc, #488]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae2:	60bb      	str	r3, [r7, #8]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aea:	4b77      	ldr	r3, [pc, #476]	; (8006cc8 <HAL_RCC_OscConfig+0x474>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d118      	bne.n	8006b28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006af6:	4b74      	ldr	r3, [pc, #464]	; (8006cc8 <HAL_RCC_OscConfig+0x474>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a73      	ldr	r2, [pc, #460]	; (8006cc8 <HAL_RCC_OscConfig+0x474>)
 8006afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b02:	f7fc f8df 	bl	8002cc4 <HAL_GetTick>
 8006b06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b08:	e008      	b.n	8006b1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b0a:	f7fc f8db 	bl	8002cc4 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d901      	bls.n	8006b1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e10c      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b1c:	4b6a      	ldr	r3, [pc, #424]	; (8006cc8 <HAL_RCC_OscConfig+0x474>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d0f0      	beq.n	8006b0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d106      	bne.n	8006b3e <HAL_RCC_OscConfig+0x2ea>
 8006b30:	4b64      	ldr	r3, [pc, #400]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b34:	4a63      	ldr	r2, [pc, #396]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006b36:	f043 0301 	orr.w	r3, r3, #1
 8006b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b3c:	e01c      	b.n	8006b78 <HAL_RCC_OscConfig+0x324>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	2b05      	cmp	r3, #5
 8006b44:	d10c      	bne.n	8006b60 <HAL_RCC_OscConfig+0x30c>
 8006b46:	4b5f      	ldr	r3, [pc, #380]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4a:	4a5e      	ldr	r2, [pc, #376]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006b4c:	f043 0304 	orr.w	r3, r3, #4
 8006b50:	6713      	str	r3, [r2, #112]	; 0x70
 8006b52:	4b5c      	ldr	r3, [pc, #368]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b56:	4a5b      	ldr	r2, [pc, #364]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006b58:	f043 0301 	orr.w	r3, r3, #1
 8006b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b5e:	e00b      	b.n	8006b78 <HAL_RCC_OscConfig+0x324>
 8006b60:	4b58      	ldr	r3, [pc, #352]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b64:	4a57      	ldr	r2, [pc, #348]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006b66:	f023 0301 	bic.w	r3, r3, #1
 8006b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b6c:	4b55      	ldr	r3, [pc, #340]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b70:	4a54      	ldr	r2, [pc, #336]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006b72:	f023 0304 	bic.w	r3, r3, #4
 8006b76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d015      	beq.n	8006bac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b80:	f7fc f8a0 	bl	8002cc4 <HAL_GetTick>
 8006b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b86:	e00a      	b.n	8006b9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b88:	f7fc f89c 	bl	8002cc4 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e0cb      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b9e:	4b49      	ldr	r3, [pc, #292]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d0ee      	beq.n	8006b88 <HAL_RCC_OscConfig+0x334>
 8006baa:	e014      	b.n	8006bd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bac:	f7fc f88a 	bl	8002cc4 <HAL_GetTick>
 8006bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bb2:	e00a      	b.n	8006bca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bb4:	f7fc f886 	bl	8002cc4 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e0b5      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bca:	4b3e      	ldr	r3, [pc, #248]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bce:	f003 0302 	and.w	r3, r3, #2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1ee      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006bd6:	7dfb      	ldrb	r3, [r7, #23]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d105      	bne.n	8006be8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bdc:	4b39      	ldr	r3, [pc, #228]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be0:	4a38      	ldr	r2, [pc, #224]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006be6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 80a1 	beq.w	8006d34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bf2:	4b34      	ldr	r3, [pc, #208]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 030c 	and.w	r3, r3, #12
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d05c      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d141      	bne.n	8006c8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c06:	4b31      	ldr	r3, [pc, #196]	; (8006ccc <HAL_RCC_OscConfig+0x478>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c0c:	f7fc f85a 	bl	8002cc4 <HAL_GetTick>
 8006c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c12:	e008      	b.n	8006c26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c14:	f7fc f856 	bl	8002cc4 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e087      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c26:	4b27      	ldr	r3, [pc, #156]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1f0      	bne.n	8006c14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69da      	ldr	r2, [r3, #28]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	019b      	lsls	r3, r3, #6
 8006c42:	431a      	orrs	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	085b      	lsrs	r3, r3, #1
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	041b      	lsls	r3, r3, #16
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	061b      	lsls	r3, r3, #24
 8006c56:	491b      	ldr	r1, [pc, #108]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c5c:	4b1b      	ldr	r3, [pc, #108]	; (8006ccc <HAL_RCC_OscConfig+0x478>)
 8006c5e:	2201      	movs	r2, #1
 8006c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c62:	f7fc f82f 	bl	8002cc4 <HAL_GetTick>
 8006c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c68:	e008      	b.n	8006c7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c6a:	f7fc f82b 	bl	8002cc4 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d901      	bls.n	8006c7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e05c      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c7c:	4b11      	ldr	r3, [pc, #68]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0f0      	beq.n	8006c6a <HAL_RCC_OscConfig+0x416>
 8006c88:	e054      	b.n	8006d34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c8a:	4b10      	ldr	r3, [pc, #64]	; (8006ccc <HAL_RCC_OscConfig+0x478>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c90:	f7fc f818 	bl	8002cc4 <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c96:	e008      	b.n	8006caa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c98:	f7fc f814 	bl	8002cc4 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e045      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006caa:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1f0      	bne.n	8006c98 <HAL_RCC_OscConfig+0x444>
 8006cb6:	e03d      	b.n	8006d34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d107      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e038      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
 8006cc4:	40023800 	.word	0x40023800
 8006cc8:	40007000 	.word	0x40007000
 8006ccc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006cd0:	4b1b      	ldr	r3, [pc, #108]	; (8006d40 <HAL_RCC_OscConfig+0x4ec>)
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d028      	beq.n	8006d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d121      	bne.n	8006d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d11a      	bne.n	8006d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d00:	4013      	ands	r3, r2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d111      	bne.n	8006d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d107      	bne.n	8006d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d001      	beq.n	8006d34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	40023800 	.word	0x40023800

08006d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e0cc      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d58:	4b68      	ldr	r3, [pc, #416]	; (8006efc <HAL_RCC_ClockConfig+0x1b8>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d90c      	bls.n	8006d80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d66:	4b65      	ldr	r3, [pc, #404]	; (8006efc <HAL_RCC_ClockConfig+0x1b8>)
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	b2d2      	uxtb	r2, r2
 8006d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d6e:	4b63      	ldr	r3, [pc, #396]	; (8006efc <HAL_RCC_ClockConfig+0x1b8>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0307 	and.w	r3, r3, #7
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d001      	beq.n	8006d80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e0b8      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d020      	beq.n	8006dce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0304 	and.w	r3, r3, #4
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d005      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d98:	4b59      	ldr	r3, [pc, #356]	; (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	4a58      	ldr	r2, [pc, #352]	; (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006da2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0308 	and.w	r3, r3, #8
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d005      	beq.n	8006dbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006db0:	4b53      	ldr	r3, [pc, #332]	; (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	4a52      	ldr	r2, [pc, #328]	; (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006db6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006dba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dbc:	4b50      	ldr	r3, [pc, #320]	; (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	494d      	ldr	r1, [pc, #308]	; (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d044      	beq.n	8006e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d107      	bne.n	8006df2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006de2:	4b47      	ldr	r3, [pc, #284]	; (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d119      	bne.n	8006e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e07f      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d003      	beq.n	8006e02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	d107      	bne.n	8006e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e02:	4b3f      	ldr	r3, [pc, #252]	; (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d109      	bne.n	8006e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e06f      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e12:	4b3b      	ldr	r3, [pc, #236]	; (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e067      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e22:	4b37      	ldr	r3, [pc, #220]	; (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f023 0203 	bic.w	r2, r3, #3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	4934      	ldr	r1, [pc, #208]	; (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e34:	f7fb ff46 	bl	8002cc4 <HAL_GetTick>
 8006e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e3a:	e00a      	b.n	8006e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e3c:	f7fb ff42 	bl	8002cc4 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e04f      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e52:	4b2b      	ldr	r3, [pc, #172]	; (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f003 020c 	and.w	r2, r3, #12
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d1eb      	bne.n	8006e3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e64:	4b25      	ldr	r3, [pc, #148]	; (8006efc <HAL_RCC_ClockConfig+0x1b8>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d20c      	bcs.n	8006e8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e72:	4b22      	ldr	r3, [pc, #136]	; (8006efc <HAL_RCC_ClockConfig+0x1b8>)
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e7a:	4b20      	ldr	r3, [pc, #128]	; (8006efc <HAL_RCC_ClockConfig+0x1b8>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0307 	and.w	r3, r3, #7
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d001      	beq.n	8006e8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e032      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d008      	beq.n	8006eaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e98:	4b19      	ldr	r3, [pc, #100]	; (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	4916      	ldr	r1, [pc, #88]	; (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0308 	and.w	r3, r3, #8
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d009      	beq.n	8006eca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006eb6:	4b12      	ldr	r3, [pc, #72]	; (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	490e      	ldr	r1, [pc, #56]	; (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006eca:	f000 f821 	bl	8006f10 <HAL_RCC_GetSysClockFreq>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	4b0b      	ldr	r3, [pc, #44]	; (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	091b      	lsrs	r3, r3, #4
 8006ed6:	f003 030f 	and.w	r3, r3, #15
 8006eda:	490a      	ldr	r1, [pc, #40]	; (8006f04 <HAL_RCC_ClockConfig+0x1c0>)
 8006edc:	5ccb      	ldrb	r3, [r1, r3]
 8006ede:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee2:	4a09      	ldr	r2, [pc, #36]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ee6:	4b09      	ldr	r3, [pc, #36]	; (8006f0c <HAL_RCC_ClockConfig+0x1c8>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fb fa90 	bl	8002410 <HAL_InitTick>

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	40023c00 	.word	0x40023c00
 8006f00:	40023800 	.word	0x40023800
 8006f04:	0800f300 	.word	0x0800f300
 8006f08:	20000000 	.word	0x20000000
 8006f0c:	20000004 	.word	0x20000004

08006f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f14:	b094      	sub	sp, #80	; 0x50
 8006f16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f20:	2300      	movs	r3, #0
 8006f22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f28:	4b79      	ldr	r3, [pc, #484]	; (8007110 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f003 030c 	and.w	r3, r3, #12
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d00d      	beq.n	8006f50 <HAL_RCC_GetSysClockFreq+0x40>
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	f200 80e1 	bhi.w	80070fc <HAL_RCC_GetSysClockFreq+0x1ec>
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <HAL_RCC_GetSysClockFreq+0x34>
 8006f3e:	2b04      	cmp	r3, #4
 8006f40:	d003      	beq.n	8006f4a <HAL_RCC_GetSysClockFreq+0x3a>
 8006f42:	e0db      	b.n	80070fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f44:	4b73      	ldr	r3, [pc, #460]	; (8007114 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006f48:	e0db      	b.n	8007102 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f4a:	4b73      	ldr	r3, [pc, #460]	; (8007118 <HAL_RCC_GetSysClockFreq+0x208>)
 8006f4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f4e:	e0d8      	b.n	8007102 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f50:	4b6f      	ldr	r3, [pc, #444]	; (8007110 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f5a:	4b6d      	ldr	r3, [pc, #436]	; (8007110 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d063      	beq.n	800702e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f66:	4b6a      	ldr	r3, [pc, #424]	; (8007110 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	099b      	lsrs	r3, r3, #6
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f78:	633b      	str	r3, [r7, #48]	; 0x30
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006f82:	4622      	mov	r2, r4
 8006f84:	462b      	mov	r3, r5
 8006f86:	f04f 0000 	mov.w	r0, #0
 8006f8a:	f04f 0100 	mov.w	r1, #0
 8006f8e:	0159      	lsls	r1, r3, #5
 8006f90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f94:	0150      	lsls	r0, r2, #5
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	1a51      	subs	r1, r2, r1
 8006f9e:	6139      	str	r1, [r7, #16]
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	eb63 0301 	sbc.w	r3, r3, r1
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	f04f 0300 	mov.w	r3, #0
 8006fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fb4:	4659      	mov	r1, fp
 8006fb6:	018b      	lsls	r3, r1, #6
 8006fb8:	4651      	mov	r1, sl
 8006fba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006fbe:	4651      	mov	r1, sl
 8006fc0:	018a      	lsls	r2, r1, #6
 8006fc2:	4651      	mov	r1, sl
 8006fc4:	ebb2 0801 	subs.w	r8, r2, r1
 8006fc8:	4659      	mov	r1, fp
 8006fca:	eb63 0901 	sbc.w	r9, r3, r1
 8006fce:	f04f 0200 	mov.w	r2, #0
 8006fd2:	f04f 0300 	mov.w	r3, #0
 8006fd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fe2:	4690      	mov	r8, r2
 8006fe4:	4699      	mov	r9, r3
 8006fe6:	4623      	mov	r3, r4
 8006fe8:	eb18 0303 	adds.w	r3, r8, r3
 8006fec:	60bb      	str	r3, [r7, #8]
 8006fee:	462b      	mov	r3, r5
 8006ff0:	eb49 0303 	adc.w	r3, r9, r3
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	f04f 0200 	mov.w	r2, #0
 8006ffa:	f04f 0300 	mov.w	r3, #0
 8006ffe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007002:	4629      	mov	r1, r5
 8007004:	024b      	lsls	r3, r1, #9
 8007006:	4621      	mov	r1, r4
 8007008:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800700c:	4621      	mov	r1, r4
 800700e:	024a      	lsls	r2, r1, #9
 8007010:	4610      	mov	r0, r2
 8007012:	4619      	mov	r1, r3
 8007014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007016:	2200      	movs	r2, #0
 8007018:	62bb      	str	r3, [r7, #40]	; 0x28
 800701a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800701c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007020:	f7f9 fe3a 	bl	8000c98 <__aeabi_uldivmod>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	4613      	mov	r3, r2
 800702a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800702c:	e058      	b.n	80070e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800702e:	4b38      	ldr	r3, [pc, #224]	; (8007110 <HAL_RCC_GetSysClockFreq+0x200>)
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	099b      	lsrs	r3, r3, #6
 8007034:	2200      	movs	r2, #0
 8007036:	4618      	mov	r0, r3
 8007038:	4611      	mov	r1, r2
 800703a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800703e:	623b      	str	r3, [r7, #32]
 8007040:	2300      	movs	r3, #0
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
 8007044:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007048:	4642      	mov	r2, r8
 800704a:	464b      	mov	r3, r9
 800704c:	f04f 0000 	mov.w	r0, #0
 8007050:	f04f 0100 	mov.w	r1, #0
 8007054:	0159      	lsls	r1, r3, #5
 8007056:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800705a:	0150      	lsls	r0, r2, #5
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4641      	mov	r1, r8
 8007062:	ebb2 0a01 	subs.w	sl, r2, r1
 8007066:	4649      	mov	r1, r9
 8007068:	eb63 0b01 	sbc.w	fp, r3, r1
 800706c:	f04f 0200 	mov.w	r2, #0
 8007070:	f04f 0300 	mov.w	r3, #0
 8007074:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007078:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800707c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007080:	ebb2 040a 	subs.w	r4, r2, sl
 8007084:	eb63 050b 	sbc.w	r5, r3, fp
 8007088:	f04f 0200 	mov.w	r2, #0
 800708c:	f04f 0300 	mov.w	r3, #0
 8007090:	00eb      	lsls	r3, r5, #3
 8007092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007096:	00e2      	lsls	r2, r4, #3
 8007098:	4614      	mov	r4, r2
 800709a:	461d      	mov	r5, r3
 800709c:	4643      	mov	r3, r8
 800709e:	18e3      	adds	r3, r4, r3
 80070a0:	603b      	str	r3, [r7, #0]
 80070a2:	464b      	mov	r3, r9
 80070a4:	eb45 0303 	adc.w	r3, r5, r3
 80070a8:	607b      	str	r3, [r7, #4]
 80070aa:	f04f 0200 	mov.w	r2, #0
 80070ae:	f04f 0300 	mov.w	r3, #0
 80070b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80070b6:	4629      	mov	r1, r5
 80070b8:	028b      	lsls	r3, r1, #10
 80070ba:	4621      	mov	r1, r4
 80070bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80070c0:	4621      	mov	r1, r4
 80070c2:	028a      	lsls	r2, r1, #10
 80070c4:	4610      	mov	r0, r2
 80070c6:	4619      	mov	r1, r3
 80070c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070ca:	2200      	movs	r2, #0
 80070cc:	61bb      	str	r3, [r7, #24]
 80070ce:	61fa      	str	r2, [r7, #28]
 80070d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070d4:	f7f9 fde0 	bl	8000c98 <__aeabi_uldivmod>
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	4613      	mov	r3, r2
 80070de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80070e0:	4b0b      	ldr	r3, [pc, #44]	; (8007110 <HAL_RCC_GetSysClockFreq+0x200>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	0c1b      	lsrs	r3, r3, #16
 80070e6:	f003 0303 	and.w	r3, r3, #3
 80070ea:	3301      	adds	r3, #1
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80070f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80070fa:	e002      	b.n	8007102 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070fc:	4b05      	ldr	r3, [pc, #20]	; (8007114 <HAL_RCC_GetSysClockFreq+0x204>)
 80070fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007100:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007104:	4618      	mov	r0, r3
 8007106:	3750      	adds	r7, #80	; 0x50
 8007108:	46bd      	mov	sp, r7
 800710a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800710e:	bf00      	nop
 8007110:	40023800 	.word	0x40023800
 8007114:	00f42400 	.word	0x00f42400
 8007118:	007a1200 	.word	0x007a1200

0800711c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800711c:	b480      	push	{r7}
 800711e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007120:	4b03      	ldr	r3, [pc, #12]	; (8007130 <HAL_RCC_GetHCLKFreq+0x14>)
 8007122:	681b      	ldr	r3, [r3, #0]
}
 8007124:	4618      	mov	r0, r3
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	20000000 	.word	0x20000000

08007134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007138:	f7ff fff0 	bl	800711c <HAL_RCC_GetHCLKFreq>
 800713c:	4602      	mov	r2, r0
 800713e:	4b05      	ldr	r3, [pc, #20]	; (8007154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	0a9b      	lsrs	r3, r3, #10
 8007144:	f003 0307 	and.w	r3, r3, #7
 8007148:	4903      	ldr	r1, [pc, #12]	; (8007158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800714a:	5ccb      	ldrb	r3, [r1, r3]
 800714c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007150:	4618      	mov	r0, r3
 8007152:	bd80      	pop	{r7, pc}
 8007154:	40023800 	.word	0x40023800
 8007158:	0800f310 	.word	0x0800f310

0800715c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007160:	f7ff ffdc 	bl	800711c <HAL_RCC_GetHCLKFreq>
 8007164:	4602      	mov	r2, r0
 8007166:	4b05      	ldr	r3, [pc, #20]	; (800717c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	0b5b      	lsrs	r3, r3, #13
 800716c:	f003 0307 	and.w	r3, r3, #7
 8007170:	4903      	ldr	r1, [pc, #12]	; (8007180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007172:	5ccb      	ldrb	r3, [r1, r3]
 8007174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007178:	4618      	mov	r0, r3
 800717a:	bd80      	pop	{r7, pc}
 800717c:	40023800 	.word	0x40023800
 8007180:	0800f310 	.word	0x0800f310

08007184 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	220f      	movs	r2, #15
 8007192:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007194:	4b12      	ldr	r3, [pc, #72]	; (80071e0 <HAL_RCC_GetClockConfig+0x5c>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f003 0203 	and.w	r2, r3, #3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80071a0:	4b0f      	ldr	r3, [pc, #60]	; (80071e0 <HAL_RCC_GetClockConfig+0x5c>)
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80071ac:	4b0c      	ldr	r3, [pc, #48]	; (80071e0 <HAL_RCC_GetClockConfig+0x5c>)
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80071b8:	4b09      	ldr	r3, [pc, #36]	; (80071e0 <HAL_RCC_GetClockConfig+0x5c>)
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	08db      	lsrs	r3, r3, #3
 80071be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80071c6:	4b07      	ldr	r3, [pc, #28]	; (80071e4 <HAL_RCC_GetClockConfig+0x60>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0207 	and.w	r2, r3, #7
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	601a      	str	r2, [r3, #0]
}
 80071d2:	bf00      	nop
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	40023800 	.word	0x40023800
 80071e4:	40023c00 	.word	0x40023c00

080071e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e041      	b.n	800727e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d106      	bne.n	8007214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f839 	bl	8007286 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2202      	movs	r2, #2
 8007218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3304      	adds	r3, #4
 8007224:	4619      	mov	r1, r3
 8007226:	4610      	mov	r0, r2
 8007228:	f000 fb8c 	bl	8007944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007286:	b480      	push	{r7}
 8007288:	b083      	sub	sp, #12
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800728e:	bf00      	nop
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
	...

0800729c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d001      	beq.n	80072b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e044      	b.n	800733e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2202      	movs	r2, #2
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 0201 	orr.w	r2, r2, #1
 80072ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a1e      	ldr	r2, [pc, #120]	; (800734c <HAL_TIM_Base_Start_IT+0xb0>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d018      	beq.n	8007308 <HAL_TIM_Base_Start_IT+0x6c>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072de:	d013      	beq.n	8007308 <HAL_TIM_Base_Start_IT+0x6c>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a1a      	ldr	r2, [pc, #104]	; (8007350 <HAL_TIM_Base_Start_IT+0xb4>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d00e      	beq.n	8007308 <HAL_TIM_Base_Start_IT+0x6c>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a19      	ldr	r2, [pc, #100]	; (8007354 <HAL_TIM_Base_Start_IT+0xb8>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d009      	beq.n	8007308 <HAL_TIM_Base_Start_IT+0x6c>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a17      	ldr	r2, [pc, #92]	; (8007358 <HAL_TIM_Base_Start_IT+0xbc>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d004      	beq.n	8007308 <HAL_TIM_Base_Start_IT+0x6c>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a16      	ldr	r2, [pc, #88]	; (800735c <HAL_TIM_Base_Start_IT+0xc0>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d111      	bne.n	800732c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f003 0307 	and.w	r3, r3, #7
 8007312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2b06      	cmp	r3, #6
 8007318:	d010      	beq.n	800733c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f042 0201 	orr.w	r2, r2, #1
 8007328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800732a:	e007      	b.n	800733c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f042 0201 	orr.w	r2, r2, #1
 800733a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	40010000 	.word	0x40010000
 8007350:	40000400 	.word	0x40000400
 8007354:	40000800 	.word	0x40000800
 8007358:	40000c00 	.word	0x40000c00
 800735c:	40014000 	.word	0x40014000

08007360 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e041      	b.n	80073f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d106      	bne.n	800738c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7fb fab0 	bl	80028ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2202      	movs	r2, #2
 8007390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	3304      	adds	r3, #4
 800739c:	4619      	mov	r1, r3
 800739e:	4610      	mov	r0, r2
 80073a0:	f000 fad0 	bl	8007944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d109      	bne.n	8007424 <HAL_TIM_PWM_Start+0x24>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b01      	cmp	r3, #1
 800741a:	bf14      	ite	ne
 800741c:	2301      	movne	r3, #1
 800741e:	2300      	moveq	r3, #0
 8007420:	b2db      	uxtb	r3, r3
 8007422:	e022      	b.n	800746a <HAL_TIM_PWM_Start+0x6a>
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	2b04      	cmp	r3, #4
 8007428:	d109      	bne.n	800743e <HAL_TIM_PWM_Start+0x3e>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b01      	cmp	r3, #1
 8007434:	bf14      	ite	ne
 8007436:	2301      	movne	r3, #1
 8007438:	2300      	moveq	r3, #0
 800743a:	b2db      	uxtb	r3, r3
 800743c:	e015      	b.n	800746a <HAL_TIM_PWM_Start+0x6a>
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b08      	cmp	r3, #8
 8007442:	d109      	bne.n	8007458 <HAL_TIM_PWM_Start+0x58>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b01      	cmp	r3, #1
 800744e:	bf14      	ite	ne
 8007450:	2301      	movne	r3, #1
 8007452:	2300      	moveq	r3, #0
 8007454:	b2db      	uxtb	r3, r3
 8007456:	e008      	b.n	800746a <HAL_TIM_PWM_Start+0x6a>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b01      	cmp	r3, #1
 8007462:	bf14      	ite	ne
 8007464:	2301      	movne	r3, #1
 8007466:	2300      	moveq	r3, #0
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e068      	b.n	8007544 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d104      	bne.n	8007482 <HAL_TIM_PWM_Start+0x82>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007480:	e013      	b.n	80074aa <HAL_TIM_PWM_Start+0xaa>
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b04      	cmp	r3, #4
 8007486:	d104      	bne.n	8007492 <HAL_TIM_PWM_Start+0x92>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2202      	movs	r2, #2
 800748c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007490:	e00b      	b.n	80074aa <HAL_TIM_PWM_Start+0xaa>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b08      	cmp	r3, #8
 8007496:	d104      	bne.n	80074a2 <HAL_TIM_PWM_Start+0xa2>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074a0:	e003      	b.n	80074aa <HAL_TIM_PWM_Start+0xaa>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2202      	movs	r2, #2
 80074a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2201      	movs	r2, #1
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 fc52 	bl	8007d5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a23      	ldr	r2, [pc, #140]	; (800754c <HAL_TIM_PWM_Start+0x14c>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d107      	bne.n	80074d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a1d      	ldr	r2, [pc, #116]	; (800754c <HAL_TIM_PWM_Start+0x14c>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d018      	beq.n	800750e <HAL_TIM_PWM_Start+0x10e>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074e4:	d013      	beq.n	800750e <HAL_TIM_PWM_Start+0x10e>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a19      	ldr	r2, [pc, #100]	; (8007550 <HAL_TIM_PWM_Start+0x150>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d00e      	beq.n	800750e <HAL_TIM_PWM_Start+0x10e>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a17      	ldr	r2, [pc, #92]	; (8007554 <HAL_TIM_PWM_Start+0x154>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d009      	beq.n	800750e <HAL_TIM_PWM_Start+0x10e>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a16      	ldr	r2, [pc, #88]	; (8007558 <HAL_TIM_PWM_Start+0x158>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d004      	beq.n	800750e <HAL_TIM_PWM_Start+0x10e>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a14      	ldr	r2, [pc, #80]	; (800755c <HAL_TIM_PWM_Start+0x15c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d111      	bne.n	8007532 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f003 0307 	and.w	r3, r3, #7
 8007518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2b06      	cmp	r3, #6
 800751e:	d010      	beq.n	8007542 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f042 0201 	orr.w	r2, r2, #1
 800752e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007530:	e007      	b.n	8007542 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f042 0201 	orr.w	r2, r2, #1
 8007540:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	40010000 	.word	0x40010000
 8007550:	40000400 	.word	0x40000400
 8007554:	40000800 	.word	0x40000800
 8007558:	40000c00 	.word	0x40000c00
 800755c:	40014000 	.word	0x40014000

08007560 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b02      	cmp	r3, #2
 8007574:	d122      	bne.n	80075bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b02      	cmp	r3, #2
 8007582:	d11b      	bne.n	80075bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f06f 0202 	mvn.w	r2, #2
 800758c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	f003 0303 	and.w	r3, r3, #3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f9b0 	bl	8007908 <HAL_TIM_IC_CaptureCallback>
 80075a8:	e005      	b.n	80075b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f9a2 	bl	80078f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f9b3 	bl	800791c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f003 0304 	and.w	r3, r3, #4
 80075c6:	2b04      	cmp	r3, #4
 80075c8:	d122      	bne.n	8007610 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	f003 0304 	and.w	r3, r3, #4
 80075d4:	2b04      	cmp	r3, #4
 80075d6:	d11b      	bne.n	8007610 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f06f 0204 	mvn.w	r2, #4
 80075e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2202      	movs	r2, #2
 80075e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f986 	bl	8007908 <HAL_TIM_IC_CaptureCallback>
 80075fc:	e005      	b.n	800760a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f978 	bl	80078f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f989 	bl	800791c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f003 0308 	and.w	r3, r3, #8
 800761a:	2b08      	cmp	r3, #8
 800761c:	d122      	bne.n	8007664 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f003 0308 	and.w	r3, r3, #8
 8007628:	2b08      	cmp	r3, #8
 800762a:	d11b      	bne.n	8007664 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f06f 0208 	mvn.w	r2, #8
 8007634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2204      	movs	r2, #4
 800763a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	f003 0303 	and.w	r3, r3, #3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f95c 	bl	8007908 <HAL_TIM_IC_CaptureCallback>
 8007650:	e005      	b.n	800765e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f94e 	bl	80078f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f95f 	bl	800791c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	f003 0310 	and.w	r3, r3, #16
 800766e:	2b10      	cmp	r3, #16
 8007670:	d122      	bne.n	80076b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	f003 0310 	and.w	r3, r3, #16
 800767c:	2b10      	cmp	r3, #16
 800767e:	d11b      	bne.n	80076b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f06f 0210 	mvn.w	r2, #16
 8007688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2208      	movs	r2, #8
 800768e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f932 	bl	8007908 <HAL_TIM_IC_CaptureCallback>
 80076a4:	e005      	b.n	80076b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f924 	bl	80078f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f935 	bl	800791c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d10e      	bne.n	80076e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d107      	bne.n	80076e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f06f 0201 	mvn.w	r2, #1
 80076dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7fa fd56 	bl	8002190 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ee:	2b80      	cmp	r3, #128	; 0x80
 80076f0:	d10e      	bne.n	8007710 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076fc:	2b80      	cmp	r3, #128	; 0x80
 80076fe:	d107      	bne.n	8007710 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fbc4 	bl	8007e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800771a:	2b40      	cmp	r3, #64	; 0x40
 800771c:	d10e      	bne.n	800773c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007728:	2b40      	cmp	r3, #64	; 0x40
 800772a:	d107      	bne.n	800773c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f8fa 	bl	8007930 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	f003 0320 	and.w	r3, r3, #32
 8007746:	2b20      	cmp	r3, #32
 8007748:	d10e      	bne.n	8007768 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b20      	cmp	r3, #32
 8007756:	d107      	bne.n	8007768 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f06f 0220 	mvn.w	r2, #32
 8007760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fb8e 	bl	8007e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007768:	bf00      	nop
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007786:	2b01      	cmp	r3, #1
 8007788:	d101      	bne.n	800778e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800778a:	2302      	movs	r3, #2
 800778c:	e0ae      	b.n	80078ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b0c      	cmp	r3, #12
 800779a:	f200 809f 	bhi.w	80078dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800779e:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a4:	080077d9 	.word	0x080077d9
 80077a8:	080078dd 	.word	0x080078dd
 80077ac:	080078dd 	.word	0x080078dd
 80077b0:	080078dd 	.word	0x080078dd
 80077b4:	08007819 	.word	0x08007819
 80077b8:	080078dd 	.word	0x080078dd
 80077bc:	080078dd 	.word	0x080078dd
 80077c0:	080078dd 	.word	0x080078dd
 80077c4:	0800785b 	.word	0x0800785b
 80077c8:	080078dd 	.word	0x080078dd
 80077cc:	080078dd 	.word	0x080078dd
 80077d0:	080078dd 	.word	0x080078dd
 80077d4:	0800789b 	.word	0x0800789b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68b9      	ldr	r1, [r7, #8]
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 f930 	bl	8007a44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	699a      	ldr	r2, [r3, #24]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f042 0208 	orr.w	r2, r2, #8
 80077f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699a      	ldr	r2, [r3, #24]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 0204 	bic.w	r2, r2, #4
 8007802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6999      	ldr	r1, [r3, #24]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	691a      	ldr	r2, [r3, #16]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	619a      	str	r2, [r3, #24]
      break;
 8007816:	e064      	b.n	80078e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68b9      	ldr	r1, [r7, #8]
 800781e:	4618      	mov	r0, r3
 8007820:	f000 f976 	bl	8007b10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699a      	ldr	r2, [r3, #24]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699a      	ldr	r2, [r3, #24]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6999      	ldr	r1, [r3, #24]
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	021a      	lsls	r2, r3, #8
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	430a      	orrs	r2, r1
 8007856:	619a      	str	r2, [r3, #24]
      break;
 8007858:	e043      	b.n	80078e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68b9      	ldr	r1, [r7, #8]
 8007860:	4618      	mov	r0, r3
 8007862:	f000 f9c1 	bl	8007be8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	69da      	ldr	r2, [r3, #28]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f042 0208 	orr.w	r2, r2, #8
 8007874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	69da      	ldr	r2, [r3, #28]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 0204 	bic.w	r2, r2, #4
 8007884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	69d9      	ldr	r1, [r3, #28]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	691a      	ldr	r2, [r3, #16]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	430a      	orrs	r2, r1
 8007896:	61da      	str	r2, [r3, #28]
      break;
 8007898:	e023      	b.n	80078e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68b9      	ldr	r1, [r7, #8]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 fa0b 	bl	8007cbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	69da      	ldr	r2, [r3, #28]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	69da      	ldr	r2, [r3, #28]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	69d9      	ldr	r1, [r3, #28]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	021a      	lsls	r2, r3, #8
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	61da      	str	r2, [r3, #28]
      break;
 80078da:	e002      	b.n	80078e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	75fb      	strb	r3, [r7, #23]
      break;
 80078e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3718      	adds	r7, #24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a34      	ldr	r2, [pc, #208]	; (8007a28 <TIM_Base_SetConfig+0xe4>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d00f      	beq.n	800797c <TIM_Base_SetConfig+0x38>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007962:	d00b      	beq.n	800797c <TIM_Base_SetConfig+0x38>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a31      	ldr	r2, [pc, #196]	; (8007a2c <TIM_Base_SetConfig+0xe8>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d007      	beq.n	800797c <TIM_Base_SetConfig+0x38>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a30      	ldr	r2, [pc, #192]	; (8007a30 <TIM_Base_SetConfig+0xec>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d003      	beq.n	800797c <TIM_Base_SetConfig+0x38>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a2f      	ldr	r2, [pc, #188]	; (8007a34 <TIM_Base_SetConfig+0xf0>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d108      	bne.n	800798e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	4313      	orrs	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a25      	ldr	r2, [pc, #148]	; (8007a28 <TIM_Base_SetConfig+0xe4>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d01b      	beq.n	80079ce <TIM_Base_SetConfig+0x8a>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800799c:	d017      	beq.n	80079ce <TIM_Base_SetConfig+0x8a>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a22      	ldr	r2, [pc, #136]	; (8007a2c <TIM_Base_SetConfig+0xe8>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d013      	beq.n	80079ce <TIM_Base_SetConfig+0x8a>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a21      	ldr	r2, [pc, #132]	; (8007a30 <TIM_Base_SetConfig+0xec>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d00f      	beq.n	80079ce <TIM_Base_SetConfig+0x8a>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a20      	ldr	r2, [pc, #128]	; (8007a34 <TIM_Base_SetConfig+0xf0>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d00b      	beq.n	80079ce <TIM_Base_SetConfig+0x8a>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a1f      	ldr	r2, [pc, #124]	; (8007a38 <TIM_Base_SetConfig+0xf4>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d007      	beq.n	80079ce <TIM_Base_SetConfig+0x8a>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a1e      	ldr	r2, [pc, #120]	; (8007a3c <TIM_Base_SetConfig+0xf8>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d003      	beq.n	80079ce <TIM_Base_SetConfig+0x8a>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a1d      	ldr	r2, [pc, #116]	; (8007a40 <TIM_Base_SetConfig+0xfc>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d108      	bne.n	80079e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	4313      	orrs	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	689a      	ldr	r2, [r3, #8]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a08      	ldr	r2, [pc, #32]	; (8007a28 <TIM_Base_SetConfig+0xe4>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d103      	bne.n	8007a14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	691a      	ldr	r2, [r3, #16]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	615a      	str	r2, [r3, #20]
}
 8007a1a:	bf00      	nop
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	40010000 	.word	0x40010000
 8007a2c:	40000400 	.word	0x40000400
 8007a30:	40000800 	.word	0x40000800
 8007a34:	40000c00 	.word	0x40000c00
 8007a38:	40014000 	.word	0x40014000
 8007a3c:	40014400 	.word	0x40014400
 8007a40:	40014800 	.word	0x40014800

08007a44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b087      	sub	sp, #28
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	f023 0201 	bic.w	r2, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 0303 	bic.w	r3, r3, #3
 8007a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f023 0302 	bic.w	r3, r3, #2
 8007a8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a1c      	ldr	r2, [pc, #112]	; (8007b0c <TIM_OC1_SetConfig+0xc8>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d10c      	bne.n	8007aba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f023 0308 	bic.w	r3, r3, #8
 8007aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f023 0304 	bic.w	r3, r3, #4
 8007ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a13      	ldr	r2, [pc, #76]	; (8007b0c <TIM_OC1_SetConfig+0xc8>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d111      	bne.n	8007ae6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	621a      	str	r2, [r3, #32]
}
 8007b00:	bf00      	nop
 8007b02:	371c      	adds	r7, #28
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	40010000 	.word	0x40010000

08007b10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b087      	sub	sp, #28
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	f023 0210 	bic.w	r2, r3, #16
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	021b      	lsls	r3, r3, #8
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f023 0320 	bic.w	r3, r3, #32
 8007b5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	011b      	lsls	r3, r3, #4
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a1e      	ldr	r2, [pc, #120]	; (8007be4 <TIM_OC2_SetConfig+0xd4>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d10d      	bne.n	8007b8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	011b      	lsls	r3, r3, #4
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a15      	ldr	r2, [pc, #84]	; (8007be4 <TIM_OC2_SetConfig+0xd4>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d113      	bne.n	8007bbc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	695b      	ldr	r3, [r3, #20]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	621a      	str	r2, [r3, #32]
}
 8007bd6:	bf00      	nop
 8007bd8:	371c      	adds	r7, #28
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	40010000 	.word	0x40010000

08007be8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b087      	sub	sp, #28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f023 0303 	bic.w	r3, r3, #3
 8007c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	021b      	lsls	r3, r3, #8
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a1d      	ldr	r2, [pc, #116]	; (8007cb8 <TIM_OC3_SetConfig+0xd0>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d10d      	bne.n	8007c62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	021b      	lsls	r3, r3, #8
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a14      	ldr	r2, [pc, #80]	; (8007cb8 <TIM_OC3_SetConfig+0xd0>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d113      	bne.n	8007c92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	011b      	lsls	r3, r3, #4
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	621a      	str	r2, [r3, #32]
}
 8007cac:	bf00      	nop
 8007cae:	371c      	adds	r7, #28
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr
 8007cb8:	40010000 	.word	0x40010000

08007cbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	69db      	ldr	r3, [r3, #28]
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	021b      	lsls	r3, r3, #8
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	031b      	lsls	r3, r3, #12
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a10      	ldr	r2, [pc, #64]	; (8007d58 <TIM_OC4_SetConfig+0x9c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d109      	bne.n	8007d30 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	019b      	lsls	r3, r3, #6
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	621a      	str	r2, [r3, #32]
}
 8007d4a:	bf00      	nop
 8007d4c:	371c      	adds	r7, #28
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	40010000 	.word	0x40010000

08007d5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f003 031f 	and.w	r3, r3, #31
 8007d6e:	2201      	movs	r2, #1
 8007d70:	fa02 f303 	lsl.w	r3, r2, r3
 8007d74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6a1a      	ldr	r2, [r3, #32]
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	43db      	mvns	r3, r3
 8007d7e:	401a      	ands	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6a1a      	ldr	r2, [r3, #32]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f003 031f 	and.w	r3, r3, #31
 8007d8e:	6879      	ldr	r1, [r7, #4]
 8007d90:	fa01 f303 	lsl.w	r3, r1, r3
 8007d94:	431a      	orrs	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	621a      	str	r2, [r3, #32]
}
 8007d9a:	bf00      	nop
 8007d9c:	371c      	adds	r7, #28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
	...

08007da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d101      	bne.n	8007dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	e050      	b.n	8007e62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a1c      	ldr	r2, [pc, #112]	; (8007e70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d018      	beq.n	8007e36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e0c:	d013      	beq.n	8007e36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a18      	ldr	r2, [pc, #96]	; (8007e74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d00e      	beq.n	8007e36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a16      	ldr	r2, [pc, #88]	; (8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d009      	beq.n	8007e36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a15      	ldr	r2, [pc, #84]	; (8007e7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d004      	beq.n	8007e36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a13      	ldr	r2, [pc, #76]	; (8007e80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d10c      	bne.n	8007e50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	40010000 	.word	0x40010000
 8007e74:	40000400 	.word	0x40000400
 8007e78:	40000800 	.word	0x40000800
 8007e7c:	40000c00 	.word	0x40000c00
 8007e80:	40014000 	.word	0x40014000

08007e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e03f      	b.n	8007f3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d106      	bne.n	8007ed8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7fa fdf2 	bl	8002abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2224      	movs	r2, #36	; 0x24
 8007edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68da      	ldr	r2, [r3, #12]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007eee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fde9 	bl	8008ac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	691a      	ldr	r2, [r3, #16]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	695a      	ldr	r2, [r3, #20]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68da      	ldr	r2, [r3, #12]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2220      	movs	r2, #32
 8007f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b08a      	sub	sp, #40	; 0x28
 8007f4a:	af02      	add	r7, sp, #8
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	603b      	str	r3, [r7, #0]
 8007f52:	4613      	mov	r3, r2
 8007f54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f56:	2300      	movs	r3, #0
 8007f58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b20      	cmp	r3, #32
 8007f64:	d17c      	bne.n	8008060 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d002      	beq.n	8007f72 <HAL_UART_Transmit+0x2c>
 8007f6c:	88fb      	ldrh	r3, [r7, #6]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e075      	b.n	8008062 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d101      	bne.n	8007f84 <HAL_UART_Transmit+0x3e>
 8007f80:	2302      	movs	r3, #2
 8007f82:	e06e      	b.n	8008062 <HAL_UART_Transmit+0x11c>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2221      	movs	r2, #33	; 0x21
 8007f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f9a:	f7fa fe93 	bl	8002cc4 <HAL_GetTick>
 8007f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	88fa      	ldrh	r2, [r7, #6]
 8007fa4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	88fa      	ldrh	r2, [r7, #6]
 8007faa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fb4:	d108      	bne.n	8007fc8 <HAL_UART_Transmit+0x82>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d104      	bne.n	8007fc8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	61bb      	str	r3, [r7, #24]
 8007fc6:	e003      	b.n	8007fd0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007fd8:	e02a      	b.n	8008030 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2180      	movs	r1, #128	; 0x80
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f000 fb29 	bl	800863c <UART_WaitOnFlagUntilTimeout>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d001      	beq.n	8007ff4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e036      	b.n	8008062 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10b      	bne.n	8008012 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	461a      	mov	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008008:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	3302      	adds	r3, #2
 800800e:	61bb      	str	r3, [r7, #24]
 8008010:	e007      	b.n	8008022 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	781a      	ldrb	r2, [r3, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	3301      	adds	r3, #1
 8008020:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008026:	b29b      	uxth	r3, r3
 8008028:	3b01      	subs	r3, #1
 800802a:	b29a      	uxth	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008034:	b29b      	uxth	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1cf      	bne.n	8007fda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2200      	movs	r2, #0
 8008042:	2140      	movs	r1, #64	; 0x40
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 faf9 	bl	800863c <UART_WaitOnFlagUntilTimeout>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e006      	b.n	8008062 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2220      	movs	r2, #32
 8008058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800805c:	2300      	movs	r3, #0
 800805e:	e000      	b.n	8008062 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008060:	2302      	movs	r3, #2
  }
}
 8008062:	4618      	mov	r0, r3
 8008064:	3720      	adds	r7, #32
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b084      	sub	sp, #16
 800806e:	af00      	add	r7, sp, #0
 8008070:	60f8      	str	r0, [r7, #12]
 8008072:	60b9      	str	r1, [r7, #8]
 8008074:	4613      	mov	r3, r2
 8008076:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b20      	cmp	r3, #32
 8008082:	d11d      	bne.n	80080c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d002      	beq.n	8008090 <HAL_UART_Receive_IT+0x26>
 800808a:	88fb      	ldrh	r3, [r7, #6]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e016      	b.n	80080c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800809a:	2b01      	cmp	r3, #1
 800809c:	d101      	bne.n	80080a2 <HAL_UART_Receive_IT+0x38>
 800809e:	2302      	movs	r3, #2
 80080a0:	e00f      	b.n	80080c2 <HAL_UART_Receive_IT+0x58>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80080b0:	88fb      	ldrh	r3, [r7, #6]
 80080b2:	461a      	mov	r2, r3
 80080b4:	68b9      	ldr	r1, [r7, #8]
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 fb2e 	bl	8008718 <UART_Start_Receive_IT>
 80080bc:	4603      	mov	r3, r0
 80080be:	e000      	b.n	80080c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80080c0:	2302      	movs	r3, #2
  }
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
	...

080080cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b0ba      	sub	sp, #232	; 0xe8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80080f2:	2300      	movs	r3, #0
 80080f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80080f8:	2300      	movs	r3, #0
 80080fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80080fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008102:	f003 030f 	and.w	r3, r3, #15
 8008106:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800810a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10f      	bne.n	8008132 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008116:	f003 0320 	and.w	r3, r3, #32
 800811a:	2b00      	cmp	r3, #0
 800811c:	d009      	beq.n	8008132 <HAL_UART_IRQHandler+0x66>
 800811e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fc11 	bl	8008952 <UART_Receive_IT>
      return;
 8008130:	e256      	b.n	80085e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008136:	2b00      	cmp	r3, #0
 8008138:	f000 80de 	beq.w	80082f8 <HAL_UART_IRQHandler+0x22c>
 800813c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008140:	f003 0301 	and.w	r3, r3, #1
 8008144:	2b00      	cmp	r3, #0
 8008146:	d106      	bne.n	8008156 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800814c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 80d1 	beq.w	80082f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00b      	beq.n	800817a <HAL_UART_IRQHandler+0xae>
 8008162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800816a:	2b00      	cmp	r3, #0
 800816c:	d005      	beq.n	800817a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	f043 0201 	orr.w	r2, r3, #1
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800817a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800817e:	f003 0304 	and.w	r3, r3, #4
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00b      	beq.n	800819e <HAL_UART_IRQHandler+0xd2>
 8008186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	2b00      	cmp	r3, #0
 8008190:	d005      	beq.n	800819e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008196:	f043 0202 	orr.w	r2, r3, #2
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800819e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081a2:	f003 0302 	and.w	r3, r3, #2
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00b      	beq.n	80081c2 <HAL_UART_IRQHandler+0xf6>
 80081aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d005      	beq.n	80081c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ba:	f043 0204 	orr.w	r2, r3, #4
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80081c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c6:	f003 0308 	and.w	r3, r3, #8
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d011      	beq.n	80081f2 <HAL_UART_IRQHandler+0x126>
 80081ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081d2:	f003 0320 	and.w	r3, r3, #32
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d105      	bne.n	80081e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80081da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081de:	f003 0301 	and.w	r3, r3, #1
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d005      	beq.n	80081f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ea:	f043 0208 	orr.w	r2, r3, #8
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f000 81ed 	beq.w	80085d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008200:	f003 0320 	and.w	r3, r3, #32
 8008204:	2b00      	cmp	r3, #0
 8008206:	d008      	beq.n	800821a <HAL_UART_IRQHandler+0x14e>
 8008208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800820c:	f003 0320 	and.w	r3, r3, #32
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fb9c 	bl	8008952 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008224:	2b40      	cmp	r3, #64	; 0x40
 8008226:	bf0c      	ite	eq
 8008228:	2301      	moveq	r3, #1
 800822a:	2300      	movne	r3, #0
 800822c:	b2db      	uxtb	r3, r3
 800822e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008236:	f003 0308 	and.w	r3, r3, #8
 800823a:	2b00      	cmp	r3, #0
 800823c:	d103      	bne.n	8008246 <HAL_UART_IRQHandler+0x17a>
 800823e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008242:	2b00      	cmp	r3, #0
 8008244:	d04f      	beq.n	80082e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 faa4 	bl	8008794 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008256:	2b40      	cmp	r3, #64	; 0x40
 8008258:	d141      	bne.n	80082de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3314      	adds	r3, #20
 8008260:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008264:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008268:	e853 3f00 	ldrex	r3, [r3]
 800826c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008270:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008278:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	3314      	adds	r3, #20
 8008282:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008286:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800828a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008292:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008296:	e841 2300 	strex	r3, r2, [r1]
 800829a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800829e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1d9      	bne.n	800825a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d013      	beq.n	80082d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b2:	4a7d      	ldr	r2, [pc, #500]	; (80084a8 <HAL_UART_IRQHandler+0x3dc>)
 80082b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fa fe84 	bl	8002fc8 <HAL_DMA_Abort_IT>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d016      	beq.n	80082f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80082d0:	4610      	mov	r0, r2
 80082d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d4:	e00e      	b.n	80082f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f99a 	bl	8008610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082dc:	e00a      	b.n	80082f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f996 	bl	8008610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082e4:	e006      	b.n	80082f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f992 	bl	8008610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80082f2:	e170      	b.n	80085d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082f4:	bf00      	nop
    return;
 80082f6:	e16e      	b.n	80085d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	f040 814a 	bne.w	8008596 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008306:	f003 0310 	and.w	r3, r3, #16
 800830a:	2b00      	cmp	r3, #0
 800830c:	f000 8143 	beq.w	8008596 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008314:	f003 0310 	and.w	r3, r3, #16
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 813c 	beq.w	8008596 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800831e:	2300      	movs	r3, #0
 8008320:	60bb      	str	r3, [r7, #8]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	60bb      	str	r3, [r7, #8]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	60bb      	str	r3, [r7, #8]
 8008332:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833e:	2b40      	cmp	r3, #64	; 0x40
 8008340:	f040 80b4 	bne.w	80084ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008350:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 8140 	beq.w	80085da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800835e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008362:	429a      	cmp	r2, r3
 8008364:	f080 8139 	bcs.w	80085da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800836e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800837a:	f000 8088 	beq.w	800848e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	330c      	adds	r3, #12
 8008384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008388:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800838c:	e853 3f00 	ldrex	r3, [r3]
 8008390:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008394:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800839c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	330c      	adds	r3, #12
 80083a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80083aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80083b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80083ba:	e841 2300 	strex	r3, r2, [r1]
 80083be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80083c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1d9      	bne.n	800837e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3314      	adds	r3, #20
 80083d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083d4:	e853 3f00 	ldrex	r3, [r3]
 80083d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80083da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083dc:	f023 0301 	bic.w	r3, r3, #1
 80083e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	3314      	adds	r3, #20
 80083ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80083f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80083f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80083fa:	e841 2300 	strex	r3, r2, [r1]
 80083fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1e1      	bne.n	80083ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3314      	adds	r3, #20
 800840c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008410:	e853 3f00 	ldrex	r3, [r3]
 8008414:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800841c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3314      	adds	r3, #20
 8008426:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800842a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800842c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008430:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008432:	e841 2300 	strex	r3, r2, [r1]
 8008436:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008438:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1e3      	bne.n	8008406 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2220      	movs	r2, #32
 8008442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	330c      	adds	r3, #12
 8008452:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008456:	e853 3f00 	ldrex	r3, [r3]
 800845a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800845c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800845e:	f023 0310 	bic.w	r3, r3, #16
 8008462:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	330c      	adds	r3, #12
 800846c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008470:	65ba      	str	r2, [r7, #88]	; 0x58
 8008472:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008474:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008476:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008478:	e841 2300 	strex	r3, r2, [r1]
 800847c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800847e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1e3      	bne.n	800844c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008488:	4618      	mov	r0, r3
 800848a:	f7fa fd2d 	bl	8002ee8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008496:	b29b      	uxth	r3, r3
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	b29b      	uxth	r3, r3
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f8c0 	bl	8008624 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084a4:	e099      	b.n	80085da <HAL_UART_IRQHandler+0x50e>
 80084a6:	bf00      	nop
 80084a8:	0800885b 	.word	0x0800885b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 808b 	beq.w	80085de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80084c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 8086 	beq.w	80085de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	330c      	adds	r3, #12
 80084d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084dc:	e853 3f00 	ldrex	r3, [r3]
 80084e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	330c      	adds	r3, #12
 80084f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80084f6:	647a      	str	r2, [r7, #68]	; 0x44
 80084f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084fe:	e841 2300 	strex	r3, r2, [r1]
 8008502:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e3      	bne.n	80084d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3314      	adds	r3, #20
 8008510:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008514:	e853 3f00 	ldrex	r3, [r3]
 8008518:	623b      	str	r3, [r7, #32]
   return(result);
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	f023 0301 	bic.w	r3, r3, #1
 8008520:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3314      	adds	r3, #20
 800852a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800852e:	633a      	str	r2, [r7, #48]	; 0x30
 8008530:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008536:	e841 2300 	strex	r3, r2, [r1]
 800853a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800853c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e3      	bne.n	800850a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2220      	movs	r2, #32
 8008546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	330c      	adds	r3, #12
 8008556:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	e853 3f00 	ldrex	r3, [r3]
 800855e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f023 0310 	bic.w	r3, r3, #16
 8008566:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	330c      	adds	r3, #12
 8008570:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008574:	61fa      	str	r2, [r7, #28]
 8008576:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008578:	69b9      	ldr	r1, [r7, #24]
 800857a:	69fa      	ldr	r2, [r7, #28]
 800857c:	e841 2300 	strex	r3, r2, [r1]
 8008580:	617b      	str	r3, [r7, #20]
   return(result);
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e3      	bne.n	8008550 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008588:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800858c:	4619      	mov	r1, r3
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f848 	bl	8008624 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008594:	e023      	b.n	80085de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800859a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d009      	beq.n	80085b6 <HAL_UART_IRQHandler+0x4ea>
 80085a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d003      	beq.n	80085b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f967 	bl	8008882 <UART_Transmit_IT>
    return;
 80085b4:	e014      	b.n	80085e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80085b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00e      	beq.n	80085e0 <HAL_UART_IRQHandler+0x514>
 80085c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d008      	beq.n	80085e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f9a7 	bl	8008922 <UART_EndTransmit_IT>
    return;
 80085d4:	e004      	b.n	80085e0 <HAL_UART_IRQHandler+0x514>
    return;
 80085d6:	bf00      	nop
 80085d8:	e002      	b.n	80085e0 <HAL_UART_IRQHandler+0x514>
      return;
 80085da:	bf00      	nop
 80085dc:	e000      	b.n	80085e0 <HAL_UART_IRQHandler+0x514>
      return;
 80085de:	bf00      	nop
  }
}
 80085e0:	37e8      	adds	r7, #232	; 0xe8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop

080085e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	460b      	mov	r3, r1
 800862e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b090      	sub	sp, #64	; 0x40
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	603b      	str	r3, [r7, #0]
 8008648:	4613      	mov	r3, r2
 800864a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800864c:	e050      	b.n	80086f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800864e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008654:	d04c      	beq.n	80086f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008658:	2b00      	cmp	r3, #0
 800865a:	d007      	beq.n	800866c <UART_WaitOnFlagUntilTimeout+0x30>
 800865c:	f7fa fb32 	bl	8002cc4 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008668:	429a      	cmp	r2, r3
 800866a:	d241      	bcs.n	80086f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	330c      	adds	r3, #12
 8008672:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008676:	e853 3f00 	ldrex	r3, [r3]
 800867a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	330c      	adds	r3, #12
 800868a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800868c:	637a      	str	r2, [r7, #52]	; 0x34
 800868e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008690:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008694:	e841 2300 	strex	r3, r2, [r1]
 8008698:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800869a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1e5      	bne.n	800866c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3314      	adds	r3, #20
 80086a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	e853 3f00 	ldrex	r3, [r3]
 80086ae:	613b      	str	r3, [r7, #16]
   return(result);
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	f023 0301 	bic.w	r3, r3, #1
 80086b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3314      	adds	r3, #20
 80086be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086c0:	623a      	str	r2, [r7, #32]
 80086c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c4:	69f9      	ldr	r1, [r7, #28]
 80086c6:	6a3a      	ldr	r2, [r7, #32]
 80086c8:	e841 2300 	strex	r3, r2, [r1]
 80086cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1e5      	bne.n	80086a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2220      	movs	r2, #32
 80086d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2220      	movs	r2, #32
 80086e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e00f      	b.n	8008710 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	4013      	ands	r3, r2
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	bf0c      	ite	eq
 8008700:	2301      	moveq	r3, #1
 8008702:	2300      	movne	r3, #0
 8008704:	b2db      	uxtb	r3, r3
 8008706:	461a      	mov	r2, r3
 8008708:	79fb      	ldrb	r3, [r7, #7]
 800870a:	429a      	cmp	r2, r3
 800870c:	d09f      	beq.n	800864e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3740      	adds	r7, #64	; 0x40
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	4613      	mov	r3, r2
 8008724:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	88fa      	ldrh	r2, [r7, #6]
 8008730:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	88fa      	ldrh	r2, [r7, #6]
 8008736:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2222      	movs	r2, #34	; 0x22
 8008742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d007      	beq.n	8008766 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68da      	ldr	r2, [r3, #12]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008764:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	695a      	ldr	r2, [r3, #20]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f042 0201 	orr.w	r2, r2, #1
 8008774:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68da      	ldr	r2, [r3, #12]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f042 0220 	orr.w	r2, r2, #32
 8008784:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008794:	b480      	push	{r7}
 8008796:	b095      	sub	sp, #84	; 0x54
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	330c      	adds	r3, #12
 80087a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a6:	e853 3f00 	ldrex	r3, [r3]
 80087aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	330c      	adds	r3, #12
 80087ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087bc:	643a      	str	r2, [r7, #64]	; 0x40
 80087be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087c4:	e841 2300 	strex	r3, r2, [r1]
 80087c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e5      	bne.n	800879c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3314      	adds	r3, #20
 80087d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d8:	6a3b      	ldr	r3, [r7, #32]
 80087da:	e853 3f00 	ldrex	r3, [r3]
 80087de:	61fb      	str	r3, [r7, #28]
   return(result);
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	f023 0301 	bic.w	r3, r3, #1
 80087e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3314      	adds	r3, #20
 80087ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087f8:	e841 2300 	strex	r3, r2, [r1]
 80087fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1e5      	bne.n	80087d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008808:	2b01      	cmp	r3, #1
 800880a:	d119      	bne.n	8008840 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	330c      	adds	r3, #12
 8008812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	e853 3f00 	ldrex	r3, [r3]
 800881a:	60bb      	str	r3, [r7, #8]
   return(result);
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	f023 0310 	bic.w	r3, r3, #16
 8008822:	647b      	str	r3, [r7, #68]	; 0x44
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	330c      	adds	r3, #12
 800882a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800882c:	61ba      	str	r2, [r7, #24]
 800882e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008830:	6979      	ldr	r1, [r7, #20]
 8008832:	69ba      	ldr	r2, [r7, #24]
 8008834:	e841 2300 	strex	r3, r2, [r1]
 8008838:	613b      	str	r3, [r7, #16]
   return(result);
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1e5      	bne.n	800880c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2220      	movs	r2, #32
 8008844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800884e:	bf00      	nop
 8008850:	3754      	adds	r7, #84	; 0x54
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr

0800885a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b084      	sub	sp, #16
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008866:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f7ff fecb 	bl	8008610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800887a:	bf00      	nop
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008882:	b480      	push	{r7}
 8008884:	b085      	sub	sp, #20
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b21      	cmp	r3, #33	; 0x21
 8008894:	d13e      	bne.n	8008914 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800889e:	d114      	bne.n	80088ca <UART_Transmit_IT+0x48>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d110      	bne.n	80088ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a1b      	ldr	r3, [r3, #32]
 80088ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	881b      	ldrh	r3, [r3, #0]
 80088b2:	461a      	mov	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	1c9a      	adds	r2, r3, #2
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	621a      	str	r2, [r3, #32]
 80088c8:	e008      	b.n	80088dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	1c59      	adds	r1, r3, #1
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	6211      	str	r1, [r2, #32]
 80088d4:	781a      	ldrb	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	3b01      	subs	r3, #1
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	4619      	mov	r1, r3
 80088ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10f      	bne.n	8008910 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68da      	ldr	r2, [r3, #12]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68da      	ldr	r2, [r3, #12]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800890e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008910:	2300      	movs	r3, #0
 8008912:	e000      	b.n	8008916 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008914:	2302      	movs	r3, #2
  }
}
 8008916:	4618      	mov	r0, r3
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b082      	sub	sp, #8
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68da      	ldr	r2, [r3, #12]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008938:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2220      	movs	r2, #32
 800893e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7ff fe50 	bl	80085e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b08c      	sub	sp, #48	; 0x30
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b22      	cmp	r3, #34	; 0x22
 8008964:	f040 80ab 	bne.w	8008abe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008970:	d117      	bne.n	80089a2 <UART_Receive_IT+0x50>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d113      	bne.n	80089a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800897a:	2300      	movs	r3, #0
 800897c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008982:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	b29b      	uxth	r3, r3
 800898c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008990:	b29a      	uxth	r2, r3
 8008992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008994:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899a:	1c9a      	adds	r2, r3, #2
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	629a      	str	r2, [r3, #40]	; 0x28
 80089a0:	e026      	b.n	80089f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80089a8:	2300      	movs	r3, #0
 80089aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089b4:	d007      	beq.n	80089c6 <UART_Receive_IT+0x74>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10a      	bne.n	80089d4 <UART_Receive_IT+0x82>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d106      	bne.n	80089d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d0:	701a      	strb	r2, [r3, #0]
 80089d2:	e008      	b.n	80089e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ea:	1c5a      	adds	r2, r3, #1
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	3b01      	subs	r3, #1
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	4619      	mov	r1, r3
 80089fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d15a      	bne.n	8008aba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68da      	ldr	r2, [r3, #12]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f022 0220 	bic.w	r2, r2, #32
 8008a12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68da      	ldr	r2, [r3, #12]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	695a      	ldr	r2, [r3, #20]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f022 0201 	bic.w	r2, r2, #1
 8008a32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2220      	movs	r2, #32
 8008a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d135      	bne.n	8008ab0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	330c      	adds	r3, #12
 8008a50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	e853 3f00 	ldrex	r3, [r3]
 8008a58:	613b      	str	r3, [r7, #16]
   return(result);
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	f023 0310 	bic.w	r3, r3, #16
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	330c      	adds	r3, #12
 8008a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a6a:	623a      	str	r2, [r7, #32]
 8008a6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6e:	69f9      	ldr	r1, [r7, #28]
 8008a70:	6a3a      	ldr	r2, [r7, #32]
 8008a72:	e841 2300 	strex	r3, r2, [r1]
 8008a76:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1e5      	bne.n	8008a4a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0310 	and.w	r3, r3, #16
 8008a88:	2b10      	cmp	r3, #16
 8008a8a:	d10a      	bne.n	8008aa2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7ff fdbb 	bl	8008624 <HAL_UARTEx_RxEventCallback>
 8008aae:	e002      	b.n	8008ab6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7ff fda3 	bl	80085fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	e002      	b.n	8008ac0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	e000      	b.n	8008ac0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008abe:	2302      	movs	r3, #2
  }
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3730      	adds	r7, #48	; 0x30
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008acc:	b0c0      	sub	sp, #256	; 0x100
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae4:	68d9      	ldr	r1, [r3, #12]
 8008ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	ea40 0301 	orr.w	r3, r0, r1
 8008af0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008af6:	689a      	ldr	r2, [r3, #8]
 8008af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	431a      	orrs	r2, r3
 8008b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	431a      	orrs	r2, r3
 8008b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b0c:	69db      	ldr	r3, [r3, #28]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b20:	f021 010c 	bic.w	r1, r1, #12
 8008b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b2e:	430b      	orrs	r3, r1
 8008b30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b42:	6999      	ldr	r1, [r3, #24]
 8008b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	ea40 0301 	orr.w	r3, r0, r1
 8008b4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	4b8f      	ldr	r3, [pc, #572]	; (8008d94 <UART_SetConfig+0x2cc>)
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d005      	beq.n	8008b68 <UART_SetConfig+0xa0>
 8008b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	4b8d      	ldr	r3, [pc, #564]	; (8008d98 <UART_SetConfig+0x2d0>)
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d104      	bne.n	8008b72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b68:	f7fe faf8 	bl	800715c <HAL_RCC_GetPCLK2Freq>
 8008b6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008b70:	e003      	b.n	8008b7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b72:	f7fe fadf 	bl	8007134 <HAL_RCC_GetPCLK1Freq>
 8008b76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b7e:	69db      	ldr	r3, [r3, #28]
 8008b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b84:	f040 810c 	bne.w	8008da0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008b96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008b9a:	4622      	mov	r2, r4
 8008b9c:	462b      	mov	r3, r5
 8008b9e:	1891      	adds	r1, r2, r2
 8008ba0:	65b9      	str	r1, [r7, #88]	; 0x58
 8008ba2:	415b      	adcs	r3, r3
 8008ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ba6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008baa:	4621      	mov	r1, r4
 8008bac:	eb12 0801 	adds.w	r8, r2, r1
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	eb43 0901 	adc.w	r9, r3, r1
 8008bb6:	f04f 0200 	mov.w	r2, #0
 8008bba:	f04f 0300 	mov.w	r3, #0
 8008bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bca:	4690      	mov	r8, r2
 8008bcc:	4699      	mov	r9, r3
 8008bce:	4623      	mov	r3, r4
 8008bd0:	eb18 0303 	adds.w	r3, r8, r3
 8008bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008bd8:	462b      	mov	r3, r5
 8008bda:	eb49 0303 	adc.w	r3, r9, r3
 8008bde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008bf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	18db      	adds	r3, r3, r3
 8008bfa:	653b      	str	r3, [r7, #80]	; 0x50
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	eb42 0303 	adc.w	r3, r2, r3
 8008c02:	657b      	str	r3, [r7, #84]	; 0x54
 8008c04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008c08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008c0c:	f7f8 f844 	bl	8000c98 <__aeabi_uldivmod>
 8008c10:	4602      	mov	r2, r0
 8008c12:	460b      	mov	r3, r1
 8008c14:	4b61      	ldr	r3, [pc, #388]	; (8008d9c <UART_SetConfig+0x2d4>)
 8008c16:	fba3 2302 	umull	r2, r3, r3, r2
 8008c1a:	095b      	lsrs	r3, r3, #5
 8008c1c:	011c      	lsls	r4, r3, #4
 8008c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c22:	2200      	movs	r2, #0
 8008c24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008c2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c30:	4642      	mov	r2, r8
 8008c32:	464b      	mov	r3, r9
 8008c34:	1891      	adds	r1, r2, r2
 8008c36:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c38:	415b      	adcs	r3, r3
 8008c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c40:	4641      	mov	r1, r8
 8008c42:	eb12 0a01 	adds.w	sl, r2, r1
 8008c46:	4649      	mov	r1, r9
 8008c48:	eb43 0b01 	adc.w	fp, r3, r1
 8008c4c:	f04f 0200 	mov.w	r2, #0
 8008c50:	f04f 0300 	mov.w	r3, #0
 8008c54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c60:	4692      	mov	sl, r2
 8008c62:	469b      	mov	fp, r3
 8008c64:	4643      	mov	r3, r8
 8008c66:	eb1a 0303 	adds.w	r3, sl, r3
 8008c6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c6e:	464b      	mov	r3, r9
 8008c70:	eb4b 0303 	adc.w	r3, fp, r3
 8008c74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008c88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	18db      	adds	r3, r3, r3
 8008c90:	643b      	str	r3, [r7, #64]	; 0x40
 8008c92:	4613      	mov	r3, r2
 8008c94:	eb42 0303 	adc.w	r3, r2, r3
 8008c98:	647b      	str	r3, [r7, #68]	; 0x44
 8008c9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008ca2:	f7f7 fff9 	bl	8000c98 <__aeabi_uldivmod>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4611      	mov	r1, r2
 8008cac:	4b3b      	ldr	r3, [pc, #236]	; (8008d9c <UART_SetConfig+0x2d4>)
 8008cae:	fba3 2301 	umull	r2, r3, r3, r1
 8008cb2:	095b      	lsrs	r3, r3, #5
 8008cb4:	2264      	movs	r2, #100	; 0x64
 8008cb6:	fb02 f303 	mul.w	r3, r2, r3
 8008cba:	1acb      	subs	r3, r1, r3
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008cc2:	4b36      	ldr	r3, [pc, #216]	; (8008d9c <UART_SetConfig+0x2d4>)
 8008cc4:	fba3 2302 	umull	r2, r3, r3, r2
 8008cc8:	095b      	lsrs	r3, r3, #5
 8008cca:	005b      	lsls	r3, r3, #1
 8008ccc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008cd0:	441c      	add	r4, r3
 8008cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cdc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008ce0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008ce4:	4642      	mov	r2, r8
 8008ce6:	464b      	mov	r3, r9
 8008ce8:	1891      	adds	r1, r2, r2
 8008cea:	63b9      	str	r1, [r7, #56]	; 0x38
 8008cec:	415b      	adcs	r3, r3
 8008cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008cf4:	4641      	mov	r1, r8
 8008cf6:	1851      	adds	r1, r2, r1
 8008cf8:	6339      	str	r1, [r7, #48]	; 0x30
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	414b      	adcs	r3, r1
 8008cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8008d00:	f04f 0200 	mov.w	r2, #0
 8008d04:	f04f 0300 	mov.w	r3, #0
 8008d08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008d0c:	4659      	mov	r1, fp
 8008d0e:	00cb      	lsls	r3, r1, #3
 8008d10:	4651      	mov	r1, sl
 8008d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d16:	4651      	mov	r1, sl
 8008d18:	00ca      	lsls	r2, r1, #3
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4603      	mov	r3, r0
 8008d20:	4642      	mov	r2, r8
 8008d22:	189b      	adds	r3, r3, r2
 8008d24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d28:	464b      	mov	r3, r9
 8008d2a:	460a      	mov	r2, r1
 8008d2c:	eb42 0303 	adc.w	r3, r2, r3
 8008d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d48:	460b      	mov	r3, r1
 8008d4a:	18db      	adds	r3, r3, r3
 8008d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d4e:	4613      	mov	r3, r2
 8008d50:	eb42 0303 	adc.w	r3, r2, r3
 8008d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008d5e:	f7f7 ff9b 	bl	8000c98 <__aeabi_uldivmod>
 8008d62:	4602      	mov	r2, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	4b0d      	ldr	r3, [pc, #52]	; (8008d9c <UART_SetConfig+0x2d4>)
 8008d68:	fba3 1302 	umull	r1, r3, r3, r2
 8008d6c:	095b      	lsrs	r3, r3, #5
 8008d6e:	2164      	movs	r1, #100	; 0x64
 8008d70:	fb01 f303 	mul.w	r3, r1, r3
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	00db      	lsls	r3, r3, #3
 8008d78:	3332      	adds	r3, #50	; 0x32
 8008d7a:	4a08      	ldr	r2, [pc, #32]	; (8008d9c <UART_SetConfig+0x2d4>)
 8008d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d80:	095b      	lsrs	r3, r3, #5
 8008d82:	f003 0207 	and.w	r2, r3, #7
 8008d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4422      	add	r2, r4
 8008d8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d90:	e105      	b.n	8008f9e <UART_SetConfig+0x4d6>
 8008d92:	bf00      	nop
 8008d94:	40011000 	.word	0x40011000
 8008d98:	40011400 	.word	0x40011400
 8008d9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008da4:	2200      	movs	r2, #0
 8008da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008daa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008dae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008db2:	4642      	mov	r2, r8
 8008db4:	464b      	mov	r3, r9
 8008db6:	1891      	adds	r1, r2, r2
 8008db8:	6239      	str	r1, [r7, #32]
 8008dba:	415b      	adcs	r3, r3
 8008dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8008dbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008dc2:	4641      	mov	r1, r8
 8008dc4:	1854      	adds	r4, r2, r1
 8008dc6:	4649      	mov	r1, r9
 8008dc8:	eb43 0501 	adc.w	r5, r3, r1
 8008dcc:	f04f 0200 	mov.w	r2, #0
 8008dd0:	f04f 0300 	mov.w	r3, #0
 8008dd4:	00eb      	lsls	r3, r5, #3
 8008dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008dda:	00e2      	lsls	r2, r4, #3
 8008ddc:	4614      	mov	r4, r2
 8008dde:	461d      	mov	r5, r3
 8008de0:	4643      	mov	r3, r8
 8008de2:	18e3      	adds	r3, r4, r3
 8008de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008de8:	464b      	mov	r3, r9
 8008dea:	eb45 0303 	adc.w	r3, r5, r3
 8008dee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008dfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e02:	f04f 0200 	mov.w	r2, #0
 8008e06:	f04f 0300 	mov.w	r3, #0
 8008e0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008e0e:	4629      	mov	r1, r5
 8008e10:	008b      	lsls	r3, r1, #2
 8008e12:	4621      	mov	r1, r4
 8008e14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e18:	4621      	mov	r1, r4
 8008e1a:	008a      	lsls	r2, r1, #2
 8008e1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e20:	f7f7 ff3a 	bl	8000c98 <__aeabi_uldivmod>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	4b60      	ldr	r3, [pc, #384]	; (8008fac <UART_SetConfig+0x4e4>)
 8008e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8008e2e:	095b      	lsrs	r3, r3, #5
 8008e30:	011c      	lsls	r4, r3, #4
 8008e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e36:	2200      	movs	r2, #0
 8008e38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e44:	4642      	mov	r2, r8
 8008e46:	464b      	mov	r3, r9
 8008e48:	1891      	adds	r1, r2, r2
 8008e4a:	61b9      	str	r1, [r7, #24]
 8008e4c:	415b      	adcs	r3, r3
 8008e4e:	61fb      	str	r3, [r7, #28]
 8008e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e54:	4641      	mov	r1, r8
 8008e56:	1851      	adds	r1, r2, r1
 8008e58:	6139      	str	r1, [r7, #16]
 8008e5a:	4649      	mov	r1, r9
 8008e5c:	414b      	adcs	r3, r1
 8008e5e:	617b      	str	r3, [r7, #20]
 8008e60:	f04f 0200 	mov.w	r2, #0
 8008e64:	f04f 0300 	mov.w	r3, #0
 8008e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e6c:	4659      	mov	r1, fp
 8008e6e:	00cb      	lsls	r3, r1, #3
 8008e70:	4651      	mov	r1, sl
 8008e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e76:	4651      	mov	r1, sl
 8008e78:	00ca      	lsls	r2, r1, #3
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	4603      	mov	r3, r0
 8008e80:	4642      	mov	r2, r8
 8008e82:	189b      	adds	r3, r3, r2
 8008e84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e88:	464b      	mov	r3, r9
 8008e8a:	460a      	mov	r2, r1
 8008e8c:	eb42 0303 	adc.w	r3, r2, r3
 8008e90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008ea0:	f04f 0200 	mov.w	r2, #0
 8008ea4:	f04f 0300 	mov.w	r3, #0
 8008ea8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008eac:	4649      	mov	r1, r9
 8008eae:	008b      	lsls	r3, r1, #2
 8008eb0:	4641      	mov	r1, r8
 8008eb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008eb6:	4641      	mov	r1, r8
 8008eb8:	008a      	lsls	r2, r1, #2
 8008eba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008ebe:	f7f7 feeb 	bl	8000c98 <__aeabi_uldivmod>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	4b39      	ldr	r3, [pc, #228]	; (8008fac <UART_SetConfig+0x4e4>)
 8008ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8008ecc:	095b      	lsrs	r3, r3, #5
 8008ece:	2164      	movs	r1, #100	; 0x64
 8008ed0:	fb01 f303 	mul.w	r3, r1, r3
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	011b      	lsls	r3, r3, #4
 8008ed8:	3332      	adds	r3, #50	; 0x32
 8008eda:	4a34      	ldr	r2, [pc, #208]	; (8008fac <UART_SetConfig+0x4e4>)
 8008edc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee0:	095b      	lsrs	r3, r3, #5
 8008ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ee6:	441c      	add	r4, r3
 8008ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eec:	2200      	movs	r2, #0
 8008eee:	673b      	str	r3, [r7, #112]	; 0x70
 8008ef0:	677a      	str	r2, [r7, #116]	; 0x74
 8008ef2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008ef6:	4642      	mov	r2, r8
 8008ef8:	464b      	mov	r3, r9
 8008efa:	1891      	adds	r1, r2, r2
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	415b      	adcs	r3, r3
 8008f00:	60fb      	str	r3, [r7, #12]
 8008f02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f06:	4641      	mov	r1, r8
 8008f08:	1851      	adds	r1, r2, r1
 8008f0a:	6039      	str	r1, [r7, #0]
 8008f0c:	4649      	mov	r1, r9
 8008f0e:	414b      	adcs	r3, r1
 8008f10:	607b      	str	r3, [r7, #4]
 8008f12:	f04f 0200 	mov.w	r2, #0
 8008f16:	f04f 0300 	mov.w	r3, #0
 8008f1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f1e:	4659      	mov	r1, fp
 8008f20:	00cb      	lsls	r3, r1, #3
 8008f22:	4651      	mov	r1, sl
 8008f24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f28:	4651      	mov	r1, sl
 8008f2a:	00ca      	lsls	r2, r1, #3
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	4619      	mov	r1, r3
 8008f30:	4603      	mov	r3, r0
 8008f32:	4642      	mov	r2, r8
 8008f34:	189b      	adds	r3, r3, r2
 8008f36:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f38:	464b      	mov	r3, r9
 8008f3a:	460a      	mov	r2, r1
 8008f3c:	eb42 0303 	adc.w	r3, r2, r3
 8008f40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	663b      	str	r3, [r7, #96]	; 0x60
 8008f4c:	667a      	str	r2, [r7, #100]	; 0x64
 8008f4e:	f04f 0200 	mov.w	r2, #0
 8008f52:	f04f 0300 	mov.w	r3, #0
 8008f56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008f5a:	4649      	mov	r1, r9
 8008f5c:	008b      	lsls	r3, r1, #2
 8008f5e:	4641      	mov	r1, r8
 8008f60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f64:	4641      	mov	r1, r8
 8008f66:	008a      	lsls	r2, r1, #2
 8008f68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008f6c:	f7f7 fe94 	bl	8000c98 <__aeabi_uldivmod>
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	4b0d      	ldr	r3, [pc, #52]	; (8008fac <UART_SetConfig+0x4e4>)
 8008f76:	fba3 1302 	umull	r1, r3, r3, r2
 8008f7a:	095b      	lsrs	r3, r3, #5
 8008f7c:	2164      	movs	r1, #100	; 0x64
 8008f7e:	fb01 f303 	mul.w	r3, r1, r3
 8008f82:	1ad3      	subs	r3, r2, r3
 8008f84:	011b      	lsls	r3, r3, #4
 8008f86:	3332      	adds	r3, #50	; 0x32
 8008f88:	4a08      	ldr	r2, [pc, #32]	; (8008fac <UART_SetConfig+0x4e4>)
 8008f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f8e:	095b      	lsrs	r3, r3, #5
 8008f90:	f003 020f 	and.w	r2, r3, #15
 8008f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4422      	add	r2, r4
 8008f9c:	609a      	str	r2, [r3, #8]
}
 8008f9e:	bf00      	nop
 8008fa0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008faa:	bf00      	nop
 8008fac:	51eb851f 	.word	0x51eb851f

08008fb0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fc2:	2b84      	cmp	r3, #132	; 0x84
 8008fc4:	d005      	beq.n	8008fd2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008fc6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	4413      	add	r3, r2
 8008fce:	3303      	adds	r3, #3
 8008fd0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008fe4:	f000 fc04 	bl	80097f0 <vTaskStartScheduler>
  
  return osOK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	bd80      	pop	{r7, pc}

08008fee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ff0:	b089      	sub	sp, #36	; 0x24
 8008ff2:	af04      	add	r7, sp, #16
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	695b      	ldr	r3, [r3, #20]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d020      	beq.n	8009042 <osThreadCreate+0x54>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d01c      	beq.n	8009042 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	685c      	ldr	r4, [r3, #4]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681d      	ldr	r5, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	691e      	ldr	r6, [r3, #16]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800901a:	4618      	mov	r0, r3
 800901c:	f7ff ffc8 	bl	8008fb0 <makeFreeRtosPriority>
 8009020:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	695b      	ldr	r3, [r3, #20]
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800902a:	9202      	str	r2, [sp, #8]
 800902c:	9301      	str	r3, [sp, #4]
 800902e:	9100      	str	r1, [sp, #0]
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	4632      	mov	r2, r6
 8009034:	4629      	mov	r1, r5
 8009036:	4620      	mov	r0, r4
 8009038:	f000 f8ed 	bl	8009216 <xTaskCreateStatic>
 800903c:	4603      	mov	r3, r0
 800903e:	60fb      	str	r3, [r7, #12]
 8009040:	e01c      	b.n	800907c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	685c      	ldr	r4, [r3, #4]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800904e:	b29e      	uxth	r6, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009056:	4618      	mov	r0, r3
 8009058:	f7ff ffaa 	bl	8008fb0 <makeFreeRtosPriority>
 800905c:	4602      	mov	r2, r0
 800905e:	f107 030c 	add.w	r3, r7, #12
 8009062:	9301      	str	r3, [sp, #4]
 8009064:	9200      	str	r2, [sp, #0]
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	4632      	mov	r2, r6
 800906a:	4629      	mov	r1, r5
 800906c:	4620      	mov	r0, r4
 800906e:	f000 f92f 	bl	80092d0 <xTaskCreate>
 8009072:	4603      	mov	r3, r0
 8009074:	2b01      	cmp	r3, #1
 8009076:	d001      	beq.n	800907c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009078:	2300      	movs	r3, #0
 800907a:	e000      	b.n	800907e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800907c:	68fb      	ldr	r3, [r7, #12]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3714      	adds	r7, #20
 8009082:	46bd      	mov	sp, r7
 8009084:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009086 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b084      	sub	sp, #16
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <osDelay+0x16>
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	e000      	b.n	800909e <osDelay+0x18>
 800909c:	2301      	movs	r3, #1
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 fb72 	bl	8009788 <vTaskDelay>
  
  return osOK;
 80090a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80090ae:	b480      	push	{r7}
 80090b0:	b083      	sub	sp, #12
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f103 0208 	add.w	r2, r3, #8
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090c6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f103 0208 	add.w	r2, r3, #8
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f103 0208 	add.w	r2, r3, #8
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80090e2:	bf00      	nop
 80090e4:	370c      	adds	r7, #12
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090ee:	b480      	push	{r7}
 80090f0:	b083      	sub	sp, #12
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	689a      	ldr	r2, [r3, #8]
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	683a      	ldr	r2, [r7, #0]
 8009132:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	1c5a      	adds	r2, r3, #1
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	601a      	str	r2, [r3, #0]
}
 8009144:	bf00      	nop
 8009146:	3714      	adds	r7, #20
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009166:	d103      	bne.n	8009170 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	60fb      	str	r3, [r7, #12]
 800916e:	e00c      	b.n	800918a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	3308      	adds	r3, #8
 8009174:	60fb      	str	r3, [r7, #12]
 8009176:	e002      	b.n	800917e <vListInsert+0x2e>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	60fb      	str	r3, [r7, #12]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	429a      	cmp	r2, r3
 8009188:	d2f6      	bcs.n	8009178 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	1c5a      	adds	r2, r3, #1
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	601a      	str	r2, [r3, #0]
}
 80091b6:	bf00      	nop
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr

080091c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80091c2:	b480      	push	{r7}
 80091c4:	b085      	sub	sp, #20
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	6892      	ldr	r2, [r2, #8]
 80091d8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	6852      	ldr	r2, [r2, #4]
 80091e2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d103      	bne.n	80091f6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	689a      	ldr	r2, [r3, #8]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	1e5a      	subs	r2, r3, #1
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009216:	b580      	push	{r7, lr}
 8009218:	b08e      	sub	sp, #56	; 0x38
 800921a:	af04      	add	r7, sp, #16
 800921c:	60f8      	str	r0, [r7, #12]
 800921e:	60b9      	str	r1, [r7, #8]
 8009220:	607a      	str	r2, [r7, #4]
 8009222:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10a      	bne.n	8009240 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800923c:	bf00      	nop
 800923e:	e7fe      	b.n	800923e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10a      	bne.n	800925c <xTaskCreateStatic+0x46>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	61fb      	str	r3, [r7, #28]
}
 8009258:	bf00      	nop
 800925a:	e7fe      	b.n	800925a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800925c:	23b4      	movs	r3, #180	; 0xb4
 800925e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	2bb4      	cmp	r3, #180	; 0xb4
 8009264:	d00a      	beq.n	800927c <xTaskCreateStatic+0x66>
	__asm volatile
 8009266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926a:	f383 8811 	msr	BASEPRI, r3
 800926e:	f3bf 8f6f 	isb	sy
 8009272:	f3bf 8f4f 	dsb	sy
 8009276:	61bb      	str	r3, [r7, #24]
}
 8009278:	bf00      	nop
 800927a:	e7fe      	b.n	800927a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800927c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800927e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009280:	2b00      	cmp	r3, #0
 8009282:	d01e      	beq.n	80092c2 <xTaskCreateStatic+0xac>
 8009284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009286:	2b00      	cmp	r3, #0
 8009288:	d01b      	beq.n	80092c2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800928a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800928e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009292:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009296:	2202      	movs	r2, #2
 8009298:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800929c:	2300      	movs	r3, #0
 800929e:	9303      	str	r3, [sp, #12]
 80092a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a2:	9302      	str	r3, [sp, #8]
 80092a4:	f107 0314 	add.w	r3, r7, #20
 80092a8:	9301      	str	r3, [sp, #4]
 80092aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	68b9      	ldr	r1, [r7, #8]
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 f851 	bl	800935c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092bc:	f000 f8ec 	bl	8009498 <prvAddNewTaskToReadyList>
 80092c0:	e001      	b.n	80092c6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80092c2:	2300      	movs	r3, #0
 80092c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80092c6:	697b      	ldr	r3, [r7, #20]
	}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3728      	adds	r7, #40	; 0x28
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b08c      	sub	sp, #48	; 0x30
 80092d4:	af04      	add	r7, sp, #16
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	603b      	str	r3, [r7, #0]
 80092dc:	4613      	mov	r3, r2
 80092de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80092e0:	88fb      	ldrh	r3, [r7, #6]
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4618      	mov	r0, r3
 80092e6:	f001 f80f 	bl	800a308 <pvPortMalloc>
 80092ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00e      	beq.n	8009310 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80092f2:	20b4      	movs	r0, #180	; 0xb4
 80092f4:	f001 f808 	bl	800a308 <pvPortMalloc>
 80092f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d003      	beq.n	8009308 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	631a      	str	r2, [r3, #48]	; 0x30
 8009306:	e005      	b.n	8009314 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009308:	6978      	ldr	r0, [r7, #20]
 800930a:	f001 f8c9 	bl	800a4a0 <vPortFree>
 800930e:	e001      	b.n	8009314 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009310:	2300      	movs	r3, #0
 8009312:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d017      	beq.n	800934a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009322:	88fa      	ldrh	r2, [r7, #6]
 8009324:	2300      	movs	r3, #0
 8009326:	9303      	str	r3, [sp, #12]
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	9302      	str	r3, [sp, #8]
 800932c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932e:	9301      	str	r3, [sp, #4]
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	68b9      	ldr	r1, [r7, #8]
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f000 f80f 	bl	800935c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800933e:	69f8      	ldr	r0, [r7, #28]
 8009340:	f000 f8aa 	bl	8009498 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009344:	2301      	movs	r3, #1
 8009346:	61bb      	str	r3, [r7, #24]
 8009348:	e002      	b.n	8009350 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800934a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800934e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009350:	69bb      	ldr	r3, [r7, #24]
	}
 8009352:	4618      	mov	r0, r3
 8009354:	3720      	adds	r7, #32
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
	...

0800935c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b088      	sub	sp, #32
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
 8009368:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800936a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009374:	3b01      	subs	r3, #1
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4413      	add	r3, r2
 800937a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	f023 0307 	bic.w	r3, r3, #7
 8009382:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	f003 0307 	and.w	r3, r3, #7
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00a      	beq.n	80093a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	617b      	str	r3, [r7, #20]
}
 80093a0:	bf00      	nop
 80093a2:	e7fe      	b.n	80093a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d01f      	beq.n	80093ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093aa:	2300      	movs	r3, #0
 80093ac:	61fb      	str	r3, [r7, #28]
 80093ae:	e012      	b.n	80093d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093b0:	68ba      	ldr	r2, [r7, #8]
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	4413      	add	r3, r2
 80093b6:	7819      	ldrb	r1, [r3, #0]
 80093b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	4413      	add	r3, r2
 80093be:	3334      	adds	r3, #52	; 0x34
 80093c0:	460a      	mov	r2, r1
 80093c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	4413      	add	r3, r2
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d006      	beq.n	80093de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	3301      	adds	r3, #1
 80093d4:	61fb      	str	r3, [r7, #28]
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	2b0f      	cmp	r3, #15
 80093da:	d9e9      	bls.n	80093b0 <prvInitialiseNewTask+0x54>
 80093dc:	e000      	b.n	80093e0 <prvInitialiseNewTask+0x84>
			{
				break;
 80093de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80093e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093e8:	e003      	b.n	80093f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80093ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80093f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f4:	2b06      	cmp	r3, #6
 80093f6:	d901      	bls.n	80093fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80093f8:	2306      	movs	r3, #6
 80093fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80093fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009400:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009406:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940a:	2200      	movs	r2, #0
 800940c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800940e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009410:	3304      	adds	r3, #4
 8009412:	4618      	mov	r0, r3
 8009414:	f7ff fe6b 	bl	80090ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941a:	3318      	adds	r3, #24
 800941c:	4618      	mov	r0, r3
 800941e:	f7ff fe66 	bl	80090ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009426:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	f1c3 0207 	rsb	r2, r3, #7
 800942e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009430:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009436:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943a:	2200      	movs	r2, #0
 800943c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009442:	2200      	movs	r2, #0
 8009444:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944a:	334c      	adds	r3, #76	; 0x4c
 800944c:	2260      	movs	r2, #96	; 0x60
 800944e:	2100      	movs	r1, #0
 8009450:	4618      	mov	r0, r3
 8009452:	f001 fa78 	bl	800a946 <memset>
 8009456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009458:	4a0c      	ldr	r2, [pc, #48]	; (800948c <prvInitialiseNewTask+0x130>)
 800945a:	651a      	str	r2, [r3, #80]	; 0x50
 800945c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945e:	4a0c      	ldr	r2, [pc, #48]	; (8009490 <prvInitialiseNewTask+0x134>)
 8009460:	655a      	str	r2, [r3, #84]	; 0x54
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	4a0b      	ldr	r2, [pc, #44]	; (8009494 <prvInitialiseNewTask+0x138>)
 8009466:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	68f9      	ldr	r1, [r7, #12]
 800946c:	69b8      	ldr	r0, [r7, #24]
 800946e:	f000 fd3d 	bl	8009eec <pxPortInitialiseStack>
 8009472:	4602      	mov	r2, r0
 8009474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009476:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947a:	2b00      	cmp	r3, #0
 800947c:	d002      	beq.n	8009484 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800947e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009482:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009484:	bf00      	nop
 8009486:	3720      	adds	r7, #32
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	0800f338 	.word	0x0800f338
 8009490:	0800f358 	.word	0x0800f358
 8009494:	0800f318 	.word	0x0800f318

08009498 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80094a0:	f000 fe50 	bl	800a144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80094a4:	4b2a      	ldr	r3, [pc, #168]	; (8009550 <prvAddNewTaskToReadyList+0xb8>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	3301      	adds	r3, #1
 80094aa:	4a29      	ldr	r2, [pc, #164]	; (8009550 <prvAddNewTaskToReadyList+0xb8>)
 80094ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80094ae:	4b29      	ldr	r3, [pc, #164]	; (8009554 <prvAddNewTaskToReadyList+0xbc>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d109      	bne.n	80094ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80094b6:	4a27      	ldr	r2, [pc, #156]	; (8009554 <prvAddNewTaskToReadyList+0xbc>)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80094bc:	4b24      	ldr	r3, [pc, #144]	; (8009550 <prvAddNewTaskToReadyList+0xb8>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d110      	bne.n	80094e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80094c4:	f000 fbea 	bl	8009c9c <prvInitialiseTaskLists>
 80094c8:	e00d      	b.n	80094e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80094ca:	4b23      	ldr	r3, [pc, #140]	; (8009558 <prvAddNewTaskToReadyList+0xc0>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d109      	bne.n	80094e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80094d2:	4b20      	ldr	r3, [pc, #128]	; (8009554 <prvAddNewTaskToReadyList+0xbc>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094dc:	429a      	cmp	r2, r3
 80094de:	d802      	bhi.n	80094e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80094e0:	4a1c      	ldr	r2, [pc, #112]	; (8009554 <prvAddNewTaskToReadyList+0xbc>)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80094e6:	4b1d      	ldr	r3, [pc, #116]	; (800955c <prvAddNewTaskToReadyList+0xc4>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	3301      	adds	r3, #1
 80094ec:	4a1b      	ldr	r2, [pc, #108]	; (800955c <prvAddNewTaskToReadyList+0xc4>)
 80094ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f4:	2201      	movs	r2, #1
 80094f6:	409a      	lsls	r2, r3
 80094f8:	4b19      	ldr	r3, [pc, #100]	; (8009560 <prvAddNewTaskToReadyList+0xc8>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	4a18      	ldr	r2, [pc, #96]	; (8009560 <prvAddNewTaskToReadyList+0xc8>)
 8009500:	6013      	str	r3, [r2, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009506:	4613      	mov	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4413      	add	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4a15      	ldr	r2, [pc, #84]	; (8009564 <prvAddNewTaskToReadyList+0xcc>)
 8009510:	441a      	add	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	3304      	adds	r3, #4
 8009516:	4619      	mov	r1, r3
 8009518:	4610      	mov	r0, r2
 800951a:	f7ff fdf5 	bl	8009108 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800951e:	f000 fe41 	bl	800a1a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009522:	4b0d      	ldr	r3, [pc, #52]	; (8009558 <prvAddNewTaskToReadyList+0xc0>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00e      	beq.n	8009548 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800952a:	4b0a      	ldr	r3, [pc, #40]	; (8009554 <prvAddNewTaskToReadyList+0xbc>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009534:	429a      	cmp	r2, r3
 8009536:	d207      	bcs.n	8009548 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009538:	4b0b      	ldr	r3, [pc, #44]	; (8009568 <prvAddNewTaskToReadyList+0xd0>)
 800953a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800953e:	601a      	str	r2, [r3, #0]
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009548:	bf00      	nop
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	20000ca8 	.word	0x20000ca8
 8009554:	20000ba8 	.word	0x20000ba8
 8009558:	20000cb4 	.word	0x20000cb4
 800955c:	20000cc4 	.word	0x20000cc4
 8009560:	20000cb0 	.word	0x20000cb0
 8009564:	20000bac 	.word	0x20000bac
 8009568:	e000ed04 	.word	0xe000ed04

0800956c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009574:	f000 fde6 	bl	800a144 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d102      	bne.n	8009584 <vTaskDelete+0x18>
 800957e:	4b39      	ldr	r3, [pc, #228]	; (8009664 <vTaskDelete+0xf8>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	e000      	b.n	8009586 <vTaskDelete+0x1a>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	3304      	adds	r3, #4
 800958c:	4618      	mov	r0, r3
 800958e:	f7ff fe18 	bl	80091c2 <uxListRemove>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d115      	bne.n	80095c4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800959c:	4932      	ldr	r1, [pc, #200]	; (8009668 <vTaskDelete+0xfc>)
 800959e:	4613      	mov	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4413      	add	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	440b      	add	r3, r1
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10a      	bne.n	80095c4 <vTaskDelete+0x58>
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b2:	2201      	movs	r2, #1
 80095b4:	fa02 f303 	lsl.w	r3, r2, r3
 80095b8:	43da      	mvns	r2, r3
 80095ba:	4b2c      	ldr	r3, [pc, #176]	; (800966c <vTaskDelete+0x100>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4013      	ands	r3, r2
 80095c0:	4a2a      	ldr	r2, [pc, #168]	; (800966c <vTaskDelete+0x100>)
 80095c2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d004      	beq.n	80095d6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	3318      	adds	r3, #24
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7ff fdf6 	bl	80091c2 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80095d6:	4b26      	ldr	r3, [pc, #152]	; (8009670 <vTaskDelete+0x104>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	3301      	adds	r3, #1
 80095dc:	4a24      	ldr	r2, [pc, #144]	; (8009670 <vTaskDelete+0x104>)
 80095de:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80095e0:	4b20      	ldr	r3, [pc, #128]	; (8009664 <vTaskDelete+0xf8>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d10b      	bne.n	8009602 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	3304      	adds	r3, #4
 80095ee:	4619      	mov	r1, r3
 80095f0:	4820      	ldr	r0, [pc, #128]	; (8009674 <vTaskDelete+0x108>)
 80095f2:	f7ff fd89 	bl	8009108 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80095f6:	4b20      	ldr	r3, [pc, #128]	; (8009678 <vTaskDelete+0x10c>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	3301      	adds	r3, #1
 80095fc:	4a1e      	ldr	r2, [pc, #120]	; (8009678 <vTaskDelete+0x10c>)
 80095fe:	6013      	str	r3, [r2, #0]
 8009600:	e009      	b.n	8009616 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009602:	4b1e      	ldr	r3, [pc, #120]	; (800967c <vTaskDelete+0x110>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3b01      	subs	r3, #1
 8009608:	4a1c      	ldr	r2, [pc, #112]	; (800967c <vTaskDelete+0x110>)
 800960a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 fbb3 	bl	8009d78 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009612:	f000 fbe5 	bl	8009de0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8009616:	f000 fdc5 	bl	800a1a4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800961a:	4b19      	ldr	r3, [pc, #100]	; (8009680 <vTaskDelete+0x114>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d01b      	beq.n	800965a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8009622:	4b10      	ldr	r3, [pc, #64]	; (8009664 <vTaskDelete+0xf8>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	429a      	cmp	r2, r3
 800962a:	d116      	bne.n	800965a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800962c:	4b15      	ldr	r3, [pc, #84]	; (8009684 <vTaskDelete+0x118>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00a      	beq.n	800964a <vTaskDelete+0xde>
	__asm volatile
 8009634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009638:	f383 8811 	msr	BASEPRI, r3
 800963c:	f3bf 8f6f 	isb	sy
 8009640:	f3bf 8f4f 	dsb	sy
 8009644:	60bb      	str	r3, [r7, #8]
}
 8009646:	bf00      	nop
 8009648:	e7fe      	b.n	8009648 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800964a:	4b0f      	ldr	r3, [pc, #60]	; (8009688 <vTaskDelete+0x11c>)
 800964c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009650:	601a      	str	r2, [r3, #0]
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800965a:	bf00      	nop
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	20000ba8 	.word	0x20000ba8
 8009668:	20000bac 	.word	0x20000bac
 800966c:	20000cb0 	.word	0x20000cb0
 8009670:	20000cc4 	.word	0x20000cc4
 8009674:	20000c7c 	.word	0x20000c7c
 8009678:	20000c90 	.word	0x20000c90
 800967c:	20000ca8 	.word	0x20000ca8
 8009680:	20000cb4 	.word	0x20000cb4
 8009684:	20000cd0 	.word	0x20000cd0
 8009688:	e000ed04 	.word	0xe000ed04

0800968c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800968c:	b580      	push	{r7, lr}
 800968e:	b08a      	sub	sp, #40	; 0x28
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009696:	2300      	movs	r3, #0
 8009698:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10a      	bne.n	80096b6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80096a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	617b      	str	r3, [r7, #20]
}
 80096b2:	bf00      	nop
 80096b4:	e7fe      	b.n	80096b4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10a      	bne.n	80096d2 <vTaskDelayUntil+0x46>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	613b      	str	r3, [r7, #16]
}
 80096ce:	bf00      	nop
 80096d0:	e7fe      	b.n	80096d0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80096d2:	4b2a      	ldr	r3, [pc, #168]	; (800977c <vTaskDelayUntil+0xf0>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00a      	beq.n	80096f0 <vTaskDelayUntil+0x64>
	__asm volatile
 80096da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	60fb      	str	r3, [r7, #12]
}
 80096ec:	bf00      	nop
 80096ee:	e7fe      	b.n	80096ee <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80096f0:	f000 f8e8 	bl	80098c4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80096f4:	4b22      	ldr	r3, [pc, #136]	; (8009780 <vTaskDelayUntil+0xf4>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	4413      	add	r3, r2
 8009702:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6a3a      	ldr	r2, [r7, #32]
 800970a:	429a      	cmp	r2, r3
 800970c:	d20b      	bcs.n	8009726 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	69fa      	ldr	r2, [r7, #28]
 8009714:	429a      	cmp	r2, r3
 8009716:	d211      	bcs.n	800973c <vTaskDelayUntil+0xb0>
 8009718:	69fa      	ldr	r2, [r7, #28]
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	429a      	cmp	r2, r3
 800971e:	d90d      	bls.n	800973c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009720:	2301      	movs	r3, #1
 8009722:	627b      	str	r3, [r7, #36]	; 0x24
 8009724:	e00a      	b.n	800973c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	69fa      	ldr	r2, [r7, #28]
 800972c:	429a      	cmp	r2, r3
 800972e:	d303      	bcc.n	8009738 <vTaskDelayUntil+0xac>
 8009730:	69fa      	ldr	r2, [r7, #28]
 8009732:	6a3b      	ldr	r3, [r7, #32]
 8009734:	429a      	cmp	r2, r3
 8009736:	d901      	bls.n	800973c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009738:	2301      	movs	r3, #1
 800973a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	69fa      	ldr	r2, [r7, #28]
 8009740:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009744:	2b00      	cmp	r3, #0
 8009746:	d006      	beq.n	8009756 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009748:	69fa      	ldr	r2, [r7, #28]
 800974a:	6a3b      	ldr	r3, [r7, #32]
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	2100      	movs	r1, #0
 8009750:	4618      	mov	r0, r3
 8009752:	f000 fb65 	bl	8009e20 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009756:	f000 f8c3 	bl	80098e0 <xTaskResumeAll>
 800975a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d107      	bne.n	8009772 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009762:	4b08      	ldr	r3, [pc, #32]	; (8009784 <vTaskDelayUntil+0xf8>)
 8009764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009768:	601a      	str	r2, [r3, #0]
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009772:	bf00      	nop
 8009774:	3728      	adds	r7, #40	; 0x28
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	20000cd0 	.word	0x20000cd0
 8009780:	20000cac 	.word	0x20000cac
 8009784:	e000ed04 	.word	0xe000ed04

08009788 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009790:	2300      	movs	r3, #0
 8009792:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d017      	beq.n	80097ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800979a:	4b13      	ldr	r3, [pc, #76]	; (80097e8 <vTaskDelay+0x60>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d00a      	beq.n	80097b8 <vTaskDelay+0x30>
	__asm volatile
 80097a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a6:	f383 8811 	msr	BASEPRI, r3
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	60bb      	str	r3, [r7, #8]
}
 80097b4:	bf00      	nop
 80097b6:	e7fe      	b.n	80097b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80097b8:	f000 f884 	bl	80098c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80097bc:	2100      	movs	r1, #0
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fb2e 	bl	8009e20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80097c4:	f000 f88c 	bl	80098e0 <xTaskResumeAll>
 80097c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d107      	bne.n	80097e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80097d0:	4b06      	ldr	r3, [pc, #24]	; (80097ec <vTaskDelay+0x64>)
 80097d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097d6:	601a      	str	r2, [r3, #0]
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80097e0:	bf00      	nop
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	20000cd0 	.word	0x20000cd0
 80097ec:	e000ed04 	.word	0xe000ed04

080097f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b08a      	sub	sp, #40	; 0x28
 80097f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80097f6:	2300      	movs	r3, #0
 80097f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80097fa:	2300      	movs	r3, #0
 80097fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80097fe:	463a      	mov	r2, r7
 8009800:	1d39      	adds	r1, r7, #4
 8009802:	f107 0308 	add.w	r3, r7, #8
 8009806:	4618      	mov	r0, r3
 8009808:	f7f8 f834 	bl	8001874 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68ba      	ldr	r2, [r7, #8]
 8009812:	9202      	str	r2, [sp, #8]
 8009814:	9301      	str	r3, [sp, #4]
 8009816:	2300      	movs	r3, #0
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	2300      	movs	r3, #0
 800981c:	460a      	mov	r2, r1
 800981e:	4921      	ldr	r1, [pc, #132]	; (80098a4 <vTaskStartScheduler+0xb4>)
 8009820:	4821      	ldr	r0, [pc, #132]	; (80098a8 <vTaskStartScheduler+0xb8>)
 8009822:	f7ff fcf8 	bl	8009216 <xTaskCreateStatic>
 8009826:	4603      	mov	r3, r0
 8009828:	4a20      	ldr	r2, [pc, #128]	; (80098ac <vTaskStartScheduler+0xbc>)
 800982a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800982c:	4b1f      	ldr	r3, [pc, #124]	; (80098ac <vTaskStartScheduler+0xbc>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d002      	beq.n	800983a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009834:	2301      	movs	r3, #1
 8009836:	617b      	str	r3, [r7, #20]
 8009838:	e001      	b.n	800983e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800983a:	2300      	movs	r3, #0
 800983c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d11b      	bne.n	800987c <vTaskStartScheduler+0x8c>
	__asm volatile
 8009844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	613b      	str	r3, [r7, #16]
}
 8009856:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009858:	4b15      	ldr	r3, [pc, #84]	; (80098b0 <vTaskStartScheduler+0xc0>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	334c      	adds	r3, #76	; 0x4c
 800985e:	4a15      	ldr	r2, [pc, #84]	; (80098b4 <vTaskStartScheduler+0xc4>)
 8009860:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009862:	4b15      	ldr	r3, [pc, #84]	; (80098b8 <vTaskStartScheduler+0xc8>)
 8009864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009868:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800986a:	4b14      	ldr	r3, [pc, #80]	; (80098bc <vTaskStartScheduler+0xcc>)
 800986c:	2201      	movs	r2, #1
 800986e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009870:	4b13      	ldr	r3, [pc, #76]	; (80098c0 <vTaskStartScheduler+0xd0>)
 8009872:	2200      	movs	r2, #0
 8009874:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009876:	f000 fbc3 	bl	800a000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800987a:	e00e      	b.n	800989a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009882:	d10a      	bne.n	800989a <vTaskStartScheduler+0xaa>
	__asm volatile
 8009884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009888:	f383 8811 	msr	BASEPRI, r3
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	60fb      	str	r3, [r7, #12]
}
 8009896:	bf00      	nop
 8009898:	e7fe      	b.n	8009898 <vTaskStartScheduler+0xa8>
}
 800989a:	bf00      	nop
 800989c:	3718      	adds	r7, #24
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	0800f2f8 	.word	0x0800f2f8
 80098a8:	08009c6d 	.word	0x08009c6d
 80098ac:	20000ccc 	.word	0x20000ccc
 80098b0:	20000ba8 	.word	0x20000ba8
 80098b4:	20000010 	.word	0x20000010
 80098b8:	20000cc8 	.word	0x20000cc8
 80098bc:	20000cb4 	.word	0x20000cb4
 80098c0:	20000cac 	.word	0x20000cac

080098c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80098c4:	b480      	push	{r7}
 80098c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80098c8:	4b04      	ldr	r3, [pc, #16]	; (80098dc <vTaskSuspendAll+0x18>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	3301      	adds	r3, #1
 80098ce:	4a03      	ldr	r2, [pc, #12]	; (80098dc <vTaskSuspendAll+0x18>)
 80098d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80098d2:	bf00      	nop
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr
 80098dc:	20000cd0 	.word	0x20000cd0

080098e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80098e6:	2300      	movs	r3, #0
 80098e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80098ea:	2300      	movs	r3, #0
 80098ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80098ee:	4b41      	ldr	r3, [pc, #260]	; (80099f4 <xTaskResumeAll+0x114>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d10a      	bne.n	800990c <xTaskResumeAll+0x2c>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	603b      	str	r3, [r7, #0]
}
 8009908:	bf00      	nop
 800990a:	e7fe      	b.n	800990a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800990c:	f000 fc1a 	bl	800a144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009910:	4b38      	ldr	r3, [pc, #224]	; (80099f4 <xTaskResumeAll+0x114>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	3b01      	subs	r3, #1
 8009916:	4a37      	ldr	r2, [pc, #220]	; (80099f4 <xTaskResumeAll+0x114>)
 8009918:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800991a:	4b36      	ldr	r3, [pc, #216]	; (80099f4 <xTaskResumeAll+0x114>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d161      	bne.n	80099e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009922:	4b35      	ldr	r3, [pc, #212]	; (80099f8 <xTaskResumeAll+0x118>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d05d      	beq.n	80099e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800992a:	e02e      	b.n	800998a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800992c:	4b33      	ldr	r3, [pc, #204]	; (80099fc <xTaskResumeAll+0x11c>)
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	3318      	adds	r3, #24
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff fc42 	bl	80091c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	3304      	adds	r3, #4
 8009942:	4618      	mov	r0, r3
 8009944:	f7ff fc3d 	bl	80091c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994c:	2201      	movs	r2, #1
 800994e:	409a      	lsls	r2, r3
 8009950:	4b2b      	ldr	r3, [pc, #172]	; (8009a00 <xTaskResumeAll+0x120>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4313      	orrs	r3, r2
 8009956:	4a2a      	ldr	r2, [pc, #168]	; (8009a00 <xTaskResumeAll+0x120>)
 8009958:	6013      	str	r3, [r2, #0]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800995e:	4613      	mov	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4a27      	ldr	r2, [pc, #156]	; (8009a04 <xTaskResumeAll+0x124>)
 8009968:	441a      	add	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3304      	adds	r3, #4
 800996e:	4619      	mov	r1, r3
 8009970:	4610      	mov	r0, r2
 8009972:	f7ff fbc9 	bl	8009108 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800997a:	4b23      	ldr	r3, [pc, #140]	; (8009a08 <xTaskResumeAll+0x128>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009980:	429a      	cmp	r2, r3
 8009982:	d302      	bcc.n	800998a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009984:	4b21      	ldr	r3, [pc, #132]	; (8009a0c <xTaskResumeAll+0x12c>)
 8009986:	2201      	movs	r2, #1
 8009988:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800998a:	4b1c      	ldr	r3, [pc, #112]	; (80099fc <xTaskResumeAll+0x11c>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1cc      	bne.n	800992c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d001      	beq.n	800999c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009998:	f000 fa22 	bl	8009de0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800999c:	4b1c      	ldr	r3, [pc, #112]	; (8009a10 <xTaskResumeAll+0x130>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d010      	beq.n	80099ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80099a8:	f000 f846 	bl	8009a38 <xTaskIncrementTick>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d002      	beq.n	80099b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80099b2:	4b16      	ldr	r3, [pc, #88]	; (8009a0c <xTaskResumeAll+0x12c>)
 80099b4:	2201      	movs	r2, #1
 80099b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1f1      	bne.n	80099a8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80099c4:	4b12      	ldr	r3, [pc, #72]	; (8009a10 <xTaskResumeAll+0x130>)
 80099c6:	2200      	movs	r2, #0
 80099c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80099ca:	4b10      	ldr	r3, [pc, #64]	; (8009a0c <xTaskResumeAll+0x12c>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d009      	beq.n	80099e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80099d2:	2301      	movs	r3, #1
 80099d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80099d6:	4b0f      	ldr	r3, [pc, #60]	; (8009a14 <xTaskResumeAll+0x134>)
 80099d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099dc:	601a      	str	r2, [r3, #0]
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80099e6:	f000 fbdd 	bl	800a1a4 <vPortExitCritical>

	return xAlreadyYielded;
 80099ea:	68bb      	ldr	r3, [r7, #8]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	20000cd0 	.word	0x20000cd0
 80099f8:	20000ca8 	.word	0x20000ca8
 80099fc:	20000c68 	.word	0x20000c68
 8009a00:	20000cb0 	.word	0x20000cb0
 8009a04:	20000bac 	.word	0x20000bac
 8009a08:	20000ba8 	.word	0x20000ba8
 8009a0c:	20000cbc 	.word	0x20000cbc
 8009a10:	20000cb8 	.word	0x20000cb8
 8009a14:	e000ed04 	.word	0xe000ed04

08009a18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009a1e:	4b05      	ldr	r3, [pc, #20]	; (8009a34 <xTaskGetTickCount+0x1c>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009a24:	687b      	ldr	r3, [r7, #4]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	20000cac 	.word	0x20000cac

08009a38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b086      	sub	sp, #24
 8009a3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a42:	4b4e      	ldr	r3, [pc, #312]	; (8009b7c <xTaskIncrementTick+0x144>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f040 808e 	bne.w	8009b68 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a4c:	4b4c      	ldr	r3, [pc, #304]	; (8009b80 <xTaskIncrementTick+0x148>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	3301      	adds	r3, #1
 8009a52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009a54:	4a4a      	ldr	r2, [pc, #296]	; (8009b80 <xTaskIncrementTick+0x148>)
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d120      	bne.n	8009aa2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009a60:	4b48      	ldr	r3, [pc, #288]	; (8009b84 <xTaskIncrementTick+0x14c>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00a      	beq.n	8009a80 <xTaskIncrementTick+0x48>
	__asm volatile
 8009a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6e:	f383 8811 	msr	BASEPRI, r3
 8009a72:	f3bf 8f6f 	isb	sy
 8009a76:	f3bf 8f4f 	dsb	sy
 8009a7a:	603b      	str	r3, [r7, #0]
}
 8009a7c:	bf00      	nop
 8009a7e:	e7fe      	b.n	8009a7e <xTaskIncrementTick+0x46>
 8009a80:	4b40      	ldr	r3, [pc, #256]	; (8009b84 <xTaskIncrementTick+0x14c>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	60fb      	str	r3, [r7, #12]
 8009a86:	4b40      	ldr	r3, [pc, #256]	; (8009b88 <xTaskIncrementTick+0x150>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a3e      	ldr	r2, [pc, #248]	; (8009b84 <xTaskIncrementTick+0x14c>)
 8009a8c:	6013      	str	r3, [r2, #0]
 8009a8e:	4a3e      	ldr	r2, [pc, #248]	; (8009b88 <xTaskIncrementTick+0x150>)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6013      	str	r3, [r2, #0]
 8009a94:	4b3d      	ldr	r3, [pc, #244]	; (8009b8c <xTaskIncrementTick+0x154>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3301      	adds	r3, #1
 8009a9a:	4a3c      	ldr	r2, [pc, #240]	; (8009b8c <xTaskIncrementTick+0x154>)
 8009a9c:	6013      	str	r3, [r2, #0]
 8009a9e:	f000 f99f 	bl	8009de0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009aa2:	4b3b      	ldr	r3, [pc, #236]	; (8009b90 <xTaskIncrementTick+0x158>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d348      	bcc.n	8009b3e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009aac:	4b35      	ldr	r3, [pc, #212]	; (8009b84 <xTaskIncrementTick+0x14c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d104      	bne.n	8009ac0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ab6:	4b36      	ldr	r3, [pc, #216]	; (8009b90 <xTaskIncrementTick+0x158>)
 8009ab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009abc:	601a      	str	r2, [r3, #0]
					break;
 8009abe:	e03e      	b.n	8009b3e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ac0:	4b30      	ldr	r3, [pc, #192]	; (8009b84 <xTaskIncrementTick+0x14c>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d203      	bcs.n	8009ae0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ad8:	4a2d      	ldr	r2, [pc, #180]	; (8009b90 <xTaskIncrementTick+0x158>)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009ade:	e02e      	b.n	8009b3e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7ff fb6c 	bl	80091c2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d004      	beq.n	8009afc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	3318      	adds	r3, #24
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7ff fb63 	bl	80091c2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b00:	2201      	movs	r2, #1
 8009b02:	409a      	lsls	r2, r3
 8009b04:	4b23      	ldr	r3, [pc, #140]	; (8009b94 <xTaskIncrementTick+0x15c>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	4a22      	ldr	r2, [pc, #136]	; (8009b94 <xTaskIncrementTick+0x15c>)
 8009b0c:	6013      	str	r3, [r2, #0]
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b12:	4613      	mov	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4413      	add	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	4a1f      	ldr	r2, [pc, #124]	; (8009b98 <xTaskIncrementTick+0x160>)
 8009b1c:	441a      	add	r2, r3
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	3304      	adds	r3, #4
 8009b22:	4619      	mov	r1, r3
 8009b24:	4610      	mov	r0, r2
 8009b26:	f7ff faef 	bl	8009108 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b2e:	4b1b      	ldr	r3, [pc, #108]	; (8009b9c <xTaskIncrementTick+0x164>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d3b9      	bcc.n	8009aac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b3c:	e7b6      	b.n	8009aac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009b3e:	4b17      	ldr	r3, [pc, #92]	; (8009b9c <xTaskIncrementTick+0x164>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b44:	4914      	ldr	r1, [pc, #80]	; (8009b98 <xTaskIncrementTick+0x160>)
 8009b46:	4613      	mov	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4413      	add	r3, r2
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	440b      	add	r3, r1
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d901      	bls.n	8009b5a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009b56:	2301      	movs	r3, #1
 8009b58:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009b5a:	4b11      	ldr	r3, [pc, #68]	; (8009ba0 <xTaskIncrementTick+0x168>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d007      	beq.n	8009b72 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009b62:	2301      	movs	r3, #1
 8009b64:	617b      	str	r3, [r7, #20]
 8009b66:	e004      	b.n	8009b72 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009b68:	4b0e      	ldr	r3, [pc, #56]	; (8009ba4 <xTaskIncrementTick+0x16c>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	4a0d      	ldr	r2, [pc, #52]	; (8009ba4 <xTaskIncrementTick+0x16c>)
 8009b70:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009b72:	697b      	ldr	r3, [r7, #20]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3718      	adds	r7, #24
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	20000cd0 	.word	0x20000cd0
 8009b80:	20000cac 	.word	0x20000cac
 8009b84:	20000c60 	.word	0x20000c60
 8009b88:	20000c64 	.word	0x20000c64
 8009b8c:	20000cc0 	.word	0x20000cc0
 8009b90:	20000cc8 	.word	0x20000cc8
 8009b94:	20000cb0 	.word	0x20000cb0
 8009b98:	20000bac 	.word	0x20000bac
 8009b9c:	20000ba8 	.word	0x20000ba8
 8009ba0:	20000cbc 	.word	0x20000cbc
 8009ba4:	20000cb8 	.word	0x20000cb8

08009ba8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b087      	sub	sp, #28
 8009bac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009bae:	4b29      	ldr	r3, [pc, #164]	; (8009c54 <vTaskSwitchContext+0xac>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d003      	beq.n	8009bbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009bb6:	4b28      	ldr	r3, [pc, #160]	; (8009c58 <vTaskSwitchContext+0xb0>)
 8009bb8:	2201      	movs	r2, #1
 8009bba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009bbc:	e044      	b.n	8009c48 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009bbe:	4b26      	ldr	r3, [pc, #152]	; (8009c58 <vTaskSwitchContext+0xb0>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bc4:	4b25      	ldr	r3, [pc, #148]	; (8009c5c <vTaskSwitchContext+0xb4>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	fab3 f383 	clz	r3, r3
 8009bd0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009bd2:	7afb      	ldrb	r3, [r7, #11]
 8009bd4:	f1c3 031f 	rsb	r3, r3, #31
 8009bd8:	617b      	str	r3, [r7, #20]
 8009bda:	4921      	ldr	r1, [pc, #132]	; (8009c60 <vTaskSwitchContext+0xb8>)
 8009bdc:	697a      	ldr	r2, [r7, #20]
 8009bde:	4613      	mov	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4413      	add	r3, r2
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	440b      	add	r3, r1
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10a      	bne.n	8009c04 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	607b      	str	r3, [r7, #4]
}
 8009c00:	bf00      	nop
 8009c02:	e7fe      	b.n	8009c02 <vTaskSwitchContext+0x5a>
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	4613      	mov	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4a14      	ldr	r2, [pc, #80]	; (8009c60 <vTaskSwitchContext+0xb8>)
 8009c10:	4413      	add	r3, r2
 8009c12:	613b      	str	r3, [r7, #16]
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	685a      	ldr	r2, [r3, #4]
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	605a      	str	r2, [r3, #4]
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	685a      	ldr	r2, [r3, #4]
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	3308      	adds	r3, #8
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d104      	bne.n	8009c34 <vTaskSwitchContext+0x8c>
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	685a      	ldr	r2, [r3, #4]
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	605a      	str	r2, [r3, #4]
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	4a0a      	ldr	r2, [pc, #40]	; (8009c64 <vTaskSwitchContext+0xbc>)
 8009c3c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c3e:	4b09      	ldr	r3, [pc, #36]	; (8009c64 <vTaskSwitchContext+0xbc>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	334c      	adds	r3, #76	; 0x4c
 8009c44:	4a08      	ldr	r2, [pc, #32]	; (8009c68 <vTaskSwitchContext+0xc0>)
 8009c46:	6013      	str	r3, [r2, #0]
}
 8009c48:	bf00      	nop
 8009c4a:	371c      	adds	r7, #28
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr
 8009c54:	20000cd0 	.word	0x20000cd0
 8009c58:	20000cbc 	.word	0x20000cbc
 8009c5c:	20000cb0 	.word	0x20000cb0
 8009c60:	20000bac 	.word	0x20000bac
 8009c64:	20000ba8 	.word	0x20000ba8
 8009c68:	20000010 	.word	0x20000010

08009c6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c74:	f000 f852 	bl	8009d1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c78:	4b06      	ldr	r3, [pc, #24]	; (8009c94 <prvIdleTask+0x28>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d9f9      	bls.n	8009c74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c80:	4b05      	ldr	r3, [pc, #20]	; (8009c98 <prvIdleTask+0x2c>)
 8009c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c86:	601a      	str	r2, [r3, #0]
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c90:	e7f0      	b.n	8009c74 <prvIdleTask+0x8>
 8009c92:	bf00      	nop
 8009c94:	20000bac 	.word	0x20000bac
 8009c98:	e000ed04 	.word	0xe000ed04

08009c9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	607b      	str	r3, [r7, #4]
 8009ca6:	e00c      	b.n	8009cc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	4613      	mov	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4413      	add	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4a12      	ldr	r2, [pc, #72]	; (8009cfc <prvInitialiseTaskLists+0x60>)
 8009cb4:	4413      	add	r3, r2
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7ff f9f9 	bl	80090ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	607b      	str	r3, [r7, #4]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2b06      	cmp	r3, #6
 8009cc6:	d9ef      	bls.n	8009ca8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009cc8:	480d      	ldr	r0, [pc, #52]	; (8009d00 <prvInitialiseTaskLists+0x64>)
 8009cca:	f7ff f9f0 	bl	80090ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009cce:	480d      	ldr	r0, [pc, #52]	; (8009d04 <prvInitialiseTaskLists+0x68>)
 8009cd0:	f7ff f9ed 	bl	80090ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009cd4:	480c      	ldr	r0, [pc, #48]	; (8009d08 <prvInitialiseTaskLists+0x6c>)
 8009cd6:	f7ff f9ea 	bl	80090ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009cda:	480c      	ldr	r0, [pc, #48]	; (8009d0c <prvInitialiseTaskLists+0x70>)
 8009cdc:	f7ff f9e7 	bl	80090ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ce0:	480b      	ldr	r0, [pc, #44]	; (8009d10 <prvInitialiseTaskLists+0x74>)
 8009ce2:	f7ff f9e4 	bl	80090ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009ce6:	4b0b      	ldr	r3, [pc, #44]	; (8009d14 <prvInitialiseTaskLists+0x78>)
 8009ce8:	4a05      	ldr	r2, [pc, #20]	; (8009d00 <prvInitialiseTaskLists+0x64>)
 8009cea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009cec:	4b0a      	ldr	r3, [pc, #40]	; (8009d18 <prvInitialiseTaskLists+0x7c>)
 8009cee:	4a05      	ldr	r2, [pc, #20]	; (8009d04 <prvInitialiseTaskLists+0x68>)
 8009cf0:	601a      	str	r2, [r3, #0]
}
 8009cf2:	bf00      	nop
 8009cf4:	3708      	adds	r7, #8
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	20000bac 	.word	0x20000bac
 8009d00:	20000c38 	.word	0x20000c38
 8009d04:	20000c4c 	.word	0x20000c4c
 8009d08:	20000c68 	.word	0x20000c68
 8009d0c:	20000c7c 	.word	0x20000c7c
 8009d10:	20000c94 	.word	0x20000c94
 8009d14:	20000c60 	.word	0x20000c60
 8009d18:	20000c64 	.word	0x20000c64

08009d1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d22:	e019      	b.n	8009d58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d24:	f000 fa0e 	bl	800a144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d28:	4b10      	ldr	r3, [pc, #64]	; (8009d6c <prvCheckTasksWaitingTermination+0x50>)
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	3304      	adds	r3, #4
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7ff fa44 	bl	80091c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d3a:	4b0d      	ldr	r3, [pc, #52]	; (8009d70 <prvCheckTasksWaitingTermination+0x54>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	4a0b      	ldr	r2, [pc, #44]	; (8009d70 <prvCheckTasksWaitingTermination+0x54>)
 8009d42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d44:	4b0b      	ldr	r3, [pc, #44]	; (8009d74 <prvCheckTasksWaitingTermination+0x58>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	4a0a      	ldr	r2, [pc, #40]	; (8009d74 <prvCheckTasksWaitingTermination+0x58>)
 8009d4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d4e:	f000 fa29 	bl	800a1a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f810 	bl	8009d78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d58:	4b06      	ldr	r3, [pc, #24]	; (8009d74 <prvCheckTasksWaitingTermination+0x58>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1e1      	bne.n	8009d24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d60:	bf00      	nop
 8009d62:	bf00      	nop
 8009d64:	3708      	adds	r7, #8
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	20000c7c 	.word	0x20000c7c
 8009d70:	20000ca8 	.word	0x20000ca8
 8009d74:	20000c90 	.word	0x20000c90

08009d78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	334c      	adds	r3, #76	; 0x4c
 8009d84:	4618      	mov	r0, r3
 8009d86:	f001 fb81 	bl	800b48c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d108      	bne.n	8009da6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f000 fb81 	bl	800a4a0 <vPortFree>
				vPortFree( pxTCB );
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fb7e 	bl	800a4a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009da4:	e018      	b.n	8009dd8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d103      	bne.n	8009db8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 fb75 	bl	800a4a0 <vPortFree>
	}
 8009db6:	e00f      	b.n	8009dd8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	d00a      	beq.n	8009dd8 <prvDeleteTCB+0x60>
	__asm volatile
 8009dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	60fb      	str	r3, [r7, #12]
}
 8009dd4:	bf00      	nop
 8009dd6:	e7fe      	b.n	8009dd6 <prvDeleteTCB+0x5e>
	}
 8009dd8:	bf00      	nop
 8009dda:	3710      	adds	r7, #16
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009de6:	4b0c      	ldr	r3, [pc, #48]	; (8009e18 <prvResetNextTaskUnblockTime+0x38>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d104      	bne.n	8009dfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009df0:	4b0a      	ldr	r3, [pc, #40]	; (8009e1c <prvResetNextTaskUnblockTime+0x3c>)
 8009df2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009df6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009df8:	e008      	b.n	8009e0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dfa:	4b07      	ldr	r3, [pc, #28]	; (8009e18 <prvResetNextTaskUnblockTime+0x38>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	4a04      	ldr	r2, [pc, #16]	; (8009e1c <prvResetNextTaskUnblockTime+0x3c>)
 8009e0a:	6013      	str	r3, [r2, #0]
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr
 8009e18:	20000c60 	.word	0x20000c60
 8009e1c:	20000cc8 	.word	0x20000cc8

08009e20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e2a:	4b29      	ldr	r3, [pc, #164]	; (8009ed0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e30:	4b28      	ldr	r3, [pc, #160]	; (8009ed4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	3304      	adds	r3, #4
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7ff f9c3 	bl	80091c2 <uxListRemove>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d10b      	bne.n	8009e5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009e42:	4b24      	ldr	r3, [pc, #144]	; (8009ed4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e48:	2201      	movs	r2, #1
 8009e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e4e:	43da      	mvns	r2, r3
 8009e50:	4b21      	ldr	r3, [pc, #132]	; (8009ed8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4013      	ands	r3, r2
 8009e56:	4a20      	ldr	r2, [pc, #128]	; (8009ed8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009e58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e60:	d10a      	bne.n	8009e78 <prvAddCurrentTaskToDelayedList+0x58>
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d007      	beq.n	8009e78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e68:	4b1a      	ldr	r3, [pc, #104]	; (8009ed4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	4619      	mov	r1, r3
 8009e70:	481a      	ldr	r0, [pc, #104]	; (8009edc <prvAddCurrentTaskToDelayedList+0xbc>)
 8009e72:	f7ff f949 	bl	8009108 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e76:	e026      	b.n	8009ec6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e80:	4b14      	ldr	r3, [pc, #80]	; (8009ed4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68ba      	ldr	r2, [r7, #8]
 8009e86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d209      	bcs.n	8009ea4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e90:	4b13      	ldr	r3, [pc, #76]	; (8009ee0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	4b0f      	ldr	r3, [pc, #60]	; (8009ed4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	3304      	adds	r3, #4
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	f7ff f957 	bl	8009150 <vListInsert>
}
 8009ea2:	e010      	b.n	8009ec6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ea4:	4b0f      	ldr	r3, [pc, #60]	; (8009ee4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	4b0a      	ldr	r3, [pc, #40]	; (8009ed4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	3304      	adds	r3, #4
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	f7ff f94d 	bl	8009150 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009eb6:	4b0c      	ldr	r3, [pc, #48]	; (8009ee8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d202      	bcs.n	8009ec6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009ec0:	4a09      	ldr	r2, [pc, #36]	; (8009ee8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	6013      	str	r3, [r2, #0]
}
 8009ec6:	bf00      	nop
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20000cac 	.word	0x20000cac
 8009ed4:	20000ba8 	.word	0x20000ba8
 8009ed8:	20000cb0 	.word	0x20000cb0
 8009edc:	20000c94 	.word	0x20000c94
 8009ee0:	20000c64 	.word	0x20000c64
 8009ee4:	20000c60 	.word	0x20000c60
 8009ee8:	20000cc8 	.word	0x20000cc8

08009eec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	3b04      	subs	r3, #4
 8009efc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	3b04      	subs	r3, #4
 8009f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	f023 0201 	bic.w	r2, r3, #1
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	3b04      	subs	r3, #4
 8009f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f1c:	4a0c      	ldr	r2, [pc, #48]	; (8009f50 <pxPortInitialiseStack+0x64>)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	3b14      	subs	r3, #20
 8009f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	3b04      	subs	r3, #4
 8009f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f06f 0202 	mvn.w	r2, #2
 8009f3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	3b20      	subs	r3, #32
 8009f40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f42:	68fb      	ldr	r3, [r7, #12]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	08009f55 	.word	0x08009f55

08009f54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f5e:	4b12      	ldr	r3, [pc, #72]	; (8009fa8 <prvTaskExitError+0x54>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f66:	d00a      	beq.n	8009f7e <prvTaskExitError+0x2a>
	__asm volatile
 8009f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6c:	f383 8811 	msr	BASEPRI, r3
 8009f70:	f3bf 8f6f 	isb	sy
 8009f74:	f3bf 8f4f 	dsb	sy
 8009f78:	60fb      	str	r3, [r7, #12]
}
 8009f7a:	bf00      	nop
 8009f7c:	e7fe      	b.n	8009f7c <prvTaskExitError+0x28>
	__asm volatile
 8009f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	60bb      	str	r3, [r7, #8]
}
 8009f90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f92:	bf00      	nop
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d0fc      	beq.n	8009f94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f9a:	bf00      	nop
 8009f9c:	bf00      	nop
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr
 8009fa8:	2000000c 	.word	0x2000000c
 8009fac:	00000000 	.word	0x00000000

08009fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009fb0:	4b07      	ldr	r3, [pc, #28]	; (8009fd0 <pxCurrentTCBConst2>)
 8009fb2:	6819      	ldr	r1, [r3, #0]
 8009fb4:	6808      	ldr	r0, [r1, #0]
 8009fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fba:	f380 8809 	msr	PSP, r0
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f04f 0000 	mov.w	r0, #0
 8009fc6:	f380 8811 	msr	BASEPRI, r0
 8009fca:	4770      	bx	lr
 8009fcc:	f3af 8000 	nop.w

08009fd0 <pxCurrentTCBConst2>:
 8009fd0:	20000ba8 	.word	0x20000ba8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009fd4:	bf00      	nop
 8009fd6:	bf00      	nop

08009fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009fd8:	4808      	ldr	r0, [pc, #32]	; (8009ffc <prvPortStartFirstTask+0x24>)
 8009fda:	6800      	ldr	r0, [r0, #0]
 8009fdc:	6800      	ldr	r0, [r0, #0]
 8009fde:	f380 8808 	msr	MSP, r0
 8009fe2:	f04f 0000 	mov.w	r0, #0
 8009fe6:	f380 8814 	msr	CONTROL, r0
 8009fea:	b662      	cpsie	i
 8009fec:	b661      	cpsie	f
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	df00      	svc	0
 8009ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009ffa:	bf00      	nop
 8009ffc:	e000ed08 	.word	0xe000ed08

0800a000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a006:	4b46      	ldr	r3, [pc, #280]	; (800a120 <xPortStartScheduler+0x120>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a46      	ldr	r2, [pc, #280]	; (800a124 <xPortStartScheduler+0x124>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d10a      	bne.n	800a026 <xPortStartScheduler+0x26>
	__asm volatile
 800a010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a014:	f383 8811 	msr	BASEPRI, r3
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	f3bf 8f4f 	dsb	sy
 800a020:	613b      	str	r3, [r7, #16]
}
 800a022:	bf00      	nop
 800a024:	e7fe      	b.n	800a024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a026:	4b3e      	ldr	r3, [pc, #248]	; (800a120 <xPortStartScheduler+0x120>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a3f      	ldr	r2, [pc, #252]	; (800a128 <xPortStartScheduler+0x128>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d10a      	bne.n	800a046 <xPortStartScheduler+0x46>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	60fb      	str	r3, [r7, #12]
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a046:	4b39      	ldr	r3, [pc, #228]	; (800a12c <xPortStartScheduler+0x12c>)
 800a048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	22ff      	movs	r2, #255	; 0xff
 800a056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a060:	78fb      	ldrb	r3, [r7, #3]
 800a062:	b2db      	uxtb	r3, r3
 800a064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a068:	b2da      	uxtb	r2, r3
 800a06a:	4b31      	ldr	r3, [pc, #196]	; (800a130 <xPortStartScheduler+0x130>)
 800a06c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a06e:	4b31      	ldr	r3, [pc, #196]	; (800a134 <xPortStartScheduler+0x134>)
 800a070:	2207      	movs	r2, #7
 800a072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a074:	e009      	b.n	800a08a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a076:	4b2f      	ldr	r3, [pc, #188]	; (800a134 <xPortStartScheduler+0x134>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	3b01      	subs	r3, #1
 800a07c:	4a2d      	ldr	r2, [pc, #180]	; (800a134 <xPortStartScheduler+0x134>)
 800a07e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a080:	78fb      	ldrb	r3, [r7, #3]
 800a082:	b2db      	uxtb	r3, r3
 800a084:	005b      	lsls	r3, r3, #1
 800a086:	b2db      	uxtb	r3, r3
 800a088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a08a:	78fb      	ldrb	r3, [r7, #3]
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a092:	2b80      	cmp	r3, #128	; 0x80
 800a094:	d0ef      	beq.n	800a076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a096:	4b27      	ldr	r3, [pc, #156]	; (800a134 <xPortStartScheduler+0x134>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f1c3 0307 	rsb	r3, r3, #7
 800a09e:	2b04      	cmp	r3, #4
 800a0a0:	d00a      	beq.n	800a0b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a6:	f383 8811 	msr	BASEPRI, r3
 800a0aa:	f3bf 8f6f 	isb	sy
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	60bb      	str	r3, [r7, #8]
}
 800a0b4:	bf00      	nop
 800a0b6:	e7fe      	b.n	800a0b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a0b8:	4b1e      	ldr	r3, [pc, #120]	; (800a134 <xPortStartScheduler+0x134>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	021b      	lsls	r3, r3, #8
 800a0be:	4a1d      	ldr	r2, [pc, #116]	; (800a134 <xPortStartScheduler+0x134>)
 800a0c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a0c2:	4b1c      	ldr	r3, [pc, #112]	; (800a134 <xPortStartScheduler+0x134>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0ca:	4a1a      	ldr	r2, [pc, #104]	; (800a134 <xPortStartScheduler+0x134>)
 800a0cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a0d6:	4b18      	ldr	r3, [pc, #96]	; (800a138 <xPortStartScheduler+0x138>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a17      	ldr	r2, [pc, #92]	; (800a138 <xPortStartScheduler+0x138>)
 800a0dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a0e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a0e2:	4b15      	ldr	r3, [pc, #84]	; (800a138 <xPortStartScheduler+0x138>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a14      	ldr	r2, [pc, #80]	; (800a138 <xPortStartScheduler+0x138>)
 800a0e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a0ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a0ee:	f000 f8dd 	bl	800a2ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a0f2:	4b12      	ldr	r3, [pc, #72]	; (800a13c <xPortStartScheduler+0x13c>)
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a0f8:	f000 f8fc 	bl	800a2f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a0fc:	4b10      	ldr	r3, [pc, #64]	; (800a140 <xPortStartScheduler+0x140>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a0f      	ldr	r2, [pc, #60]	; (800a140 <xPortStartScheduler+0x140>)
 800a102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a108:	f7ff ff66 	bl	8009fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a10c:	f7ff fd4c 	bl	8009ba8 <vTaskSwitchContext>
	prvTaskExitError();
 800a110:	f7ff ff20 	bl	8009f54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3718      	adds	r7, #24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	e000ed00 	.word	0xe000ed00
 800a124:	410fc271 	.word	0x410fc271
 800a128:	410fc270 	.word	0x410fc270
 800a12c:	e000e400 	.word	0xe000e400
 800a130:	20000cd4 	.word	0x20000cd4
 800a134:	20000cd8 	.word	0x20000cd8
 800a138:	e000ed20 	.word	0xe000ed20
 800a13c:	2000000c 	.word	0x2000000c
 800a140:	e000ef34 	.word	0xe000ef34

0800a144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14e:	f383 8811 	msr	BASEPRI, r3
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	607b      	str	r3, [r7, #4]
}
 800a15c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a15e:	4b0f      	ldr	r3, [pc, #60]	; (800a19c <vPortEnterCritical+0x58>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3301      	adds	r3, #1
 800a164:	4a0d      	ldr	r2, [pc, #52]	; (800a19c <vPortEnterCritical+0x58>)
 800a166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a168:	4b0c      	ldr	r3, [pc, #48]	; (800a19c <vPortEnterCritical+0x58>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d10f      	bne.n	800a190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a170:	4b0b      	ldr	r3, [pc, #44]	; (800a1a0 <vPortEnterCritical+0x5c>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00a      	beq.n	800a190 <vPortEnterCritical+0x4c>
	__asm volatile
 800a17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	603b      	str	r3, [r7, #0]
}
 800a18c:	bf00      	nop
 800a18e:	e7fe      	b.n	800a18e <vPortEnterCritical+0x4a>
	}
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr
 800a19c:	2000000c 	.word	0x2000000c
 800a1a0:	e000ed04 	.word	0xe000ed04

0800a1a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a1aa:	4b12      	ldr	r3, [pc, #72]	; (800a1f4 <vPortExitCritical+0x50>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d10a      	bne.n	800a1c8 <vPortExitCritical+0x24>
	__asm volatile
 800a1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	607b      	str	r3, [r7, #4]
}
 800a1c4:	bf00      	nop
 800a1c6:	e7fe      	b.n	800a1c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a1c8:	4b0a      	ldr	r3, [pc, #40]	; (800a1f4 <vPortExitCritical+0x50>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	4a09      	ldr	r2, [pc, #36]	; (800a1f4 <vPortExitCritical+0x50>)
 800a1d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a1d2:	4b08      	ldr	r3, [pc, #32]	; (800a1f4 <vPortExitCritical+0x50>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d105      	bne.n	800a1e6 <vPortExitCritical+0x42>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a1e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a1e6:	bf00      	nop
 800a1e8:	370c      	adds	r7, #12
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	2000000c 	.word	0x2000000c
	...

0800a200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a200:	f3ef 8009 	mrs	r0, PSP
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	4b15      	ldr	r3, [pc, #84]	; (800a260 <pxCurrentTCBConst>)
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	f01e 0f10 	tst.w	lr, #16
 800a210:	bf08      	it	eq
 800a212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21a:	6010      	str	r0, [r2, #0]
 800a21c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a220:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a224:	f380 8811 	msr	BASEPRI, r0
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f7ff fcba 	bl	8009ba8 <vTaskSwitchContext>
 800a234:	f04f 0000 	mov.w	r0, #0
 800a238:	f380 8811 	msr	BASEPRI, r0
 800a23c:	bc09      	pop	{r0, r3}
 800a23e:	6819      	ldr	r1, [r3, #0]
 800a240:	6808      	ldr	r0, [r1, #0]
 800a242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a246:	f01e 0f10 	tst.w	lr, #16
 800a24a:	bf08      	it	eq
 800a24c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a250:	f380 8809 	msr	PSP, r0
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	f3af 8000 	nop.w

0800a260 <pxCurrentTCBConst>:
 800a260:	20000ba8 	.word	0x20000ba8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a264:	bf00      	nop
 800a266:	bf00      	nop

0800a268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
	__asm volatile
 800a26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	607b      	str	r3, [r7, #4]
}
 800a280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a282:	f7ff fbd9 	bl	8009a38 <xTaskIncrementTick>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d003      	beq.n	800a294 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a28c:	4b06      	ldr	r3, [pc, #24]	; (800a2a8 <SysTick_Handler+0x40>)
 800a28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	2300      	movs	r3, #0
 800a296:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	f383 8811 	msr	BASEPRI, r3
}
 800a29e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	e000ed04 	.word	0xe000ed04

0800a2ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2b0:	4b0b      	ldr	r3, [pc, #44]	; (800a2e0 <vPortSetupTimerInterrupt+0x34>)
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2b6:	4b0b      	ldr	r3, [pc, #44]	; (800a2e4 <vPortSetupTimerInterrupt+0x38>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2bc:	4b0a      	ldr	r3, [pc, #40]	; (800a2e8 <vPortSetupTimerInterrupt+0x3c>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a0a      	ldr	r2, [pc, #40]	; (800a2ec <vPortSetupTimerInterrupt+0x40>)
 800a2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2c6:	099b      	lsrs	r3, r3, #6
 800a2c8:	4a09      	ldr	r2, [pc, #36]	; (800a2f0 <vPortSetupTimerInterrupt+0x44>)
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a2ce:	4b04      	ldr	r3, [pc, #16]	; (800a2e0 <vPortSetupTimerInterrupt+0x34>)
 800a2d0:	2207      	movs	r2, #7
 800a2d2:	601a      	str	r2, [r3, #0]
}
 800a2d4:	bf00      	nop
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	e000e010 	.word	0xe000e010
 800a2e4:	e000e018 	.word	0xe000e018
 800a2e8:	20000000 	.word	0x20000000
 800a2ec:	10624dd3 	.word	0x10624dd3
 800a2f0:	e000e014 	.word	0xe000e014

0800a2f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a2f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a304 <vPortEnableVFP+0x10>
 800a2f8:	6801      	ldr	r1, [r0, #0]
 800a2fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a2fe:	6001      	str	r1, [r0, #0]
 800a300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a302:	bf00      	nop
 800a304:	e000ed88 	.word	0xe000ed88

0800a308 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b08a      	sub	sp, #40	; 0x28
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a310:	2300      	movs	r3, #0
 800a312:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a314:	f7ff fad6 	bl	80098c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a318:	4b5b      	ldr	r3, [pc, #364]	; (800a488 <pvPortMalloc+0x180>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a320:	f000 f920 	bl	800a564 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a324:	4b59      	ldr	r3, [pc, #356]	; (800a48c <pvPortMalloc+0x184>)
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	4013      	ands	r3, r2
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f040 8093 	bne.w	800a458 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d01d      	beq.n	800a374 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a338:	2208      	movs	r2, #8
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4413      	add	r3, r2
 800a33e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f003 0307 	and.w	r3, r3, #7
 800a346:	2b00      	cmp	r3, #0
 800a348:	d014      	beq.n	800a374 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f023 0307 	bic.w	r3, r3, #7
 800a350:	3308      	adds	r3, #8
 800a352:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f003 0307 	and.w	r3, r3, #7
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00a      	beq.n	800a374 <pvPortMalloc+0x6c>
	__asm volatile
 800a35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a362:	f383 8811 	msr	BASEPRI, r3
 800a366:	f3bf 8f6f 	isb	sy
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	617b      	str	r3, [r7, #20]
}
 800a370:	bf00      	nop
 800a372:	e7fe      	b.n	800a372 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d06e      	beq.n	800a458 <pvPortMalloc+0x150>
 800a37a:	4b45      	ldr	r3, [pc, #276]	; (800a490 <pvPortMalloc+0x188>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	429a      	cmp	r2, r3
 800a382:	d869      	bhi.n	800a458 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a384:	4b43      	ldr	r3, [pc, #268]	; (800a494 <pvPortMalloc+0x18c>)
 800a386:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a388:	4b42      	ldr	r3, [pc, #264]	; (800a494 <pvPortMalloc+0x18c>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a38e:	e004      	b.n	800a39a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a392:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d903      	bls.n	800a3ac <pvPortMalloc+0xa4>
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1f1      	bne.n	800a390 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a3ac:	4b36      	ldr	r3, [pc, #216]	; (800a488 <pvPortMalloc+0x180>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d050      	beq.n	800a458 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a3b6:	6a3b      	ldr	r3, [r7, #32]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2208      	movs	r2, #8
 800a3bc:	4413      	add	r3, r2
 800a3be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	6a3b      	ldr	r3, [r7, #32]
 800a3c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ca:	685a      	ldr	r2, [r3, #4]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	1ad2      	subs	r2, r2, r3
 800a3d0:	2308      	movs	r3, #8
 800a3d2:	005b      	lsls	r3, r3, #1
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d91f      	bls.n	800a418 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a3d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4413      	add	r3, r2
 800a3de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	f003 0307 	and.w	r3, r3, #7
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00a      	beq.n	800a400 <pvPortMalloc+0xf8>
	__asm volatile
 800a3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ee:	f383 8811 	msr	BASEPRI, r3
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	613b      	str	r3, [r7, #16]
}
 800a3fc:	bf00      	nop
 800a3fe:	e7fe      	b.n	800a3fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a402:	685a      	ldr	r2, [r3, #4]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	1ad2      	subs	r2, r2, r3
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a412:	69b8      	ldr	r0, [r7, #24]
 800a414:	f000 f908 	bl	800a628 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a418:	4b1d      	ldr	r3, [pc, #116]	; (800a490 <pvPortMalloc+0x188>)
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	4a1b      	ldr	r2, [pc, #108]	; (800a490 <pvPortMalloc+0x188>)
 800a424:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a426:	4b1a      	ldr	r3, [pc, #104]	; (800a490 <pvPortMalloc+0x188>)
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	4b1b      	ldr	r3, [pc, #108]	; (800a498 <pvPortMalloc+0x190>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d203      	bcs.n	800a43a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a432:	4b17      	ldr	r3, [pc, #92]	; (800a490 <pvPortMalloc+0x188>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a18      	ldr	r2, [pc, #96]	; (800a498 <pvPortMalloc+0x190>)
 800a438:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43c:	685a      	ldr	r2, [r3, #4]
 800a43e:	4b13      	ldr	r3, [pc, #76]	; (800a48c <pvPortMalloc+0x184>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	431a      	orrs	r2, r3
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	2200      	movs	r2, #0
 800a44c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a44e:	4b13      	ldr	r3, [pc, #76]	; (800a49c <pvPortMalloc+0x194>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	3301      	adds	r3, #1
 800a454:	4a11      	ldr	r2, [pc, #68]	; (800a49c <pvPortMalloc+0x194>)
 800a456:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a458:	f7ff fa42 	bl	80098e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	f003 0307 	and.w	r3, r3, #7
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00a      	beq.n	800a47c <pvPortMalloc+0x174>
	__asm volatile
 800a466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	60fb      	str	r3, [r7, #12]
}
 800a478:	bf00      	nop
 800a47a:	e7fe      	b.n	800a47a <pvPortMalloc+0x172>
	return pvReturn;
 800a47c:	69fb      	ldr	r3, [r7, #28]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3728      	adds	r7, #40	; 0x28
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	200048e4 	.word	0x200048e4
 800a48c:	200048f8 	.word	0x200048f8
 800a490:	200048e8 	.word	0x200048e8
 800a494:	200048dc 	.word	0x200048dc
 800a498:	200048ec 	.word	0x200048ec
 800a49c:	200048f0 	.word	0x200048f0

0800a4a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b086      	sub	sp, #24
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d04d      	beq.n	800a54e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a4b2:	2308      	movs	r3, #8
 800a4b4:	425b      	negs	r3, r3
 800a4b6:	697a      	ldr	r2, [r7, #20]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	685a      	ldr	r2, [r3, #4]
 800a4c4:	4b24      	ldr	r3, [pc, #144]	; (800a558 <vPortFree+0xb8>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10a      	bne.n	800a4e4 <vPortFree+0x44>
	__asm volatile
 800a4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	60fb      	str	r3, [r7, #12]
}
 800a4e0:	bf00      	nop
 800a4e2:	e7fe      	b.n	800a4e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00a      	beq.n	800a502 <vPortFree+0x62>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	60bb      	str	r3, [r7, #8]
}
 800a4fe:	bf00      	nop
 800a500:	e7fe      	b.n	800a500 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	685a      	ldr	r2, [r3, #4]
 800a506:	4b14      	ldr	r3, [pc, #80]	; (800a558 <vPortFree+0xb8>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4013      	ands	r3, r2
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d01e      	beq.n	800a54e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d11a      	bne.n	800a54e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	685a      	ldr	r2, [r3, #4]
 800a51c:	4b0e      	ldr	r3, [pc, #56]	; (800a558 <vPortFree+0xb8>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	43db      	mvns	r3, r3
 800a522:	401a      	ands	r2, r3
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a528:	f7ff f9cc 	bl	80098c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	685a      	ldr	r2, [r3, #4]
 800a530:	4b0a      	ldr	r3, [pc, #40]	; (800a55c <vPortFree+0xbc>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4413      	add	r3, r2
 800a536:	4a09      	ldr	r2, [pc, #36]	; (800a55c <vPortFree+0xbc>)
 800a538:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a53a:	6938      	ldr	r0, [r7, #16]
 800a53c:	f000 f874 	bl	800a628 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a540:	4b07      	ldr	r3, [pc, #28]	; (800a560 <vPortFree+0xc0>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	3301      	adds	r3, #1
 800a546:	4a06      	ldr	r2, [pc, #24]	; (800a560 <vPortFree+0xc0>)
 800a548:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a54a:	f7ff f9c9 	bl	80098e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a54e:	bf00      	nop
 800a550:	3718      	adds	r7, #24
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	200048f8 	.word	0x200048f8
 800a55c:	200048e8 	.word	0x200048e8
 800a560:	200048f4 	.word	0x200048f4

0800a564 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a56a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a56e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a570:	4b27      	ldr	r3, [pc, #156]	; (800a610 <prvHeapInit+0xac>)
 800a572:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f003 0307 	and.w	r3, r3, #7
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00c      	beq.n	800a598 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	3307      	adds	r3, #7
 800a582:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f023 0307 	bic.w	r3, r3, #7
 800a58a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a58c:	68ba      	ldr	r2, [r7, #8]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	4a1f      	ldr	r2, [pc, #124]	; (800a610 <prvHeapInit+0xac>)
 800a594:	4413      	add	r3, r2
 800a596:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a59c:	4a1d      	ldr	r2, [pc, #116]	; (800a614 <prvHeapInit+0xb0>)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a5a2:	4b1c      	ldr	r3, [pc, #112]	; (800a614 <prvHeapInit+0xb0>)
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a5b0:	2208      	movs	r2, #8
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	1a9b      	subs	r3, r3, r2
 800a5b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f023 0307 	bic.w	r3, r3, #7
 800a5be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4a15      	ldr	r2, [pc, #84]	; (800a618 <prvHeapInit+0xb4>)
 800a5c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a5c6:	4b14      	ldr	r3, [pc, #80]	; (800a618 <prvHeapInit+0xb4>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a5ce:	4b12      	ldr	r3, [pc, #72]	; (800a618 <prvHeapInit+0xb4>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	1ad2      	subs	r2, r2, r3
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5e4:	4b0c      	ldr	r3, [pc, #48]	; (800a618 <prvHeapInit+0xb4>)
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	4a0a      	ldr	r2, [pc, #40]	; (800a61c <prvHeapInit+0xb8>)
 800a5f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	4a09      	ldr	r2, [pc, #36]	; (800a620 <prvHeapInit+0xbc>)
 800a5fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5fc:	4b09      	ldr	r3, [pc, #36]	; (800a624 <prvHeapInit+0xc0>)
 800a5fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a602:	601a      	str	r2, [r3, #0]
}
 800a604:	bf00      	nop
 800a606:	3714      	adds	r7, #20
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr
 800a610:	20000cdc 	.word	0x20000cdc
 800a614:	200048dc 	.word	0x200048dc
 800a618:	200048e4 	.word	0x200048e4
 800a61c:	200048ec 	.word	0x200048ec
 800a620:	200048e8 	.word	0x200048e8
 800a624:	200048f8 	.word	0x200048f8

0800a628 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a630:	4b28      	ldr	r3, [pc, #160]	; (800a6d4 <prvInsertBlockIntoFreeList+0xac>)
 800a632:	60fb      	str	r3, [r7, #12]
 800a634:	e002      	b.n	800a63c <prvInsertBlockIntoFreeList+0x14>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	429a      	cmp	r2, r3
 800a644:	d8f7      	bhi.n	800a636 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	4413      	add	r3, r2
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	429a      	cmp	r2, r3
 800a656:	d108      	bne.n	800a66a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	441a      	add	r2, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	441a      	add	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d118      	bne.n	800a6b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	4b15      	ldr	r3, [pc, #84]	; (800a6d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	429a      	cmp	r2, r3
 800a688:	d00d      	beq.n	800a6a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	685a      	ldr	r2, [r3, #4]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	441a      	add	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	601a      	str	r2, [r3, #0]
 800a6a4:	e008      	b.n	800a6b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a6a6:	4b0c      	ldr	r3, [pc, #48]	; (800a6d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	601a      	str	r2, [r3, #0]
 800a6ae:	e003      	b.n	800a6b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d002      	beq.n	800a6c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6c6:	bf00      	nop
 800a6c8:	3714      	adds	r7, #20
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop
 800a6d4:	200048dc 	.word	0x200048dc
 800a6d8:	200048e4 	.word	0x200048e4

0800a6dc <atof>:
 800a6dc:	2100      	movs	r1, #0
 800a6de:	f001 bdbd 	b.w	800c25c <strtod>
	...

0800a6e4 <__errno>:
 800a6e4:	4b01      	ldr	r3, [pc, #4]	; (800a6ec <__errno+0x8>)
 800a6e6:	6818      	ldr	r0, [r3, #0]
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	20000010 	.word	0x20000010

0800a6f0 <std>:
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	b510      	push	{r4, lr}
 800a6f4:	4604      	mov	r4, r0
 800a6f6:	e9c0 3300 	strd	r3, r3, [r0]
 800a6fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6fe:	6083      	str	r3, [r0, #8]
 800a700:	8181      	strh	r1, [r0, #12]
 800a702:	6643      	str	r3, [r0, #100]	; 0x64
 800a704:	81c2      	strh	r2, [r0, #14]
 800a706:	6183      	str	r3, [r0, #24]
 800a708:	4619      	mov	r1, r3
 800a70a:	2208      	movs	r2, #8
 800a70c:	305c      	adds	r0, #92	; 0x5c
 800a70e:	f000 f91a 	bl	800a946 <memset>
 800a712:	4b05      	ldr	r3, [pc, #20]	; (800a728 <std+0x38>)
 800a714:	6263      	str	r3, [r4, #36]	; 0x24
 800a716:	4b05      	ldr	r3, [pc, #20]	; (800a72c <std+0x3c>)
 800a718:	62a3      	str	r3, [r4, #40]	; 0x28
 800a71a:	4b05      	ldr	r3, [pc, #20]	; (800a730 <std+0x40>)
 800a71c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a71e:	4b05      	ldr	r3, [pc, #20]	; (800a734 <std+0x44>)
 800a720:	6224      	str	r4, [r4, #32]
 800a722:	6323      	str	r3, [r4, #48]	; 0x30
 800a724:	bd10      	pop	{r4, pc}
 800a726:	bf00      	nop
 800a728:	0800b565 	.word	0x0800b565
 800a72c:	0800b587 	.word	0x0800b587
 800a730:	0800b5bf 	.word	0x0800b5bf
 800a734:	0800b5e3 	.word	0x0800b5e3

0800a738 <_cleanup_r>:
 800a738:	4901      	ldr	r1, [pc, #4]	; (800a740 <_cleanup_r+0x8>)
 800a73a:	f000 b8af 	b.w	800a89c <_fwalk_reent>
 800a73e:	bf00      	nop
 800a740:	0800d239 	.word	0x0800d239

0800a744 <__sfmoreglue>:
 800a744:	b570      	push	{r4, r5, r6, lr}
 800a746:	2268      	movs	r2, #104	; 0x68
 800a748:	1e4d      	subs	r5, r1, #1
 800a74a:	4355      	muls	r5, r2
 800a74c:	460e      	mov	r6, r1
 800a74e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a752:	f000 f921 	bl	800a998 <_malloc_r>
 800a756:	4604      	mov	r4, r0
 800a758:	b140      	cbz	r0, 800a76c <__sfmoreglue+0x28>
 800a75a:	2100      	movs	r1, #0
 800a75c:	e9c0 1600 	strd	r1, r6, [r0]
 800a760:	300c      	adds	r0, #12
 800a762:	60a0      	str	r0, [r4, #8]
 800a764:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a768:	f000 f8ed 	bl	800a946 <memset>
 800a76c:	4620      	mov	r0, r4
 800a76e:	bd70      	pop	{r4, r5, r6, pc}

0800a770 <__sfp_lock_acquire>:
 800a770:	4801      	ldr	r0, [pc, #4]	; (800a778 <__sfp_lock_acquire+0x8>)
 800a772:	f000 b8d8 	b.w	800a926 <__retarget_lock_acquire_recursive>
 800a776:	bf00      	nop
 800a778:	200048fd 	.word	0x200048fd

0800a77c <__sfp_lock_release>:
 800a77c:	4801      	ldr	r0, [pc, #4]	; (800a784 <__sfp_lock_release+0x8>)
 800a77e:	f000 b8d3 	b.w	800a928 <__retarget_lock_release_recursive>
 800a782:	bf00      	nop
 800a784:	200048fd 	.word	0x200048fd

0800a788 <__sinit_lock_acquire>:
 800a788:	4801      	ldr	r0, [pc, #4]	; (800a790 <__sinit_lock_acquire+0x8>)
 800a78a:	f000 b8cc 	b.w	800a926 <__retarget_lock_acquire_recursive>
 800a78e:	bf00      	nop
 800a790:	200048fe 	.word	0x200048fe

0800a794 <__sinit_lock_release>:
 800a794:	4801      	ldr	r0, [pc, #4]	; (800a79c <__sinit_lock_release+0x8>)
 800a796:	f000 b8c7 	b.w	800a928 <__retarget_lock_release_recursive>
 800a79a:	bf00      	nop
 800a79c:	200048fe 	.word	0x200048fe

0800a7a0 <__sinit>:
 800a7a0:	b510      	push	{r4, lr}
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	f7ff fff0 	bl	800a788 <__sinit_lock_acquire>
 800a7a8:	69a3      	ldr	r3, [r4, #24]
 800a7aa:	b11b      	cbz	r3, 800a7b4 <__sinit+0x14>
 800a7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7b0:	f7ff bff0 	b.w	800a794 <__sinit_lock_release>
 800a7b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a7b8:	6523      	str	r3, [r4, #80]	; 0x50
 800a7ba:	4b13      	ldr	r3, [pc, #76]	; (800a808 <__sinit+0x68>)
 800a7bc:	4a13      	ldr	r2, [pc, #76]	; (800a80c <__sinit+0x6c>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a7c2:	42a3      	cmp	r3, r4
 800a7c4:	bf04      	itt	eq
 800a7c6:	2301      	moveq	r3, #1
 800a7c8:	61a3      	streq	r3, [r4, #24]
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f000 f820 	bl	800a810 <__sfp>
 800a7d0:	6060      	str	r0, [r4, #4]
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	f000 f81c 	bl	800a810 <__sfp>
 800a7d8:	60a0      	str	r0, [r4, #8]
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f000 f818 	bl	800a810 <__sfp>
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	60e0      	str	r0, [r4, #12]
 800a7e4:	2104      	movs	r1, #4
 800a7e6:	6860      	ldr	r0, [r4, #4]
 800a7e8:	f7ff ff82 	bl	800a6f0 <std>
 800a7ec:	68a0      	ldr	r0, [r4, #8]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	2109      	movs	r1, #9
 800a7f2:	f7ff ff7d 	bl	800a6f0 <std>
 800a7f6:	68e0      	ldr	r0, [r4, #12]
 800a7f8:	2202      	movs	r2, #2
 800a7fa:	2112      	movs	r1, #18
 800a7fc:	f7ff ff78 	bl	800a6f0 <std>
 800a800:	2301      	movs	r3, #1
 800a802:	61a3      	str	r3, [r4, #24]
 800a804:	e7d2      	b.n	800a7ac <__sinit+0xc>
 800a806:	bf00      	nop
 800a808:	0800f378 	.word	0x0800f378
 800a80c:	0800a739 	.word	0x0800a739

0800a810 <__sfp>:
 800a810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a812:	4607      	mov	r7, r0
 800a814:	f7ff ffac 	bl	800a770 <__sfp_lock_acquire>
 800a818:	4b1e      	ldr	r3, [pc, #120]	; (800a894 <__sfp+0x84>)
 800a81a:	681e      	ldr	r6, [r3, #0]
 800a81c:	69b3      	ldr	r3, [r6, #24]
 800a81e:	b913      	cbnz	r3, 800a826 <__sfp+0x16>
 800a820:	4630      	mov	r0, r6
 800a822:	f7ff ffbd 	bl	800a7a0 <__sinit>
 800a826:	3648      	adds	r6, #72	; 0x48
 800a828:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a82c:	3b01      	subs	r3, #1
 800a82e:	d503      	bpl.n	800a838 <__sfp+0x28>
 800a830:	6833      	ldr	r3, [r6, #0]
 800a832:	b30b      	cbz	r3, 800a878 <__sfp+0x68>
 800a834:	6836      	ldr	r6, [r6, #0]
 800a836:	e7f7      	b.n	800a828 <__sfp+0x18>
 800a838:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a83c:	b9d5      	cbnz	r5, 800a874 <__sfp+0x64>
 800a83e:	4b16      	ldr	r3, [pc, #88]	; (800a898 <__sfp+0x88>)
 800a840:	60e3      	str	r3, [r4, #12]
 800a842:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a846:	6665      	str	r5, [r4, #100]	; 0x64
 800a848:	f000 f86c 	bl	800a924 <__retarget_lock_init_recursive>
 800a84c:	f7ff ff96 	bl	800a77c <__sfp_lock_release>
 800a850:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a854:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a858:	6025      	str	r5, [r4, #0]
 800a85a:	61a5      	str	r5, [r4, #24]
 800a85c:	2208      	movs	r2, #8
 800a85e:	4629      	mov	r1, r5
 800a860:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a864:	f000 f86f 	bl	800a946 <memset>
 800a868:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a86c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a870:	4620      	mov	r0, r4
 800a872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a874:	3468      	adds	r4, #104	; 0x68
 800a876:	e7d9      	b.n	800a82c <__sfp+0x1c>
 800a878:	2104      	movs	r1, #4
 800a87a:	4638      	mov	r0, r7
 800a87c:	f7ff ff62 	bl	800a744 <__sfmoreglue>
 800a880:	4604      	mov	r4, r0
 800a882:	6030      	str	r0, [r6, #0]
 800a884:	2800      	cmp	r0, #0
 800a886:	d1d5      	bne.n	800a834 <__sfp+0x24>
 800a888:	f7ff ff78 	bl	800a77c <__sfp_lock_release>
 800a88c:	230c      	movs	r3, #12
 800a88e:	603b      	str	r3, [r7, #0]
 800a890:	e7ee      	b.n	800a870 <__sfp+0x60>
 800a892:	bf00      	nop
 800a894:	0800f378 	.word	0x0800f378
 800a898:	ffff0001 	.word	0xffff0001

0800a89c <_fwalk_reent>:
 800a89c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8a0:	4606      	mov	r6, r0
 800a8a2:	4688      	mov	r8, r1
 800a8a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a8a8:	2700      	movs	r7, #0
 800a8aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8ae:	f1b9 0901 	subs.w	r9, r9, #1
 800a8b2:	d505      	bpl.n	800a8c0 <_fwalk_reent+0x24>
 800a8b4:	6824      	ldr	r4, [r4, #0]
 800a8b6:	2c00      	cmp	r4, #0
 800a8b8:	d1f7      	bne.n	800a8aa <_fwalk_reent+0xe>
 800a8ba:	4638      	mov	r0, r7
 800a8bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8c0:	89ab      	ldrh	r3, [r5, #12]
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d907      	bls.n	800a8d6 <_fwalk_reent+0x3a>
 800a8c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	d003      	beq.n	800a8d6 <_fwalk_reent+0x3a>
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	47c0      	blx	r8
 800a8d4:	4307      	orrs	r7, r0
 800a8d6:	3568      	adds	r5, #104	; 0x68
 800a8d8:	e7e9      	b.n	800a8ae <_fwalk_reent+0x12>
	...

0800a8dc <__libc_init_array>:
 800a8dc:	b570      	push	{r4, r5, r6, lr}
 800a8de:	4d0d      	ldr	r5, [pc, #52]	; (800a914 <__libc_init_array+0x38>)
 800a8e0:	4c0d      	ldr	r4, [pc, #52]	; (800a918 <__libc_init_array+0x3c>)
 800a8e2:	1b64      	subs	r4, r4, r5
 800a8e4:	10a4      	asrs	r4, r4, #2
 800a8e6:	2600      	movs	r6, #0
 800a8e8:	42a6      	cmp	r6, r4
 800a8ea:	d109      	bne.n	800a900 <__libc_init_array+0x24>
 800a8ec:	4d0b      	ldr	r5, [pc, #44]	; (800a91c <__libc_init_array+0x40>)
 800a8ee:	4c0c      	ldr	r4, [pc, #48]	; (800a920 <__libc_init_array+0x44>)
 800a8f0:	f004 faac 	bl	800ee4c <_init>
 800a8f4:	1b64      	subs	r4, r4, r5
 800a8f6:	10a4      	asrs	r4, r4, #2
 800a8f8:	2600      	movs	r6, #0
 800a8fa:	42a6      	cmp	r6, r4
 800a8fc:	d105      	bne.n	800a90a <__libc_init_array+0x2e>
 800a8fe:	bd70      	pop	{r4, r5, r6, pc}
 800a900:	f855 3b04 	ldr.w	r3, [r5], #4
 800a904:	4798      	blx	r3
 800a906:	3601      	adds	r6, #1
 800a908:	e7ee      	b.n	800a8e8 <__libc_init_array+0xc>
 800a90a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a90e:	4798      	blx	r3
 800a910:	3601      	adds	r6, #1
 800a912:	e7f2      	b.n	800a8fa <__libc_init_array+0x1e>
 800a914:	0800f830 	.word	0x0800f830
 800a918:	0800f830 	.word	0x0800f830
 800a91c:	0800f830 	.word	0x0800f830
 800a920:	0800f834 	.word	0x0800f834

0800a924 <__retarget_lock_init_recursive>:
 800a924:	4770      	bx	lr

0800a926 <__retarget_lock_acquire_recursive>:
 800a926:	4770      	bx	lr

0800a928 <__retarget_lock_release_recursive>:
 800a928:	4770      	bx	lr

0800a92a <memcpy>:
 800a92a:	440a      	add	r2, r1
 800a92c:	4291      	cmp	r1, r2
 800a92e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a932:	d100      	bne.n	800a936 <memcpy+0xc>
 800a934:	4770      	bx	lr
 800a936:	b510      	push	{r4, lr}
 800a938:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a93c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a940:	4291      	cmp	r1, r2
 800a942:	d1f9      	bne.n	800a938 <memcpy+0xe>
 800a944:	bd10      	pop	{r4, pc}

0800a946 <memset>:
 800a946:	4402      	add	r2, r0
 800a948:	4603      	mov	r3, r0
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d100      	bne.n	800a950 <memset+0xa>
 800a94e:	4770      	bx	lr
 800a950:	f803 1b01 	strb.w	r1, [r3], #1
 800a954:	e7f9      	b.n	800a94a <memset+0x4>
	...

0800a958 <sbrk_aligned>:
 800a958:	b570      	push	{r4, r5, r6, lr}
 800a95a:	4e0e      	ldr	r6, [pc, #56]	; (800a994 <sbrk_aligned+0x3c>)
 800a95c:	460c      	mov	r4, r1
 800a95e:	6831      	ldr	r1, [r6, #0]
 800a960:	4605      	mov	r5, r0
 800a962:	b911      	cbnz	r1, 800a96a <sbrk_aligned+0x12>
 800a964:	f000 fdee 	bl	800b544 <_sbrk_r>
 800a968:	6030      	str	r0, [r6, #0]
 800a96a:	4621      	mov	r1, r4
 800a96c:	4628      	mov	r0, r5
 800a96e:	f000 fde9 	bl	800b544 <_sbrk_r>
 800a972:	1c43      	adds	r3, r0, #1
 800a974:	d00a      	beq.n	800a98c <sbrk_aligned+0x34>
 800a976:	1cc4      	adds	r4, r0, #3
 800a978:	f024 0403 	bic.w	r4, r4, #3
 800a97c:	42a0      	cmp	r0, r4
 800a97e:	d007      	beq.n	800a990 <sbrk_aligned+0x38>
 800a980:	1a21      	subs	r1, r4, r0
 800a982:	4628      	mov	r0, r5
 800a984:	f000 fdde 	bl	800b544 <_sbrk_r>
 800a988:	3001      	adds	r0, #1
 800a98a:	d101      	bne.n	800a990 <sbrk_aligned+0x38>
 800a98c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a990:	4620      	mov	r0, r4
 800a992:	bd70      	pop	{r4, r5, r6, pc}
 800a994:	20004904 	.word	0x20004904

0800a998 <_malloc_r>:
 800a998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a99c:	1ccd      	adds	r5, r1, #3
 800a99e:	f025 0503 	bic.w	r5, r5, #3
 800a9a2:	3508      	adds	r5, #8
 800a9a4:	2d0c      	cmp	r5, #12
 800a9a6:	bf38      	it	cc
 800a9a8:	250c      	movcc	r5, #12
 800a9aa:	2d00      	cmp	r5, #0
 800a9ac:	4607      	mov	r7, r0
 800a9ae:	db01      	blt.n	800a9b4 <_malloc_r+0x1c>
 800a9b0:	42a9      	cmp	r1, r5
 800a9b2:	d905      	bls.n	800a9c0 <_malloc_r+0x28>
 800a9b4:	230c      	movs	r3, #12
 800a9b6:	603b      	str	r3, [r7, #0]
 800a9b8:	2600      	movs	r6, #0
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c0:	4e2e      	ldr	r6, [pc, #184]	; (800aa7c <_malloc_r+0xe4>)
 800a9c2:	f003 f87b 	bl	800dabc <__malloc_lock>
 800a9c6:	6833      	ldr	r3, [r6, #0]
 800a9c8:	461c      	mov	r4, r3
 800a9ca:	bb34      	cbnz	r4, 800aa1a <_malloc_r+0x82>
 800a9cc:	4629      	mov	r1, r5
 800a9ce:	4638      	mov	r0, r7
 800a9d0:	f7ff ffc2 	bl	800a958 <sbrk_aligned>
 800a9d4:	1c43      	adds	r3, r0, #1
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	d14d      	bne.n	800aa76 <_malloc_r+0xde>
 800a9da:	6834      	ldr	r4, [r6, #0]
 800a9dc:	4626      	mov	r6, r4
 800a9de:	2e00      	cmp	r6, #0
 800a9e0:	d140      	bne.n	800aa64 <_malloc_r+0xcc>
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	4631      	mov	r1, r6
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	eb04 0803 	add.w	r8, r4, r3
 800a9ec:	f000 fdaa 	bl	800b544 <_sbrk_r>
 800a9f0:	4580      	cmp	r8, r0
 800a9f2:	d13a      	bne.n	800aa6a <_malloc_r+0xd2>
 800a9f4:	6821      	ldr	r1, [r4, #0]
 800a9f6:	3503      	adds	r5, #3
 800a9f8:	1a6d      	subs	r5, r5, r1
 800a9fa:	f025 0503 	bic.w	r5, r5, #3
 800a9fe:	3508      	adds	r5, #8
 800aa00:	2d0c      	cmp	r5, #12
 800aa02:	bf38      	it	cc
 800aa04:	250c      	movcc	r5, #12
 800aa06:	4629      	mov	r1, r5
 800aa08:	4638      	mov	r0, r7
 800aa0a:	f7ff ffa5 	bl	800a958 <sbrk_aligned>
 800aa0e:	3001      	adds	r0, #1
 800aa10:	d02b      	beq.n	800aa6a <_malloc_r+0xd2>
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	442b      	add	r3, r5
 800aa16:	6023      	str	r3, [r4, #0]
 800aa18:	e00e      	b.n	800aa38 <_malloc_r+0xa0>
 800aa1a:	6822      	ldr	r2, [r4, #0]
 800aa1c:	1b52      	subs	r2, r2, r5
 800aa1e:	d41e      	bmi.n	800aa5e <_malloc_r+0xc6>
 800aa20:	2a0b      	cmp	r2, #11
 800aa22:	d916      	bls.n	800aa52 <_malloc_r+0xba>
 800aa24:	1961      	adds	r1, r4, r5
 800aa26:	42a3      	cmp	r3, r4
 800aa28:	6025      	str	r5, [r4, #0]
 800aa2a:	bf18      	it	ne
 800aa2c:	6059      	strne	r1, [r3, #4]
 800aa2e:	6863      	ldr	r3, [r4, #4]
 800aa30:	bf08      	it	eq
 800aa32:	6031      	streq	r1, [r6, #0]
 800aa34:	5162      	str	r2, [r4, r5]
 800aa36:	604b      	str	r3, [r1, #4]
 800aa38:	4638      	mov	r0, r7
 800aa3a:	f104 060b 	add.w	r6, r4, #11
 800aa3e:	f003 f843 	bl	800dac8 <__malloc_unlock>
 800aa42:	f026 0607 	bic.w	r6, r6, #7
 800aa46:	1d23      	adds	r3, r4, #4
 800aa48:	1af2      	subs	r2, r6, r3
 800aa4a:	d0b6      	beq.n	800a9ba <_malloc_r+0x22>
 800aa4c:	1b9b      	subs	r3, r3, r6
 800aa4e:	50a3      	str	r3, [r4, r2]
 800aa50:	e7b3      	b.n	800a9ba <_malloc_r+0x22>
 800aa52:	6862      	ldr	r2, [r4, #4]
 800aa54:	42a3      	cmp	r3, r4
 800aa56:	bf0c      	ite	eq
 800aa58:	6032      	streq	r2, [r6, #0]
 800aa5a:	605a      	strne	r2, [r3, #4]
 800aa5c:	e7ec      	b.n	800aa38 <_malloc_r+0xa0>
 800aa5e:	4623      	mov	r3, r4
 800aa60:	6864      	ldr	r4, [r4, #4]
 800aa62:	e7b2      	b.n	800a9ca <_malloc_r+0x32>
 800aa64:	4634      	mov	r4, r6
 800aa66:	6876      	ldr	r6, [r6, #4]
 800aa68:	e7b9      	b.n	800a9de <_malloc_r+0x46>
 800aa6a:	230c      	movs	r3, #12
 800aa6c:	603b      	str	r3, [r7, #0]
 800aa6e:	4638      	mov	r0, r7
 800aa70:	f003 f82a 	bl	800dac8 <__malloc_unlock>
 800aa74:	e7a1      	b.n	800a9ba <_malloc_r+0x22>
 800aa76:	6025      	str	r5, [r4, #0]
 800aa78:	e7de      	b.n	800aa38 <_malloc_r+0xa0>
 800aa7a:	bf00      	nop
 800aa7c:	20004900 	.word	0x20004900

0800aa80 <__cvt>:
 800aa80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa84:	ec55 4b10 	vmov	r4, r5, d0
 800aa88:	2d00      	cmp	r5, #0
 800aa8a:	460e      	mov	r6, r1
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	462b      	mov	r3, r5
 800aa90:	bfbb      	ittet	lt
 800aa92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aa96:	461d      	movlt	r5, r3
 800aa98:	2300      	movge	r3, #0
 800aa9a:	232d      	movlt	r3, #45	; 0x2d
 800aa9c:	700b      	strb	r3, [r1, #0]
 800aa9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aaa0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aaa4:	4691      	mov	r9, r2
 800aaa6:	f023 0820 	bic.w	r8, r3, #32
 800aaaa:	bfbc      	itt	lt
 800aaac:	4622      	movlt	r2, r4
 800aaae:	4614      	movlt	r4, r2
 800aab0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aab4:	d005      	beq.n	800aac2 <__cvt+0x42>
 800aab6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aaba:	d100      	bne.n	800aabe <__cvt+0x3e>
 800aabc:	3601      	adds	r6, #1
 800aabe:	2102      	movs	r1, #2
 800aac0:	e000      	b.n	800aac4 <__cvt+0x44>
 800aac2:	2103      	movs	r1, #3
 800aac4:	ab03      	add	r3, sp, #12
 800aac6:	9301      	str	r3, [sp, #4]
 800aac8:	ab02      	add	r3, sp, #8
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	ec45 4b10 	vmov	d0, r4, r5
 800aad0:	4653      	mov	r3, sl
 800aad2:	4632      	mov	r2, r6
 800aad4:	f001 fd3c 	bl	800c550 <_dtoa_r>
 800aad8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aadc:	4607      	mov	r7, r0
 800aade:	d102      	bne.n	800aae6 <__cvt+0x66>
 800aae0:	f019 0f01 	tst.w	r9, #1
 800aae4:	d022      	beq.n	800ab2c <__cvt+0xac>
 800aae6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aaea:	eb07 0906 	add.w	r9, r7, r6
 800aaee:	d110      	bne.n	800ab12 <__cvt+0x92>
 800aaf0:	783b      	ldrb	r3, [r7, #0]
 800aaf2:	2b30      	cmp	r3, #48	; 0x30
 800aaf4:	d10a      	bne.n	800ab0c <__cvt+0x8c>
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	2300      	movs	r3, #0
 800aafa:	4620      	mov	r0, r4
 800aafc:	4629      	mov	r1, r5
 800aafe:	f7f5 ffeb 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab02:	b918      	cbnz	r0, 800ab0c <__cvt+0x8c>
 800ab04:	f1c6 0601 	rsb	r6, r6, #1
 800ab08:	f8ca 6000 	str.w	r6, [sl]
 800ab0c:	f8da 3000 	ldr.w	r3, [sl]
 800ab10:	4499      	add	r9, r3
 800ab12:	2200      	movs	r2, #0
 800ab14:	2300      	movs	r3, #0
 800ab16:	4620      	mov	r0, r4
 800ab18:	4629      	mov	r1, r5
 800ab1a:	f7f5 ffdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab1e:	b108      	cbz	r0, 800ab24 <__cvt+0xa4>
 800ab20:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab24:	2230      	movs	r2, #48	; 0x30
 800ab26:	9b03      	ldr	r3, [sp, #12]
 800ab28:	454b      	cmp	r3, r9
 800ab2a:	d307      	bcc.n	800ab3c <__cvt+0xbc>
 800ab2c:	9b03      	ldr	r3, [sp, #12]
 800ab2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab30:	1bdb      	subs	r3, r3, r7
 800ab32:	4638      	mov	r0, r7
 800ab34:	6013      	str	r3, [r2, #0]
 800ab36:	b004      	add	sp, #16
 800ab38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab3c:	1c59      	adds	r1, r3, #1
 800ab3e:	9103      	str	r1, [sp, #12]
 800ab40:	701a      	strb	r2, [r3, #0]
 800ab42:	e7f0      	b.n	800ab26 <__cvt+0xa6>

0800ab44 <__exponent>:
 800ab44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab46:	4603      	mov	r3, r0
 800ab48:	2900      	cmp	r1, #0
 800ab4a:	bfb8      	it	lt
 800ab4c:	4249      	neglt	r1, r1
 800ab4e:	f803 2b02 	strb.w	r2, [r3], #2
 800ab52:	bfb4      	ite	lt
 800ab54:	222d      	movlt	r2, #45	; 0x2d
 800ab56:	222b      	movge	r2, #43	; 0x2b
 800ab58:	2909      	cmp	r1, #9
 800ab5a:	7042      	strb	r2, [r0, #1]
 800ab5c:	dd2a      	ble.n	800abb4 <__exponent+0x70>
 800ab5e:	f10d 0407 	add.w	r4, sp, #7
 800ab62:	46a4      	mov	ip, r4
 800ab64:	270a      	movs	r7, #10
 800ab66:	46a6      	mov	lr, r4
 800ab68:	460a      	mov	r2, r1
 800ab6a:	fb91 f6f7 	sdiv	r6, r1, r7
 800ab6e:	fb07 1516 	mls	r5, r7, r6, r1
 800ab72:	3530      	adds	r5, #48	; 0x30
 800ab74:	2a63      	cmp	r2, #99	; 0x63
 800ab76:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ab7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ab7e:	4631      	mov	r1, r6
 800ab80:	dcf1      	bgt.n	800ab66 <__exponent+0x22>
 800ab82:	3130      	adds	r1, #48	; 0x30
 800ab84:	f1ae 0502 	sub.w	r5, lr, #2
 800ab88:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ab8c:	1c44      	adds	r4, r0, #1
 800ab8e:	4629      	mov	r1, r5
 800ab90:	4561      	cmp	r1, ip
 800ab92:	d30a      	bcc.n	800abaa <__exponent+0x66>
 800ab94:	f10d 0209 	add.w	r2, sp, #9
 800ab98:	eba2 020e 	sub.w	r2, r2, lr
 800ab9c:	4565      	cmp	r5, ip
 800ab9e:	bf88      	it	hi
 800aba0:	2200      	movhi	r2, #0
 800aba2:	4413      	add	r3, r2
 800aba4:	1a18      	subs	r0, r3, r0
 800aba6:	b003      	add	sp, #12
 800aba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abae:	f804 2f01 	strb.w	r2, [r4, #1]!
 800abb2:	e7ed      	b.n	800ab90 <__exponent+0x4c>
 800abb4:	2330      	movs	r3, #48	; 0x30
 800abb6:	3130      	adds	r1, #48	; 0x30
 800abb8:	7083      	strb	r3, [r0, #2]
 800abba:	70c1      	strb	r1, [r0, #3]
 800abbc:	1d03      	adds	r3, r0, #4
 800abbe:	e7f1      	b.n	800aba4 <__exponent+0x60>

0800abc0 <_printf_float>:
 800abc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc4:	ed2d 8b02 	vpush	{d8}
 800abc8:	b08d      	sub	sp, #52	; 0x34
 800abca:	460c      	mov	r4, r1
 800abcc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800abd0:	4616      	mov	r6, r2
 800abd2:	461f      	mov	r7, r3
 800abd4:	4605      	mov	r5, r0
 800abd6:	f002 fedb 	bl	800d990 <_localeconv_r>
 800abda:	f8d0 a000 	ldr.w	sl, [r0]
 800abde:	4650      	mov	r0, sl
 800abe0:	f7f5 fafe 	bl	80001e0 <strlen>
 800abe4:	2300      	movs	r3, #0
 800abe6:	930a      	str	r3, [sp, #40]	; 0x28
 800abe8:	6823      	ldr	r3, [r4, #0]
 800abea:	9305      	str	r3, [sp, #20]
 800abec:	f8d8 3000 	ldr.w	r3, [r8]
 800abf0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800abf4:	3307      	adds	r3, #7
 800abf6:	f023 0307 	bic.w	r3, r3, #7
 800abfa:	f103 0208 	add.w	r2, r3, #8
 800abfe:	f8c8 2000 	str.w	r2, [r8]
 800ac02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ac0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ac0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac12:	9307      	str	r3, [sp, #28]
 800ac14:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac18:	ee08 0a10 	vmov	s16, r0
 800ac1c:	4b9f      	ldr	r3, [pc, #636]	; (800ae9c <_printf_float+0x2dc>)
 800ac1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac26:	f7f5 ff89 	bl	8000b3c <__aeabi_dcmpun>
 800ac2a:	bb88      	cbnz	r0, 800ac90 <_printf_float+0xd0>
 800ac2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac30:	4b9a      	ldr	r3, [pc, #616]	; (800ae9c <_printf_float+0x2dc>)
 800ac32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac36:	f7f5 ff63 	bl	8000b00 <__aeabi_dcmple>
 800ac3a:	bb48      	cbnz	r0, 800ac90 <_printf_float+0xd0>
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	2300      	movs	r3, #0
 800ac40:	4640      	mov	r0, r8
 800ac42:	4649      	mov	r1, r9
 800ac44:	f7f5 ff52 	bl	8000aec <__aeabi_dcmplt>
 800ac48:	b110      	cbz	r0, 800ac50 <_printf_float+0x90>
 800ac4a:	232d      	movs	r3, #45	; 0x2d
 800ac4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac50:	4b93      	ldr	r3, [pc, #588]	; (800aea0 <_printf_float+0x2e0>)
 800ac52:	4894      	ldr	r0, [pc, #592]	; (800aea4 <_printf_float+0x2e4>)
 800ac54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ac58:	bf94      	ite	ls
 800ac5a:	4698      	movls	r8, r3
 800ac5c:	4680      	movhi	r8, r0
 800ac5e:	2303      	movs	r3, #3
 800ac60:	6123      	str	r3, [r4, #16]
 800ac62:	9b05      	ldr	r3, [sp, #20]
 800ac64:	f023 0204 	bic.w	r2, r3, #4
 800ac68:	6022      	str	r2, [r4, #0]
 800ac6a:	f04f 0900 	mov.w	r9, #0
 800ac6e:	9700      	str	r7, [sp, #0]
 800ac70:	4633      	mov	r3, r6
 800ac72:	aa0b      	add	r2, sp, #44	; 0x2c
 800ac74:	4621      	mov	r1, r4
 800ac76:	4628      	mov	r0, r5
 800ac78:	f000 f9d8 	bl	800b02c <_printf_common>
 800ac7c:	3001      	adds	r0, #1
 800ac7e:	f040 8090 	bne.w	800ada2 <_printf_float+0x1e2>
 800ac82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac86:	b00d      	add	sp, #52	; 0x34
 800ac88:	ecbd 8b02 	vpop	{d8}
 800ac8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac90:	4642      	mov	r2, r8
 800ac92:	464b      	mov	r3, r9
 800ac94:	4640      	mov	r0, r8
 800ac96:	4649      	mov	r1, r9
 800ac98:	f7f5 ff50 	bl	8000b3c <__aeabi_dcmpun>
 800ac9c:	b140      	cbz	r0, 800acb0 <_printf_float+0xf0>
 800ac9e:	464b      	mov	r3, r9
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	bfbc      	itt	lt
 800aca4:	232d      	movlt	r3, #45	; 0x2d
 800aca6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800acaa:	487f      	ldr	r0, [pc, #508]	; (800aea8 <_printf_float+0x2e8>)
 800acac:	4b7f      	ldr	r3, [pc, #508]	; (800aeac <_printf_float+0x2ec>)
 800acae:	e7d1      	b.n	800ac54 <_printf_float+0x94>
 800acb0:	6863      	ldr	r3, [r4, #4]
 800acb2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800acb6:	9206      	str	r2, [sp, #24]
 800acb8:	1c5a      	adds	r2, r3, #1
 800acba:	d13f      	bne.n	800ad3c <_printf_float+0x17c>
 800acbc:	2306      	movs	r3, #6
 800acbe:	6063      	str	r3, [r4, #4]
 800acc0:	9b05      	ldr	r3, [sp, #20]
 800acc2:	6861      	ldr	r1, [r4, #4]
 800acc4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800acc8:	2300      	movs	r3, #0
 800acca:	9303      	str	r3, [sp, #12]
 800accc:	ab0a      	add	r3, sp, #40	; 0x28
 800acce:	e9cd b301 	strd	fp, r3, [sp, #4]
 800acd2:	ab09      	add	r3, sp, #36	; 0x24
 800acd4:	ec49 8b10 	vmov	d0, r8, r9
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	6022      	str	r2, [r4, #0]
 800acdc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ace0:	4628      	mov	r0, r5
 800ace2:	f7ff fecd 	bl	800aa80 <__cvt>
 800ace6:	9b06      	ldr	r3, [sp, #24]
 800ace8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acea:	2b47      	cmp	r3, #71	; 0x47
 800acec:	4680      	mov	r8, r0
 800acee:	d108      	bne.n	800ad02 <_printf_float+0x142>
 800acf0:	1cc8      	adds	r0, r1, #3
 800acf2:	db02      	blt.n	800acfa <_printf_float+0x13a>
 800acf4:	6863      	ldr	r3, [r4, #4]
 800acf6:	4299      	cmp	r1, r3
 800acf8:	dd41      	ble.n	800ad7e <_printf_float+0x1be>
 800acfa:	f1ab 0b02 	sub.w	fp, fp, #2
 800acfe:	fa5f fb8b 	uxtb.w	fp, fp
 800ad02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad06:	d820      	bhi.n	800ad4a <_printf_float+0x18a>
 800ad08:	3901      	subs	r1, #1
 800ad0a:	465a      	mov	r2, fp
 800ad0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad10:	9109      	str	r1, [sp, #36]	; 0x24
 800ad12:	f7ff ff17 	bl	800ab44 <__exponent>
 800ad16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad18:	1813      	adds	r3, r2, r0
 800ad1a:	2a01      	cmp	r2, #1
 800ad1c:	4681      	mov	r9, r0
 800ad1e:	6123      	str	r3, [r4, #16]
 800ad20:	dc02      	bgt.n	800ad28 <_printf_float+0x168>
 800ad22:	6822      	ldr	r2, [r4, #0]
 800ad24:	07d2      	lsls	r2, r2, #31
 800ad26:	d501      	bpl.n	800ad2c <_printf_float+0x16c>
 800ad28:	3301      	adds	r3, #1
 800ad2a:	6123      	str	r3, [r4, #16]
 800ad2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d09c      	beq.n	800ac6e <_printf_float+0xae>
 800ad34:	232d      	movs	r3, #45	; 0x2d
 800ad36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad3a:	e798      	b.n	800ac6e <_printf_float+0xae>
 800ad3c:	9a06      	ldr	r2, [sp, #24]
 800ad3e:	2a47      	cmp	r2, #71	; 0x47
 800ad40:	d1be      	bne.n	800acc0 <_printf_float+0x100>
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1bc      	bne.n	800acc0 <_printf_float+0x100>
 800ad46:	2301      	movs	r3, #1
 800ad48:	e7b9      	b.n	800acbe <_printf_float+0xfe>
 800ad4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ad4e:	d118      	bne.n	800ad82 <_printf_float+0x1c2>
 800ad50:	2900      	cmp	r1, #0
 800ad52:	6863      	ldr	r3, [r4, #4]
 800ad54:	dd0b      	ble.n	800ad6e <_printf_float+0x1ae>
 800ad56:	6121      	str	r1, [r4, #16]
 800ad58:	b913      	cbnz	r3, 800ad60 <_printf_float+0x1a0>
 800ad5a:	6822      	ldr	r2, [r4, #0]
 800ad5c:	07d0      	lsls	r0, r2, #31
 800ad5e:	d502      	bpl.n	800ad66 <_printf_float+0x1a6>
 800ad60:	3301      	adds	r3, #1
 800ad62:	440b      	add	r3, r1
 800ad64:	6123      	str	r3, [r4, #16]
 800ad66:	65a1      	str	r1, [r4, #88]	; 0x58
 800ad68:	f04f 0900 	mov.w	r9, #0
 800ad6c:	e7de      	b.n	800ad2c <_printf_float+0x16c>
 800ad6e:	b913      	cbnz	r3, 800ad76 <_printf_float+0x1b6>
 800ad70:	6822      	ldr	r2, [r4, #0]
 800ad72:	07d2      	lsls	r2, r2, #31
 800ad74:	d501      	bpl.n	800ad7a <_printf_float+0x1ba>
 800ad76:	3302      	adds	r3, #2
 800ad78:	e7f4      	b.n	800ad64 <_printf_float+0x1a4>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	e7f2      	b.n	800ad64 <_printf_float+0x1a4>
 800ad7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ad82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad84:	4299      	cmp	r1, r3
 800ad86:	db05      	blt.n	800ad94 <_printf_float+0x1d4>
 800ad88:	6823      	ldr	r3, [r4, #0]
 800ad8a:	6121      	str	r1, [r4, #16]
 800ad8c:	07d8      	lsls	r0, r3, #31
 800ad8e:	d5ea      	bpl.n	800ad66 <_printf_float+0x1a6>
 800ad90:	1c4b      	adds	r3, r1, #1
 800ad92:	e7e7      	b.n	800ad64 <_printf_float+0x1a4>
 800ad94:	2900      	cmp	r1, #0
 800ad96:	bfd4      	ite	le
 800ad98:	f1c1 0202 	rsble	r2, r1, #2
 800ad9c:	2201      	movgt	r2, #1
 800ad9e:	4413      	add	r3, r2
 800ada0:	e7e0      	b.n	800ad64 <_printf_float+0x1a4>
 800ada2:	6823      	ldr	r3, [r4, #0]
 800ada4:	055a      	lsls	r2, r3, #21
 800ada6:	d407      	bmi.n	800adb8 <_printf_float+0x1f8>
 800ada8:	6923      	ldr	r3, [r4, #16]
 800adaa:	4642      	mov	r2, r8
 800adac:	4631      	mov	r1, r6
 800adae:	4628      	mov	r0, r5
 800adb0:	47b8      	blx	r7
 800adb2:	3001      	adds	r0, #1
 800adb4:	d12c      	bne.n	800ae10 <_printf_float+0x250>
 800adb6:	e764      	b.n	800ac82 <_printf_float+0xc2>
 800adb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800adbc:	f240 80e0 	bls.w	800af80 <_printf_float+0x3c0>
 800adc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800adc4:	2200      	movs	r2, #0
 800adc6:	2300      	movs	r3, #0
 800adc8:	f7f5 fe86 	bl	8000ad8 <__aeabi_dcmpeq>
 800adcc:	2800      	cmp	r0, #0
 800adce:	d034      	beq.n	800ae3a <_printf_float+0x27a>
 800add0:	4a37      	ldr	r2, [pc, #220]	; (800aeb0 <_printf_float+0x2f0>)
 800add2:	2301      	movs	r3, #1
 800add4:	4631      	mov	r1, r6
 800add6:	4628      	mov	r0, r5
 800add8:	47b8      	blx	r7
 800adda:	3001      	adds	r0, #1
 800addc:	f43f af51 	beq.w	800ac82 <_printf_float+0xc2>
 800ade0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ade4:	429a      	cmp	r2, r3
 800ade6:	db02      	blt.n	800adee <_printf_float+0x22e>
 800ade8:	6823      	ldr	r3, [r4, #0]
 800adea:	07d8      	lsls	r0, r3, #31
 800adec:	d510      	bpl.n	800ae10 <_printf_float+0x250>
 800adee:	ee18 3a10 	vmov	r3, s16
 800adf2:	4652      	mov	r2, sl
 800adf4:	4631      	mov	r1, r6
 800adf6:	4628      	mov	r0, r5
 800adf8:	47b8      	blx	r7
 800adfa:	3001      	adds	r0, #1
 800adfc:	f43f af41 	beq.w	800ac82 <_printf_float+0xc2>
 800ae00:	f04f 0800 	mov.w	r8, #0
 800ae04:	f104 091a 	add.w	r9, r4, #26
 800ae08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	4543      	cmp	r3, r8
 800ae0e:	dc09      	bgt.n	800ae24 <_printf_float+0x264>
 800ae10:	6823      	ldr	r3, [r4, #0]
 800ae12:	079b      	lsls	r3, r3, #30
 800ae14:	f100 8105 	bmi.w	800b022 <_printf_float+0x462>
 800ae18:	68e0      	ldr	r0, [r4, #12]
 800ae1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae1c:	4298      	cmp	r0, r3
 800ae1e:	bfb8      	it	lt
 800ae20:	4618      	movlt	r0, r3
 800ae22:	e730      	b.n	800ac86 <_printf_float+0xc6>
 800ae24:	2301      	movs	r3, #1
 800ae26:	464a      	mov	r2, r9
 800ae28:	4631      	mov	r1, r6
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	47b8      	blx	r7
 800ae2e:	3001      	adds	r0, #1
 800ae30:	f43f af27 	beq.w	800ac82 <_printf_float+0xc2>
 800ae34:	f108 0801 	add.w	r8, r8, #1
 800ae38:	e7e6      	b.n	800ae08 <_printf_float+0x248>
 800ae3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	dc39      	bgt.n	800aeb4 <_printf_float+0x2f4>
 800ae40:	4a1b      	ldr	r2, [pc, #108]	; (800aeb0 <_printf_float+0x2f0>)
 800ae42:	2301      	movs	r3, #1
 800ae44:	4631      	mov	r1, r6
 800ae46:	4628      	mov	r0, r5
 800ae48:	47b8      	blx	r7
 800ae4a:	3001      	adds	r0, #1
 800ae4c:	f43f af19 	beq.w	800ac82 <_printf_float+0xc2>
 800ae50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae54:	4313      	orrs	r3, r2
 800ae56:	d102      	bne.n	800ae5e <_printf_float+0x29e>
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	07d9      	lsls	r1, r3, #31
 800ae5c:	d5d8      	bpl.n	800ae10 <_printf_float+0x250>
 800ae5e:	ee18 3a10 	vmov	r3, s16
 800ae62:	4652      	mov	r2, sl
 800ae64:	4631      	mov	r1, r6
 800ae66:	4628      	mov	r0, r5
 800ae68:	47b8      	blx	r7
 800ae6a:	3001      	adds	r0, #1
 800ae6c:	f43f af09 	beq.w	800ac82 <_printf_float+0xc2>
 800ae70:	f04f 0900 	mov.w	r9, #0
 800ae74:	f104 0a1a 	add.w	sl, r4, #26
 800ae78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae7a:	425b      	negs	r3, r3
 800ae7c:	454b      	cmp	r3, r9
 800ae7e:	dc01      	bgt.n	800ae84 <_printf_float+0x2c4>
 800ae80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae82:	e792      	b.n	800adaa <_printf_float+0x1ea>
 800ae84:	2301      	movs	r3, #1
 800ae86:	4652      	mov	r2, sl
 800ae88:	4631      	mov	r1, r6
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	47b8      	blx	r7
 800ae8e:	3001      	adds	r0, #1
 800ae90:	f43f aef7 	beq.w	800ac82 <_printf_float+0xc2>
 800ae94:	f109 0901 	add.w	r9, r9, #1
 800ae98:	e7ee      	b.n	800ae78 <_printf_float+0x2b8>
 800ae9a:	bf00      	nop
 800ae9c:	7fefffff 	.word	0x7fefffff
 800aea0:	0800f37c 	.word	0x0800f37c
 800aea4:	0800f380 	.word	0x0800f380
 800aea8:	0800f388 	.word	0x0800f388
 800aeac:	0800f384 	.word	0x0800f384
 800aeb0:	0800f38c 	.word	0x0800f38c
 800aeb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aeb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	bfa8      	it	ge
 800aebc:	461a      	movge	r2, r3
 800aebe:	2a00      	cmp	r2, #0
 800aec0:	4691      	mov	r9, r2
 800aec2:	dc37      	bgt.n	800af34 <_printf_float+0x374>
 800aec4:	f04f 0b00 	mov.w	fp, #0
 800aec8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aecc:	f104 021a 	add.w	r2, r4, #26
 800aed0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aed2:	9305      	str	r3, [sp, #20]
 800aed4:	eba3 0309 	sub.w	r3, r3, r9
 800aed8:	455b      	cmp	r3, fp
 800aeda:	dc33      	bgt.n	800af44 <_printf_float+0x384>
 800aedc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aee0:	429a      	cmp	r2, r3
 800aee2:	db3b      	blt.n	800af5c <_printf_float+0x39c>
 800aee4:	6823      	ldr	r3, [r4, #0]
 800aee6:	07da      	lsls	r2, r3, #31
 800aee8:	d438      	bmi.n	800af5c <_printf_float+0x39c>
 800aeea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeec:	9a05      	ldr	r2, [sp, #20]
 800aeee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aef0:	1a9a      	subs	r2, r3, r2
 800aef2:	eba3 0901 	sub.w	r9, r3, r1
 800aef6:	4591      	cmp	r9, r2
 800aef8:	bfa8      	it	ge
 800aefa:	4691      	movge	r9, r2
 800aefc:	f1b9 0f00 	cmp.w	r9, #0
 800af00:	dc35      	bgt.n	800af6e <_printf_float+0x3ae>
 800af02:	f04f 0800 	mov.w	r8, #0
 800af06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af0a:	f104 0a1a 	add.w	sl, r4, #26
 800af0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af12:	1a9b      	subs	r3, r3, r2
 800af14:	eba3 0309 	sub.w	r3, r3, r9
 800af18:	4543      	cmp	r3, r8
 800af1a:	f77f af79 	ble.w	800ae10 <_printf_float+0x250>
 800af1e:	2301      	movs	r3, #1
 800af20:	4652      	mov	r2, sl
 800af22:	4631      	mov	r1, r6
 800af24:	4628      	mov	r0, r5
 800af26:	47b8      	blx	r7
 800af28:	3001      	adds	r0, #1
 800af2a:	f43f aeaa 	beq.w	800ac82 <_printf_float+0xc2>
 800af2e:	f108 0801 	add.w	r8, r8, #1
 800af32:	e7ec      	b.n	800af0e <_printf_float+0x34e>
 800af34:	4613      	mov	r3, r2
 800af36:	4631      	mov	r1, r6
 800af38:	4642      	mov	r2, r8
 800af3a:	4628      	mov	r0, r5
 800af3c:	47b8      	blx	r7
 800af3e:	3001      	adds	r0, #1
 800af40:	d1c0      	bne.n	800aec4 <_printf_float+0x304>
 800af42:	e69e      	b.n	800ac82 <_printf_float+0xc2>
 800af44:	2301      	movs	r3, #1
 800af46:	4631      	mov	r1, r6
 800af48:	4628      	mov	r0, r5
 800af4a:	9205      	str	r2, [sp, #20]
 800af4c:	47b8      	blx	r7
 800af4e:	3001      	adds	r0, #1
 800af50:	f43f ae97 	beq.w	800ac82 <_printf_float+0xc2>
 800af54:	9a05      	ldr	r2, [sp, #20]
 800af56:	f10b 0b01 	add.w	fp, fp, #1
 800af5a:	e7b9      	b.n	800aed0 <_printf_float+0x310>
 800af5c:	ee18 3a10 	vmov	r3, s16
 800af60:	4652      	mov	r2, sl
 800af62:	4631      	mov	r1, r6
 800af64:	4628      	mov	r0, r5
 800af66:	47b8      	blx	r7
 800af68:	3001      	adds	r0, #1
 800af6a:	d1be      	bne.n	800aeea <_printf_float+0x32a>
 800af6c:	e689      	b.n	800ac82 <_printf_float+0xc2>
 800af6e:	9a05      	ldr	r2, [sp, #20]
 800af70:	464b      	mov	r3, r9
 800af72:	4442      	add	r2, r8
 800af74:	4631      	mov	r1, r6
 800af76:	4628      	mov	r0, r5
 800af78:	47b8      	blx	r7
 800af7a:	3001      	adds	r0, #1
 800af7c:	d1c1      	bne.n	800af02 <_printf_float+0x342>
 800af7e:	e680      	b.n	800ac82 <_printf_float+0xc2>
 800af80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af82:	2a01      	cmp	r2, #1
 800af84:	dc01      	bgt.n	800af8a <_printf_float+0x3ca>
 800af86:	07db      	lsls	r3, r3, #31
 800af88:	d538      	bpl.n	800affc <_printf_float+0x43c>
 800af8a:	2301      	movs	r3, #1
 800af8c:	4642      	mov	r2, r8
 800af8e:	4631      	mov	r1, r6
 800af90:	4628      	mov	r0, r5
 800af92:	47b8      	blx	r7
 800af94:	3001      	adds	r0, #1
 800af96:	f43f ae74 	beq.w	800ac82 <_printf_float+0xc2>
 800af9a:	ee18 3a10 	vmov	r3, s16
 800af9e:	4652      	mov	r2, sl
 800afa0:	4631      	mov	r1, r6
 800afa2:	4628      	mov	r0, r5
 800afa4:	47b8      	blx	r7
 800afa6:	3001      	adds	r0, #1
 800afa8:	f43f ae6b 	beq.w	800ac82 <_printf_float+0xc2>
 800afac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800afb0:	2200      	movs	r2, #0
 800afb2:	2300      	movs	r3, #0
 800afb4:	f7f5 fd90 	bl	8000ad8 <__aeabi_dcmpeq>
 800afb8:	b9d8      	cbnz	r0, 800aff2 <_printf_float+0x432>
 800afba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afbc:	f108 0201 	add.w	r2, r8, #1
 800afc0:	3b01      	subs	r3, #1
 800afc2:	4631      	mov	r1, r6
 800afc4:	4628      	mov	r0, r5
 800afc6:	47b8      	blx	r7
 800afc8:	3001      	adds	r0, #1
 800afca:	d10e      	bne.n	800afea <_printf_float+0x42a>
 800afcc:	e659      	b.n	800ac82 <_printf_float+0xc2>
 800afce:	2301      	movs	r3, #1
 800afd0:	4652      	mov	r2, sl
 800afd2:	4631      	mov	r1, r6
 800afd4:	4628      	mov	r0, r5
 800afd6:	47b8      	blx	r7
 800afd8:	3001      	adds	r0, #1
 800afda:	f43f ae52 	beq.w	800ac82 <_printf_float+0xc2>
 800afde:	f108 0801 	add.w	r8, r8, #1
 800afe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afe4:	3b01      	subs	r3, #1
 800afe6:	4543      	cmp	r3, r8
 800afe8:	dcf1      	bgt.n	800afce <_printf_float+0x40e>
 800afea:	464b      	mov	r3, r9
 800afec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aff0:	e6dc      	b.n	800adac <_printf_float+0x1ec>
 800aff2:	f04f 0800 	mov.w	r8, #0
 800aff6:	f104 0a1a 	add.w	sl, r4, #26
 800affa:	e7f2      	b.n	800afe2 <_printf_float+0x422>
 800affc:	2301      	movs	r3, #1
 800affe:	4642      	mov	r2, r8
 800b000:	e7df      	b.n	800afc2 <_printf_float+0x402>
 800b002:	2301      	movs	r3, #1
 800b004:	464a      	mov	r2, r9
 800b006:	4631      	mov	r1, r6
 800b008:	4628      	mov	r0, r5
 800b00a:	47b8      	blx	r7
 800b00c:	3001      	adds	r0, #1
 800b00e:	f43f ae38 	beq.w	800ac82 <_printf_float+0xc2>
 800b012:	f108 0801 	add.w	r8, r8, #1
 800b016:	68e3      	ldr	r3, [r4, #12]
 800b018:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b01a:	1a5b      	subs	r3, r3, r1
 800b01c:	4543      	cmp	r3, r8
 800b01e:	dcf0      	bgt.n	800b002 <_printf_float+0x442>
 800b020:	e6fa      	b.n	800ae18 <_printf_float+0x258>
 800b022:	f04f 0800 	mov.w	r8, #0
 800b026:	f104 0919 	add.w	r9, r4, #25
 800b02a:	e7f4      	b.n	800b016 <_printf_float+0x456>

0800b02c <_printf_common>:
 800b02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b030:	4616      	mov	r6, r2
 800b032:	4699      	mov	r9, r3
 800b034:	688a      	ldr	r2, [r1, #8]
 800b036:	690b      	ldr	r3, [r1, #16]
 800b038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b03c:	4293      	cmp	r3, r2
 800b03e:	bfb8      	it	lt
 800b040:	4613      	movlt	r3, r2
 800b042:	6033      	str	r3, [r6, #0]
 800b044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b048:	4607      	mov	r7, r0
 800b04a:	460c      	mov	r4, r1
 800b04c:	b10a      	cbz	r2, 800b052 <_printf_common+0x26>
 800b04e:	3301      	adds	r3, #1
 800b050:	6033      	str	r3, [r6, #0]
 800b052:	6823      	ldr	r3, [r4, #0]
 800b054:	0699      	lsls	r1, r3, #26
 800b056:	bf42      	ittt	mi
 800b058:	6833      	ldrmi	r3, [r6, #0]
 800b05a:	3302      	addmi	r3, #2
 800b05c:	6033      	strmi	r3, [r6, #0]
 800b05e:	6825      	ldr	r5, [r4, #0]
 800b060:	f015 0506 	ands.w	r5, r5, #6
 800b064:	d106      	bne.n	800b074 <_printf_common+0x48>
 800b066:	f104 0a19 	add.w	sl, r4, #25
 800b06a:	68e3      	ldr	r3, [r4, #12]
 800b06c:	6832      	ldr	r2, [r6, #0]
 800b06e:	1a9b      	subs	r3, r3, r2
 800b070:	42ab      	cmp	r3, r5
 800b072:	dc26      	bgt.n	800b0c2 <_printf_common+0x96>
 800b074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b078:	1e13      	subs	r3, r2, #0
 800b07a:	6822      	ldr	r2, [r4, #0]
 800b07c:	bf18      	it	ne
 800b07e:	2301      	movne	r3, #1
 800b080:	0692      	lsls	r2, r2, #26
 800b082:	d42b      	bmi.n	800b0dc <_printf_common+0xb0>
 800b084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b088:	4649      	mov	r1, r9
 800b08a:	4638      	mov	r0, r7
 800b08c:	47c0      	blx	r8
 800b08e:	3001      	adds	r0, #1
 800b090:	d01e      	beq.n	800b0d0 <_printf_common+0xa4>
 800b092:	6823      	ldr	r3, [r4, #0]
 800b094:	68e5      	ldr	r5, [r4, #12]
 800b096:	6832      	ldr	r2, [r6, #0]
 800b098:	f003 0306 	and.w	r3, r3, #6
 800b09c:	2b04      	cmp	r3, #4
 800b09e:	bf08      	it	eq
 800b0a0:	1aad      	subeq	r5, r5, r2
 800b0a2:	68a3      	ldr	r3, [r4, #8]
 800b0a4:	6922      	ldr	r2, [r4, #16]
 800b0a6:	bf0c      	ite	eq
 800b0a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0ac:	2500      	movne	r5, #0
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	bfc4      	itt	gt
 800b0b2:	1a9b      	subgt	r3, r3, r2
 800b0b4:	18ed      	addgt	r5, r5, r3
 800b0b6:	2600      	movs	r6, #0
 800b0b8:	341a      	adds	r4, #26
 800b0ba:	42b5      	cmp	r5, r6
 800b0bc:	d11a      	bne.n	800b0f4 <_printf_common+0xc8>
 800b0be:	2000      	movs	r0, #0
 800b0c0:	e008      	b.n	800b0d4 <_printf_common+0xa8>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	4652      	mov	r2, sl
 800b0c6:	4649      	mov	r1, r9
 800b0c8:	4638      	mov	r0, r7
 800b0ca:	47c0      	blx	r8
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	d103      	bne.n	800b0d8 <_printf_common+0xac>
 800b0d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d8:	3501      	adds	r5, #1
 800b0da:	e7c6      	b.n	800b06a <_printf_common+0x3e>
 800b0dc:	18e1      	adds	r1, r4, r3
 800b0de:	1c5a      	adds	r2, r3, #1
 800b0e0:	2030      	movs	r0, #48	; 0x30
 800b0e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0e6:	4422      	add	r2, r4
 800b0e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0f0:	3302      	adds	r3, #2
 800b0f2:	e7c7      	b.n	800b084 <_printf_common+0x58>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	4622      	mov	r2, r4
 800b0f8:	4649      	mov	r1, r9
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	47c0      	blx	r8
 800b0fe:	3001      	adds	r0, #1
 800b100:	d0e6      	beq.n	800b0d0 <_printf_common+0xa4>
 800b102:	3601      	adds	r6, #1
 800b104:	e7d9      	b.n	800b0ba <_printf_common+0x8e>
	...

0800b108 <_printf_i>:
 800b108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b10c:	7e0f      	ldrb	r7, [r1, #24]
 800b10e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b110:	2f78      	cmp	r7, #120	; 0x78
 800b112:	4691      	mov	r9, r2
 800b114:	4680      	mov	r8, r0
 800b116:	460c      	mov	r4, r1
 800b118:	469a      	mov	sl, r3
 800b11a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b11e:	d807      	bhi.n	800b130 <_printf_i+0x28>
 800b120:	2f62      	cmp	r7, #98	; 0x62
 800b122:	d80a      	bhi.n	800b13a <_printf_i+0x32>
 800b124:	2f00      	cmp	r7, #0
 800b126:	f000 80d8 	beq.w	800b2da <_printf_i+0x1d2>
 800b12a:	2f58      	cmp	r7, #88	; 0x58
 800b12c:	f000 80a3 	beq.w	800b276 <_printf_i+0x16e>
 800b130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b138:	e03a      	b.n	800b1b0 <_printf_i+0xa8>
 800b13a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b13e:	2b15      	cmp	r3, #21
 800b140:	d8f6      	bhi.n	800b130 <_printf_i+0x28>
 800b142:	a101      	add	r1, pc, #4	; (adr r1, 800b148 <_printf_i+0x40>)
 800b144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b148:	0800b1a1 	.word	0x0800b1a1
 800b14c:	0800b1b5 	.word	0x0800b1b5
 800b150:	0800b131 	.word	0x0800b131
 800b154:	0800b131 	.word	0x0800b131
 800b158:	0800b131 	.word	0x0800b131
 800b15c:	0800b131 	.word	0x0800b131
 800b160:	0800b1b5 	.word	0x0800b1b5
 800b164:	0800b131 	.word	0x0800b131
 800b168:	0800b131 	.word	0x0800b131
 800b16c:	0800b131 	.word	0x0800b131
 800b170:	0800b131 	.word	0x0800b131
 800b174:	0800b2c1 	.word	0x0800b2c1
 800b178:	0800b1e5 	.word	0x0800b1e5
 800b17c:	0800b2a3 	.word	0x0800b2a3
 800b180:	0800b131 	.word	0x0800b131
 800b184:	0800b131 	.word	0x0800b131
 800b188:	0800b2e3 	.word	0x0800b2e3
 800b18c:	0800b131 	.word	0x0800b131
 800b190:	0800b1e5 	.word	0x0800b1e5
 800b194:	0800b131 	.word	0x0800b131
 800b198:	0800b131 	.word	0x0800b131
 800b19c:	0800b2ab 	.word	0x0800b2ab
 800b1a0:	682b      	ldr	r3, [r5, #0]
 800b1a2:	1d1a      	adds	r2, r3, #4
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	602a      	str	r2, [r5, #0]
 800b1a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e0a3      	b.n	800b2fc <_printf_i+0x1f4>
 800b1b4:	6820      	ldr	r0, [r4, #0]
 800b1b6:	6829      	ldr	r1, [r5, #0]
 800b1b8:	0606      	lsls	r6, r0, #24
 800b1ba:	f101 0304 	add.w	r3, r1, #4
 800b1be:	d50a      	bpl.n	800b1d6 <_printf_i+0xce>
 800b1c0:	680e      	ldr	r6, [r1, #0]
 800b1c2:	602b      	str	r3, [r5, #0]
 800b1c4:	2e00      	cmp	r6, #0
 800b1c6:	da03      	bge.n	800b1d0 <_printf_i+0xc8>
 800b1c8:	232d      	movs	r3, #45	; 0x2d
 800b1ca:	4276      	negs	r6, r6
 800b1cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1d0:	485e      	ldr	r0, [pc, #376]	; (800b34c <_printf_i+0x244>)
 800b1d2:	230a      	movs	r3, #10
 800b1d4:	e019      	b.n	800b20a <_printf_i+0x102>
 800b1d6:	680e      	ldr	r6, [r1, #0]
 800b1d8:	602b      	str	r3, [r5, #0]
 800b1da:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b1de:	bf18      	it	ne
 800b1e0:	b236      	sxthne	r6, r6
 800b1e2:	e7ef      	b.n	800b1c4 <_printf_i+0xbc>
 800b1e4:	682b      	ldr	r3, [r5, #0]
 800b1e6:	6820      	ldr	r0, [r4, #0]
 800b1e8:	1d19      	adds	r1, r3, #4
 800b1ea:	6029      	str	r1, [r5, #0]
 800b1ec:	0601      	lsls	r1, r0, #24
 800b1ee:	d501      	bpl.n	800b1f4 <_printf_i+0xec>
 800b1f0:	681e      	ldr	r6, [r3, #0]
 800b1f2:	e002      	b.n	800b1fa <_printf_i+0xf2>
 800b1f4:	0646      	lsls	r6, r0, #25
 800b1f6:	d5fb      	bpl.n	800b1f0 <_printf_i+0xe8>
 800b1f8:	881e      	ldrh	r6, [r3, #0]
 800b1fa:	4854      	ldr	r0, [pc, #336]	; (800b34c <_printf_i+0x244>)
 800b1fc:	2f6f      	cmp	r7, #111	; 0x6f
 800b1fe:	bf0c      	ite	eq
 800b200:	2308      	moveq	r3, #8
 800b202:	230a      	movne	r3, #10
 800b204:	2100      	movs	r1, #0
 800b206:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b20a:	6865      	ldr	r5, [r4, #4]
 800b20c:	60a5      	str	r5, [r4, #8]
 800b20e:	2d00      	cmp	r5, #0
 800b210:	bfa2      	ittt	ge
 800b212:	6821      	ldrge	r1, [r4, #0]
 800b214:	f021 0104 	bicge.w	r1, r1, #4
 800b218:	6021      	strge	r1, [r4, #0]
 800b21a:	b90e      	cbnz	r6, 800b220 <_printf_i+0x118>
 800b21c:	2d00      	cmp	r5, #0
 800b21e:	d04d      	beq.n	800b2bc <_printf_i+0x1b4>
 800b220:	4615      	mov	r5, r2
 800b222:	fbb6 f1f3 	udiv	r1, r6, r3
 800b226:	fb03 6711 	mls	r7, r3, r1, r6
 800b22a:	5dc7      	ldrb	r7, [r0, r7]
 800b22c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b230:	4637      	mov	r7, r6
 800b232:	42bb      	cmp	r3, r7
 800b234:	460e      	mov	r6, r1
 800b236:	d9f4      	bls.n	800b222 <_printf_i+0x11a>
 800b238:	2b08      	cmp	r3, #8
 800b23a:	d10b      	bne.n	800b254 <_printf_i+0x14c>
 800b23c:	6823      	ldr	r3, [r4, #0]
 800b23e:	07de      	lsls	r6, r3, #31
 800b240:	d508      	bpl.n	800b254 <_printf_i+0x14c>
 800b242:	6923      	ldr	r3, [r4, #16]
 800b244:	6861      	ldr	r1, [r4, #4]
 800b246:	4299      	cmp	r1, r3
 800b248:	bfde      	ittt	le
 800b24a:	2330      	movle	r3, #48	; 0x30
 800b24c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b250:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b254:	1b52      	subs	r2, r2, r5
 800b256:	6122      	str	r2, [r4, #16]
 800b258:	f8cd a000 	str.w	sl, [sp]
 800b25c:	464b      	mov	r3, r9
 800b25e:	aa03      	add	r2, sp, #12
 800b260:	4621      	mov	r1, r4
 800b262:	4640      	mov	r0, r8
 800b264:	f7ff fee2 	bl	800b02c <_printf_common>
 800b268:	3001      	adds	r0, #1
 800b26a:	d14c      	bne.n	800b306 <_printf_i+0x1fe>
 800b26c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b270:	b004      	add	sp, #16
 800b272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b276:	4835      	ldr	r0, [pc, #212]	; (800b34c <_printf_i+0x244>)
 800b278:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b27c:	6829      	ldr	r1, [r5, #0]
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	f851 6b04 	ldr.w	r6, [r1], #4
 800b284:	6029      	str	r1, [r5, #0]
 800b286:	061d      	lsls	r5, r3, #24
 800b288:	d514      	bpl.n	800b2b4 <_printf_i+0x1ac>
 800b28a:	07df      	lsls	r7, r3, #31
 800b28c:	bf44      	itt	mi
 800b28e:	f043 0320 	orrmi.w	r3, r3, #32
 800b292:	6023      	strmi	r3, [r4, #0]
 800b294:	b91e      	cbnz	r6, 800b29e <_printf_i+0x196>
 800b296:	6823      	ldr	r3, [r4, #0]
 800b298:	f023 0320 	bic.w	r3, r3, #32
 800b29c:	6023      	str	r3, [r4, #0]
 800b29e:	2310      	movs	r3, #16
 800b2a0:	e7b0      	b.n	800b204 <_printf_i+0xfc>
 800b2a2:	6823      	ldr	r3, [r4, #0]
 800b2a4:	f043 0320 	orr.w	r3, r3, #32
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	2378      	movs	r3, #120	; 0x78
 800b2ac:	4828      	ldr	r0, [pc, #160]	; (800b350 <_printf_i+0x248>)
 800b2ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b2b2:	e7e3      	b.n	800b27c <_printf_i+0x174>
 800b2b4:	0659      	lsls	r1, r3, #25
 800b2b6:	bf48      	it	mi
 800b2b8:	b2b6      	uxthmi	r6, r6
 800b2ba:	e7e6      	b.n	800b28a <_printf_i+0x182>
 800b2bc:	4615      	mov	r5, r2
 800b2be:	e7bb      	b.n	800b238 <_printf_i+0x130>
 800b2c0:	682b      	ldr	r3, [r5, #0]
 800b2c2:	6826      	ldr	r6, [r4, #0]
 800b2c4:	6961      	ldr	r1, [r4, #20]
 800b2c6:	1d18      	adds	r0, r3, #4
 800b2c8:	6028      	str	r0, [r5, #0]
 800b2ca:	0635      	lsls	r5, r6, #24
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	d501      	bpl.n	800b2d4 <_printf_i+0x1cc>
 800b2d0:	6019      	str	r1, [r3, #0]
 800b2d2:	e002      	b.n	800b2da <_printf_i+0x1d2>
 800b2d4:	0670      	lsls	r0, r6, #25
 800b2d6:	d5fb      	bpl.n	800b2d0 <_printf_i+0x1c8>
 800b2d8:	8019      	strh	r1, [r3, #0]
 800b2da:	2300      	movs	r3, #0
 800b2dc:	6123      	str	r3, [r4, #16]
 800b2de:	4615      	mov	r5, r2
 800b2e0:	e7ba      	b.n	800b258 <_printf_i+0x150>
 800b2e2:	682b      	ldr	r3, [r5, #0]
 800b2e4:	1d1a      	adds	r2, r3, #4
 800b2e6:	602a      	str	r2, [r5, #0]
 800b2e8:	681d      	ldr	r5, [r3, #0]
 800b2ea:	6862      	ldr	r2, [r4, #4]
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	f7f4 ff7e 	bl	80001f0 <memchr>
 800b2f4:	b108      	cbz	r0, 800b2fa <_printf_i+0x1f2>
 800b2f6:	1b40      	subs	r0, r0, r5
 800b2f8:	6060      	str	r0, [r4, #4]
 800b2fa:	6863      	ldr	r3, [r4, #4]
 800b2fc:	6123      	str	r3, [r4, #16]
 800b2fe:	2300      	movs	r3, #0
 800b300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b304:	e7a8      	b.n	800b258 <_printf_i+0x150>
 800b306:	6923      	ldr	r3, [r4, #16]
 800b308:	462a      	mov	r2, r5
 800b30a:	4649      	mov	r1, r9
 800b30c:	4640      	mov	r0, r8
 800b30e:	47d0      	blx	sl
 800b310:	3001      	adds	r0, #1
 800b312:	d0ab      	beq.n	800b26c <_printf_i+0x164>
 800b314:	6823      	ldr	r3, [r4, #0]
 800b316:	079b      	lsls	r3, r3, #30
 800b318:	d413      	bmi.n	800b342 <_printf_i+0x23a>
 800b31a:	68e0      	ldr	r0, [r4, #12]
 800b31c:	9b03      	ldr	r3, [sp, #12]
 800b31e:	4298      	cmp	r0, r3
 800b320:	bfb8      	it	lt
 800b322:	4618      	movlt	r0, r3
 800b324:	e7a4      	b.n	800b270 <_printf_i+0x168>
 800b326:	2301      	movs	r3, #1
 800b328:	4632      	mov	r2, r6
 800b32a:	4649      	mov	r1, r9
 800b32c:	4640      	mov	r0, r8
 800b32e:	47d0      	blx	sl
 800b330:	3001      	adds	r0, #1
 800b332:	d09b      	beq.n	800b26c <_printf_i+0x164>
 800b334:	3501      	adds	r5, #1
 800b336:	68e3      	ldr	r3, [r4, #12]
 800b338:	9903      	ldr	r1, [sp, #12]
 800b33a:	1a5b      	subs	r3, r3, r1
 800b33c:	42ab      	cmp	r3, r5
 800b33e:	dcf2      	bgt.n	800b326 <_printf_i+0x21e>
 800b340:	e7eb      	b.n	800b31a <_printf_i+0x212>
 800b342:	2500      	movs	r5, #0
 800b344:	f104 0619 	add.w	r6, r4, #25
 800b348:	e7f5      	b.n	800b336 <_printf_i+0x22e>
 800b34a:	bf00      	nop
 800b34c:	0800f38e 	.word	0x0800f38e
 800b350:	0800f39f 	.word	0x0800f39f

0800b354 <iprintf>:
 800b354:	b40f      	push	{r0, r1, r2, r3}
 800b356:	4b0a      	ldr	r3, [pc, #40]	; (800b380 <iprintf+0x2c>)
 800b358:	b513      	push	{r0, r1, r4, lr}
 800b35a:	681c      	ldr	r4, [r3, #0]
 800b35c:	b124      	cbz	r4, 800b368 <iprintf+0x14>
 800b35e:	69a3      	ldr	r3, [r4, #24]
 800b360:	b913      	cbnz	r3, 800b368 <iprintf+0x14>
 800b362:	4620      	mov	r0, r4
 800b364:	f7ff fa1c 	bl	800a7a0 <__sinit>
 800b368:	ab05      	add	r3, sp, #20
 800b36a:	9a04      	ldr	r2, [sp, #16]
 800b36c:	68a1      	ldr	r1, [r4, #8]
 800b36e:	9301      	str	r3, [sp, #4]
 800b370:	4620      	mov	r0, r4
 800b372:	f003 f8fd 	bl	800e570 <_vfiprintf_r>
 800b376:	b002      	add	sp, #8
 800b378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b37c:	b004      	add	sp, #16
 800b37e:	4770      	bx	lr
 800b380:	20000010 	.word	0x20000010

0800b384 <_puts_r>:
 800b384:	b570      	push	{r4, r5, r6, lr}
 800b386:	460e      	mov	r6, r1
 800b388:	4605      	mov	r5, r0
 800b38a:	b118      	cbz	r0, 800b394 <_puts_r+0x10>
 800b38c:	6983      	ldr	r3, [r0, #24]
 800b38e:	b90b      	cbnz	r3, 800b394 <_puts_r+0x10>
 800b390:	f7ff fa06 	bl	800a7a0 <__sinit>
 800b394:	69ab      	ldr	r3, [r5, #24]
 800b396:	68ac      	ldr	r4, [r5, #8]
 800b398:	b913      	cbnz	r3, 800b3a0 <_puts_r+0x1c>
 800b39a:	4628      	mov	r0, r5
 800b39c:	f7ff fa00 	bl	800a7a0 <__sinit>
 800b3a0:	4b2c      	ldr	r3, [pc, #176]	; (800b454 <_puts_r+0xd0>)
 800b3a2:	429c      	cmp	r4, r3
 800b3a4:	d120      	bne.n	800b3e8 <_puts_r+0x64>
 800b3a6:	686c      	ldr	r4, [r5, #4]
 800b3a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3aa:	07db      	lsls	r3, r3, #31
 800b3ac:	d405      	bmi.n	800b3ba <_puts_r+0x36>
 800b3ae:	89a3      	ldrh	r3, [r4, #12]
 800b3b0:	0598      	lsls	r0, r3, #22
 800b3b2:	d402      	bmi.n	800b3ba <_puts_r+0x36>
 800b3b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3b6:	f7ff fab6 	bl	800a926 <__retarget_lock_acquire_recursive>
 800b3ba:	89a3      	ldrh	r3, [r4, #12]
 800b3bc:	0719      	lsls	r1, r3, #28
 800b3be:	d51d      	bpl.n	800b3fc <_puts_r+0x78>
 800b3c0:	6923      	ldr	r3, [r4, #16]
 800b3c2:	b1db      	cbz	r3, 800b3fc <_puts_r+0x78>
 800b3c4:	3e01      	subs	r6, #1
 800b3c6:	68a3      	ldr	r3, [r4, #8]
 800b3c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	60a3      	str	r3, [r4, #8]
 800b3d0:	bb39      	cbnz	r1, 800b422 <_puts_r+0x9e>
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	da38      	bge.n	800b448 <_puts_r+0xc4>
 800b3d6:	4622      	mov	r2, r4
 800b3d8:	210a      	movs	r1, #10
 800b3da:	4628      	mov	r0, r5
 800b3dc:	f000 ff4a 	bl	800c274 <__swbuf_r>
 800b3e0:	3001      	adds	r0, #1
 800b3e2:	d011      	beq.n	800b408 <_puts_r+0x84>
 800b3e4:	250a      	movs	r5, #10
 800b3e6:	e011      	b.n	800b40c <_puts_r+0x88>
 800b3e8:	4b1b      	ldr	r3, [pc, #108]	; (800b458 <_puts_r+0xd4>)
 800b3ea:	429c      	cmp	r4, r3
 800b3ec:	d101      	bne.n	800b3f2 <_puts_r+0x6e>
 800b3ee:	68ac      	ldr	r4, [r5, #8]
 800b3f0:	e7da      	b.n	800b3a8 <_puts_r+0x24>
 800b3f2:	4b1a      	ldr	r3, [pc, #104]	; (800b45c <_puts_r+0xd8>)
 800b3f4:	429c      	cmp	r4, r3
 800b3f6:	bf08      	it	eq
 800b3f8:	68ec      	ldreq	r4, [r5, #12]
 800b3fa:	e7d5      	b.n	800b3a8 <_puts_r+0x24>
 800b3fc:	4621      	mov	r1, r4
 800b3fe:	4628      	mov	r0, r5
 800b400:	f000 ff9c 	bl	800c33c <__swsetup_r>
 800b404:	2800      	cmp	r0, #0
 800b406:	d0dd      	beq.n	800b3c4 <_puts_r+0x40>
 800b408:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b40c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b40e:	07da      	lsls	r2, r3, #31
 800b410:	d405      	bmi.n	800b41e <_puts_r+0x9a>
 800b412:	89a3      	ldrh	r3, [r4, #12]
 800b414:	059b      	lsls	r3, r3, #22
 800b416:	d402      	bmi.n	800b41e <_puts_r+0x9a>
 800b418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b41a:	f7ff fa85 	bl	800a928 <__retarget_lock_release_recursive>
 800b41e:	4628      	mov	r0, r5
 800b420:	bd70      	pop	{r4, r5, r6, pc}
 800b422:	2b00      	cmp	r3, #0
 800b424:	da04      	bge.n	800b430 <_puts_r+0xac>
 800b426:	69a2      	ldr	r2, [r4, #24]
 800b428:	429a      	cmp	r2, r3
 800b42a:	dc06      	bgt.n	800b43a <_puts_r+0xb6>
 800b42c:	290a      	cmp	r1, #10
 800b42e:	d004      	beq.n	800b43a <_puts_r+0xb6>
 800b430:	6823      	ldr	r3, [r4, #0]
 800b432:	1c5a      	adds	r2, r3, #1
 800b434:	6022      	str	r2, [r4, #0]
 800b436:	7019      	strb	r1, [r3, #0]
 800b438:	e7c5      	b.n	800b3c6 <_puts_r+0x42>
 800b43a:	4622      	mov	r2, r4
 800b43c:	4628      	mov	r0, r5
 800b43e:	f000 ff19 	bl	800c274 <__swbuf_r>
 800b442:	3001      	adds	r0, #1
 800b444:	d1bf      	bne.n	800b3c6 <_puts_r+0x42>
 800b446:	e7df      	b.n	800b408 <_puts_r+0x84>
 800b448:	6823      	ldr	r3, [r4, #0]
 800b44a:	250a      	movs	r5, #10
 800b44c:	1c5a      	adds	r2, r3, #1
 800b44e:	6022      	str	r2, [r4, #0]
 800b450:	701d      	strb	r5, [r3, #0]
 800b452:	e7db      	b.n	800b40c <_puts_r+0x88>
 800b454:	0800f338 	.word	0x0800f338
 800b458:	0800f358 	.word	0x0800f358
 800b45c:	0800f318 	.word	0x0800f318

0800b460 <puts>:
 800b460:	4b02      	ldr	r3, [pc, #8]	; (800b46c <puts+0xc>)
 800b462:	4601      	mov	r1, r0
 800b464:	6818      	ldr	r0, [r3, #0]
 800b466:	f7ff bf8d 	b.w	800b384 <_puts_r>
 800b46a:	bf00      	nop
 800b46c:	20000010 	.word	0x20000010

0800b470 <cleanup_glue>:
 800b470:	b538      	push	{r3, r4, r5, lr}
 800b472:	460c      	mov	r4, r1
 800b474:	6809      	ldr	r1, [r1, #0]
 800b476:	4605      	mov	r5, r0
 800b478:	b109      	cbz	r1, 800b47e <cleanup_glue+0xe>
 800b47a:	f7ff fff9 	bl	800b470 <cleanup_glue>
 800b47e:	4621      	mov	r1, r4
 800b480:	4628      	mov	r0, r5
 800b482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b486:	f002 bffd 	b.w	800e484 <_free_r>
	...

0800b48c <_reclaim_reent>:
 800b48c:	4b2c      	ldr	r3, [pc, #176]	; (800b540 <_reclaim_reent+0xb4>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4283      	cmp	r3, r0
 800b492:	b570      	push	{r4, r5, r6, lr}
 800b494:	4604      	mov	r4, r0
 800b496:	d051      	beq.n	800b53c <_reclaim_reent+0xb0>
 800b498:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b49a:	b143      	cbz	r3, 800b4ae <_reclaim_reent+0x22>
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d14a      	bne.n	800b538 <_reclaim_reent+0xac>
 800b4a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4a4:	6819      	ldr	r1, [r3, #0]
 800b4a6:	b111      	cbz	r1, 800b4ae <_reclaim_reent+0x22>
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	f002 ffeb 	bl	800e484 <_free_r>
 800b4ae:	6961      	ldr	r1, [r4, #20]
 800b4b0:	b111      	cbz	r1, 800b4b8 <_reclaim_reent+0x2c>
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f002 ffe6 	bl	800e484 <_free_r>
 800b4b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b4ba:	b111      	cbz	r1, 800b4c2 <_reclaim_reent+0x36>
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f002 ffe1 	bl	800e484 <_free_r>
 800b4c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b4c4:	b111      	cbz	r1, 800b4cc <_reclaim_reent+0x40>
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f002 ffdc 	bl	800e484 <_free_r>
 800b4cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b4ce:	b111      	cbz	r1, 800b4d6 <_reclaim_reent+0x4a>
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f002 ffd7 	bl	800e484 <_free_r>
 800b4d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b4d8:	b111      	cbz	r1, 800b4e0 <_reclaim_reent+0x54>
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f002 ffd2 	bl	800e484 <_free_r>
 800b4e0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b4e2:	b111      	cbz	r1, 800b4ea <_reclaim_reent+0x5e>
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	f002 ffcd 	bl	800e484 <_free_r>
 800b4ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b4ec:	b111      	cbz	r1, 800b4f4 <_reclaim_reent+0x68>
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	f002 ffc8 	bl	800e484 <_free_r>
 800b4f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4f6:	b111      	cbz	r1, 800b4fe <_reclaim_reent+0x72>
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f002 ffc3 	bl	800e484 <_free_r>
 800b4fe:	69a3      	ldr	r3, [r4, #24]
 800b500:	b1e3      	cbz	r3, 800b53c <_reclaim_reent+0xb0>
 800b502:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b504:	4620      	mov	r0, r4
 800b506:	4798      	blx	r3
 800b508:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b50a:	b1b9      	cbz	r1, 800b53c <_reclaim_reent+0xb0>
 800b50c:	4620      	mov	r0, r4
 800b50e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b512:	f7ff bfad 	b.w	800b470 <cleanup_glue>
 800b516:	5949      	ldr	r1, [r1, r5]
 800b518:	b941      	cbnz	r1, 800b52c <_reclaim_reent+0xa0>
 800b51a:	3504      	adds	r5, #4
 800b51c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b51e:	2d80      	cmp	r5, #128	; 0x80
 800b520:	68d9      	ldr	r1, [r3, #12]
 800b522:	d1f8      	bne.n	800b516 <_reclaim_reent+0x8a>
 800b524:	4620      	mov	r0, r4
 800b526:	f002 ffad 	bl	800e484 <_free_r>
 800b52a:	e7ba      	b.n	800b4a2 <_reclaim_reent+0x16>
 800b52c:	680e      	ldr	r6, [r1, #0]
 800b52e:	4620      	mov	r0, r4
 800b530:	f002 ffa8 	bl	800e484 <_free_r>
 800b534:	4631      	mov	r1, r6
 800b536:	e7ef      	b.n	800b518 <_reclaim_reent+0x8c>
 800b538:	2500      	movs	r5, #0
 800b53a:	e7ef      	b.n	800b51c <_reclaim_reent+0x90>
 800b53c:	bd70      	pop	{r4, r5, r6, pc}
 800b53e:	bf00      	nop
 800b540:	20000010 	.word	0x20000010

0800b544 <_sbrk_r>:
 800b544:	b538      	push	{r3, r4, r5, lr}
 800b546:	4d06      	ldr	r5, [pc, #24]	; (800b560 <_sbrk_r+0x1c>)
 800b548:	2300      	movs	r3, #0
 800b54a:	4604      	mov	r4, r0
 800b54c:	4608      	mov	r0, r1
 800b54e:	602b      	str	r3, [r5, #0]
 800b550:	f7f7 f8c6 	bl	80026e0 <_sbrk>
 800b554:	1c43      	adds	r3, r0, #1
 800b556:	d102      	bne.n	800b55e <_sbrk_r+0x1a>
 800b558:	682b      	ldr	r3, [r5, #0]
 800b55a:	b103      	cbz	r3, 800b55e <_sbrk_r+0x1a>
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	bd38      	pop	{r3, r4, r5, pc}
 800b560:	20004908 	.word	0x20004908

0800b564 <__sread>:
 800b564:	b510      	push	{r4, lr}
 800b566:	460c      	mov	r4, r1
 800b568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b56c:	f003 f930 	bl	800e7d0 <_read_r>
 800b570:	2800      	cmp	r0, #0
 800b572:	bfab      	itete	ge
 800b574:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b576:	89a3      	ldrhlt	r3, [r4, #12]
 800b578:	181b      	addge	r3, r3, r0
 800b57a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b57e:	bfac      	ite	ge
 800b580:	6563      	strge	r3, [r4, #84]	; 0x54
 800b582:	81a3      	strhlt	r3, [r4, #12]
 800b584:	bd10      	pop	{r4, pc}

0800b586 <__swrite>:
 800b586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b58a:	461f      	mov	r7, r3
 800b58c:	898b      	ldrh	r3, [r1, #12]
 800b58e:	05db      	lsls	r3, r3, #23
 800b590:	4605      	mov	r5, r0
 800b592:	460c      	mov	r4, r1
 800b594:	4616      	mov	r6, r2
 800b596:	d505      	bpl.n	800b5a4 <__swrite+0x1e>
 800b598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b59c:	2302      	movs	r3, #2
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f002 f9fa 	bl	800d998 <_lseek_r>
 800b5a4:	89a3      	ldrh	r3, [r4, #12]
 800b5a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5ae:	81a3      	strh	r3, [r4, #12]
 800b5b0:	4632      	mov	r2, r6
 800b5b2:	463b      	mov	r3, r7
 800b5b4:	4628      	mov	r0, r5
 800b5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ba:	f000 bead 	b.w	800c318 <_write_r>

0800b5be <__sseek>:
 800b5be:	b510      	push	{r4, lr}
 800b5c0:	460c      	mov	r4, r1
 800b5c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c6:	f002 f9e7 	bl	800d998 <_lseek_r>
 800b5ca:	1c43      	adds	r3, r0, #1
 800b5cc:	89a3      	ldrh	r3, [r4, #12]
 800b5ce:	bf15      	itete	ne
 800b5d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b5da:	81a3      	strheq	r3, [r4, #12]
 800b5dc:	bf18      	it	ne
 800b5de:	81a3      	strhne	r3, [r4, #12]
 800b5e0:	bd10      	pop	{r4, pc}

0800b5e2 <__sclose>:
 800b5e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5e6:	f000 bf17 	b.w	800c418 <_close_r>

0800b5ea <strncmp>:
 800b5ea:	b510      	push	{r4, lr}
 800b5ec:	b17a      	cbz	r2, 800b60e <strncmp+0x24>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	3901      	subs	r1, #1
 800b5f2:	1884      	adds	r4, r0, r2
 800b5f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b5f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b5fc:	4290      	cmp	r0, r2
 800b5fe:	d101      	bne.n	800b604 <strncmp+0x1a>
 800b600:	42a3      	cmp	r3, r4
 800b602:	d101      	bne.n	800b608 <strncmp+0x1e>
 800b604:	1a80      	subs	r0, r0, r2
 800b606:	bd10      	pop	{r4, pc}
 800b608:	2800      	cmp	r0, #0
 800b60a:	d1f3      	bne.n	800b5f4 <strncmp+0xa>
 800b60c:	e7fa      	b.n	800b604 <strncmp+0x1a>
 800b60e:	4610      	mov	r0, r2
 800b610:	e7f9      	b.n	800b606 <strncmp+0x1c>

0800b612 <sulp>:
 800b612:	b570      	push	{r4, r5, r6, lr}
 800b614:	4604      	mov	r4, r0
 800b616:	460d      	mov	r5, r1
 800b618:	ec45 4b10 	vmov	d0, r4, r5
 800b61c:	4616      	mov	r6, r2
 800b61e:	f002 fdcb 	bl	800e1b8 <__ulp>
 800b622:	ec51 0b10 	vmov	r0, r1, d0
 800b626:	b17e      	cbz	r6, 800b648 <sulp+0x36>
 800b628:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b62c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b630:	2b00      	cmp	r3, #0
 800b632:	dd09      	ble.n	800b648 <sulp+0x36>
 800b634:	051b      	lsls	r3, r3, #20
 800b636:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b63a:	2400      	movs	r4, #0
 800b63c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b640:	4622      	mov	r2, r4
 800b642:	462b      	mov	r3, r5
 800b644:	f7f4 ffe0 	bl	8000608 <__aeabi_dmul>
 800b648:	bd70      	pop	{r4, r5, r6, pc}
 800b64a:	0000      	movs	r0, r0
 800b64c:	0000      	movs	r0, r0
	...

0800b650 <_strtod_l>:
 800b650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b654:	ed2d 8b02 	vpush	{d8}
 800b658:	b09d      	sub	sp, #116	; 0x74
 800b65a:	461f      	mov	r7, r3
 800b65c:	2300      	movs	r3, #0
 800b65e:	9318      	str	r3, [sp, #96]	; 0x60
 800b660:	4ba2      	ldr	r3, [pc, #648]	; (800b8ec <_strtod_l+0x29c>)
 800b662:	9213      	str	r2, [sp, #76]	; 0x4c
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	9305      	str	r3, [sp, #20]
 800b668:	4604      	mov	r4, r0
 800b66a:	4618      	mov	r0, r3
 800b66c:	4688      	mov	r8, r1
 800b66e:	f7f4 fdb7 	bl	80001e0 <strlen>
 800b672:	f04f 0a00 	mov.w	sl, #0
 800b676:	4605      	mov	r5, r0
 800b678:	f04f 0b00 	mov.w	fp, #0
 800b67c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b680:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b682:	781a      	ldrb	r2, [r3, #0]
 800b684:	2a2b      	cmp	r2, #43	; 0x2b
 800b686:	d04e      	beq.n	800b726 <_strtod_l+0xd6>
 800b688:	d83b      	bhi.n	800b702 <_strtod_l+0xb2>
 800b68a:	2a0d      	cmp	r2, #13
 800b68c:	d834      	bhi.n	800b6f8 <_strtod_l+0xa8>
 800b68e:	2a08      	cmp	r2, #8
 800b690:	d834      	bhi.n	800b6fc <_strtod_l+0xac>
 800b692:	2a00      	cmp	r2, #0
 800b694:	d03e      	beq.n	800b714 <_strtod_l+0xc4>
 800b696:	2300      	movs	r3, #0
 800b698:	930a      	str	r3, [sp, #40]	; 0x28
 800b69a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b69c:	7833      	ldrb	r3, [r6, #0]
 800b69e:	2b30      	cmp	r3, #48	; 0x30
 800b6a0:	f040 80b0 	bne.w	800b804 <_strtod_l+0x1b4>
 800b6a4:	7873      	ldrb	r3, [r6, #1]
 800b6a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b6aa:	2b58      	cmp	r3, #88	; 0x58
 800b6ac:	d168      	bne.n	800b780 <_strtod_l+0x130>
 800b6ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6b0:	9301      	str	r3, [sp, #4]
 800b6b2:	ab18      	add	r3, sp, #96	; 0x60
 800b6b4:	9702      	str	r7, [sp, #8]
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	4a8d      	ldr	r2, [pc, #564]	; (800b8f0 <_strtod_l+0x2a0>)
 800b6ba:	ab19      	add	r3, sp, #100	; 0x64
 800b6bc:	a917      	add	r1, sp, #92	; 0x5c
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f001 fe5e 	bl	800d380 <__gethex>
 800b6c4:	f010 0707 	ands.w	r7, r0, #7
 800b6c8:	4605      	mov	r5, r0
 800b6ca:	d005      	beq.n	800b6d8 <_strtod_l+0x88>
 800b6cc:	2f06      	cmp	r7, #6
 800b6ce:	d12c      	bne.n	800b72a <_strtod_l+0xda>
 800b6d0:	3601      	adds	r6, #1
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	9617      	str	r6, [sp, #92]	; 0x5c
 800b6d6:	930a      	str	r3, [sp, #40]	; 0x28
 800b6d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	f040 8590 	bne.w	800c200 <_strtod_l+0xbb0>
 800b6e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6e2:	b1eb      	cbz	r3, 800b720 <_strtod_l+0xd0>
 800b6e4:	4652      	mov	r2, sl
 800b6e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b6ea:	ec43 2b10 	vmov	d0, r2, r3
 800b6ee:	b01d      	add	sp, #116	; 0x74
 800b6f0:	ecbd 8b02 	vpop	{d8}
 800b6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f8:	2a20      	cmp	r2, #32
 800b6fa:	d1cc      	bne.n	800b696 <_strtod_l+0x46>
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	9317      	str	r3, [sp, #92]	; 0x5c
 800b700:	e7be      	b.n	800b680 <_strtod_l+0x30>
 800b702:	2a2d      	cmp	r2, #45	; 0x2d
 800b704:	d1c7      	bne.n	800b696 <_strtod_l+0x46>
 800b706:	2201      	movs	r2, #1
 800b708:	920a      	str	r2, [sp, #40]	; 0x28
 800b70a:	1c5a      	adds	r2, r3, #1
 800b70c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b70e:	785b      	ldrb	r3, [r3, #1]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d1c2      	bne.n	800b69a <_strtod_l+0x4a>
 800b714:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b716:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	f040 856e 	bne.w	800c1fc <_strtod_l+0xbac>
 800b720:	4652      	mov	r2, sl
 800b722:	465b      	mov	r3, fp
 800b724:	e7e1      	b.n	800b6ea <_strtod_l+0x9a>
 800b726:	2200      	movs	r2, #0
 800b728:	e7ee      	b.n	800b708 <_strtod_l+0xb8>
 800b72a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b72c:	b13a      	cbz	r2, 800b73e <_strtod_l+0xee>
 800b72e:	2135      	movs	r1, #53	; 0x35
 800b730:	a81a      	add	r0, sp, #104	; 0x68
 800b732:	f002 fe4c 	bl	800e3ce <__copybits>
 800b736:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b738:	4620      	mov	r0, r4
 800b73a:	f002 fa0b 	bl	800db54 <_Bfree>
 800b73e:	3f01      	subs	r7, #1
 800b740:	2f04      	cmp	r7, #4
 800b742:	d806      	bhi.n	800b752 <_strtod_l+0x102>
 800b744:	e8df f007 	tbb	[pc, r7]
 800b748:	1714030a 	.word	0x1714030a
 800b74c:	0a          	.byte	0x0a
 800b74d:	00          	.byte	0x00
 800b74e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b752:	0728      	lsls	r0, r5, #28
 800b754:	d5c0      	bpl.n	800b6d8 <_strtod_l+0x88>
 800b756:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b75a:	e7bd      	b.n	800b6d8 <_strtod_l+0x88>
 800b75c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b760:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b762:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b766:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b76a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b76e:	e7f0      	b.n	800b752 <_strtod_l+0x102>
 800b770:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b8f4 <_strtod_l+0x2a4>
 800b774:	e7ed      	b.n	800b752 <_strtod_l+0x102>
 800b776:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b77a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b77e:	e7e8      	b.n	800b752 <_strtod_l+0x102>
 800b780:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b782:	1c5a      	adds	r2, r3, #1
 800b784:	9217      	str	r2, [sp, #92]	; 0x5c
 800b786:	785b      	ldrb	r3, [r3, #1]
 800b788:	2b30      	cmp	r3, #48	; 0x30
 800b78a:	d0f9      	beq.n	800b780 <_strtod_l+0x130>
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d0a3      	beq.n	800b6d8 <_strtod_l+0x88>
 800b790:	2301      	movs	r3, #1
 800b792:	f04f 0900 	mov.w	r9, #0
 800b796:	9304      	str	r3, [sp, #16]
 800b798:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b79a:	9308      	str	r3, [sp, #32]
 800b79c:	f8cd 901c 	str.w	r9, [sp, #28]
 800b7a0:	464f      	mov	r7, r9
 800b7a2:	220a      	movs	r2, #10
 800b7a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b7a6:	7806      	ldrb	r6, [r0, #0]
 800b7a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b7ac:	b2d9      	uxtb	r1, r3
 800b7ae:	2909      	cmp	r1, #9
 800b7b0:	d92a      	bls.n	800b808 <_strtod_l+0x1b8>
 800b7b2:	9905      	ldr	r1, [sp, #20]
 800b7b4:	462a      	mov	r2, r5
 800b7b6:	f7ff ff18 	bl	800b5ea <strncmp>
 800b7ba:	b398      	cbz	r0, 800b824 <_strtod_l+0x1d4>
 800b7bc:	2000      	movs	r0, #0
 800b7be:	4632      	mov	r2, r6
 800b7c0:	463d      	mov	r5, r7
 800b7c2:	9005      	str	r0, [sp, #20]
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	2a65      	cmp	r2, #101	; 0x65
 800b7c8:	d001      	beq.n	800b7ce <_strtod_l+0x17e>
 800b7ca:	2a45      	cmp	r2, #69	; 0x45
 800b7cc:	d118      	bne.n	800b800 <_strtod_l+0x1b0>
 800b7ce:	b91d      	cbnz	r5, 800b7d8 <_strtod_l+0x188>
 800b7d0:	9a04      	ldr	r2, [sp, #16]
 800b7d2:	4302      	orrs	r2, r0
 800b7d4:	d09e      	beq.n	800b714 <_strtod_l+0xc4>
 800b7d6:	2500      	movs	r5, #0
 800b7d8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b7dc:	f108 0201 	add.w	r2, r8, #1
 800b7e0:	9217      	str	r2, [sp, #92]	; 0x5c
 800b7e2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b7e6:	2a2b      	cmp	r2, #43	; 0x2b
 800b7e8:	d075      	beq.n	800b8d6 <_strtod_l+0x286>
 800b7ea:	2a2d      	cmp	r2, #45	; 0x2d
 800b7ec:	d07b      	beq.n	800b8e6 <_strtod_l+0x296>
 800b7ee:	f04f 0c00 	mov.w	ip, #0
 800b7f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b7f6:	2909      	cmp	r1, #9
 800b7f8:	f240 8082 	bls.w	800b900 <_strtod_l+0x2b0>
 800b7fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b800:	2600      	movs	r6, #0
 800b802:	e09d      	b.n	800b940 <_strtod_l+0x2f0>
 800b804:	2300      	movs	r3, #0
 800b806:	e7c4      	b.n	800b792 <_strtod_l+0x142>
 800b808:	2f08      	cmp	r7, #8
 800b80a:	bfd8      	it	le
 800b80c:	9907      	ldrle	r1, [sp, #28]
 800b80e:	f100 0001 	add.w	r0, r0, #1
 800b812:	bfda      	itte	le
 800b814:	fb02 3301 	mlale	r3, r2, r1, r3
 800b818:	9307      	strle	r3, [sp, #28]
 800b81a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b81e:	3701      	adds	r7, #1
 800b820:	9017      	str	r0, [sp, #92]	; 0x5c
 800b822:	e7bf      	b.n	800b7a4 <_strtod_l+0x154>
 800b824:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b826:	195a      	adds	r2, r3, r5
 800b828:	9217      	str	r2, [sp, #92]	; 0x5c
 800b82a:	5d5a      	ldrb	r2, [r3, r5]
 800b82c:	2f00      	cmp	r7, #0
 800b82e:	d037      	beq.n	800b8a0 <_strtod_l+0x250>
 800b830:	9005      	str	r0, [sp, #20]
 800b832:	463d      	mov	r5, r7
 800b834:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b838:	2b09      	cmp	r3, #9
 800b83a:	d912      	bls.n	800b862 <_strtod_l+0x212>
 800b83c:	2301      	movs	r3, #1
 800b83e:	e7c2      	b.n	800b7c6 <_strtod_l+0x176>
 800b840:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b842:	1c5a      	adds	r2, r3, #1
 800b844:	9217      	str	r2, [sp, #92]	; 0x5c
 800b846:	785a      	ldrb	r2, [r3, #1]
 800b848:	3001      	adds	r0, #1
 800b84a:	2a30      	cmp	r2, #48	; 0x30
 800b84c:	d0f8      	beq.n	800b840 <_strtod_l+0x1f0>
 800b84e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b852:	2b08      	cmp	r3, #8
 800b854:	f200 84d9 	bhi.w	800c20a <_strtod_l+0xbba>
 800b858:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b85a:	9005      	str	r0, [sp, #20]
 800b85c:	2000      	movs	r0, #0
 800b85e:	9308      	str	r3, [sp, #32]
 800b860:	4605      	mov	r5, r0
 800b862:	3a30      	subs	r2, #48	; 0x30
 800b864:	f100 0301 	add.w	r3, r0, #1
 800b868:	d014      	beq.n	800b894 <_strtod_l+0x244>
 800b86a:	9905      	ldr	r1, [sp, #20]
 800b86c:	4419      	add	r1, r3
 800b86e:	9105      	str	r1, [sp, #20]
 800b870:	462b      	mov	r3, r5
 800b872:	eb00 0e05 	add.w	lr, r0, r5
 800b876:	210a      	movs	r1, #10
 800b878:	4573      	cmp	r3, lr
 800b87a:	d113      	bne.n	800b8a4 <_strtod_l+0x254>
 800b87c:	182b      	adds	r3, r5, r0
 800b87e:	2b08      	cmp	r3, #8
 800b880:	f105 0501 	add.w	r5, r5, #1
 800b884:	4405      	add	r5, r0
 800b886:	dc1c      	bgt.n	800b8c2 <_strtod_l+0x272>
 800b888:	9907      	ldr	r1, [sp, #28]
 800b88a:	230a      	movs	r3, #10
 800b88c:	fb03 2301 	mla	r3, r3, r1, r2
 800b890:	9307      	str	r3, [sp, #28]
 800b892:	2300      	movs	r3, #0
 800b894:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b896:	1c51      	adds	r1, r2, #1
 800b898:	9117      	str	r1, [sp, #92]	; 0x5c
 800b89a:	7852      	ldrb	r2, [r2, #1]
 800b89c:	4618      	mov	r0, r3
 800b89e:	e7c9      	b.n	800b834 <_strtod_l+0x1e4>
 800b8a0:	4638      	mov	r0, r7
 800b8a2:	e7d2      	b.n	800b84a <_strtod_l+0x1fa>
 800b8a4:	2b08      	cmp	r3, #8
 800b8a6:	dc04      	bgt.n	800b8b2 <_strtod_l+0x262>
 800b8a8:	9e07      	ldr	r6, [sp, #28]
 800b8aa:	434e      	muls	r6, r1
 800b8ac:	9607      	str	r6, [sp, #28]
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	e7e2      	b.n	800b878 <_strtod_l+0x228>
 800b8b2:	f103 0c01 	add.w	ip, r3, #1
 800b8b6:	f1bc 0f10 	cmp.w	ip, #16
 800b8ba:	bfd8      	it	le
 800b8bc:	fb01 f909 	mulle.w	r9, r1, r9
 800b8c0:	e7f5      	b.n	800b8ae <_strtod_l+0x25e>
 800b8c2:	2d10      	cmp	r5, #16
 800b8c4:	bfdc      	itt	le
 800b8c6:	230a      	movle	r3, #10
 800b8c8:	fb03 2909 	mlale	r9, r3, r9, r2
 800b8cc:	e7e1      	b.n	800b892 <_strtod_l+0x242>
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	9305      	str	r3, [sp, #20]
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e77c      	b.n	800b7d0 <_strtod_l+0x180>
 800b8d6:	f04f 0c00 	mov.w	ip, #0
 800b8da:	f108 0202 	add.w	r2, r8, #2
 800b8de:	9217      	str	r2, [sp, #92]	; 0x5c
 800b8e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b8e4:	e785      	b.n	800b7f2 <_strtod_l+0x1a2>
 800b8e6:	f04f 0c01 	mov.w	ip, #1
 800b8ea:	e7f6      	b.n	800b8da <_strtod_l+0x28a>
 800b8ec:	0800f4f8 	.word	0x0800f4f8
 800b8f0:	0800f3b0 	.word	0x0800f3b0
 800b8f4:	7ff00000 	.word	0x7ff00000
 800b8f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b8fa:	1c51      	adds	r1, r2, #1
 800b8fc:	9117      	str	r1, [sp, #92]	; 0x5c
 800b8fe:	7852      	ldrb	r2, [r2, #1]
 800b900:	2a30      	cmp	r2, #48	; 0x30
 800b902:	d0f9      	beq.n	800b8f8 <_strtod_l+0x2a8>
 800b904:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b908:	2908      	cmp	r1, #8
 800b90a:	f63f af79 	bhi.w	800b800 <_strtod_l+0x1b0>
 800b90e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b912:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b914:	9206      	str	r2, [sp, #24]
 800b916:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b918:	1c51      	adds	r1, r2, #1
 800b91a:	9117      	str	r1, [sp, #92]	; 0x5c
 800b91c:	7852      	ldrb	r2, [r2, #1]
 800b91e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b922:	2e09      	cmp	r6, #9
 800b924:	d937      	bls.n	800b996 <_strtod_l+0x346>
 800b926:	9e06      	ldr	r6, [sp, #24]
 800b928:	1b89      	subs	r1, r1, r6
 800b92a:	2908      	cmp	r1, #8
 800b92c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b930:	dc02      	bgt.n	800b938 <_strtod_l+0x2e8>
 800b932:	4576      	cmp	r6, lr
 800b934:	bfa8      	it	ge
 800b936:	4676      	movge	r6, lr
 800b938:	f1bc 0f00 	cmp.w	ip, #0
 800b93c:	d000      	beq.n	800b940 <_strtod_l+0x2f0>
 800b93e:	4276      	negs	r6, r6
 800b940:	2d00      	cmp	r5, #0
 800b942:	d14d      	bne.n	800b9e0 <_strtod_l+0x390>
 800b944:	9904      	ldr	r1, [sp, #16]
 800b946:	4301      	orrs	r1, r0
 800b948:	f47f aec6 	bne.w	800b6d8 <_strtod_l+0x88>
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f47f aee1 	bne.w	800b714 <_strtod_l+0xc4>
 800b952:	2a69      	cmp	r2, #105	; 0x69
 800b954:	d027      	beq.n	800b9a6 <_strtod_l+0x356>
 800b956:	dc24      	bgt.n	800b9a2 <_strtod_l+0x352>
 800b958:	2a49      	cmp	r2, #73	; 0x49
 800b95a:	d024      	beq.n	800b9a6 <_strtod_l+0x356>
 800b95c:	2a4e      	cmp	r2, #78	; 0x4e
 800b95e:	f47f aed9 	bne.w	800b714 <_strtod_l+0xc4>
 800b962:	499f      	ldr	r1, [pc, #636]	; (800bbe0 <_strtod_l+0x590>)
 800b964:	a817      	add	r0, sp, #92	; 0x5c
 800b966:	f001 ff63 	bl	800d830 <__match>
 800b96a:	2800      	cmp	r0, #0
 800b96c:	f43f aed2 	beq.w	800b714 <_strtod_l+0xc4>
 800b970:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	2b28      	cmp	r3, #40	; 0x28
 800b976:	d12d      	bne.n	800b9d4 <_strtod_l+0x384>
 800b978:	499a      	ldr	r1, [pc, #616]	; (800bbe4 <_strtod_l+0x594>)
 800b97a:	aa1a      	add	r2, sp, #104	; 0x68
 800b97c:	a817      	add	r0, sp, #92	; 0x5c
 800b97e:	f001 ff6b 	bl	800d858 <__hexnan>
 800b982:	2805      	cmp	r0, #5
 800b984:	d126      	bne.n	800b9d4 <_strtod_l+0x384>
 800b986:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b988:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b98c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b990:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b994:	e6a0      	b.n	800b6d8 <_strtod_l+0x88>
 800b996:	210a      	movs	r1, #10
 800b998:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b99c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b9a0:	e7b9      	b.n	800b916 <_strtod_l+0x2c6>
 800b9a2:	2a6e      	cmp	r2, #110	; 0x6e
 800b9a4:	e7db      	b.n	800b95e <_strtod_l+0x30e>
 800b9a6:	4990      	ldr	r1, [pc, #576]	; (800bbe8 <_strtod_l+0x598>)
 800b9a8:	a817      	add	r0, sp, #92	; 0x5c
 800b9aa:	f001 ff41 	bl	800d830 <__match>
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	f43f aeb0 	beq.w	800b714 <_strtod_l+0xc4>
 800b9b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b9b6:	498d      	ldr	r1, [pc, #564]	; (800bbec <_strtod_l+0x59c>)
 800b9b8:	3b01      	subs	r3, #1
 800b9ba:	a817      	add	r0, sp, #92	; 0x5c
 800b9bc:	9317      	str	r3, [sp, #92]	; 0x5c
 800b9be:	f001 ff37 	bl	800d830 <__match>
 800b9c2:	b910      	cbnz	r0, 800b9ca <_strtod_l+0x37a>
 800b9c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	9317      	str	r3, [sp, #92]	; 0x5c
 800b9ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 800bbfc <_strtod_l+0x5ac>
 800b9ce:	f04f 0a00 	mov.w	sl, #0
 800b9d2:	e681      	b.n	800b6d8 <_strtod_l+0x88>
 800b9d4:	4886      	ldr	r0, [pc, #536]	; (800bbf0 <_strtod_l+0x5a0>)
 800b9d6:	f002 ff0f 	bl	800e7f8 <nan>
 800b9da:	ec5b ab10 	vmov	sl, fp, d0
 800b9de:	e67b      	b.n	800b6d8 <_strtod_l+0x88>
 800b9e0:	9b05      	ldr	r3, [sp, #20]
 800b9e2:	9807      	ldr	r0, [sp, #28]
 800b9e4:	1af3      	subs	r3, r6, r3
 800b9e6:	2f00      	cmp	r7, #0
 800b9e8:	bf08      	it	eq
 800b9ea:	462f      	moveq	r7, r5
 800b9ec:	2d10      	cmp	r5, #16
 800b9ee:	9306      	str	r3, [sp, #24]
 800b9f0:	46a8      	mov	r8, r5
 800b9f2:	bfa8      	it	ge
 800b9f4:	f04f 0810 	movge.w	r8, #16
 800b9f8:	f7f4 fd8c 	bl	8000514 <__aeabi_ui2d>
 800b9fc:	2d09      	cmp	r5, #9
 800b9fe:	4682      	mov	sl, r0
 800ba00:	468b      	mov	fp, r1
 800ba02:	dd13      	ble.n	800ba2c <_strtod_l+0x3dc>
 800ba04:	4b7b      	ldr	r3, [pc, #492]	; (800bbf4 <_strtod_l+0x5a4>)
 800ba06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ba0a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ba0e:	f7f4 fdfb 	bl	8000608 <__aeabi_dmul>
 800ba12:	4682      	mov	sl, r0
 800ba14:	4648      	mov	r0, r9
 800ba16:	468b      	mov	fp, r1
 800ba18:	f7f4 fd7c 	bl	8000514 <__aeabi_ui2d>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	460b      	mov	r3, r1
 800ba20:	4650      	mov	r0, sl
 800ba22:	4659      	mov	r1, fp
 800ba24:	f7f4 fc3a 	bl	800029c <__adddf3>
 800ba28:	4682      	mov	sl, r0
 800ba2a:	468b      	mov	fp, r1
 800ba2c:	2d0f      	cmp	r5, #15
 800ba2e:	dc38      	bgt.n	800baa2 <_strtod_l+0x452>
 800ba30:	9b06      	ldr	r3, [sp, #24]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	f43f ae50 	beq.w	800b6d8 <_strtod_l+0x88>
 800ba38:	dd24      	ble.n	800ba84 <_strtod_l+0x434>
 800ba3a:	2b16      	cmp	r3, #22
 800ba3c:	dc0b      	bgt.n	800ba56 <_strtod_l+0x406>
 800ba3e:	496d      	ldr	r1, [pc, #436]	; (800bbf4 <_strtod_l+0x5a4>)
 800ba40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba48:	4652      	mov	r2, sl
 800ba4a:	465b      	mov	r3, fp
 800ba4c:	f7f4 fddc 	bl	8000608 <__aeabi_dmul>
 800ba50:	4682      	mov	sl, r0
 800ba52:	468b      	mov	fp, r1
 800ba54:	e640      	b.n	800b6d8 <_strtod_l+0x88>
 800ba56:	9a06      	ldr	r2, [sp, #24]
 800ba58:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	db20      	blt.n	800baa2 <_strtod_l+0x452>
 800ba60:	4c64      	ldr	r4, [pc, #400]	; (800bbf4 <_strtod_l+0x5a4>)
 800ba62:	f1c5 050f 	rsb	r5, r5, #15
 800ba66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ba6a:	4652      	mov	r2, sl
 800ba6c:	465b      	mov	r3, fp
 800ba6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba72:	f7f4 fdc9 	bl	8000608 <__aeabi_dmul>
 800ba76:	9b06      	ldr	r3, [sp, #24]
 800ba78:	1b5d      	subs	r5, r3, r5
 800ba7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ba7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ba82:	e7e3      	b.n	800ba4c <_strtod_l+0x3fc>
 800ba84:	9b06      	ldr	r3, [sp, #24]
 800ba86:	3316      	adds	r3, #22
 800ba88:	db0b      	blt.n	800baa2 <_strtod_l+0x452>
 800ba8a:	9b05      	ldr	r3, [sp, #20]
 800ba8c:	1b9e      	subs	r6, r3, r6
 800ba8e:	4b59      	ldr	r3, [pc, #356]	; (800bbf4 <_strtod_l+0x5a4>)
 800ba90:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ba94:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba98:	4650      	mov	r0, sl
 800ba9a:	4659      	mov	r1, fp
 800ba9c:	f7f4 fede 	bl	800085c <__aeabi_ddiv>
 800baa0:	e7d6      	b.n	800ba50 <_strtod_l+0x400>
 800baa2:	9b06      	ldr	r3, [sp, #24]
 800baa4:	eba5 0808 	sub.w	r8, r5, r8
 800baa8:	4498      	add	r8, r3
 800baaa:	f1b8 0f00 	cmp.w	r8, #0
 800baae:	dd74      	ble.n	800bb9a <_strtod_l+0x54a>
 800bab0:	f018 030f 	ands.w	r3, r8, #15
 800bab4:	d00a      	beq.n	800bacc <_strtod_l+0x47c>
 800bab6:	494f      	ldr	r1, [pc, #316]	; (800bbf4 <_strtod_l+0x5a4>)
 800bab8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800babc:	4652      	mov	r2, sl
 800babe:	465b      	mov	r3, fp
 800bac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bac4:	f7f4 fda0 	bl	8000608 <__aeabi_dmul>
 800bac8:	4682      	mov	sl, r0
 800baca:	468b      	mov	fp, r1
 800bacc:	f038 080f 	bics.w	r8, r8, #15
 800bad0:	d04f      	beq.n	800bb72 <_strtod_l+0x522>
 800bad2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bad6:	dd22      	ble.n	800bb1e <_strtod_l+0x4ce>
 800bad8:	2500      	movs	r5, #0
 800bada:	462e      	mov	r6, r5
 800badc:	9507      	str	r5, [sp, #28]
 800bade:	9505      	str	r5, [sp, #20]
 800bae0:	2322      	movs	r3, #34	; 0x22
 800bae2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800bbfc <_strtod_l+0x5ac>
 800bae6:	6023      	str	r3, [r4, #0]
 800bae8:	f04f 0a00 	mov.w	sl, #0
 800baec:	9b07      	ldr	r3, [sp, #28]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f43f adf2 	beq.w	800b6d8 <_strtod_l+0x88>
 800baf4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800baf6:	4620      	mov	r0, r4
 800baf8:	f002 f82c 	bl	800db54 <_Bfree>
 800bafc:	9905      	ldr	r1, [sp, #20]
 800bafe:	4620      	mov	r0, r4
 800bb00:	f002 f828 	bl	800db54 <_Bfree>
 800bb04:	4631      	mov	r1, r6
 800bb06:	4620      	mov	r0, r4
 800bb08:	f002 f824 	bl	800db54 <_Bfree>
 800bb0c:	9907      	ldr	r1, [sp, #28]
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f002 f820 	bl	800db54 <_Bfree>
 800bb14:	4629      	mov	r1, r5
 800bb16:	4620      	mov	r0, r4
 800bb18:	f002 f81c 	bl	800db54 <_Bfree>
 800bb1c:	e5dc      	b.n	800b6d8 <_strtod_l+0x88>
 800bb1e:	4b36      	ldr	r3, [pc, #216]	; (800bbf8 <_strtod_l+0x5a8>)
 800bb20:	9304      	str	r3, [sp, #16]
 800bb22:	2300      	movs	r3, #0
 800bb24:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bb28:	4650      	mov	r0, sl
 800bb2a:	4659      	mov	r1, fp
 800bb2c:	4699      	mov	r9, r3
 800bb2e:	f1b8 0f01 	cmp.w	r8, #1
 800bb32:	dc21      	bgt.n	800bb78 <_strtod_l+0x528>
 800bb34:	b10b      	cbz	r3, 800bb3a <_strtod_l+0x4ea>
 800bb36:	4682      	mov	sl, r0
 800bb38:	468b      	mov	fp, r1
 800bb3a:	4b2f      	ldr	r3, [pc, #188]	; (800bbf8 <_strtod_l+0x5a8>)
 800bb3c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bb40:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800bb44:	4652      	mov	r2, sl
 800bb46:	465b      	mov	r3, fp
 800bb48:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bb4c:	f7f4 fd5c 	bl	8000608 <__aeabi_dmul>
 800bb50:	4b2a      	ldr	r3, [pc, #168]	; (800bbfc <_strtod_l+0x5ac>)
 800bb52:	460a      	mov	r2, r1
 800bb54:	400b      	ands	r3, r1
 800bb56:	492a      	ldr	r1, [pc, #168]	; (800bc00 <_strtod_l+0x5b0>)
 800bb58:	428b      	cmp	r3, r1
 800bb5a:	4682      	mov	sl, r0
 800bb5c:	d8bc      	bhi.n	800bad8 <_strtod_l+0x488>
 800bb5e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bb62:	428b      	cmp	r3, r1
 800bb64:	bf86      	itte	hi
 800bb66:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800bc04 <_strtod_l+0x5b4>
 800bb6a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800bb6e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bb72:	2300      	movs	r3, #0
 800bb74:	9304      	str	r3, [sp, #16]
 800bb76:	e084      	b.n	800bc82 <_strtod_l+0x632>
 800bb78:	f018 0f01 	tst.w	r8, #1
 800bb7c:	d005      	beq.n	800bb8a <_strtod_l+0x53a>
 800bb7e:	9b04      	ldr	r3, [sp, #16]
 800bb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb84:	f7f4 fd40 	bl	8000608 <__aeabi_dmul>
 800bb88:	2301      	movs	r3, #1
 800bb8a:	9a04      	ldr	r2, [sp, #16]
 800bb8c:	3208      	adds	r2, #8
 800bb8e:	f109 0901 	add.w	r9, r9, #1
 800bb92:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bb96:	9204      	str	r2, [sp, #16]
 800bb98:	e7c9      	b.n	800bb2e <_strtod_l+0x4de>
 800bb9a:	d0ea      	beq.n	800bb72 <_strtod_l+0x522>
 800bb9c:	f1c8 0800 	rsb	r8, r8, #0
 800bba0:	f018 020f 	ands.w	r2, r8, #15
 800bba4:	d00a      	beq.n	800bbbc <_strtod_l+0x56c>
 800bba6:	4b13      	ldr	r3, [pc, #76]	; (800bbf4 <_strtod_l+0x5a4>)
 800bba8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbac:	4650      	mov	r0, sl
 800bbae:	4659      	mov	r1, fp
 800bbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb4:	f7f4 fe52 	bl	800085c <__aeabi_ddiv>
 800bbb8:	4682      	mov	sl, r0
 800bbba:	468b      	mov	fp, r1
 800bbbc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bbc0:	d0d7      	beq.n	800bb72 <_strtod_l+0x522>
 800bbc2:	f1b8 0f1f 	cmp.w	r8, #31
 800bbc6:	dd1f      	ble.n	800bc08 <_strtod_l+0x5b8>
 800bbc8:	2500      	movs	r5, #0
 800bbca:	462e      	mov	r6, r5
 800bbcc:	9507      	str	r5, [sp, #28]
 800bbce:	9505      	str	r5, [sp, #20]
 800bbd0:	2322      	movs	r3, #34	; 0x22
 800bbd2:	f04f 0a00 	mov.w	sl, #0
 800bbd6:	f04f 0b00 	mov.w	fp, #0
 800bbda:	6023      	str	r3, [r4, #0]
 800bbdc:	e786      	b.n	800baec <_strtod_l+0x49c>
 800bbde:	bf00      	nop
 800bbe0:	0800f389 	.word	0x0800f389
 800bbe4:	0800f3c4 	.word	0x0800f3c4
 800bbe8:	0800f381 	.word	0x0800f381
 800bbec:	0800f403 	.word	0x0800f403
 800bbf0:	0800f6b0 	.word	0x0800f6b0
 800bbf4:	0800f590 	.word	0x0800f590
 800bbf8:	0800f568 	.word	0x0800f568
 800bbfc:	7ff00000 	.word	0x7ff00000
 800bc00:	7ca00000 	.word	0x7ca00000
 800bc04:	7fefffff 	.word	0x7fefffff
 800bc08:	f018 0310 	ands.w	r3, r8, #16
 800bc0c:	bf18      	it	ne
 800bc0e:	236a      	movne	r3, #106	; 0x6a
 800bc10:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800bfc0 <_strtod_l+0x970>
 800bc14:	9304      	str	r3, [sp, #16]
 800bc16:	4650      	mov	r0, sl
 800bc18:	4659      	mov	r1, fp
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	f018 0f01 	tst.w	r8, #1
 800bc20:	d004      	beq.n	800bc2c <_strtod_l+0x5dc>
 800bc22:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bc26:	f7f4 fcef 	bl	8000608 <__aeabi_dmul>
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bc30:	f109 0908 	add.w	r9, r9, #8
 800bc34:	d1f2      	bne.n	800bc1c <_strtod_l+0x5cc>
 800bc36:	b10b      	cbz	r3, 800bc3c <_strtod_l+0x5ec>
 800bc38:	4682      	mov	sl, r0
 800bc3a:	468b      	mov	fp, r1
 800bc3c:	9b04      	ldr	r3, [sp, #16]
 800bc3e:	b1c3      	cbz	r3, 800bc72 <_strtod_l+0x622>
 800bc40:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bc44:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	4659      	mov	r1, fp
 800bc4c:	dd11      	ble.n	800bc72 <_strtod_l+0x622>
 800bc4e:	2b1f      	cmp	r3, #31
 800bc50:	f340 8124 	ble.w	800be9c <_strtod_l+0x84c>
 800bc54:	2b34      	cmp	r3, #52	; 0x34
 800bc56:	bfde      	ittt	le
 800bc58:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bc5c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800bc60:	fa03 f202 	lslle.w	r2, r3, r2
 800bc64:	f04f 0a00 	mov.w	sl, #0
 800bc68:	bfcc      	ite	gt
 800bc6a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bc6e:	ea02 0b01 	andle.w	fp, r2, r1
 800bc72:	2200      	movs	r2, #0
 800bc74:	2300      	movs	r3, #0
 800bc76:	4650      	mov	r0, sl
 800bc78:	4659      	mov	r1, fp
 800bc7a:	f7f4 ff2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d1a2      	bne.n	800bbc8 <_strtod_l+0x578>
 800bc82:	9b07      	ldr	r3, [sp, #28]
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	9908      	ldr	r1, [sp, #32]
 800bc88:	462b      	mov	r3, r5
 800bc8a:	463a      	mov	r2, r7
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	f001 ffc9 	bl	800dc24 <__s2b>
 800bc92:	9007      	str	r0, [sp, #28]
 800bc94:	2800      	cmp	r0, #0
 800bc96:	f43f af1f 	beq.w	800bad8 <_strtod_l+0x488>
 800bc9a:	9b05      	ldr	r3, [sp, #20]
 800bc9c:	1b9e      	subs	r6, r3, r6
 800bc9e:	9b06      	ldr	r3, [sp, #24]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	bfb4      	ite	lt
 800bca4:	4633      	movlt	r3, r6
 800bca6:	2300      	movge	r3, #0
 800bca8:	930c      	str	r3, [sp, #48]	; 0x30
 800bcaa:	9b06      	ldr	r3, [sp, #24]
 800bcac:	2500      	movs	r5, #0
 800bcae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bcb2:	9312      	str	r3, [sp, #72]	; 0x48
 800bcb4:	462e      	mov	r6, r5
 800bcb6:	9b07      	ldr	r3, [sp, #28]
 800bcb8:	4620      	mov	r0, r4
 800bcba:	6859      	ldr	r1, [r3, #4]
 800bcbc:	f001 ff0a 	bl	800dad4 <_Balloc>
 800bcc0:	9005      	str	r0, [sp, #20]
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	f43f af0c 	beq.w	800bae0 <_strtod_l+0x490>
 800bcc8:	9b07      	ldr	r3, [sp, #28]
 800bcca:	691a      	ldr	r2, [r3, #16]
 800bccc:	3202      	adds	r2, #2
 800bcce:	f103 010c 	add.w	r1, r3, #12
 800bcd2:	0092      	lsls	r2, r2, #2
 800bcd4:	300c      	adds	r0, #12
 800bcd6:	f7fe fe28 	bl	800a92a <memcpy>
 800bcda:	ec4b ab10 	vmov	d0, sl, fp
 800bcde:	aa1a      	add	r2, sp, #104	; 0x68
 800bce0:	a919      	add	r1, sp, #100	; 0x64
 800bce2:	4620      	mov	r0, r4
 800bce4:	f002 fae4 	bl	800e2b0 <__d2b>
 800bce8:	ec4b ab18 	vmov	d8, sl, fp
 800bcec:	9018      	str	r0, [sp, #96]	; 0x60
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	f43f aef6 	beq.w	800bae0 <_strtod_l+0x490>
 800bcf4:	2101      	movs	r1, #1
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	f002 f82e 	bl	800dd58 <__i2b>
 800bcfc:	4606      	mov	r6, r0
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	f43f aeee 	beq.w	800bae0 <_strtod_l+0x490>
 800bd04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bd06:	9904      	ldr	r1, [sp, #16]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	bfab      	itete	ge
 800bd0c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bd0e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bd10:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bd12:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800bd16:	bfac      	ite	ge
 800bd18:	eb03 0902 	addge.w	r9, r3, r2
 800bd1c:	1ad7      	sublt	r7, r2, r3
 800bd1e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bd20:	eba3 0801 	sub.w	r8, r3, r1
 800bd24:	4490      	add	r8, r2
 800bd26:	4ba1      	ldr	r3, [pc, #644]	; (800bfac <_strtod_l+0x95c>)
 800bd28:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bd2c:	4598      	cmp	r8, r3
 800bd2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bd32:	f280 80c7 	bge.w	800bec4 <_strtod_l+0x874>
 800bd36:	eba3 0308 	sub.w	r3, r3, r8
 800bd3a:	2b1f      	cmp	r3, #31
 800bd3c:	eba2 0203 	sub.w	r2, r2, r3
 800bd40:	f04f 0101 	mov.w	r1, #1
 800bd44:	f300 80b1 	bgt.w	800beaa <_strtod_l+0x85a>
 800bd48:	fa01 f303 	lsl.w	r3, r1, r3
 800bd4c:	930d      	str	r3, [sp, #52]	; 0x34
 800bd4e:	2300      	movs	r3, #0
 800bd50:	9308      	str	r3, [sp, #32]
 800bd52:	eb09 0802 	add.w	r8, r9, r2
 800bd56:	9b04      	ldr	r3, [sp, #16]
 800bd58:	45c1      	cmp	r9, r8
 800bd5a:	4417      	add	r7, r2
 800bd5c:	441f      	add	r7, r3
 800bd5e:	464b      	mov	r3, r9
 800bd60:	bfa8      	it	ge
 800bd62:	4643      	movge	r3, r8
 800bd64:	42bb      	cmp	r3, r7
 800bd66:	bfa8      	it	ge
 800bd68:	463b      	movge	r3, r7
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	bfc2      	ittt	gt
 800bd6e:	eba8 0803 	subgt.w	r8, r8, r3
 800bd72:	1aff      	subgt	r7, r7, r3
 800bd74:	eba9 0903 	subgt.w	r9, r9, r3
 800bd78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	dd17      	ble.n	800bdae <_strtod_l+0x75e>
 800bd7e:	4631      	mov	r1, r6
 800bd80:	461a      	mov	r2, r3
 800bd82:	4620      	mov	r0, r4
 800bd84:	f002 f8a8 	bl	800ded8 <__pow5mult>
 800bd88:	4606      	mov	r6, r0
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	f43f aea8 	beq.w	800bae0 <_strtod_l+0x490>
 800bd90:	4601      	mov	r1, r0
 800bd92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bd94:	4620      	mov	r0, r4
 800bd96:	f001 fff5 	bl	800dd84 <__multiply>
 800bd9a:	900b      	str	r0, [sp, #44]	; 0x2c
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	f43f ae9f 	beq.w	800bae0 <_strtod_l+0x490>
 800bda2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bda4:	4620      	mov	r0, r4
 800bda6:	f001 fed5 	bl	800db54 <_Bfree>
 800bdaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdac:	9318      	str	r3, [sp, #96]	; 0x60
 800bdae:	f1b8 0f00 	cmp.w	r8, #0
 800bdb2:	f300 808c 	bgt.w	800bece <_strtod_l+0x87e>
 800bdb6:	9b06      	ldr	r3, [sp, #24]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	dd08      	ble.n	800bdce <_strtod_l+0x77e>
 800bdbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bdbe:	9905      	ldr	r1, [sp, #20]
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	f002 f889 	bl	800ded8 <__pow5mult>
 800bdc6:	9005      	str	r0, [sp, #20]
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	f43f ae89 	beq.w	800bae0 <_strtod_l+0x490>
 800bdce:	2f00      	cmp	r7, #0
 800bdd0:	dd08      	ble.n	800bde4 <_strtod_l+0x794>
 800bdd2:	9905      	ldr	r1, [sp, #20]
 800bdd4:	463a      	mov	r2, r7
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f002 f8d8 	bl	800df8c <__lshift>
 800bddc:	9005      	str	r0, [sp, #20]
 800bdde:	2800      	cmp	r0, #0
 800bde0:	f43f ae7e 	beq.w	800bae0 <_strtod_l+0x490>
 800bde4:	f1b9 0f00 	cmp.w	r9, #0
 800bde8:	dd08      	ble.n	800bdfc <_strtod_l+0x7ac>
 800bdea:	4631      	mov	r1, r6
 800bdec:	464a      	mov	r2, r9
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f002 f8cc 	bl	800df8c <__lshift>
 800bdf4:	4606      	mov	r6, r0
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	f43f ae72 	beq.w	800bae0 <_strtod_l+0x490>
 800bdfc:	9a05      	ldr	r2, [sp, #20]
 800bdfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800be00:	4620      	mov	r0, r4
 800be02:	f002 f94f 	bl	800e0a4 <__mdiff>
 800be06:	4605      	mov	r5, r0
 800be08:	2800      	cmp	r0, #0
 800be0a:	f43f ae69 	beq.w	800bae0 <_strtod_l+0x490>
 800be0e:	68c3      	ldr	r3, [r0, #12]
 800be10:	930b      	str	r3, [sp, #44]	; 0x2c
 800be12:	2300      	movs	r3, #0
 800be14:	60c3      	str	r3, [r0, #12]
 800be16:	4631      	mov	r1, r6
 800be18:	f002 f928 	bl	800e06c <__mcmp>
 800be1c:	2800      	cmp	r0, #0
 800be1e:	da60      	bge.n	800bee2 <_strtod_l+0x892>
 800be20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be22:	ea53 030a 	orrs.w	r3, r3, sl
 800be26:	f040 8082 	bne.w	800bf2e <_strtod_l+0x8de>
 800be2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d17d      	bne.n	800bf2e <_strtod_l+0x8de>
 800be32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be36:	0d1b      	lsrs	r3, r3, #20
 800be38:	051b      	lsls	r3, r3, #20
 800be3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800be3e:	d976      	bls.n	800bf2e <_strtod_l+0x8de>
 800be40:	696b      	ldr	r3, [r5, #20]
 800be42:	b913      	cbnz	r3, 800be4a <_strtod_l+0x7fa>
 800be44:	692b      	ldr	r3, [r5, #16]
 800be46:	2b01      	cmp	r3, #1
 800be48:	dd71      	ble.n	800bf2e <_strtod_l+0x8de>
 800be4a:	4629      	mov	r1, r5
 800be4c:	2201      	movs	r2, #1
 800be4e:	4620      	mov	r0, r4
 800be50:	f002 f89c 	bl	800df8c <__lshift>
 800be54:	4631      	mov	r1, r6
 800be56:	4605      	mov	r5, r0
 800be58:	f002 f908 	bl	800e06c <__mcmp>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	dd66      	ble.n	800bf2e <_strtod_l+0x8de>
 800be60:	9904      	ldr	r1, [sp, #16]
 800be62:	4a53      	ldr	r2, [pc, #332]	; (800bfb0 <_strtod_l+0x960>)
 800be64:	465b      	mov	r3, fp
 800be66:	2900      	cmp	r1, #0
 800be68:	f000 8081 	beq.w	800bf6e <_strtod_l+0x91e>
 800be6c:	ea02 010b 	and.w	r1, r2, fp
 800be70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800be74:	dc7b      	bgt.n	800bf6e <_strtod_l+0x91e>
 800be76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800be7a:	f77f aea9 	ble.w	800bbd0 <_strtod_l+0x580>
 800be7e:	4b4d      	ldr	r3, [pc, #308]	; (800bfb4 <_strtod_l+0x964>)
 800be80:	4650      	mov	r0, sl
 800be82:	4659      	mov	r1, fp
 800be84:	2200      	movs	r2, #0
 800be86:	f7f4 fbbf 	bl	8000608 <__aeabi_dmul>
 800be8a:	460b      	mov	r3, r1
 800be8c:	4303      	orrs	r3, r0
 800be8e:	bf08      	it	eq
 800be90:	2322      	moveq	r3, #34	; 0x22
 800be92:	4682      	mov	sl, r0
 800be94:	468b      	mov	fp, r1
 800be96:	bf08      	it	eq
 800be98:	6023      	streq	r3, [r4, #0]
 800be9a:	e62b      	b.n	800baf4 <_strtod_l+0x4a4>
 800be9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bea0:	fa02 f303 	lsl.w	r3, r2, r3
 800bea4:	ea03 0a0a 	and.w	sl, r3, sl
 800bea8:	e6e3      	b.n	800bc72 <_strtod_l+0x622>
 800beaa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800beae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800beb2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800beb6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800beba:	fa01 f308 	lsl.w	r3, r1, r8
 800bebe:	9308      	str	r3, [sp, #32]
 800bec0:	910d      	str	r1, [sp, #52]	; 0x34
 800bec2:	e746      	b.n	800bd52 <_strtod_l+0x702>
 800bec4:	2300      	movs	r3, #0
 800bec6:	9308      	str	r3, [sp, #32]
 800bec8:	2301      	movs	r3, #1
 800beca:	930d      	str	r3, [sp, #52]	; 0x34
 800becc:	e741      	b.n	800bd52 <_strtod_l+0x702>
 800bece:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bed0:	4642      	mov	r2, r8
 800bed2:	4620      	mov	r0, r4
 800bed4:	f002 f85a 	bl	800df8c <__lshift>
 800bed8:	9018      	str	r0, [sp, #96]	; 0x60
 800beda:	2800      	cmp	r0, #0
 800bedc:	f47f af6b 	bne.w	800bdb6 <_strtod_l+0x766>
 800bee0:	e5fe      	b.n	800bae0 <_strtod_l+0x490>
 800bee2:	465f      	mov	r7, fp
 800bee4:	d16e      	bne.n	800bfc4 <_strtod_l+0x974>
 800bee6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bee8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800beec:	b342      	cbz	r2, 800bf40 <_strtod_l+0x8f0>
 800beee:	4a32      	ldr	r2, [pc, #200]	; (800bfb8 <_strtod_l+0x968>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d128      	bne.n	800bf46 <_strtod_l+0x8f6>
 800bef4:	9b04      	ldr	r3, [sp, #16]
 800bef6:	4651      	mov	r1, sl
 800bef8:	b1eb      	cbz	r3, 800bf36 <_strtod_l+0x8e6>
 800befa:	4b2d      	ldr	r3, [pc, #180]	; (800bfb0 <_strtod_l+0x960>)
 800befc:	403b      	ands	r3, r7
 800befe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bf02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf06:	d819      	bhi.n	800bf3c <_strtod_l+0x8ec>
 800bf08:	0d1b      	lsrs	r3, r3, #20
 800bf0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bf0e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf12:	4299      	cmp	r1, r3
 800bf14:	d117      	bne.n	800bf46 <_strtod_l+0x8f6>
 800bf16:	4b29      	ldr	r3, [pc, #164]	; (800bfbc <_strtod_l+0x96c>)
 800bf18:	429f      	cmp	r7, r3
 800bf1a:	d102      	bne.n	800bf22 <_strtod_l+0x8d2>
 800bf1c:	3101      	adds	r1, #1
 800bf1e:	f43f addf 	beq.w	800bae0 <_strtod_l+0x490>
 800bf22:	4b23      	ldr	r3, [pc, #140]	; (800bfb0 <_strtod_l+0x960>)
 800bf24:	403b      	ands	r3, r7
 800bf26:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bf2a:	f04f 0a00 	mov.w	sl, #0
 800bf2e:	9b04      	ldr	r3, [sp, #16]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d1a4      	bne.n	800be7e <_strtod_l+0x82e>
 800bf34:	e5de      	b.n	800baf4 <_strtod_l+0x4a4>
 800bf36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf3a:	e7ea      	b.n	800bf12 <_strtod_l+0x8c2>
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	e7e8      	b.n	800bf12 <_strtod_l+0x8c2>
 800bf40:	ea53 030a 	orrs.w	r3, r3, sl
 800bf44:	d08c      	beq.n	800be60 <_strtod_l+0x810>
 800bf46:	9b08      	ldr	r3, [sp, #32]
 800bf48:	b1db      	cbz	r3, 800bf82 <_strtod_l+0x932>
 800bf4a:	423b      	tst	r3, r7
 800bf4c:	d0ef      	beq.n	800bf2e <_strtod_l+0x8de>
 800bf4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf50:	9a04      	ldr	r2, [sp, #16]
 800bf52:	4650      	mov	r0, sl
 800bf54:	4659      	mov	r1, fp
 800bf56:	b1c3      	cbz	r3, 800bf8a <_strtod_l+0x93a>
 800bf58:	f7ff fb5b 	bl	800b612 <sulp>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	460b      	mov	r3, r1
 800bf60:	ec51 0b18 	vmov	r0, r1, d8
 800bf64:	f7f4 f99a 	bl	800029c <__adddf3>
 800bf68:	4682      	mov	sl, r0
 800bf6a:	468b      	mov	fp, r1
 800bf6c:	e7df      	b.n	800bf2e <_strtod_l+0x8de>
 800bf6e:	4013      	ands	r3, r2
 800bf70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bf74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bf78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bf7c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bf80:	e7d5      	b.n	800bf2e <_strtod_l+0x8de>
 800bf82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf84:	ea13 0f0a 	tst.w	r3, sl
 800bf88:	e7e0      	b.n	800bf4c <_strtod_l+0x8fc>
 800bf8a:	f7ff fb42 	bl	800b612 <sulp>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	460b      	mov	r3, r1
 800bf92:	ec51 0b18 	vmov	r0, r1, d8
 800bf96:	f7f4 f97f 	bl	8000298 <__aeabi_dsub>
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	4682      	mov	sl, r0
 800bfa0:	468b      	mov	fp, r1
 800bfa2:	f7f4 fd99 	bl	8000ad8 <__aeabi_dcmpeq>
 800bfa6:	2800      	cmp	r0, #0
 800bfa8:	d0c1      	beq.n	800bf2e <_strtod_l+0x8de>
 800bfaa:	e611      	b.n	800bbd0 <_strtod_l+0x580>
 800bfac:	fffffc02 	.word	0xfffffc02
 800bfb0:	7ff00000 	.word	0x7ff00000
 800bfb4:	39500000 	.word	0x39500000
 800bfb8:	000fffff 	.word	0x000fffff
 800bfbc:	7fefffff 	.word	0x7fefffff
 800bfc0:	0800f3d8 	.word	0x0800f3d8
 800bfc4:	4631      	mov	r1, r6
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	f002 f9ce 	bl	800e368 <__ratio>
 800bfcc:	ec59 8b10 	vmov	r8, r9, d0
 800bfd0:	ee10 0a10 	vmov	r0, s0
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bfda:	4649      	mov	r1, r9
 800bfdc:	f7f4 fd90 	bl	8000b00 <__aeabi_dcmple>
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	d07a      	beq.n	800c0da <_strtod_l+0xa8a>
 800bfe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d04a      	beq.n	800c080 <_strtod_l+0xa30>
 800bfea:	4b95      	ldr	r3, [pc, #596]	; (800c240 <_strtod_l+0xbf0>)
 800bfec:	2200      	movs	r2, #0
 800bfee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bff2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c240 <_strtod_l+0xbf0>
 800bff6:	f04f 0800 	mov.w	r8, #0
 800bffa:	4b92      	ldr	r3, [pc, #584]	; (800c244 <_strtod_l+0xbf4>)
 800bffc:	403b      	ands	r3, r7
 800bffe:	930d      	str	r3, [sp, #52]	; 0x34
 800c000:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c002:	4b91      	ldr	r3, [pc, #580]	; (800c248 <_strtod_l+0xbf8>)
 800c004:	429a      	cmp	r2, r3
 800c006:	f040 80b0 	bne.w	800c16a <_strtod_l+0xb1a>
 800c00a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c00e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c012:	ec4b ab10 	vmov	d0, sl, fp
 800c016:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c01a:	f002 f8cd 	bl	800e1b8 <__ulp>
 800c01e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c022:	ec53 2b10 	vmov	r2, r3, d0
 800c026:	f7f4 faef 	bl	8000608 <__aeabi_dmul>
 800c02a:	4652      	mov	r2, sl
 800c02c:	465b      	mov	r3, fp
 800c02e:	f7f4 f935 	bl	800029c <__adddf3>
 800c032:	460b      	mov	r3, r1
 800c034:	4983      	ldr	r1, [pc, #524]	; (800c244 <_strtod_l+0xbf4>)
 800c036:	4a85      	ldr	r2, [pc, #532]	; (800c24c <_strtod_l+0xbfc>)
 800c038:	4019      	ands	r1, r3
 800c03a:	4291      	cmp	r1, r2
 800c03c:	4682      	mov	sl, r0
 800c03e:	d960      	bls.n	800c102 <_strtod_l+0xab2>
 800c040:	ee18 3a90 	vmov	r3, s17
 800c044:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c048:	4293      	cmp	r3, r2
 800c04a:	d104      	bne.n	800c056 <_strtod_l+0xa06>
 800c04c:	ee18 3a10 	vmov	r3, s16
 800c050:	3301      	adds	r3, #1
 800c052:	f43f ad45 	beq.w	800bae0 <_strtod_l+0x490>
 800c056:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c258 <_strtod_l+0xc08>
 800c05a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c05e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c060:	4620      	mov	r0, r4
 800c062:	f001 fd77 	bl	800db54 <_Bfree>
 800c066:	9905      	ldr	r1, [sp, #20]
 800c068:	4620      	mov	r0, r4
 800c06a:	f001 fd73 	bl	800db54 <_Bfree>
 800c06e:	4631      	mov	r1, r6
 800c070:	4620      	mov	r0, r4
 800c072:	f001 fd6f 	bl	800db54 <_Bfree>
 800c076:	4629      	mov	r1, r5
 800c078:	4620      	mov	r0, r4
 800c07a:	f001 fd6b 	bl	800db54 <_Bfree>
 800c07e:	e61a      	b.n	800bcb6 <_strtod_l+0x666>
 800c080:	f1ba 0f00 	cmp.w	sl, #0
 800c084:	d11b      	bne.n	800c0be <_strtod_l+0xa6e>
 800c086:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c08a:	b9f3      	cbnz	r3, 800c0ca <_strtod_l+0xa7a>
 800c08c:	4b6c      	ldr	r3, [pc, #432]	; (800c240 <_strtod_l+0xbf0>)
 800c08e:	2200      	movs	r2, #0
 800c090:	4640      	mov	r0, r8
 800c092:	4649      	mov	r1, r9
 800c094:	f7f4 fd2a 	bl	8000aec <__aeabi_dcmplt>
 800c098:	b9d0      	cbnz	r0, 800c0d0 <_strtod_l+0xa80>
 800c09a:	4640      	mov	r0, r8
 800c09c:	4649      	mov	r1, r9
 800c09e:	4b6c      	ldr	r3, [pc, #432]	; (800c250 <_strtod_l+0xc00>)
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	f7f4 fab1 	bl	8000608 <__aeabi_dmul>
 800c0a6:	4680      	mov	r8, r0
 800c0a8:	4689      	mov	r9, r1
 800c0aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c0ae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c0b2:	9315      	str	r3, [sp, #84]	; 0x54
 800c0b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c0b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c0bc:	e79d      	b.n	800bffa <_strtod_l+0x9aa>
 800c0be:	f1ba 0f01 	cmp.w	sl, #1
 800c0c2:	d102      	bne.n	800c0ca <_strtod_l+0xa7a>
 800c0c4:	2f00      	cmp	r7, #0
 800c0c6:	f43f ad83 	beq.w	800bbd0 <_strtod_l+0x580>
 800c0ca:	4b62      	ldr	r3, [pc, #392]	; (800c254 <_strtod_l+0xc04>)
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	e78e      	b.n	800bfee <_strtod_l+0x99e>
 800c0d0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c250 <_strtod_l+0xc00>
 800c0d4:	f04f 0800 	mov.w	r8, #0
 800c0d8:	e7e7      	b.n	800c0aa <_strtod_l+0xa5a>
 800c0da:	4b5d      	ldr	r3, [pc, #372]	; (800c250 <_strtod_l+0xc00>)
 800c0dc:	4640      	mov	r0, r8
 800c0de:	4649      	mov	r1, r9
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f7f4 fa91 	bl	8000608 <__aeabi_dmul>
 800c0e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0e8:	4680      	mov	r8, r0
 800c0ea:	4689      	mov	r9, r1
 800c0ec:	b933      	cbnz	r3, 800c0fc <_strtod_l+0xaac>
 800c0ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0f2:	900e      	str	r0, [sp, #56]	; 0x38
 800c0f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c0fa:	e7dd      	b.n	800c0b8 <_strtod_l+0xa68>
 800c0fc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c100:	e7f9      	b.n	800c0f6 <_strtod_l+0xaa6>
 800c102:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c106:	9b04      	ldr	r3, [sp, #16]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d1a8      	bne.n	800c05e <_strtod_l+0xa0e>
 800c10c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c110:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c112:	0d1b      	lsrs	r3, r3, #20
 800c114:	051b      	lsls	r3, r3, #20
 800c116:	429a      	cmp	r2, r3
 800c118:	d1a1      	bne.n	800c05e <_strtod_l+0xa0e>
 800c11a:	4640      	mov	r0, r8
 800c11c:	4649      	mov	r1, r9
 800c11e:	f7f4 fdd3 	bl	8000cc8 <__aeabi_d2lz>
 800c122:	f7f4 fa43 	bl	80005ac <__aeabi_l2d>
 800c126:	4602      	mov	r2, r0
 800c128:	460b      	mov	r3, r1
 800c12a:	4640      	mov	r0, r8
 800c12c:	4649      	mov	r1, r9
 800c12e:	f7f4 f8b3 	bl	8000298 <__aeabi_dsub>
 800c132:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c134:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c138:	ea43 030a 	orr.w	r3, r3, sl
 800c13c:	4313      	orrs	r3, r2
 800c13e:	4680      	mov	r8, r0
 800c140:	4689      	mov	r9, r1
 800c142:	d055      	beq.n	800c1f0 <_strtod_l+0xba0>
 800c144:	a336      	add	r3, pc, #216	; (adr r3, 800c220 <_strtod_l+0xbd0>)
 800c146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14a:	f7f4 fccf 	bl	8000aec <__aeabi_dcmplt>
 800c14e:	2800      	cmp	r0, #0
 800c150:	f47f acd0 	bne.w	800baf4 <_strtod_l+0x4a4>
 800c154:	a334      	add	r3, pc, #208	; (adr r3, 800c228 <_strtod_l+0xbd8>)
 800c156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15a:	4640      	mov	r0, r8
 800c15c:	4649      	mov	r1, r9
 800c15e:	f7f4 fce3 	bl	8000b28 <__aeabi_dcmpgt>
 800c162:	2800      	cmp	r0, #0
 800c164:	f43f af7b 	beq.w	800c05e <_strtod_l+0xa0e>
 800c168:	e4c4      	b.n	800baf4 <_strtod_l+0x4a4>
 800c16a:	9b04      	ldr	r3, [sp, #16]
 800c16c:	b333      	cbz	r3, 800c1bc <_strtod_l+0xb6c>
 800c16e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c170:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c174:	d822      	bhi.n	800c1bc <_strtod_l+0xb6c>
 800c176:	a32e      	add	r3, pc, #184	; (adr r3, 800c230 <_strtod_l+0xbe0>)
 800c178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17c:	4640      	mov	r0, r8
 800c17e:	4649      	mov	r1, r9
 800c180:	f7f4 fcbe 	bl	8000b00 <__aeabi_dcmple>
 800c184:	b1a0      	cbz	r0, 800c1b0 <_strtod_l+0xb60>
 800c186:	4649      	mov	r1, r9
 800c188:	4640      	mov	r0, r8
 800c18a:	f7f4 fd15 	bl	8000bb8 <__aeabi_d2uiz>
 800c18e:	2801      	cmp	r0, #1
 800c190:	bf38      	it	cc
 800c192:	2001      	movcc	r0, #1
 800c194:	f7f4 f9be 	bl	8000514 <__aeabi_ui2d>
 800c198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c19a:	4680      	mov	r8, r0
 800c19c:	4689      	mov	r9, r1
 800c19e:	bb23      	cbnz	r3, 800c1ea <_strtod_l+0xb9a>
 800c1a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c1a4:	9010      	str	r0, [sp, #64]	; 0x40
 800c1a6:	9311      	str	r3, [sp, #68]	; 0x44
 800c1a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c1ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c1b8:	1a9b      	subs	r3, r3, r2
 800c1ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c1bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c1c0:	eeb0 0a48 	vmov.f32	s0, s16
 800c1c4:	eef0 0a68 	vmov.f32	s1, s17
 800c1c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c1cc:	f001 fff4 	bl	800e1b8 <__ulp>
 800c1d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c1d4:	ec53 2b10 	vmov	r2, r3, d0
 800c1d8:	f7f4 fa16 	bl	8000608 <__aeabi_dmul>
 800c1dc:	ec53 2b18 	vmov	r2, r3, d8
 800c1e0:	f7f4 f85c 	bl	800029c <__adddf3>
 800c1e4:	4682      	mov	sl, r0
 800c1e6:	468b      	mov	fp, r1
 800c1e8:	e78d      	b.n	800c106 <_strtod_l+0xab6>
 800c1ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c1ee:	e7db      	b.n	800c1a8 <_strtod_l+0xb58>
 800c1f0:	a311      	add	r3, pc, #68	; (adr r3, 800c238 <_strtod_l+0xbe8>)
 800c1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f6:	f7f4 fc79 	bl	8000aec <__aeabi_dcmplt>
 800c1fa:	e7b2      	b.n	800c162 <_strtod_l+0xb12>
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	930a      	str	r3, [sp, #40]	; 0x28
 800c200:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c202:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c204:	6013      	str	r3, [r2, #0]
 800c206:	f7ff ba6b 	b.w	800b6e0 <_strtod_l+0x90>
 800c20a:	2a65      	cmp	r2, #101	; 0x65
 800c20c:	f43f ab5f 	beq.w	800b8ce <_strtod_l+0x27e>
 800c210:	2a45      	cmp	r2, #69	; 0x45
 800c212:	f43f ab5c 	beq.w	800b8ce <_strtod_l+0x27e>
 800c216:	2301      	movs	r3, #1
 800c218:	f7ff bb94 	b.w	800b944 <_strtod_l+0x2f4>
 800c21c:	f3af 8000 	nop.w
 800c220:	94a03595 	.word	0x94a03595
 800c224:	3fdfffff 	.word	0x3fdfffff
 800c228:	35afe535 	.word	0x35afe535
 800c22c:	3fe00000 	.word	0x3fe00000
 800c230:	ffc00000 	.word	0xffc00000
 800c234:	41dfffff 	.word	0x41dfffff
 800c238:	94a03595 	.word	0x94a03595
 800c23c:	3fcfffff 	.word	0x3fcfffff
 800c240:	3ff00000 	.word	0x3ff00000
 800c244:	7ff00000 	.word	0x7ff00000
 800c248:	7fe00000 	.word	0x7fe00000
 800c24c:	7c9fffff 	.word	0x7c9fffff
 800c250:	3fe00000 	.word	0x3fe00000
 800c254:	bff00000 	.word	0xbff00000
 800c258:	7fefffff 	.word	0x7fefffff

0800c25c <strtod>:
 800c25c:	460a      	mov	r2, r1
 800c25e:	4601      	mov	r1, r0
 800c260:	4802      	ldr	r0, [pc, #8]	; (800c26c <strtod+0x10>)
 800c262:	4b03      	ldr	r3, [pc, #12]	; (800c270 <strtod+0x14>)
 800c264:	6800      	ldr	r0, [r0, #0]
 800c266:	f7ff b9f3 	b.w	800b650 <_strtod_l>
 800c26a:	bf00      	nop
 800c26c:	20000010 	.word	0x20000010
 800c270:	20000078 	.word	0x20000078

0800c274 <__swbuf_r>:
 800c274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c276:	460e      	mov	r6, r1
 800c278:	4614      	mov	r4, r2
 800c27a:	4605      	mov	r5, r0
 800c27c:	b118      	cbz	r0, 800c286 <__swbuf_r+0x12>
 800c27e:	6983      	ldr	r3, [r0, #24]
 800c280:	b90b      	cbnz	r3, 800c286 <__swbuf_r+0x12>
 800c282:	f7fe fa8d 	bl	800a7a0 <__sinit>
 800c286:	4b21      	ldr	r3, [pc, #132]	; (800c30c <__swbuf_r+0x98>)
 800c288:	429c      	cmp	r4, r3
 800c28a:	d12b      	bne.n	800c2e4 <__swbuf_r+0x70>
 800c28c:	686c      	ldr	r4, [r5, #4]
 800c28e:	69a3      	ldr	r3, [r4, #24]
 800c290:	60a3      	str	r3, [r4, #8]
 800c292:	89a3      	ldrh	r3, [r4, #12]
 800c294:	071a      	lsls	r2, r3, #28
 800c296:	d52f      	bpl.n	800c2f8 <__swbuf_r+0x84>
 800c298:	6923      	ldr	r3, [r4, #16]
 800c29a:	b36b      	cbz	r3, 800c2f8 <__swbuf_r+0x84>
 800c29c:	6923      	ldr	r3, [r4, #16]
 800c29e:	6820      	ldr	r0, [r4, #0]
 800c2a0:	1ac0      	subs	r0, r0, r3
 800c2a2:	6963      	ldr	r3, [r4, #20]
 800c2a4:	b2f6      	uxtb	r6, r6
 800c2a6:	4283      	cmp	r3, r0
 800c2a8:	4637      	mov	r7, r6
 800c2aa:	dc04      	bgt.n	800c2b6 <__swbuf_r+0x42>
 800c2ac:	4621      	mov	r1, r4
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	f000 ffc2 	bl	800d238 <_fflush_r>
 800c2b4:	bb30      	cbnz	r0, 800c304 <__swbuf_r+0x90>
 800c2b6:	68a3      	ldr	r3, [r4, #8]
 800c2b8:	3b01      	subs	r3, #1
 800c2ba:	60a3      	str	r3, [r4, #8]
 800c2bc:	6823      	ldr	r3, [r4, #0]
 800c2be:	1c5a      	adds	r2, r3, #1
 800c2c0:	6022      	str	r2, [r4, #0]
 800c2c2:	701e      	strb	r6, [r3, #0]
 800c2c4:	6963      	ldr	r3, [r4, #20]
 800c2c6:	3001      	adds	r0, #1
 800c2c8:	4283      	cmp	r3, r0
 800c2ca:	d004      	beq.n	800c2d6 <__swbuf_r+0x62>
 800c2cc:	89a3      	ldrh	r3, [r4, #12]
 800c2ce:	07db      	lsls	r3, r3, #31
 800c2d0:	d506      	bpl.n	800c2e0 <__swbuf_r+0x6c>
 800c2d2:	2e0a      	cmp	r6, #10
 800c2d4:	d104      	bne.n	800c2e0 <__swbuf_r+0x6c>
 800c2d6:	4621      	mov	r1, r4
 800c2d8:	4628      	mov	r0, r5
 800c2da:	f000 ffad 	bl	800d238 <_fflush_r>
 800c2de:	b988      	cbnz	r0, 800c304 <__swbuf_r+0x90>
 800c2e0:	4638      	mov	r0, r7
 800c2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2e4:	4b0a      	ldr	r3, [pc, #40]	; (800c310 <__swbuf_r+0x9c>)
 800c2e6:	429c      	cmp	r4, r3
 800c2e8:	d101      	bne.n	800c2ee <__swbuf_r+0x7a>
 800c2ea:	68ac      	ldr	r4, [r5, #8]
 800c2ec:	e7cf      	b.n	800c28e <__swbuf_r+0x1a>
 800c2ee:	4b09      	ldr	r3, [pc, #36]	; (800c314 <__swbuf_r+0xa0>)
 800c2f0:	429c      	cmp	r4, r3
 800c2f2:	bf08      	it	eq
 800c2f4:	68ec      	ldreq	r4, [r5, #12]
 800c2f6:	e7ca      	b.n	800c28e <__swbuf_r+0x1a>
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	f000 f81e 	bl	800c33c <__swsetup_r>
 800c300:	2800      	cmp	r0, #0
 800c302:	d0cb      	beq.n	800c29c <__swbuf_r+0x28>
 800c304:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c308:	e7ea      	b.n	800c2e0 <__swbuf_r+0x6c>
 800c30a:	bf00      	nop
 800c30c:	0800f338 	.word	0x0800f338
 800c310:	0800f358 	.word	0x0800f358
 800c314:	0800f318 	.word	0x0800f318

0800c318 <_write_r>:
 800c318:	b538      	push	{r3, r4, r5, lr}
 800c31a:	4d07      	ldr	r5, [pc, #28]	; (800c338 <_write_r+0x20>)
 800c31c:	4604      	mov	r4, r0
 800c31e:	4608      	mov	r0, r1
 800c320:	4611      	mov	r1, r2
 800c322:	2200      	movs	r2, #0
 800c324:	602a      	str	r2, [r5, #0]
 800c326:	461a      	mov	r2, r3
 800c328:	f7f6 f989 	bl	800263e <_write>
 800c32c:	1c43      	adds	r3, r0, #1
 800c32e:	d102      	bne.n	800c336 <_write_r+0x1e>
 800c330:	682b      	ldr	r3, [r5, #0]
 800c332:	b103      	cbz	r3, 800c336 <_write_r+0x1e>
 800c334:	6023      	str	r3, [r4, #0]
 800c336:	bd38      	pop	{r3, r4, r5, pc}
 800c338:	20004908 	.word	0x20004908

0800c33c <__swsetup_r>:
 800c33c:	4b32      	ldr	r3, [pc, #200]	; (800c408 <__swsetup_r+0xcc>)
 800c33e:	b570      	push	{r4, r5, r6, lr}
 800c340:	681d      	ldr	r5, [r3, #0]
 800c342:	4606      	mov	r6, r0
 800c344:	460c      	mov	r4, r1
 800c346:	b125      	cbz	r5, 800c352 <__swsetup_r+0x16>
 800c348:	69ab      	ldr	r3, [r5, #24]
 800c34a:	b913      	cbnz	r3, 800c352 <__swsetup_r+0x16>
 800c34c:	4628      	mov	r0, r5
 800c34e:	f7fe fa27 	bl	800a7a0 <__sinit>
 800c352:	4b2e      	ldr	r3, [pc, #184]	; (800c40c <__swsetup_r+0xd0>)
 800c354:	429c      	cmp	r4, r3
 800c356:	d10f      	bne.n	800c378 <__swsetup_r+0x3c>
 800c358:	686c      	ldr	r4, [r5, #4]
 800c35a:	89a3      	ldrh	r3, [r4, #12]
 800c35c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c360:	0719      	lsls	r1, r3, #28
 800c362:	d42c      	bmi.n	800c3be <__swsetup_r+0x82>
 800c364:	06dd      	lsls	r5, r3, #27
 800c366:	d411      	bmi.n	800c38c <__swsetup_r+0x50>
 800c368:	2309      	movs	r3, #9
 800c36a:	6033      	str	r3, [r6, #0]
 800c36c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c370:	81a3      	strh	r3, [r4, #12]
 800c372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c376:	e03e      	b.n	800c3f6 <__swsetup_r+0xba>
 800c378:	4b25      	ldr	r3, [pc, #148]	; (800c410 <__swsetup_r+0xd4>)
 800c37a:	429c      	cmp	r4, r3
 800c37c:	d101      	bne.n	800c382 <__swsetup_r+0x46>
 800c37e:	68ac      	ldr	r4, [r5, #8]
 800c380:	e7eb      	b.n	800c35a <__swsetup_r+0x1e>
 800c382:	4b24      	ldr	r3, [pc, #144]	; (800c414 <__swsetup_r+0xd8>)
 800c384:	429c      	cmp	r4, r3
 800c386:	bf08      	it	eq
 800c388:	68ec      	ldreq	r4, [r5, #12]
 800c38a:	e7e6      	b.n	800c35a <__swsetup_r+0x1e>
 800c38c:	0758      	lsls	r0, r3, #29
 800c38e:	d512      	bpl.n	800c3b6 <__swsetup_r+0x7a>
 800c390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c392:	b141      	cbz	r1, 800c3a6 <__swsetup_r+0x6a>
 800c394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c398:	4299      	cmp	r1, r3
 800c39a:	d002      	beq.n	800c3a2 <__swsetup_r+0x66>
 800c39c:	4630      	mov	r0, r6
 800c39e:	f002 f871 	bl	800e484 <_free_r>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	6363      	str	r3, [r4, #52]	; 0x34
 800c3a6:	89a3      	ldrh	r3, [r4, #12]
 800c3a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c3ac:	81a3      	strh	r3, [r4, #12]
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	6063      	str	r3, [r4, #4]
 800c3b2:	6923      	ldr	r3, [r4, #16]
 800c3b4:	6023      	str	r3, [r4, #0]
 800c3b6:	89a3      	ldrh	r3, [r4, #12]
 800c3b8:	f043 0308 	orr.w	r3, r3, #8
 800c3bc:	81a3      	strh	r3, [r4, #12]
 800c3be:	6923      	ldr	r3, [r4, #16]
 800c3c0:	b94b      	cbnz	r3, 800c3d6 <__swsetup_r+0x9a>
 800c3c2:	89a3      	ldrh	r3, [r4, #12]
 800c3c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c3c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3cc:	d003      	beq.n	800c3d6 <__swsetup_r+0x9a>
 800c3ce:	4621      	mov	r1, r4
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	f001 fb19 	bl	800da08 <__smakebuf_r>
 800c3d6:	89a0      	ldrh	r0, [r4, #12]
 800c3d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3dc:	f010 0301 	ands.w	r3, r0, #1
 800c3e0:	d00a      	beq.n	800c3f8 <__swsetup_r+0xbc>
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	60a3      	str	r3, [r4, #8]
 800c3e6:	6963      	ldr	r3, [r4, #20]
 800c3e8:	425b      	negs	r3, r3
 800c3ea:	61a3      	str	r3, [r4, #24]
 800c3ec:	6923      	ldr	r3, [r4, #16]
 800c3ee:	b943      	cbnz	r3, 800c402 <__swsetup_r+0xc6>
 800c3f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c3f4:	d1ba      	bne.n	800c36c <__swsetup_r+0x30>
 800c3f6:	bd70      	pop	{r4, r5, r6, pc}
 800c3f8:	0781      	lsls	r1, r0, #30
 800c3fa:	bf58      	it	pl
 800c3fc:	6963      	ldrpl	r3, [r4, #20]
 800c3fe:	60a3      	str	r3, [r4, #8]
 800c400:	e7f4      	b.n	800c3ec <__swsetup_r+0xb0>
 800c402:	2000      	movs	r0, #0
 800c404:	e7f7      	b.n	800c3f6 <__swsetup_r+0xba>
 800c406:	bf00      	nop
 800c408:	20000010 	.word	0x20000010
 800c40c:	0800f338 	.word	0x0800f338
 800c410:	0800f358 	.word	0x0800f358
 800c414:	0800f318 	.word	0x0800f318

0800c418 <_close_r>:
 800c418:	b538      	push	{r3, r4, r5, lr}
 800c41a:	4d06      	ldr	r5, [pc, #24]	; (800c434 <_close_r+0x1c>)
 800c41c:	2300      	movs	r3, #0
 800c41e:	4604      	mov	r4, r0
 800c420:	4608      	mov	r0, r1
 800c422:	602b      	str	r3, [r5, #0]
 800c424:	f7f6 f927 	bl	8002676 <_close>
 800c428:	1c43      	adds	r3, r0, #1
 800c42a:	d102      	bne.n	800c432 <_close_r+0x1a>
 800c42c:	682b      	ldr	r3, [r5, #0]
 800c42e:	b103      	cbz	r3, 800c432 <_close_r+0x1a>
 800c430:	6023      	str	r3, [r4, #0]
 800c432:	bd38      	pop	{r3, r4, r5, pc}
 800c434:	20004908 	.word	0x20004908

0800c438 <quorem>:
 800c438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c43c:	6903      	ldr	r3, [r0, #16]
 800c43e:	690c      	ldr	r4, [r1, #16]
 800c440:	42a3      	cmp	r3, r4
 800c442:	4607      	mov	r7, r0
 800c444:	f2c0 8081 	blt.w	800c54a <quorem+0x112>
 800c448:	3c01      	subs	r4, #1
 800c44a:	f101 0814 	add.w	r8, r1, #20
 800c44e:	f100 0514 	add.w	r5, r0, #20
 800c452:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c456:	9301      	str	r3, [sp, #4]
 800c458:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c45c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c460:	3301      	adds	r3, #1
 800c462:	429a      	cmp	r2, r3
 800c464:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c468:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c46c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c470:	d331      	bcc.n	800c4d6 <quorem+0x9e>
 800c472:	f04f 0e00 	mov.w	lr, #0
 800c476:	4640      	mov	r0, r8
 800c478:	46ac      	mov	ip, r5
 800c47a:	46f2      	mov	sl, lr
 800c47c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c480:	b293      	uxth	r3, r2
 800c482:	fb06 e303 	mla	r3, r6, r3, lr
 800c486:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	ebaa 0303 	sub.w	r3, sl, r3
 800c490:	f8dc a000 	ldr.w	sl, [ip]
 800c494:	0c12      	lsrs	r2, r2, #16
 800c496:	fa13 f38a 	uxtah	r3, r3, sl
 800c49a:	fb06 e202 	mla	r2, r6, r2, lr
 800c49e:	9300      	str	r3, [sp, #0]
 800c4a0:	9b00      	ldr	r3, [sp, #0]
 800c4a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c4a6:	b292      	uxth	r2, r2
 800c4a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c4ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c4b0:	f8bd 3000 	ldrh.w	r3, [sp]
 800c4b4:	4581      	cmp	r9, r0
 800c4b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4ba:	f84c 3b04 	str.w	r3, [ip], #4
 800c4be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c4c2:	d2db      	bcs.n	800c47c <quorem+0x44>
 800c4c4:	f855 300b 	ldr.w	r3, [r5, fp]
 800c4c8:	b92b      	cbnz	r3, 800c4d6 <quorem+0x9e>
 800c4ca:	9b01      	ldr	r3, [sp, #4]
 800c4cc:	3b04      	subs	r3, #4
 800c4ce:	429d      	cmp	r5, r3
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	d32e      	bcc.n	800c532 <quorem+0xfa>
 800c4d4:	613c      	str	r4, [r7, #16]
 800c4d6:	4638      	mov	r0, r7
 800c4d8:	f001 fdc8 	bl	800e06c <__mcmp>
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	db24      	blt.n	800c52a <quorem+0xf2>
 800c4e0:	3601      	adds	r6, #1
 800c4e2:	4628      	mov	r0, r5
 800c4e4:	f04f 0c00 	mov.w	ip, #0
 800c4e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800c4ec:	f8d0 e000 	ldr.w	lr, [r0]
 800c4f0:	b293      	uxth	r3, r2
 800c4f2:	ebac 0303 	sub.w	r3, ip, r3
 800c4f6:	0c12      	lsrs	r2, r2, #16
 800c4f8:	fa13 f38e 	uxtah	r3, r3, lr
 800c4fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c500:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c504:	b29b      	uxth	r3, r3
 800c506:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c50a:	45c1      	cmp	r9, r8
 800c50c:	f840 3b04 	str.w	r3, [r0], #4
 800c510:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c514:	d2e8      	bcs.n	800c4e8 <quorem+0xb0>
 800c516:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c51a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c51e:	b922      	cbnz	r2, 800c52a <quorem+0xf2>
 800c520:	3b04      	subs	r3, #4
 800c522:	429d      	cmp	r5, r3
 800c524:	461a      	mov	r2, r3
 800c526:	d30a      	bcc.n	800c53e <quorem+0x106>
 800c528:	613c      	str	r4, [r7, #16]
 800c52a:	4630      	mov	r0, r6
 800c52c:	b003      	add	sp, #12
 800c52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c532:	6812      	ldr	r2, [r2, #0]
 800c534:	3b04      	subs	r3, #4
 800c536:	2a00      	cmp	r2, #0
 800c538:	d1cc      	bne.n	800c4d4 <quorem+0x9c>
 800c53a:	3c01      	subs	r4, #1
 800c53c:	e7c7      	b.n	800c4ce <quorem+0x96>
 800c53e:	6812      	ldr	r2, [r2, #0]
 800c540:	3b04      	subs	r3, #4
 800c542:	2a00      	cmp	r2, #0
 800c544:	d1f0      	bne.n	800c528 <quorem+0xf0>
 800c546:	3c01      	subs	r4, #1
 800c548:	e7eb      	b.n	800c522 <quorem+0xea>
 800c54a:	2000      	movs	r0, #0
 800c54c:	e7ee      	b.n	800c52c <quorem+0xf4>
	...

0800c550 <_dtoa_r>:
 800c550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c554:	ed2d 8b04 	vpush	{d8-d9}
 800c558:	ec57 6b10 	vmov	r6, r7, d0
 800c55c:	b093      	sub	sp, #76	; 0x4c
 800c55e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c560:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c564:	9106      	str	r1, [sp, #24]
 800c566:	ee10 aa10 	vmov	sl, s0
 800c56a:	4604      	mov	r4, r0
 800c56c:	9209      	str	r2, [sp, #36]	; 0x24
 800c56e:	930c      	str	r3, [sp, #48]	; 0x30
 800c570:	46bb      	mov	fp, r7
 800c572:	b975      	cbnz	r5, 800c592 <_dtoa_r+0x42>
 800c574:	2010      	movs	r0, #16
 800c576:	f001 fa87 	bl	800da88 <malloc>
 800c57a:	4602      	mov	r2, r0
 800c57c:	6260      	str	r0, [r4, #36]	; 0x24
 800c57e:	b920      	cbnz	r0, 800c58a <_dtoa_r+0x3a>
 800c580:	4ba7      	ldr	r3, [pc, #668]	; (800c820 <_dtoa_r+0x2d0>)
 800c582:	21ea      	movs	r1, #234	; 0xea
 800c584:	48a7      	ldr	r0, [pc, #668]	; (800c824 <_dtoa_r+0x2d4>)
 800c586:	f002 f94d 	bl	800e824 <__assert_func>
 800c58a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c58e:	6005      	str	r5, [r0, #0]
 800c590:	60c5      	str	r5, [r0, #12]
 800c592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c594:	6819      	ldr	r1, [r3, #0]
 800c596:	b151      	cbz	r1, 800c5ae <_dtoa_r+0x5e>
 800c598:	685a      	ldr	r2, [r3, #4]
 800c59a:	604a      	str	r2, [r1, #4]
 800c59c:	2301      	movs	r3, #1
 800c59e:	4093      	lsls	r3, r2
 800c5a0:	608b      	str	r3, [r1, #8]
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	f001 fad6 	bl	800db54 <_Bfree>
 800c5a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	601a      	str	r2, [r3, #0]
 800c5ae:	1e3b      	subs	r3, r7, #0
 800c5b0:	bfaa      	itet	ge
 800c5b2:	2300      	movge	r3, #0
 800c5b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c5b8:	f8c8 3000 	strge.w	r3, [r8]
 800c5bc:	4b9a      	ldr	r3, [pc, #616]	; (800c828 <_dtoa_r+0x2d8>)
 800c5be:	bfbc      	itt	lt
 800c5c0:	2201      	movlt	r2, #1
 800c5c2:	f8c8 2000 	strlt.w	r2, [r8]
 800c5c6:	ea33 030b 	bics.w	r3, r3, fp
 800c5ca:	d11b      	bne.n	800c604 <_dtoa_r+0xb4>
 800c5cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800c5d2:	6013      	str	r3, [r2, #0]
 800c5d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5d8:	4333      	orrs	r3, r6
 800c5da:	f000 8592 	beq.w	800d102 <_dtoa_r+0xbb2>
 800c5de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5e0:	b963      	cbnz	r3, 800c5fc <_dtoa_r+0xac>
 800c5e2:	4b92      	ldr	r3, [pc, #584]	; (800c82c <_dtoa_r+0x2dc>)
 800c5e4:	e022      	b.n	800c62c <_dtoa_r+0xdc>
 800c5e6:	4b92      	ldr	r3, [pc, #584]	; (800c830 <_dtoa_r+0x2e0>)
 800c5e8:	9301      	str	r3, [sp, #4]
 800c5ea:	3308      	adds	r3, #8
 800c5ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c5ee:	6013      	str	r3, [r2, #0]
 800c5f0:	9801      	ldr	r0, [sp, #4]
 800c5f2:	b013      	add	sp, #76	; 0x4c
 800c5f4:	ecbd 8b04 	vpop	{d8-d9}
 800c5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5fc:	4b8b      	ldr	r3, [pc, #556]	; (800c82c <_dtoa_r+0x2dc>)
 800c5fe:	9301      	str	r3, [sp, #4]
 800c600:	3303      	adds	r3, #3
 800c602:	e7f3      	b.n	800c5ec <_dtoa_r+0x9c>
 800c604:	2200      	movs	r2, #0
 800c606:	2300      	movs	r3, #0
 800c608:	4650      	mov	r0, sl
 800c60a:	4659      	mov	r1, fp
 800c60c:	f7f4 fa64 	bl	8000ad8 <__aeabi_dcmpeq>
 800c610:	ec4b ab19 	vmov	d9, sl, fp
 800c614:	4680      	mov	r8, r0
 800c616:	b158      	cbz	r0, 800c630 <_dtoa_r+0xe0>
 800c618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c61a:	2301      	movs	r3, #1
 800c61c:	6013      	str	r3, [r2, #0]
 800c61e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c620:	2b00      	cmp	r3, #0
 800c622:	f000 856b 	beq.w	800d0fc <_dtoa_r+0xbac>
 800c626:	4883      	ldr	r0, [pc, #524]	; (800c834 <_dtoa_r+0x2e4>)
 800c628:	6018      	str	r0, [r3, #0]
 800c62a:	1e43      	subs	r3, r0, #1
 800c62c:	9301      	str	r3, [sp, #4]
 800c62e:	e7df      	b.n	800c5f0 <_dtoa_r+0xa0>
 800c630:	ec4b ab10 	vmov	d0, sl, fp
 800c634:	aa10      	add	r2, sp, #64	; 0x40
 800c636:	a911      	add	r1, sp, #68	; 0x44
 800c638:	4620      	mov	r0, r4
 800c63a:	f001 fe39 	bl	800e2b0 <__d2b>
 800c63e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c642:	ee08 0a10 	vmov	s16, r0
 800c646:	2d00      	cmp	r5, #0
 800c648:	f000 8084 	beq.w	800c754 <_dtoa_r+0x204>
 800c64c:	ee19 3a90 	vmov	r3, s19
 800c650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c654:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c658:	4656      	mov	r6, sl
 800c65a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c65e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c662:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c666:	4b74      	ldr	r3, [pc, #464]	; (800c838 <_dtoa_r+0x2e8>)
 800c668:	2200      	movs	r2, #0
 800c66a:	4630      	mov	r0, r6
 800c66c:	4639      	mov	r1, r7
 800c66e:	f7f3 fe13 	bl	8000298 <__aeabi_dsub>
 800c672:	a365      	add	r3, pc, #404	; (adr r3, 800c808 <_dtoa_r+0x2b8>)
 800c674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c678:	f7f3 ffc6 	bl	8000608 <__aeabi_dmul>
 800c67c:	a364      	add	r3, pc, #400	; (adr r3, 800c810 <_dtoa_r+0x2c0>)
 800c67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c682:	f7f3 fe0b 	bl	800029c <__adddf3>
 800c686:	4606      	mov	r6, r0
 800c688:	4628      	mov	r0, r5
 800c68a:	460f      	mov	r7, r1
 800c68c:	f7f3 ff52 	bl	8000534 <__aeabi_i2d>
 800c690:	a361      	add	r3, pc, #388	; (adr r3, 800c818 <_dtoa_r+0x2c8>)
 800c692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c696:	f7f3 ffb7 	bl	8000608 <__aeabi_dmul>
 800c69a:	4602      	mov	r2, r0
 800c69c:	460b      	mov	r3, r1
 800c69e:	4630      	mov	r0, r6
 800c6a0:	4639      	mov	r1, r7
 800c6a2:	f7f3 fdfb 	bl	800029c <__adddf3>
 800c6a6:	4606      	mov	r6, r0
 800c6a8:	460f      	mov	r7, r1
 800c6aa:	f7f4 fa5d 	bl	8000b68 <__aeabi_d2iz>
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	9000      	str	r0, [sp, #0]
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	4639      	mov	r1, r7
 800c6b8:	f7f4 fa18 	bl	8000aec <__aeabi_dcmplt>
 800c6bc:	b150      	cbz	r0, 800c6d4 <_dtoa_r+0x184>
 800c6be:	9800      	ldr	r0, [sp, #0]
 800c6c0:	f7f3 ff38 	bl	8000534 <__aeabi_i2d>
 800c6c4:	4632      	mov	r2, r6
 800c6c6:	463b      	mov	r3, r7
 800c6c8:	f7f4 fa06 	bl	8000ad8 <__aeabi_dcmpeq>
 800c6cc:	b910      	cbnz	r0, 800c6d4 <_dtoa_r+0x184>
 800c6ce:	9b00      	ldr	r3, [sp, #0]
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	9300      	str	r3, [sp, #0]
 800c6d4:	9b00      	ldr	r3, [sp, #0]
 800c6d6:	2b16      	cmp	r3, #22
 800c6d8:	d85a      	bhi.n	800c790 <_dtoa_r+0x240>
 800c6da:	9a00      	ldr	r2, [sp, #0]
 800c6dc:	4b57      	ldr	r3, [pc, #348]	; (800c83c <_dtoa_r+0x2ec>)
 800c6de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e6:	ec51 0b19 	vmov	r0, r1, d9
 800c6ea:	f7f4 f9ff 	bl	8000aec <__aeabi_dcmplt>
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	d050      	beq.n	800c794 <_dtoa_r+0x244>
 800c6f2:	9b00      	ldr	r3, [sp, #0]
 800c6f4:	3b01      	subs	r3, #1
 800c6f6:	9300      	str	r3, [sp, #0]
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c6fe:	1b5d      	subs	r5, r3, r5
 800c700:	1e6b      	subs	r3, r5, #1
 800c702:	9305      	str	r3, [sp, #20]
 800c704:	bf45      	ittet	mi
 800c706:	f1c5 0301 	rsbmi	r3, r5, #1
 800c70a:	9304      	strmi	r3, [sp, #16]
 800c70c:	2300      	movpl	r3, #0
 800c70e:	2300      	movmi	r3, #0
 800c710:	bf4c      	ite	mi
 800c712:	9305      	strmi	r3, [sp, #20]
 800c714:	9304      	strpl	r3, [sp, #16]
 800c716:	9b00      	ldr	r3, [sp, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	db3d      	blt.n	800c798 <_dtoa_r+0x248>
 800c71c:	9b05      	ldr	r3, [sp, #20]
 800c71e:	9a00      	ldr	r2, [sp, #0]
 800c720:	920a      	str	r2, [sp, #40]	; 0x28
 800c722:	4413      	add	r3, r2
 800c724:	9305      	str	r3, [sp, #20]
 800c726:	2300      	movs	r3, #0
 800c728:	9307      	str	r3, [sp, #28]
 800c72a:	9b06      	ldr	r3, [sp, #24]
 800c72c:	2b09      	cmp	r3, #9
 800c72e:	f200 8089 	bhi.w	800c844 <_dtoa_r+0x2f4>
 800c732:	2b05      	cmp	r3, #5
 800c734:	bfc4      	itt	gt
 800c736:	3b04      	subgt	r3, #4
 800c738:	9306      	strgt	r3, [sp, #24]
 800c73a:	9b06      	ldr	r3, [sp, #24]
 800c73c:	f1a3 0302 	sub.w	r3, r3, #2
 800c740:	bfcc      	ite	gt
 800c742:	2500      	movgt	r5, #0
 800c744:	2501      	movle	r5, #1
 800c746:	2b03      	cmp	r3, #3
 800c748:	f200 8087 	bhi.w	800c85a <_dtoa_r+0x30a>
 800c74c:	e8df f003 	tbb	[pc, r3]
 800c750:	59383a2d 	.word	0x59383a2d
 800c754:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c758:	441d      	add	r5, r3
 800c75a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c75e:	2b20      	cmp	r3, #32
 800c760:	bfc1      	itttt	gt
 800c762:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c766:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c76a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c76e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c772:	bfda      	itte	le
 800c774:	f1c3 0320 	rsble	r3, r3, #32
 800c778:	fa06 f003 	lslle.w	r0, r6, r3
 800c77c:	4318      	orrgt	r0, r3
 800c77e:	f7f3 fec9 	bl	8000514 <__aeabi_ui2d>
 800c782:	2301      	movs	r3, #1
 800c784:	4606      	mov	r6, r0
 800c786:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c78a:	3d01      	subs	r5, #1
 800c78c:	930e      	str	r3, [sp, #56]	; 0x38
 800c78e:	e76a      	b.n	800c666 <_dtoa_r+0x116>
 800c790:	2301      	movs	r3, #1
 800c792:	e7b2      	b.n	800c6fa <_dtoa_r+0x1aa>
 800c794:	900b      	str	r0, [sp, #44]	; 0x2c
 800c796:	e7b1      	b.n	800c6fc <_dtoa_r+0x1ac>
 800c798:	9b04      	ldr	r3, [sp, #16]
 800c79a:	9a00      	ldr	r2, [sp, #0]
 800c79c:	1a9b      	subs	r3, r3, r2
 800c79e:	9304      	str	r3, [sp, #16]
 800c7a0:	4253      	negs	r3, r2
 800c7a2:	9307      	str	r3, [sp, #28]
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c7a8:	e7bf      	b.n	800c72a <_dtoa_r+0x1da>
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	9308      	str	r3, [sp, #32]
 800c7ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	dc55      	bgt.n	800c860 <_dtoa_r+0x310>
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	9209      	str	r2, [sp, #36]	; 0x24
 800c7be:	e00c      	b.n	800c7da <_dtoa_r+0x28a>
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	e7f3      	b.n	800c7ac <_dtoa_r+0x25c>
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7c8:	9308      	str	r3, [sp, #32]
 800c7ca:	9b00      	ldr	r3, [sp, #0]
 800c7cc:	4413      	add	r3, r2
 800c7ce:	9302      	str	r3, [sp, #8]
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	9303      	str	r3, [sp, #12]
 800c7d6:	bfb8      	it	lt
 800c7d8:	2301      	movlt	r3, #1
 800c7da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c7dc:	2200      	movs	r2, #0
 800c7de:	6042      	str	r2, [r0, #4]
 800c7e0:	2204      	movs	r2, #4
 800c7e2:	f102 0614 	add.w	r6, r2, #20
 800c7e6:	429e      	cmp	r6, r3
 800c7e8:	6841      	ldr	r1, [r0, #4]
 800c7ea:	d93d      	bls.n	800c868 <_dtoa_r+0x318>
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	f001 f971 	bl	800dad4 <_Balloc>
 800c7f2:	9001      	str	r0, [sp, #4]
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	d13b      	bne.n	800c870 <_dtoa_r+0x320>
 800c7f8:	4b11      	ldr	r3, [pc, #68]	; (800c840 <_dtoa_r+0x2f0>)
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c800:	e6c0      	b.n	800c584 <_dtoa_r+0x34>
 800c802:	2301      	movs	r3, #1
 800c804:	e7df      	b.n	800c7c6 <_dtoa_r+0x276>
 800c806:	bf00      	nop
 800c808:	636f4361 	.word	0x636f4361
 800c80c:	3fd287a7 	.word	0x3fd287a7
 800c810:	8b60c8b3 	.word	0x8b60c8b3
 800c814:	3fc68a28 	.word	0x3fc68a28
 800c818:	509f79fb 	.word	0x509f79fb
 800c81c:	3fd34413 	.word	0x3fd34413
 800c820:	0800f40d 	.word	0x0800f40d
 800c824:	0800f424 	.word	0x0800f424
 800c828:	7ff00000 	.word	0x7ff00000
 800c82c:	0800f409 	.word	0x0800f409
 800c830:	0800f400 	.word	0x0800f400
 800c834:	0800f38d 	.word	0x0800f38d
 800c838:	3ff80000 	.word	0x3ff80000
 800c83c:	0800f590 	.word	0x0800f590
 800c840:	0800f47f 	.word	0x0800f47f
 800c844:	2501      	movs	r5, #1
 800c846:	2300      	movs	r3, #0
 800c848:	9306      	str	r3, [sp, #24]
 800c84a:	9508      	str	r5, [sp, #32]
 800c84c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c850:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c854:	2200      	movs	r2, #0
 800c856:	2312      	movs	r3, #18
 800c858:	e7b0      	b.n	800c7bc <_dtoa_r+0x26c>
 800c85a:	2301      	movs	r3, #1
 800c85c:	9308      	str	r3, [sp, #32]
 800c85e:	e7f5      	b.n	800c84c <_dtoa_r+0x2fc>
 800c860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c862:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c866:	e7b8      	b.n	800c7da <_dtoa_r+0x28a>
 800c868:	3101      	adds	r1, #1
 800c86a:	6041      	str	r1, [r0, #4]
 800c86c:	0052      	lsls	r2, r2, #1
 800c86e:	e7b8      	b.n	800c7e2 <_dtoa_r+0x292>
 800c870:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c872:	9a01      	ldr	r2, [sp, #4]
 800c874:	601a      	str	r2, [r3, #0]
 800c876:	9b03      	ldr	r3, [sp, #12]
 800c878:	2b0e      	cmp	r3, #14
 800c87a:	f200 809d 	bhi.w	800c9b8 <_dtoa_r+0x468>
 800c87e:	2d00      	cmp	r5, #0
 800c880:	f000 809a 	beq.w	800c9b8 <_dtoa_r+0x468>
 800c884:	9b00      	ldr	r3, [sp, #0]
 800c886:	2b00      	cmp	r3, #0
 800c888:	dd32      	ble.n	800c8f0 <_dtoa_r+0x3a0>
 800c88a:	4ab7      	ldr	r2, [pc, #732]	; (800cb68 <_dtoa_r+0x618>)
 800c88c:	f003 030f 	and.w	r3, r3, #15
 800c890:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c894:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c898:	9b00      	ldr	r3, [sp, #0]
 800c89a:	05d8      	lsls	r0, r3, #23
 800c89c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c8a0:	d516      	bpl.n	800c8d0 <_dtoa_r+0x380>
 800c8a2:	4bb2      	ldr	r3, [pc, #712]	; (800cb6c <_dtoa_r+0x61c>)
 800c8a4:	ec51 0b19 	vmov	r0, r1, d9
 800c8a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c8ac:	f7f3 ffd6 	bl	800085c <__aeabi_ddiv>
 800c8b0:	f007 070f 	and.w	r7, r7, #15
 800c8b4:	4682      	mov	sl, r0
 800c8b6:	468b      	mov	fp, r1
 800c8b8:	2503      	movs	r5, #3
 800c8ba:	4eac      	ldr	r6, [pc, #688]	; (800cb6c <_dtoa_r+0x61c>)
 800c8bc:	b957      	cbnz	r7, 800c8d4 <_dtoa_r+0x384>
 800c8be:	4642      	mov	r2, r8
 800c8c0:	464b      	mov	r3, r9
 800c8c2:	4650      	mov	r0, sl
 800c8c4:	4659      	mov	r1, fp
 800c8c6:	f7f3 ffc9 	bl	800085c <__aeabi_ddiv>
 800c8ca:	4682      	mov	sl, r0
 800c8cc:	468b      	mov	fp, r1
 800c8ce:	e028      	b.n	800c922 <_dtoa_r+0x3d2>
 800c8d0:	2502      	movs	r5, #2
 800c8d2:	e7f2      	b.n	800c8ba <_dtoa_r+0x36a>
 800c8d4:	07f9      	lsls	r1, r7, #31
 800c8d6:	d508      	bpl.n	800c8ea <_dtoa_r+0x39a>
 800c8d8:	4640      	mov	r0, r8
 800c8da:	4649      	mov	r1, r9
 800c8dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c8e0:	f7f3 fe92 	bl	8000608 <__aeabi_dmul>
 800c8e4:	3501      	adds	r5, #1
 800c8e6:	4680      	mov	r8, r0
 800c8e8:	4689      	mov	r9, r1
 800c8ea:	107f      	asrs	r7, r7, #1
 800c8ec:	3608      	adds	r6, #8
 800c8ee:	e7e5      	b.n	800c8bc <_dtoa_r+0x36c>
 800c8f0:	f000 809b 	beq.w	800ca2a <_dtoa_r+0x4da>
 800c8f4:	9b00      	ldr	r3, [sp, #0]
 800c8f6:	4f9d      	ldr	r7, [pc, #628]	; (800cb6c <_dtoa_r+0x61c>)
 800c8f8:	425e      	negs	r6, r3
 800c8fa:	4b9b      	ldr	r3, [pc, #620]	; (800cb68 <_dtoa_r+0x618>)
 800c8fc:	f006 020f 	and.w	r2, r6, #15
 800c900:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c908:	ec51 0b19 	vmov	r0, r1, d9
 800c90c:	f7f3 fe7c 	bl	8000608 <__aeabi_dmul>
 800c910:	1136      	asrs	r6, r6, #4
 800c912:	4682      	mov	sl, r0
 800c914:	468b      	mov	fp, r1
 800c916:	2300      	movs	r3, #0
 800c918:	2502      	movs	r5, #2
 800c91a:	2e00      	cmp	r6, #0
 800c91c:	d17a      	bne.n	800ca14 <_dtoa_r+0x4c4>
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d1d3      	bne.n	800c8ca <_dtoa_r+0x37a>
 800c922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c924:	2b00      	cmp	r3, #0
 800c926:	f000 8082 	beq.w	800ca2e <_dtoa_r+0x4de>
 800c92a:	4b91      	ldr	r3, [pc, #580]	; (800cb70 <_dtoa_r+0x620>)
 800c92c:	2200      	movs	r2, #0
 800c92e:	4650      	mov	r0, sl
 800c930:	4659      	mov	r1, fp
 800c932:	f7f4 f8db 	bl	8000aec <__aeabi_dcmplt>
 800c936:	2800      	cmp	r0, #0
 800c938:	d079      	beq.n	800ca2e <_dtoa_r+0x4de>
 800c93a:	9b03      	ldr	r3, [sp, #12]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d076      	beq.n	800ca2e <_dtoa_r+0x4de>
 800c940:	9b02      	ldr	r3, [sp, #8]
 800c942:	2b00      	cmp	r3, #0
 800c944:	dd36      	ble.n	800c9b4 <_dtoa_r+0x464>
 800c946:	9b00      	ldr	r3, [sp, #0]
 800c948:	4650      	mov	r0, sl
 800c94a:	4659      	mov	r1, fp
 800c94c:	1e5f      	subs	r7, r3, #1
 800c94e:	2200      	movs	r2, #0
 800c950:	4b88      	ldr	r3, [pc, #544]	; (800cb74 <_dtoa_r+0x624>)
 800c952:	f7f3 fe59 	bl	8000608 <__aeabi_dmul>
 800c956:	9e02      	ldr	r6, [sp, #8]
 800c958:	4682      	mov	sl, r0
 800c95a:	468b      	mov	fp, r1
 800c95c:	3501      	adds	r5, #1
 800c95e:	4628      	mov	r0, r5
 800c960:	f7f3 fde8 	bl	8000534 <__aeabi_i2d>
 800c964:	4652      	mov	r2, sl
 800c966:	465b      	mov	r3, fp
 800c968:	f7f3 fe4e 	bl	8000608 <__aeabi_dmul>
 800c96c:	4b82      	ldr	r3, [pc, #520]	; (800cb78 <_dtoa_r+0x628>)
 800c96e:	2200      	movs	r2, #0
 800c970:	f7f3 fc94 	bl	800029c <__adddf3>
 800c974:	46d0      	mov	r8, sl
 800c976:	46d9      	mov	r9, fp
 800c978:	4682      	mov	sl, r0
 800c97a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c97e:	2e00      	cmp	r6, #0
 800c980:	d158      	bne.n	800ca34 <_dtoa_r+0x4e4>
 800c982:	4b7e      	ldr	r3, [pc, #504]	; (800cb7c <_dtoa_r+0x62c>)
 800c984:	2200      	movs	r2, #0
 800c986:	4640      	mov	r0, r8
 800c988:	4649      	mov	r1, r9
 800c98a:	f7f3 fc85 	bl	8000298 <__aeabi_dsub>
 800c98e:	4652      	mov	r2, sl
 800c990:	465b      	mov	r3, fp
 800c992:	4680      	mov	r8, r0
 800c994:	4689      	mov	r9, r1
 800c996:	f7f4 f8c7 	bl	8000b28 <__aeabi_dcmpgt>
 800c99a:	2800      	cmp	r0, #0
 800c99c:	f040 8295 	bne.w	800ceca <_dtoa_r+0x97a>
 800c9a0:	4652      	mov	r2, sl
 800c9a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c9a6:	4640      	mov	r0, r8
 800c9a8:	4649      	mov	r1, r9
 800c9aa:	f7f4 f89f 	bl	8000aec <__aeabi_dcmplt>
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	f040 8289 	bne.w	800cec6 <_dtoa_r+0x976>
 800c9b4:	ec5b ab19 	vmov	sl, fp, d9
 800c9b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	f2c0 8148 	blt.w	800cc50 <_dtoa_r+0x700>
 800c9c0:	9a00      	ldr	r2, [sp, #0]
 800c9c2:	2a0e      	cmp	r2, #14
 800c9c4:	f300 8144 	bgt.w	800cc50 <_dtoa_r+0x700>
 800c9c8:	4b67      	ldr	r3, [pc, #412]	; (800cb68 <_dtoa_r+0x618>)
 800c9ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	f280 80d5 	bge.w	800cb84 <_dtoa_r+0x634>
 800c9da:	9b03      	ldr	r3, [sp, #12]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f300 80d1 	bgt.w	800cb84 <_dtoa_r+0x634>
 800c9e2:	f040 826f 	bne.w	800cec4 <_dtoa_r+0x974>
 800c9e6:	4b65      	ldr	r3, [pc, #404]	; (800cb7c <_dtoa_r+0x62c>)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	4640      	mov	r0, r8
 800c9ec:	4649      	mov	r1, r9
 800c9ee:	f7f3 fe0b 	bl	8000608 <__aeabi_dmul>
 800c9f2:	4652      	mov	r2, sl
 800c9f4:	465b      	mov	r3, fp
 800c9f6:	f7f4 f88d 	bl	8000b14 <__aeabi_dcmpge>
 800c9fa:	9e03      	ldr	r6, [sp, #12]
 800c9fc:	4637      	mov	r7, r6
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	f040 8245 	bne.w	800ce8e <_dtoa_r+0x93e>
 800ca04:	9d01      	ldr	r5, [sp, #4]
 800ca06:	2331      	movs	r3, #49	; 0x31
 800ca08:	f805 3b01 	strb.w	r3, [r5], #1
 800ca0c:	9b00      	ldr	r3, [sp, #0]
 800ca0e:	3301      	adds	r3, #1
 800ca10:	9300      	str	r3, [sp, #0]
 800ca12:	e240      	b.n	800ce96 <_dtoa_r+0x946>
 800ca14:	07f2      	lsls	r2, r6, #31
 800ca16:	d505      	bpl.n	800ca24 <_dtoa_r+0x4d4>
 800ca18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca1c:	f7f3 fdf4 	bl	8000608 <__aeabi_dmul>
 800ca20:	3501      	adds	r5, #1
 800ca22:	2301      	movs	r3, #1
 800ca24:	1076      	asrs	r6, r6, #1
 800ca26:	3708      	adds	r7, #8
 800ca28:	e777      	b.n	800c91a <_dtoa_r+0x3ca>
 800ca2a:	2502      	movs	r5, #2
 800ca2c:	e779      	b.n	800c922 <_dtoa_r+0x3d2>
 800ca2e:	9f00      	ldr	r7, [sp, #0]
 800ca30:	9e03      	ldr	r6, [sp, #12]
 800ca32:	e794      	b.n	800c95e <_dtoa_r+0x40e>
 800ca34:	9901      	ldr	r1, [sp, #4]
 800ca36:	4b4c      	ldr	r3, [pc, #304]	; (800cb68 <_dtoa_r+0x618>)
 800ca38:	4431      	add	r1, r6
 800ca3a:	910d      	str	r1, [sp, #52]	; 0x34
 800ca3c:	9908      	ldr	r1, [sp, #32]
 800ca3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ca42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ca46:	2900      	cmp	r1, #0
 800ca48:	d043      	beq.n	800cad2 <_dtoa_r+0x582>
 800ca4a:	494d      	ldr	r1, [pc, #308]	; (800cb80 <_dtoa_r+0x630>)
 800ca4c:	2000      	movs	r0, #0
 800ca4e:	f7f3 ff05 	bl	800085c <__aeabi_ddiv>
 800ca52:	4652      	mov	r2, sl
 800ca54:	465b      	mov	r3, fp
 800ca56:	f7f3 fc1f 	bl	8000298 <__aeabi_dsub>
 800ca5a:	9d01      	ldr	r5, [sp, #4]
 800ca5c:	4682      	mov	sl, r0
 800ca5e:	468b      	mov	fp, r1
 800ca60:	4649      	mov	r1, r9
 800ca62:	4640      	mov	r0, r8
 800ca64:	f7f4 f880 	bl	8000b68 <__aeabi_d2iz>
 800ca68:	4606      	mov	r6, r0
 800ca6a:	f7f3 fd63 	bl	8000534 <__aeabi_i2d>
 800ca6e:	4602      	mov	r2, r0
 800ca70:	460b      	mov	r3, r1
 800ca72:	4640      	mov	r0, r8
 800ca74:	4649      	mov	r1, r9
 800ca76:	f7f3 fc0f 	bl	8000298 <__aeabi_dsub>
 800ca7a:	3630      	adds	r6, #48	; 0x30
 800ca7c:	f805 6b01 	strb.w	r6, [r5], #1
 800ca80:	4652      	mov	r2, sl
 800ca82:	465b      	mov	r3, fp
 800ca84:	4680      	mov	r8, r0
 800ca86:	4689      	mov	r9, r1
 800ca88:	f7f4 f830 	bl	8000aec <__aeabi_dcmplt>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d163      	bne.n	800cb58 <_dtoa_r+0x608>
 800ca90:	4642      	mov	r2, r8
 800ca92:	464b      	mov	r3, r9
 800ca94:	4936      	ldr	r1, [pc, #216]	; (800cb70 <_dtoa_r+0x620>)
 800ca96:	2000      	movs	r0, #0
 800ca98:	f7f3 fbfe 	bl	8000298 <__aeabi_dsub>
 800ca9c:	4652      	mov	r2, sl
 800ca9e:	465b      	mov	r3, fp
 800caa0:	f7f4 f824 	bl	8000aec <__aeabi_dcmplt>
 800caa4:	2800      	cmp	r0, #0
 800caa6:	f040 80b5 	bne.w	800cc14 <_dtoa_r+0x6c4>
 800caaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800caac:	429d      	cmp	r5, r3
 800caae:	d081      	beq.n	800c9b4 <_dtoa_r+0x464>
 800cab0:	4b30      	ldr	r3, [pc, #192]	; (800cb74 <_dtoa_r+0x624>)
 800cab2:	2200      	movs	r2, #0
 800cab4:	4650      	mov	r0, sl
 800cab6:	4659      	mov	r1, fp
 800cab8:	f7f3 fda6 	bl	8000608 <__aeabi_dmul>
 800cabc:	4b2d      	ldr	r3, [pc, #180]	; (800cb74 <_dtoa_r+0x624>)
 800cabe:	4682      	mov	sl, r0
 800cac0:	468b      	mov	fp, r1
 800cac2:	4640      	mov	r0, r8
 800cac4:	4649      	mov	r1, r9
 800cac6:	2200      	movs	r2, #0
 800cac8:	f7f3 fd9e 	bl	8000608 <__aeabi_dmul>
 800cacc:	4680      	mov	r8, r0
 800cace:	4689      	mov	r9, r1
 800cad0:	e7c6      	b.n	800ca60 <_dtoa_r+0x510>
 800cad2:	4650      	mov	r0, sl
 800cad4:	4659      	mov	r1, fp
 800cad6:	f7f3 fd97 	bl	8000608 <__aeabi_dmul>
 800cada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cadc:	9d01      	ldr	r5, [sp, #4]
 800cade:	930f      	str	r3, [sp, #60]	; 0x3c
 800cae0:	4682      	mov	sl, r0
 800cae2:	468b      	mov	fp, r1
 800cae4:	4649      	mov	r1, r9
 800cae6:	4640      	mov	r0, r8
 800cae8:	f7f4 f83e 	bl	8000b68 <__aeabi_d2iz>
 800caec:	4606      	mov	r6, r0
 800caee:	f7f3 fd21 	bl	8000534 <__aeabi_i2d>
 800caf2:	3630      	adds	r6, #48	; 0x30
 800caf4:	4602      	mov	r2, r0
 800caf6:	460b      	mov	r3, r1
 800caf8:	4640      	mov	r0, r8
 800cafa:	4649      	mov	r1, r9
 800cafc:	f7f3 fbcc 	bl	8000298 <__aeabi_dsub>
 800cb00:	f805 6b01 	strb.w	r6, [r5], #1
 800cb04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb06:	429d      	cmp	r5, r3
 800cb08:	4680      	mov	r8, r0
 800cb0a:	4689      	mov	r9, r1
 800cb0c:	f04f 0200 	mov.w	r2, #0
 800cb10:	d124      	bne.n	800cb5c <_dtoa_r+0x60c>
 800cb12:	4b1b      	ldr	r3, [pc, #108]	; (800cb80 <_dtoa_r+0x630>)
 800cb14:	4650      	mov	r0, sl
 800cb16:	4659      	mov	r1, fp
 800cb18:	f7f3 fbc0 	bl	800029c <__adddf3>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	460b      	mov	r3, r1
 800cb20:	4640      	mov	r0, r8
 800cb22:	4649      	mov	r1, r9
 800cb24:	f7f4 f800 	bl	8000b28 <__aeabi_dcmpgt>
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	d173      	bne.n	800cc14 <_dtoa_r+0x6c4>
 800cb2c:	4652      	mov	r2, sl
 800cb2e:	465b      	mov	r3, fp
 800cb30:	4913      	ldr	r1, [pc, #76]	; (800cb80 <_dtoa_r+0x630>)
 800cb32:	2000      	movs	r0, #0
 800cb34:	f7f3 fbb0 	bl	8000298 <__aeabi_dsub>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	4640      	mov	r0, r8
 800cb3e:	4649      	mov	r1, r9
 800cb40:	f7f3 ffd4 	bl	8000aec <__aeabi_dcmplt>
 800cb44:	2800      	cmp	r0, #0
 800cb46:	f43f af35 	beq.w	800c9b4 <_dtoa_r+0x464>
 800cb4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cb4c:	1e6b      	subs	r3, r5, #1
 800cb4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cb54:	2b30      	cmp	r3, #48	; 0x30
 800cb56:	d0f8      	beq.n	800cb4a <_dtoa_r+0x5fa>
 800cb58:	9700      	str	r7, [sp, #0]
 800cb5a:	e049      	b.n	800cbf0 <_dtoa_r+0x6a0>
 800cb5c:	4b05      	ldr	r3, [pc, #20]	; (800cb74 <_dtoa_r+0x624>)
 800cb5e:	f7f3 fd53 	bl	8000608 <__aeabi_dmul>
 800cb62:	4680      	mov	r8, r0
 800cb64:	4689      	mov	r9, r1
 800cb66:	e7bd      	b.n	800cae4 <_dtoa_r+0x594>
 800cb68:	0800f590 	.word	0x0800f590
 800cb6c:	0800f568 	.word	0x0800f568
 800cb70:	3ff00000 	.word	0x3ff00000
 800cb74:	40240000 	.word	0x40240000
 800cb78:	401c0000 	.word	0x401c0000
 800cb7c:	40140000 	.word	0x40140000
 800cb80:	3fe00000 	.word	0x3fe00000
 800cb84:	9d01      	ldr	r5, [sp, #4]
 800cb86:	4656      	mov	r6, sl
 800cb88:	465f      	mov	r7, fp
 800cb8a:	4642      	mov	r2, r8
 800cb8c:	464b      	mov	r3, r9
 800cb8e:	4630      	mov	r0, r6
 800cb90:	4639      	mov	r1, r7
 800cb92:	f7f3 fe63 	bl	800085c <__aeabi_ddiv>
 800cb96:	f7f3 ffe7 	bl	8000b68 <__aeabi_d2iz>
 800cb9a:	4682      	mov	sl, r0
 800cb9c:	f7f3 fcca 	bl	8000534 <__aeabi_i2d>
 800cba0:	4642      	mov	r2, r8
 800cba2:	464b      	mov	r3, r9
 800cba4:	f7f3 fd30 	bl	8000608 <__aeabi_dmul>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	460b      	mov	r3, r1
 800cbac:	4630      	mov	r0, r6
 800cbae:	4639      	mov	r1, r7
 800cbb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cbb4:	f7f3 fb70 	bl	8000298 <__aeabi_dsub>
 800cbb8:	f805 6b01 	strb.w	r6, [r5], #1
 800cbbc:	9e01      	ldr	r6, [sp, #4]
 800cbbe:	9f03      	ldr	r7, [sp, #12]
 800cbc0:	1bae      	subs	r6, r5, r6
 800cbc2:	42b7      	cmp	r7, r6
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	d135      	bne.n	800cc36 <_dtoa_r+0x6e6>
 800cbca:	f7f3 fb67 	bl	800029c <__adddf3>
 800cbce:	4642      	mov	r2, r8
 800cbd0:	464b      	mov	r3, r9
 800cbd2:	4606      	mov	r6, r0
 800cbd4:	460f      	mov	r7, r1
 800cbd6:	f7f3 ffa7 	bl	8000b28 <__aeabi_dcmpgt>
 800cbda:	b9d0      	cbnz	r0, 800cc12 <_dtoa_r+0x6c2>
 800cbdc:	4642      	mov	r2, r8
 800cbde:	464b      	mov	r3, r9
 800cbe0:	4630      	mov	r0, r6
 800cbe2:	4639      	mov	r1, r7
 800cbe4:	f7f3 ff78 	bl	8000ad8 <__aeabi_dcmpeq>
 800cbe8:	b110      	cbz	r0, 800cbf0 <_dtoa_r+0x6a0>
 800cbea:	f01a 0f01 	tst.w	sl, #1
 800cbee:	d110      	bne.n	800cc12 <_dtoa_r+0x6c2>
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	ee18 1a10 	vmov	r1, s16
 800cbf6:	f000 ffad 	bl	800db54 <_Bfree>
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	9800      	ldr	r0, [sp, #0]
 800cbfe:	702b      	strb	r3, [r5, #0]
 800cc00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc02:	3001      	adds	r0, #1
 800cc04:	6018      	str	r0, [r3, #0]
 800cc06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f43f acf1 	beq.w	800c5f0 <_dtoa_r+0xa0>
 800cc0e:	601d      	str	r5, [r3, #0]
 800cc10:	e4ee      	b.n	800c5f0 <_dtoa_r+0xa0>
 800cc12:	9f00      	ldr	r7, [sp, #0]
 800cc14:	462b      	mov	r3, r5
 800cc16:	461d      	mov	r5, r3
 800cc18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc1c:	2a39      	cmp	r2, #57	; 0x39
 800cc1e:	d106      	bne.n	800cc2e <_dtoa_r+0x6de>
 800cc20:	9a01      	ldr	r2, [sp, #4]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d1f7      	bne.n	800cc16 <_dtoa_r+0x6c6>
 800cc26:	9901      	ldr	r1, [sp, #4]
 800cc28:	2230      	movs	r2, #48	; 0x30
 800cc2a:	3701      	adds	r7, #1
 800cc2c:	700a      	strb	r2, [r1, #0]
 800cc2e:	781a      	ldrb	r2, [r3, #0]
 800cc30:	3201      	adds	r2, #1
 800cc32:	701a      	strb	r2, [r3, #0]
 800cc34:	e790      	b.n	800cb58 <_dtoa_r+0x608>
 800cc36:	4ba6      	ldr	r3, [pc, #664]	; (800ced0 <_dtoa_r+0x980>)
 800cc38:	2200      	movs	r2, #0
 800cc3a:	f7f3 fce5 	bl	8000608 <__aeabi_dmul>
 800cc3e:	2200      	movs	r2, #0
 800cc40:	2300      	movs	r3, #0
 800cc42:	4606      	mov	r6, r0
 800cc44:	460f      	mov	r7, r1
 800cc46:	f7f3 ff47 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	d09d      	beq.n	800cb8a <_dtoa_r+0x63a>
 800cc4e:	e7cf      	b.n	800cbf0 <_dtoa_r+0x6a0>
 800cc50:	9a08      	ldr	r2, [sp, #32]
 800cc52:	2a00      	cmp	r2, #0
 800cc54:	f000 80d7 	beq.w	800ce06 <_dtoa_r+0x8b6>
 800cc58:	9a06      	ldr	r2, [sp, #24]
 800cc5a:	2a01      	cmp	r2, #1
 800cc5c:	f300 80ba 	bgt.w	800cdd4 <_dtoa_r+0x884>
 800cc60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc62:	2a00      	cmp	r2, #0
 800cc64:	f000 80b2 	beq.w	800cdcc <_dtoa_r+0x87c>
 800cc68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cc6c:	9e07      	ldr	r6, [sp, #28]
 800cc6e:	9d04      	ldr	r5, [sp, #16]
 800cc70:	9a04      	ldr	r2, [sp, #16]
 800cc72:	441a      	add	r2, r3
 800cc74:	9204      	str	r2, [sp, #16]
 800cc76:	9a05      	ldr	r2, [sp, #20]
 800cc78:	2101      	movs	r1, #1
 800cc7a:	441a      	add	r2, r3
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	9205      	str	r2, [sp, #20]
 800cc80:	f001 f86a 	bl	800dd58 <__i2b>
 800cc84:	4607      	mov	r7, r0
 800cc86:	2d00      	cmp	r5, #0
 800cc88:	dd0c      	ble.n	800cca4 <_dtoa_r+0x754>
 800cc8a:	9b05      	ldr	r3, [sp, #20]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	dd09      	ble.n	800cca4 <_dtoa_r+0x754>
 800cc90:	42ab      	cmp	r3, r5
 800cc92:	9a04      	ldr	r2, [sp, #16]
 800cc94:	bfa8      	it	ge
 800cc96:	462b      	movge	r3, r5
 800cc98:	1ad2      	subs	r2, r2, r3
 800cc9a:	9204      	str	r2, [sp, #16]
 800cc9c:	9a05      	ldr	r2, [sp, #20]
 800cc9e:	1aed      	subs	r5, r5, r3
 800cca0:	1ad3      	subs	r3, r2, r3
 800cca2:	9305      	str	r3, [sp, #20]
 800cca4:	9b07      	ldr	r3, [sp, #28]
 800cca6:	b31b      	cbz	r3, 800ccf0 <_dtoa_r+0x7a0>
 800cca8:	9b08      	ldr	r3, [sp, #32]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	f000 80af 	beq.w	800ce0e <_dtoa_r+0x8be>
 800ccb0:	2e00      	cmp	r6, #0
 800ccb2:	dd13      	ble.n	800ccdc <_dtoa_r+0x78c>
 800ccb4:	4639      	mov	r1, r7
 800ccb6:	4632      	mov	r2, r6
 800ccb8:	4620      	mov	r0, r4
 800ccba:	f001 f90d 	bl	800ded8 <__pow5mult>
 800ccbe:	ee18 2a10 	vmov	r2, s16
 800ccc2:	4601      	mov	r1, r0
 800ccc4:	4607      	mov	r7, r0
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	f001 f85c 	bl	800dd84 <__multiply>
 800cccc:	ee18 1a10 	vmov	r1, s16
 800ccd0:	4680      	mov	r8, r0
 800ccd2:	4620      	mov	r0, r4
 800ccd4:	f000 ff3e 	bl	800db54 <_Bfree>
 800ccd8:	ee08 8a10 	vmov	s16, r8
 800ccdc:	9b07      	ldr	r3, [sp, #28]
 800ccde:	1b9a      	subs	r2, r3, r6
 800cce0:	d006      	beq.n	800ccf0 <_dtoa_r+0x7a0>
 800cce2:	ee18 1a10 	vmov	r1, s16
 800cce6:	4620      	mov	r0, r4
 800cce8:	f001 f8f6 	bl	800ded8 <__pow5mult>
 800ccec:	ee08 0a10 	vmov	s16, r0
 800ccf0:	2101      	movs	r1, #1
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	f001 f830 	bl	800dd58 <__i2b>
 800ccf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	4606      	mov	r6, r0
 800ccfe:	f340 8088 	ble.w	800ce12 <_dtoa_r+0x8c2>
 800cd02:	461a      	mov	r2, r3
 800cd04:	4601      	mov	r1, r0
 800cd06:	4620      	mov	r0, r4
 800cd08:	f001 f8e6 	bl	800ded8 <__pow5mult>
 800cd0c:	9b06      	ldr	r3, [sp, #24]
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	4606      	mov	r6, r0
 800cd12:	f340 8081 	ble.w	800ce18 <_dtoa_r+0x8c8>
 800cd16:	f04f 0800 	mov.w	r8, #0
 800cd1a:	6933      	ldr	r3, [r6, #16]
 800cd1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cd20:	6918      	ldr	r0, [r3, #16]
 800cd22:	f000 ffc9 	bl	800dcb8 <__hi0bits>
 800cd26:	f1c0 0020 	rsb	r0, r0, #32
 800cd2a:	9b05      	ldr	r3, [sp, #20]
 800cd2c:	4418      	add	r0, r3
 800cd2e:	f010 001f 	ands.w	r0, r0, #31
 800cd32:	f000 8092 	beq.w	800ce5a <_dtoa_r+0x90a>
 800cd36:	f1c0 0320 	rsb	r3, r0, #32
 800cd3a:	2b04      	cmp	r3, #4
 800cd3c:	f340 808a 	ble.w	800ce54 <_dtoa_r+0x904>
 800cd40:	f1c0 001c 	rsb	r0, r0, #28
 800cd44:	9b04      	ldr	r3, [sp, #16]
 800cd46:	4403      	add	r3, r0
 800cd48:	9304      	str	r3, [sp, #16]
 800cd4a:	9b05      	ldr	r3, [sp, #20]
 800cd4c:	4403      	add	r3, r0
 800cd4e:	4405      	add	r5, r0
 800cd50:	9305      	str	r3, [sp, #20]
 800cd52:	9b04      	ldr	r3, [sp, #16]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	dd07      	ble.n	800cd68 <_dtoa_r+0x818>
 800cd58:	ee18 1a10 	vmov	r1, s16
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f001 f914 	bl	800df8c <__lshift>
 800cd64:	ee08 0a10 	vmov	s16, r0
 800cd68:	9b05      	ldr	r3, [sp, #20]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	dd05      	ble.n	800cd7a <_dtoa_r+0x82a>
 800cd6e:	4631      	mov	r1, r6
 800cd70:	461a      	mov	r2, r3
 800cd72:	4620      	mov	r0, r4
 800cd74:	f001 f90a 	bl	800df8c <__lshift>
 800cd78:	4606      	mov	r6, r0
 800cd7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d06e      	beq.n	800ce5e <_dtoa_r+0x90e>
 800cd80:	ee18 0a10 	vmov	r0, s16
 800cd84:	4631      	mov	r1, r6
 800cd86:	f001 f971 	bl	800e06c <__mcmp>
 800cd8a:	2800      	cmp	r0, #0
 800cd8c:	da67      	bge.n	800ce5e <_dtoa_r+0x90e>
 800cd8e:	9b00      	ldr	r3, [sp, #0]
 800cd90:	3b01      	subs	r3, #1
 800cd92:	ee18 1a10 	vmov	r1, s16
 800cd96:	9300      	str	r3, [sp, #0]
 800cd98:	220a      	movs	r2, #10
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	f000 fefb 	bl	800db98 <__multadd>
 800cda2:	9b08      	ldr	r3, [sp, #32]
 800cda4:	ee08 0a10 	vmov	s16, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	f000 81b1 	beq.w	800d110 <_dtoa_r+0xbc0>
 800cdae:	2300      	movs	r3, #0
 800cdb0:	4639      	mov	r1, r7
 800cdb2:	220a      	movs	r2, #10
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	f000 feef 	bl	800db98 <__multadd>
 800cdba:	9b02      	ldr	r3, [sp, #8]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	4607      	mov	r7, r0
 800cdc0:	f300 808e 	bgt.w	800cee0 <_dtoa_r+0x990>
 800cdc4:	9b06      	ldr	r3, [sp, #24]
 800cdc6:	2b02      	cmp	r3, #2
 800cdc8:	dc51      	bgt.n	800ce6e <_dtoa_r+0x91e>
 800cdca:	e089      	b.n	800cee0 <_dtoa_r+0x990>
 800cdcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cdce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cdd2:	e74b      	b.n	800cc6c <_dtoa_r+0x71c>
 800cdd4:	9b03      	ldr	r3, [sp, #12]
 800cdd6:	1e5e      	subs	r6, r3, #1
 800cdd8:	9b07      	ldr	r3, [sp, #28]
 800cdda:	42b3      	cmp	r3, r6
 800cddc:	bfbf      	itttt	lt
 800cdde:	9b07      	ldrlt	r3, [sp, #28]
 800cde0:	9607      	strlt	r6, [sp, #28]
 800cde2:	1af2      	sublt	r2, r6, r3
 800cde4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cde6:	bfb6      	itet	lt
 800cde8:	189b      	addlt	r3, r3, r2
 800cdea:	1b9e      	subge	r6, r3, r6
 800cdec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cdee:	9b03      	ldr	r3, [sp, #12]
 800cdf0:	bfb8      	it	lt
 800cdf2:	2600      	movlt	r6, #0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	bfb7      	itett	lt
 800cdf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cdfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ce00:	1a9d      	sublt	r5, r3, r2
 800ce02:	2300      	movlt	r3, #0
 800ce04:	e734      	b.n	800cc70 <_dtoa_r+0x720>
 800ce06:	9e07      	ldr	r6, [sp, #28]
 800ce08:	9d04      	ldr	r5, [sp, #16]
 800ce0a:	9f08      	ldr	r7, [sp, #32]
 800ce0c:	e73b      	b.n	800cc86 <_dtoa_r+0x736>
 800ce0e:	9a07      	ldr	r2, [sp, #28]
 800ce10:	e767      	b.n	800cce2 <_dtoa_r+0x792>
 800ce12:	9b06      	ldr	r3, [sp, #24]
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	dc18      	bgt.n	800ce4a <_dtoa_r+0x8fa>
 800ce18:	f1ba 0f00 	cmp.w	sl, #0
 800ce1c:	d115      	bne.n	800ce4a <_dtoa_r+0x8fa>
 800ce1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce22:	b993      	cbnz	r3, 800ce4a <_dtoa_r+0x8fa>
 800ce24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ce28:	0d1b      	lsrs	r3, r3, #20
 800ce2a:	051b      	lsls	r3, r3, #20
 800ce2c:	b183      	cbz	r3, 800ce50 <_dtoa_r+0x900>
 800ce2e:	9b04      	ldr	r3, [sp, #16]
 800ce30:	3301      	adds	r3, #1
 800ce32:	9304      	str	r3, [sp, #16]
 800ce34:	9b05      	ldr	r3, [sp, #20]
 800ce36:	3301      	adds	r3, #1
 800ce38:	9305      	str	r3, [sp, #20]
 800ce3a:	f04f 0801 	mov.w	r8, #1
 800ce3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	f47f af6a 	bne.w	800cd1a <_dtoa_r+0x7ca>
 800ce46:	2001      	movs	r0, #1
 800ce48:	e76f      	b.n	800cd2a <_dtoa_r+0x7da>
 800ce4a:	f04f 0800 	mov.w	r8, #0
 800ce4e:	e7f6      	b.n	800ce3e <_dtoa_r+0x8ee>
 800ce50:	4698      	mov	r8, r3
 800ce52:	e7f4      	b.n	800ce3e <_dtoa_r+0x8ee>
 800ce54:	f43f af7d 	beq.w	800cd52 <_dtoa_r+0x802>
 800ce58:	4618      	mov	r0, r3
 800ce5a:	301c      	adds	r0, #28
 800ce5c:	e772      	b.n	800cd44 <_dtoa_r+0x7f4>
 800ce5e:	9b03      	ldr	r3, [sp, #12]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	dc37      	bgt.n	800ced4 <_dtoa_r+0x984>
 800ce64:	9b06      	ldr	r3, [sp, #24]
 800ce66:	2b02      	cmp	r3, #2
 800ce68:	dd34      	ble.n	800ced4 <_dtoa_r+0x984>
 800ce6a:	9b03      	ldr	r3, [sp, #12]
 800ce6c:	9302      	str	r3, [sp, #8]
 800ce6e:	9b02      	ldr	r3, [sp, #8]
 800ce70:	b96b      	cbnz	r3, 800ce8e <_dtoa_r+0x93e>
 800ce72:	4631      	mov	r1, r6
 800ce74:	2205      	movs	r2, #5
 800ce76:	4620      	mov	r0, r4
 800ce78:	f000 fe8e 	bl	800db98 <__multadd>
 800ce7c:	4601      	mov	r1, r0
 800ce7e:	4606      	mov	r6, r0
 800ce80:	ee18 0a10 	vmov	r0, s16
 800ce84:	f001 f8f2 	bl	800e06c <__mcmp>
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	f73f adbb 	bgt.w	800ca04 <_dtoa_r+0x4b4>
 800ce8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce90:	9d01      	ldr	r5, [sp, #4]
 800ce92:	43db      	mvns	r3, r3
 800ce94:	9300      	str	r3, [sp, #0]
 800ce96:	f04f 0800 	mov.w	r8, #0
 800ce9a:	4631      	mov	r1, r6
 800ce9c:	4620      	mov	r0, r4
 800ce9e:	f000 fe59 	bl	800db54 <_Bfree>
 800cea2:	2f00      	cmp	r7, #0
 800cea4:	f43f aea4 	beq.w	800cbf0 <_dtoa_r+0x6a0>
 800cea8:	f1b8 0f00 	cmp.w	r8, #0
 800ceac:	d005      	beq.n	800ceba <_dtoa_r+0x96a>
 800ceae:	45b8      	cmp	r8, r7
 800ceb0:	d003      	beq.n	800ceba <_dtoa_r+0x96a>
 800ceb2:	4641      	mov	r1, r8
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	f000 fe4d 	bl	800db54 <_Bfree>
 800ceba:	4639      	mov	r1, r7
 800cebc:	4620      	mov	r0, r4
 800cebe:	f000 fe49 	bl	800db54 <_Bfree>
 800cec2:	e695      	b.n	800cbf0 <_dtoa_r+0x6a0>
 800cec4:	2600      	movs	r6, #0
 800cec6:	4637      	mov	r7, r6
 800cec8:	e7e1      	b.n	800ce8e <_dtoa_r+0x93e>
 800ceca:	9700      	str	r7, [sp, #0]
 800cecc:	4637      	mov	r7, r6
 800cece:	e599      	b.n	800ca04 <_dtoa_r+0x4b4>
 800ced0:	40240000 	.word	0x40240000
 800ced4:	9b08      	ldr	r3, [sp, #32]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	f000 80ca 	beq.w	800d070 <_dtoa_r+0xb20>
 800cedc:	9b03      	ldr	r3, [sp, #12]
 800cede:	9302      	str	r3, [sp, #8]
 800cee0:	2d00      	cmp	r5, #0
 800cee2:	dd05      	ble.n	800cef0 <_dtoa_r+0x9a0>
 800cee4:	4639      	mov	r1, r7
 800cee6:	462a      	mov	r2, r5
 800cee8:	4620      	mov	r0, r4
 800ceea:	f001 f84f 	bl	800df8c <__lshift>
 800ceee:	4607      	mov	r7, r0
 800cef0:	f1b8 0f00 	cmp.w	r8, #0
 800cef4:	d05b      	beq.n	800cfae <_dtoa_r+0xa5e>
 800cef6:	6879      	ldr	r1, [r7, #4]
 800cef8:	4620      	mov	r0, r4
 800cefa:	f000 fdeb 	bl	800dad4 <_Balloc>
 800cefe:	4605      	mov	r5, r0
 800cf00:	b928      	cbnz	r0, 800cf0e <_dtoa_r+0x9be>
 800cf02:	4b87      	ldr	r3, [pc, #540]	; (800d120 <_dtoa_r+0xbd0>)
 800cf04:	4602      	mov	r2, r0
 800cf06:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cf0a:	f7ff bb3b 	b.w	800c584 <_dtoa_r+0x34>
 800cf0e:	693a      	ldr	r2, [r7, #16]
 800cf10:	3202      	adds	r2, #2
 800cf12:	0092      	lsls	r2, r2, #2
 800cf14:	f107 010c 	add.w	r1, r7, #12
 800cf18:	300c      	adds	r0, #12
 800cf1a:	f7fd fd06 	bl	800a92a <memcpy>
 800cf1e:	2201      	movs	r2, #1
 800cf20:	4629      	mov	r1, r5
 800cf22:	4620      	mov	r0, r4
 800cf24:	f001 f832 	bl	800df8c <__lshift>
 800cf28:	9b01      	ldr	r3, [sp, #4]
 800cf2a:	f103 0901 	add.w	r9, r3, #1
 800cf2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cf32:	4413      	add	r3, r2
 800cf34:	9305      	str	r3, [sp, #20]
 800cf36:	f00a 0301 	and.w	r3, sl, #1
 800cf3a:	46b8      	mov	r8, r7
 800cf3c:	9304      	str	r3, [sp, #16]
 800cf3e:	4607      	mov	r7, r0
 800cf40:	4631      	mov	r1, r6
 800cf42:	ee18 0a10 	vmov	r0, s16
 800cf46:	f7ff fa77 	bl	800c438 <quorem>
 800cf4a:	4641      	mov	r1, r8
 800cf4c:	9002      	str	r0, [sp, #8]
 800cf4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cf52:	ee18 0a10 	vmov	r0, s16
 800cf56:	f001 f889 	bl	800e06c <__mcmp>
 800cf5a:	463a      	mov	r2, r7
 800cf5c:	9003      	str	r0, [sp, #12]
 800cf5e:	4631      	mov	r1, r6
 800cf60:	4620      	mov	r0, r4
 800cf62:	f001 f89f 	bl	800e0a4 <__mdiff>
 800cf66:	68c2      	ldr	r2, [r0, #12]
 800cf68:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800cf6c:	4605      	mov	r5, r0
 800cf6e:	bb02      	cbnz	r2, 800cfb2 <_dtoa_r+0xa62>
 800cf70:	4601      	mov	r1, r0
 800cf72:	ee18 0a10 	vmov	r0, s16
 800cf76:	f001 f879 	bl	800e06c <__mcmp>
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	4629      	mov	r1, r5
 800cf7e:	4620      	mov	r0, r4
 800cf80:	9207      	str	r2, [sp, #28]
 800cf82:	f000 fde7 	bl	800db54 <_Bfree>
 800cf86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cf8a:	ea43 0102 	orr.w	r1, r3, r2
 800cf8e:	9b04      	ldr	r3, [sp, #16]
 800cf90:	430b      	orrs	r3, r1
 800cf92:	464d      	mov	r5, r9
 800cf94:	d10f      	bne.n	800cfb6 <_dtoa_r+0xa66>
 800cf96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cf9a:	d02a      	beq.n	800cff2 <_dtoa_r+0xaa2>
 800cf9c:	9b03      	ldr	r3, [sp, #12]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	dd02      	ble.n	800cfa8 <_dtoa_r+0xa58>
 800cfa2:	9b02      	ldr	r3, [sp, #8]
 800cfa4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cfa8:	f88b a000 	strb.w	sl, [fp]
 800cfac:	e775      	b.n	800ce9a <_dtoa_r+0x94a>
 800cfae:	4638      	mov	r0, r7
 800cfb0:	e7ba      	b.n	800cf28 <_dtoa_r+0x9d8>
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	e7e2      	b.n	800cf7c <_dtoa_r+0xa2c>
 800cfb6:	9b03      	ldr	r3, [sp, #12]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	db04      	blt.n	800cfc6 <_dtoa_r+0xa76>
 800cfbc:	9906      	ldr	r1, [sp, #24]
 800cfbe:	430b      	orrs	r3, r1
 800cfc0:	9904      	ldr	r1, [sp, #16]
 800cfc2:	430b      	orrs	r3, r1
 800cfc4:	d122      	bne.n	800d00c <_dtoa_r+0xabc>
 800cfc6:	2a00      	cmp	r2, #0
 800cfc8:	ddee      	ble.n	800cfa8 <_dtoa_r+0xa58>
 800cfca:	ee18 1a10 	vmov	r1, s16
 800cfce:	2201      	movs	r2, #1
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	f000 ffdb 	bl	800df8c <__lshift>
 800cfd6:	4631      	mov	r1, r6
 800cfd8:	ee08 0a10 	vmov	s16, r0
 800cfdc:	f001 f846 	bl	800e06c <__mcmp>
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	dc03      	bgt.n	800cfec <_dtoa_r+0xa9c>
 800cfe4:	d1e0      	bne.n	800cfa8 <_dtoa_r+0xa58>
 800cfe6:	f01a 0f01 	tst.w	sl, #1
 800cfea:	d0dd      	beq.n	800cfa8 <_dtoa_r+0xa58>
 800cfec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cff0:	d1d7      	bne.n	800cfa2 <_dtoa_r+0xa52>
 800cff2:	2339      	movs	r3, #57	; 0x39
 800cff4:	f88b 3000 	strb.w	r3, [fp]
 800cff8:	462b      	mov	r3, r5
 800cffa:	461d      	mov	r5, r3
 800cffc:	3b01      	subs	r3, #1
 800cffe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d002:	2a39      	cmp	r2, #57	; 0x39
 800d004:	d071      	beq.n	800d0ea <_dtoa_r+0xb9a>
 800d006:	3201      	adds	r2, #1
 800d008:	701a      	strb	r2, [r3, #0]
 800d00a:	e746      	b.n	800ce9a <_dtoa_r+0x94a>
 800d00c:	2a00      	cmp	r2, #0
 800d00e:	dd07      	ble.n	800d020 <_dtoa_r+0xad0>
 800d010:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d014:	d0ed      	beq.n	800cff2 <_dtoa_r+0xaa2>
 800d016:	f10a 0301 	add.w	r3, sl, #1
 800d01a:	f88b 3000 	strb.w	r3, [fp]
 800d01e:	e73c      	b.n	800ce9a <_dtoa_r+0x94a>
 800d020:	9b05      	ldr	r3, [sp, #20]
 800d022:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d026:	4599      	cmp	r9, r3
 800d028:	d047      	beq.n	800d0ba <_dtoa_r+0xb6a>
 800d02a:	ee18 1a10 	vmov	r1, s16
 800d02e:	2300      	movs	r3, #0
 800d030:	220a      	movs	r2, #10
 800d032:	4620      	mov	r0, r4
 800d034:	f000 fdb0 	bl	800db98 <__multadd>
 800d038:	45b8      	cmp	r8, r7
 800d03a:	ee08 0a10 	vmov	s16, r0
 800d03e:	f04f 0300 	mov.w	r3, #0
 800d042:	f04f 020a 	mov.w	r2, #10
 800d046:	4641      	mov	r1, r8
 800d048:	4620      	mov	r0, r4
 800d04a:	d106      	bne.n	800d05a <_dtoa_r+0xb0a>
 800d04c:	f000 fda4 	bl	800db98 <__multadd>
 800d050:	4680      	mov	r8, r0
 800d052:	4607      	mov	r7, r0
 800d054:	f109 0901 	add.w	r9, r9, #1
 800d058:	e772      	b.n	800cf40 <_dtoa_r+0x9f0>
 800d05a:	f000 fd9d 	bl	800db98 <__multadd>
 800d05e:	4639      	mov	r1, r7
 800d060:	4680      	mov	r8, r0
 800d062:	2300      	movs	r3, #0
 800d064:	220a      	movs	r2, #10
 800d066:	4620      	mov	r0, r4
 800d068:	f000 fd96 	bl	800db98 <__multadd>
 800d06c:	4607      	mov	r7, r0
 800d06e:	e7f1      	b.n	800d054 <_dtoa_r+0xb04>
 800d070:	9b03      	ldr	r3, [sp, #12]
 800d072:	9302      	str	r3, [sp, #8]
 800d074:	9d01      	ldr	r5, [sp, #4]
 800d076:	ee18 0a10 	vmov	r0, s16
 800d07a:	4631      	mov	r1, r6
 800d07c:	f7ff f9dc 	bl	800c438 <quorem>
 800d080:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d084:	9b01      	ldr	r3, [sp, #4]
 800d086:	f805 ab01 	strb.w	sl, [r5], #1
 800d08a:	1aea      	subs	r2, r5, r3
 800d08c:	9b02      	ldr	r3, [sp, #8]
 800d08e:	4293      	cmp	r3, r2
 800d090:	dd09      	ble.n	800d0a6 <_dtoa_r+0xb56>
 800d092:	ee18 1a10 	vmov	r1, s16
 800d096:	2300      	movs	r3, #0
 800d098:	220a      	movs	r2, #10
 800d09a:	4620      	mov	r0, r4
 800d09c:	f000 fd7c 	bl	800db98 <__multadd>
 800d0a0:	ee08 0a10 	vmov	s16, r0
 800d0a4:	e7e7      	b.n	800d076 <_dtoa_r+0xb26>
 800d0a6:	9b02      	ldr	r3, [sp, #8]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	bfc8      	it	gt
 800d0ac:	461d      	movgt	r5, r3
 800d0ae:	9b01      	ldr	r3, [sp, #4]
 800d0b0:	bfd8      	it	le
 800d0b2:	2501      	movle	r5, #1
 800d0b4:	441d      	add	r5, r3
 800d0b6:	f04f 0800 	mov.w	r8, #0
 800d0ba:	ee18 1a10 	vmov	r1, s16
 800d0be:	2201      	movs	r2, #1
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	f000 ff63 	bl	800df8c <__lshift>
 800d0c6:	4631      	mov	r1, r6
 800d0c8:	ee08 0a10 	vmov	s16, r0
 800d0cc:	f000 ffce 	bl	800e06c <__mcmp>
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	dc91      	bgt.n	800cff8 <_dtoa_r+0xaa8>
 800d0d4:	d102      	bne.n	800d0dc <_dtoa_r+0xb8c>
 800d0d6:	f01a 0f01 	tst.w	sl, #1
 800d0da:	d18d      	bne.n	800cff8 <_dtoa_r+0xaa8>
 800d0dc:	462b      	mov	r3, r5
 800d0de:	461d      	mov	r5, r3
 800d0e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d0e4:	2a30      	cmp	r2, #48	; 0x30
 800d0e6:	d0fa      	beq.n	800d0de <_dtoa_r+0xb8e>
 800d0e8:	e6d7      	b.n	800ce9a <_dtoa_r+0x94a>
 800d0ea:	9a01      	ldr	r2, [sp, #4]
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d184      	bne.n	800cffa <_dtoa_r+0xaaa>
 800d0f0:	9b00      	ldr	r3, [sp, #0]
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	9300      	str	r3, [sp, #0]
 800d0f6:	2331      	movs	r3, #49	; 0x31
 800d0f8:	7013      	strb	r3, [r2, #0]
 800d0fa:	e6ce      	b.n	800ce9a <_dtoa_r+0x94a>
 800d0fc:	4b09      	ldr	r3, [pc, #36]	; (800d124 <_dtoa_r+0xbd4>)
 800d0fe:	f7ff ba95 	b.w	800c62c <_dtoa_r+0xdc>
 800d102:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d104:	2b00      	cmp	r3, #0
 800d106:	f47f aa6e 	bne.w	800c5e6 <_dtoa_r+0x96>
 800d10a:	4b07      	ldr	r3, [pc, #28]	; (800d128 <_dtoa_r+0xbd8>)
 800d10c:	f7ff ba8e 	b.w	800c62c <_dtoa_r+0xdc>
 800d110:	9b02      	ldr	r3, [sp, #8]
 800d112:	2b00      	cmp	r3, #0
 800d114:	dcae      	bgt.n	800d074 <_dtoa_r+0xb24>
 800d116:	9b06      	ldr	r3, [sp, #24]
 800d118:	2b02      	cmp	r3, #2
 800d11a:	f73f aea8 	bgt.w	800ce6e <_dtoa_r+0x91e>
 800d11e:	e7a9      	b.n	800d074 <_dtoa_r+0xb24>
 800d120:	0800f47f 	.word	0x0800f47f
 800d124:	0800f38c 	.word	0x0800f38c
 800d128:	0800f400 	.word	0x0800f400

0800d12c <__sflush_r>:
 800d12c:	898a      	ldrh	r2, [r1, #12]
 800d12e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d132:	4605      	mov	r5, r0
 800d134:	0710      	lsls	r0, r2, #28
 800d136:	460c      	mov	r4, r1
 800d138:	d458      	bmi.n	800d1ec <__sflush_r+0xc0>
 800d13a:	684b      	ldr	r3, [r1, #4]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	dc05      	bgt.n	800d14c <__sflush_r+0x20>
 800d140:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d142:	2b00      	cmp	r3, #0
 800d144:	dc02      	bgt.n	800d14c <__sflush_r+0x20>
 800d146:	2000      	movs	r0, #0
 800d148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d14c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d14e:	2e00      	cmp	r6, #0
 800d150:	d0f9      	beq.n	800d146 <__sflush_r+0x1a>
 800d152:	2300      	movs	r3, #0
 800d154:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d158:	682f      	ldr	r7, [r5, #0]
 800d15a:	602b      	str	r3, [r5, #0]
 800d15c:	d032      	beq.n	800d1c4 <__sflush_r+0x98>
 800d15e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d160:	89a3      	ldrh	r3, [r4, #12]
 800d162:	075a      	lsls	r2, r3, #29
 800d164:	d505      	bpl.n	800d172 <__sflush_r+0x46>
 800d166:	6863      	ldr	r3, [r4, #4]
 800d168:	1ac0      	subs	r0, r0, r3
 800d16a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d16c:	b10b      	cbz	r3, 800d172 <__sflush_r+0x46>
 800d16e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d170:	1ac0      	subs	r0, r0, r3
 800d172:	2300      	movs	r3, #0
 800d174:	4602      	mov	r2, r0
 800d176:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d178:	6a21      	ldr	r1, [r4, #32]
 800d17a:	4628      	mov	r0, r5
 800d17c:	47b0      	blx	r6
 800d17e:	1c43      	adds	r3, r0, #1
 800d180:	89a3      	ldrh	r3, [r4, #12]
 800d182:	d106      	bne.n	800d192 <__sflush_r+0x66>
 800d184:	6829      	ldr	r1, [r5, #0]
 800d186:	291d      	cmp	r1, #29
 800d188:	d82c      	bhi.n	800d1e4 <__sflush_r+0xb8>
 800d18a:	4a2a      	ldr	r2, [pc, #168]	; (800d234 <__sflush_r+0x108>)
 800d18c:	40ca      	lsrs	r2, r1
 800d18e:	07d6      	lsls	r6, r2, #31
 800d190:	d528      	bpl.n	800d1e4 <__sflush_r+0xb8>
 800d192:	2200      	movs	r2, #0
 800d194:	6062      	str	r2, [r4, #4]
 800d196:	04d9      	lsls	r1, r3, #19
 800d198:	6922      	ldr	r2, [r4, #16]
 800d19a:	6022      	str	r2, [r4, #0]
 800d19c:	d504      	bpl.n	800d1a8 <__sflush_r+0x7c>
 800d19e:	1c42      	adds	r2, r0, #1
 800d1a0:	d101      	bne.n	800d1a6 <__sflush_r+0x7a>
 800d1a2:	682b      	ldr	r3, [r5, #0]
 800d1a4:	b903      	cbnz	r3, 800d1a8 <__sflush_r+0x7c>
 800d1a6:	6560      	str	r0, [r4, #84]	; 0x54
 800d1a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1aa:	602f      	str	r7, [r5, #0]
 800d1ac:	2900      	cmp	r1, #0
 800d1ae:	d0ca      	beq.n	800d146 <__sflush_r+0x1a>
 800d1b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1b4:	4299      	cmp	r1, r3
 800d1b6:	d002      	beq.n	800d1be <__sflush_r+0x92>
 800d1b8:	4628      	mov	r0, r5
 800d1ba:	f001 f963 	bl	800e484 <_free_r>
 800d1be:	2000      	movs	r0, #0
 800d1c0:	6360      	str	r0, [r4, #52]	; 0x34
 800d1c2:	e7c1      	b.n	800d148 <__sflush_r+0x1c>
 800d1c4:	6a21      	ldr	r1, [r4, #32]
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	47b0      	blx	r6
 800d1cc:	1c41      	adds	r1, r0, #1
 800d1ce:	d1c7      	bne.n	800d160 <__sflush_r+0x34>
 800d1d0:	682b      	ldr	r3, [r5, #0]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d0c4      	beq.n	800d160 <__sflush_r+0x34>
 800d1d6:	2b1d      	cmp	r3, #29
 800d1d8:	d001      	beq.n	800d1de <__sflush_r+0xb2>
 800d1da:	2b16      	cmp	r3, #22
 800d1dc:	d101      	bne.n	800d1e2 <__sflush_r+0xb6>
 800d1de:	602f      	str	r7, [r5, #0]
 800d1e0:	e7b1      	b.n	800d146 <__sflush_r+0x1a>
 800d1e2:	89a3      	ldrh	r3, [r4, #12]
 800d1e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1e8:	81a3      	strh	r3, [r4, #12]
 800d1ea:	e7ad      	b.n	800d148 <__sflush_r+0x1c>
 800d1ec:	690f      	ldr	r7, [r1, #16]
 800d1ee:	2f00      	cmp	r7, #0
 800d1f0:	d0a9      	beq.n	800d146 <__sflush_r+0x1a>
 800d1f2:	0793      	lsls	r3, r2, #30
 800d1f4:	680e      	ldr	r6, [r1, #0]
 800d1f6:	bf08      	it	eq
 800d1f8:	694b      	ldreq	r3, [r1, #20]
 800d1fa:	600f      	str	r7, [r1, #0]
 800d1fc:	bf18      	it	ne
 800d1fe:	2300      	movne	r3, #0
 800d200:	eba6 0807 	sub.w	r8, r6, r7
 800d204:	608b      	str	r3, [r1, #8]
 800d206:	f1b8 0f00 	cmp.w	r8, #0
 800d20a:	dd9c      	ble.n	800d146 <__sflush_r+0x1a>
 800d20c:	6a21      	ldr	r1, [r4, #32]
 800d20e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d210:	4643      	mov	r3, r8
 800d212:	463a      	mov	r2, r7
 800d214:	4628      	mov	r0, r5
 800d216:	47b0      	blx	r6
 800d218:	2800      	cmp	r0, #0
 800d21a:	dc06      	bgt.n	800d22a <__sflush_r+0xfe>
 800d21c:	89a3      	ldrh	r3, [r4, #12]
 800d21e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d222:	81a3      	strh	r3, [r4, #12]
 800d224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d228:	e78e      	b.n	800d148 <__sflush_r+0x1c>
 800d22a:	4407      	add	r7, r0
 800d22c:	eba8 0800 	sub.w	r8, r8, r0
 800d230:	e7e9      	b.n	800d206 <__sflush_r+0xda>
 800d232:	bf00      	nop
 800d234:	20400001 	.word	0x20400001

0800d238 <_fflush_r>:
 800d238:	b538      	push	{r3, r4, r5, lr}
 800d23a:	690b      	ldr	r3, [r1, #16]
 800d23c:	4605      	mov	r5, r0
 800d23e:	460c      	mov	r4, r1
 800d240:	b913      	cbnz	r3, 800d248 <_fflush_r+0x10>
 800d242:	2500      	movs	r5, #0
 800d244:	4628      	mov	r0, r5
 800d246:	bd38      	pop	{r3, r4, r5, pc}
 800d248:	b118      	cbz	r0, 800d252 <_fflush_r+0x1a>
 800d24a:	6983      	ldr	r3, [r0, #24]
 800d24c:	b90b      	cbnz	r3, 800d252 <_fflush_r+0x1a>
 800d24e:	f7fd faa7 	bl	800a7a0 <__sinit>
 800d252:	4b14      	ldr	r3, [pc, #80]	; (800d2a4 <_fflush_r+0x6c>)
 800d254:	429c      	cmp	r4, r3
 800d256:	d11b      	bne.n	800d290 <_fflush_r+0x58>
 800d258:	686c      	ldr	r4, [r5, #4]
 800d25a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d0ef      	beq.n	800d242 <_fflush_r+0xa>
 800d262:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d264:	07d0      	lsls	r0, r2, #31
 800d266:	d404      	bmi.n	800d272 <_fflush_r+0x3a>
 800d268:	0599      	lsls	r1, r3, #22
 800d26a:	d402      	bmi.n	800d272 <_fflush_r+0x3a>
 800d26c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d26e:	f7fd fb5a 	bl	800a926 <__retarget_lock_acquire_recursive>
 800d272:	4628      	mov	r0, r5
 800d274:	4621      	mov	r1, r4
 800d276:	f7ff ff59 	bl	800d12c <__sflush_r>
 800d27a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d27c:	07da      	lsls	r2, r3, #31
 800d27e:	4605      	mov	r5, r0
 800d280:	d4e0      	bmi.n	800d244 <_fflush_r+0xc>
 800d282:	89a3      	ldrh	r3, [r4, #12]
 800d284:	059b      	lsls	r3, r3, #22
 800d286:	d4dd      	bmi.n	800d244 <_fflush_r+0xc>
 800d288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d28a:	f7fd fb4d 	bl	800a928 <__retarget_lock_release_recursive>
 800d28e:	e7d9      	b.n	800d244 <_fflush_r+0xc>
 800d290:	4b05      	ldr	r3, [pc, #20]	; (800d2a8 <_fflush_r+0x70>)
 800d292:	429c      	cmp	r4, r3
 800d294:	d101      	bne.n	800d29a <_fflush_r+0x62>
 800d296:	68ac      	ldr	r4, [r5, #8]
 800d298:	e7df      	b.n	800d25a <_fflush_r+0x22>
 800d29a:	4b04      	ldr	r3, [pc, #16]	; (800d2ac <_fflush_r+0x74>)
 800d29c:	429c      	cmp	r4, r3
 800d29e:	bf08      	it	eq
 800d2a0:	68ec      	ldreq	r4, [r5, #12]
 800d2a2:	e7da      	b.n	800d25a <_fflush_r+0x22>
 800d2a4:	0800f338 	.word	0x0800f338
 800d2a8:	0800f358 	.word	0x0800f358
 800d2ac:	0800f318 	.word	0x0800f318

0800d2b0 <rshift>:
 800d2b0:	6903      	ldr	r3, [r0, #16]
 800d2b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d2b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d2be:	f100 0414 	add.w	r4, r0, #20
 800d2c2:	dd45      	ble.n	800d350 <rshift+0xa0>
 800d2c4:	f011 011f 	ands.w	r1, r1, #31
 800d2c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d2cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d2d0:	d10c      	bne.n	800d2ec <rshift+0x3c>
 800d2d2:	f100 0710 	add.w	r7, r0, #16
 800d2d6:	4629      	mov	r1, r5
 800d2d8:	42b1      	cmp	r1, r6
 800d2da:	d334      	bcc.n	800d346 <rshift+0x96>
 800d2dc:	1a9b      	subs	r3, r3, r2
 800d2de:	009b      	lsls	r3, r3, #2
 800d2e0:	1eea      	subs	r2, r5, #3
 800d2e2:	4296      	cmp	r6, r2
 800d2e4:	bf38      	it	cc
 800d2e6:	2300      	movcc	r3, #0
 800d2e8:	4423      	add	r3, r4
 800d2ea:	e015      	b.n	800d318 <rshift+0x68>
 800d2ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d2f0:	f1c1 0820 	rsb	r8, r1, #32
 800d2f4:	40cf      	lsrs	r7, r1
 800d2f6:	f105 0e04 	add.w	lr, r5, #4
 800d2fa:	46a1      	mov	r9, r4
 800d2fc:	4576      	cmp	r6, lr
 800d2fe:	46f4      	mov	ip, lr
 800d300:	d815      	bhi.n	800d32e <rshift+0x7e>
 800d302:	1a9a      	subs	r2, r3, r2
 800d304:	0092      	lsls	r2, r2, #2
 800d306:	3a04      	subs	r2, #4
 800d308:	3501      	adds	r5, #1
 800d30a:	42ae      	cmp	r6, r5
 800d30c:	bf38      	it	cc
 800d30e:	2200      	movcc	r2, #0
 800d310:	18a3      	adds	r3, r4, r2
 800d312:	50a7      	str	r7, [r4, r2]
 800d314:	b107      	cbz	r7, 800d318 <rshift+0x68>
 800d316:	3304      	adds	r3, #4
 800d318:	1b1a      	subs	r2, r3, r4
 800d31a:	42a3      	cmp	r3, r4
 800d31c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d320:	bf08      	it	eq
 800d322:	2300      	moveq	r3, #0
 800d324:	6102      	str	r2, [r0, #16]
 800d326:	bf08      	it	eq
 800d328:	6143      	streq	r3, [r0, #20]
 800d32a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d32e:	f8dc c000 	ldr.w	ip, [ip]
 800d332:	fa0c fc08 	lsl.w	ip, ip, r8
 800d336:	ea4c 0707 	orr.w	r7, ip, r7
 800d33a:	f849 7b04 	str.w	r7, [r9], #4
 800d33e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d342:	40cf      	lsrs	r7, r1
 800d344:	e7da      	b.n	800d2fc <rshift+0x4c>
 800d346:	f851 cb04 	ldr.w	ip, [r1], #4
 800d34a:	f847 cf04 	str.w	ip, [r7, #4]!
 800d34e:	e7c3      	b.n	800d2d8 <rshift+0x28>
 800d350:	4623      	mov	r3, r4
 800d352:	e7e1      	b.n	800d318 <rshift+0x68>

0800d354 <__hexdig_fun>:
 800d354:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d358:	2b09      	cmp	r3, #9
 800d35a:	d802      	bhi.n	800d362 <__hexdig_fun+0xe>
 800d35c:	3820      	subs	r0, #32
 800d35e:	b2c0      	uxtb	r0, r0
 800d360:	4770      	bx	lr
 800d362:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d366:	2b05      	cmp	r3, #5
 800d368:	d801      	bhi.n	800d36e <__hexdig_fun+0x1a>
 800d36a:	3847      	subs	r0, #71	; 0x47
 800d36c:	e7f7      	b.n	800d35e <__hexdig_fun+0xa>
 800d36e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d372:	2b05      	cmp	r3, #5
 800d374:	d801      	bhi.n	800d37a <__hexdig_fun+0x26>
 800d376:	3827      	subs	r0, #39	; 0x27
 800d378:	e7f1      	b.n	800d35e <__hexdig_fun+0xa>
 800d37a:	2000      	movs	r0, #0
 800d37c:	4770      	bx	lr
	...

0800d380 <__gethex>:
 800d380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d384:	ed2d 8b02 	vpush	{d8}
 800d388:	b089      	sub	sp, #36	; 0x24
 800d38a:	ee08 0a10 	vmov	s16, r0
 800d38e:	9304      	str	r3, [sp, #16]
 800d390:	4bb4      	ldr	r3, [pc, #720]	; (800d664 <__gethex+0x2e4>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	9301      	str	r3, [sp, #4]
 800d396:	4618      	mov	r0, r3
 800d398:	468b      	mov	fp, r1
 800d39a:	4690      	mov	r8, r2
 800d39c:	f7f2 ff20 	bl	80001e0 <strlen>
 800d3a0:	9b01      	ldr	r3, [sp, #4]
 800d3a2:	f8db 2000 	ldr.w	r2, [fp]
 800d3a6:	4403      	add	r3, r0
 800d3a8:	4682      	mov	sl, r0
 800d3aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d3ae:	9305      	str	r3, [sp, #20]
 800d3b0:	1c93      	adds	r3, r2, #2
 800d3b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d3b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d3ba:	32fe      	adds	r2, #254	; 0xfe
 800d3bc:	18d1      	adds	r1, r2, r3
 800d3be:	461f      	mov	r7, r3
 800d3c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d3c4:	9100      	str	r1, [sp, #0]
 800d3c6:	2830      	cmp	r0, #48	; 0x30
 800d3c8:	d0f8      	beq.n	800d3bc <__gethex+0x3c>
 800d3ca:	f7ff ffc3 	bl	800d354 <__hexdig_fun>
 800d3ce:	4604      	mov	r4, r0
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	d13a      	bne.n	800d44a <__gethex+0xca>
 800d3d4:	9901      	ldr	r1, [sp, #4]
 800d3d6:	4652      	mov	r2, sl
 800d3d8:	4638      	mov	r0, r7
 800d3da:	f7fe f906 	bl	800b5ea <strncmp>
 800d3de:	4605      	mov	r5, r0
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	d168      	bne.n	800d4b6 <__gethex+0x136>
 800d3e4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d3e8:	eb07 060a 	add.w	r6, r7, sl
 800d3ec:	f7ff ffb2 	bl	800d354 <__hexdig_fun>
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	d062      	beq.n	800d4ba <__gethex+0x13a>
 800d3f4:	4633      	mov	r3, r6
 800d3f6:	7818      	ldrb	r0, [r3, #0]
 800d3f8:	2830      	cmp	r0, #48	; 0x30
 800d3fa:	461f      	mov	r7, r3
 800d3fc:	f103 0301 	add.w	r3, r3, #1
 800d400:	d0f9      	beq.n	800d3f6 <__gethex+0x76>
 800d402:	f7ff ffa7 	bl	800d354 <__hexdig_fun>
 800d406:	2301      	movs	r3, #1
 800d408:	fab0 f480 	clz	r4, r0
 800d40c:	0964      	lsrs	r4, r4, #5
 800d40e:	4635      	mov	r5, r6
 800d410:	9300      	str	r3, [sp, #0]
 800d412:	463a      	mov	r2, r7
 800d414:	4616      	mov	r6, r2
 800d416:	3201      	adds	r2, #1
 800d418:	7830      	ldrb	r0, [r6, #0]
 800d41a:	f7ff ff9b 	bl	800d354 <__hexdig_fun>
 800d41e:	2800      	cmp	r0, #0
 800d420:	d1f8      	bne.n	800d414 <__gethex+0x94>
 800d422:	9901      	ldr	r1, [sp, #4]
 800d424:	4652      	mov	r2, sl
 800d426:	4630      	mov	r0, r6
 800d428:	f7fe f8df 	bl	800b5ea <strncmp>
 800d42c:	b980      	cbnz	r0, 800d450 <__gethex+0xd0>
 800d42e:	b94d      	cbnz	r5, 800d444 <__gethex+0xc4>
 800d430:	eb06 050a 	add.w	r5, r6, sl
 800d434:	462a      	mov	r2, r5
 800d436:	4616      	mov	r6, r2
 800d438:	3201      	adds	r2, #1
 800d43a:	7830      	ldrb	r0, [r6, #0]
 800d43c:	f7ff ff8a 	bl	800d354 <__hexdig_fun>
 800d440:	2800      	cmp	r0, #0
 800d442:	d1f8      	bne.n	800d436 <__gethex+0xb6>
 800d444:	1bad      	subs	r5, r5, r6
 800d446:	00ad      	lsls	r5, r5, #2
 800d448:	e004      	b.n	800d454 <__gethex+0xd4>
 800d44a:	2400      	movs	r4, #0
 800d44c:	4625      	mov	r5, r4
 800d44e:	e7e0      	b.n	800d412 <__gethex+0x92>
 800d450:	2d00      	cmp	r5, #0
 800d452:	d1f7      	bne.n	800d444 <__gethex+0xc4>
 800d454:	7833      	ldrb	r3, [r6, #0]
 800d456:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d45a:	2b50      	cmp	r3, #80	; 0x50
 800d45c:	d13b      	bne.n	800d4d6 <__gethex+0x156>
 800d45e:	7873      	ldrb	r3, [r6, #1]
 800d460:	2b2b      	cmp	r3, #43	; 0x2b
 800d462:	d02c      	beq.n	800d4be <__gethex+0x13e>
 800d464:	2b2d      	cmp	r3, #45	; 0x2d
 800d466:	d02e      	beq.n	800d4c6 <__gethex+0x146>
 800d468:	1c71      	adds	r1, r6, #1
 800d46a:	f04f 0900 	mov.w	r9, #0
 800d46e:	7808      	ldrb	r0, [r1, #0]
 800d470:	f7ff ff70 	bl	800d354 <__hexdig_fun>
 800d474:	1e43      	subs	r3, r0, #1
 800d476:	b2db      	uxtb	r3, r3
 800d478:	2b18      	cmp	r3, #24
 800d47a:	d82c      	bhi.n	800d4d6 <__gethex+0x156>
 800d47c:	f1a0 0210 	sub.w	r2, r0, #16
 800d480:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d484:	f7ff ff66 	bl	800d354 <__hexdig_fun>
 800d488:	1e43      	subs	r3, r0, #1
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	2b18      	cmp	r3, #24
 800d48e:	d91d      	bls.n	800d4cc <__gethex+0x14c>
 800d490:	f1b9 0f00 	cmp.w	r9, #0
 800d494:	d000      	beq.n	800d498 <__gethex+0x118>
 800d496:	4252      	negs	r2, r2
 800d498:	4415      	add	r5, r2
 800d49a:	f8cb 1000 	str.w	r1, [fp]
 800d49e:	b1e4      	cbz	r4, 800d4da <__gethex+0x15a>
 800d4a0:	9b00      	ldr	r3, [sp, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	bf14      	ite	ne
 800d4a6:	2700      	movne	r7, #0
 800d4a8:	2706      	moveq	r7, #6
 800d4aa:	4638      	mov	r0, r7
 800d4ac:	b009      	add	sp, #36	; 0x24
 800d4ae:	ecbd 8b02 	vpop	{d8}
 800d4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4b6:	463e      	mov	r6, r7
 800d4b8:	4625      	mov	r5, r4
 800d4ba:	2401      	movs	r4, #1
 800d4bc:	e7ca      	b.n	800d454 <__gethex+0xd4>
 800d4be:	f04f 0900 	mov.w	r9, #0
 800d4c2:	1cb1      	adds	r1, r6, #2
 800d4c4:	e7d3      	b.n	800d46e <__gethex+0xee>
 800d4c6:	f04f 0901 	mov.w	r9, #1
 800d4ca:	e7fa      	b.n	800d4c2 <__gethex+0x142>
 800d4cc:	230a      	movs	r3, #10
 800d4ce:	fb03 0202 	mla	r2, r3, r2, r0
 800d4d2:	3a10      	subs	r2, #16
 800d4d4:	e7d4      	b.n	800d480 <__gethex+0x100>
 800d4d6:	4631      	mov	r1, r6
 800d4d8:	e7df      	b.n	800d49a <__gethex+0x11a>
 800d4da:	1bf3      	subs	r3, r6, r7
 800d4dc:	3b01      	subs	r3, #1
 800d4de:	4621      	mov	r1, r4
 800d4e0:	2b07      	cmp	r3, #7
 800d4e2:	dc0b      	bgt.n	800d4fc <__gethex+0x17c>
 800d4e4:	ee18 0a10 	vmov	r0, s16
 800d4e8:	f000 faf4 	bl	800dad4 <_Balloc>
 800d4ec:	4604      	mov	r4, r0
 800d4ee:	b940      	cbnz	r0, 800d502 <__gethex+0x182>
 800d4f0:	4b5d      	ldr	r3, [pc, #372]	; (800d668 <__gethex+0x2e8>)
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	21de      	movs	r1, #222	; 0xde
 800d4f6:	485d      	ldr	r0, [pc, #372]	; (800d66c <__gethex+0x2ec>)
 800d4f8:	f001 f994 	bl	800e824 <__assert_func>
 800d4fc:	3101      	adds	r1, #1
 800d4fe:	105b      	asrs	r3, r3, #1
 800d500:	e7ee      	b.n	800d4e0 <__gethex+0x160>
 800d502:	f100 0914 	add.w	r9, r0, #20
 800d506:	f04f 0b00 	mov.w	fp, #0
 800d50a:	f1ca 0301 	rsb	r3, sl, #1
 800d50e:	f8cd 9008 	str.w	r9, [sp, #8]
 800d512:	f8cd b000 	str.w	fp, [sp]
 800d516:	9306      	str	r3, [sp, #24]
 800d518:	42b7      	cmp	r7, r6
 800d51a:	d340      	bcc.n	800d59e <__gethex+0x21e>
 800d51c:	9802      	ldr	r0, [sp, #8]
 800d51e:	9b00      	ldr	r3, [sp, #0]
 800d520:	f840 3b04 	str.w	r3, [r0], #4
 800d524:	eba0 0009 	sub.w	r0, r0, r9
 800d528:	1080      	asrs	r0, r0, #2
 800d52a:	0146      	lsls	r6, r0, #5
 800d52c:	6120      	str	r0, [r4, #16]
 800d52e:	4618      	mov	r0, r3
 800d530:	f000 fbc2 	bl	800dcb8 <__hi0bits>
 800d534:	1a30      	subs	r0, r6, r0
 800d536:	f8d8 6000 	ldr.w	r6, [r8]
 800d53a:	42b0      	cmp	r0, r6
 800d53c:	dd63      	ble.n	800d606 <__gethex+0x286>
 800d53e:	1b87      	subs	r7, r0, r6
 800d540:	4639      	mov	r1, r7
 800d542:	4620      	mov	r0, r4
 800d544:	f000 ff66 	bl	800e414 <__any_on>
 800d548:	4682      	mov	sl, r0
 800d54a:	b1a8      	cbz	r0, 800d578 <__gethex+0x1f8>
 800d54c:	1e7b      	subs	r3, r7, #1
 800d54e:	1159      	asrs	r1, r3, #5
 800d550:	f003 021f 	and.w	r2, r3, #31
 800d554:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d558:	f04f 0a01 	mov.w	sl, #1
 800d55c:	fa0a f202 	lsl.w	r2, sl, r2
 800d560:	420a      	tst	r2, r1
 800d562:	d009      	beq.n	800d578 <__gethex+0x1f8>
 800d564:	4553      	cmp	r3, sl
 800d566:	dd05      	ble.n	800d574 <__gethex+0x1f4>
 800d568:	1eb9      	subs	r1, r7, #2
 800d56a:	4620      	mov	r0, r4
 800d56c:	f000 ff52 	bl	800e414 <__any_on>
 800d570:	2800      	cmp	r0, #0
 800d572:	d145      	bne.n	800d600 <__gethex+0x280>
 800d574:	f04f 0a02 	mov.w	sl, #2
 800d578:	4639      	mov	r1, r7
 800d57a:	4620      	mov	r0, r4
 800d57c:	f7ff fe98 	bl	800d2b0 <rshift>
 800d580:	443d      	add	r5, r7
 800d582:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d586:	42ab      	cmp	r3, r5
 800d588:	da4c      	bge.n	800d624 <__gethex+0x2a4>
 800d58a:	ee18 0a10 	vmov	r0, s16
 800d58e:	4621      	mov	r1, r4
 800d590:	f000 fae0 	bl	800db54 <_Bfree>
 800d594:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d596:	2300      	movs	r3, #0
 800d598:	6013      	str	r3, [r2, #0]
 800d59a:	27a3      	movs	r7, #163	; 0xa3
 800d59c:	e785      	b.n	800d4aa <__gethex+0x12a>
 800d59e:	1e73      	subs	r3, r6, #1
 800d5a0:	9a05      	ldr	r2, [sp, #20]
 800d5a2:	9303      	str	r3, [sp, #12]
 800d5a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d019      	beq.n	800d5e0 <__gethex+0x260>
 800d5ac:	f1bb 0f20 	cmp.w	fp, #32
 800d5b0:	d107      	bne.n	800d5c2 <__gethex+0x242>
 800d5b2:	9b02      	ldr	r3, [sp, #8]
 800d5b4:	9a00      	ldr	r2, [sp, #0]
 800d5b6:	f843 2b04 	str.w	r2, [r3], #4
 800d5ba:	9302      	str	r3, [sp, #8]
 800d5bc:	2300      	movs	r3, #0
 800d5be:	9300      	str	r3, [sp, #0]
 800d5c0:	469b      	mov	fp, r3
 800d5c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d5c6:	f7ff fec5 	bl	800d354 <__hexdig_fun>
 800d5ca:	9b00      	ldr	r3, [sp, #0]
 800d5cc:	f000 000f 	and.w	r0, r0, #15
 800d5d0:	fa00 f00b 	lsl.w	r0, r0, fp
 800d5d4:	4303      	orrs	r3, r0
 800d5d6:	9300      	str	r3, [sp, #0]
 800d5d8:	f10b 0b04 	add.w	fp, fp, #4
 800d5dc:	9b03      	ldr	r3, [sp, #12]
 800d5de:	e00d      	b.n	800d5fc <__gethex+0x27c>
 800d5e0:	9b03      	ldr	r3, [sp, #12]
 800d5e2:	9a06      	ldr	r2, [sp, #24]
 800d5e4:	4413      	add	r3, r2
 800d5e6:	42bb      	cmp	r3, r7
 800d5e8:	d3e0      	bcc.n	800d5ac <__gethex+0x22c>
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	9901      	ldr	r1, [sp, #4]
 800d5ee:	9307      	str	r3, [sp, #28]
 800d5f0:	4652      	mov	r2, sl
 800d5f2:	f7fd fffa 	bl	800b5ea <strncmp>
 800d5f6:	9b07      	ldr	r3, [sp, #28]
 800d5f8:	2800      	cmp	r0, #0
 800d5fa:	d1d7      	bne.n	800d5ac <__gethex+0x22c>
 800d5fc:	461e      	mov	r6, r3
 800d5fe:	e78b      	b.n	800d518 <__gethex+0x198>
 800d600:	f04f 0a03 	mov.w	sl, #3
 800d604:	e7b8      	b.n	800d578 <__gethex+0x1f8>
 800d606:	da0a      	bge.n	800d61e <__gethex+0x29e>
 800d608:	1a37      	subs	r7, r6, r0
 800d60a:	4621      	mov	r1, r4
 800d60c:	ee18 0a10 	vmov	r0, s16
 800d610:	463a      	mov	r2, r7
 800d612:	f000 fcbb 	bl	800df8c <__lshift>
 800d616:	1bed      	subs	r5, r5, r7
 800d618:	4604      	mov	r4, r0
 800d61a:	f100 0914 	add.w	r9, r0, #20
 800d61e:	f04f 0a00 	mov.w	sl, #0
 800d622:	e7ae      	b.n	800d582 <__gethex+0x202>
 800d624:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d628:	42a8      	cmp	r0, r5
 800d62a:	dd72      	ble.n	800d712 <__gethex+0x392>
 800d62c:	1b45      	subs	r5, r0, r5
 800d62e:	42ae      	cmp	r6, r5
 800d630:	dc36      	bgt.n	800d6a0 <__gethex+0x320>
 800d632:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d636:	2b02      	cmp	r3, #2
 800d638:	d02a      	beq.n	800d690 <__gethex+0x310>
 800d63a:	2b03      	cmp	r3, #3
 800d63c:	d02c      	beq.n	800d698 <__gethex+0x318>
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d11c      	bne.n	800d67c <__gethex+0x2fc>
 800d642:	42ae      	cmp	r6, r5
 800d644:	d11a      	bne.n	800d67c <__gethex+0x2fc>
 800d646:	2e01      	cmp	r6, #1
 800d648:	d112      	bne.n	800d670 <__gethex+0x2f0>
 800d64a:	9a04      	ldr	r2, [sp, #16]
 800d64c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d650:	6013      	str	r3, [r2, #0]
 800d652:	2301      	movs	r3, #1
 800d654:	6123      	str	r3, [r4, #16]
 800d656:	f8c9 3000 	str.w	r3, [r9]
 800d65a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d65c:	2762      	movs	r7, #98	; 0x62
 800d65e:	601c      	str	r4, [r3, #0]
 800d660:	e723      	b.n	800d4aa <__gethex+0x12a>
 800d662:	bf00      	nop
 800d664:	0800f4f8 	.word	0x0800f4f8
 800d668:	0800f47f 	.word	0x0800f47f
 800d66c:	0800f490 	.word	0x0800f490
 800d670:	1e71      	subs	r1, r6, #1
 800d672:	4620      	mov	r0, r4
 800d674:	f000 fece 	bl	800e414 <__any_on>
 800d678:	2800      	cmp	r0, #0
 800d67a:	d1e6      	bne.n	800d64a <__gethex+0x2ca>
 800d67c:	ee18 0a10 	vmov	r0, s16
 800d680:	4621      	mov	r1, r4
 800d682:	f000 fa67 	bl	800db54 <_Bfree>
 800d686:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d688:	2300      	movs	r3, #0
 800d68a:	6013      	str	r3, [r2, #0]
 800d68c:	2750      	movs	r7, #80	; 0x50
 800d68e:	e70c      	b.n	800d4aa <__gethex+0x12a>
 800d690:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d692:	2b00      	cmp	r3, #0
 800d694:	d1f2      	bne.n	800d67c <__gethex+0x2fc>
 800d696:	e7d8      	b.n	800d64a <__gethex+0x2ca>
 800d698:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d1d5      	bne.n	800d64a <__gethex+0x2ca>
 800d69e:	e7ed      	b.n	800d67c <__gethex+0x2fc>
 800d6a0:	1e6f      	subs	r7, r5, #1
 800d6a2:	f1ba 0f00 	cmp.w	sl, #0
 800d6a6:	d131      	bne.n	800d70c <__gethex+0x38c>
 800d6a8:	b127      	cbz	r7, 800d6b4 <__gethex+0x334>
 800d6aa:	4639      	mov	r1, r7
 800d6ac:	4620      	mov	r0, r4
 800d6ae:	f000 feb1 	bl	800e414 <__any_on>
 800d6b2:	4682      	mov	sl, r0
 800d6b4:	117b      	asrs	r3, r7, #5
 800d6b6:	2101      	movs	r1, #1
 800d6b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d6bc:	f007 071f 	and.w	r7, r7, #31
 800d6c0:	fa01 f707 	lsl.w	r7, r1, r7
 800d6c4:	421f      	tst	r7, r3
 800d6c6:	4629      	mov	r1, r5
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	bf18      	it	ne
 800d6cc:	f04a 0a02 	orrne.w	sl, sl, #2
 800d6d0:	1b76      	subs	r6, r6, r5
 800d6d2:	f7ff fded 	bl	800d2b0 <rshift>
 800d6d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d6da:	2702      	movs	r7, #2
 800d6dc:	f1ba 0f00 	cmp.w	sl, #0
 800d6e0:	d048      	beq.n	800d774 <__gethex+0x3f4>
 800d6e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d6e6:	2b02      	cmp	r3, #2
 800d6e8:	d015      	beq.n	800d716 <__gethex+0x396>
 800d6ea:	2b03      	cmp	r3, #3
 800d6ec:	d017      	beq.n	800d71e <__gethex+0x39e>
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d109      	bne.n	800d706 <__gethex+0x386>
 800d6f2:	f01a 0f02 	tst.w	sl, #2
 800d6f6:	d006      	beq.n	800d706 <__gethex+0x386>
 800d6f8:	f8d9 0000 	ldr.w	r0, [r9]
 800d6fc:	ea4a 0a00 	orr.w	sl, sl, r0
 800d700:	f01a 0f01 	tst.w	sl, #1
 800d704:	d10e      	bne.n	800d724 <__gethex+0x3a4>
 800d706:	f047 0710 	orr.w	r7, r7, #16
 800d70a:	e033      	b.n	800d774 <__gethex+0x3f4>
 800d70c:	f04f 0a01 	mov.w	sl, #1
 800d710:	e7d0      	b.n	800d6b4 <__gethex+0x334>
 800d712:	2701      	movs	r7, #1
 800d714:	e7e2      	b.n	800d6dc <__gethex+0x35c>
 800d716:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d718:	f1c3 0301 	rsb	r3, r3, #1
 800d71c:	9315      	str	r3, [sp, #84]	; 0x54
 800d71e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d720:	2b00      	cmp	r3, #0
 800d722:	d0f0      	beq.n	800d706 <__gethex+0x386>
 800d724:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d728:	f104 0314 	add.w	r3, r4, #20
 800d72c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d730:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d734:	f04f 0c00 	mov.w	ip, #0
 800d738:	4618      	mov	r0, r3
 800d73a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d73e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800d742:	d01c      	beq.n	800d77e <__gethex+0x3fe>
 800d744:	3201      	adds	r2, #1
 800d746:	6002      	str	r2, [r0, #0]
 800d748:	2f02      	cmp	r7, #2
 800d74a:	f104 0314 	add.w	r3, r4, #20
 800d74e:	d13f      	bne.n	800d7d0 <__gethex+0x450>
 800d750:	f8d8 2000 	ldr.w	r2, [r8]
 800d754:	3a01      	subs	r2, #1
 800d756:	42b2      	cmp	r2, r6
 800d758:	d10a      	bne.n	800d770 <__gethex+0x3f0>
 800d75a:	1171      	asrs	r1, r6, #5
 800d75c:	2201      	movs	r2, #1
 800d75e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d762:	f006 061f 	and.w	r6, r6, #31
 800d766:	fa02 f606 	lsl.w	r6, r2, r6
 800d76a:	421e      	tst	r6, r3
 800d76c:	bf18      	it	ne
 800d76e:	4617      	movne	r7, r2
 800d770:	f047 0720 	orr.w	r7, r7, #32
 800d774:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d776:	601c      	str	r4, [r3, #0]
 800d778:	9b04      	ldr	r3, [sp, #16]
 800d77a:	601d      	str	r5, [r3, #0]
 800d77c:	e695      	b.n	800d4aa <__gethex+0x12a>
 800d77e:	4299      	cmp	r1, r3
 800d780:	f843 cc04 	str.w	ip, [r3, #-4]
 800d784:	d8d8      	bhi.n	800d738 <__gethex+0x3b8>
 800d786:	68a3      	ldr	r3, [r4, #8]
 800d788:	459b      	cmp	fp, r3
 800d78a:	db19      	blt.n	800d7c0 <__gethex+0x440>
 800d78c:	6861      	ldr	r1, [r4, #4]
 800d78e:	ee18 0a10 	vmov	r0, s16
 800d792:	3101      	adds	r1, #1
 800d794:	f000 f99e 	bl	800dad4 <_Balloc>
 800d798:	4681      	mov	r9, r0
 800d79a:	b918      	cbnz	r0, 800d7a4 <__gethex+0x424>
 800d79c:	4b1a      	ldr	r3, [pc, #104]	; (800d808 <__gethex+0x488>)
 800d79e:	4602      	mov	r2, r0
 800d7a0:	2184      	movs	r1, #132	; 0x84
 800d7a2:	e6a8      	b.n	800d4f6 <__gethex+0x176>
 800d7a4:	6922      	ldr	r2, [r4, #16]
 800d7a6:	3202      	adds	r2, #2
 800d7a8:	f104 010c 	add.w	r1, r4, #12
 800d7ac:	0092      	lsls	r2, r2, #2
 800d7ae:	300c      	adds	r0, #12
 800d7b0:	f7fd f8bb 	bl	800a92a <memcpy>
 800d7b4:	4621      	mov	r1, r4
 800d7b6:	ee18 0a10 	vmov	r0, s16
 800d7ba:	f000 f9cb 	bl	800db54 <_Bfree>
 800d7be:	464c      	mov	r4, r9
 800d7c0:	6923      	ldr	r3, [r4, #16]
 800d7c2:	1c5a      	adds	r2, r3, #1
 800d7c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d7c8:	6122      	str	r2, [r4, #16]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	615a      	str	r2, [r3, #20]
 800d7ce:	e7bb      	b.n	800d748 <__gethex+0x3c8>
 800d7d0:	6922      	ldr	r2, [r4, #16]
 800d7d2:	455a      	cmp	r2, fp
 800d7d4:	dd0b      	ble.n	800d7ee <__gethex+0x46e>
 800d7d6:	2101      	movs	r1, #1
 800d7d8:	4620      	mov	r0, r4
 800d7da:	f7ff fd69 	bl	800d2b0 <rshift>
 800d7de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d7e2:	3501      	adds	r5, #1
 800d7e4:	42ab      	cmp	r3, r5
 800d7e6:	f6ff aed0 	blt.w	800d58a <__gethex+0x20a>
 800d7ea:	2701      	movs	r7, #1
 800d7ec:	e7c0      	b.n	800d770 <__gethex+0x3f0>
 800d7ee:	f016 061f 	ands.w	r6, r6, #31
 800d7f2:	d0fa      	beq.n	800d7ea <__gethex+0x46a>
 800d7f4:	4453      	add	r3, sl
 800d7f6:	f1c6 0620 	rsb	r6, r6, #32
 800d7fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d7fe:	f000 fa5b 	bl	800dcb8 <__hi0bits>
 800d802:	42b0      	cmp	r0, r6
 800d804:	dbe7      	blt.n	800d7d6 <__gethex+0x456>
 800d806:	e7f0      	b.n	800d7ea <__gethex+0x46a>
 800d808:	0800f47f 	.word	0x0800f47f

0800d80c <L_shift>:
 800d80c:	f1c2 0208 	rsb	r2, r2, #8
 800d810:	0092      	lsls	r2, r2, #2
 800d812:	b570      	push	{r4, r5, r6, lr}
 800d814:	f1c2 0620 	rsb	r6, r2, #32
 800d818:	6843      	ldr	r3, [r0, #4]
 800d81a:	6804      	ldr	r4, [r0, #0]
 800d81c:	fa03 f506 	lsl.w	r5, r3, r6
 800d820:	432c      	orrs	r4, r5
 800d822:	40d3      	lsrs	r3, r2
 800d824:	6004      	str	r4, [r0, #0]
 800d826:	f840 3f04 	str.w	r3, [r0, #4]!
 800d82a:	4288      	cmp	r0, r1
 800d82c:	d3f4      	bcc.n	800d818 <L_shift+0xc>
 800d82e:	bd70      	pop	{r4, r5, r6, pc}

0800d830 <__match>:
 800d830:	b530      	push	{r4, r5, lr}
 800d832:	6803      	ldr	r3, [r0, #0]
 800d834:	3301      	adds	r3, #1
 800d836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d83a:	b914      	cbnz	r4, 800d842 <__match+0x12>
 800d83c:	6003      	str	r3, [r0, #0]
 800d83e:	2001      	movs	r0, #1
 800d840:	bd30      	pop	{r4, r5, pc}
 800d842:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d846:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d84a:	2d19      	cmp	r5, #25
 800d84c:	bf98      	it	ls
 800d84e:	3220      	addls	r2, #32
 800d850:	42a2      	cmp	r2, r4
 800d852:	d0f0      	beq.n	800d836 <__match+0x6>
 800d854:	2000      	movs	r0, #0
 800d856:	e7f3      	b.n	800d840 <__match+0x10>

0800d858 <__hexnan>:
 800d858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d85c:	680b      	ldr	r3, [r1, #0]
 800d85e:	115e      	asrs	r6, r3, #5
 800d860:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d864:	f013 031f 	ands.w	r3, r3, #31
 800d868:	b087      	sub	sp, #28
 800d86a:	bf18      	it	ne
 800d86c:	3604      	addne	r6, #4
 800d86e:	2500      	movs	r5, #0
 800d870:	1f37      	subs	r7, r6, #4
 800d872:	4690      	mov	r8, r2
 800d874:	6802      	ldr	r2, [r0, #0]
 800d876:	9301      	str	r3, [sp, #4]
 800d878:	4682      	mov	sl, r0
 800d87a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d87e:	46b9      	mov	r9, r7
 800d880:	463c      	mov	r4, r7
 800d882:	9502      	str	r5, [sp, #8]
 800d884:	46ab      	mov	fp, r5
 800d886:	7851      	ldrb	r1, [r2, #1]
 800d888:	1c53      	adds	r3, r2, #1
 800d88a:	9303      	str	r3, [sp, #12]
 800d88c:	b341      	cbz	r1, 800d8e0 <__hexnan+0x88>
 800d88e:	4608      	mov	r0, r1
 800d890:	9205      	str	r2, [sp, #20]
 800d892:	9104      	str	r1, [sp, #16]
 800d894:	f7ff fd5e 	bl	800d354 <__hexdig_fun>
 800d898:	2800      	cmp	r0, #0
 800d89a:	d14f      	bne.n	800d93c <__hexnan+0xe4>
 800d89c:	9904      	ldr	r1, [sp, #16]
 800d89e:	9a05      	ldr	r2, [sp, #20]
 800d8a0:	2920      	cmp	r1, #32
 800d8a2:	d818      	bhi.n	800d8d6 <__hexnan+0x7e>
 800d8a4:	9b02      	ldr	r3, [sp, #8]
 800d8a6:	459b      	cmp	fp, r3
 800d8a8:	dd13      	ble.n	800d8d2 <__hexnan+0x7a>
 800d8aa:	454c      	cmp	r4, r9
 800d8ac:	d206      	bcs.n	800d8bc <__hexnan+0x64>
 800d8ae:	2d07      	cmp	r5, #7
 800d8b0:	dc04      	bgt.n	800d8bc <__hexnan+0x64>
 800d8b2:	462a      	mov	r2, r5
 800d8b4:	4649      	mov	r1, r9
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	f7ff ffa8 	bl	800d80c <L_shift>
 800d8bc:	4544      	cmp	r4, r8
 800d8be:	d950      	bls.n	800d962 <__hexnan+0x10a>
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	f1a4 0904 	sub.w	r9, r4, #4
 800d8c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d8ca:	f8cd b008 	str.w	fp, [sp, #8]
 800d8ce:	464c      	mov	r4, r9
 800d8d0:	461d      	mov	r5, r3
 800d8d2:	9a03      	ldr	r2, [sp, #12]
 800d8d4:	e7d7      	b.n	800d886 <__hexnan+0x2e>
 800d8d6:	2929      	cmp	r1, #41	; 0x29
 800d8d8:	d156      	bne.n	800d988 <__hexnan+0x130>
 800d8da:	3202      	adds	r2, #2
 800d8dc:	f8ca 2000 	str.w	r2, [sl]
 800d8e0:	f1bb 0f00 	cmp.w	fp, #0
 800d8e4:	d050      	beq.n	800d988 <__hexnan+0x130>
 800d8e6:	454c      	cmp	r4, r9
 800d8e8:	d206      	bcs.n	800d8f8 <__hexnan+0xa0>
 800d8ea:	2d07      	cmp	r5, #7
 800d8ec:	dc04      	bgt.n	800d8f8 <__hexnan+0xa0>
 800d8ee:	462a      	mov	r2, r5
 800d8f0:	4649      	mov	r1, r9
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	f7ff ff8a 	bl	800d80c <L_shift>
 800d8f8:	4544      	cmp	r4, r8
 800d8fa:	d934      	bls.n	800d966 <__hexnan+0x10e>
 800d8fc:	f1a8 0204 	sub.w	r2, r8, #4
 800d900:	4623      	mov	r3, r4
 800d902:	f853 1b04 	ldr.w	r1, [r3], #4
 800d906:	f842 1f04 	str.w	r1, [r2, #4]!
 800d90a:	429f      	cmp	r7, r3
 800d90c:	d2f9      	bcs.n	800d902 <__hexnan+0xaa>
 800d90e:	1b3b      	subs	r3, r7, r4
 800d910:	f023 0303 	bic.w	r3, r3, #3
 800d914:	3304      	adds	r3, #4
 800d916:	3401      	adds	r4, #1
 800d918:	3e03      	subs	r6, #3
 800d91a:	42b4      	cmp	r4, r6
 800d91c:	bf88      	it	hi
 800d91e:	2304      	movhi	r3, #4
 800d920:	4443      	add	r3, r8
 800d922:	2200      	movs	r2, #0
 800d924:	f843 2b04 	str.w	r2, [r3], #4
 800d928:	429f      	cmp	r7, r3
 800d92a:	d2fb      	bcs.n	800d924 <__hexnan+0xcc>
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	b91b      	cbnz	r3, 800d938 <__hexnan+0xe0>
 800d930:	4547      	cmp	r7, r8
 800d932:	d127      	bne.n	800d984 <__hexnan+0x12c>
 800d934:	2301      	movs	r3, #1
 800d936:	603b      	str	r3, [r7, #0]
 800d938:	2005      	movs	r0, #5
 800d93a:	e026      	b.n	800d98a <__hexnan+0x132>
 800d93c:	3501      	adds	r5, #1
 800d93e:	2d08      	cmp	r5, #8
 800d940:	f10b 0b01 	add.w	fp, fp, #1
 800d944:	dd06      	ble.n	800d954 <__hexnan+0xfc>
 800d946:	4544      	cmp	r4, r8
 800d948:	d9c3      	bls.n	800d8d2 <__hexnan+0x7a>
 800d94a:	2300      	movs	r3, #0
 800d94c:	f844 3c04 	str.w	r3, [r4, #-4]
 800d950:	2501      	movs	r5, #1
 800d952:	3c04      	subs	r4, #4
 800d954:	6822      	ldr	r2, [r4, #0]
 800d956:	f000 000f 	and.w	r0, r0, #15
 800d95a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d95e:	6022      	str	r2, [r4, #0]
 800d960:	e7b7      	b.n	800d8d2 <__hexnan+0x7a>
 800d962:	2508      	movs	r5, #8
 800d964:	e7b5      	b.n	800d8d2 <__hexnan+0x7a>
 800d966:	9b01      	ldr	r3, [sp, #4]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d0df      	beq.n	800d92c <__hexnan+0xd4>
 800d96c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d970:	f1c3 0320 	rsb	r3, r3, #32
 800d974:	fa22 f303 	lsr.w	r3, r2, r3
 800d978:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d97c:	401a      	ands	r2, r3
 800d97e:	f846 2c04 	str.w	r2, [r6, #-4]
 800d982:	e7d3      	b.n	800d92c <__hexnan+0xd4>
 800d984:	3f04      	subs	r7, #4
 800d986:	e7d1      	b.n	800d92c <__hexnan+0xd4>
 800d988:	2004      	movs	r0, #4
 800d98a:	b007      	add	sp, #28
 800d98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d990 <_localeconv_r>:
 800d990:	4800      	ldr	r0, [pc, #0]	; (800d994 <_localeconv_r+0x4>)
 800d992:	4770      	bx	lr
 800d994:	20000168 	.word	0x20000168

0800d998 <_lseek_r>:
 800d998:	b538      	push	{r3, r4, r5, lr}
 800d99a:	4d07      	ldr	r5, [pc, #28]	; (800d9b8 <_lseek_r+0x20>)
 800d99c:	4604      	mov	r4, r0
 800d99e:	4608      	mov	r0, r1
 800d9a0:	4611      	mov	r1, r2
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	602a      	str	r2, [r5, #0]
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	f7f4 fe8c 	bl	80026c4 <_lseek>
 800d9ac:	1c43      	adds	r3, r0, #1
 800d9ae:	d102      	bne.n	800d9b6 <_lseek_r+0x1e>
 800d9b0:	682b      	ldr	r3, [r5, #0]
 800d9b2:	b103      	cbz	r3, 800d9b6 <_lseek_r+0x1e>
 800d9b4:	6023      	str	r3, [r4, #0]
 800d9b6:	bd38      	pop	{r3, r4, r5, pc}
 800d9b8:	20004908 	.word	0x20004908

0800d9bc <__swhatbuf_r>:
 800d9bc:	b570      	push	{r4, r5, r6, lr}
 800d9be:	460e      	mov	r6, r1
 800d9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9c4:	2900      	cmp	r1, #0
 800d9c6:	b096      	sub	sp, #88	; 0x58
 800d9c8:	4614      	mov	r4, r2
 800d9ca:	461d      	mov	r5, r3
 800d9cc:	da08      	bge.n	800d9e0 <__swhatbuf_r+0x24>
 800d9ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	602a      	str	r2, [r5, #0]
 800d9d6:	061a      	lsls	r2, r3, #24
 800d9d8:	d410      	bmi.n	800d9fc <__swhatbuf_r+0x40>
 800d9da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9de:	e00e      	b.n	800d9fe <__swhatbuf_r+0x42>
 800d9e0:	466a      	mov	r2, sp
 800d9e2:	f000 ff4f 	bl	800e884 <_fstat_r>
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	dbf1      	blt.n	800d9ce <__swhatbuf_r+0x12>
 800d9ea:	9a01      	ldr	r2, [sp, #4]
 800d9ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d9f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d9f4:	425a      	negs	r2, r3
 800d9f6:	415a      	adcs	r2, r3
 800d9f8:	602a      	str	r2, [r5, #0]
 800d9fa:	e7ee      	b.n	800d9da <__swhatbuf_r+0x1e>
 800d9fc:	2340      	movs	r3, #64	; 0x40
 800d9fe:	2000      	movs	r0, #0
 800da00:	6023      	str	r3, [r4, #0]
 800da02:	b016      	add	sp, #88	; 0x58
 800da04:	bd70      	pop	{r4, r5, r6, pc}
	...

0800da08 <__smakebuf_r>:
 800da08:	898b      	ldrh	r3, [r1, #12]
 800da0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da0c:	079d      	lsls	r5, r3, #30
 800da0e:	4606      	mov	r6, r0
 800da10:	460c      	mov	r4, r1
 800da12:	d507      	bpl.n	800da24 <__smakebuf_r+0x1c>
 800da14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da18:	6023      	str	r3, [r4, #0]
 800da1a:	6123      	str	r3, [r4, #16]
 800da1c:	2301      	movs	r3, #1
 800da1e:	6163      	str	r3, [r4, #20]
 800da20:	b002      	add	sp, #8
 800da22:	bd70      	pop	{r4, r5, r6, pc}
 800da24:	ab01      	add	r3, sp, #4
 800da26:	466a      	mov	r2, sp
 800da28:	f7ff ffc8 	bl	800d9bc <__swhatbuf_r>
 800da2c:	9900      	ldr	r1, [sp, #0]
 800da2e:	4605      	mov	r5, r0
 800da30:	4630      	mov	r0, r6
 800da32:	f7fc ffb1 	bl	800a998 <_malloc_r>
 800da36:	b948      	cbnz	r0, 800da4c <__smakebuf_r+0x44>
 800da38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da3c:	059a      	lsls	r2, r3, #22
 800da3e:	d4ef      	bmi.n	800da20 <__smakebuf_r+0x18>
 800da40:	f023 0303 	bic.w	r3, r3, #3
 800da44:	f043 0302 	orr.w	r3, r3, #2
 800da48:	81a3      	strh	r3, [r4, #12]
 800da4a:	e7e3      	b.n	800da14 <__smakebuf_r+0xc>
 800da4c:	4b0d      	ldr	r3, [pc, #52]	; (800da84 <__smakebuf_r+0x7c>)
 800da4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800da50:	89a3      	ldrh	r3, [r4, #12]
 800da52:	6020      	str	r0, [r4, #0]
 800da54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da58:	81a3      	strh	r3, [r4, #12]
 800da5a:	9b00      	ldr	r3, [sp, #0]
 800da5c:	6163      	str	r3, [r4, #20]
 800da5e:	9b01      	ldr	r3, [sp, #4]
 800da60:	6120      	str	r0, [r4, #16]
 800da62:	b15b      	cbz	r3, 800da7c <__smakebuf_r+0x74>
 800da64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da68:	4630      	mov	r0, r6
 800da6a:	f000 ff1d 	bl	800e8a8 <_isatty_r>
 800da6e:	b128      	cbz	r0, 800da7c <__smakebuf_r+0x74>
 800da70:	89a3      	ldrh	r3, [r4, #12]
 800da72:	f023 0303 	bic.w	r3, r3, #3
 800da76:	f043 0301 	orr.w	r3, r3, #1
 800da7a:	81a3      	strh	r3, [r4, #12]
 800da7c:	89a0      	ldrh	r0, [r4, #12]
 800da7e:	4305      	orrs	r5, r0
 800da80:	81a5      	strh	r5, [r4, #12]
 800da82:	e7cd      	b.n	800da20 <__smakebuf_r+0x18>
 800da84:	0800a739 	.word	0x0800a739

0800da88 <malloc>:
 800da88:	4b02      	ldr	r3, [pc, #8]	; (800da94 <malloc+0xc>)
 800da8a:	4601      	mov	r1, r0
 800da8c:	6818      	ldr	r0, [r3, #0]
 800da8e:	f7fc bf83 	b.w	800a998 <_malloc_r>
 800da92:	bf00      	nop
 800da94:	20000010 	.word	0x20000010

0800da98 <__ascii_mbtowc>:
 800da98:	b082      	sub	sp, #8
 800da9a:	b901      	cbnz	r1, 800da9e <__ascii_mbtowc+0x6>
 800da9c:	a901      	add	r1, sp, #4
 800da9e:	b142      	cbz	r2, 800dab2 <__ascii_mbtowc+0x1a>
 800daa0:	b14b      	cbz	r3, 800dab6 <__ascii_mbtowc+0x1e>
 800daa2:	7813      	ldrb	r3, [r2, #0]
 800daa4:	600b      	str	r3, [r1, #0]
 800daa6:	7812      	ldrb	r2, [r2, #0]
 800daa8:	1e10      	subs	r0, r2, #0
 800daaa:	bf18      	it	ne
 800daac:	2001      	movne	r0, #1
 800daae:	b002      	add	sp, #8
 800dab0:	4770      	bx	lr
 800dab2:	4610      	mov	r0, r2
 800dab4:	e7fb      	b.n	800daae <__ascii_mbtowc+0x16>
 800dab6:	f06f 0001 	mvn.w	r0, #1
 800daba:	e7f8      	b.n	800daae <__ascii_mbtowc+0x16>

0800dabc <__malloc_lock>:
 800dabc:	4801      	ldr	r0, [pc, #4]	; (800dac4 <__malloc_lock+0x8>)
 800dabe:	f7fc bf32 	b.w	800a926 <__retarget_lock_acquire_recursive>
 800dac2:	bf00      	nop
 800dac4:	200048fc 	.word	0x200048fc

0800dac8 <__malloc_unlock>:
 800dac8:	4801      	ldr	r0, [pc, #4]	; (800dad0 <__malloc_unlock+0x8>)
 800daca:	f7fc bf2d 	b.w	800a928 <__retarget_lock_release_recursive>
 800dace:	bf00      	nop
 800dad0:	200048fc 	.word	0x200048fc

0800dad4 <_Balloc>:
 800dad4:	b570      	push	{r4, r5, r6, lr}
 800dad6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dad8:	4604      	mov	r4, r0
 800dada:	460d      	mov	r5, r1
 800dadc:	b976      	cbnz	r6, 800dafc <_Balloc+0x28>
 800dade:	2010      	movs	r0, #16
 800dae0:	f7ff ffd2 	bl	800da88 <malloc>
 800dae4:	4602      	mov	r2, r0
 800dae6:	6260      	str	r0, [r4, #36]	; 0x24
 800dae8:	b920      	cbnz	r0, 800daf4 <_Balloc+0x20>
 800daea:	4b18      	ldr	r3, [pc, #96]	; (800db4c <_Balloc+0x78>)
 800daec:	4818      	ldr	r0, [pc, #96]	; (800db50 <_Balloc+0x7c>)
 800daee:	2166      	movs	r1, #102	; 0x66
 800daf0:	f000 fe98 	bl	800e824 <__assert_func>
 800daf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800daf8:	6006      	str	r6, [r0, #0]
 800dafa:	60c6      	str	r6, [r0, #12]
 800dafc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dafe:	68f3      	ldr	r3, [r6, #12]
 800db00:	b183      	cbz	r3, 800db24 <_Balloc+0x50>
 800db02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db04:	68db      	ldr	r3, [r3, #12]
 800db06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800db0a:	b9b8      	cbnz	r0, 800db3c <_Balloc+0x68>
 800db0c:	2101      	movs	r1, #1
 800db0e:	fa01 f605 	lsl.w	r6, r1, r5
 800db12:	1d72      	adds	r2, r6, #5
 800db14:	0092      	lsls	r2, r2, #2
 800db16:	4620      	mov	r0, r4
 800db18:	f000 fc9d 	bl	800e456 <_calloc_r>
 800db1c:	b160      	cbz	r0, 800db38 <_Balloc+0x64>
 800db1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800db22:	e00e      	b.n	800db42 <_Balloc+0x6e>
 800db24:	2221      	movs	r2, #33	; 0x21
 800db26:	2104      	movs	r1, #4
 800db28:	4620      	mov	r0, r4
 800db2a:	f000 fc94 	bl	800e456 <_calloc_r>
 800db2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db30:	60f0      	str	r0, [r6, #12]
 800db32:	68db      	ldr	r3, [r3, #12]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d1e4      	bne.n	800db02 <_Balloc+0x2e>
 800db38:	2000      	movs	r0, #0
 800db3a:	bd70      	pop	{r4, r5, r6, pc}
 800db3c:	6802      	ldr	r2, [r0, #0]
 800db3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800db42:	2300      	movs	r3, #0
 800db44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800db48:	e7f7      	b.n	800db3a <_Balloc+0x66>
 800db4a:	bf00      	nop
 800db4c:	0800f40d 	.word	0x0800f40d
 800db50:	0800f50c 	.word	0x0800f50c

0800db54 <_Bfree>:
 800db54:	b570      	push	{r4, r5, r6, lr}
 800db56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800db58:	4605      	mov	r5, r0
 800db5a:	460c      	mov	r4, r1
 800db5c:	b976      	cbnz	r6, 800db7c <_Bfree+0x28>
 800db5e:	2010      	movs	r0, #16
 800db60:	f7ff ff92 	bl	800da88 <malloc>
 800db64:	4602      	mov	r2, r0
 800db66:	6268      	str	r0, [r5, #36]	; 0x24
 800db68:	b920      	cbnz	r0, 800db74 <_Bfree+0x20>
 800db6a:	4b09      	ldr	r3, [pc, #36]	; (800db90 <_Bfree+0x3c>)
 800db6c:	4809      	ldr	r0, [pc, #36]	; (800db94 <_Bfree+0x40>)
 800db6e:	218a      	movs	r1, #138	; 0x8a
 800db70:	f000 fe58 	bl	800e824 <__assert_func>
 800db74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db78:	6006      	str	r6, [r0, #0]
 800db7a:	60c6      	str	r6, [r0, #12]
 800db7c:	b13c      	cbz	r4, 800db8e <_Bfree+0x3a>
 800db7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800db80:	6862      	ldr	r2, [r4, #4]
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db88:	6021      	str	r1, [r4, #0]
 800db8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800db8e:	bd70      	pop	{r4, r5, r6, pc}
 800db90:	0800f40d 	.word	0x0800f40d
 800db94:	0800f50c 	.word	0x0800f50c

0800db98 <__multadd>:
 800db98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db9c:	690d      	ldr	r5, [r1, #16]
 800db9e:	4607      	mov	r7, r0
 800dba0:	460c      	mov	r4, r1
 800dba2:	461e      	mov	r6, r3
 800dba4:	f101 0c14 	add.w	ip, r1, #20
 800dba8:	2000      	movs	r0, #0
 800dbaa:	f8dc 3000 	ldr.w	r3, [ip]
 800dbae:	b299      	uxth	r1, r3
 800dbb0:	fb02 6101 	mla	r1, r2, r1, r6
 800dbb4:	0c1e      	lsrs	r6, r3, #16
 800dbb6:	0c0b      	lsrs	r3, r1, #16
 800dbb8:	fb02 3306 	mla	r3, r2, r6, r3
 800dbbc:	b289      	uxth	r1, r1
 800dbbe:	3001      	adds	r0, #1
 800dbc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dbc4:	4285      	cmp	r5, r0
 800dbc6:	f84c 1b04 	str.w	r1, [ip], #4
 800dbca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dbce:	dcec      	bgt.n	800dbaa <__multadd+0x12>
 800dbd0:	b30e      	cbz	r6, 800dc16 <__multadd+0x7e>
 800dbd2:	68a3      	ldr	r3, [r4, #8]
 800dbd4:	42ab      	cmp	r3, r5
 800dbd6:	dc19      	bgt.n	800dc0c <__multadd+0x74>
 800dbd8:	6861      	ldr	r1, [r4, #4]
 800dbda:	4638      	mov	r0, r7
 800dbdc:	3101      	adds	r1, #1
 800dbde:	f7ff ff79 	bl	800dad4 <_Balloc>
 800dbe2:	4680      	mov	r8, r0
 800dbe4:	b928      	cbnz	r0, 800dbf2 <__multadd+0x5a>
 800dbe6:	4602      	mov	r2, r0
 800dbe8:	4b0c      	ldr	r3, [pc, #48]	; (800dc1c <__multadd+0x84>)
 800dbea:	480d      	ldr	r0, [pc, #52]	; (800dc20 <__multadd+0x88>)
 800dbec:	21b5      	movs	r1, #181	; 0xb5
 800dbee:	f000 fe19 	bl	800e824 <__assert_func>
 800dbf2:	6922      	ldr	r2, [r4, #16]
 800dbf4:	3202      	adds	r2, #2
 800dbf6:	f104 010c 	add.w	r1, r4, #12
 800dbfa:	0092      	lsls	r2, r2, #2
 800dbfc:	300c      	adds	r0, #12
 800dbfe:	f7fc fe94 	bl	800a92a <memcpy>
 800dc02:	4621      	mov	r1, r4
 800dc04:	4638      	mov	r0, r7
 800dc06:	f7ff ffa5 	bl	800db54 <_Bfree>
 800dc0a:	4644      	mov	r4, r8
 800dc0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dc10:	3501      	adds	r5, #1
 800dc12:	615e      	str	r6, [r3, #20]
 800dc14:	6125      	str	r5, [r4, #16]
 800dc16:	4620      	mov	r0, r4
 800dc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc1c:	0800f47f 	.word	0x0800f47f
 800dc20:	0800f50c 	.word	0x0800f50c

0800dc24 <__s2b>:
 800dc24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc28:	460c      	mov	r4, r1
 800dc2a:	4615      	mov	r5, r2
 800dc2c:	461f      	mov	r7, r3
 800dc2e:	2209      	movs	r2, #9
 800dc30:	3308      	adds	r3, #8
 800dc32:	4606      	mov	r6, r0
 800dc34:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc38:	2100      	movs	r1, #0
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	db09      	blt.n	800dc54 <__s2b+0x30>
 800dc40:	4630      	mov	r0, r6
 800dc42:	f7ff ff47 	bl	800dad4 <_Balloc>
 800dc46:	b940      	cbnz	r0, 800dc5a <__s2b+0x36>
 800dc48:	4602      	mov	r2, r0
 800dc4a:	4b19      	ldr	r3, [pc, #100]	; (800dcb0 <__s2b+0x8c>)
 800dc4c:	4819      	ldr	r0, [pc, #100]	; (800dcb4 <__s2b+0x90>)
 800dc4e:	21ce      	movs	r1, #206	; 0xce
 800dc50:	f000 fde8 	bl	800e824 <__assert_func>
 800dc54:	0052      	lsls	r2, r2, #1
 800dc56:	3101      	adds	r1, #1
 800dc58:	e7f0      	b.n	800dc3c <__s2b+0x18>
 800dc5a:	9b08      	ldr	r3, [sp, #32]
 800dc5c:	6143      	str	r3, [r0, #20]
 800dc5e:	2d09      	cmp	r5, #9
 800dc60:	f04f 0301 	mov.w	r3, #1
 800dc64:	6103      	str	r3, [r0, #16]
 800dc66:	dd16      	ble.n	800dc96 <__s2b+0x72>
 800dc68:	f104 0909 	add.w	r9, r4, #9
 800dc6c:	46c8      	mov	r8, r9
 800dc6e:	442c      	add	r4, r5
 800dc70:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dc74:	4601      	mov	r1, r0
 800dc76:	3b30      	subs	r3, #48	; 0x30
 800dc78:	220a      	movs	r2, #10
 800dc7a:	4630      	mov	r0, r6
 800dc7c:	f7ff ff8c 	bl	800db98 <__multadd>
 800dc80:	45a0      	cmp	r8, r4
 800dc82:	d1f5      	bne.n	800dc70 <__s2b+0x4c>
 800dc84:	f1a5 0408 	sub.w	r4, r5, #8
 800dc88:	444c      	add	r4, r9
 800dc8a:	1b2d      	subs	r5, r5, r4
 800dc8c:	1963      	adds	r3, r4, r5
 800dc8e:	42bb      	cmp	r3, r7
 800dc90:	db04      	blt.n	800dc9c <__s2b+0x78>
 800dc92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc96:	340a      	adds	r4, #10
 800dc98:	2509      	movs	r5, #9
 800dc9a:	e7f6      	b.n	800dc8a <__s2b+0x66>
 800dc9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dca0:	4601      	mov	r1, r0
 800dca2:	3b30      	subs	r3, #48	; 0x30
 800dca4:	220a      	movs	r2, #10
 800dca6:	4630      	mov	r0, r6
 800dca8:	f7ff ff76 	bl	800db98 <__multadd>
 800dcac:	e7ee      	b.n	800dc8c <__s2b+0x68>
 800dcae:	bf00      	nop
 800dcb0:	0800f47f 	.word	0x0800f47f
 800dcb4:	0800f50c 	.word	0x0800f50c

0800dcb8 <__hi0bits>:
 800dcb8:	0c03      	lsrs	r3, r0, #16
 800dcba:	041b      	lsls	r3, r3, #16
 800dcbc:	b9d3      	cbnz	r3, 800dcf4 <__hi0bits+0x3c>
 800dcbe:	0400      	lsls	r0, r0, #16
 800dcc0:	2310      	movs	r3, #16
 800dcc2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dcc6:	bf04      	itt	eq
 800dcc8:	0200      	lsleq	r0, r0, #8
 800dcca:	3308      	addeq	r3, #8
 800dccc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dcd0:	bf04      	itt	eq
 800dcd2:	0100      	lsleq	r0, r0, #4
 800dcd4:	3304      	addeq	r3, #4
 800dcd6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dcda:	bf04      	itt	eq
 800dcdc:	0080      	lsleq	r0, r0, #2
 800dcde:	3302      	addeq	r3, #2
 800dce0:	2800      	cmp	r0, #0
 800dce2:	db05      	blt.n	800dcf0 <__hi0bits+0x38>
 800dce4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dce8:	f103 0301 	add.w	r3, r3, #1
 800dcec:	bf08      	it	eq
 800dcee:	2320      	moveq	r3, #32
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	4770      	bx	lr
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	e7e4      	b.n	800dcc2 <__hi0bits+0xa>

0800dcf8 <__lo0bits>:
 800dcf8:	6803      	ldr	r3, [r0, #0]
 800dcfa:	f013 0207 	ands.w	r2, r3, #7
 800dcfe:	4601      	mov	r1, r0
 800dd00:	d00b      	beq.n	800dd1a <__lo0bits+0x22>
 800dd02:	07da      	lsls	r2, r3, #31
 800dd04:	d423      	bmi.n	800dd4e <__lo0bits+0x56>
 800dd06:	0798      	lsls	r0, r3, #30
 800dd08:	bf49      	itett	mi
 800dd0a:	085b      	lsrmi	r3, r3, #1
 800dd0c:	089b      	lsrpl	r3, r3, #2
 800dd0e:	2001      	movmi	r0, #1
 800dd10:	600b      	strmi	r3, [r1, #0]
 800dd12:	bf5c      	itt	pl
 800dd14:	600b      	strpl	r3, [r1, #0]
 800dd16:	2002      	movpl	r0, #2
 800dd18:	4770      	bx	lr
 800dd1a:	b298      	uxth	r0, r3
 800dd1c:	b9a8      	cbnz	r0, 800dd4a <__lo0bits+0x52>
 800dd1e:	0c1b      	lsrs	r3, r3, #16
 800dd20:	2010      	movs	r0, #16
 800dd22:	b2da      	uxtb	r2, r3
 800dd24:	b90a      	cbnz	r2, 800dd2a <__lo0bits+0x32>
 800dd26:	3008      	adds	r0, #8
 800dd28:	0a1b      	lsrs	r3, r3, #8
 800dd2a:	071a      	lsls	r2, r3, #28
 800dd2c:	bf04      	itt	eq
 800dd2e:	091b      	lsreq	r3, r3, #4
 800dd30:	3004      	addeq	r0, #4
 800dd32:	079a      	lsls	r2, r3, #30
 800dd34:	bf04      	itt	eq
 800dd36:	089b      	lsreq	r3, r3, #2
 800dd38:	3002      	addeq	r0, #2
 800dd3a:	07da      	lsls	r2, r3, #31
 800dd3c:	d403      	bmi.n	800dd46 <__lo0bits+0x4e>
 800dd3e:	085b      	lsrs	r3, r3, #1
 800dd40:	f100 0001 	add.w	r0, r0, #1
 800dd44:	d005      	beq.n	800dd52 <__lo0bits+0x5a>
 800dd46:	600b      	str	r3, [r1, #0]
 800dd48:	4770      	bx	lr
 800dd4a:	4610      	mov	r0, r2
 800dd4c:	e7e9      	b.n	800dd22 <__lo0bits+0x2a>
 800dd4e:	2000      	movs	r0, #0
 800dd50:	4770      	bx	lr
 800dd52:	2020      	movs	r0, #32
 800dd54:	4770      	bx	lr
	...

0800dd58 <__i2b>:
 800dd58:	b510      	push	{r4, lr}
 800dd5a:	460c      	mov	r4, r1
 800dd5c:	2101      	movs	r1, #1
 800dd5e:	f7ff feb9 	bl	800dad4 <_Balloc>
 800dd62:	4602      	mov	r2, r0
 800dd64:	b928      	cbnz	r0, 800dd72 <__i2b+0x1a>
 800dd66:	4b05      	ldr	r3, [pc, #20]	; (800dd7c <__i2b+0x24>)
 800dd68:	4805      	ldr	r0, [pc, #20]	; (800dd80 <__i2b+0x28>)
 800dd6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dd6e:	f000 fd59 	bl	800e824 <__assert_func>
 800dd72:	2301      	movs	r3, #1
 800dd74:	6144      	str	r4, [r0, #20]
 800dd76:	6103      	str	r3, [r0, #16]
 800dd78:	bd10      	pop	{r4, pc}
 800dd7a:	bf00      	nop
 800dd7c:	0800f47f 	.word	0x0800f47f
 800dd80:	0800f50c 	.word	0x0800f50c

0800dd84 <__multiply>:
 800dd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd88:	4691      	mov	r9, r2
 800dd8a:	690a      	ldr	r2, [r1, #16]
 800dd8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	bfb8      	it	lt
 800dd94:	460b      	movlt	r3, r1
 800dd96:	460c      	mov	r4, r1
 800dd98:	bfbc      	itt	lt
 800dd9a:	464c      	movlt	r4, r9
 800dd9c:	4699      	movlt	r9, r3
 800dd9e:	6927      	ldr	r7, [r4, #16]
 800dda0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dda4:	68a3      	ldr	r3, [r4, #8]
 800dda6:	6861      	ldr	r1, [r4, #4]
 800dda8:	eb07 060a 	add.w	r6, r7, sl
 800ddac:	42b3      	cmp	r3, r6
 800ddae:	b085      	sub	sp, #20
 800ddb0:	bfb8      	it	lt
 800ddb2:	3101      	addlt	r1, #1
 800ddb4:	f7ff fe8e 	bl	800dad4 <_Balloc>
 800ddb8:	b930      	cbnz	r0, 800ddc8 <__multiply+0x44>
 800ddba:	4602      	mov	r2, r0
 800ddbc:	4b44      	ldr	r3, [pc, #272]	; (800ded0 <__multiply+0x14c>)
 800ddbe:	4845      	ldr	r0, [pc, #276]	; (800ded4 <__multiply+0x150>)
 800ddc0:	f240 115d 	movw	r1, #349	; 0x15d
 800ddc4:	f000 fd2e 	bl	800e824 <__assert_func>
 800ddc8:	f100 0514 	add.w	r5, r0, #20
 800ddcc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ddd0:	462b      	mov	r3, r5
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	4543      	cmp	r3, r8
 800ddd6:	d321      	bcc.n	800de1c <__multiply+0x98>
 800ddd8:	f104 0314 	add.w	r3, r4, #20
 800dddc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dde0:	f109 0314 	add.w	r3, r9, #20
 800dde4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dde8:	9202      	str	r2, [sp, #8]
 800ddea:	1b3a      	subs	r2, r7, r4
 800ddec:	3a15      	subs	r2, #21
 800ddee:	f022 0203 	bic.w	r2, r2, #3
 800ddf2:	3204      	adds	r2, #4
 800ddf4:	f104 0115 	add.w	r1, r4, #21
 800ddf8:	428f      	cmp	r7, r1
 800ddfa:	bf38      	it	cc
 800ddfc:	2204      	movcc	r2, #4
 800ddfe:	9201      	str	r2, [sp, #4]
 800de00:	9a02      	ldr	r2, [sp, #8]
 800de02:	9303      	str	r3, [sp, #12]
 800de04:	429a      	cmp	r2, r3
 800de06:	d80c      	bhi.n	800de22 <__multiply+0x9e>
 800de08:	2e00      	cmp	r6, #0
 800de0a:	dd03      	ble.n	800de14 <__multiply+0x90>
 800de0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800de10:	2b00      	cmp	r3, #0
 800de12:	d05a      	beq.n	800deca <__multiply+0x146>
 800de14:	6106      	str	r6, [r0, #16]
 800de16:	b005      	add	sp, #20
 800de18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de1c:	f843 2b04 	str.w	r2, [r3], #4
 800de20:	e7d8      	b.n	800ddd4 <__multiply+0x50>
 800de22:	f8b3 a000 	ldrh.w	sl, [r3]
 800de26:	f1ba 0f00 	cmp.w	sl, #0
 800de2a:	d024      	beq.n	800de76 <__multiply+0xf2>
 800de2c:	f104 0e14 	add.w	lr, r4, #20
 800de30:	46a9      	mov	r9, r5
 800de32:	f04f 0c00 	mov.w	ip, #0
 800de36:	f85e 2b04 	ldr.w	r2, [lr], #4
 800de3a:	f8d9 1000 	ldr.w	r1, [r9]
 800de3e:	fa1f fb82 	uxth.w	fp, r2
 800de42:	b289      	uxth	r1, r1
 800de44:	fb0a 110b 	mla	r1, sl, fp, r1
 800de48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800de4c:	f8d9 2000 	ldr.w	r2, [r9]
 800de50:	4461      	add	r1, ip
 800de52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800de56:	fb0a c20b 	mla	r2, sl, fp, ip
 800de5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800de5e:	b289      	uxth	r1, r1
 800de60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800de64:	4577      	cmp	r7, lr
 800de66:	f849 1b04 	str.w	r1, [r9], #4
 800de6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800de6e:	d8e2      	bhi.n	800de36 <__multiply+0xb2>
 800de70:	9a01      	ldr	r2, [sp, #4]
 800de72:	f845 c002 	str.w	ip, [r5, r2]
 800de76:	9a03      	ldr	r2, [sp, #12]
 800de78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800de7c:	3304      	adds	r3, #4
 800de7e:	f1b9 0f00 	cmp.w	r9, #0
 800de82:	d020      	beq.n	800dec6 <__multiply+0x142>
 800de84:	6829      	ldr	r1, [r5, #0]
 800de86:	f104 0c14 	add.w	ip, r4, #20
 800de8a:	46ae      	mov	lr, r5
 800de8c:	f04f 0a00 	mov.w	sl, #0
 800de90:	f8bc b000 	ldrh.w	fp, [ip]
 800de94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800de98:	fb09 220b 	mla	r2, r9, fp, r2
 800de9c:	4492      	add	sl, r2
 800de9e:	b289      	uxth	r1, r1
 800dea0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dea4:	f84e 1b04 	str.w	r1, [lr], #4
 800dea8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800deac:	f8be 1000 	ldrh.w	r1, [lr]
 800deb0:	0c12      	lsrs	r2, r2, #16
 800deb2:	fb09 1102 	mla	r1, r9, r2, r1
 800deb6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800deba:	4567      	cmp	r7, ip
 800debc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dec0:	d8e6      	bhi.n	800de90 <__multiply+0x10c>
 800dec2:	9a01      	ldr	r2, [sp, #4]
 800dec4:	50a9      	str	r1, [r5, r2]
 800dec6:	3504      	adds	r5, #4
 800dec8:	e79a      	b.n	800de00 <__multiply+0x7c>
 800deca:	3e01      	subs	r6, #1
 800decc:	e79c      	b.n	800de08 <__multiply+0x84>
 800dece:	bf00      	nop
 800ded0:	0800f47f 	.word	0x0800f47f
 800ded4:	0800f50c 	.word	0x0800f50c

0800ded8 <__pow5mult>:
 800ded8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dedc:	4615      	mov	r5, r2
 800dede:	f012 0203 	ands.w	r2, r2, #3
 800dee2:	4606      	mov	r6, r0
 800dee4:	460f      	mov	r7, r1
 800dee6:	d007      	beq.n	800def8 <__pow5mult+0x20>
 800dee8:	4c25      	ldr	r4, [pc, #148]	; (800df80 <__pow5mult+0xa8>)
 800deea:	3a01      	subs	r2, #1
 800deec:	2300      	movs	r3, #0
 800deee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800def2:	f7ff fe51 	bl	800db98 <__multadd>
 800def6:	4607      	mov	r7, r0
 800def8:	10ad      	asrs	r5, r5, #2
 800defa:	d03d      	beq.n	800df78 <__pow5mult+0xa0>
 800defc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800defe:	b97c      	cbnz	r4, 800df20 <__pow5mult+0x48>
 800df00:	2010      	movs	r0, #16
 800df02:	f7ff fdc1 	bl	800da88 <malloc>
 800df06:	4602      	mov	r2, r0
 800df08:	6270      	str	r0, [r6, #36]	; 0x24
 800df0a:	b928      	cbnz	r0, 800df18 <__pow5mult+0x40>
 800df0c:	4b1d      	ldr	r3, [pc, #116]	; (800df84 <__pow5mult+0xac>)
 800df0e:	481e      	ldr	r0, [pc, #120]	; (800df88 <__pow5mult+0xb0>)
 800df10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800df14:	f000 fc86 	bl	800e824 <__assert_func>
 800df18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800df1c:	6004      	str	r4, [r0, #0]
 800df1e:	60c4      	str	r4, [r0, #12]
 800df20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800df24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800df28:	b94c      	cbnz	r4, 800df3e <__pow5mult+0x66>
 800df2a:	f240 2171 	movw	r1, #625	; 0x271
 800df2e:	4630      	mov	r0, r6
 800df30:	f7ff ff12 	bl	800dd58 <__i2b>
 800df34:	2300      	movs	r3, #0
 800df36:	f8c8 0008 	str.w	r0, [r8, #8]
 800df3a:	4604      	mov	r4, r0
 800df3c:	6003      	str	r3, [r0, #0]
 800df3e:	f04f 0900 	mov.w	r9, #0
 800df42:	07eb      	lsls	r3, r5, #31
 800df44:	d50a      	bpl.n	800df5c <__pow5mult+0x84>
 800df46:	4639      	mov	r1, r7
 800df48:	4622      	mov	r2, r4
 800df4a:	4630      	mov	r0, r6
 800df4c:	f7ff ff1a 	bl	800dd84 <__multiply>
 800df50:	4639      	mov	r1, r7
 800df52:	4680      	mov	r8, r0
 800df54:	4630      	mov	r0, r6
 800df56:	f7ff fdfd 	bl	800db54 <_Bfree>
 800df5a:	4647      	mov	r7, r8
 800df5c:	106d      	asrs	r5, r5, #1
 800df5e:	d00b      	beq.n	800df78 <__pow5mult+0xa0>
 800df60:	6820      	ldr	r0, [r4, #0]
 800df62:	b938      	cbnz	r0, 800df74 <__pow5mult+0x9c>
 800df64:	4622      	mov	r2, r4
 800df66:	4621      	mov	r1, r4
 800df68:	4630      	mov	r0, r6
 800df6a:	f7ff ff0b 	bl	800dd84 <__multiply>
 800df6e:	6020      	str	r0, [r4, #0]
 800df70:	f8c0 9000 	str.w	r9, [r0]
 800df74:	4604      	mov	r4, r0
 800df76:	e7e4      	b.n	800df42 <__pow5mult+0x6a>
 800df78:	4638      	mov	r0, r7
 800df7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df7e:	bf00      	nop
 800df80:	0800f658 	.word	0x0800f658
 800df84:	0800f40d 	.word	0x0800f40d
 800df88:	0800f50c 	.word	0x0800f50c

0800df8c <__lshift>:
 800df8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df90:	460c      	mov	r4, r1
 800df92:	6849      	ldr	r1, [r1, #4]
 800df94:	6923      	ldr	r3, [r4, #16]
 800df96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800df9a:	68a3      	ldr	r3, [r4, #8]
 800df9c:	4607      	mov	r7, r0
 800df9e:	4691      	mov	r9, r2
 800dfa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dfa4:	f108 0601 	add.w	r6, r8, #1
 800dfa8:	42b3      	cmp	r3, r6
 800dfaa:	db0b      	blt.n	800dfc4 <__lshift+0x38>
 800dfac:	4638      	mov	r0, r7
 800dfae:	f7ff fd91 	bl	800dad4 <_Balloc>
 800dfb2:	4605      	mov	r5, r0
 800dfb4:	b948      	cbnz	r0, 800dfca <__lshift+0x3e>
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	4b2a      	ldr	r3, [pc, #168]	; (800e064 <__lshift+0xd8>)
 800dfba:	482b      	ldr	r0, [pc, #172]	; (800e068 <__lshift+0xdc>)
 800dfbc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dfc0:	f000 fc30 	bl	800e824 <__assert_func>
 800dfc4:	3101      	adds	r1, #1
 800dfc6:	005b      	lsls	r3, r3, #1
 800dfc8:	e7ee      	b.n	800dfa8 <__lshift+0x1c>
 800dfca:	2300      	movs	r3, #0
 800dfcc:	f100 0114 	add.w	r1, r0, #20
 800dfd0:	f100 0210 	add.w	r2, r0, #16
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	4553      	cmp	r3, sl
 800dfd8:	db37      	blt.n	800e04a <__lshift+0xbe>
 800dfda:	6920      	ldr	r0, [r4, #16]
 800dfdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dfe0:	f104 0314 	add.w	r3, r4, #20
 800dfe4:	f019 091f 	ands.w	r9, r9, #31
 800dfe8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dfec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dff0:	d02f      	beq.n	800e052 <__lshift+0xc6>
 800dff2:	f1c9 0e20 	rsb	lr, r9, #32
 800dff6:	468a      	mov	sl, r1
 800dff8:	f04f 0c00 	mov.w	ip, #0
 800dffc:	681a      	ldr	r2, [r3, #0]
 800dffe:	fa02 f209 	lsl.w	r2, r2, r9
 800e002:	ea42 020c 	orr.w	r2, r2, ip
 800e006:	f84a 2b04 	str.w	r2, [sl], #4
 800e00a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e00e:	4298      	cmp	r0, r3
 800e010:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e014:	d8f2      	bhi.n	800dffc <__lshift+0x70>
 800e016:	1b03      	subs	r3, r0, r4
 800e018:	3b15      	subs	r3, #21
 800e01a:	f023 0303 	bic.w	r3, r3, #3
 800e01e:	3304      	adds	r3, #4
 800e020:	f104 0215 	add.w	r2, r4, #21
 800e024:	4290      	cmp	r0, r2
 800e026:	bf38      	it	cc
 800e028:	2304      	movcc	r3, #4
 800e02a:	f841 c003 	str.w	ip, [r1, r3]
 800e02e:	f1bc 0f00 	cmp.w	ip, #0
 800e032:	d001      	beq.n	800e038 <__lshift+0xac>
 800e034:	f108 0602 	add.w	r6, r8, #2
 800e038:	3e01      	subs	r6, #1
 800e03a:	4638      	mov	r0, r7
 800e03c:	612e      	str	r6, [r5, #16]
 800e03e:	4621      	mov	r1, r4
 800e040:	f7ff fd88 	bl	800db54 <_Bfree>
 800e044:	4628      	mov	r0, r5
 800e046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e04a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e04e:	3301      	adds	r3, #1
 800e050:	e7c1      	b.n	800dfd6 <__lshift+0x4a>
 800e052:	3904      	subs	r1, #4
 800e054:	f853 2b04 	ldr.w	r2, [r3], #4
 800e058:	f841 2f04 	str.w	r2, [r1, #4]!
 800e05c:	4298      	cmp	r0, r3
 800e05e:	d8f9      	bhi.n	800e054 <__lshift+0xc8>
 800e060:	e7ea      	b.n	800e038 <__lshift+0xac>
 800e062:	bf00      	nop
 800e064:	0800f47f 	.word	0x0800f47f
 800e068:	0800f50c 	.word	0x0800f50c

0800e06c <__mcmp>:
 800e06c:	b530      	push	{r4, r5, lr}
 800e06e:	6902      	ldr	r2, [r0, #16]
 800e070:	690c      	ldr	r4, [r1, #16]
 800e072:	1b12      	subs	r2, r2, r4
 800e074:	d10e      	bne.n	800e094 <__mcmp+0x28>
 800e076:	f100 0314 	add.w	r3, r0, #20
 800e07a:	3114      	adds	r1, #20
 800e07c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e080:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e084:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e088:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e08c:	42a5      	cmp	r5, r4
 800e08e:	d003      	beq.n	800e098 <__mcmp+0x2c>
 800e090:	d305      	bcc.n	800e09e <__mcmp+0x32>
 800e092:	2201      	movs	r2, #1
 800e094:	4610      	mov	r0, r2
 800e096:	bd30      	pop	{r4, r5, pc}
 800e098:	4283      	cmp	r3, r0
 800e09a:	d3f3      	bcc.n	800e084 <__mcmp+0x18>
 800e09c:	e7fa      	b.n	800e094 <__mcmp+0x28>
 800e09e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0a2:	e7f7      	b.n	800e094 <__mcmp+0x28>

0800e0a4 <__mdiff>:
 800e0a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a8:	460c      	mov	r4, r1
 800e0aa:	4606      	mov	r6, r0
 800e0ac:	4611      	mov	r1, r2
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	4690      	mov	r8, r2
 800e0b2:	f7ff ffdb 	bl	800e06c <__mcmp>
 800e0b6:	1e05      	subs	r5, r0, #0
 800e0b8:	d110      	bne.n	800e0dc <__mdiff+0x38>
 800e0ba:	4629      	mov	r1, r5
 800e0bc:	4630      	mov	r0, r6
 800e0be:	f7ff fd09 	bl	800dad4 <_Balloc>
 800e0c2:	b930      	cbnz	r0, 800e0d2 <__mdiff+0x2e>
 800e0c4:	4b3a      	ldr	r3, [pc, #232]	; (800e1b0 <__mdiff+0x10c>)
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	f240 2132 	movw	r1, #562	; 0x232
 800e0cc:	4839      	ldr	r0, [pc, #228]	; (800e1b4 <__mdiff+0x110>)
 800e0ce:	f000 fba9 	bl	800e824 <__assert_func>
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e0d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0dc:	bfa4      	itt	ge
 800e0de:	4643      	movge	r3, r8
 800e0e0:	46a0      	movge	r8, r4
 800e0e2:	4630      	mov	r0, r6
 800e0e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e0e8:	bfa6      	itte	ge
 800e0ea:	461c      	movge	r4, r3
 800e0ec:	2500      	movge	r5, #0
 800e0ee:	2501      	movlt	r5, #1
 800e0f0:	f7ff fcf0 	bl	800dad4 <_Balloc>
 800e0f4:	b920      	cbnz	r0, 800e100 <__mdiff+0x5c>
 800e0f6:	4b2e      	ldr	r3, [pc, #184]	; (800e1b0 <__mdiff+0x10c>)
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e0fe:	e7e5      	b.n	800e0cc <__mdiff+0x28>
 800e100:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e104:	6926      	ldr	r6, [r4, #16]
 800e106:	60c5      	str	r5, [r0, #12]
 800e108:	f104 0914 	add.w	r9, r4, #20
 800e10c:	f108 0514 	add.w	r5, r8, #20
 800e110:	f100 0e14 	add.w	lr, r0, #20
 800e114:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e118:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e11c:	f108 0210 	add.w	r2, r8, #16
 800e120:	46f2      	mov	sl, lr
 800e122:	2100      	movs	r1, #0
 800e124:	f859 3b04 	ldr.w	r3, [r9], #4
 800e128:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e12c:	fa1f f883 	uxth.w	r8, r3
 800e130:	fa11 f18b 	uxtah	r1, r1, fp
 800e134:	0c1b      	lsrs	r3, r3, #16
 800e136:	eba1 0808 	sub.w	r8, r1, r8
 800e13a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e13e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e142:	fa1f f888 	uxth.w	r8, r8
 800e146:	1419      	asrs	r1, r3, #16
 800e148:	454e      	cmp	r6, r9
 800e14a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e14e:	f84a 3b04 	str.w	r3, [sl], #4
 800e152:	d8e7      	bhi.n	800e124 <__mdiff+0x80>
 800e154:	1b33      	subs	r3, r6, r4
 800e156:	3b15      	subs	r3, #21
 800e158:	f023 0303 	bic.w	r3, r3, #3
 800e15c:	3304      	adds	r3, #4
 800e15e:	3415      	adds	r4, #21
 800e160:	42a6      	cmp	r6, r4
 800e162:	bf38      	it	cc
 800e164:	2304      	movcc	r3, #4
 800e166:	441d      	add	r5, r3
 800e168:	4473      	add	r3, lr
 800e16a:	469e      	mov	lr, r3
 800e16c:	462e      	mov	r6, r5
 800e16e:	4566      	cmp	r6, ip
 800e170:	d30e      	bcc.n	800e190 <__mdiff+0xec>
 800e172:	f10c 0203 	add.w	r2, ip, #3
 800e176:	1b52      	subs	r2, r2, r5
 800e178:	f022 0203 	bic.w	r2, r2, #3
 800e17c:	3d03      	subs	r5, #3
 800e17e:	45ac      	cmp	ip, r5
 800e180:	bf38      	it	cc
 800e182:	2200      	movcc	r2, #0
 800e184:	441a      	add	r2, r3
 800e186:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e18a:	b17b      	cbz	r3, 800e1ac <__mdiff+0x108>
 800e18c:	6107      	str	r7, [r0, #16]
 800e18e:	e7a3      	b.n	800e0d8 <__mdiff+0x34>
 800e190:	f856 8b04 	ldr.w	r8, [r6], #4
 800e194:	fa11 f288 	uxtah	r2, r1, r8
 800e198:	1414      	asrs	r4, r2, #16
 800e19a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e19e:	b292      	uxth	r2, r2
 800e1a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e1a4:	f84e 2b04 	str.w	r2, [lr], #4
 800e1a8:	1421      	asrs	r1, r4, #16
 800e1aa:	e7e0      	b.n	800e16e <__mdiff+0xca>
 800e1ac:	3f01      	subs	r7, #1
 800e1ae:	e7ea      	b.n	800e186 <__mdiff+0xe2>
 800e1b0:	0800f47f 	.word	0x0800f47f
 800e1b4:	0800f50c 	.word	0x0800f50c

0800e1b8 <__ulp>:
 800e1b8:	b082      	sub	sp, #8
 800e1ba:	ed8d 0b00 	vstr	d0, [sp]
 800e1be:	9b01      	ldr	r3, [sp, #4]
 800e1c0:	4912      	ldr	r1, [pc, #72]	; (800e20c <__ulp+0x54>)
 800e1c2:	4019      	ands	r1, r3
 800e1c4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e1c8:	2900      	cmp	r1, #0
 800e1ca:	dd05      	ble.n	800e1d8 <__ulp+0x20>
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	ec43 2b10 	vmov	d0, r2, r3
 800e1d4:	b002      	add	sp, #8
 800e1d6:	4770      	bx	lr
 800e1d8:	4249      	negs	r1, r1
 800e1da:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e1de:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e1e2:	f04f 0200 	mov.w	r2, #0
 800e1e6:	f04f 0300 	mov.w	r3, #0
 800e1ea:	da04      	bge.n	800e1f6 <__ulp+0x3e>
 800e1ec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e1f0:	fa41 f300 	asr.w	r3, r1, r0
 800e1f4:	e7ec      	b.n	800e1d0 <__ulp+0x18>
 800e1f6:	f1a0 0114 	sub.w	r1, r0, #20
 800e1fa:	291e      	cmp	r1, #30
 800e1fc:	bfda      	itte	le
 800e1fe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e202:	fa20 f101 	lsrle.w	r1, r0, r1
 800e206:	2101      	movgt	r1, #1
 800e208:	460a      	mov	r2, r1
 800e20a:	e7e1      	b.n	800e1d0 <__ulp+0x18>
 800e20c:	7ff00000 	.word	0x7ff00000

0800e210 <__b2d>:
 800e210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e212:	6905      	ldr	r5, [r0, #16]
 800e214:	f100 0714 	add.w	r7, r0, #20
 800e218:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e21c:	1f2e      	subs	r6, r5, #4
 800e21e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e222:	4620      	mov	r0, r4
 800e224:	f7ff fd48 	bl	800dcb8 <__hi0bits>
 800e228:	f1c0 0320 	rsb	r3, r0, #32
 800e22c:	280a      	cmp	r0, #10
 800e22e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e2ac <__b2d+0x9c>
 800e232:	600b      	str	r3, [r1, #0]
 800e234:	dc14      	bgt.n	800e260 <__b2d+0x50>
 800e236:	f1c0 0e0b 	rsb	lr, r0, #11
 800e23a:	fa24 f10e 	lsr.w	r1, r4, lr
 800e23e:	42b7      	cmp	r7, r6
 800e240:	ea41 030c 	orr.w	r3, r1, ip
 800e244:	bf34      	ite	cc
 800e246:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e24a:	2100      	movcs	r1, #0
 800e24c:	3015      	adds	r0, #21
 800e24e:	fa04 f000 	lsl.w	r0, r4, r0
 800e252:	fa21 f10e 	lsr.w	r1, r1, lr
 800e256:	ea40 0201 	orr.w	r2, r0, r1
 800e25a:	ec43 2b10 	vmov	d0, r2, r3
 800e25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e260:	42b7      	cmp	r7, r6
 800e262:	bf3a      	itte	cc
 800e264:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e268:	f1a5 0608 	subcc.w	r6, r5, #8
 800e26c:	2100      	movcs	r1, #0
 800e26e:	380b      	subs	r0, #11
 800e270:	d017      	beq.n	800e2a2 <__b2d+0x92>
 800e272:	f1c0 0c20 	rsb	ip, r0, #32
 800e276:	fa04 f500 	lsl.w	r5, r4, r0
 800e27a:	42be      	cmp	r6, r7
 800e27c:	fa21 f40c 	lsr.w	r4, r1, ip
 800e280:	ea45 0504 	orr.w	r5, r5, r4
 800e284:	bf8c      	ite	hi
 800e286:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e28a:	2400      	movls	r4, #0
 800e28c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e290:	fa01 f000 	lsl.w	r0, r1, r0
 800e294:	fa24 f40c 	lsr.w	r4, r4, ip
 800e298:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e29c:	ea40 0204 	orr.w	r2, r0, r4
 800e2a0:	e7db      	b.n	800e25a <__b2d+0x4a>
 800e2a2:	ea44 030c 	orr.w	r3, r4, ip
 800e2a6:	460a      	mov	r2, r1
 800e2a8:	e7d7      	b.n	800e25a <__b2d+0x4a>
 800e2aa:	bf00      	nop
 800e2ac:	3ff00000 	.word	0x3ff00000

0800e2b0 <__d2b>:
 800e2b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e2b4:	4689      	mov	r9, r1
 800e2b6:	2101      	movs	r1, #1
 800e2b8:	ec57 6b10 	vmov	r6, r7, d0
 800e2bc:	4690      	mov	r8, r2
 800e2be:	f7ff fc09 	bl	800dad4 <_Balloc>
 800e2c2:	4604      	mov	r4, r0
 800e2c4:	b930      	cbnz	r0, 800e2d4 <__d2b+0x24>
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	4b25      	ldr	r3, [pc, #148]	; (800e360 <__d2b+0xb0>)
 800e2ca:	4826      	ldr	r0, [pc, #152]	; (800e364 <__d2b+0xb4>)
 800e2cc:	f240 310a 	movw	r1, #778	; 0x30a
 800e2d0:	f000 faa8 	bl	800e824 <__assert_func>
 800e2d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e2d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e2dc:	bb35      	cbnz	r5, 800e32c <__d2b+0x7c>
 800e2de:	2e00      	cmp	r6, #0
 800e2e0:	9301      	str	r3, [sp, #4]
 800e2e2:	d028      	beq.n	800e336 <__d2b+0x86>
 800e2e4:	4668      	mov	r0, sp
 800e2e6:	9600      	str	r6, [sp, #0]
 800e2e8:	f7ff fd06 	bl	800dcf8 <__lo0bits>
 800e2ec:	9900      	ldr	r1, [sp, #0]
 800e2ee:	b300      	cbz	r0, 800e332 <__d2b+0x82>
 800e2f0:	9a01      	ldr	r2, [sp, #4]
 800e2f2:	f1c0 0320 	rsb	r3, r0, #32
 800e2f6:	fa02 f303 	lsl.w	r3, r2, r3
 800e2fa:	430b      	orrs	r3, r1
 800e2fc:	40c2      	lsrs	r2, r0
 800e2fe:	6163      	str	r3, [r4, #20]
 800e300:	9201      	str	r2, [sp, #4]
 800e302:	9b01      	ldr	r3, [sp, #4]
 800e304:	61a3      	str	r3, [r4, #24]
 800e306:	2b00      	cmp	r3, #0
 800e308:	bf14      	ite	ne
 800e30a:	2202      	movne	r2, #2
 800e30c:	2201      	moveq	r2, #1
 800e30e:	6122      	str	r2, [r4, #16]
 800e310:	b1d5      	cbz	r5, 800e348 <__d2b+0x98>
 800e312:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e316:	4405      	add	r5, r0
 800e318:	f8c9 5000 	str.w	r5, [r9]
 800e31c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e320:	f8c8 0000 	str.w	r0, [r8]
 800e324:	4620      	mov	r0, r4
 800e326:	b003      	add	sp, #12
 800e328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e32c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e330:	e7d5      	b.n	800e2de <__d2b+0x2e>
 800e332:	6161      	str	r1, [r4, #20]
 800e334:	e7e5      	b.n	800e302 <__d2b+0x52>
 800e336:	a801      	add	r0, sp, #4
 800e338:	f7ff fcde 	bl	800dcf8 <__lo0bits>
 800e33c:	9b01      	ldr	r3, [sp, #4]
 800e33e:	6163      	str	r3, [r4, #20]
 800e340:	2201      	movs	r2, #1
 800e342:	6122      	str	r2, [r4, #16]
 800e344:	3020      	adds	r0, #32
 800e346:	e7e3      	b.n	800e310 <__d2b+0x60>
 800e348:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e34c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e350:	f8c9 0000 	str.w	r0, [r9]
 800e354:	6918      	ldr	r0, [r3, #16]
 800e356:	f7ff fcaf 	bl	800dcb8 <__hi0bits>
 800e35a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e35e:	e7df      	b.n	800e320 <__d2b+0x70>
 800e360:	0800f47f 	.word	0x0800f47f
 800e364:	0800f50c 	.word	0x0800f50c

0800e368 <__ratio>:
 800e368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e36c:	4688      	mov	r8, r1
 800e36e:	4669      	mov	r1, sp
 800e370:	4681      	mov	r9, r0
 800e372:	f7ff ff4d 	bl	800e210 <__b2d>
 800e376:	a901      	add	r1, sp, #4
 800e378:	4640      	mov	r0, r8
 800e37a:	ec55 4b10 	vmov	r4, r5, d0
 800e37e:	f7ff ff47 	bl	800e210 <__b2d>
 800e382:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e386:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e38a:	eba3 0c02 	sub.w	ip, r3, r2
 800e38e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e392:	1a9b      	subs	r3, r3, r2
 800e394:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e398:	ec51 0b10 	vmov	r0, r1, d0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	bfd6      	itet	le
 800e3a0:	460a      	movle	r2, r1
 800e3a2:	462a      	movgt	r2, r5
 800e3a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e3a8:	468b      	mov	fp, r1
 800e3aa:	462f      	mov	r7, r5
 800e3ac:	bfd4      	ite	le
 800e3ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e3b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	ee10 2a10 	vmov	r2, s0
 800e3bc:	465b      	mov	r3, fp
 800e3be:	4639      	mov	r1, r7
 800e3c0:	f7f2 fa4c 	bl	800085c <__aeabi_ddiv>
 800e3c4:	ec41 0b10 	vmov	d0, r0, r1
 800e3c8:	b003      	add	sp, #12
 800e3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e3ce <__copybits>:
 800e3ce:	3901      	subs	r1, #1
 800e3d0:	b570      	push	{r4, r5, r6, lr}
 800e3d2:	1149      	asrs	r1, r1, #5
 800e3d4:	6914      	ldr	r4, [r2, #16]
 800e3d6:	3101      	adds	r1, #1
 800e3d8:	f102 0314 	add.w	r3, r2, #20
 800e3dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e3e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e3e4:	1f05      	subs	r5, r0, #4
 800e3e6:	42a3      	cmp	r3, r4
 800e3e8:	d30c      	bcc.n	800e404 <__copybits+0x36>
 800e3ea:	1aa3      	subs	r3, r4, r2
 800e3ec:	3b11      	subs	r3, #17
 800e3ee:	f023 0303 	bic.w	r3, r3, #3
 800e3f2:	3211      	adds	r2, #17
 800e3f4:	42a2      	cmp	r2, r4
 800e3f6:	bf88      	it	hi
 800e3f8:	2300      	movhi	r3, #0
 800e3fa:	4418      	add	r0, r3
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	4288      	cmp	r0, r1
 800e400:	d305      	bcc.n	800e40e <__copybits+0x40>
 800e402:	bd70      	pop	{r4, r5, r6, pc}
 800e404:	f853 6b04 	ldr.w	r6, [r3], #4
 800e408:	f845 6f04 	str.w	r6, [r5, #4]!
 800e40c:	e7eb      	b.n	800e3e6 <__copybits+0x18>
 800e40e:	f840 3b04 	str.w	r3, [r0], #4
 800e412:	e7f4      	b.n	800e3fe <__copybits+0x30>

0800e414 <__any_on>:
 800e414:	f100 0214 	add.w	r2, r0, #20
 800e418:	6900      	ldr	r0, [r0, #16]
 800e41a:	114b      	asrs	r3, r1, #5
 800e41c:	4298      	cmp	r0, r3
 800e41e:	b510      	push	{r4, lr}
 800e420:	db11      	blt.n	800e446 <__any_on+0x32>
 800e422:	dd0a      	ble.n	800e43a <__any_on+0x26>
 800e424:	f011 011f 	ands.w	r1, r1, #31
 800e428:	d007      	beq.n	800e43a <__any_on+0x26>
 800e42a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e42e:	fa24 f001 	lsr.w	r0, r4, r1
 800e432:	fa00 f101 	lsl.w	r1, r0, r1
 800e436:	428c      	cmp	r4, r1
 800e438:	d10b      	bne.n	800e452 <__any_on+0x3e>
 800e43a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e43e:	4293      	cmp	r3, r2
 800e440:	d803      	bhi.n	800e44a <__any_on+0x36>
 800e442:	2000      	movs	r0, #0
 800e444:	bd10      	pop	{r4, pc}
 800e446:	4603      	mov	r3, r0
 800e448:	e7f7      	b.n	800e43a <__any_on+0x26>
 800e44a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e44e:	2900      	cmp	r1, #0
 800e450:	d0f5      	beq.n	800e43e <__any_on+0x2a>
 800e452:	2001      	movs	r0, #1
 800e454:	e7f6      	b.n	800e444 <__any_on+0x30>

0800e456 <_calloc_r>:
 800e456:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e458:	fba1 2402 	umull	r2, r4, r1, r2
 800e45c:	b94c      	cbnz	r4, 800e472 <_calloc_r+0x1c>
 800e45e:	4611      	mov	r1, r2
 800e460:	9201      	str	r2, [sp, #4]
 800e462:	f7fc fa99 	bl	800a998 <_malloc_r>
 800e466:	9a01      	ldr	r2, [sp, #4]
 800e468:	4605      	mov	r5, r0
 800e46a:	b930      	cbnz	r0, 800e47a <_calloc_r+0x24>
 800e46c:	4628      	mov	r0, r5
 800e46e:	b003      	add	sp, #12
 800e470:	bd30      	pop	{r4, r5, pc}
 800e472:	220c      	movs	r2, #12
 800e474:	6002      	str	r2, [r0, #0]
 800e476:	2500      	movs	r5, #0
 800e478:	e7f8      	b.n	800e46c <_calloc_r+0x16>
 800e47a:	4621      	mov	r1, r4
 800e47c:	f7fc fa63 	bl	800a946 <memset>
 800e480:	e7f4      	b.n	800e46c <_calloc_r+0x16>
	...

0800e484 <_free_r>:
 800e484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e486:	2900      	cmp	r1, #0
 800e488:	d044      	beq.n	800e514 <_free_r+0x90>
 800e48a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e48e:	9001      	str	r0, [sp, #4]
 800e490:	2b00      	cmp	r3, #0
 800e492:	f1a1 0404 	sub.w	r4, r1, #4
 800e496:	bfb8      	it	lt
 800e498:	18e4      	addlt	r4, r4, r3
 800e49a:	f7ff fb0f 	bl	800dabc <__malloc_lock>
 800e49e:	4a1e      	ldr	r2, [pc, #120]	; (800e518 <_free_r+0x94>)
 800e4a0:	9801      	ldr	r0, [sp, #4]
 800e4a2:	6813      	ldr	r3, [r2, #0]
 800e4a4:	b933      	cbnz	r3, 800e4b4 <_free_r+0x30>
 800e4a6:	6063      	str	r3, [r4, #4]
 800e4a8:	6014      	str	r4, [r2, #0]
 800e4aa:	b003      	add	sp, #12
 800e4ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4b0:	f7ff bb0a 	b.w	800dac8 <__malloc_unlock>
 800e4b4:	42a3      	cmp	r3, r4
 800e4b6:	d908      	bls.n	800e4ca <_free_r+0x46>
 800e4b8:	6825      	ldr	r5, [r4, #0]
 800e4ba:	1961      	adds	r1, r4, r5
 800e4bc:	428b      	cmp	r3, r1
 800e4be:	bf01      	itttt	eq
 800e4c0:	6819      	ldreq	r1, [r3, #0]
 800e4c2:	685b      	ldreq	r3, [r3, #4]
 800e4c4:	1949      	addeq	r1, r1, r5
 800e4c6:	6021      	streq	r1, [r4, #0]
 800e4c8:	e7ed      	b.n	800e4a6 <_free_r+0x22>
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	b10b      	cbz	r3, 800e4d4 <_free_r+0x50>
 800e4d0:	42a3      	cmp	r3, r4
 800e4d2:	d9fa      	bls.n	800e4ca <_free_r+0x46>
 800e4d4:	6811      	ldr	r1, [r2, #0]
 800e4d6:	1855      	adds	r5, r2, r1
 800e4d8:	42a5      	cmp	r5, r4
 800e4da:	d10b      	bne.n	800e4f4 <_free_r+0x70>
 800e4dc:	6824      	ldr	r4, [r4, #0]
 800e4de:	4421      	add	r1, r4
 800e4e0:	1854      	adds	r4, r2, r1
 800e4e2:	42a3      	cmp	r3, r4
 800e4e4:	6011      	str	r1, [r2, #0]
 800e4e6:	d1e0      	bne.n	800e4aa <_free_r+0x26>
 800e4e8:	681c      	ldr	r4, [r3, #0]
 800e4ea:	685b      	ldr	r3, [r3, #4]
 800e4ec:	6053      	str	r3, [r2, #4]
 800e4ee:	4421      	add	r1, r4
 800e4f0:	6011      	str	r1, [r2, #0]
 800e4f2:	e7da      	b.n	800e4aa <_free_r+0x26>
 800e4f4:	d902      	bls.n	800e4fc <_free_r+0x78>
 800e4f6:	230c      	movs	r3, #12
 800e4f8:	6003      	str	r3, [r0, #0]
 800e4fa:	e7d6      	b.n	800e4aa <_free_r+0x26>
 800e4fc:	6825      	ldr	r5, [r4, #0]
 800e4fe:	1961      	adds	r1, r4, r5
 800e500:	428b      	cmp	r3, r1
 800e502:	bf04      	itt	eq
 800e504:	6819      	ldreq	r1, [r3, #0]
 800e506:	685b      	ldreq	r3, [r3, #4]
 800e508:	6063      	str	r3, [r4, #4]
 800e50a:	bf04      	itt	eq
 800e50c:	1949      	addeq	r1, r1, r5
 800e50e:	6021      	streq	r1, [r4, #0]
 800e510:	6054      	str	r4, [r2, #4]
 800e512:	e7ca      	b.n	800e4aa <_free_r+0x26>
 800e514:	b003      	add	sp, #12
 800e516:	bd30      	pop	{r4, r5, pc}
 800e518:	20004900 	.word	0x20004900

0800e51c <__sfputc_r>:
 800e51c:	6893      	ldr	r3, [r2, #8]
 800e51e:	3b01      	subs	r3, #1
 800e520:	2b00      	cmp	r3, #0
 800e522:	b410      	push	{r4}
 800e524:	6093      	str	r3, [r2, #8]
 800e526:	da08      	bge.n	800e53a <__sfputc_r+0x1e>
 800e528:	6994      	ldr	r4, [r2, #24]
 800e52a:	42a3      	cmp	r3, r4
 800e52c:	db01      	blt.n	800e532 <__sfputc_r+0x16>
 800e52e:	290a      	cmp	r1, #10
 800e530:	d103      	bne.n	800e53a <__sfputc_r+0x1e>
 800e532:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e536:	f7fd be9d 	b.w	800c274 <__swbuf_r>
 800e53a:	6813      	ldr	r3, [r2, #0]
 800e53c:	1c58      	adds	r0, r3, #1
 800e53e:	6010      	str	r0, [r2, #0]
 800e540:	7019      	strb	r1, [r3, #0]
 800e542:	4608      	mov	r0, r1
 800e544:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e548:	4770      	bx	lr

0800e54a <__sfputs_r>:
 800e54a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e54c:	4606      	mov	r6, r0
 800e54e:	460f      	mov	r7, r1
 800e550:	4614      	mov	r4, r2
 800e552:	18d5      	adds	r5, r2, r3
 800e554:	42ac      	cmp	r4, r5
 800e556:	d101      	bne.n	800e55c <__sfputs_r+0x12>
 800e558:	2000      	movs	r0, #0
 800e55a:	e007      	b.n	800e56c <__sfputs_r+0x22>
 800e55c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e560:	463a      	mov	r2, r7
 800e562:	4630      	mov	r0, r6
 800e564:	f7ff ffda 	bl	800e51c <__sfputc_r>
 800e568:	1c43      	adds	r3, r0, #1
 800e56a:	d1f3      	bne.n	800e554 <__sfputs_r+0xa>
 800e56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e570 <_vfiprintf_r>:
 800e570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e574:	460d      	mov	r5, r1
 800e576:	b09d      	sub	sp, #116	; 0x74
 800e578:	4614      	mov	r4, r2
 800e57a:	4698      	mov	r8, r3
 800e57c:	4606      	mov	r6, r0
 800e57e:	b118      	cbz	r0, 800e588 <_vfiprintf_r+0x18>
 800e580:	6983      	ldr	r3, [r0, #24]
 800e582:	b90b      	cbnz	r3, 800e588 <_vfiprintf_r+0x18>
 800e584:	f7fc f90c 	bl	800a7a0 <__sinit>
 800e588:	4b89      	ldr	r3, [pc, #548]	; (800e7b0 <_vfiprintf_r+0x240>)
 800e58a:	429d      	cmp	r5, r3
 800e58c:	d11b      	bne.n	800e5c6 <_vfiprintf_r+0x56>
 800e58e:	6875      	ldr	r5, [r6, #4]
 800e590:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e592:	07d9      	lsls	r1, r3, #31
 800e594:	d405      	bmi.n	800e5a2 <_vfiprintf_r+0x32>
 800e596:	89ab      	ldrh	r3, [r5, #12]
 800e598:	059a      	lsls	r2, r3, #22
 800e59a:	d402      	bmi.n	800e5a2 <_vfiprintf_r+0x32>
 800e59c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e59e:	f7fc f9c2 	bl	800a926 <__retarget_lock_acquire_recursive>
 800e5a2:	89ab      	ldrh	r3, [r5, #12]
 800e5a4:	071b      	lsls	r3, r3, #28
 800e5a6:	d501      	bpl.n	800e5ac <_vfiprintf_r+0x3c>
 800e5a8:	692b      	ldr	r3, [r5, #16]
 800e5aa:	b9eb      	cbnz	r3, 800e5e8 <_vfiprintf_r+0x78>
 800e5ac:	4629      	mov	r1, r5
 800e5ae:	4630      	mov	r0, r6
 800e5b0:	f7fd fec4 	bl	800c33c <__swsetup_r>
 800e5b4:	b1c0      	cbz	r0, 800e5e8 <_vfiprintf_r+0x78>
 800e5b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5b8:	07dc      	lsls	r4, r3, #31
 800e5ba:	d50e      	bpl.n	800e5da <_vfiprintf_r+0x6a>
 800e5bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e5c0:	b01d      	add	sp, #116	; 0x74
 800e5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5c6:	4b7b      	ldr	r3, [pc, #492]	; (800e7b4 <_vfiprintf_r+0x244>)
 800e5c8:	429d      	cmp	r5, r3
 800e5ca:	d101      	bne.n	800e5d0 <_vfiprintf_r+0x60>
 800e5cc:	68b5      	ldr	r5, [r6, #8]
 800e5ce:	e7df      	b.n	800e590 <_vfiprintf_r+0x20>
 800e5d0:	4b79      	ldr	r3, [pc, #484]	; (800e7b8 <_vfiprintf_r+0x248>)
 800e5d2:	429d      	cmp	r5, r3
 800e5d4:	bf08      	it	eq
 800e5d6:	68f5      	ldreq	r5, [r6, #12]
 800e5d8:	e7da      	b.n	800e590 <_vfiprintf_r+0x20>
 800e5da:	89ab      	ldrh	r3, [r5, #12]
 800e5dc:	0598      	lsls	r0, r3, #22
 800e5de:	d4ed      	bmi.n	800e5bc <_vfiprintf_r+0x4c>
 800e5e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5e2:	f7fc f9a1 	bl	800a928 <__retarget_lock_release_recursive>
 800e5e6:	e7e9      	b.n	800e5bc <_vfiprintf_r+0x4c>
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	9309      	str	r3, [sp, #36]	; 0x24
 800e5ec:	2320      	movs	r3, #32
 800e5ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e5f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5f6:	2330      	movs	r3, #48	; 0x30
 800e5f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e7bc <_vfiprintf_r+0x24c>
 800e5fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e600:	f04f 0901 	mov.w	r9, #1
 800e604:	4623      	mov	r3, r4
 800e606:	469a      	mov	sl, r3
 800e608:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e60c:	b10a      	cbz	r2, 800e612 <_vfiprintf_r+0xa2>
 800e60e:	2a25      	cmp	r2, #37	; 0x25
 800e610:	d1f9      	bne.n	800e606 <_vfiprintf_r+0x96>
 800e612:	ebba 0b04 	subs.w	fp, sl, r4
 800e616:	d00b      	beq.n	800e630 <_vfiprintf_r+0xc0>
 800e618:	465b      	mov	r3, fp
 800e61a:	4622      	mov	r2, r4
 800e61c:	4629      	mov	r1, r5
 800e61e:	4630      	mov	r0, r6
 800e620:	f7ff ff93 	bl	800e54a <__sfputs_r>
 800e624:	3001      	adds	r0, #1
 800e626:	f000 80aa 	beq.w	800e77e <_vfiprintf_r+0x20e>
 800e62a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e62c:	445a      	add	r2, fp
 800e62e:	9209      	str	r2, [sp, #36]	; 0x24
 800e630:	f89a 3000 	ldrb.w	r3, [sl]
 800e634:	2b00      	cmp	r3, #0
 800e636:	f000 80a2 	beq.w	800e77e <_vfiprintf_r+0x20e>
 800e63a:	2300      	movs	r3, #0
 800e63c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e644:	f10a 0a01 	add.w	sl, sl, #1
 800e648:	9304      	str	r3, [sp, #16]
 800e64a:	9307      	str	r3, [sp, #28]
 800e64c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e650:	931a      	str	r3, [sp, #104]	; 0x68
 800e652:	4654      	mov	r4, sl
 800e654:	2205      	movs	r2, #5
 800e656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e65a:	4858      	ldr	r0, [pc, #352]	; (800e7bc <_vfiprintf_r+0x24c>)
 800e65c:	f7f1 fdc8 	bl	80001f0 <memchr>
 800e660:	9a04      	ldr	r2, [sp, #16]
 800e662:	b9d8      	cbnz	r0, 800e69c <_vfiprintf_r+0x12c>
 800e664:	06d1      	lsls	r1, r2, #27
 800e666:	bf44      	itt	mi
 800e668:	2320      	movmi	r3, #32
 800e66a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e66e:	0713      	lsls	r3, r2, #28
 800e670:	bf44      	itt	mi
 800e672:	232b      	movmi	r3, #43	; 0x2b
 800e674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e678:	f89a 3000 	ldrb.w	r3, [sl]
 800e67c:	2b2a      	cmp	r3, #42	; 0x2a
 800e67e:	d015      	beq.n	800e6ac <_vfiprintf_r+0x13c>
 800e680:	9a07      	ldr	r2, [sp, #28]
 800e682:	4654      	mov	r4, sl
 800e684:	2000      	movs	r0, #0
 800e686:	f04f 0c0a 	mov.w	ip, #10
 800e68a:	4621      	mov	r1, r4
 800e68c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e690:	3b30      	subs	r3, #48	; 0x30
 800e692:	2b09      	cmp	r3, #9
 800e694:	d94e      	bls.n	800e734 <_vfiprintf_r+0x1c4>
 800e696:	b1b0      	cbz	r0, 800e6c6 <_vfiprintf_r+0x156>
 800e698:	9207      	str	r2, [sp, #28]
 800e69a:	e014      	b.n	800e6c6 <_vfiprintf_r+0x156>
 800e69c:	eba0 0308 	sub.w	r3, r0, r8
 800e6a0:	fa09 f303 	lsl.w	r3, r9, r3
 800e6a4:	4313      	orrs	r3, r2
 800e6a6:	9304      	str	r3, [sp, #16]
 800e6a8:	46a2      	mov	sl, r4
 800e6aa:	e7d2      	b.n	800e652 <_vfiprintf_r+0xe2>
 800e6ac:	9b03      	ldr	r3, [sp, #12]
 800e6ae:	1d19      	adds	r1, r3, #4
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	9103      	str	r1, [sp, #12]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	bfbb      	ittet	lt
 800e6b8:	425b      	neglt	r3, r3
 800e6ba:	f042 0202 	orrlt.w	r2, r2, #2
 800e6be:	9307      	strge	r3, [sp, #28]
 800e6c0:	9307      	strlt	r3, [sp, #28]
 800e6c2:	bfb8      	it	lt
 800e6c4:	9204      	strlt	r2, [sp, #16]
 800e6c6:	7823      	ldrb	r3, [r4, #0]
 800e6c8:	2b2e      	cmp	r3, #46	; 0x2e
 800e6ca:	d10c      	bne.n	800e6e6 <_vfiprintf_r+0x176>
 800e6cc:	7863      	ldrb	r3, [r4, #1]
 800e6ce:	2b2a      	cmp	r3, #42	; 0x2a
 800e6d0:	d135      	bne.n	800e73e <_vfiprintf_r+0x1ce>
 800e6d2:	9b03      	ldr	r3, [sp, #12]
 800e6d4:	1d1a      	adds	r2, r3, #4
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	9203      	str	r2, [sp, #12]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	bfb8      	it	lt
 800e6de:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e6e2:	3402      	adds	r4, #2
 800e6e4:	9305      	str	r3, [sp, #20]
 800e6e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e7cc <_vfiprintf_r+0x25c>
 800e6ea:	7821      	ldrb	r1, [r4, #0]
 800e6ec:	2203      	movs	r2, #3
 800e6ee:	4650      	mov	r0, sl
 800e6f0:	f7f1 fd7e 	bl	80001f0 <memchr>
 800e6f4:	b140      	cbz	r0, 800e708 <_vfiprintf_r+0x198>
 800e6f6:	2340      	movs	r3, #64	; 0x40
 800e6f8:	eba0 000a 	sub.w	r0, r0, sl
 800e6fc:	fa03 f000 	lsl.w	r0, r3, r0
 800e700:	9b04      	ldr	r3, [sp, #16]
 800e702:	4303      	orrs	r3, r0
 800e704:	3401      	adds	r4, #1
 800e706:	9304      	str	r3, [sp, #16]
 800e708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e70c:	482c      	ldr	r0, [pc, #176]	; (800e7c0 <_vfiprintf_r+0x250>)
 800e70e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e712:	2206      	movs	r2, #6
 800e714:	f7f1 fd6c 	bl	80001f0 <memchr>
 800e718:	2800      	cmp	r0, #0
 800e71a:	d03f      	beq.n	800e79c <_vfiprintf_r+0x22c>
 800e71c:	4b29      	ldr	r3, [pc, #164]	; (800e7c4 <_vfiprintf_r+0x254>)
 800e71e:	bb1b      	cbnz	r3, 800e768 <_vfiprintf_r+0x1f8>
 800e720:	9b03      	ldr	r3, [sp, #12]
 800e722:	3307      	adds	r3, #7
 800e724:	f023 0307 	bic.w	r3, r3, #7
 800e728:	3308      	adds	r3, #8
 800e72a:	9303      	str	r3, [sp, #12]
 800e72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e72e:	443b      	add	r3, r7
 800e730:	9309      	str	r3, [sp, #36]	; 0x24
 800e732:	e767      	b.n	800e604 <_vfiprintf_r+0x94>
 800e734:	fb0c 3202 	mla	r2, ip, r2, r3
 800e738:	460c      	mov	r4, r1
 800e73a:	2001      	movs	r0, #1
 800e73c:	e7a5      	b.n	800e68a <_vfiprintf_r+0x11a>
 800e73e:	2300      	movs	r3, #0
 800e740:	3401      	adds	r4, #1
 800e742:	9305      	str	r3, [sp, #20]
 800e744:	4619      	mov	r1, r3
 800e746:	f04f 0c0a 	mov.w	ip, #10
 800e74a:	4620      	mov	r0, r4
 800e74c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e750:	3a30      	subs	r2, #48	; 0x30
 800e752:	2a09      	cmp	r2, #9
 800e754:	d903      	bls.n	800e75e <_vfiprintf_r+0x1ee>
 800e756:	2b00      	cmp	r3, #0
 800e758:	d0c5      	beq.n	800e6e6 <_vfiprintf_r+0x176>
 800e75a:	9105      	str	r1, [sp, #20]
 800e75c:	e7c3      	b.n	800e6e6 <_vfiprintf_r+0x176>
 800e75e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e762:	4604      	mov	r4, r0
 800e764:	2301      	movs	r3, #1
 800e766:	e7f0      	b.n	800e74a <_vfiprintf_r+0x1da>
 800e768:	ab03      	add	r3, sp, #12
 800e76a:	9300      	str	r3, [sp, #0]
 800e76c:	462a      	mov	r2, r5
 800e76e:	4b16      	ldr	r3, [pc, #88]	; (800e7c8 <_vfiprintf_r+0x258>)
 800e770:	a904      	add	r1, sp, #16
 800e772:	4630      	mov	r0, r6
 800e774:	f7fc fa24 	bl	800abc0 <_printf_float>
 800e778:	4607      	mov	r7, r0
 800e77a:	1c78      	adds	r0, r7, #1
 800e77c:	d1d6      	bne.n	800e72c <_vfiprintf_r+0x1bc>
 800e77e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e780:	07d9      	lsls	r1, r3, #31
 800e782:	d405      	bmi.n	800e790 <_vfiprintf_r+0x220>
 800e784:	89ab      	ldrh	r3, [r5, #12]
 800e786:	059a      	lsls	r2, r3, #22
 800e788:	d402      	bmi.n	800e790 <_vfiprintf_r+0x220>
 800e78a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e78c:	f7fc f8cc 	bl	800a928 <__retarget_lock_release_recursive>
 800e790:	89ab      	ldrh	r3, [r5, #12]
 800e792:	065b      	lsls	r3, r3, #25
 800e794:	f53f af12 	bmi.w	800e5bc <_vfiprintf_r+0x4c>
 800e798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e79a:	e711      	b.n	800e5c0 <_vfiprintf_r+0x50>
 800e79c:	ab03      	add	r3, sp, #12
 800e79e:	9300      	str	r3, [sp, #0]
 800e7a0:	462a      	mov	r2, r5
 800e7a2:	4b09      	ldr	r3, [pc, #36]	; (800e7c8 <_vfiprintf_r+0x258>)
 800e7a4:	a904      	add	r1, sp, #16
 800e7a6:	4630      	mov	r0, r6
 800e7a8:	f7fc fcae 	bl	800b108 <_printf_i>
 800e7ac:	e7e4      	b.n	800e778 <_vfiprintf_r+0x208>
 800e7ae:	bf00      	nop
 800e7b0:	0800f338 	.word	0x0800f338
 800e7b4:	0800f358 	.word	0x0800f358
 800e7b8:	0800f318 	.word	0x0800f318
 800e7bc:	0800f664 	.word	0x0800f664
 800e7c0:	0800f66e 	.word	0x0800f66e
 800e7c4:	0800abc1 	.word	0x0800abc1
 800e7c8:	0800e54b 	.word	0x0800e54b
 800e7cc:	0800f66a 	.word	0x0800f66a

0800e7d0 <_read_r>:
 800e7d0:	b538      	push	{r3, r4, r5, lr}
 800e7d2:	4d07      	ldr	r5, [pc, #28]	; (800e7f0 <_read_r+0x20>)
 800e7d4:	4604      	mov	r4, r0
 800e7d6:	4608      	mov	r0, r1
 800e7d8:	4611      	mov	r1, r2
 800e7da:	2200      	movs	r2, #0
 800e7dc:	602a      	str	r2, [r5, #0]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	f7f3 ff10 	bl	8002604 <_read>
 800e7e4:	1c43      	adds	r3, r0, #1
 800e7e6:	d102      	bne.n	800e7ee <_read_r+0x1e>
 800e7e8:	682b      	ldr	r3, [r5, #0]
 800e7ea:	b103      	cbz	r3, 800e7ee <_read_r+0x1e>
 800e7ec:	6023      	str	r3, [r4, #0]
 800e7ee:	bd38      	pop	{r3, r4, r5, pc}
 800e7f0:	20004908 	.word	0x20004908
 800e7f4:	00000000 	.word	0x00000000

0800e7f8 <nan>:
 800e7f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e800 <nan+0x8>
 800e7fc:	4770      	bx	lr
 800e7fe:	bf00      	nop
 800e800:	00000000 	.word	0x00000000
 800e804:	7ff80000 	.word	0x7ff80000

0800e808 <__ascii_wctomb>:
 800e808:	b149      	cbz	r1, 800e81e <__ascii_wctomb+0x16>
 800e80a:	2aff      	cmp	r2, #255	; 0xff
 800e80c:	bf85      	ittet	hi
 800e80e:	238a      	movhi	r3, #138	; 0x8a
 800e810:	6003      	strhi	r3, [r0, #0]
 800e812:	700a      	strbls	r2, [r1, #0]
 800e814:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e818:	bf98      	it	ls
 800e81a:	2001      	movls	r0, #1
 800e81c:	4770      	bx	lr
 800e81e:	4608      	mov	r0, r1
 800e820:	4770      	bx	lr
	...

0800e824 <__assert_func>:
 800e824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e826:	4614      	mov	r4, r2
 800e828:	461a      	mov	r2, r3
 800e82a:	4b09      	ldr	r3, [pc, #36]	; (800e850 <__assert_func+0x2c>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	4605      	mov	r5, r0
 800e830:	68d8      	ldr	r0, [r3, #12]
 800e832:	b14c      	cbz	r4, 800e848 <__assert_func+0x24>
 800e834:	4b07      	ldr	r3, [pc, #28]	; (800e854 <__assert_func+0x30>)
 800e836:	9100      	str	r1, [sp, #0]
 800e838:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e83c:	4906      	ldr	r1, [pc, #24]	; (800e858 <__assert_func+0x34>)
 800e83e:	462b      	mov	r3, r5
 800e840:	f000 f80e 	bl	800e860 <fiprintf>
 800e844:	f000 f840 	bl	800e8c8 <abort>
 800e848:	4b04      	ldr	r3, [pc, #16]	; (800e85c <__assert_func+0x38>)
 800e84a:	461c      	mov	r4, r3
 800e84c:	e7f3      	b.n	800e836 <__assert_func+0x12>
 800e84e:	bf00      	nop
 800e850:	20000010 	.word	0x20000010
 800e854:	0800f675 	.word	0x0800f675
 800e858:	0800f682 	.word	0x0800f682
 800e85c:	0800f6b0 	.word	0x0800f6b0

0800e860 <fiprintf>:
 800e860:	b40e      	push	{r1, r2, r3}
 800e862:	b503      	push	{r0, r1, lr}
 800e864:	4601      	mov	r1, r0
 800e866:	ab03      	add	r3, sp, #12
 800e868:	4805      	ldr	r0, [pc, #20]	; (800e880 <fiprintf+0x20>)
 800e86a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e86e:	6800      	ldr	r0, [r0, #0]
 800e870:	9301      	str	r3, [sp, #4]
 800e872:	f7ff fe7d 	bl	800e570 <_vfiprintf_r>
 800e876:	b002      	add	sp, #8
 800e878:	f85d eb04 	ldr.w	lr, [sp], #4
 800e87c:	b003      	add	sp, #12
 800e87e:	4770      	bx	lr
 800e880:	20000010 	.word	0x20000010

0800e884 <_fstat_r>:
 800e884:	b538      	push	{r3, r4, r5, lr}
 800e886:	4d07      	ldr	r5, [pc, #28]	; (800e8a4 <_fstat_r+0x20>)
 800e888:	2300      	movs	r3, #0
 800e88a:	4604      	mov	r4, r0
 800e88c:	4608      	mov	r0, r1
 800e88e:	4611      	mov	r1, r2
 800e890:	602b      	str	r3, [r5, #0]
 800e892:	f7f3 fefc 	bl	800268e <_fstat>
 800e896:	1c43      	adds	r3, r0, #1
 800e898:	d102      	bne.n	800e8a0 <_fstat_r+0x1c>
 800e89a:	682b      	ldr	r3, [r5, #0]
 800e89c:	b103      	cbz	r3, 800e8a0 <_fstat_r+0x1c>
 800e89e:	6023      	str	r3, [r4, #0]
 800e8a0:	bd38      	pop	{r3, r4, r5, pc}
 800e8a2:	bf00      	nop
 800e8a4:	20004908 	.word	0x20004908

0800e8a8 <_isatty_r>:
 800e8a8:	b538      	push	{r3, r4, r5, lr}
 800e8aa:	4d06      	ldr	r5, [pc, #24]	; (800e8c4 <_isatty_r+0x1c>)
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	4604      	mov	r4, r0
 800e8b0:	4608      	mov	r0, r1
 800e8b2:	602b      	str	r3, [r5, #0]
 800e8b4:	f7f3 fefb 	bl	80026ae <_isatty>
 800e8b8:	1c43      	adds	r3, r0, #1
 800e8ba:	d102      	bne.n	800e8c2 <_isatty_r+0x1a>
 800e8bc:	682b      	ldr	r3, [r5, #0]
 800e8be:	b103      	cbz	r3, 800e8c2 <_isatty_r+0x1a>
 800e8c0:	6023      	str	r3, [r4, #0]
 800e8c2:	bd38      	pop	{r3, r4, r5, pc}
 800e8c4:	20004908 	.word	0x20004908

0800e8c8 <abort>:
 800e8c8:	b508      	push	{r3, lr}
 800e8ca:	2006      	movs	r0, #6
 800e8cc:	f000 f82c 	bl	800e928 <raise>
 800e8d0:	2001      	movs	r0, #1
 800e8d2:	f7f3 fe8d 	bl	80025f0 <_exit>

0800e8d6 <_raise_r>:
 800e8d6:	291f      	cmp	r1, #31
 800e8d8:	b538      	push	{r3, r4, r5, lr}
 800e8da:	4604      	mov	r4, r0
 800e8dc:	460d      	mov	r5, r1
 800e8de:	d904      	bls.n	800e8ea <_raise_r+0x14>
 800e8e0:	2316      	movs	r3, #22
 800e8e2:	6003      	str	r3, [r0, #0]
 800e8e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8e8:	bd38      	pop	{r3, r4, r5, pc}
 800e8ea:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e8ec:	b112      	cbz	r2, 800e8f4 <_raise_r+0x1e>
 800e8ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e8f2:	b94b      	cbnz	r3, 800e908 <_raise_r+0x32>
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	f000 f831 	bl	800e95c <_getpid_r>
 800e8fa:	462a      	mov	r2, r5
 800e8fc:	4601      	mov	r1, r0
 800e8fe:	4620      	mov	r0, r4
 800e900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e904:	f000 b818 	b.w	800e938 <_kill_r>
 800e908:	2b01      	cmp	r3, #1
 800e90a:	d00a      	beq.n	800e922 <_raise_r+0x4c>
 800e90c:	1c59      	adds	r1, r3, #1
 800e90e:	d103      	bne.n	800e918 <_raise_r+0x42>
 800e910:	2316      	movs	r3, #22
 800e912:	6003      	str	r3, [r0, #0]
 800e914:	2001      	movs	r0, #1
 800e916:	e7e7      	b.n	800e8e8 <_raise_r+0x12>
 800e918:	2400      	movs	r4, #0
 800e91a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e91e:	4628      	mov	r0, r5
 800e920:	4798      	blx	r3
 800e922:	2000      	movs	r0, #0
 800e924:	e7e0      	b.n	800e8e8 <_raise_r+0x12>
	...

0800e928 <raise>:
 800e928:	4b02      	ldr	r3, [pc, #8]	; (800e934 <raise+0xc>)
 800e92a:	4601      	mov	r1, r0
 800e92c:	6818      	ldr	r0, [r3, #0]
 800e92e:	f7ff bfd2 	b.w	800e8d6 <_raise_r>
 800e932:	bf00      	nop
 800e934:	20000010 	.word	0x20000010

0800e938 <_kill_r>:
 800e938:	b538      	push	{r3, r4, r5, lr}
 800e93a:	4d07      	ldr	r5, [pc, #28]	; (800e958 <_kill_r+0x20>)
 800e93c:	2300      	movs	r3, #0
 800e93e:	4604      	mov	r4, r0
 800e940:	4608      	mov	r0, r1
 800e942:	4611      	mov	r1, r2
 800e944:	602b      	str	r3, [r5, #0]
 800e946:	f7f3 fe43 	bl	80025d0 <_kill>
 800e94a:	1c43      	adds	r3, r0, #1
 800e94c:	d102      	bne.n	800e954 <_kill_r+0x1c>
 800e94e:	682b      	ldr	r3, [r5, #0]
 800e950:	b103      	cbz	r3, 800e954 <_kill_r+0x1c>
 800e952:	6023      	str	r3, [r4, #0]
 800e954:	bd38      	pop	{r3, r4, r5, pc}
 800e956:	bf00      	nop
 800e958:	20004908 	.word	0x20004908

0800e95c <_getpid_r>:
 800e95c:	f7f3 be30 	b.w	80025c0 <_getpid>

0800e960 <atan>:
 800e960:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e964:	ec55 4b10 	vmov	r4, r5, d0
 800e968:	4bc3      	ldr	r3, [pc, #780]	; (800ec78 <atan+0x318>)
 800e96a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e96e:	429e      	cmp	r6, r3
 800e970:	46ab      	mov	fp, r5
 800e972:	dd18      	ble.n	800e9a6 <atan+0x46>
 800e974:	4bc1      	ldr	r3, [pc, #772]	; (800ec7c <atan+0x31c>)
 800e976:	429e      	cmp	r6, r3
 800e978:	dc01      	bgt.n	800e97e <atan+0x1e>
 800e97a:	d109      	bne.n	800e990 <atan+0x30>
 800e97c:	b144      	cbz	r4, 800e990 <atan+0x30>
 800e97e:	4622      	mov	r2, r4
 800e980:	462b      	mov	r3, r5
 800e982:	4620      	mov	r0, r4
 800e984:	4629      	mov	r1, r5
 800e986:	f7f1 fc89 	bl	800029c <__adddf3>
 800e98a:	4604      	mov	r4, r0
 800e98c:	460d      	mov	r5, r1
 800e98e:	e006      	b.n	800e99e <atan+0x3e>
 800e990:	f1bb 0f00 	cmp.w	fp, #0
 800e994:	f300 8131 	bgt.w	800ebfa <atan+0x29a>
 800e998:	a59b      	add	r5, pc, #620	; (adr r5, 800ec08 <atan+0x2a8>)
 800e99a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e99e:	ec45 4b10 	vmov	d0, r4, r5
 800e9a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9a6:	4bb6      	ldr	r3, [pc, #728]	; (800ec80 <atan+0x320>)
 800e9a8:	429e      	cmp	r6, r3
 800e9aa:	dc14      	bgt.n	800e9d6 <atan+0x76>
 800e9ac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e9b0:	429e      	cmp	r6, r3
 800e9b2:	dc0d      	bgt.n	800e9d0 <atan+0x70>
 800e9b4:	a396      	add	r3, pc, #600	; (adr r3, 800ec10 <atan+0x2b0>)
 800e9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ba:	ee10 0a10 	vmov	r0, s0
 800e9be:	4629      	mov	r1, r5
 800e9c0:	f7f1 fc6c 	bl	800029c <__adddf3>
 800e9c4:	4baf      	ldr	r3, [pc, #700]	; (800ec84 <atan+0x324>)
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	f7f2 f8ae 	bl	8000b28 <__aeabi_dcmpgt>
 800e9cc:	2800      	cmp	r0, #0
 800e9ce:	d1e6      	bne.n	800e99e <atan+0x3e>
 800e9d0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e9d4:	e02b      	b.n	800ea2e <atan+0xce>
 800e9d6:	f000 f963 	bl	800eca0 <fabs>
 800e9da:	4bab      	ldr	r3, [pc, #684]	; (800ec88 <atan+0x328>)
 800e9dc:	429e      	cmp	r6, r3
 800e9de:	ec55 4b10 	vmov	r4, r5, d0
 800e9e2:	f300 80bf 	bgt.w	800eb64 <atan+0x204>
 800e9e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e9ea:	429e      	cmp	r6, r3
 800e9ec:	f300 80a0 	bgt.w	800eb30 <atan+0x1d0>
 800e9f0:	ee10 2a10 	vmov	r2, s0
 800e9f4:	ee10 0a10 	vmov	r0, s0
 800e9f8:	462b      	mov	r3, r5
 800e9fa:	4629      	mov	r1, r5
 800e9fc:	f7f1 fc4e 	bl	800029c <__adddf3>
 800ea00:	4ba0      	ldr	r3, [pc, #640]	; (800ec84 <atan+0x324>)
 800ea02:	2200      	movs	r2, #0
 800ea04:	f7f1 fc48 	bl	8000298 <__aeabi_dsub>
 800ea08:	2200      	movs	r2, #0
 800ea0a:	4606      	mov	r6, r0
 800ea0c:	460f      	mov	r7, r1
 800ea0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ea12:	4620      	mov	r0, r4
 800ea14:	4629      	mov	r1, r5
 800ea16:	f7f1 fc41 	bl	800029c <__adddf3>
 800ea1a:	4602      	mov	r2, r0
 800ea1c:	460b      	mov	r3, r1
 800ea1e:	4630      	mov	r0, r6
 800ea20:	4639      	mov	r1, r7
 800ea22:	f7f1 ff1b 	bl	800085c <__aeabi_ddiv>
 800ea26:	f04f 0a00 	mov.w	sl, #0
 800ea2a:	4604      	mov	r4, r0
 800ea2c:	460d      	mov	r5, r1
 800ea2e:	4622      	mov	r2, r4
 800ea30:	462b      	mov	r3, r5
 800ea32:	4620      	mov	r0, r4
 800ea34:	4629      	mov	r1, r5
 800ea36:	f7f1 fde7 	bl	8000608 <__aeabi_dmul>
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	4680      	mov	r8, r0
 800ea40:	4689      	mov	r9, r1
 800ea42:	f7f1 fde1 	bl	8000608 <__aeabi_dmul>
 800ea46:	a374      	add	r3, pc, #464	; (adr r3, 800ec18 <atan+0x2b8>)
 800ea48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4c:	4606      	mov	r6, r0
 800ea4e:	460f      	mov	r7, r1
 800ea50:	f7f1 fdda 	bl	8000608 <__aeabi_dmul>
 800ea54:	a372      	add	r3, pc, #456	; (adr r3, 800ec20 <atan+0x2c0>)
 800ea56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5a:	f7f1 fc1f 	bl	800029c <__adddf3>
 800ea5e:	4632      	mov	r2, r6
 800ea60:	463b      	mov	r3, r7
 800ea62:	f7f1 fdd1 	bl	8000608 <__aeabi_dmul>
 800ea66:	a370      	add	r3, pc, #448	; (adr r3, 800ec28 <atan+0x2c8>)
 800ea68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6c:	f7f1 fc16 	bl	800029c <__adddf3>
 800ea70:	4632      	mov	r2, r6
 800ea72:	463b      	mov	r3, r7
 800ea74:	f7f1 fdc8 	bl	8000608 <__aeabi_dmul>
 800ea78:	a36d      	add	r3, pc, #436	; (adr r3, 800ec30 <atan+0x2d0>)
 800ea7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea7e:	f7f1 fc0d 	bl	800029c <__adddf3>
 800ea82:	4632      	mov	r2, r6
 800ea84:	463b      	mov	r3, r7
 800ea86:	f7f1 fdbf 	bl	8000608 <__aeabi_dmul>
 800ea8a:	a36b      	add	r3, pc, #428	; (adr r3, 800ec38 <atan+0x2d8>)
 800ea8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea90:	f7f1 fc04 	bl	800029c <__adddf3>
 800ea94:	4632      	mov	r2, r6
 800ea96:	463b      	mov	r3, r7
 800ea98:	f7f1 fdb6 	bl	8000608 <__aeabi_dmul>
 800ea9c:	a368      	add	r3, pc, #416	; (adr r3, 800ec40 <atan+0x2e0>)
 800ea9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa2:	f7f1 fbfb 	bl	800029c <__adddf3>
 800eaa6:	4642      	mov	r2, r8
 800eaa8:	464b      	mov	r3, r9
 800eaaa:	f7f1 fdad 	bl	8000608 <__aeabi_dmul>
 800eaae:	a366      	add	r3, pc, #408	; (adr r3, 800ec48 <atan+0x2e8>)
 800eab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab4:	4680      	mov	r8, r0
 800eab6:	4689      	mov	r9, r1
 800eab8:	4630      	mov	r0, r6
 800eaba:	4639      	mov	r1, r7
 800eabc:	f7f1 fda4 	bl	8000608 <__aeabi_dmul>
 800eac0:	a363      	add	r3, pc, #396	; (adr r3, 800ec50 <atan+0x2f0>)
 800eac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac6:	f7f1 fbe7 	bl	8000298 <__aeabi_dsub>
 800eaca:	4632      	mov	r2, r6
 800eacc:	463b      	mov	r3, r7
 800eace:	f7f1 fd9b 	bl	8000608 <__aeabi_dmul>
 800ead2:	a361      	add	r3, pc, #388	; (adr r3, 800ec58 <atan+0x2f8>)
 800ead4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead8:	f7f1 fbde 	bl	8000298 <__aeabi_dsub>
 800eadc:	4632      	mov	r2, r6
 800eade:	463b      	mov	r3, r7
 800eae0:	f7f1 fd92 	bl	8000608 <__aeabi_dmul>
 800eae4:	a35e      	add	r3, pc, #376	; (adr r3, 800ec60 <atan+0x300>)
 800eae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaea:	f7f1 fbd5 	bl	8000298 <__aeabi_dsub>
 800eaee:	4632      	mov	r2, r6
 800eaf0:	463b      	mov	r3, r7
 800eaf2:	f7f1 fd89 	bl	8000608 <__aeabi_dmul>
 800eaf6:	a35c      	add	r3, pc, #368	; (adr r3, 800ec68 <atan+0x308>)
 800eaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafc:	f7f1 fbcc 	bl	8000298 <__aeabi_dsub>
 800eb00:	4632      	mov	r2, r6
 800eb02:	463b      	mov	r3, r7
 800eb04:	f7f1 fd80 	bl	8000608 <__aeabi_dmul>
 800eb08:	4602      	mov	r2, r0
 800eb0a:	460b      	mov	r3, r1
 800eb0c:	4640      	mov	r0, r8
 800eb0e:	4649      	mov	r1, r9
 800eb10:	f7f1 fbc4 	bl	800029c <__adddf3>
 800eb14:	4622      	mov	r2, r4
 800eb16:	462b      	mov	r3, r5
 800eb18:	f7f1 fd76 	bl	8000608 <__aeabi_dmul>
 800eb1c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800eb20:	4602      	mov	r2, r0
 800eb22:	460b      	mov	r3, r1
 800eb24:	d14b      	bne.n	800ebbe <atan+0x25e>
 800eb26:	4620      	mov	r0, r4
 800eb28:	4629      	mov	r1, r5
 800eb2a:	f7f1 fbb5 	bl	8000298 <__aeabi_dsub>
 800eb2e:	e72c      	b.n	800e98a <atan+0x2a>
 800eb30:	ee10 0a10 	vmov	r0, s0
 800eb34:	4b53      	ldr	r3, [pc, #332]	; (800ec84 <atan+0x324>)
 800eb36:	2200      	movs	r2, #0
 800eb38:	4629      	mov	r1, r5
 800eb3a:	f7f1 fbad 	bl	8000298 <__aeabi_dsub>
 800eb3e:	4b51      	ldr	r3, [pc, #324]	; (800ec84 <atan+0x324>)
 800eb40:	4606      	mov	r6, r0
 800eb42:	460f      	mov	r7, r1
 800eb44:	2200      	movs	r2, #0
 800eb46:	4620      	mov	r0, r4
 800eb48:	4629      	mov	r1, r5
 800eb4a:	f7f1 fba7 	bl	800029c <__adddf3>
 800eb4e:	4602      	mov	r2, r0
 800eb50:	460b      	mov	r3, r1
 800eb52:	4630      	mov	r0, r6
 800eb54:	4639      	mov	r1, r7
 800eb56:	f7f1 fe81 	bl	800085c <__aeabi_ddiv>
 800eb5a:	f04f 0a01 	mov.w	sl, #1
 800eb5e:	4604      	mov	r4, r0
 800eb60:	460d      	mov	r5, r1
 800eb62:	e764      	b.n	800ea2e <atan+0xce>
 800eb64:	4b49      	ldr	r3, [pc, #292]	; (800ec8c <atan+0x32c>)
 800eb66:	429e      	cmp	r6, r3
 800eb68:	da1d      	bge.n	800eba6 <atan+0x246>
 800eb6a:	ee10 0a10 	vmov	r0, s0
 800eb6e:	4b48      	ldr	r3, [pc, #288]	; (800ec90 <atan+0x330>)
 800eb70:	2200      	movs	r2, #0
 800eb72:	4629      	mov	r1, r5
 800eb74:	f7f1 fb90 	bl	8000298 <__aeabi_dsub>
 800eb78:	4b45      	ldr	r3, [pc, #276]	; (800ec90 <atan+0x330>)
 800eb7a:	4606      	mov	r6, r0
 800eb7c:	460f      	mov	r7, r1
 800eb7e:	2200      	movs	r2, #0
 800eb80:	4620      	mov	r0, r4
 800eb82:	4629      	mov	r1, r5
 800eb84:	f7f1 fd40 	bl	8000608 <__aeabi_dmul>
 800eb88:	4b3e      	ldr	r3, [pc, #248]	; (800ec84 <atan+0x324>)
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f7f1 fb86 	bl	800029c <__adddf3>
 800eb90:	4602      	mov	r2, r0
 800eb92:	460b      	mov	r3, r1
 800eb94:	4630      	mov	r0, r6
 800eb96:	4639      	mov	r1, r7
 800eb98:	f7f1 fe60 	bl	800085c <__aeabi_ddiv>
 800eb9c:	f04f 0a02 	mov.w	sl, #2
 800eba0:	4604      	mov	r4, r0
 800eba2:	460d      	mov	r5, r1
 800eba4:	e743      	b.n	800ea2e <atan+0xce>
 800eba6:	462b      	mov	r3, r5
 800eba8:	ee10 2a10 	vmov	r2, s0
 800ebac:	4939      	ldr	r1, [pc, #228]	; (800ec94 <atan+0x334>)
 800ebae:	2000      	movs	r0, #0
 800ebb0:	f7f1 fe54 	bl	800085c <__aeabi_ddiv>
 800ebb4:	f04f 0a03 	mov.w	sl, #3
 800ebb8:	4604      	mov	r4, r0
 800ebba:	460d      	mov	r5, r1
 800ebbc:	e737      	b.n	800ea2e <atan+0xce>
 800ebbe:	4b36      	ldr	r3, [pc, #216]	; (800ec98 <atan+0x338>)
 800ebc0:	4e36      	ldr	r6, [pc, #216]	; (800ec9c <atan+0x33c>)
 800ebc2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ebc6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ebca:	e9da 2300 	ldrd	r2, r3, [sl]
 800ebce:	f7f1 fb63 	bl	8000298 <__aeabi_dsub>
 800ebd2:	4622      	mov	r2, r4
 800ebd4:	462b      	mov	r3, r5
 800ebd6:	f7f1 fb5f 	bl	8000298 <__aeabi_dsub>
 800ebda:	4602      	mov	r2, r0
 800ebdc:	460b      	mov	r3, r1
 800ebde:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ebe2:	f7f1 fb59 	bl	8000298 <__aeabi_dsub>
 800ebe6:	f1bb 0f00 	cmp.w	fp, #0
 800ebea:	4604      	mov	r4, r0
 800ebec:	460d      	mov	r5, r1
 800ebee:	f6bf aed6 	bge.w	800e99e <atan+0x3e>
 800ebf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ebf6:	461d      	mov	r5, r3
 800ebf8:	e6d1      	b.n	800e99e <atan+0x3e>
 800ebfa:	a51d      	add	r5, pc, #116	; (adr r5, 800ec70 <atan+0x310>)
 800ebfc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ec00:	e6cd      	b.n	800e99e <atan+0x3e>
 800ec02:	bf00      	nop
 800ec04:	f3af 8000 	nop.w
 800ec08:	54442d18 	.word	0x54442d18
 800ec0c:	bff921fb 	.word	0xbff921fb
 800ec10:	8800759c 	.word	0x8800759c
 800ec14:	7e37e43c 	.word	0x7e37e43c
 800ec18:	e322da11 	.word	0xe322da11
 800ec1c:	3f90ad3a 	.word	0x3f90ad3a
 800ec20:	24760deb 	.word	0x24760deb
 800ec24:	3fa97b4b 	.word	0x3fa97b4b
 800ec28:	a0d03d51 	.word	0xa0d03d51
 800ec2c:	3fb10d66 	.word	0x3fb10d66
 800ec30:	c54c206e 	.word	0xc54c206e
 800ec34:	3fb745cd 	.word	0x3fb745cd
 800ec38:	920083ff 	.word	0x920083ff
 800ec3c:	3fc24924 	.word	0x3fc24924
 800ec40:	5555550d 	.word	0x5555550d
 800ec44:	3fd55555 	.word	0x3fd55555
 800ec48:	2c6a6c2f 	.word	0x2c6a6c2f
 800ec4c:	bfa2b444 	.word	0xbfa2b444
 800ec50:	52defd9a 	.word	0x52defd9a
 800ec54:	3fadde2d 	.word	0x3fadde2d
 800ec58:	af749a6d 	.word	0xaf749a6d
 800ec5c:	3fb3b0f2 	.word	0x3fb3b0f2
 800ec60:	fe231671 	.word	0xfe231671
 800ec64:	3fbc71c6 	.word	0x3fbc71c6
 800ec68:	9998ebc4 	.word	0x9998ebc4
 800ec6c:	3fc99999 	.word	0x3fc99999
 800ec70:	54442d18 	.word	0x54442d18
 800ec74:	3ff921fb 	.word	0x3ff921fb
 800ec78:	440fffff 	.word	0x440fffff
 800ec7c:	7ff00000 	.word	0x7ff00000
 800ec80:	3fdbffff 	.word	0x3fdbffff
 800ec84:	3ff00000 	.word	0x3ff00000
 800ec88:	3ff2ffff 	.word	0x3ff2ffff
 800ec8c:	40038000 	.word	0x40038000
 800ec90:	3ff80000 	.word	0x3ff80000
 800ec94:	bff00000 	.word	0xbff00000
 800ec98:	0800f7d8 	.word	0x0800f7d8
 800ec9c:	0800f7b8 	.word	0x0800f7b8

0800eca0 <fabs>:
 800eca0:	ec51 0b10 	vmov	r0, r1, d0
 800eca4:	ee10 2a10 	vmov	r2, s0
 800eca8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ecac:	ec43 2b10 	vmov	d0, r2, r3
 800ecb0:	4770      	bx	lr

0800ecb2 <atan2>:
 800ecb2:	f000 b801 	b.w	800ecb8 <__ieee754_atan2>
	...

0800ecb8 <__ieee754_atan2>:
 800ecb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecbc:	ec57 6b11 	vmov	r6, r7, d1
 800ecc0:	4273      	negs	r3, r6
 800ecc2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800ee48 <__ieee754_atan2+0x190>
 800ecc6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ecca:	4333      	orrs	r3, r6
 800eccc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ecd0:	4573      	cmp	r3, lr
 800ecd2:	ec51 0b10 	vmov	r0, r1, d0
 800ecd6:	ee11 8a10 	vmov	r8, s2
 800ecda:	d80a      	bhi.n	800ecf2 <__ieee754_atan2+0x3a>
 800ecdc:	4244      	negs	r4, r0
 800ecde:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ece2:	4304      	orrs	r4, r0
 800ece4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ece8:	4574      	cmp	r4, lr
 800ecea:	ee10 9a10 	vmov	r9, s0
 800ecee:	468c      	mov	ip, r1
 800ecf0:	d907      	bls.n	800ed02 <__ieee754_atan2+0x4a>
 800ecf2:	4632      	mov	r2, r6
 800ecf4:	463b      	mov	r3, r7
 800ecf6:	f7f1 fad1 	bl	800029c <__adddf3>
 800ecfa:	ec41 0b10 	vmov	d0, r0, r1
 800ecfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed02:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ed06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ed0a:	4334      	orrs	r4, r6
 800ed0c:	d103      	bne.n	800ed16 <__ieee754_atan2+0x5e>
 800ed0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed12:	f7ff be25 	b.w	800e960 <atan>
 800ed16:	17bc      	asrs	r4, r7, #30
 800ed18:	f004 0402 	and.w	r4, r4, #2
 800ed1c:	ea53 0909 	orrs.w	r9, r3, r9
 800ed20:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ed24:	d107      	bne.n	800ed36 <__ieee754_atan2+0x7e>
 800ed26:	2c02      	cmp	r4, #2
 800ed28:	d060      	beq.n	800edec <__ieee754_atan2+0x134>
 800ed2a:	2c03      	cmp	r4, #3
 800ed2c:	d1e5      	bne.n	800ecfa <__ieee754_atan2+0x42>
 800ed2e:	a142      	add	r1, pc, #264	; (adr r1, 800ee38 <__ieee754_atan2+0x180>)
 800ed30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed34:	e7e1      	b.n	800ecfa <__ieee754_atan2+0x42>
 800ed36:	ea52 0808 	orrs.w	r8, r2, r8
 800ed3a:	d106      	bne.n	800ed4a <__ieee754_atan2+0x92>
 800ed3c:	f1bc 0f00 	cmp.w	ip, #0
 800ed40:	da5f      	bge.n	800ee02 <__ieee754_atan2+0x14a>
 800ed42:	a13f      	add	r1, pc, #252	; (adr r1, 800ee40 <__ieee754_atan2+0x188>)
 800ed44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed48:	e7d7      	b.n	800ecfa <__ieee754_atan2+0x42>
 800ed4a:	4572      	cmp	r2, lr
 800ed4c:	d10f      	bne.n	800ed6e <__ieee754_atan2+0xb6>
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ed54:	d107      	bne.n	800ed66 <__ieee754_atan2+0xae>
 800ed56:	2c02      	cmp	r4, #2
 800ed58:	d84c      	bhi.n	800edf4 <__ieee754_atan2+0x13c>
 800ed5a:	4b35      	ldr	r3, [pc, #212]	; (800ee30 <__ieee754_atan2+0x178>)
 800ed5c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ed60:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ed64:	e7c9      	b.n	800ecfa <__ieee754_atan2+0x42>
 800ed66:	2c02      	cmp	r4, #2
 800ed68:	d848      	bhi.n	800edfc <__ieee754_atan2+0x144>
 800ed6a:	4b32      	ldr	r3, [pc, #200]	; (800ee34 <__ieee754_atan2+0x17c>)
 800ed6c:	e7f6      	b.n	800ed5c <__ieee754_atan2+0xa4>
 800ed6e:	4573      	cmp	r3, lr
 800ed70:	d0e4      	beq.n	800ed3c <__ieee754_atan2+0x84>
 800ed72:	1a9b      	subs	r3, r3, r2
 800ed74:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ed78:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ed7c:	da1e      	bge.n	800edbc <__ieee754_atan2+0x104>
 800ed7e:	2f00      	cmp	r7, #0
 800ed80:	da01      	bge.n	800ed86 <__ieee754_atan2+0xce>
 800ed82:	323c      	adds	r2, #60	; 0x3c
 800ed84:	db1e      	blt.n	800edc4 <__ieee754_atan2+0x10c>
 800ed86:	4632      	mov	r2, r6
 800ed88:	463b      	mov	r3, r7
 800ed8a:	f7f1 fd67 	bl	800085c <__aeabi_ddiv>
 800ed8e:	ec41 0b10 	vmov	d0, r0, r1
 800ed92:	f7ff ff85 	bl	800eca0 <fabs>
 800ed96:	f7ff fde3 	bl	800e960 <atan>
 800ed9a:	ec51 0b10 	vmov	r0, r1, d0
 800ed9e:	2c01      	cmp	r4, #1
 800eda0:	d013      	beq.n	800edca <__ieee754_atan2+0x112>
 800eda2:	2c02      	cmp	r4, #2
 800eda4:	d015      	beq.n	800edd2 <__ieee754_atan2+0x11a>
 800eda6:	2c00      	cmp	r4, #0
 800eda8:	d0a7      	beq.n	800ecfa <__ieee754_atan2+0x42>
 800edaa:	a319      	add	r3, pc, #100	; (adr r3, 800ee10 <__ieee754_atan2+0x158>)
 800edac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb0:	f7f1 fa72 	bl	8000298 <__aeabi_dsub>
 800edb4:	a318      	add	r3, pc, #96	; (adr r3, 800ee18 <__ieee754_atan2+0x160>)
 800edb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edba:	e014      	b.n	800ede6 <__ieee754_atan2+0x12e>
 800edbc:	a118      	add	r1, pc, #96	; (adr r1, 800ee20 <__ieee754_atan2+0x168>)
 800edbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edc2:	e7ec      	b.n	800ed9e <__ieee754_atan2+0xe6>
 800edc4:	2000      	movs	r0, #0
 800edc6:	2100      	movs	r1, #0
 800edc8:	e7e9      	b.n	800ed9e <__ieee754_atan2+0xe6>
 800edca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edce:	4619      	mov	r1, r3
 800edd0:	e793      	b.n	800ecfa <__ieee754_atan2+0x42>
 800edd2:	a30f      	add	r3, pc, #60	; (adr r3, 800ee10 <__ieee754_atan2+0x158>)
 800edd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd8:	f7f1 fa5e 	bl	8000298 <__aeabi_dsub>
 800eddc:	4602      	mov	r2, r0
 800edde:	460b      	mov	r3, r1
 800ede0:	a10d      	add	r1, pc, #52	; (adr r1, 800ee18 <__ieee754_atan2+0x160>)
 800ede2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ede6:	f7f1 fa57 	bl	8000298 <__aeabi_dsub>
 800edea:	e786      	b.n	800ecfa <__ieee754_atan2+0x42>
 800edec:	a10a      	add	r1, pc, #40	; (adr r1, 800ee18 <__ieee754_atan2+0x160>)
 800edee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edf2:	e782      	b.n	800ecfa <__ieee754_atan2+0x42>
 800edf4:	a10c      	add	r1, pc, #48	; (adr r1, 800ee28 <__ieee754_atan2+0x170>)
 800edf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edfa:	e77e      	b.n	800ecfa <__ieee754_atan2+0x42>
 800edfc:	2000      	movs	r0, #0
 800edfe:	2100      	movs	r1, #0
 800ee00:	e77b      	b.n	800ecfa <__ieee754_atan2+0x42>
 800ee02:	a107      	add	r1, pc, #28	; (adr r1, 800ee20 <__ieee754_atan2+0x168>)
 800ee04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee08:	e777      	b.n	800ecfa <__ieee754_atan2+0x42>
 800ee0a:	bf00      	nop
 800ee0c:	f3af 8000 	nop.w
 800ee10:	33145c07 	.word	0x33145c07
 800ee14:	3ca1a626 	.word	0x3ca1a626
 800ee18:	54442d18 	.word	0x54442d18
 800ee1c:	400921fb 	.word	0x400921fb
 800ee20:	54442d18 	.word	0x54442d18
 800ee24:	3ff921fb 	.word	0x3ff921fb
 800ee28:	54442d18 	.word	0x54442d18
 800ee2c:	3fe921fb 	.word	0x3fe921fb
 800ee30:	0800f7f8 	.word	0x0800f7f8
 800ee34:	0800f810 	.word	0x0800f810
 800ee38:	54442d18 	.word	0x54442d18
 800ee3c:	c00921fb 	.word	0xc00921fb
 800ee40:	54442d18 	.word	0x54442d18
 800ee44:	bff921fb 	.word	0xbff921fb
 800ee48:	7ff00000 	.word	0x7ff00000

0800ee4c <_init>:
 800ee4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee4e:	bf00      	nop
 800ee50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee52:	bc08      	pop	{r3}
 800ee54:	469e      	mov	lr, r3
 800ee56:	4770      	bx	lr

0800ee58 <_fini>:
 800ee58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee5a:	bf00      	nop
 800ee5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee5e:	bc08      	pop	{r3}
 800ee60:	469e      	mov	lr, r3
 800ee62:	4770      	bx	lr
