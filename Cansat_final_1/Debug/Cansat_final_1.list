
Cansat_final_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c0  0800e108  0800e108  0001e108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eac8  0800eac8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800eac8  0800eac8  0001eac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ead0  0800ead0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ead0  0800ead0  0001ead0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ead4  0800ead4  0001ead4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ead8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004340  200001e8  0800ecbc  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004528  0800ecbc  00024528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de0d  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000452f  00000000  00000000  0003e021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001720  00000000  00000000  00042550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001560  00000000  00000000  00043c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc62  00000000  00000000  000451d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e754  00000000  00000000  00060e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d3cf  00000000  00000000  0007f586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011c955  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007104  00000000  00000000  0011c9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e0ec 	.word	0x0800e0ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800e0ec 	.word	0x0800e0ec

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b974 	b.w	8000fb8 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <Task_lancement_Cansat>:
/********* StreamBuffer *********/
extern StreamBufferHandle_t xGPS_StreamBuffer;



void Task_lancement_Cansat(){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af02      	add	r7, sp, #8

	for(;;){

		xTaskCreate(Task_Mesure_M, "mesure champ magnetique", 500, NULL, osPriorityHigh, &pxMesure_M);
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <Task_lancement_Cansat+0x3c>)
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fd0:	490a      	ldr	r1, [pc, #40]	; (8000ffc <Task_lancement_Cansat+0x40>)
 8000fd2:	480b      	ldr	r0, [pc, #44]	; (8001000 <Task_lancement_Cansat+0x44>)
 8000fd4:	f008 fb50 	bl	8009678 <xTaskCreate>
		//xTaskCreate(Task_Mesure_AetG, "mesure acceleration lineaire et angulaire", 500, NULL, osPriorityAboveNormal, pxCreatedTask);
		xTaskCreate(Task_eCompass, "eCompass", 500, NULL, osPriorityAboveNormal, &pxeCompass);
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <Task_lancement_Cansat+0x48>)
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fe6:	4908      	ldr	r1, [pc, #32]	; (8001008 <Task_lancement_Cansat+0x4c>)
 8000fe8:	4808      	ldr	r0, [pc, #32]	; (800100c <Task_lancement_Cansat+0x50>)
 8000fea:	f008 fb45 	bl	8009678 <xTaskCreate>

		vTaskDelete(NULL);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f008 fc90 	bl	8009914 <vTaskDelete>
		xTaskCreate(Task_Mesure_M, "mesure champ magnetique", 500, NULL, osPriorityHigh, &pxMesure_M);
 8000ff4:	e7e5      	b.n	8000fc2 <Task_lancement_Cansat+0x6>
 8000ff6:	bf00      	nop
 8000ff8:	20000210 	.word	0x20000210
 8000ffc:	0800e150 	.word	0x0800e150
 8001000:	08001011 	.word	0x08001011
 8001004:	20000214 	.word	0x20000214
 8001008:	0800e168 	.word	0x0800e168
 800100c:	080011c5 	.word	0x080011c5

08001010 <Task_Mesure_M>:
	}
}


void Task_Mesure_M(){
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200;
 8001016:	23c8      	movs	r3, #200	; 0xc8
 8001018:	607b      	str	r3, [r7, #4]

  //Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 800101a:	f008 fed1 	bl	8009dc0 <xTaskGetTickCount>
 800101e:	4603      	mov	r3, r0
 8001020:	603b      	str	r3, [r7, #0]

	for(;;){

		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8001022:	463b      	mov	r3, r7
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4618      	mov	r0, r3
 8001028:	f008 fd04 	bl	8009a34 <vTaskDelayUntil>
		printf("mesure champ magnetique \r\n");
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <Task_Mesure_M+0x30>)
 800102e:	f00a fe63 	bl	800bcf8 <puts>
		Measure_M(&hi2c1, pDataCansat.IMU.MagnetometerData.mag_raw, pDataCansat.IMU.MagnetometerData.offset, pDataCansat.IMU.MagnetometerData.coeff);
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <Task_Mesure_M+0x34>)
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <Task_Mesure_M+0x38>)
 8001036:	4905      	ldr	r1, [pc, #20]	; (800104c <Task_Mesure_M+0x3c>)
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <Task_Mesure_M+0x40>)
 800103a:	f000 fa15 	bl	8001468 <Measure_M>
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800103e:	e7f0      	b.n	8001022 <Task_Mesure_M+0x12>
 8001040:	0800e174 	.word	0x0800e174
 8001044:	200005b8 	.word	0x200005b8
 8001048:	200005a0 	.word	0x200005a0
 800104c:	20000588 	.word	0x20000588
 8001050:	200004d4 	.word	0x200004d4

08001054 <prvGPS_ReceivingTask>:

	}
}

void prvGPS_ReceivingTask( void *pvParameters )
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b0b6      	sub	sp, #216	; 0xd8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

	char ReceivingTask_rx[GPS_TRAME_SIZE];
	char DataGPS[GPS_TRAME_SIZE];
	int i = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	BaseType_t xDemoStatus = pdPASS;
 8001062:	2301      	movs	r3, #1
 8001064:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	configASSERT( xStreamBuffer != NULL );

	// Start with the Rx buffer in a known state.
	memset( cRxBuffer, 0x00, sizeof( cRxBuffer ) );
*/
	 HAL_UART_Receive_IT(&huart1, (uint8_t *)&uart_gps_rx, 80);
 8001068:	2250      	movs	r2, #80	; 0x50
 800106a:	4951      	ldr	r1, [pc, #324]	; (80011b0 <prvGPS_ReceivingTask+0x15c>)
 800106c:	4851      	ldr	r0, [pc, #324]	; (80011b4 <prvGPS_ReceivingTask+0x160>)
 800106e:	f006 fe98 	bl	8007da2 <HAL_UART_Receive_IT>
	{
		/* Keep receiving characters until the end of the string is received.
		Note:  An infinite block time is used to simplify the example.  Infinite
		block times are not recommended in production code as they do not allow
		for error recovery. */
		xStreamBufferReceive( /* The stream buffer data is being received from. */
 8001072:	4b51      	ldr	r3, [pc, #324]	; (80011b8 <prvGPS_ReceivingTask+0x164>)
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800107a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800107e:	2250      	movs	r2, #80	; 0x50
 8001080:	f008 f897 	bl	80091b2 <xStreamBufferReceive>
							  is empty. */
							  portMAX_DELAY );



		if( i == 0 )
 8001084:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10c      	bne.n	80010a6 <prvGPS_ReceivingTask+0x52>
		{
			if( ReceivingTask_rx[i] == '$')
 800108c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001090:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001094:	4413      	add	r3, r2
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b24      	cmp	r3, #36	; 0x24
 800109a:	d104      	bne.n	80010a6 <prvGPS_ReceivingTask+0x52>
			{
				i++;
 800109c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80010a0:	3301      	adds	r3, #1
 80010a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			}
		}

		if( i == 1 )
 80010a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d10c      	bne.n	80010c8 <prvGPS_ReceivingTask+0x74>
		{
			if( ReceivingTask_rx[i] == 'G')
 80010ae:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80010b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80010b6:	4413      	add	r3, r2
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b47      	cmp	r3, #71	; 0x47
 80010bc:	d104      	bne.n	80010c8 <prvGPS_ReceivingTask+0x74>
			{
				i++;
 80010be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80010c2:	3301      	adds	r3, #1
 80010c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			}
		}

		if( i == 2 )
 80010c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d10c      	bne.n	80010ea <prvGPS_ReceivingTask+0x96>
		{
			if( ReceivingTask_rx[i] == 'N')
 80010d0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80010d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80010d8:	4413      	add	r3, r2
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b4e      	cmp	r3, #78	; 0x4e
 80010de:	d104      	bne.n	80010ea <prvGPS_ReceivingTask+0x96>
			{
				i++;
 80010e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80010e4:	3301      	adds	r3, #1
 80010e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			}
		}

		if( i == 3)
 80010ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d10c      	bne.n	800110c <prvGPS_ReceivingTask+0xb8>
		{
			if( ReceivingTask_rx[i] == 'G')
 80010f2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80010f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80010fa:	4413      	add	r3, r2
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b47      	cmp	r3, #71	; 0x47
 8001100:	d104      	bne.n	800110c <prvGPS_ReceivingTask+0xb8>
			{
				i++;
 8001102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001106:	3301      	adds	r3, #1
 8001108:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			}
		}

		if( i == 4 )
 800110c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001110:	2b04      	cmp	r3, #4
 8001112:	d10c      	bne.n	800112e <prvGPS_ReceivingTask+0xda>
		{
			if( ReceivingTask_rx[i] == 'G')
 8001114:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001118:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b47      	cmp	r3, #71	; 0x47
 8001122:	d104      	bne.n	800112e <prvGPS_ReceivingTask+0xda>
			{
				i++;
 8001124:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001128:	3301      	adds	r3, #1
 800112a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			}
		}

		if( i == 5)
 800112e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001132:	2b05      	cmp	r3, #5
 8001134:	d10d      	bne.n	8001152 <prvGPS_ReceivingTask+0xfe>
		{
			if( ReceivingTask_rx[i] == 'A')
 8001136:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800113a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800113e:	4413      	add	r3, r2
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b41      	cmp	r3, #65	; 0x41
 8001144:	d12e      	bne.n	80011a4 <prvGPS_ReceivingTask+0x150>
			{
				i++;
 8001146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800114a:	3301      	adds	r3, #1
 800114c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001150:	e028      	b.n	80011a4 <prvGPS_ReceivingTask+0x150>

		else
				{
					// Receiving characters while looking for the end of the GNSGGA string,
					// which is an '\n'.
					if( ReceivingTask_rx[ i ] == '\n' )
 8001152:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800115a:	4413      	add	r3, r2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b0a      	cmp	r3, #10
 8001160:	d11b      	bne.n	800119a <prvGPS_ReceivingTask+0x146>
					{
						// The string has now been received.  Check its validity.
						if( strcmp( ReceivingTask_rx, pcStringToReceive ) != 0 )
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <prvGPS_ReceivingTask+0x168>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f837 	bl	80001e0 <strcmp>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d002      	beq.n	800117e <prvGPS_ReceivingTask+0x12a>
						{
							xDemoStatus = pdFAIL;
 8001178:	2300      	movs	r3, #0
 800117a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

						}

						// Return to start looking for the beginning of the string again.
						memset( ReceivingTask_rx, 0x00, sizeof( DataGPS ) );
 800117e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001182:	2264      	movs	r2, #100	; 0x64
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f00a f829 	bl	800b1de <memset>
						i = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

						printf("Data GPS received --------------- GPS --------------- GPS ---- \r\n");
 8001192:	480b      	ldr	r0, [pc, #44]	; (80011c0 <prvGPS_ReceivingTask+0x16c>)
 8001194:	f00a fdb0 	bl	800bcf8 <puts>
 8001198:	e004      	b.n	80011a4 <prvGPS_ReceivingTask+0x150>
					}
					else
					{
						// Receive the next character the next time around, while
						// continuing to look for the end of the string.
						i++;
 800119a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800119e:	3301      	adds	r3, #1
 80011a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

						//configASSERT( i < sizeof( DataGPS ) );
					}
				 }

		HAL_UART_Receive_IT(&huart1, (uint8_t *)&uart_gps_rx, 80);
 80011a4:	2250      	movs	r2, #80	; 0x50
 80011a6:	4902      	ldr	r1, [pc, #8]	; (80011b0 <prvGPS_ReceivingTask+0x15c>)
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <prvGPS_ReceivingTask+0x160>)
 80011aa:	f006 fdfa 	bl	8007da2 <HAL_UART_Receive_IT>
		xStreamBufferReceive( /* The stream buffer data is being received from. */
 80011ae:	e760      	b.n	8001072 <prvGPS_ReceivingTask+0x1e>
 80011b0:	200005f4 	.word	0x200005f4
 80011b4:	20000738 	.word	0x20000738
 80011b8:	20000204 	.word	0x20000204
 80011bc:	20000000 	.word	0x20000000
 80011c0:	0800e190 	.word	0x0800e190

080011c4 <Task_eCompass>:
}




void Task_eCompass(){
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b0b5      	sub	sp, #212	; 0xd4
 80011c8:	af2e      	add	r7, sp, #184	; 0xb8

	float Cansat_theta = 0;
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
	double Delta_theta = 0;
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	f04f 0300 	mov.w	r3, #0
 80011d8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000;
 80011dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e0:	607b      	str	r3, [r7, #4]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80011e2:	f008 fded 	bl	8009dc0 <xTaskGetTickCount>
 80011e6:	4603      	mov	r3, r0
 80011e8:	603b      	str	r3, [r7, #0]

	for(;;){

		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 80011ea:	463b      	mov	r3, r7
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f008 fc20 	bl	8009a34 <vTaskDelayUntil>
		// ---> Messure accéléro
		// ---> calcul

		//3. Conversion du champ magnétique en degré

		Cansat_theta = magnetic_field_to_degree(pDataCansat.IMU.MagnetometerData.mag_raw);
 80011f4:	4816      	ldr	r0, [pc, #88]	; (8001250 <Task_eCompass+0x8c>)
 80011f6:	f000 fa7f 	bl	80016f8 <magnetic_field_to_degree>
 80011fa:	ed87 0a05 	vstr	s0, [r7, #20]
		pDataCansat.IMU.MagnetometerData.degree_angle = Cansat_theta;
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff f9ba 	bl	8000578 <__aeabi_f2d>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4912      	ldr	r1, [pc, #72]	; (8001254 <Task_eCompass+0x90>)
 800120a:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0

		printf("Cansat theta computed * * * * * * * * * \r\n");
 800120e:	4812      	ldr	r0, [pc, #72]	; (8001258 <Task_eCompass+0x94>)
 8001210:	f00a fd72 	bl	800bcf8 <puts>

		//4. Calcul du Delta theta

		Delta_theta = Delta_theta_calculation(pDataCansat);
 8001214:	4c0f      	ldr	r4, [pc, #60]	; (8001254 <Task_eCompass+0x90>)
 8001216:	4668      	mov	r0, sp
 8001218:	f104 0310 	add.w	r3, r4, #16
 800121c:	22b8      	movs	r2, #184	; 0xb8
 800121e:	4619      	mov	r1, r3
 8001220:	f009 ffcf 	bl	800b1c2 <memcpy>
 8001224:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001228:	f000 fac8 	bl	80017bc <Delta_theta_calculation>
 800122c:	ed87 0b02 	vstr	d0, [r7, #8]

		printf("Delta theta computed * * * * * * * * * * \r\n");
 8001230:	480a      	ldr	r0, [pc, #40]	; (800125c <Task_eCompass+0x98>)
 8001232:	f00a fd61 	bl	800bcf8 <puts>

		//5. Rotation des servos en conséquence

		choice_direction_intensity(Delta_theta);
 8001236:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800123a:	f7ff fccd 	bl	8000bd8 <__aeabi_d2uiz>
 800123e:	4603      	mov	r3, r0
 8001240:	4618      	mov	r0, r3
 8001242:	f000 fef7 	bl	8002034 <choice_direction_intensity>
		printf("-----------------------------> Rotation en cours ! \r\n");
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <Task_eCompass+0x9c>)
 8001248:	f00a fd56 	bl	800bcf8 <puts>
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800124c:	e7cd      	b.n	80011ea <Task_eCompass+0x26>
 800124e:	bf00      	nop
 8001250:	20000588 	.word	0x20000588
 8001254:	20000528 	.word	0x20000528
 8001258:	0800e230 	.word	0x0800e230
 800125c:	0800e25c 	.word	0x0800e25c
 8001260:	0800e288 	.word	0x0800e288

08001264 <Init>:
	 * et elle configure ce dernier pour qu'il réalise des mesures en continu.
	 * @param p_hi2c1 Pointeur vers une structure I2C qui contient l'information de configuration pour un i2c particulier
	 * @retval None
	 */
void Init(I2C_HandleTypeDef* p_hi2c1)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af04      	add	r7, sp, #16
 800126a:	6078      	str	r0, [r7, #4]

	uint8_t buff[6];
	buff[0] = 0x80;
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD,  PWR_MGMT_1,  1, &buff[0], 1, 10);
 8001270:	230a      	movs	r3, #10
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	2301      	movs	r3, #1
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2301      	movs	r3, #1
 8001280:	226b      	movs	r2, #107	; 0x6b
 8001282:	21d0      	movs	r1, #208	; 0xd0
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f002 fbad 	bl	80039e4 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800128a:	2064      	movs	r0, #100	; 0x64
 800128c:	f001 fbc2 	bl	8002a14 <HAL_Delay>
	buff[0] = 0x1;
 8001290:	2301      	movs	r3, #1
 8001292:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD, PWR_MGMT_1,  1, &buff[0], 1, 10);
 8001294:	230a      	movs	r3, #10
 8001296:	9302      	str	r3, [sp, #8]
 8001298:	2301      	movs	r3, #1
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2301      	movs	r3, #1
 80012a4:	226b      	movs	r2, #107	; 0x6b
 80012a6:	21d0      	movs	r1, #208	; 0xd0
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f002 fb9b 	bl	80039e4 <HAL_I2C_Mem_Write>


	/********* changement de la sensibilité de l'accélérometre  00=2g 01=4g 10=8g 11=16g *********/
	HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD,  ACCEL_CONFIG,  1, &buff[0], 1, 10);
 80012ae:	230a      	movs	r3, #10
 80012b0:	9302      	str	r3, [sp, #8]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2301      	movs	r3, #1
 80012be:	221c      	movs	r2, #28
 80012c0:	21d0      	movs	r1, #208	; 0xd0
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f002 fc88 	bl	8003bd8 <HAL_I2C_Mem_Read>

	//Pour mettre 00
	buff[0] =(buff[0] & (0b11100111)) ;
 80012c8:	7a3b      	ldrb	r3, [r7, #8]
 80012ca:	f023 0318 	bic.w	r3, r3, #24
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	723b      	strb	r3, [r7, #8]
	//buff[0] =(buff[0] & (0b11110111)) ;
	//buff[0] =(buff[0] | (0b00010000)) ;
	//Pour mettre 11
	//buff[0] =(buff[0] | (0b00011000)) ;

	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD,  ACCEL_CONFIG,  1, &buff[0], 1, 10);
 80012d2:	230a      	movs	r3, #10
 80012d4:	9302      	str	r3, [sp, #8]
 80012d6:	2301      	movs	r3, #1
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2301      	movs	r3, #1
 80012e2:	221c      	movs	r2, #28
 80012e4:	21d0      	movs	r1, #208	; 0xd0
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f002 fb7c 	bl	80039e4 <HAL_I2C_Mem_Write>


	buff[0]=0x2; // Bypass pour activer le magnétomètre
 80012ec:	2302      	movs	r3, #2
 80012ee:	723b      	strb	r3, [r7, #8]
		  if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,INT_PIN_CFG,1,&buff[0],1,10)!=HAL_OK){
 80012f0:	230a      	movs	r3, #10
 80012f2:	9302      	str	r3, [sp, #8]
 80012f4:	2301      	movs	r3, #1
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2301      	movs	r3, #1
 8001300:	2237      	movs	r2, #55	; 0x37
 8001302:	21d0      	movs	r1, #208	; 0xd0
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f002 fb6d 	bl	80039e4 <HAL_I2C_Mem_Write>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d004      	beq.n	800131a <Init+0xb6>
			  printf("probleme activation magnetometre --> fct Init \r\n");
 8001310:	4851      	ldr	r0, [pc, #324]	; (8001458 <Init+0x1f4>)
 8001312:	f00a fcf1 	bl	800bcf8 <puts>
		  	  Error_Handler();
 8001316:	f000 fde5 	bl	8001ee4 <Error_Handler>
		  }
	buff[0]=0x16; // configuration mesure en continu du magnétomètre
 800131a:	2316      	movs	r3, #22
 800131c:	723b      	strb	r3, [r7, #8]
		 	  if(HAL_I2C_Mem_Write(p_hi2c1,MAGNETO_ADD,AK8963_CNTL,1,&buff[0],1,10)!=HAL_OK){
 800131e:	230a      	movs	r3, #10
 8001320:	9302      	str	r3, [sp, #8]
 8001322:	2301      	movs	r3, #1
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2301      	movs	r3, #1
 800132e:	220a      	movs	r2, #10
 8001330:	2118      	movs	r1, #24
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f002 fb56 	bl	80039e4 <HAL_I2C_Mem_Write>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d004      	beq.n	8001348 <Init+0xe4>
		 		  printf("probleme configuration mesure magnetometre --> fct Init \r\n");
 800133e:	4847      	ldr	r0, [pc, #284]	; (800145c <Init+0x1f8>)
 8001340:	f00a fcda 	bl	800bcf8 <puts>
		 	  	  Error_Handler();
 8001344:	f000 fdce 	bl	8001ee4 <Error_Handler>

		 	  }

	/********** Réglage de la bande passante **********/

	buff[0]=0x3;
 8001348:	2303      	movs	r3, #3
 800134a:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,CONFIG,1,&buff[0],1,10)!=HAL_OK){
 800134c:	230a      	movs	r3, #10
 800134e:	9302      	str	r3, [sp, #8]
 8001350:	2301      	movs	r3, #1
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2301      	movs	r3, #1
 800135c:	221a      	movs	r2, #26
 800135e:	21d0      	movs	r1, #208	; 0xd0
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f002 fb3f 	bl	80039e4 <HAL_I2C_Mem_Write>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d004      	beq.n	8001376 <Init+0x112>
		printf("probleme bande passante --> fct Init \r\n");
 800136c:	483c      	ldr	r0, [pc, #240]	; (8001460 <Init+0x1fc>)
 800136e:	f00a fcc3 	bl	800bcf8 <puts>
		Error_Handler();
 8001372:	f000 fdb7 	bl	8001ee4 <Error_Handler>
			Error_Handler();
		}
*/

	// bande passante à 250Hz : FCHOICE = 11 => FCHOICE_b = 00, DLPF_CFG = 000
		HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD,  GYRO_CONFIG,  1, &buff[0], 1, 10);
 8001376:	230a      	movs	r3, #10
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	2301      	movs	r3, #1
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2301      	movs	r3, #1
 8001386:	221b      	movs	r2, #27
 8001388:	21d0      	movs	r1, #208	; 0xd0
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f002 fc24 	bl	8003bd8 <HAL_I2C_Mem_Read>
		//Pour mettre 00 dans FCHOICE_b
		buff[0] =(buff[0] & (0b11111100)) ;
 8001390:	7a3b      	ldrb	r3, [r7, #8]
 8001392:	f023 0303 	bic.w	r3, r3, #3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	723b      	strb	r3, [r7, #8]
		if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,GYRO_CONFIG,1,&buff[0],1,10)!=HAL_OK){
 800139a:	230a      	movs	r3, #10
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	2301      	movs	r3, #1
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2301      	movs	r3, #1
 80013aa:	221b      	movs	r2, #27
 80013ac:	21d0      	movs	r1, #208	; 0xd0
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f002 fb18 	bl	80039e4 <HAL_I2C_Mem_Write>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <Init+0x15a>
				Error_Handler(); }
 80013ba:	f000 fd93 	bl	8001ee4 <Error_Handler>
		//Pour mettre 000 dans DLPF_CFG
		HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD, CONFIG,  1, &buff[0], 1, 10);
 80013be:	230a      	movs	r3, #10
 80013c0:	9302      	str	r3, [sp, #8]
 80013c2:	2301      	movs	r3, #1
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2301      	movs	r3, #1
 80013ce:	221a      	movs	r2, #26
 80013d0:	21d0      	movs	r1, #208	; 0xd0
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f002 fc00 	bl	8003bd8 <HAL_I2C_Mem_Read>
		buff[0] =(buff[0] & (0b11111000)) ;
 80013d8:	7a3b      	ldrb	r3, [r7, #8]
 80013da:	f023 0307 	bic.w	r3, r3, #7
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	723b      	strb	r3, [r7, #8]
		if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,CONFIG,1,&buff[0],1,10)!=HAL_OK){
 80013e2:	230a      	movs	r3, #10
 80013e4:	9302      	str	r3, [sp, #8]
 80013e6:	2301      	movs	r3, #1
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2301      	movs	r3, #1
 80013f2:	221a      	movs	r2, #26
 80013f4:	21d0      	movs	r1, #208	; 0xd0
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f002 faf4 	bl	80039e4 <HAL_I2C_Mem_Write>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <Init+0x1a2>
				Error_Handler();
 8001402:	f000 fd6f 	bl	8001ee4 <Error_Handler>
		}
*/

	/*********** Réglage de la fréquence d'échantillonnage **********/

	buff[0]=0xFF;
 8001406:	23ff      	movs	r3, #255	; 0xff
 8001408:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,SMPLRT_DIV,1,&buff[0],1,10)!=HAL_OK){
 800140a:	230a      	movs	r3, #10
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	2301      	movs	r3, #1
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2301      	movs	r3, #1
 800141a:	2219      	movs	r2, #25
 800141c:	21d0      	movs	r1, #208	; 0xd0
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f002 fae0 	bl	80039e4 <HAL_I2C_Mem_Write>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d004      	beq.n	8001434 <Init+0x1d0>
		printf("probleme reglage frequence echantillonnage --> Init \r\n");
 800142a:	480e      	ldr	r0, [pc, #56]	; (8001464 <Init+0x200>)
 800142c:	f00a fc64 	bl	800bcf8 <puts>
		Error_Handler();
 8001430:	f000 fd58 	bl	8001ee4 <Error_Handler>
	}
	HAL_I2C_Mem_Read(p_hi2c1,MPU_ADD,LP_ACCEL_ODR,1,&buff[0],1,10);
 8001434:	230a      	movs	r3, #10
 8001436:	9302      	str	r3, [sp, #8]
 8001438:	2301      	movs	r3, #1
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2301      	movs	r3, #1
 8001444:	221e      	movs	r2, #30
 8001446:	21d0      	movs	r1, #208	; 0xd0
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f002 fbc5 	bl	8003bd8 <HAL_I2C_Mem_Read>
	// a faire : changer la valeur de DLPF_CFG à 2 par exemple et voir en mode debug si la valeur des 4 derniers bits de LP_ACCEL_ODR est à 4.

}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	0800e2c0 	.word	0x0800e2c0
 800145c:	0800e2f0 	.word	0x0800e2f0
 8001460:	0800e32c 	.word	0x0800e32c
 8001464:	0800e354 	.word	0x0800e354

08001468 <Measure_M>:
	 * @param hi2cx Pointeur vers une structure I2C qui contient l'information de configuration pour un i2c particulier
	 * @param tableau_donnee_utiles Pointeur vers une zone mémoire de type double contenant l’information de champ magnétique
	 * @retval None
	 */

void Measure_M(I2C_HandleTypeDef* p_hi2c1,double* mag, double* offset, double* coeff){
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b090      	sub	sp, #64	; 0x40
 800146c:	af04      	add	r7, sp, #16
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	603b      	str	r3, [r7, #0]
		uint8_t buffer[6];
		uint8_t asa[3];
		uint8_t drdy[1];


		HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_ST1,1,drdy,1,20);
 8001476:	2314      	movs	r3, #20
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	2301      	movs	r3, #1
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2301      	movs	r3, #1
 8001486:	2202      	movs	r2, #2
 8001488:	2118      	movs	r1, #24
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f002 fba4 	bl	8003bd8 <HAL_I2C_Mem_Read>
		drdy[0]=((drdy[0])&(00000001));
 8001490:	7d3b      	ldrb	r3, [r7, #20]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	b2db      	uxtb	r3, r3
 8001498:	753b      	strb	r3, [r7, #20]
		if(drdy[0]==1){
 800149a:	7d3b      	ldrb	r3, [r7, #20]
 800149c:	2b01      	cmp	r3, #1
 800149e:	f040 8115 	bne.w	80016cc <Measure_M+0x264>

			if((HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_XOUT_L,1,buffer,7,20)==HAL_OK)
 80014a2:	2314      	movs	r3, #20
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	2307      	movs	r3, #7
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2301      	movs	r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	2118      	movs	r1, #24
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f002 fb8e 	bl	8003bd8 <HAL_I2C_Mem_Read>
 80014bc:	4603      	mov	r3, r0
					&(HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_ASAX,1,asa,3,20)==HAL_OK)){
 80014be:	2b00      	cmp	r3, #0
 80014c0:	bf0c      	ite	eq
 80014c2:	2301      	moveq	r3, #1
 80014c4:	2300      	movne	r3, #0
 80014c6:	b2dc      	uxtb	r4, r3
 80014c8:	2314      	movs	r3, #20
 80014ca:	9302      	str	r3, [sp, #8]
 80014cc:	2303      	movs	r3, #3
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	f107 0318 	add.w	r3, r7, #24
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2301      	movs	r3, #1
 80014d8:	2210      	movs	r2, #16
 80014da:	2118      	movs	r1, #24
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f002 fb7b 	bl	8003bd8 <HAL_I2C_Mem_Read>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bf0c      	ite	eq
 80014e8:	2301      	moveq	r3, #1
 80014ea:	2300      	movne	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	4023      	ands	r3, r4
 80014f0:	b2db      	uxtb	r3, r3
			if((HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_XOUT_L,1,buffer,7,20)==HAL_OK)
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 80ea 	beq.w	80016cc <Measure_M+0x264>


						x = (uint16_t)((buffer[1]<<8)+ buffer[0]);
 80014f8:	7f7b      	ldrb	r3, [r7, #29]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	b29a      	uxth	r2, r3
 8001500:	7f3b      	ldrb	r3, [r7, #28]
 8001502:	b29b      	uxth	r3, r3
 8001504:	4413      	add	r3, r2
 8001506:	b29b      	uxth	r3, r3
 8001508:	85fb      	strh	r3, [r7, #46]	; 0x2e
						y = (uint16_t)((buffer[3]<<8)+ buffer[2]);
 800150a:	7ffb      	ldrb	r3, [r7, #31]
 800150c:	b29b      	uxth	r3, r3
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b29a      	uxth	r2, r3
 8001512:	7fbb      	ldrb	r3, [r7, #30]
 8001514:	b29b      	uxth	r3, r3
 8001516:	4413      	add	r3, r2
 8001518:	b29b      	uxth	r3, r3
 800151a:	85bb      	strh	r3, [r7, #44]	; 0x2c
						z = (uint16_t)((buffer[5]<<8)+ buffer[4]);
 800151c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001520:	b29b      	uxth	r3, r3
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b29a      	uxth	r2, r3
 8001526:	f897 3020 	ldrb.w	r3, [r7, #32]
 800152a:	b29b      	uxth	r3, r3
 800152c:	4413      	add	r3, r2
 800152e:	b29b      	uxth	r3, r3
 8001530:	857b      	strh	r3, [r7, #42]	; 0x2a
						asax=asa[0];
 8001532:	7e3b      	ldrb	r3, [r7, #24]
 8001534:	853b      	strh	r3, [r7, #40]	; 0x28
						asay=asa[1];
 8001536:	7e7b      	ldrb	r3, [r7, #25]
 8001538:	84fb      	strh	r3, [r7, #38]	; 0x26
						asaz=asa[2];
 800153a:	7ebb      	ldrb	r3, [r7, #26]
 800153c:	84bb      	strh	r3, [r7, #36]	; 0x24
						mag[0] = (x*((((asax-128)*0.5)/128)+1)*4912)/32760;
 800153e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff f806 	bl	8000554 <__aeabi_i2d>
 8001548:	4604      	mov	r4, r0
 800154a:	460d      	mov	r5, r1
 800154c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001550:	3b80      	subs	r3, #128	; 0x80
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe fffe 	bl	8000554 <__aeabi_i2d>
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	4b62      	ldr	r3, [pc, #392]	; (80016e8 <Measure_M+0x280>)
 800155e:	f7ff f863 	bl	8000628 <__aeabi_dmul>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	4b5f      	ldr	r3, [pc, #380]	; (80016ec <Measure_M+0x284>)
 8001570:	f7ff f984 	bl	800087c <__aeabi_ddiv>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	4b5b      	ldr	r3, [pc, #364]	; (80016f0 <Measure_M+0x288>)
 8001582:	f7fe fe9b 	bl	80002bc <__adddf3>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4620      	mov	r0, r4
 800158c:	4629      	mov	r1, r5
 800158e:	f7ff f84b 	bl	8000628 <__aeabi_dmul>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	a34f      	add	r3, pc, #316	; (adr r3, 80016d8 <Measure_M+0x270>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7ff f842 	bl	8000628 <__aeabi_dmul>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	a34c      	add	r3, pc, #304	; (adr r3, 80016e0 <Measure_M+0x278>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	f7ff f963 	bl	800087c <__aeabi_ddiv>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	e9c1 2300 	strd	r2, r3, [r1]
						mag[1] = (y*((((asay-128)*0.5)/128)+1)*4912)/32760;
 80015c0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ffc5 	bl	8000554 <__aeabi_i2d>
 80015ca:	4604      	mov	r4, r0
 80015cc:	460d      	mov	r5, r1
 80015ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80015d2:	3b80      	subs	r3, #128	; 0x80
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffbd 	bl	8000554 <__aeabi_i2d>
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	4b42      	ldr	r3, [pc, #264]	; (80016e8 <Measure_M+0x280>)
 80015e0:	f7ff f822 	bl	8000628 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	4b3e      	ldr	r3, [pc, #248]	; (80016ec <Measure_M+0x284>)
 80015f2:	f7ff f943 	bl	800087c <__aeabi_ddiv>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <Measure_M+0x288>)
 8001604:	f7fe fe5a 	bl	80002bc <__adddf3>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4620      	mov	r0, r4
 800160e:	4629      	mov	r1, r5
 8001610:	f7ff f80a 	bl	8000628 <__aeabi_dmul>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	a32e      	add	r3, pc, #184	; (adr r3, 80016d8 <Measure_M+0x270>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	f7ff f801 	bl	8000628 <__aeabi_dmul>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	f103 0408 	add.w	r4, r3, #8
 8001634:	a32a      	add	r3, pc, #168	; (adr r3, 80016e0 <Measure_M+0x278>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7ff f91f 	bl	800087c <__aeabi_ddiv>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	e9c4 2300 	strd	r2, r3, [r4]
						mag[2] = (z*((((asaz-128)*0.5)/128)+1)*4912)/32760;
 8001646:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff82 	bl	8000554 <__aeabi_i2d>
 8001650:	4604      	mov	r4, r0
 8001652:	460d      	mov	r5, r1
 8001654:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001658:	3b80      	subs	r3, #128	; 0x80
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff7a 	bl	8000554 <__aeabi_i2d>
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <Measure_M+0x280>)
 8001666:	f7fe ffdf 	bl	8000628 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <Measure_M+0x284>)
 8001678:	f7ff f900 	bl	800087c <__aeabi_ddiv>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <Measure_M+0x288>)
 800168a:	f7fe fe17 	bl	80002bc <__adddf3>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4620      	mov	r0, r4
 8001694:	4629      	mov	r1, r5
 8001696:	f7fe ffc7 	bl	8000628 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	a30d      	add	r3, pc, #52	; (adr r3, 80016d8 <Measure_M+0x270>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7fe ffbe 	bl	8000628 <__aeabi_dmul>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	f103 0410 	add.w	r4, r3, #16
 80016ba:	a309      	add	r3, pc, #36	; (adr r3, 80016e0 <Measure_M+0x278>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	f7ff f8dc 	bl	800087c <__aeabi_ddiv>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	e9c4 2300 	strd	r2, r3, [r4]
						mag[2] = (mag[2]-offset[2])*coeff[2];
						*/

			}
		}
}
 80016cc:	bf00      	nop
 80016ce:	3730      	adds	r7, #48	; 0x30
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bdb0      	pop	{r4, r5, r7, pc}
 80016d4:	f3af 8000 	nop.w
 80016d8:	00000000 	.word	0x00000000
 80016dc:	40b33000 	.word	0x40b33000
 80016e0:	00000000 	.word	0x00000000
 80016e4:	40dffe00 	.word	0x40dffe00
 80016e8:	3fe00000 	.word	0x3fe00000
 80016ec:	40600000 	.word	0x40600000
 80016f0:	3ff00000 	.word	0x3ff00000
 80016f4:	00000000 	.word	0x00000000

080016f8 <magnetic_field_to_degree>:
#include <math.h>



float magnetic_field_to_degree(double* mag_calibrated)
{
 80016f8:	b5b0      	push	{r4, r5, r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	float heading = atan2(-mag_calibrated[1], mag_calibrated[0]); // atan2(y,x)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3308      	adds	r3, #8
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	4614      	mov	r4, r2
 800170a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	ed93 7b00 	vldr	d7, [r3]
 8001714:	eeb0 1a47 	vmov.f32	s2, s14
 8001718:	eef0 1a67 	vmov.f32	s3, s15
 800171c:	ec45 4b10 	vmov	d0, r4, r5
 8001720:	f00c fc17 	bl	800df52 <atan2>
 8001724:	ec53 2b10 	vmov	r2, r3, d0
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	f7ff fa74 	bl	8000c18 <__aeabi_d2f>
 8001730:	4603      	mov	r3, r0
 8001732:	613b      	str	r3, [r7, #16]


	  //float declinationAngle = 0.22; // Angle de déclinaison magnétique pour Paris
	  float declinationAngle = 0.21; // Angle de déclinaison magnétique pour Barcelone
 8001734:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <magnetic_field_to_degree+0xb8>)
 8001736:	60fb      	str	r3, [r7, #12]
	  heading += declinationAngle;   // site pour connaitre la déclinaison : https://www.ngdc.noaa.gov/geomag/calculators/magcalc
 8001738:	ed97 7a04 	vldr	s14, [r7, #16]
 800173c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001744:	edc7 7a04 	vstr	s15, [r7, #16]


	  float headingDegrees = heading * 180 / M_PI; // Conversion en degrés
 8001748:	edd7 7a04 	vldr	s15, [r7, #16]
 800174c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80017b4 <magnetic_field_to_degree+0xbc>
 8001750:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001754:	ee17 0a90 	vmov	r0, s15
 8001758:	f7fe ff0e 	bl	8000578 <__aeabi_f2d>
 800175c:	a312      	add	r3, pc, #72	; (adr r3, 80017a8 <magnetic_field_to_degree+0xb0>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7ff f88b 	bl	800087c <__aeabi_ddiv>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff fa53 	bl	8000c18 <__aeabi_d2f>
 8001772:	4603      	mov	r3, r0
 8001774:	617b      	str	r3, [r7, #20]

	  if(headingDegrees<=0){
 8001776:	edd7 7a05 	vldr	s15, [r7, #20]
 800177a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	d807      	bhi.n	8001794 <magnetic_field_to_degree+0x9c>
			  headingDegrees+=360;
 8001784:	edd7 7a05 	vldr	s15, [r7, #20]
 8001788:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80017b8 <magnetic_field_to_degree+0xc0>
 800178c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001790:	edc7 7a05 	vstr	s15, [r7, #20]
		  }



	  return headingDegrees;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	ee07 3a90 	vmov	s15, r3
}
 800179a:	eeb0 0a67 	vmov.f32	s0, s15
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bdb0      	pop	{r4, r5, r7, pc}
 80017a4:	f3af 8000 	nop.w
 80017a8:	54442d18 	.word	0x54442d18
 80017ac:	400921fb 	.word	0x400921fb
 80017b0:	3e570a3d 	.word	0x3e570a3d
 80017b4:	43340000 	.word	0x43340000
 80017b8:	43b40000 	.word	0x43b40000

080017bc <Delta_theta_calculation>:

double Delta_theta_calculation(TypeDataCansat DataCansat){
 80017bc:	b084      	sub	sp, #16
 80017be:	b580      	push	{r7, lr}
 80017c0:	b088      	sub	sp, #32
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80017c8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	double theta_target = 0;
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double latitude_vector = DataCansat.GPS.latitude_Target - DataCansat.GPS.latitude_Cansat;
 80017d8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80017dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017e0:	f7fe fd6a 	bl	80002b8 <__aeabi_dsub>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double longitude_vector = DataCansat.GPS.longitude_Target - DataCansat.GPS.longitude_Cansat;
 80017ec:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80017f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017f4:	f7fe fd60 	bl	80002b8 <__aeabi_dsub>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	theta_target = 360 - atan(longitude_vector/latitude_vector);
 8001800:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001804:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001808:	f7ff f838 	bl	800087c <__aeabi_ddiv>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	ec43 2b17 	vmov	d7, r2, r3
 8001814:	eeb0 0a47 	vmov.f32	s0, s14
 8001818:	eef0 0a67 	vmov.f32	s1, s15
 800181c:	f00c f9f0 	bl	800dc00 <atan>
 8001820:	ec53 2b10 	vmov	r2, r3, d0
 8001824:	f04f 0000 	mov.w	r0, #0
 8001828:	490f      	ldr	r1, [pc, #60]	; (8001868 <Delta_theta_calculation+0xac>)
 800182a:	f7fe fd45 	bl	80002b8 <__aeabi_dsub>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double Delta_theta = theta_target - DataCansat.IMU.MagnetometerData.degree_angle;
 8001836:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800183a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800183e:	f7fe fd3b 	bl	80002b8 <__aeabi_dsub>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	e9c7 2300 	strd	r2, r3, [r7]

	return Delta_theta;
 800184a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800184e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001852:	eeb0 0a47 	vmov.f32	s0, s14
 8001856:	eef0 0a67 	vmov.f32	s1, s15
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001862:	b004      	add	sp, #16
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40768000 	.word	0x40768000

0800186c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4a07      	ldr	r2, [pc, #28]	; (8001898 <vApplicationGetIdleTaskMemory+0x2c>)
 800187c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	4a06      	ldr	r2, [pc, #24]	; (800189c <vApplicationGetIdleTaskMemory+0x30>)
 8001882:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2280      	movs	r2, #128	; 0x80
 8001888:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000220 	.word	0x20000220
 800189c:	200002d4 	.word	0x200002d4

080018a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af02      	add	r7, sp, #8

  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN StreamBuffer */

	xGPS_StreamBuffer = xStreamBufferCreate( /* The buffer length in bytes. */GPS_TRAME_SIZE,/* The stream buffer's trigger level. */GPS_TRAME_SIZE);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2164      	movs	r1, #100	; 0x64
 80018aa:	2064      	movs	r0, #100	; 0x64
 80018ac:	f007 fb45 	bl	8008f3a <xStreamBufferGenericCreate>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4a16      	ldr	r2, [pc, #88]	; (800190c <MX_FREERTOS_Init+0x6c>)
 80018b4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80018b6:	4b16      	ldr	r3, [pc, #88]	; (8001910 <MX_FREERTOS_Init+0x70>)
 80018b8:	1d3c      	adds	r4, r7, #4
 80018ba:	461d      	mov	r5, r3
 80018bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2100      	movs	r1, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f007 fa20 	bl	8008d12 <osThreadCreate>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4a0f      	ldr	r2, [pc, #60]	; (8001914 <MX_FREERTOS_Init+0x74>)
 80018d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

xTaskCreate(Task_Drop_detection, "Drop detection", 500, NULL, osPriorityHigh, &pxDrop_detection);
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_FREERTOS_Init+0x78>)
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	2302      	movs	r3, #2
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	2300      	movs	r3, #0
 80018e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018e6:	490d      	ldr	r1, [pc, #52]	; (800191c <MX_FREERTOS_Init+0x7c>)
 80018e8:	480d      	ldr	r0, [pc, #52]	; (8001920 <MX_FREERTOS_Init+0x80>)
 80018ea:	f007 fec5 	bl	8009678 <xTaskCreate>


//Taches GPS
//xTaskCreate(Task_GPS_data_reading, "Lecture des donnees GPS", 500, NULL, osPriorityHigh, &pxGPS_Handler);
xTaskCreate(prvGPS_ReceivingTask, "recuperation donnees GPS", 500, NULL, osPriorityHigh, &pxGPS_Data);
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <MX_FREERTOS_Init+0x84>)
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	2302      	movs	r3, #2
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2300      	movs	r3, #0
 80018f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018fc:	490a      	ldr	r1, [pc, #40]	; (8001928 <MX_FREERTOS_Init+0x88>)
 80018fe:	480b      	ldr	r0, [pc, #44]	; (800192c <MX_FREERTOS_Init+0x8c>)
 8001900:	f007 feba 	bl	8009678 <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

}
 8001904:	bf00      	nop
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bdb0      	pop	{r4, r5, r7, pc}
 800190c:	20000204 	.word	0x20000204
 8001910:	0800e410 	.word	0x0800e410
 8001914:	2000021c 	.word	0x2000021c
 8001918:	20000208 	.word	0x20000208
 800191c:	0800e3e4 	.word	0x0800e3e4
 8001920:	08001ef1 	.word	0x08001ef1
 8001924:	20000218 	.word	0x20000218
 8001928:	0800e3f4 	.word	0x0800e3f4
 800192c:	08001055 	.word	0x08001055

08001930 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001938:	2001      	movs	r0, #1
 800193a:	f007 fa36 	bl	8008daa <osDelay>
 800193e:	e7fb      	b.n	8001938 <StartDefaultTask+0x8>

08001940 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <MX_GPIO_Init+0xfc>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a37      	ldr	r2, [pc, #220]	; (8001a3c <MX_GPIO_Init+0xfc>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <MX_GPIO_Init+0xfc>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <MX_GPIO_Init+0xfc>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a30      	ldr	r2, [pc, #192]	; (8001a3c <MX_GPIO_Init+0xfc>)
 800197c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b2e      	ldr	r3, [pc, #184]	; (8001a3c <MX_GPIO_Init+0xfc>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <MX_GPIO_Init+0xfc>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a29      	ldr	r2, [pc, #164]	; (8001a3c <MX_GPIO_Init+0xfc>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <MX_GPIO_Init+0xfc>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <MX_GPIO_Init+0xfc>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a22      	ldr	r2, [pc, #136]	; (8001a3c <MX_GPIO_Init+0xfc>)
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <MX_GPIO_Init+0xfc>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2120      	movs	r1, #32
 80019ca:	481d      	ldr	r0, [pc, #116]	; (8001a40 <MX_GPIO_Init+0x100>)
 80019cc:	f001 fb64 	bl	8003098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	4817      	ldr	r0, [pc, #92]	; (8001a44 <MX_GPIO_Init+0x104>)
 80019e8:	f001 f9ba 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019ec:	2320      	movs	r3, #32
 80019ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f0:	2301      	movs	r3, #1
 80019f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4619      	mov	r1, r3
 8001a02:	480f      	ldr	r0, [pc, #60]	; (8001a40 <MX_GPIO_Init+0x100>)
 8001a04:	f001 f9ac 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4808      	ldr	r0, [pc, #32]	; (8001a40 <MX_GPIO_Init+0x100>)
 8001a1e:	f001 f99f 	bl	8002d60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2105      	movs	r1, #5
 8001a26:	2028      	movs	r0, #40	; 0x28
 8001a28:	f001 f8d0 	bl	8002bcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a2c:	2028      	movs	r0, #40	; 0x28
 8001a2e:	f001 f8e9 	bl	8002c04 <HAL_NVIC_EnableIRQ>

}
 8001a32:	bf00      	nop
 8001a34:	3728      	adds	r7, #40	; 0x28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40020800 	.word	0x40020800

08001a48 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <MX_I2C1_Init+0x50>)
 8001a4e:	4a13      	ldr	r2, [pc, #76]	; (8001a9c <MX_I2C1_Init+0x54>)
 8001a50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_I2C1_Init+0x50>)
 8001a54:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <MX_I2C1_Init+0x58>)
 8001a56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <MX_I2C1_Init+0x50>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_I2C1_Init+0x50>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <MX_I2C1_Init+0x50>)
 8001a66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <MX_I2C1_Init+0x50>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <MX_I2C1_Init+0x50>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <MX_I2C1_Init+0x50>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_I2C1_Init+0x50>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <MX_I2C1_Init+0x50>)
 8001a86:	f001 fb45 	bl	8003114 <HAL_I2C_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a90:	f000 fa28 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200004d4 	.word	0x200004d4
 8001a9c:	40005400 	.word	0x40005400
 8001aa0:	000186a0 	.word	0x000186a0

08001aa4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a21      	ldr	r2, [pc, #132]	; (8001b48 <HAL_I2C_MspInit+0xa4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d13c      	bne.n	8001b40 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_I2C_MspInit+0xa8>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a1f      	ldr	r2, [pc, #124]	; (8001b4c <HAL_I2C_MspInit+0xa8>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <HAL_I2C_MspInit+0xa8>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001ae2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae8:	2312      	movs	r3, #18
 8001aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001af4:	2304      	movs	r3, #4
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	4814      	ldr	r0, [pc, #80]	; (8001b50 <HAL_I2C_MspInit+0xac>)
 8001b00:	f001 f92e 	bl	8002d60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HAL_I2C_MspInit+0xa8>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	4a0f      	ldr	r2, [pc, #60]	; (8001b4c <HAL_I2C_MspInit+0xa8>)
 8001b0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b12:	6413      	str	r3, [r2, #64]	; 0x40
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_I2C_MspInit+0xa8>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2105      	movs	r1, #5
 8001b24:	201f      	movs	r0, #31
 8001b26:	f001 f851 	bl	8002bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001b2a:	201f      	movs	r0, #31
 8001b2c:	f001 f86a 	bl	8002c04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2105      	movs	r1, #5
 8001b34:	2020      	movs	r0, #32
 8001b36:	f001 f849 	bl	8002bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001b3a:	2020      	movs	r0, #32
 8001b3c:	f001 f862 	bl	8002c04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b40:	bf00      	nop
 8001b42:	3728      	adds	r7, #40	; 0x28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40005400 	.word	0x40005400
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020400 	.word	0x40020400

08001b54 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001b5c:	1d39      	adds	r1, r7, #4
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b62:	2201      	movs	r2, #1
 8001b64:	4803      	ldr	r0, [pc, #12]	; (8001b74 <__io_putchar+0x20>)
 8001b66:	f006 f88a 	bl	8007c7e <HAL_UART_Transmit>
return ch;
 8001b6a:	687b      	ldr	r3, [r7, #4]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	2000077c 	.word	0x2000077c

08001b78 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){ // fonction de callback de l'UART
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

		//portYIELD_FROM_ISR();

	}

}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	0000      	movs	r0, r0
	...

08001b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001b96:	af02      	add	r7, sp, #8
	  *            entrée des données GPS de la cible
	  ***********************************************************/

	  //Position GPS cible : 43°13'18.7"N 0°03'10.0"W  --> données telles que décrites dans le règlement 2023

	  pDataCansat.GPS.latitude_Target = 43.2218611;
 8001b98:	4987      	ldr	r1, [pc, #540]	; (8001db8 <main+0x228>)
 8001b9a:	a383      	add	r3, pc, #524	; (adr r3, 8001da8 <main+0x218>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	  pDataCansat.GPS.longitude_Target = -0.05277777777777778;
 8001ba4:	4984      	ldr	r1, [pc, #528]	; (8001db8 <main+0x228>)
 8001ba6:	a382      	add	r3, pc, #520	; (adr r3, 8001db0 <main+0x220>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bb0:	f000 feee 	bl	8002990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bb4:	f000 f91a 	bl	8001dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bb8:	f7ff fec2 	bl	8001940 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001bbc:	f000 fdf0 	bl	80027a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001bc0:	f7ff ff42 	bl	8001a48 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001bc4:	f000 fcd4 	bl	8002570 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001bc8:	f000 fdc0 	bl	800274c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001bcc:	f000 fc6c 	bl	80024a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("------------------------\r\n");
 8001bd0:	487a      	ldr	r0, [pc, #488]	; (8001dbc <main+0x22c>)
 8001bd2:	f00a f891 	bl	800bcf8 <puts>
  printf("------------------------\r\n");
 8001bd6:	4879      	ldr	r0, [pc, #484]	; (8001dbc <main+0x22c>)
 8001bd8:	f00a f88e 	bl	800bcf8 <puts>
  printf("------------------------\r\n");
 8001bdc:	4877      	ldr	r0, [pc, #476]	; (8001dbc <main+0x22c>)
 8001bde:	f00a f88b 	bl	800bcf8 <puts>
  printf("------------------------\r\n");
 8001be2:	4876      	ldr	r0, [pc, #472]	; (8001dbc <main+0x22c>)
 8001be4:	f00a f888 	bl	800bcf8 <puts>
  printf("initialisation du CanSat\r\n");
 8001be8:	4875      	ldr	r0, [pc, #468]	; (8001dc0 <main+0x230>)
 8001bea:	f00a f885 	bl	800bcf8 <puts>
  printf("------------------------\r\n");
 8001bee:	4873      	ldr	r0, [pc, #460]	; (8001dbc <main+0x22c>)
 8001bf0:	f00a f882 	bl	800bcf8 <puts>
  printf("------------------------\r\n");
 8001bf4:	4871      	ldr	r0, [pc, #452]	; (8001dbc <main+0x22c>)
 8001bf6:	f00a f87f 	bl	800bcf8 <puts>
  printf("------------------------\r\n");
 8001bfa:	4870      	ldr	r0, [pc, #448]	; (8001dbc <main+0x22c>)
 8001bfc:	f00a f87c 	bl	800bcf8 <puts>
  printf("------------------------\r\n");
 8001c00:	486e      	ldr	r0, [pc, #440]	; (8001dbc <main+0x22c>)
 8001c02:	f00a f879 	bl	800bcf8 <puts>

    int x=0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    int i=0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
    int Devices[100]={0};
 8001c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c16:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001c20:	461a      	mov	r2, r3
 8001c22:	2100      	movs	r1, #0
 8001c24:	f009 fadb 	bl	800b1de <memset>

   uint8_t pData[100] = {0};
 8001c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	3304      	adds	r3, #4
 8001c36:	2260      	movs	r2, #96	; 0x60
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f009 facf 	bl	800b1de <memset>
   /**********                           *********
    * ******** INIT MPU-9250 (IMU_10DOF) *********
    * ********                           *********
    */

   printf("initialisation de l'IMU \r\n \r\n");
 8001c40:	4860      	ldr	r0, [pc, #384]	; (8001dc4 <main+0x234>)
 8001c42:	f00a f859 	bl	800bcf8 <puts>

   // Initialisation du capteur MPU-9250

   Init(&hi2c1);
 8001c46:	4860      	ldr	r0, [pc, #384]	; (8001dc8 <main+0x238>)
 8001c48:	f7ff fb0c 	bl	8001264 <Init>

   // vérification identité capteur MPU-9250

   pData[0]= WHO_AM_I_MPU9250;
 8001c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c54:	2275      	movs	r2, #117	; 0x75
 8001c56:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Master_Transmit(&hi2c1, MPU_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001c58:	1d3a      	adds	r2, r7, #4
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	2301      	movs	r3, #1
 8001c62:	21d0      	movs	r1, #208	; 0xd0
 8001c64:	4858      	ldr	r0, [pc, #352]	; (8001dc8 <main+0x238>)
 8001c66:	f001 fb99 	bl	800339c <HAL_I2C_Master_Transmit>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <main+0xe6>
    {
  	  printf("il y a une erreur avec I2C Master Transmit \r\n");
 8001c70:	4856      	ldr	r0, [pc, #344]	; (8001dcc <main+0x23c>)
 8001c72:	f00a f841 	bl	800bcf8 <puts>
    }
    if(HAL_I2C_Master_Receive(&hi2c1, MPU_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001c76:	1d3a      	adds	r2, r7, #4
 8001c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2301      	movs	r3, #1
 8001c80:	21d0      	movs	r1, #208	; 0xd0
 8001c82:	4851      	ldr	r0, [pc, #324]	; (8001dc8 <main+0x238>)
 8001c84:	f001 fc88 	bl	8003598 <HAL_I2C_Master_Receive>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <main+0x104>
    {
  	  printf("il y a une erreur avec I2C Master Receive \r\n");
 8001c8e:	4850      	ldr	r0, [pc, #320]	; (8001dd0 <main+0x240>)
 8001c90:	f00a f832 	bl	800bcf8 <puts>
    }


    printf(" L'identifiant du capteur est : %x \r\n", pData[0]);
 8001c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	484c      	ldr	r0, [pc, #304]	; (8001dd4 <main+0x244>)
 8001ca2:	f009 ffa3 	bl	800bbec <iprintf>
    if((pData[0] =! 0x71))
 8001ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001caa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
    {
  	  printf("ce n'est pas le bon capteur \r\n");
    }
    else
  	  printf("MPU-9250 identified \r\n");
 8001cb2:	4849      	ldr	r0, [pc, #292]	; (8001dd8 <main+0x248>)
 8001cb4:	f00a f820 	bl	800bcf8 <puts>

    // vérification identité AK8963C (magnétomètre)

    pData[0]= WHO_AM_I_AK8963;
 8001cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
      if(HAL_I2C_Master_Transmit(&hi2c1, MAGNETO_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001cc4:	1d3a      	adds	r2, r7, #4
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2301      	movs	r3, #1
 8001cce:	2118      	movs	r1, #24
 8001cd0:	483d      	ldr	r0, [pc, #244]	; (8001dc8 <main+0x238>)
 8001cd2:	f001 fb63 	bl	800339c <HAL_I2C_Master_Transmit>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <main+0x152>
      {
    	  printf("il y a une erreur avec I2C Master Transmit \r\n");
 8001cdc:	483b      	ldr	r0, [pc, #236]	; (8001dcc <main+0x23c>)
 8001cde:	f00a f80b 	bl	800bcf8 <puts>
      }
      if(HAL_I2C_Master_Receive(&hi2c1, MAGNETO_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001ce2:	1d3a      	adds	r2, r7, #4
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2301      	movs	r3, #1
 8001cec:	2118      	movs	r1, #24
 8001cee:	4836      	ldr	r0, [pc, #216]	; (8001dc8 <main+0x238>)
 8001cf0:	f001 fc52 	bl	8003598 <HAL_I2C_Master_Receive>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <main+0x170>
      {
    	  printf("il y a une erreur avec I2C Master Receive \r\n");
 8001cfa:	4835      	ldr	r0, [pc, #212]	; (8001dd0 <main+0x240>)
 8001cfc:	f009 fffc 	bl	800bcf8 <puts>
      }


      printf(" L'identifiant du magnétomètre est : %x \r\n", pData[0]);
 8001d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4833      	ldr	r0, [pc, #204]	; (8001ddc <main+0x24c>)
 8001d0e:	f009 ff6d 	bl	800bbec <iprintf>
      if((pData[0] =! 0x48))
 8001d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
      {
    	  printf("ce n'est pas le bon capteur \r\n  ****** \r\n ****** \r\n ****** \r\n");
      }
      else
    	  printf("AK8963C identified \r\n  ****** \r\n ****** \r\n ****** \r\n");
 8001d1e:	4830      	ldr	r0, [pc, #192]	; (8001de0 <main+0x250>)
 8001d20:	f009 ffea 	bl	800bcf8 <puts>



  // check les périphériques i2c disponibles

    for (i=0;i<256;i++){
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8001d2a:	e02a      	b.n	8001d82 <main+0x1f2>
         	  if(HAL_I2C_IsDeviceReady(&hi2c1, i, 4, 20)==HAL_OK){
 8001d2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d30:	b299      	uxth	r1, r3
 8001d32:	2314      	movs	r3, #20
 8001d34:	2204      	movs	r2, #4
 8001d36:	4824      	ldr	r0, [pc, #144]	; (8001dc8 <main+0x238>)
 8001d38:	f002 f974 	bl	8004024 <HAL_I2C_IsDeviceReady>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d11a      	bne.n	8001d78 <main+0x1e8>
         		  Devices[x]=i;
 8001d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d46:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d4a:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8001d4e:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8001d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
         		  printf("%d \r\n",Devices[x]);
 8001d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d5e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8001d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d66:	4619      	mov	r1, r3
 8001d68:	481e      	ldr	r0, [pc, #120]	; (8001de4 <main+0x254>)
 8001d6a:	f009 ff3f 	bl	800bbec <iprintf>
         		  x=x+1;
 8001d6e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d72:	3301      	adds	r3, #1
 8001d74:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    for (i=0;i<256;i++){
 8001d78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8001d82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d86:	2bff      	cmp	r3, #255	; 0xff
 8001d88:	ddd0      	ble.n	8001d2c <main+0x19c>
     * ******** INITIALISATION Servos *********
     * ********                       *********
     */


    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4816      	ldr	r0, [pc, #88]	; (8001de8 <main+0x258>)
 8001d8e:	f005 f9d3 	bl	8007138 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001d92:	2104      	movs	r1, #4
 8001d94:	4814      	ldr	r0, [pc, #80]	; (8001de8 <main+0x258>)
 8001d96:	f005 f9cf 	bl	8007138 <HAL_TIM_PWM_Start>

  //vTaskStartScheduler();
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001d9a:	f7ff fd81 	bl	80018a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d9e:	f006 ffb1 	bl	8008d04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001da2:	e7fe      	b.n	8001da2 <main+0x212>
 8001da4:	f3af 8000 	nop.w
 8001da8:	f1cc6096 	.word	0xf1cc6096
 8001dac:	40459c65 	.word	0x40459c65
 8001db0:	5b05b05b 	.word	0x5b05b05b
 8001db4:	bfab05b0 	.word	0xbfab05b0
 8001db8:	20000528 	.word	0x20000528
 8001dbc:	0800e42c 	.word	0x0800e42c
 8001dc0:	0800e448 	.word	0x0800e448
 8001dc4:	0800e464 	.word	0x0800e464
 8001dc8:	200004d4 	.word	0x200004d4
 8001dcc:	0800e484 	.word	0x0800e484
 8001dd0:	0800e4b4 	.word	0x0800e4b4
 8001dd4:	0800e4e0 	.word	0x0800e4e0
 8001dd8:	0800e508 	.word	0x0800e508
 8001ddc:	0800e520 	.word	0x0800e520
 8001de0:	0800e550 	.word	0x0800e550
 8001de4:	0800e584 	.word	0x0800e584
 8001de8:	200006a8 	.word	0x200006a8

08001dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b094      	sub	sp, #80	; 0x50
 8001df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df2:	f107 0320 	add.w	r3, r7, #32
 8001df6:	2230      	movs	r2, #48	; 0x30
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f009 f9ef 	bl	800b1de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	4b28      	ldr	r3, [pc, #160]	; (8001eb8 <SystemClock_Config+0xcc>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	4a27      	ldr	r2, [pc, #156]	; (8001eb8 <SystemClock_Config+0xcc>)
 8001e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e20:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <SystemClock_Config+0xcc>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <SystemClock_Config+0xd0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a21      	ldr	r2, [pc, #132]	; (8001ebc <SystemClock_Config+0xd0>)
 8001e36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	4b1f      	ldr	r3, [pc, #124]	; (8001ebc <SystemClock_Config+0xd0>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e50:	2310      	movs	r3, #16
 8001e52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e54:	2302      	movs	r3, #2
 8001e56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001e5c:	2310      	movs	r3, #16
 8001e5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e60:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e66:	2304      	movs	r3, #4
 8001e68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e6e:	f107 0320 	add.w	r3, r7, #32
 8001e72:	4618      	mov	r0, r3
 8001e74:	f004 fb8a 	bl	800658c <HAL_RCC_OscConfig>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001e7e:	f000 f831 	bl	8001ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e82:	230f      	movs	r3, #15
 8001e84:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e86:	2302      	movs	r3, #2
 8001e88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	2102      	movs	r1, #2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f004 fdec 	bl	8006a7c <HAL_RCC_ClockConfig>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001eaa:	f000 f81b 	bl	8001ee4 <Error_Handler>
  }
}
 8001eae:	bf00      	nop
 8001eb0:	3750      	adds	r7, #80	; 0x50
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40007000 	.word	0x40007000

08001ec0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d101      	bne.n	8001ed6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ed2:	f000 fd7f 	bl	80029d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40010000 	.word	0x40010000

08001ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee8:	b672      	cpsid	i
}
 8001eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eec:	e7fe      	b.n	8001eec <Error_Handler+0x8>
	...

08001ef0 <Task_Drop_detection>:
	 * @param Drop_flag Drapeau qui permet d'indiquer que le Cansat a été largué
	 * @retval None
	 */

void Task_Drop_detection(void * pvParameters)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	6078      	str	r0, [r7, #4]
	uint16_t gpio_value = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	82fb      	strh	r3, [r7, #22]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500;
 8001efc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f00:	613b      	str	r3, [r7, #16]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8001f02:	f007 ff5d 	bl	8009dc0 <xTaskGetTickCount>
 8001f06:	4603      	mov	r3, r0
 8001f08:	60fb      	str	r3, [r7, #12]

	for(;;)
	{

		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8001f0a:	f107 030c 	add.w	r3, r7, #12
 8001f0e:	6939      	ldr	r1, [r7, #16]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f007 fd8f 	bl	8009a34 <vTaskDelayUntil>

		gpio_value = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);  // prend la valeur 1 lorsque pas d'obstacles
 8001f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f1a:	4811      	ldr	r0, [pc, #68]	; (8001f60 <Task_Drop_detection+0x70>)
 8001f1c:	f001 f8a4 	bl	8003068 <HAL_GPIO_ReadPin>
 8001f20:	4603      	mov	r3, r0
 8001f22:	82fb      	strh	r3, [r7, #22]
															// prend la valeur 0 lorsque detection d'un obstacle
		printf("valeur du capteur IR : %d \r\n", gpio_value);
 8001f24:	8afb      	ldrh	r3, [r7, #22]
 8001f26:	4619      	mov	r1, r3
 8001f28:	480e      	ldr	r0, [pc, #56]	; (8001f64 <Task_Drop_detection+0x74>)
 8001f2a:	f009 fe5f 	bl	800bbec <iprintf>

		if(gpio_value == 1)
 8001f2e:	8afb      	ldrh	r3, [r7, #22]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d1ea      	bne.n	8001f0a <Task_Drop_detection+0x1a>
		{
			Drop_flag = 1;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <Task_Drop_detection+0x78>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
			printf("largage effectue \r\n");
 8001f3a:	480c      	ldr	r0, [pc, #48]	; (8001f6c <Task_Drop_detection+0x7c>)
 8001f3c:	f009 fedc 	bl	800bcf8 <puts>
			xTaskCreate(Task_lancement_Cansat, "Lancement du Cansat", 500, NULL, osPriorityHigh, &pxLancement_Cansat);
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <Task_Drop_detection+0x80>)
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	2302      	movs	r3, #2
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f4e:	4909      	ldr	r1, [pc, #36]	; (8001f74 <Task_Drop_detection+0x84>)
 8001f50:	4809      	ldr	r0, [pc, #36]	; (8001f78 <Task_Drop_detection+0x88>)
 8001f52:	f007 fb91 	bl	8009678 <xTaskCreate>
			vTaskDelete(NULL);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f007 fcdc 	bl	8009914 <vTaskDelete>
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8001f5c:	e7d5      	b.n	8001f0a <Task_Drop_detection+0x1a>
 8001f5e:	bf00      	nop
 8001f60:	40020000 	.word	0x40020000
 8001f64:	0800e58c 	.word	0x0800e58c
 8001f68:	200005f0 	.word	0x200005f0
 8001f6c:	0800e5ac 	.word	0x0800e5ac
 8001f70:	2000020c 	.word	0x2000020c
 8001f74:	0800e5c0 	.word	0x0800e5c0
 8001f78:	08000fbd 	.word	0x08000fbd

08001f7c <servoSetPositionLeft>:
 	 * @brief Positionnement du servo gauche
 	 * @Note Cette fonction permet de placer le servo comme on le souhaite avec 4 positions différentes
	 * @param int position : 0,1,2 ou 3
	 * @retval None
	 */
void servoSetPositionLeft (int position){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	if (position == 0){
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d104      	bne.n	8001f94 <servoSetPositionLeft+0x18>
		TIM2->CCR1 = POSITION_0_LEFT;
 8001f8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f8e:	2250      	movs	r2, #80	; 0x50
 8001f90:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR1 = POSITION_3_LEFT;
	}
	else {
		printf("Vous ne devez mettre en entree que 0,1,2 ou 3 \r\n");
	}
}
 8001f92:	e01a      	b.n	8001fca <servoSetPositionLeft+0x4e>
	else if (position == 1){
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d104      	bne.n	8001fa4 <servoSetPositionLeft+0x28>
			TIM2->CCR1 = POSITION_1_LEFT;
 8001f9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f9e:	226e      	movs	r2, #110	; 0x6e
 8001fa0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001fa2:	e012      	b.n	8001fca <servoSetPositionLeft+0x4e>
	else if (position == 2){
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d104      	bne.n	8001fb4 <servoSetPositionLeft+0x38>
			TIM2->CCR1 = POSITION_2_LEFT;
 8001faa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fae:	22aa      	movs	r2, #170	; 0xaa
 8001fb0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001fb2:	e00a      	b.n	8001fca <servoSetPositionLeft+0x4e>
	else if (position == 3){
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d104      	bne.n	8001fc4 <servoSetPositionLeft+0x48>
			TIM2->CCR1 = POSITION_3_LEFT;
 8001fba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fbe:	22fa      	movs	r2, #250	; 0xfa
 8001fc0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001fc2:	e002      	b.n	8001fca <servoSetPositionLeft+0x4e>
		printf("Vous ne devez mettre en entree que 0,1,2 ou 3 \r\n");
 8001fc4:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <servoSetPositionLeft+0x58>)
 8001fc6:	f009 fe97 	bl	800bcf8 <puts>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	0800e5d4 	.word	0x0800e5d4

08001fd8 <servoSetPositionRight>:
 	 * @brief Positionnement du servo droit
 	 * @Note Cette fonction permet de placer le servo comme on le souhaite avec 4 positions différentes
	 * @param int position : 0,1,2 ou 3
	 * @retval None
	 */
void servoSetPositionRight (int position){
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	if (position == 0){
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d104      	bne.n	8001ff0 <servoSetPositionRight+0x18>
		TIM2->CCR2 = POSITION_0_RIGHT;
 8001fe6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fea:	22dc      	movs	r2, #220	; 0xdc
 8001fec:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR2 = POSITION_3_RIGHT;
	}
	else {
		printf("Vous ne devez mettre en entree 0,1,2 ou 3 \r\n");
	}
}
 8001fee:	e01a      	b.n	8002026 <servoSetPositionRight+0x4e>
	else if (position == 1){
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d104      	bne.n	8002000 <servoSetPositionRight+0x28>
			TIM2->CCR2 = POSITION_1_RIGHT;
 8001ff6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ffa:	22be      	movs	r2, #190	; 0xbe
 8001ffc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ffe:	e012      	b.n	8002026 <servoSetPositionRight+0x4e>
	else if (position == 2){
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d104      	bne.n	8002010 <servoSetPositionRight+0x38>
			TIM2->CCR2 = POSITION_2_RIGHT;
 8002006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800200a:	2282      	movs	r2, #130	; 0x82
 800200c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800200e:	e00a      	b.n	8002026 <servoSetPositionRight+0x4e>
	else if (position == 3){
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b03      	cmp	r3, #3
 8002014:	d104      	bne.n	8002020 <servoSetPositionRight+0x48>
			TIM2->CCR2 = POSITION_3_RIGHT;
 8002016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800201a:	223c      	movs	r2, #60	; 0x3c
 800201c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800201e:	e002      	b.n	8002026 <servoSetPositionRight+0x4e>
		printf("Vous ne devez mettre en entree 0,1,2 ou 3 \r\n");
 8002020:	4803      	ldr	r0, [pc, #12]	; (8002030 <servoSetPositionRight+0x58>)
 8002022:	f009 fe69 	bl	800bcf8 <puts>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	0800e604 	.word	0x0800e604

08002034 <choice_direction_intensity>:
 	 * @Note Cette fonction permet de choisir la direction dans laquelle le cansat doit aller ainsi que son intensité grâce à une différence d'angle
	 * @param int delta_teta : difference d'angle comprise entre 0 et 360 degrés
	 * @retval None
	 */

void choice_direction_intensity(unsigned int delta_teta){
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	if ((delta_teta<epsilon) || (delta_teta>360-epsilon)){
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b04      	cmp	r3, #4
 8002040:	d903      	bls.n	800204a <choice_direction_intensity+0x16>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 8002048:	d306      	bcc.n	8002058 <choice_direction_intensity+0x24>
		servoSetPositionLeft(0);
 800204a:	2000      	movs	r0, #0
 800204c:	f7ff ff96 	bl	8001f7c <servoSetPositionLeft>
		servoSetPositionRight(0);
 8002050:	2000      	movs	r0, #0
 8002052:	f7ff ffc1 	bl	8001fd8 <servoSetPositionRight>
	}
	else {
		printf("cas non traité \r\n");
	}

}
 8002056:	e040      	b.n	80020da <choice_direction_intensity+0xa6>
	else if (delta_teta<teta_low){
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b1d      	cmp	r3, #29
 800205c:	d806      	bhi.n	800206c <choice_direction_intensity+0x38>
		servoSetPositionLeft(0);
 800205e:	2000      	movs	r0, #0
 8002060:	f7ff ff8c 	bl	8001f7c <servoSetPositionLeft>
		servoSetPositionRight(1);
 8002064:	2001      	movs	r0, #1
 8002066:	f7ff ffb7 	bl	8001fd8 <servoSetPositionRight>
}
 800206a:	e036      	b.n	80020da <choice_direction_intensity+0xa6>
	else if (delta_teta>360-teta_low){
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8002072:	d906      	bls.n	8002082 <choice_direction_intensity+0x4e>
		servoSetPositionLeft(1);
 8002074:	2001      	movs	r0, #1
 8002076:	f7ff ff81 	bl	8001f7c <servoSetPositionLeft>
		servoSetPositionRight(0);
 800207a:	2000      	movs	r0, #0
 800207c:	f7ff ffac 	bl	8001fd8 <servoSetPositionRight>
}
 8002080:	e02b      	b.n	80020da <choice_direction_intensity+0xa6>
	else if (delta_teta<teta_high){
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b63      	cmp	r3, #99	; 0x63
 8002086:	d806      	bhi.n	8002096 <choice_direction_intensity+0x62>
		servoSetPositionLeft(0);
 8002088:	2000      	movs	r0, #0
 800208a:	f7ff ff77 	bl	8001f7c <servoSetPositionLeft>
		servoSetPositionRight(2);
 800208e:	2002      	movs	r0, #2
 8002090:	f7ff ffa2 	bl	8001fd8 <servoSetPositionRight>
}
 8002094:	e021      	b.n	80020da <choice_direction_intensity+0xa6>
	else if (delta_teta>360-teta_high){
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800209c:	d906      	bls.n	80020ac <choice_direction_intensity+0x78>
		servoSetPositionLeft(2);
 800209e:	2002      	movs	r0, #2
 80020a0:	f7ff ff6c 	bl	8001f7c <servoSetPositionLeft>
		servoSetPositionRight(0);
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7ff ff97 	bl	8001fd8 <servoSetPositionRight>
}
 80020aa:	e016      	b.n	80020da <choice_direction_intensity+0xa6>
	else if (delta_teta<=180){
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2bb4      	cmp	r3, #180	; 0xb4
 80020b0:	d806      	bhi.n	80020c0 <choice_direction_intensity+0x8c>
		servoSetPositionLeft(0);
 80020b2:	2000      	movs	r0, #0
 80020b4:	f7ff ff62 	bl	8001f7c <servoSetPositionLeft>
		servoSetPositionRight(3);
 80020b8:	2003      	movs	r0, #3
 80020ba:	f7ff ff8d 	bl	8001fd8 <servoSetPositionRight>
}
 80020be:	e00c      	b.n	80020da <choice_direction_intensity+0xa6>
	else if (delta_teta>180){
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2bb4      	cmp	r3, #180	; 0xb4
 80020c4:	d906      	bls.n	80020d4 <choice_direction_intensity+0xa0>
		servoSetPositionLeft(3);
 80020c6:	2003      	movs	r0, #3
 80020c8:	f7ff ff58 	bl	8001f7c <servoSetPositionLeft>
		servoSetPositionRight(0);
 80020cc:	2000      	movs	r0, #0
 80020ce:	f7ff ff83 	bl	8001fd8 <servoSetPositionRight>
}
 80020d2:	e002      	b.n	80020da <choice_direction_intensity+0xa6>
		printf("cas non traité \r\n");
 80020d4:	4803      	ldr	r0, [pc, #12]	; (80020e4 <choice_direction_intensity+0xb0>)
 80020d6:	f009 fe0f 	bl	800bcf8 <puts>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	0800e630 	.word	0x0800e630

080020e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_MspInit+0x54>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	4a11      	ldr	r2, [pc, #68]	; (800213c <HAL_MspInit+0x54>)
 80020f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020fc:	6453      	str	r3, [r2, #68]	; 0x44
 80020fe:	4b0f      	ldr	r3, [pc, #60]	; (800213c <HAL_MspInit+0x54>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002106:	607b      	str	r3, [r7, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	603b      	str	r3, [r7, #0]
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_MspInit+0x54>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <HAL_MspInit+0x54>)
 8002114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002118:	6413      	str	r3, [r2, #64]	; 0x40
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_MspInit+0x54>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	210f      	movs	r1, #15
 800212a:	f06f 0001 	mvn.w	r0, #1
 800212e:	f000 fd4d 	bl	8002bcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800

08002140 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08c      	sub	sp, #48	; 0x30
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	4b2e      	ldr	r3, [pc, #184]	; (8002210 <HAL_InitTick+0xd0>)
 8002156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002158:	4a2d      	ldr	r2, [pc, #180]	; (8002210 <HAL_InitTick+0xd0>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6453      	str	r3, [r2, #68]	; 0x44
 8002160:	4b2b      	ldr	r3, [pc, #172]	; (8002210 <HAL_InitTick+0xd0>)
 8002162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800216c:	f107 020c 	add.w	r2, r7, #12
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	4611      	mov	r1, r2
 8002176:	4618      	mov	r0, r3
 8002178:	f004 fea0 	bl	8006ebc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800217c:	f004 fe8a 	bl	8006e94 <HAL_RCC_GetPCLK2Freq>
 8002180:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002184:	4a23      	ldr	r2, [pc, #140]	; (8002214 <HAL_InitTick+0xd4>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	0c9b      	lsrs	r3, r3, #18
 800218c:	3b01      	subs	r3, #1
 800218e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002190:	4b21      	ldr	r3, [pc, #132]	; (8002218 <HAL_InitTick+0xd8>)
 8002192:	4a22      	ldr	r2, [pc, #136]	; (800221c <HAL_InitTick+0xdc>)
 8002194:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002196:	4b20      	ldr	r3, [pc, #128]	; (8002218 <HAL_InitTick+0xd8>)
 8002198:	f240 32e7 	movw	r2, #999	; 0x3e7
 800219c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800219e:	4a1e      	ldr	r2, [pc, #120]	; (8002218 <HAL_InitTick+0xd8>)
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80021a4:	4b1c      	ldr	r3, [pc, #112]	; (8002218 <HAL_InitTick+0xd8>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021aa:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <HAL_InitTick+0xd8>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b0:	4b19      	ldr	r3, [pc, #100]	; (8002218 <HAL_InitTick+0xd8>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80021b6:	4818      	ldr	r0, [pc, #96]	; (8002218 <HAL_InitTick+0xd8>)
 80021b8:	f004 feb2 	bl	8006f20 <HAL_TIM_Base_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80021c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d11b      	bne.n	8002202 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80021ca:	4813      	ldr	r0, [pc, #76]	; (8002218 <HAL_InitTick+0xd8>)
 80021cc:	f004 ff02 	bl	8006fd4 <HAL_TIM_Base_Start_IT>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80021d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d111      	bne.n	8002202 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021de:	2019      	movs	r0, #25
 80021e0:	f000 fd10 	bl	8002c04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b0f      	cmp	r3, #15
 80021e8:	d808      	bhi.n	80021fc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80021ea:	2200      	movs	r2, #0
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	2019      	movs	r0, #25
 80021f0:	f000 fcec 	bl	8002bcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021f4:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <HAL_InitTick+0xe0>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e002      	b.n	8002202 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002202:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002206:	4618      	mov	r0, r3
 8002208:	3730      	adds	r7, #48	; 0x30
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800
 8002214:	431bde83 	.word	0x431bde83
 8002218:	20000658 	.word	0x20000658
 800221c:	40010000 	.word	0x40010000
 8002220:	20000008 	.word	0x20000008

08002224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <NMI_Handler+0x4>

0800222a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <HardFault_Handler+0x4>

08002230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <MemManage_Handler+0x4>

08002236 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <BusFault_Handler+0x4>

0800223c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <UsageFault_Handler+0x4>

08002242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002256:	f005 f81f 	bl	8007298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000658 	.word	0x20000658

08002264 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <I2C1_EV_IRQHandler+0x10>)
 800226a:	f002 f809 	bl	8004280 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200004d4 	.word	0x200004d4

08002278 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <I2C1_ER_IRQHandler+0x10>)
 800227e:	f002 f970 	bl	8004562 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200004d4 	.word	0x200004d4

0800228c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	BaseType_t higher_priority_task_woken = pdFALSE;
	vTaskNotifyGiveFromISR(pxGPS_Handler,&higher_priority_task_woken);
*/
	//HAL_UART_Receive_DMA(&huart1, (uint8_t*)&uart_gps_rx, 1);

	it_rx_gps = 1;
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <USART1_IRQHandler+0x24>)
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]
	xStreamBufferSendFromISR( xGPS_StreamBuffer, &uart_gps_rx, 80, NULL);
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <USART1_IRQHandler+0x28>)
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	2300      	movs	r3, #0
 800229c:	2250      	movs	r2, #80	; 0x50
 800229e:	4906      	ldr	r1, [pc, #24]	; (80022b8 <USART1_IRQHandler+0x2c>)
 80022a0:	f006 fed9 	bl	8009056 <xStreamBufferSendFromISR>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022a4:	4805      	ldr	r0, [pc, #20]	; (80022bc <USART1_IRQHandler+0x30>)
 80022a6:	f005 fdad 	bl	8007e04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  //portYIELD_FROM_ISR(higher_priority_task_woken);

  /* USER CODE END USART1_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200006a0 	.word	0x200006a0
 80022b4:	20000204 	.word	0x20000204
 80022b8:	200005f4 	.word	0x200005f4
 80022bc:	20000738 	.word	0x20000738

080022c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80022c6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022ca:	f000 feff 	bl	80030cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  xTaskCreate(Task_Drop_detection, "Drop detection task", 500, NULL, osPriorityAboveNormal, &pxDrop_detection);
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <EXTI15_10_IRQHandler+0x2c>)
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	2301      	movs	r3, #1
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2300      	movs	r3, #0
 80022d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80022dc:	4904      	ldr	r1, [pc, #16]	; (80022f0 <EXTI15_10_IRQHandler+0x30>)
 80022de:	4805      	ldr	r0, [pc, #20]	; (80022f4 <EXTI15_10_IRQHandler+0x34>)
 80022e0:	f007 f9ca 	bl	8009678 <xTaskCreate>

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000208 	.word	0x20000208
 80022f0:	0800e644 	.word	0x0800e644
 80022f4:	08001ef1 	.word	0x08001ef1

080022f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
	return 1;
 80022fc:	2301      	movs	r3, #1
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <_kill>:

int _kill(int pid, int sig)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002312:	f008 fe33 	bl	800af7c <__errno>
 8002316:	4603      	mov	r3, r0
 8002318:	2216      	movs	r2, #22
 800231a:	601a      	str	r2, [r3, #0]
	return -1;
 800231c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <_exit>:

void _exit (int status)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002330:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ffe7 	bl	8002308 <_kill>
	while (1) {}		/* Make sure we hang here */
 800233a:	e7fe      	b.n	800233a <_exit+0x12>

0800233c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	e00a      	b.n	8002364 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800234e:	f3af 8000 	nop.w
 8002352:	4601      	mov	r1, r0
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	60ba      	str	r2, [r7, #8]
 800235a:	b2ca      	uxtb	r2, r1
 800235c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3301      	adds	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	dbf0      	blt.n	800234e <_read+0x12>
	}

return len;
 800236c:	687b      	ldr	r3, [r7, #4]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e009      	b.n	800239c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	60ba      	str	r2, [r7, #8]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fbdf 	bl	8001b54 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	3301      	adds	r3, #1
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	dbf1      	blt.n	8002388 <_write+0x12>
	}
	return len;
 80023a4:	687b      	ldr	r3, [r7, #4]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <_close>:

int _close(int file)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
	return -1;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023d6:	605a      	str	r2, [r3, #4]
	return 0;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <_isatty>:

int _isatty(int file)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
	return 1;
 80023ee:	2301      	movs	r3, #1
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
	return 0;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002420:	4a14      	ldr	r2, [pc, #80]	; (8002474 <_sbrk+0x5c>)
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <_sbrk+0x60>)
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <_sbrk+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d102      	bne.n	800243a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <_sbrk+0x64>)
 8002436:	4a12      	ldr	r2, [pc, #72]	; (8002480 <_sbrk+0x68>)
 8002438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <_sbrk+0x64>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	429a      	cmp	r2, r3
 8002446:	d207      	bcs.n	8002458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002448:	f008 fd98 	bl	800af7c <__errno>
 800244c:	4603      	mov	r3, r0
 800244e:	220c      	movs	r2, #12
 8002450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002456:	e009      	b.n	800246c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <_sbrk+0x64>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <_sbrk+0x64>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	4a05      	ldr	r2, [pc, #20]	; (800247c <_sbrk+0x64>)
 8002468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800246a:	68fb      	ldr	r3, [r7, #12]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20020000 	.word	0x20020000
 8002478:	00000400 	.word	0x00000400
 800247c:	200006a4 	.word	0x200006a4
 8002480:	20004528 	.word	0x20004528

08002484 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <SystemInit+0x20>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	4a05      	ldr	r2, [pc, #20]	; (80024a4 <SystemInit+0x20>)
 8002490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ae:	f107 0320 	add.w	r3, r7, #32
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
 80024c4:	611a      	str	r2, [r3, #16]
 80024c6:	615a      	str	r2, [r3, #20]
 80024c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024ca:	4b28      	ldr	r3, [pc, #160]	; (800256c <MX_TIM2_Init+0xc4>)
 80024cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80024d2:	4b26      	ldr	r3, [pc, #152]	; (800256c <MX_TIM2_Init+0xc4>)
 80024d4:	2253      	movs	r2, #83	; 0x53
 80024d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d8:	4b24      	ldr	r3, [pc, #144]	; (800256c <MX_TIM2_Init+0xc4>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80024de:	4b23      	ldr	r3, [pc, #140]	; (800256c <MX_TIM2_Init+0xc4>)
 80024e0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80024e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e6:	4b21      	ldr	r3, [pc, #132]	; (800256c <MX_TIM2_Init+0xc4>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ec:	4b1f      	ldr	r3, [pc, #124]	; (800256c <MX_TIM2_Init+0xc4>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024f2:	481e      	ldr	r0, [pc, #120]	; (800256c <MX_TIM2_Init+0xc4>)
 80024f4:	f004 fdd0 	bl	8007098 <HAL_TIM_PWM_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80024fe:	f7ff fcf1 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002506:	2300      	movs	r3, #0
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800250a:	f107 0320 	add.w	r3, r7, #32
 800250e:	4619      	mov	r1, r3
 8002510:	4816      	ldr	r0, [pc, #88]	; (800256c <MX_TIM2_Init+0xc4>)
 8002512:	f005 fae5 	bl	8007ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800251c:	f7ff fce2 	bl	8001ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002520:	2360      	movs	r3, #96	; 0x60
 8002522:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	2200      	movs	r2, #0
 8002534:	4619      	mov	r1, r3
 8002536:	480d      	ldr	r0, [pc, #52]	; (800256c <MX_TIM2_Init+0xc4>)
 8002538:	f004 ffb6 	bl	80074a8 <HAL_TIM_PWM_ConfigChannel>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002542:	f7ff fccf 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	2204      	movs	r2, #4
 800254a:	4619      	mov	r1, r3
 800254c:	4807      	ldr	r0, [pc, #28]	; (800256c <MX_TIM2_Init+0xc4>)
 800254e:	f004 ffab 	bl	80074a8 <HAL_TIM_PWM_ConfigChannel>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002558:	f7ff fcc4 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800255c:	4803      	ldr	r0, [pc, #12]	; (800256c <MX_TIM2_Init+0xc4>)
 800255e:	f000 f897 	bl	8002690 <HAL_TIM_MspPostInit>

}
 8002562:	bf00      	nop
 8002564:	3728      	adds	r7, #40	; 0x28
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200006a8 	.word	0x200006a8

08002570 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002576:	f107 0320 	add.w	r3, r7, #32
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002580:	1d3b      	adds	r3, r7, #4
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	60da      	str	r2, [r3, #12]
 800258c:	611a      	str	r2, [r3, #16]
 800258e:	615a      	str	r2, [r3, #20]
 8002590:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002592:	4b22      	ldr	r3, [pc, #136]	; (800261c <MX_TIM3_Init+0xac>)
 8002594:	4a22      	ldr	r2, [pc, #136]	; (8002620 <MX_TIM3_Init+0xb0>)
 8002596:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002598:	4b20      	ldr	r3, [pc, #128]	; (800261c <MX_TIM3_Init+0xac>)
 800259a:	2253      	movs	r2, #83	; 0x53
 800259c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259e:	4b1f      	ldr	r3, [pc, #124]	; (800261c <MX_TIM3_Init+0xac>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80025a4:	4b1d      	ldr	r3, [pc, #116]	; (800261c <MX_TIM3_Init+0xac>)
 80025a6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80025aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ac:	4b1b      	ldr	r3, [pc, #108]	; (800261c <MX_TIM3_Init+0xac>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b2:	4b1a      	ldr	r3, [pc, #104]	; (800261c <MX_TIM3_Init+0xac>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025b8:	4818      	ldr	r0, [pc, #96]	; (800261c <MX_TIM3_Init+0xac>)
 80025ba:	f004 fd6d 	bl	8007098 <HAL_TIM_PWM_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80025c4:	f7ff fc8e 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c8:	2300      	movs	r3, #0
 80025ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025d0:	f107 0320 	add.w	r3, r7, #32
 80025d4:	4619      	mov	r1, r3
 80025d6:	4811      	ldr	r0, [pc, #68]	; (800261c <MX_TIM3_Init+0xac>)
 80025d8:	f005 fa82 	bl	8007ae0 <HAL_TIMEx_MasterConfigSynchronization>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80025e2:	f7ff fc7f 	bl	8001ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025e6:	2360      	movs	r3, #96	; 0x60
 80025e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	2200      	movs	r2, #0
 80025fa:	4619      	mov	r1, r3
 80025fc:	4807      	ldr	r0, [pc, #28]	; (800261c <MX_TIM3_Init+0xac>)
 80025fe:	f004 ff53 	bl	80074a8 <HAL_TIM_PWM_ConfigChannel>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002608:	f7ff fc6c 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800260c:	4803      	ldr	r0, [pc, #12]	; (800261c <MX_TIM3_Init+0xac>)
 800260e:	f000 f83f 	bl	8002690 <HAL_TIM_MspPostInit>

}
 8002612:	bf00      	nop
 8002614:	3728      	adds	r7, #40	; 0x28
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200006f0 	.word	0x200006f0
 8002620:	40000400 	.word	0x40000400

08002624 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002634:	d10e      	bne.n	8002654 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	4b13      	ldr	r3, [pc, #76]	; (8002688 <HAL_TIM_PWM_MspInit+0x64>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a12      	ldr	r2, [pc, #72]	; (8002688 <HAL_TIM_PWM_MspInit+0x64>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_TIM_PWM_MspInit+0x64>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002652:	e012      	b.n	800267a <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0c      	ldr	r2, [pc, #48]	; (800268c <HAL_TIM_PWM_MspInit+0x68>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d10d      	bne.n	800267a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_TIM_PWM_MspInit+0x64>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	4a08      	ldr	r2, [pc, #32]	; (8002688 <HAL_TIM_PWM_MspInit+0x64>)
 8002668:	f043 0302 	orr.w	r3, r3, #2
 800266c:	6413      	str	r3, [r2, #64]	; 0x40
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_TIM_PWM_MspInit+0x64>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]
}
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800
 800268c:	40000400 	.word	0x40000400

08002690 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	; 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b0:	d11e      	bne.n	80026f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	4b22      	ldr	r3, [pc, #136]	; (8002740 <HAL_TIM_MspPostInit+0xb0>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	4a21      	ldr	r2, [pc, #132]	; (8002740 <HAL_TIM_MspPostInit+0xb0>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6313      	str	r3, [r2, #48]	; 0x30
 80026c2:	4b1f      	ldr	r3, [pc, #124]	; (8002740 <HAL_TIM_MspPostInit+0xb0>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026ce:	2303      	movs	r3, #3
 80026d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	2300      	movs	r3, #0
 80026dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026de:	2301      	movs	r3, #1
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	4619      	mov	r1, r3
 80026e8:	4816      	ldr	r0, [pc, #88]	; (8002744 <HAL_TIM_MspPostInit+0xb4>)
 80026ea:	f000 fb39 	bl	8002d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026ee:	e022      	b.n	8002736 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM3)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <HAL_TIM_MspPostInit+0xb8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d11d      	bne.n	8002736 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_TIM_MspPostInit+0xb0>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a0f      	ldr	r2, [pc, #60]	; (8002740 <HAL_TIM_MspPostInit+0xb0>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <HAL_TIM_MspPostInit+0xb0>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002716:	2340      	movs	r3, #64	; 0x40
 8002718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271a:	2302      	movs	r3, #2
 800271c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002726:	2302      	movs	r3, #2
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272a:	f107 0314 	add.w	r3, r7, #20
 800272e:	4619      	mov	r1, r3
 8002730:	4804      	ldr	r0, [pc, #16]	; (8002744 <HAL_TIM_MspPostInit+0xb4>)
 8002732:	f000 fb15 	bl	8002d60 <HAL_GPIO_Init>
}
 8002736:	bf00      	nop
 8002738:	3728      	adds	r7, #40	; 0x28
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	40020000 	.word	0x40020000
 8002748:	40000400 	.word	0x40000400

0800274c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <MX_USART1_UART_Init+0x4c>)
 8002752:	4a12      	ldr	r2, [pc, #72]	; (800279c <MX_USART1_UART_Init+0x50>)
 8002754:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <MX_USART1_UART_Init+0x4c>)
 8002758:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800275c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <MX_USART1_UART_Init+0x4c>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <MX_USART1_UART_Init+0x4c>)
 8002766:	2200      	movs	r2, #0
 8002768:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <MX_USART1_UART_Init+0x4c>)
 800276c:	2200      	movs	r2, #0
 800276e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <MX_USART1_UART_Init+0x4c>)
 8002772:	220c      	movs	r2, #12
 8002774:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <MX_USART1_UART_Init+0x4c>)
 8002778:	2200      	movs	r2, #0
 800277a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <MX_USART1_UART_Init+0x4c>)
 800277e:	2200      	movs	r2, #0
 8002780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002782:	4805      	ldr	r0, [pc, #20]	; (8002798 <MX_USART1_UART_Init+0x4c>)
 8002784:	f005 fa2e 	bl	8007be4 <HAL_UART_Init>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800278e:	f7ff fba9 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000738 	.word	0x20000738
 800279c:	40011000 	.word	0x40011000

080027a0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027a6:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <MX_USART2_UART_Init+0x50>)
 80027a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027be:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027c6:	220c      	movs	r2, #12
 80027c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027d6:	4805      	ldr	r0, [pc, #20]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027d8:	f005 fa04 	bl	8007be4 <HAL_UART_Init>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027e2:	f7ff fb7f 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	2000077c 	.word	0x2000077c
 80027f0:	40004400 	.word	0x40004400

080027f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08c      	sub	sp, #48	; 0x30
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 031c 	add.w	r3, r7, #28
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a45      	ldr	r2, [pc, #276]	; (8002928 <HAL_UART_MspInit+0x134>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d153      	bne.n	80028be <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
 800281a:	4b44      	ldr	r3, [pc, #272]	; (800292c <HAL_UART_MspInit+0x138>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	4a43      	ldr	r2, [pc, #268]	; (800292c <HAL_UART_MspInit+0x138>)
 8002820:	f043 0310 	orr.w	r3, r3, #16
 8002824:	6453      	str	r3, [r2, #68]	; 0x44
 8002826:	4b41      	ldr	r3, [pc, #260]	; (800292c <HAL_UART_MspInit+0x138>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	61bb      	str	r3, [r7, #24]
 8002830:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	4b3d      	ldr	r3, [pc, #244]	; (800292c <HAL_UART_MspInit+0x138>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a3c      	ldr	r2, [pc, #240]	; (800292c <HAL_UART_MspInit+0x138>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b3a      	ldr	r3, [pc, #232]	; (800292c <HAL_UART_MspInit+0x138>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	4b36      	ldr	r3, [pc, #216]	; (800292c <HAL_UART_MspInit+0x138>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	4a35      	ldr	r2, [pc, #212]	; (800292c <HAL_UART_MspInit+0x138>)
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	6313      	str	r3, [r2, #48]	; 0x30
 800285e:	4b33      	ldr	r3, [pc, #204]	; (800292c <HAL_UART_MspInit+0x138>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800286a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800286e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002878:	2303      	movs	r3, #3
 800287a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800287c:	2307      	movs	r3, #7
 800287e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002880:	f107 031c 	add.w	r3, r7, #28
 8002884:	4619      	mov	r1, r3
 8002886:	482a      	ldr	r0, [pc, #168]	; (8002930 <HAL_UART_MspInit+0x13c>)
 8002888:	f000 fa6a 	bl	8002d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800288c:	2308      	movs	r3, #8
 800288e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002890:	2302      	movs	r3, #2
 8002892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002898:	2303      	movs	r3, #3
 800289a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800289c:	2307      	movs	r3, #7
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a0:	f107 031c 	add.w	r3, r7, #28
 80028a4:	4619      	mov	r1, r3
 80028a6:	4823      	ldr	r0, [pc, #140]	; (8002934 <HAL_UART_MspInit+0x140>)
 80028a8:	f000 fa5a 	bl	8002d60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80028ac:	2200      	movs	r2, #0
 80028ae:	2105      	movs	r1, #5
 80028b0:	2025      	movs	r0, #37	; 0x25
 80028b2:	f000 f98b 	bl	8002bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028b6:	2025      	movs	r0, #37	; 0x25
 80028b8:	f000 f9a4 	bl	8002c04 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80028bc:	e030      	b.n	8002920 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART2)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1d      	ldr	r2, [pc, #116]	; (8002938 <HAL_UART_MspInit+0x144>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d12b      	bne.n	8002920 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	4b17      	ldr	r3, [pc, #92]	; (800292c <HAL_UART_MspInit+0x138>)
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	4a16      	ldr	r2, [pc, #88]	; (800292c <HAL_UART_MspInit+0x138>)
 80028d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d6:	6413      	str	r3, [r2, #64]	; 0x40
 80028d8:	4b14      	ldr	r3, [pc, #80]	; (800292c <HAL_UART_MspInit+0x138>)
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e4:	2300      	movs	r3, #0
 80028e6:	60bb      	str	r3, [r7, #8]
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_UART_MspInit+0x138>)
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	4a0f      	ldr	r2, [pc, #60]	; (800292c <HAL_UART_MspInit+0x138>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6313      	str	r3, [r2, #48]	; 0x30
 80028f4:	4b0d      	ldr	r3, [pc, #52]	; (800292c <HAL_UART_MspInit+0x138>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002900:	230c      	movs	r3, #12
 8002902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002904:	2302      	movs	r3, #2
 8002906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290c:	2303      	movs	r3, #3
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002910:	2307      	movs	r3, #7
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002914:	f107 031c 	add.w	r3, r7, #28
 8002918:	4619      	mov	r1, r3
 800291a:	4805      	ldr	r0, [pc, #20]	; (8002930 <HAL_UART_MspInit+0x13c>)
 800291c:	f000 fa20 	bl	8002d60 <HAL_GPIO_Init>
}
 8002920:	bf00      	nop
 8002922:	3730      	adds	r7, #48	; 0x30
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40011000 	.word	0x40011000
 800292c:	40023800 	.word	0x40023800
 8002930:	40020000 	.word	0x40020000
 8002934:	40020400 	.word	0x40020400
 8002938:	40004400 	.word	0x40004400

0800293c <Reset_Handler>:
 800293c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002974 <LoopFillZerobss+0x12>
 8002940:	480d      	ldr	r0, [pc, #52]	; (8002978 <LoopFillZerobss+0x16>)
 8002942:	490e      	ldr	r1, [pc, #56]	; (800297c <LoopFillZerobss+0x1a>)
 8002944:	4a0e      	ldr	r2, [pc, #56]	; (8002980 <LoopFillZerobss+0x1e>)
 8002946:	2300      	movs	r3, #0
 8002948:	e002      	b.n	8002950 <LoopCopyDataInit>

0800294a <CopyDataInit>:
 800294a:	58d4      	ldr	r4, [r2, r3]
 800294c:	50c4      	str	r4, [r0, r3]
 800294e:	3304      	adds	r3, #4

08002950 <LoopCopyDataInit>:
 8002950:	18c4      	adds	r4, r0, r3
 8002952:	428c      	cmp	r4, r1
 8002954:	d3f9      	bcc.n	800294a <CopyDataInit>
 8002956:	4a0b      	ldr	r2, [pc, #44]	; (8002984 <LoopFillZerobss+0x22>)
 8002958:	4c0b      	ldr	r4, [pc, #44]	; (8002988 <LoopFillZerobss+0x26>)
 800295a:	2300      	movs	r3, #0
 800295c:	e001      	b.n	8002962 <LoopFillZerobss>

0800295e <FillZerobss>:
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	3204      	adds	r2, #4

08002962 <LoopFillZerobss>:
 8002962:	42a2      	cmp	r2, r4
 8002964:	d3fb      	bcc.n	800295e <FillZerobss>
 8002966:	f7ff fd8d 	bl	8002484 <SystemInit>
 800296a:	f008 fc03 	bl	800b174 <__libc_init_array>
 800296e:	f7ff f90f 	bl	8001b90 <main>
 8002972:	4770      	bx	lr
 8002974:	20020000 	.word	0x20020000
 8002978:	20000000 	.word	0x20000000
 800297c:	200001e4 	.word	0x200001e4
 8002980:	0800ead8 	.word	0x0800ead8
 8002984:	200001e8 	.word	0x200001e8
 8002988:	20004528 	.word	0x20004528

0800298c <ADC_IRQHandler>:
 800298c:	e7fe      	b.n	800298c <ADC_IRQHandler>
	...

08002990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002994:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <HAL_Init+0x40>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <HAL_Init+0x40>)
 800299a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800299e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_Init+0x40>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <HAL_Init+0x40>)
 80029a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_Init+0x40>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <HAL_Init+0x40>)
 80029b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029b8:	2003      	movs	r0, #3
 80029ba:	f000 f8fc 	bl	8002bb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029be:	200f      	movs	r0, #15
 80029c0:	f7ff fbbe 	bl	8002140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029c4:	f7ff fb90 	bl	80020e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40023c00 	.word	0x40023c00

080029d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <HAL_IncTick+0x20>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_IncTick+0x24>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4413      	add	r3, r2
 80029e4:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <HAL_IncTick+0x24>)
 80029e6:	6013      	str	r3, [r2, #0]
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	2000000c 	.word	0x2000000c
 80029f8:	200007c0 	.word	0x200007c0

080029fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <HAL_GetTick+0x14>)
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	200007c0 	.word	0x200007c0

08002a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a1c:	f7ff ffee 	bl	80029fc <HAL_GetTick>
 8002a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a2c:	d005      	beq.n	8002a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <HAL_Delay+0x44>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4413      	add	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a3a:	bf00      	nop
 8002a3c:	f7ff ffde 	bl	80029fc <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d8f7      	bhi.n	8002a3c <HAL_Delay+0x28>
  {
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	2000000c 	.word	0x2000000c

08002a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a8e:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	60d3      	str	r3, [r2, #12]
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <__NVIC_GetPriorityGrouping+0x18>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	0a1b      	lsrs	r3, r3, #8
 8002aae:	f003 0307 	and.w	r3, r3, #7
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	db0b      	blt.n	8002aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	f003 021f 	and.w	r2, r3, #31
 8002ad8:	4907      	ldr	r1, [pc, #28]	; (8002af8 <__NVIC_EnableIRQ+0x38>)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	e000e100 	.word	0xe000e100

08002afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	6039      	str	r1, [r7, #0]
 8002b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	db0a      	blt.n	8002b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	490c      	ldr	r1, [pc, #48]	; (8002b48 <__NVIC_SetPriority+0x4c>)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	0112      	lsls	r2, r2, #4
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	440b      	add	r3, r1
 8002b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b24:	e00a      	b.n	8002b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	4908      	ldr	r1, [pc, #32]	; (8002b4c <__NVIC_SetPriority+0x50>)
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	3b04      	subs	r3, #4
 8002b34:	0112      	lsls	r2, r2, #4
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	440b      	add	r3, r1
 8002b3a:	761a      	strb	r2, [r3, #24]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000e100 	.word	0xe000e100
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b089      	sub	sp, #36	; 0x24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f1c3 0307 	rsb	r3, r3, #7
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	bf28      	it	cs
 8002b6e:	2304      	movcs	r3, #4
 8002b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3304      	adds	r3, #4
 8002b76:	2b06      	cmp	r3, #6
 8002b78:	d902      	bls.n	8002b80 <NVIC_EncodePriority+0x30>
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3b03      	subs	r3, #3
 8002b7e:	e000      	b.n	8002b82 <NVIC_EncodePriority+0x32>
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43da      	mvns	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	401a      	ands	r2, r3
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	43d9      	mvns	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba8:	4313      	orrs	r3, r2
         );
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3724      	adds	r7, #36	; 0x24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff ff4c 	bl	8002a5c <__NVIC_SetPriorityGrouping>
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bde:	f7ff ff61 	bl	8002aa4 <__NVIC_GetPriorityGrouping>
 8002be2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	6978      	ldr	r0, [r7, #20]
 8002bea:	f7ff ffb1 	bl	8002b50 <NVIC_EncodePriority>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ff80 	bl	8002afc <__NVIC_SetPriority>
}
 8002bfc:	bf00      	nop
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ff54 	bl	8002ac0 <__NVIC_EnableIRQ>
}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c2e:	f7ff fee5 	bl	80029fc <HAL_GetTick>
 8002c32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d008      	beq.n	8002c52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2280      	movs	r2, #128	; 0x80
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e052      	b.n	8002cf8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0216 	bic.w	r2, r2, #22
 8002c60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d103      	bne.n	8002c82 <HAL_DMA_Abort+0x62>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0208 	bic.w	r2, r2, #8
 8002c90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ca2:	e013      	b.n	8002ccc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ca4:	f7ff feaa 	bl	80029fc <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b05      	cmp	r3, #5
 8002cb0:	d90c      	bls.n	8002ccc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2203      	movs	r2, #3
 8002cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e015      	b.n	8002cf8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1e4      	bne.n	8002ca4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cde:	223f      	movs	r2, #63	; 0x3f
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d004      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2280      	movs	r2, #128	; 0x80
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e00c      	b.n	8002d38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2205      	movs	r2, #5
 8002d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0201 	bic.w	r2, r2, #1
 8002d34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d52:	b2db      	uxtb	r3, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	; 0x24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	e159      	b.n	8003030 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	f040 8148 	bne.w	800302a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d005      	beq.n	8002db2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d130      	bne.n	8002e14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002de8:	2201      	movs	r2, #1
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 0201 	and.w	r2, r3, #1
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d017      	beq.n	8002e50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d123      	bne.n	8002ea4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	08da      	lsrs	r2, r3, #3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3208      	adds	r2, #8
 8002e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	220f      	movs	r2, #15
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	08da      	lsrs	r2, r3, #3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3208      	adds	r2, #8
 8002e9e:	69b9      	ldr	r1, [r7, #24]
 8002ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	2203      	movs	r2, #3
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 0203 	and.w	r2, r3, #3
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80a2 	beq.w	800302a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	4b57      	ldr	r3, [pc, #348]	; (8003048 <HAL_GPIO_Init+0x2e8>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	4a56      	ldr	r2, [pc, #344]	; (8003048 <HAL_GPIO_Init+0x2e8>)
 8002ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ef6:	4b54      	ldr	r3, [pc, #336]	; (8003048 <HAL_GPIO_Init+0x2e8>)
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f02:	4a52      	ldr	r2, [pc, #328]	; (800304c <HAL_GPIO_Init+0x2ec>)
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	089b      	lsrs	r3, r3, #2
 8002f08:	3302      	adds	r3, #2
 8002f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	220f      	movs	r2, #15
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4013      	ands	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a49      	ldr	r2, [pc, #292]	; (8003050 <HAL_GPIO_Init+0x2f0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d019      	beq.n	8002f62 <HAL_GPIO_Init+0x202>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a48      	ldr	r2, [pc, #288]	; (8003054 <HAL_GPIO_Init+0x2f4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <HAL_GPIO_Init+0x1fe>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a47      	ldr	r2, [pc, #284]	; (8003058 <HAL_GPIO_Init+0x2f8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00d      	beq.n	8002f5a <HAL_GPIO_Init+0x1fa>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a46      	ldr	r2, [pc, #280]	; (800305c <HAL_GPIO_Init+0x2fc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d007      	beq.n	8002f56 <HAL_GPIO_Init+0x1f6>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a45      	ldr	r2, [pc, #276]	; (8003060 <HAL_GPIO_Init+0x300>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d101      	bne.n	8002f52 <HAL_GPIO_Init+0x1f2>
 8002f4e:	2304      	movs	r3, #4
 8002f50:	e008      	b.n	8002f64 <HAL_GPIO_Init+0x204>
 8002f52:	2307      	movs	r3, #7
 8002f54:	e006      	b.n	8002f64 <HAL_GPIO_Init+0x204>
 8002f56:	2303      	movs	r3, #3
 8002f58:	e004      	b.n	8002f64 <HAL_GPIO_Init+0x204>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e002      	b.n	8002f64 <HAL_GPIO_Init+0x204>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_GPIO_Init+0x204>
 8002f62:	2300      	movs	r3, #0
 8002f64:	69fa      	ldr	r2, [r7, #28]
 8002f66:	f002 0203 	and.w	r2, r2, #3
 8002f6a:	0092      	lsls	r2, r2, #2
 8002f6c:	4093      	lsls	r3, r2
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f74:	4935      	ldr	r1, [pc, #212]	; (800304c <HAL_GPIO_Init+0x2ec>)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	089b      	lsrs	r3, r3, #2
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f82:	4b38      	ldr	r3, [pc, #224]	; (8003064 <HAL_GPIO_Init+0x304>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fa6:	4a2f      	ldr	r2, [pc, #188]	; (8003064 <HAL_GPIO_Init+0x304>)
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fac:	4b2d      	ldr	r3, [pc, #180]	; (8003064 <HAL_GPIO_Init+0x304>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fd0:	4a24      	ldr	r2, [pc, #144]	; (8003064 <HAL_GPIO_Init+0x304>)
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fd6:	4b23      	ldr	r3, [pc, #140]	; (8003064 <HAL_GPIO_Init+0x304>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ffa:	4a1a      	ldr	r2, [pc, #104]	; (8003064 <HAL_GPIO_Init+0x304>)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003000:	4b18      	ldr	r3, [pc, #96]	; (8003064 <HAL_GPIO_Init+0x304>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003024:	4a0f      	ldr	r2, [pc, #60]	; (8003064 <HAL_GPIO_Init+0x304>)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	3301      	adds	r3, #1
 800302e:	61fb      	str	r3, [r7, #28]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	2b0f      	cmp	r3, #15
 8003034:	f67f aea2 	bls.w	8002d7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003038:	bf00      	nop
 800303a:	bf00      	nop
 800303c:	3724      	adds	r7, #36	; 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800
 800304c:	40013800 	.word	0x40013800
 8003050:	40020000 	.word	0x40020000
 8003054:	40020400 	.word	0x40020400
 8003058:	40020800 	.word	0x40020800
 800305c:	40020c00 	.word	0x40020c00
 8003060:	40021000 	.word	0x40021000
 8003064:	40013c00 	.word	0x40013c00

08003068 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	887b      	ldrh	r3, [r7, #2]
 800307a:	4013      	ands	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
 8003084:	e001      	b.n	800308a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800308a:	7bfb      	ldrb	r3, [r7, #15]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
 80030a4:	4613      	mov	r3, r2
 80030a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030a8:	787b      	ldrb	r3, [r7, #1]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ae:	887a      	ldrh	r2, [r7, #2]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030b4:	e003      	b.n	80030be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030b6:	887b      	ldrh	r3, [r7, #2]
 80030b8:	041a      	lsls	r2, r3, #16
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	619a      	str	r2, [r3, #24]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d006      	beq.n	80030f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030e2:	4a05      	ldr	r2, [pc, #20]	; (80030f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f806 	bl	80030fc <HAL_GPIO_EXTI_Callback>
  }
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40013c00 	.word	0x40013c00

080030fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e12b      	b.n	800337e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fe fcb2 	bl	8001aa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2224      	movs	r2, #36	; 0x24
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0201 	bic.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003166:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003176:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003178:	f003 fe78 	bl	8006e6c <HAL_RCC_GetPCLK1Freq>
 800317c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4a81      	ldr	r2, [pc, #516]	; (8003388 <HAL_I2C_Init+0x274>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d807      	bhi.n	8003198 <HAL_I2C_Init+0x84>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4a80      	ldr	r2, [pc, #512]	; (800338c <HAL_I2C_Init+0x278>)
 800318c:	4293      	cmp	r3, r2
 800318e:	bf94      	ite	ls
 8003190:	2301      	movls	r3, #1
 8003192:	2300      	movhi	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	e006      	b.n	80031a6 <HAL_I2C_Init+0x92>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4a7d      	ldr	r2, [pc, #500]	; (8003390 <HAL_I2C_Init+0x27c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	bf94      	ite	ls
 80031a0:	2301      	movls	r3, #1
 80031a2:	2300      	movhi	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e0e7      	b.n	800337e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4a78      	ldr	r2, [pc, #480]	; (8003394 <HAL_I2C_Init+0x280>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	0c9b      	lsrs	r3, r3, #18
 80031b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4a6a      	ldr	r2, [pc, #424]	; (8003388 <HAL_I2C_Init+0x274>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d802      	bhi.n	80031e8 <HAL_I2C_Init+0xd4>
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	3301      	adds	r3, #1
 80031e6:	e009      	b.n	80031fc <HAL_I2C_Init+0xe8>
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031ee:	fb02 f303 	mul.w	r3, r2, r3
 80031f2:	4a69      	ldr	r2, [pc, #420]	; (8003398 <HAL_I2C_Init+0x284>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	099b      	lsrs	r3, r3, #6
 80031fa:	3301      	adds	r3, #1
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	430b      	orrs	r3, r1
 8003202:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800320e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	495c      	ldr	r1, [pc, #368]	; (8003388 <HAL_I2C_Init+0x274>)
 8003218:	428b      	cmp	r3, r1
 800321a:	d819      	bhi.n	8003250 <HAL_I2C_Init+0x13c>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1e59      	subs	r1, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	fbb1 f3f3 	udiv	r3, r1, r3
 800322a:	1c59      	adds	r1, r3, #1
 800322c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003230:	400b      	ands	r3, r1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <HAL_I2C_Init+0x138>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1e59      	subs	r1, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	fbb1 f3f3 	udiv	r3, r1, r3
 8003244:	3301      	adds	r3, #1
 8003246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800324a:	e051      	b.n	80032f0 <HAL_I2C_Init+0x1dc>
 800324c:	2304      	movs	r3, #4
 800324e:	e04f      	b.n	80032f0 <HAL_I2C_Init+0x1dc>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d111      	bne.n	800327c <HAL_I2C_Init+0x168>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	1e58      	subs	r0, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6859      	ldr	r1, [r3, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	440b      	add	r3, r1
 8003266:	fbb0 f3f3 	udiv	r3, r0, r3
 800326a:	3301      	adds	r3, #1
 800326c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf0c      	ite	eq
 8003274:	2301      	moveq	r3, #1
 8003276:	2300      	movne	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e012      	b.n	80032a2 <HAL_I2C_Init+0x18e>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1e58      	subs	r0, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6859      	ldr	r1, [r3, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	0099      	lsls	r1, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003292:	3301      	adds	r3, #1
 8003294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_I2C_Init+0x196>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e022      	b.n	80032f0 <HAL_I2C_Init+0x1dc>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10e      	bne.n	80032d0 <HAL_I2C_Init+0x1bc>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1e58      	subs	r0, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6859      	ldr	r1, [r3, #4]
 80032ba:	460b      	mov	r3, r1
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	440b      	add	r3, r1
 80032c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c4:	3301      	adds	r3, #1
 80032c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ce:	e00f      	b.n	80032f0 <HAL_I2C_Init+0x1dc>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1e58      	subs	r0, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	0099      	lsls	r1, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e6:	3301      	adds	r3, #1
 80032e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	6809      	ldr	r1, [r1, #0]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69da      	ldr	r2, [r3, #28]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800331e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6911      	ldr	r1, [r2, #16]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	68d2      	ldr	r2, [r2, #12]
 800332a:	4311      	orrs	r1, r2
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	430b      	orrs	r3, r1
 8003332:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2220      	movs	r2, #32
 800336a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	000186a0 	.word	0x000186a0
 800338c:	001e847f 	.word	0x001e847f
 8003390:	003d08ff 	.word	0x003d08ff
 8003394:	431bde83 	.word	0x431bde83
 8003398:	10624dd3 	.word	0x10624dd3

0800339c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	461a      	mov	r2, r3
 80033a8:	460b      	mov	r3, r1
 80033aa:	817b      	strh	r3, [r7, #10]
 80033ac:	4613      	mov	r3, r2
 80033ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033b0:	f7ff fb24 	bl	80029fc <HAL_GetTick>
 80033b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b20      	cmp	r3, #32
 80033c0:	f040 80e0 	bne.w	8003584 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	2319      	movs	r3, #25
 80033ca:	2201      	movs	r2, #1
 80033cc:	4970      	ldr	r1, [pc, #448]	; (8003590 <HAL_I2C_Master_Transmit+0x1f4>)
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f002 feb2 	bl	8006138 <I2C_WaitOnFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033da:	2302      	movs	r3, #2
 80033dc:	e0d3      	b.n	8003586 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_I2C_Master_Transmit+0x50>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e0cc      	b.n	8003586 <HAL_I2C_Master_Transmit+0x1ea>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d007      	beq.n	8003412 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0201 	orr.w	r2, r2, #1
 8003410:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003420:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2221      	movs	r2, #33	; 0x21
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2210      	movs	r2, #16
 800342e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	893a      	ldrh	r2, [r7, #8]
 8003442:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4a50      	ldr	r2, [pc, #320]	; (8003594 <HAL_I2C_Master_Transmit+0x1f8>)
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003454:	8979      	ldrh	r1, [r7, #10]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	6a3a      	ldr	r2, [r7, #32]
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f002 faf6 	bl	8005a4c <I2C_MasterRequestWrite>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e08d      	b.n	8003586 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003480:	e066      	b.n	8003550 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	6a39      	ldr	r1, [r7, #32]
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f002 ff2c 	bl	80062e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00d      	beq.n	80034ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	2b04      	cmp	r3, #4
 8003498:	d107      	bne.n	80034aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e06b      	b.n	8003586 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	781a      	ldrb	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d11b      	bne.n	8003524 <HAL_I2C_Master_Transmit+0x188>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d017      	beq.n	8003524 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	781a      	ldrb	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	6a39      	ldr	r1, [r7, #32]
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f002 ff1c 	bl	8006366 <I2C_WaitOnBTFFlagUntilTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00d      	beq.n	8003550 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	2b04      	cmp	r3, #4
 800353a:	d107      	bne.n	800354c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e01a      	b.n	8003586 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003554:	2b00      	cmp	r3, #0
 8003556:	d194      	bne.n	8003482 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003566:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	e000      	b.n	8003586 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003584:	2302      	movs	r3, #2
  }
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	00100002 	.word	0x00100002
 8003594:	ffff0000 	.word	0xffff0000

08003598 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08c      	sub	sp, #48	; 0x30
 800359c:	af02      	add	r7, sp, #8
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	607a      	str	r2, [r7, #4]
 80035a2:	461a      	mov	r2, r3
 80035a4:	460b      	mov	r3, r1
 80035a6:	817b      	strh	r3, [r7, #10]
 80035a8:	4613      	mov	r3, r2
 80035aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035ac:	f7ff fa26 	bl	80029fc <HAL_GetTick>
 80035b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	f040 820b 	bne.w	80039d6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	2319      	movs	r3, #25
 80035c6:	2201      	movs	r2, #1
 80035c8:	497c      	ldr	r1, [pc, #496]	; (80037bc <HAL_I2C_Master_Receive+0x224>)
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f002 fdb4 	bl	8006138 <I2C_WaitOnFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80035d6:	2302      	movs	r3, #2
 80035d8:	e1fe      	b.n	80039d8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_I2C_Master_Receive+0x50>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e1f7      	b.n	80039d8 <HAL_I2C_Master_Receive+0x440>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d007      	beq.n	800360e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0201 	orr.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800361c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2222      	movs	r2, #34	; 0x22
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2210      	movs	r2, #16
 800362a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	893a      	ldrh	r2, [r7, #8]
 800363e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4a5c      	ldr	r2, [pc, #368]	; (80037c0 <HAL_I2C_Master_Receive+0x228>)
 800364e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003650:	8979      	ldrh	r1, [r7, #10]
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f002 fa7a 	bl	8005b50 <I2C_MasterRequestRead>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e1b8      	b.n	80039d8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366a:	2b00      	cmp	r3, #0
 800366c:	d113      	bne.n	8003696 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800366e:	2300      	movs	r3, #0
 8003670:	623b      	str	r3, [r7, #32]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	623b      	str	r3, [r7, #32]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	623b      	str	r3, [r7, #32]
 8003682:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	e18c      	b.n	80039b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369a:	2b01      	cmp	r3, #1
 800369c:	d11b      	bne.n	80036d6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	e16c      	b.n	80039b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d11b      	bne.n	8003716 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	e14c      	b.n	80039b0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003724:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800373c:	e138      	b.n	80039b0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003742:	2b03      	cmp	r3, #3
 8003744:	f200 80f1 	bhi.w	800392a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374c:	2b01      	cmp	r3, #1
 800374e:	d123      	bne.n	8003798 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003752:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f002 fe79 	bl	800644c <I2C_WaitOnRXNEFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e139      	b.n	80039d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691a      	ldr	r2, [r3, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003796:	e10b      	b.n	80039b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379c:	2b02      	cmp	r3, #2
 800379e:	d14e      	bne.n	800383e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a6:	2200      	movs	r2, #0
 80037a8:	4906      	ldr	r1, [pc, #24]	; (80037c4 <HAL_I2C_Master_Receive+0x22c>)
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f002 fcc4 	bl	8006138 <I2C_WaitOnFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d008      	beq.n	80037c8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e10e      	b.n	80039d8 <HAL_I2C_Master_Receive+0x440>
 80037ba:	bf00      	nop
 80037bc:	00100002 	.word	0x00100002
 80037c0:	ffff0000 	.word	0xffff0000
 80037c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800383c:	e0b8      	b.n	80039b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	2200      	movs	r2, #0
 8003846:	4966      	ldr	r1, [pc, #408]	; (80039e0 <HAL_I2C_Master_Receive+0x448>)
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f002 fc75 	bl	8006138 <I2C_WaitOnFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0bf      	b.n	80039d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003866:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	2200      	movs	r2, #0
 80038a2:	494f      	ldr	r1, [pc, #316]	; (80039e0 <HAL_I2C_Master_Receive+0x448>)
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f002 fc47 	bl	8006138 <I2C_WaitOnFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e091      	b.n	80039d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003928:	e042      	b.n	80039b0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800392a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f002 fd8c 	bl	800644c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e04c      	b.n	80039d8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	2b04      	cmp	r3, #4
 800397c:	d118      	bne.n	80039b0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f47f aec2 	bne.w	800373e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	e000      	b.n	80039d8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80039d6:	2302      	movs	r3, #2
  }
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3728      	adds	r7, #40	; 0x28
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	00010004 	.word	0x00010004

080039e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	4608      	mov	r0, r1
 80039ee:	4611      	mov	r1, r2
 80039f0:	461a      	mov	r2, r3
 80039f2:	4603      	mov	r3, r0
 80039f4:	817b      	strh	r3, [r7, #10]
 80039f6:	460b      	mov	r3, r1
 80039f8:	813b      	strh	r3, [r7, #8]
 80039fa:	4613      	mov	r3, r2
 80039fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039fe:	f7fe fffd 	bl	80029fc <HAL_GetTick>
 8003a02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	f040 80d9 	bne.w	8003bc4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	2319      	movs	r3, #25
 8003a18:	2201      	movs	r2, #1
 8003a1a:	496d      	ldr	r1, [pc, #436]	; (8003bd0 <HAL_I2C_Mem_Write+0x1ec>)
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f002 fb8b 	bl	8006138 <I2C_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e0cc      	b.n	8003bc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_I2C_Mem_Write+0x56>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e0c5      	b.n	8003bc6 <HAL_I2C_Mem_Write+0x1e2>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d007      	beq.n	8003a60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2221      	movs	r2, #33	; 0x21
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2240      	movs	r2, #64	; 0x40
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a3a      	ldr	r2, [r7, #32]
 8003a8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4a4d      	ldr	r2, [pc, #308]	; (8003bd4 <HAL_I2C_Mem_Write+0x1f0>)
 8003aa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003aa2:	88f8      	ldrh	r0, [r7, #6]
 8003aa4:	893a      	ldrh	r2, [r7, #8]
 8003aa6:	8979      	ldrh	r1, [r7, #10]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	9301      	str	r3, [sp, #4]
 8003aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f002 f91a 	bl	8005cec <I2C_RequestMemoryWrite>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d052      	beq.n	8003b64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e081      	b.n	8003bc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f002 fc0c 	bl	80062e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00d      	beq.n	8003aee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d107      	bne.n	8003aea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e06b      	b.n	8003bc6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	781a      	ldrb	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d11b      	bne.n	8003b64 <HAL_I2C_Mem_Write+0x180>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d017      	beq.n	8003b64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	781a      	ldrb	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1aa      	bne.n	8003ac2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f002 fbf8 	bl	8006366 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00d      	beq.n	8003b98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d107      	bne.n	8003b94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e016      	b.n	8003bc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e000      	b.n	8003bc6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bc4:	2302      	movs	r3, #2
  }
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	00100002 	.word	0x00100002
 8003bd4:	ffff0000 	.word	0xffff0000

08003bd8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08c      	sub	sp, #48	; 0x30
 8003bdc:	af02      	add	r7, sp, #8
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	4608      	mov	r0, r1
 8003be2:	4611      	mov	r1, r2
 8003be4:	461a      	mov	r2, r3
 8003be6:	4603      	mov	r3, r0
 8003be8:	817b      	strh	r3, [r7, #10]
 8003bea:	460b      	mov	r3, r1
 8003bec:	813b      	strh	r3, [r7, #8]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bf2:	f7fe ff03 	bl	80029fc <HAL_GetTick>
 8003bf6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	f040 8208 	bne.w	8004016 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	2319      	movs	r3, #25
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	497b      	ldr	r1, [pc, #492]	; (8003dfc <HAL_I2C_Mem_Read+0x224>)
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f002 fa91 	bl	8006138 <I2C_WaitOnFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e1fb      	b.n	8004018 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_I2C_Mem_Read+0x56>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e1f4      	b.n	8004018 <HAL_I2C_Mem_Read+0x440>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d007      	beq.n	8003c54 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2222      	movs	r2, #34	; 0x22
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2240      	movs	r2, #64	; 0x40
 8003c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a5b      	ldr	r2, [pc, #364]	; (8003e00 <HAL_I2C_Mem_Read+0x228>)
 8003c94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c96:	88f8      	ldrh	r0, [r7, #6]
 8003c98:	893a      	ldrh	r2, [r7, #8]
 8003c9a:	8979      	ldrh	r1, [r7, #10]
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	9301      	str	r3, [sp, #4]
 8003ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f002 f8b6 	bl	8005e18 <I2C_RequestMemoryRead>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e1b0      	b.n	8004018 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d113      	bne.n	8003ce6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	623b      	str	r3, [r7, #32]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	623b      	str	r3, [r7, #32]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	623b      	str	r3, [r7, #32]
 8003cd2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e184      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d11b      	bne.n	8003d26 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61fb      	str	r3, [r7, #28]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	e164      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d11b      	bne.n	8003d66 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	e144      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d7c:	e138      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	f200 80f1 	bhi.w	8003f6a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d123      	bne.n	8003dd8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f002 fb59 	bl	800644c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e139      	b.n	8004018 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dd6:	e10b      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d14e      	bne.n	8003e7e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de6:	2200      	movs	r2, #0
 8003de8:	4906      	ldr	r1, [pc, #24]	; (8003e04 <HAL_I2C_Mem_Read+0x22c>)
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f002 f9a4 	bl	8006138 <I2C_WaitOnFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d008      	beq.n	8003e08 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e10e      	b.n	8004018 <HAL_I2C_Mem_Read+0x440>
 8003dfa:	bf00      	nop
 8003dfc:	00100002 	.word	0x00100002
 8003e00:	ffff0000 	.word	0xffff0000
 8003e04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e7c:	e0b8      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e84:	2200      	movs	r2, #0
 8003e86:	4966      	ldr	r1, [pc, #408]	; (8004020 <HAL_I2C_Mem_Read+0x448>)
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f002 f955 	bl	8006138 <I2C_WaitOnFlagUntilTimeout>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0bf      	b.n	8004018 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	494f      	ldr	r1, [pc, #316]	; (8004020 <HAL_I2C_Mem_Read+0x448>)
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f002 f927 	bl	8006138 <I2C_WaitOnFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e091      	b.n	8004018 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f68:	e042      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f002 fa6c 	bl	800644c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e04c      	b.n	8004018 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d118      	bne.n	8003ff0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f47f aec2 	bne.w	8003d7e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e000      	b.n	8004018 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004016:	2302      	movs	r3, #2
  }
}
 8004018:	4618      	mov	r0, r3
 800401a:	3728      	adds	r7, #40	; 0x28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	00010004 	.word	0x00010004

08004024 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08a      	sub	sp, #40	; 0x28
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	607a      	str	r2, [r7, #4]
 800402e:	603b      	str	r3, [r7, #0]
 8004030:	460b      	mov	r3, r1
 8004032:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004034:	f7fe fce2 	bl	80029fc <HAL_GetTick>
 8004038:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b20      	cmp	r3, #32
 8004048:	f040 8111 	bne.w	800426e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	2319      	movs	r3, #25
 8004052:	2201      	movs	r2, #1
 8004054:	4988      	ldr	r1, [pc, #544]	; (8004278 <HAL_I2C_IsDeviceReady+0x254>)
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f002 f86e 	bl	8006138 <I2C_WaitOnFlagUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004062:	2302      	movs	r3, #2
 8004064:	e104      	b.n	8004270 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_I2C_IsDeviceReady+0x50>
 8004070:	2302      	movs	r3, #2
 8004072:	e0fd      	b.n	8004270 <HAL_I2C_IsDeviceReady+0x24c>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b01      	cmp	r3, #1
 8004088:	d007      	beq.n	800409a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2224      	movs	r2, #36	; 0x24
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4a70      	ldr	r2, [pc, #448]	; (800427c <HAL_I2C_IsDeviceReady+0x258>)
 80040bc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040cc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f002 f82c 	bl	8006138 <I2C_WaitOnFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00d      	beq.n	8004102 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f4:	d103      	bne.n	80040fe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040fc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e0b6      	b.n	8004270 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004102:	897b      	ldrh	r3, [r7, #10]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	461a      	mov	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004110:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004112:	f7fe fc73 	bl	80029fc <HAL_GetTick>
 8004116:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b02      	cmp	r3, #2
 8004124:	bf0c      	ite	eq
 8004126:	2301      	moveq	r3, #1
 8004128:	2300      	movne	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413c:	bf0c      	ite	eq
 800413e:	2301      	moveq	r3, #1
 8004140:	2300      	movne	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004146:	e025      	b.n	8004194 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004148:	f7fe fc58 	bl	80029fc <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d302      	bcc.n	800415e <HAL_I2C_IsDeviceReady+0x13a>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d103      	bne.n	8004166 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	22a0      	movs	r2, #160	; 0xa0
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b02      	cmp	r3, #2
 8004172:	bf0c      	ite	eq
 8004174:	2301      	moveq	r3, #1
 8004176:	2300      	movne	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418a:	bf0c      	ite	eq
 800418c:	2301      	moveq	r3, #1
 800418e:	2300      	movne	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2ba0      	cmp	r3, #160	; 0xa0
 800419e:	d005      	beq.n	80041ac <HAL_I2C_IsDeviceReady+0x188>
 80041a0:	7dfb      	ldrb	r3, [r7, #23]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d102      	bne.n	80041ac <HAL_I2C_IsDeviceReady+0x188>
 80041a6:	7dbb      	ldrb	r3, [r7, #22]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0cd      	beq.n	8004148 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d129      	bne.n	8004216 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d2:	2300      	movs	r3, #0
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	2319      	movs	r3, #25
 80041ee:	2201      	movs	r2, #1
 80041f0:	4921      	ldr	r1, [pc, #132]	; (8004278 <HAL_I2C_IsDeviceReady+0x254>)
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f001 ffa0 	bl	8006138 <I2C_WaitOnFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e036      	b.n	8004270 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	e02c      	b.n	8004270 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004224:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800422e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	2319      	movs	r3, #25
 8004236:	2201      	movs	r2, #1
 8004238:	490f      	ldr	r1, [pc, #60]	; (8004278 <HAL_I2C_IsDeviceReady+0x254>)
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f001 ff7c 	bl	8006138 <I2C_WaitOnFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e012      	b.n	8004270 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	3301      	adds	r3, #1
 800424e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	429a      	cmp	r2, r3
 8004256:	f4ff af32 	bcc.w	80040be <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800426e:	2302      	movs	r3, #2
  }
}
 8004270:	4618      	mov	r0, r3
 8004272:	3720      	adds	r7, #32
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	00100002 	.word	0x00100002
 800427c:	ffff0000 	.word	0xffff0000

08004280 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	2b10      	cmp	r3, #16
 80042ae:	d003      	beq.n	80042b8 <HAL_I2C_EV_IRQHandler+0x38>
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	2b40      	cmp	r3, #64	; 0x40
 80042b4:	f040 80c1 	bne.w	800443a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10d      	bne.n	80042ee <HAL_I2C_EV_IRQHandler+0x6e>
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80042d8:	d003      	beq.n	80042e2 <HAL_I2C_EV_IRQHandler+0x62>
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80042e0:	d101      	bne.n	80042e6 <HAL_I2C_EV_IRQHandler+0x66>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <HAL_I2C_EV_IRQHandler+0x68>
 80042e6:	2300      	movs	r3, #0
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	f000 8132 	beq.w	8004552 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00c      	beq.n	8004312 <HAL_I2C_EV_IRQHandler+0x92>
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	0a5b      	lsrs	r3, r3, #9
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d006      	beq.n	8004312 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f002 f926 	bl	8006556 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fd83 	bl	8004e16 <I2C_Master_SB>
 8004310:	e092      	b.n	8004438 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	08db      	lsrs	r3, r3, #3
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <HAL_I2C_EV_IRQHandler+0xb2>
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	0a5b      	lsrs	r3, r3, #9
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fdf9 	bl	8004f22 <I2C_Master_ADD10>
 8004330:	e082      	b.n	8004438 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	085b      	lsrs	r3, r3, #1
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_I2C_EV_IRQHandler+0xd2>
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	0a5b      	lsrs	r3, r3, #9
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fe13 	bl	8004f76 <I2C_Master_ADDR>
 8004350:	e072      	b.n	8004438 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	089b      	lsrs	r3, r3, #2
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d03b      	beq.n	80043d6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800436c:	f000 80f3 	beq.w	8004556 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	09db      	lsrs	r3, r3, #7
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00f      	beq.n	800439c <HAL_I2C_EV_IRQHandler+0x11c>
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	0a9b      	lsrs	r3, r3, #10
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d009      	beq.n	800439c <HAL_I2C_EV_IRQHandler+0x11c>
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	089b      	lsrs	r3, r3, #2
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d103      	bne.n	800439c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f9f3 	bl	8004780 <I2C_MasterTransmit_TXE>
 800439a:	e04d      	b.n	8004438 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	089b      	lsrs	r3, r3, #2
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 80d6 	beq.w	8004556 <HAL_I2C_EV_IRQHandler+0x2d6>
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	0a5b      	lsrs	r3, r3, #9
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 80cf 	beq.w	8004556 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80043b8:	7bbb      	ldrb	r3, [r7, #14]
 80043ba:	2b21      	cmp	r3, #33	; 0x21
 80043bc:	d103      	bne.n	80043c6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fa7a 	bl	80048b8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043c4:	e0c7      	b.n	8004556 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
 80043c8:	2b40      	cmp	r3, #64	; 0x40
 80043ca:	f040 80c4 	bne.w	8004556 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fae8 	bl	80049a4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043d4:	e0bf      	b.n	8004556 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e4:	f000 80b7 	beq.w	8004556 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	099b      	lsrs	r3, r3, #6
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00f      	beq.n	8004414 <HAL_I2C_EV_IRQHandler+0x194>
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	0a9b      	lsrs	r3, r3, #10
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d009      	beq.n	8004414 <HAL_I2C_EV_IRQHandler+0x194>
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	089b      	lsrs	r3, r3, #2
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d103      	bne.n	8004414 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 fb5d 	bl	8004acc <I2C_MasterReceive_RXNE>
 8004412:	e011      	b.n	8004438 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	089b      	lsrs	r3, r3, #2
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 809a 	beq.w	8004556 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	0a5b      	lsrs	r3, r3, #9
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 8093 	beq.w	8004556 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fc06 	bl	8004c42 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004436:	e08e      	b.n	8004556 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004438:	e08d      	b.n	8004556 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d004      	beq.n	800444c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	61fb      	str	r3, [r7, #28]
 800444a:	e007      	b.n	800445c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	085b      	lsrs	r3, r3, #1
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d012      	beq.n	800448e <HAL_I2C_EV_IRQHandler+0x20e>
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	0a5b      	lsrs	r3, r3, #9
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00c      	beq.n	800448e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004484:	69b9      	ldr	r1, [r7, #24]
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 ffc4 	bl	8005414 <I2C_Slave_ADDR>
 800448c:	e066      	b.n	800455c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <HAL_I2C_EV_IRQHandler+0x22e>
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	0a5b      	lsrs	r3, r3, #9
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fffe 	bl	80054a8 <I2C_Slave_STOPF>
 80044ac:	e056      	b.n	800455c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044ae:	7bbb      	ldrb	r3, [r7, #14]
 80044b0:	2b21      	cmp	r3, #33	; 0x21
 80044b2:	d002      	beq.n	80044ba <HAL_I2C_EV_IRQHandler+0x23a>
 80044b4:	7bbb      	ldrb	r3, [r7, #14]
 80044b6:	2b29      	cmp	r3, #41	; 0x29
 80044b8:	d125      	bne.n	8004506 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	09db      	lsrs	r3, r3, #7
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00f      	beq.n	80044e6 <HAL_I2C_EV_IRQHandler+0x266>
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	0a9b      	lsrs	r3, r3, #10
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <HAL_I2C_EV_IRQHandler+0x266>
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	089b      	lsrs	r3, r3, #2
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d103      	bne.n	80044e6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 feda 	bl	8005298 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044e4:	e039      	b.n	800455a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	089b      	lsrs	r3, r3, #2
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d033      	beq.n	800455a <HAL_I2C_EV_IRQHandler+0x2da>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	0a5b      	lsrs	r3, r3, #9
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d02d      	beq.n	800455a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 ff07 	bl	8005312 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004504:	e029      	b.n	800455a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	099b      	lsrs	r3, r3, #6
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00f      	beq.n	8004532 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	0a9b      	lsrs	r3, r3, #10
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d009      	beq.n	8004532 <HAL_I2C_EV_IRQHandler+0x2b2>
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	089b      	lsrs	r3, r3, #2
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d103      	bne.n	8004532 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 ff12 	bl	8005354 <I2C_SlaveReceive_RXNE>
 8004530:	e014      	b.n	800455c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	089b      	lsrs	r3, r3, #2
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00e      	beq.n	800455c <HAL_I2C_EV_IRQHandler+0x2dc>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	0a5b      	lsrs	r3, r3, #9
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d008      	beq.n	800455c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 ff40 	bl	80053d0 <I2C_SlaveReceive_BTF>
 8004550:	e004      	b.n	800455c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004552:	bf00      	nop
 8004554:	e002      	b.n	800455c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800455a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800455c:	3720      	adds	r7, #32
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b08a      	sub	sp, #40	; 0x28
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800457a:	2300      	movs	r3, #0
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004584:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	0a1b      	lsrs	r3, r3, #8
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00e      	beq.n	80045b0 <HAL_I2C_ER_IRQHandler+0x4e>
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	0a1b      	lsrs	r3, r3, #8
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d008      	beq.n	80045b0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045ae:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	0a5b      	lsrs	r3, r3, #9
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00e      	beq.n	80045da <HAL_I2C_ER_IRQHandler+0x78>
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	0a1b      	lsrs	r3, r3, #8
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d008      	beq.n	80045da <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	f043 0302 	orr.w	r3, r3, #2
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80045d8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	0a9b      	lsrs	r3, r3, #10
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d03f      	beq.n	8004666 <HAL_I2C_ER_IRQHandler+0x104>
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	0a1b      	lsrs	r3, r3, #8
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d039      	beq.n	8004666 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80045f2:	7efb      	ldrb	r3, [r7, #27]
 80045f4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004604:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800460c:	7ebb      	ldrb	r3, [r7, #26]
 800460e:	2b20      	cmp	r3, #32
 8004610:	d112      	bne.n	8004638 <HAL_I2C_ER_IRQHandler+0xd6>
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10f      	bne.n	8004638 <HAL_I2C_ER_IRQHandler+0xd6>
 8004618:	7cfb      	ldrb	r3, [r7, #19]
 800461a:	2b21      	cmp	r3, #33	; 0x21
 800461c:	d008      	beq.n	8004630 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800461e:	7cfb      	ldrb	r3, [r7, #19]
 8004620:	2b29      	cmp	r3, #41	; 0x29
 8004622:	d005      	beq.n	8004630 <HAL_I2C_ER_IRQHandler+0xce>
 8004624:	7cfb      	ldrb	r3, [r7, #19]
 8004626:	2b28      	cmp	r3, #40	; 0x28
 8004628:	d106      	bne.n	8004638 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b21      	cmp	r3, #33	; 0x21
 800462e:	d103      	bne.n	8004638 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f001 f869 	bl	8005708 <I2C_Slave_AF>
 8004636:	e016      	b.n	8004666 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004640:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	f043 0304 	orr.w	r3, r3, #4
 8004648:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800464a:	7efb      	ldrb	r3, [r7, #27]
 800464c:	2b10      	cmp	r3, #16
 800464e:	d002      	beq.n	8004656 <HAL_I2C_ER_IRQHandler+0xf4>
 8004650:	7efb      	ldrb	r3, [r7, #27]
 8004652:	2b40      	cmp	r3, #64	; 0x40
 8004654:	d107      	bne.n	8004666 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004664:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	0adb      	lsrs	r3, r3, #11
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00e      	beq.n	8004690 <HAL_I2C_ER_IRQHandler+0x12e>
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	0a1b      	lsrs	r3, r3, #8
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d008      	beq.n	8004690 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	f043 0308 	orr.w	r3, r3, #8
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800468e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	2b00      	cmp	r3, #0
 8004694:	d008      	beq.n	80046a8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f001 f8a0 	bl	80057e8 <I2C_ITError>
  }
}
 80046a8:	bf00      	nop
 80046aa:	3728      	adds	r7, #40	; 0x28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	70fb      	strb	r3, [r7, #3]
 800470c:	4613      	mov	r3, r2
 800470e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004796:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d150      	bne.n	8004848 <I2C_MasterTransmit_TXE+0xc8>
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	2b21      	cmp	r3, #33	; 0x21
 80047aa:	d14d      	bne.n	8004848 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d01d      	beq.n	80047ee <I2C_MasterTransmit_TXE+0x6e>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d01a      	beq.n	80047ee <I2C_MasterTransmit_TXE+0x6e>
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047be:	d016      	beq.n	80047ee <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047ce:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2211      	movs	r2, #17
 80047d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7ff ff62 	bl	80046b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047ec:	e060      	b.n	80048b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047fc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800480c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b40      	cmp	r3, #64	; 0x40
 8004826:	d107      	bne.n	8004838 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff ff7d 	bl	8004730 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004836:	e03b      	b.n	80048b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff ff35 	bl	80046b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004846:	e033      	b.n	80048b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	2b21      	cmp	r3, #33	; 0x21
 800484c:	d005      	beq.n	800485a <I2C_MasterTransmit_TXE+0xda>
 800484e:	7bbb      	ldrb	r3, [r7, #14]
 8004850:	2b40      	cmp	r3, #64	; 0x40
 8004852:	d12d      	bne.n	80048b0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	2b22      	cmp	r3, #34	; 0x22
 8004858:	d12a      	bne.n	80048b0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d108      	bne.n	8004876 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004872:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004874:	e01c      	b.n	80048b0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b40      	cmp	r3, #64	; 0x40
 8004880:	d103      	bne.n	800488a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f88e 	bl	80049a4 <I2C_MemoryTransmit_TXE_BTF>
}
 8004888:	e012      	b.n	80048b0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	781a      	ldrb	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80048ae:	e7ff      	b.n	80048b0 <I2C_MasterTransmit_TXE+0x130>
 80048b0:	bf00      	nop
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b21      	cmp	r3, #33	; 0x21
 80048d0:	d164      	bne.n	800499c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d012      	beq.n	8004902 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	781a      	ldrb	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004900:	e04c      	b.n	800499c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b08      	cmp	r3, #8
 8004906:	d01d      	beq.n	8004944 <I2C_MasterTransmit_BTF+0x8c>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b20      	cmp	r3, #32
 800490c:	d01a      	beq.n	8004944 <I2C_MasterTransmit_BTF+0x8c>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004914:	d016      	beq.n	8004944 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004924:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2211      	movs	r2, #17
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff feb7 	bl	80046b0 <HAL_I2C_MasterTxCpltCallback>
}
 8004942:	e02b      	b.n	800499c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004952:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004962:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b40      	cmp	r3, #64	; 0x40
 800497c:	d107      	bne.n	800498e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff fed2 	bl	8004730 <HAL_I2C_MemTxCpltCallback>
}
 800498c:	e006      	b.n	800499c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff fe8a 	bl	80046b0 <HAL_I2C_MasterTxCpltCallback>
}
 800499c:	bf00      	nop
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d11d      	bne.n	80049f8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d10b      	bne.n	80049dc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d4:	1c9a      	adds	r2, r3, #2
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80049da:	e073      	b.n	8004ac4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	121b      	asrs	r3, r3, #8
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80049f6:	e065      	b.n	8004ac4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d10b      	bne.n	8004a18 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a16:	e055      	b.n	8004ac4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d151      	bne.n	8004ac4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	2b22      	cmp	r3, #34	; 0x22
 8004a24:	d10d      	bne.n	8004a42 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a34:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a40:	e040      	b.n	8004ac4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d015      	beq.n	8004a78 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	2b21      	cmp	r3, #33	; 0x21
 8004a50:	d112      	bne.n	8004a78 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	781a      	ldrb	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a76:	e025      	b.n	8004ac4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d120      	bne.n	8004ac4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	2b21      	cmp	r3, #33	; 0x21
 8004a86:	d11d      	bne.n	8004ac4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a96:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff fe36 	bl	8004730 <HAL_I2C_MemTxCpltCallback>
}
 8004ac4:	bf00      	nop
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b22      	cmp	r3, #34	; 0x22
 8004ade:	f040 80ac 	bne.w	8004c3a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d921      	bls.n	8004b34 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	f040 808c 	bne.w	8004c3a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b30:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004b32:	e082      	b.n	8004c3a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d075      	beq.n	8004c28 <I2C_MasterReceive_RXNE+0x15c>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d002      	beq.n	8004b48 <I2C_MasterReceive_RXNE+0x7c>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d16f      	bne.n	8004c28 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f001 fc4d 	bl	80063e8 <I2C_WaitOnSTOPRequestThroughIT>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d142      	bne.n	8004bda <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b62:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b72:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691a      	ldr	r2, [r3, #16]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b40      	cmp	r3, #64	; 0x40
 8004bac:	d10a      	bne.n	8004bc4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff fdc1 	bl	8004744 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004bc2:	e03a      	b.n	8004c3a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2212      	movs	r2, #18
 8004bd0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff fd76 	bl	80046c4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004bd8:	e02f      	b.n	8004c3a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004be8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff fd99 	bl	8004758 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004c26:	e008      	b.n	8004c3a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c36:	605a      	str	r2, [r3, #4]
}
 8004c38:	e7ff      	b.n	8004c3a <I2C_MasterReceive_RXNE+0x16e>
 8004c3a:	bf00      	nop
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b084      	sub	sp, #16
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d11b      	bne.n	8004c92 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c68:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004c90:	e0bd      	b.n	8004e0e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d129      	bne.n	8004cf0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004caa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d00a      	beq.n	8004cc8 <I2C_MasterReceive_BTF+0x86>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d007      	beq.n	8004cc8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691a      	ldr	r2, [r3, #16]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cee:	e08e      	b.n	8004e0e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d176      	bne.n	8004de8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d002      	beq.n	8004d06 <I2C_MasterReceive_BTF+0xc4>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b10      	cmp	r3, #16
 8004d04:	d108      	bne.n	8004d18 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	e019      	b.n	8004d4c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d002      	beq.n	8004d24 <I2C_MasterReceive_BTF+0xe2>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d108      	bne.n	8004d36 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	e00a      	b.n	8004d4c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d007      	beq.n	8004d4c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d4a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691a      	ldr	r2, [r3, #16]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004da6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b40      	cmp	r3, #64	; 0x40
 8004dba:	d10a      	bne.n	8004dd2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff fcba 	bl	8004744 <HAL_I2C_MemRxCpltCallback>
}
 8004dd0:	e01d      	b.n	8004e0e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2212      	movs	r2, #18
 8004dde:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff fc6f 	bl	80046c4 <HAL_I2C_MasterRxCpltCallback>
}
 8004de6:	e012      	b.n	8004e0e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e0e:	bf00      	nop
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b40      	cmp	r3, #64	; 0x40
 8004e28:	d117      	bne.n	8004e5a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d109      	bne.n	8004e46 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	461a      	mov	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e42:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004e44:	e067      	b.n	8004f16 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	f043 0301 	orr.w	r3, r3, #1
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	611a      	str	r2, [r3, #16]
}
 8004e58:	e05d      	b.n	8004f16 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e62:	d133      	bne.n	8004ecc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b21      	cmp	r3, #33	; 0x21
 8004e6e:	d109      	bne.n	8004e84 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e80:	611a      	str	r2, [r3, #16]
 8004e82:	e008      	b.n	8004e96 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d004      	beq.n	8004ea8 <I2C_Master_SB+0x92>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d108      	bne.n	8004eba <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d032      	beq.n	8004f16 <I2C_Master_SB+0x100>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d02d      	beq.n	8004f16 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ec8:	605a      	str	r2, [r3, #4]
}
 8004eca:	e024      	b.n	8004f16 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10e      	bne.n	8004ef2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	11db      	asrs	r3, r3, #7
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f003 0306 	and.w	r3, r3, #6
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	f063 030f 	orn	r3, r3, #15
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	611a      	str	r2, [r3, #16]
}
 8004ef0:	e011      	b.n	8004f16 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d10d      	bne.n	8004f16 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	11db      	asrs	r3, r3, #7
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	f003 0306 	and.w	r3, r3, #6
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	f063 030e 	orn	r3, r3, #14
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	611a      	str	r2, [r3, #16]
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d004      	beq.n	8004f48 <I2C_Master_ADD10+0x26>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d108      	bne.n	8004f5a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00c      	beq.n	8004f6a <I2C_Master_ADD10+0x48>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d007      	beq.n	8004f6a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f68:	605a      	str	r2, [r3, #4]
  }
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b091      	sub	sp, #68	; 0x44
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b22      	cmp	r3, #34	; 0x22
 8004f9e:	f040 8169 	bne.w	8005274 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10f      	bne.n	8004fca <I2C_Master_ADDR+0x54>
 8004faa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004fae:	2b40      	cmp	r3, #64	; 0x40
 8004fb0:	d10b      	bne.n	8004fca <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	e160      	b.n	800528c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d11d      	bne.n	800500e <I2C_Master_ADDR+0x98>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004fda:	d118      	bne.n	800500e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fdc:	2300      	movs	r3, #0
 8004fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005000:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	651a      	str	r2, [r3, #80]	; 0x50
 800500c:	e13e      	b.n	800528c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005012:	b29b      	uxth	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d113      	bne.n	8005040 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005018:	2300      	movs	r3, #0
 800501a:	62bb      	str	r3, [r7, #40]	; 0x28
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	62bb      	str	r3, [r7, #40]	; 0x28
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	62bb      	str	r3, [r7, #40]	; 0x28
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	e115      	b.n	800526c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b01      	cmp	r3, #1
 8005048:	f040 808a 	bne.w	8005160 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005052:	d137      	bne.n	80050c4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005062:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800506e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005072:	d113      	bne.n	800509c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005082:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005084:	2300      	movs	r3, #0
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	e0e7      	b.n	800526c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800509c:	2300      	movs	r3, #0
 800509e:	623b      	str	r3, [r7, #32]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	623b      	str	r3, [r7, #32]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	623b      	str	r3, [r7, #32]
 80050b0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	e0d3      	b.n	800526c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80050c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d02e      	beq.n	8005128 <I2C_Master_ADDR+0x1b2>
 80050ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	d02b      	beq.n	8005128 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80050d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d2:	2b12      	cmp	r3, #18
 80050d4:	d102      	bne.n	80050dc <I2C_Master_ADDR+0x166>
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d125      	bne.n	8005128 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80050dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050de:	2b04      	cmp	r3, #4
 80050e0:	d00e      	beq.n	8005100 <I2C_Master_ADDR+0x18a>
 80050e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d00b      	beq.n	8005100 <I2C_Master_ADDR+0x18a>
 80050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ea:	2b10      	cmp	r3, #16
 80050ec:	d008      	beq.n	8005100 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e007      	b.n	8005110 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800510e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005110:	2300      	movs	r3, #0
 8005112:	61fb      	str	r3, [r7, #28]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	61fb      	str	r3, [r7, #28]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	61fb      	str	r3, [r7, #28]
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	e0a1      	b.n	800526c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005136:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005138:	2300      	movs	r3, #0
 800513a:	61bb      	str	r3, [r7, #24]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	61bb      	str	r3, [r7, #24]
 800514c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	e085      	b.n	800526c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d14d      	bne.n	8005206 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516c:	2b04      	cmp	r3, #4
 800516e:	d016      	beq.n	800519e <I2C_Master_ADDR+0x228>
 8005170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005172:	2b02      	cmp	r3, #2
 8005174:	d013      	beq.n	800519e <I2C_Master_ADDR+0x228>
 8005176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005178:	2b10      	cmp	r3, #16
 800517a:	d010      	beq.n	800519e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800518a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	e007      	b.n	80051ae <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051ac:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051bc:	d117      	bne.n	80051ee <I2C_Master_ADDR+0x278>
 80051be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051c4:	d00b      	beq.n	80051de <I2C_Master_ADDR+0x268>
 80051c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d008      	beq.n	80051de <I2C_Master_ADDR+0x268>
 80051cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d005      	beq.n	80051de <I2C_Master_ADDR+0x268>
 80051d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d4:	2b10      	cmp	r3, #16
 80051d6:	d002      	beq.n	80051de <I2C_Master_ADDR+0x268>
 80051d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051da:	2b20      	cmp	r3, #32
 80051dc:	d107      	bne.n	80051ee <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051ec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ee:	2300      	movs	r3, #0
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	e032      	b.n	800526c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005214:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005224:	d117      	bne.n	8005256 <I2C_Master_ADDR+0x2e0>
 8005226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005228:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800522c:	d00b      	beq.n	8005246 <I2C_Master_ADDR+0x2d0>
 800522e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005230:	2b01      	cmp	r3, #1
 8005232:	d008      	beq.n	8005246 <I2C_Master_ADDR+0x2d0>
 8005234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005236:	2b08      	cmp	r3, #8
 8005238:	d005      	beq.n	8005246 <I2C_Master_ADDR+0x2d0>
 800523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523c:	2b10      	cmp	r3, #16
 800523e:	d002      	beq.n	8005246 <I2C_Master_ADDR+0x2d0>
 8005240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005242:	2b20      	cmp	r3, #32
 8005244:	d107      	bne.n	8005256 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005254:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005256:	2300      	movs	r3, #0
 8005258:	613b      	str	r3, [r7, #16]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	613b      	str	r3, [r7, #16]
 800526a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005272:	e00b      	b.n	800528c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005274:	2300      	movs	r3, #0
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	68fb      	ldr	r3, [r7, #12]
}
 800528a:	e7ff      	b.n	800528c <I2C_Master_ADDR+0x316>
 800528c:	bf00      	nop
 800528e:	3744      	adds	r7, #68	; 0x44
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d02b      	beq.n	800530a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	781a      	ldrb	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d114      	bne.n	800530a <I2C_SlaveTransmit_TXE+0x72>
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	2b29      	cmp	r3, #41	; 0x29
 80052e4:	d111      	bne.n	800530a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2221      	movs	r2, #33	; 0x21
 80052fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2228      	movs	r2, #40	; 0x28
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7ff f9e7 	bl	80046d8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800530a:	bf00      	nop
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d011      	beq.n	8005348 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	781a      	ldrb	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005362:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d02c      	beq.n	80053c8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005398:	b29b      	uxth	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d114      	bne.n	80053c8 <I2C_SlaveReceive_RXNE+0x74>
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	2b2a      	cmp	r3, #42	; 0x2a
 80053a2:	d111      	bne.n	80053c8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053b2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2222      	movs	r2, #34	; 0x22
 80053b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2228      	movs	r2, #40	; 0x28
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff f992 	bl	80046ec <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80053c8:	bf00      	nop
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d012      	beq.n	8005408 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800541e:	2300      	movs	r3, #0
 8005420:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005428:	b2db      	uxtb	r3, r3
 800542a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800542e:	2b28      	cmp	r3, #40	; 0x28
 8005430:	d127      	bne.n	8005482 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005440:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	089b      	lsrs	r3, r3, #2
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800544e:	2301      	movs	r3, #1
 8005450:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	09db      	lsrs	r3, r3, #7
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d103      	bne.n	8005466 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	81bb      	strh	r3, [r7, #12]
 8005464:	e002      	b.n	800546c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005474:	89ba      	ldrh	r2, [r7, #12]
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	4619      	mov	r1, r3
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7ff f940 	bl	8004700 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005480:	e00e      	b.n	80054a0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005482:	2300      	movs	r3, #0
 8005484:	60bb      	str	r3, [r7, #8]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	60bb      	str	r3, [r7, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80054a0:	bf00      	nop
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054c6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80054c8:	2300      	movs	r3, #0
 80054ca:	60bb      	str	r3, [r7, #8]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	60bb      	str	r3, [r7, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005504:	d172      	bne.n	80055ec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005506:	7bfb      	ldrb	r3, [r7, #15]
 8005508:	2b22      	cmp	r3, #34	; 0x22
 800550a:	d002      	beq.n	8005512 <I2C_Slave_STOPF+0x6a>
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	2b2a      	cmp	r3, #42	; 0x2a
 8005510:	d135      	bne.n	800557e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	b29a      	uxth	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005524:	b29b      	uxth	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d005      	beq.n	8005536 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	f043 0204 	orr.w	r2, r3, #4
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005544:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	4618      	mov	r0, r3
 800554c:	f7fd fbfa 	bl	8002d44 <HAL_DMA_GetState>
 8005550:	4603      	mov	r3, r0
 8005552:	2b01      	cmp	r3, #1
 8005554:	d049      	beq.n	80055ea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555a:	4a69      	ldr	r2, [pc, #420]	; (8005700 <I2C_Slave_STOPF+0x258>)
 800555c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005562:	4618      	mov	r0, r3
 8005564:	f7fd fbcc 	bl	8002d00 <HAL_DMA_Abort_IT>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d03d      	beq.n	80055ea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005578:	4610      	mov	r0, r2
 800557a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800557c:	e035      	b.n	80055ea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	b29a      	uxth	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d005      	beq.n	80055a2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	f043 0204 	orr.w	r2, r3, #4
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fd fbc4 	bl	8002d44 <HAL_DMA_GetState>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d014      	beq.n	80055ec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c6:	4a4e      	ldr	r2, [pc, #312]	; (8005700 <I2C_Slave_STOPF+0x258>)
 80055c8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fd fb96 	bl	8002d00 <HAL_DMA_Abort_IT>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d008      	beq.n	80055ec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055e4:	4610      	mov	r0, r2
 80055e6:	4798      	blx	r3
 80055e8:	e000      	b.n	80055ec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055ea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d03e      	beq.n	8005674 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b04      	cmp	r3, #4
 8005602:	d112      	bne.n	800562a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691a      	ldr	r2, [r3, #16]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005634:	2b40      	cmp	r3, #64	; 0x40
 8005636:	d112      	bne.n	800565e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005654:	b29b      	uxth	r3, r3
 8005656:	3b01      	subs	r3, #1
 8005658:	b29a      	uxth	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005662:	b29b      	uxth	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d005      	beq.n	8005674 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	f043 0204 	orr.w	r2, r3, #4
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f8b3 	bl	80057e8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005682:	e039      	b.n	80056f8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005684:	7bfb      	ldrb	r3, [r7, #15]
 8005686:	2b2a      	cmp	r3, #42	; 0x2a
 8005688:	d109      	bne.n	800569e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2228      	movs	r2, #40	; 0x28
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff f827 	bl	80046ec <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b28      	cmp	r3, #40	; 0x28
 80056a8:	d111      	bne.n	80056ce <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a15      	ldr	r2, [pc, #84]	; (8005704 <I2C_Slave_STOPF+0x25c>)
 80056ae:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7ff f828 	bl	800471c <HAL_I2C_ListenCpltCallback>
}
 80056cc:	e014      	b.n	80056f8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d2:	2b22      	cmp	r3, #34	; 0x22
 80056d4:	d002      	beq.n	80056dc <I2C_Slave_STOPF+0x234>
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	2b22      	cmp	r3, #34	; 0x22
 80056da:	d10d      	bne.n	80056f8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fe fffa 	bl	80046ec <HAL_I2C_SlaveRxCpltCallback>
}
 80056f8:	bf00      	nop
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	08005fe9 	.word	0x08005fe9
 8005704:	ffff0000 	.word	0xffff0000

08005708 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005716:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b08      	cmp	r3, #8
 8005722:	d002      	beq.n	800572a <I2C_Slave_AF+0x22>
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b20      	cmp	r3, #32
 8005728:	d129      	bne.n	800577e <I2C_Slave_AF+0x76>
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	2b28      	cmp	r3, #40	; 0x28
 800572e:	d126      	bne.n	800577e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a2c      	ldr	r2, [pc, #176]	; (80057e4 <I2C_Slave_AF+0xdc>)
 8005734:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005744:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800574e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800575e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2220      	movs	r2, #32
 800576a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fe ffd0 	bl	800471c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800577c:	e02e      	b.n	80057dc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	2b21      	cmp	r3, #33	; 0x21
 8005782:	d126      	bne.n	80057d2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a17      	ldr	r2, [pc, #92]	; (80057e4 <I2C_Slave_AF+0xdc>)
 8005788:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2221      	movs	r2, #33	; 0x21
 800578e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057ae:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057b8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057c8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7fe ff84 	bl	80046d8 <HAL_I2C_SlaveTxCpltCallback>
}
 80057d0:	e004      	b.n	80057dc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057da:	615a      	str	r2, [r3, #20]
}
 80057dc:	bf00      	nop
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	ffff0000 	.word	0xffff0000

080057e8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005800:	7bbb      	ldrb	r3, [r7, #14]
 8005802:	2b10      	cmp	r3, #16
 8005804:	d002      	beq.n	800580c <I2C_ITError+0x24>
 8005806:	7bbb      	ldrb	r3, [r7, #14]
 8005808:	2b40      	cmp	r3, #64	; 0x40
 800580a:	d10a      	bne.n	8005822 <I2C_ITError+0x3a>
 800580c:	7bfb      	ldrb	r3, [r7, #15]
 800580e:	2b22      	cmp	r3, #34	; 0x22
 8005810:	d107      	bne.n	8005822 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005820:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005822:	7bfb      	ldrb	r3, [r7, #15]
 8005824:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005828:	2b28      	cmp	r3, #40	; 0x28
 800582a:	d107      	bne.n	800583c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2228      	movs	r2, #40	; 0x28
 8005836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800583a:	e015      	b.n	8005868 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800584a:	d00a      	beq.n	8005862 <I2C_ITError+0x7a>
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	2b60      	cmp	r3, #96	; 0x60
 8005850:	d007      	beq.n	8005862 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2220      	movs	r2, #32
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005876:	d162      	bne.n	800593e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005886:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b01      	cmp	r3, #1
 8005894:	d020      	beq.n	80058d8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589a:	4a6a      	ldr	r2, [pc, #424]	; (8005a44 <I2C_ITError+0x25c>)
 800589c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fd fa2c 	bl	8002d00 <HAL_DMA_Abort_IT>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 8089 	beq.w	80059c2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0201 	bic.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058d2:	4610      	mov	r0, r2
 80058d4:	4798      	blx	r3
 80058d6:	e074      	b.n	80059c2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	4a59      	ldr	r2, [pc, #356]	; (8005a44 <I2C_ITError+0x25c>)
 80058de:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fd fa0b 	bl	8002d00 <HAL_DMA_Abort_IT>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d068      	beq.n	80059c2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fa:	2b40      	cmp	r3, #64	; 0x40
 80058fc:	d10b      	bne.n	8005916 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0201 	bic.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2220      	movs	r2, #32
 800592a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005938:	4610      	mov	r0, r2
 800593a:	4798      	blx	r3
 800593c:	e041      	b.n	80059c2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b60      	cmp	r3, #96	; 0x60
 8005948:	d125      	bne.n	8005996 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2220      	movs	r2, #32
 800594e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005962:	2b40      	cmp	r3, #64	; 0x40
 8005964:	d10b      	bne.n	800597e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	b2d2      	uxtb	r2, r2
 8005972:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0201 	bic.w	r2, r2, #1
 800598c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fe feec 	bl	800476c <HAL_I2C_AbortCpltCallback>
 8005994:	e015      	b.n	80059c2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a0:	2b40      	cmp	r3, #64	; 0x40
 80059a2:	d10b      	bne.n	80059bc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691a      	ldr	r2, [r3, #16]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	b2d2      	uxtb	r2, r2
 80059b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7fe fecb 	bl	8004758 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10e      	bne.n	80059f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d109      	bne.n	80059f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d104      	bne.n	80059f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059fe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a06:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	d113      	bne.n	8005a3c <I2C_ITError+0x254>
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	2b28      	cmp	r3, #40	; 0x28
 8005a18:	d110      	bne.n	8005a3c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a0a      	ldr	r2, [pc, #40]	; (8005a48 <I2C_ITError+0x260>)
 8005a1e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7fe fe70 	bl	800471c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a3c:	bf00      	nop
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	08005fe9 	.word	0x08005fe9
 8005a48:	ffff0000 	.word	0xffff0000

08005a4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af02      	add	r7, sp, #8
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	607a      	str	r2, [r7, #4]
 8005a56:	603b      	str	r3, [r7, #0]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d006      	beq.n	8005a76 <I2C_MasterRequestWrite+0x2a>
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d003      	beq.n	8005a76 <I2C_MasterRequestWrite+0x2a>
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a74:	d108      	bne.n	8005a88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	e00b      	b.n	8005aa0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	2b12      	cmp	r3, #18
 8005a8e:	d107      	bne.n	8005aa0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 fb43 	bl	8006138 <I2C_WaitOnFlagUntilTimeout>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00d      	beq.n	8005ad4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ac6:	d103      	bne.n	8005ad0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ace:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e035      	b.n	8005b40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005adc:	d108      	bne.n	8005af0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ade:	897b      	ldrh	r3, [r7, #10]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005aec:	611a      	str	r2, [r3, #16]
 8005aee:	e01b      	b.n	8005b28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005af0:	897b      	ldrh	r3, [r7, #10]
 8005af2:	11db      	asrs	r3, r3, #7
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	f003 0306 	and.w	r3, r3, #6
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	f063 030f 	orn	r3, r3, #15
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	490e      	ldr	r1, [pc, #56]	; (8005b48 <I2C_MasterRequestWrite+0xfc>)
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 fb69 	bl	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e010      	b.n	8005b40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b1e:	897b      	ldrh	r3, [r7, #10]
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	4907      	ldr	r1, [pc, #28]	; (8005b4c <I2C_MasterRequestWrite+0x100>)
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 fb59 	bl	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e000      	b.n	8005b40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	00010008 	.word	0x00010008
 8005b4c:	00010002 	.word	0x00010002

08005b50 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af02      	add	r7, sp, #8
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	607a      	str	r2, [r7, #4]
 8005b5a:	603b      	str	r3, [r7, #0]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b64:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b74:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d006      	beq.n	8005b8a <I2C_MasterRequestRead+0x3a>
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d003      	beq.n	8005b8a <I2C_MasterRequestRead+0x3a>
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b88:	d108      	bne.n	8005b9c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	e00b      	b.n	8005bb4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba0:	2b11      	cmp	r3, #17
 8005ba2:	d107      	bne.n	8005bb4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 fab9 	bl	8006138 <I2C_WaitOnFlagUntilTimeout>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00d      	beq.n	8005be8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bda:	d103      	bne.n	8005be4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e079      	b.n	8005cdc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bf0:	d108      	bne.n	8005c04 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005bf2:	897b      	ldrh	r3, [r7, #10]
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	f043 0301 	orr.w	r3, r3, #1
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	611a      	str	r2, [r3, #16]
 8005c02:	e05f      	b.n	8005cc4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c04:	897b      	ldrh	r3, [r7, #10]
 8005c06:	11db      	asrs	r3, r3, #7
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	f003 0306 	and.w	r3, r3, #6
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	f063 030f 	orn	r3, r3, #15
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	4930      	ldr	r1, [pc, #192]	; (8005ce4 <I2C_MasterRequestRead+0x194>)
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 fadf 	bl	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e054      	b.n	8005cdc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c32:	897b      	ldrh	r3, [r7, #10]
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	4929      	ldr	r1, [pc, #164]	; (8005ce8 <I2C_MasterRequestRead+0x198>)
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 facf 	bl	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e044      	b.n	8005cdc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c52:	2300      	movs	r3, #0
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	613b      	str	r3, [r7, #16]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	613b      	str	r3, [r7, #16]
 8005c66:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c76:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 fa57 	bl	8006138 <I2C_WaitOnFlagUntilTimeout>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00d      	beq.n	8005cac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c9e:	d103      	bne.n	8005ca8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ca6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e017      	b.n	8005cdc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005cac:	897b      	ldrh	r3, [r7, #10]
 8005cae:	11db      	asrs	r3, r3, #7
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	f003 0306 	and.w	r3, r3, #6
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	f063 030e 	orn	r3, r3, #14
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	4907      	ldr	r1, [pc, #28]	; (8005ce8 <I2C_MasterRequestRead+0x198>)
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 fa8b 	bl	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	00010008 	.word	0x00010008
 8005ce8:	00010002 	.word	0x00010002

08005cec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b088      	sub	sp, #32
 8005cf0:	af02      	add	r7, sp, #8
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	4608      	mov	r0, r1
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	817b      	strh	r3, [r7, #10]
 8005cfe:	460b      	mov	r3, r1
 8005d00:	813b      	strh	r3, [r7, #8]
 8005d02:	4613      	mov	r3, r2
 8005d04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 fa08 	bl	8006138 <I2C_WaitOnFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00d      	beq.n	8005d4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d3c:	d103      	bne.n	8005d46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e05f      	b.n	8005e0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d4a:	897b      	ldrh	r3, [r7, #10]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	461a      	mov	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	6a3a      	ldr	r2, [r7, #32]
 8005d5e:	492d      	ldr	r1, [pc, #180]	; (8005e14 <I2C_RequestMemoryWrite+0x128>)
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 fa40 	bl	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d001      	beq.n	8005d70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e04c      	b.n	8005e0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d70:	2300      	movs	r3, #0
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d88:	6a39      	ldr	r1, [r7, #32]
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 faaa 	bl	80062e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00d      	beq.n	8005db2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d107      	bne.n	8005dae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e02b      	b.n	8005e0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005db2:	88fb      	ldrh	r3, [r7, #6]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d105      	bne.n	8005dc4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005db8:	893b      	ldrh	r3, [r7, #8]
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	611a      	str	r2, [r3, #16]
 8005dc2:	e021      	b.n	8005e08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005dc4:	893b      	ldrh	r3, [r7, #8]
 8005dc6:	0a1b      	lsrs	r3, r3, #8
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd4:	6a39      	ldr	r1, [r7, #32]
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 fa84 	bl	80062e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00d      	beq.n	8005dfe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d107      	bne.n	8005dfa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005df8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e005      	b.n	8005e0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dfe:	893b      	ldrh	r3, [r7, #8]
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	00010002 	.word	0x00010002

08005e18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b088      	sub	sp, #32
 8005e1c:	af02      	add	r7, sp, #8
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	4608      	mov	r0, r1
 8005e22:	4611      	mov	r1, r2
 8005e24:	461a      	mov	r2, r3
 8005e26:	4603      	mov	r3, r0
 8005e28:	817b      	strh	r3, [r7, #10]
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	813b      	strh	r3, [r7, #8]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 f96a 	bl	8006138 <I2C_WaitOnFlagUntilTimeout>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00d      	beq.n	8005e86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e78:	d103      	bne.n	8005e82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e0aa      	b.n	8005fdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e86:	897b      	ldrh	r3, [r7, #10]
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	6a3a      	ldr	r2, [r7, #32]
 8005e9a:	4952      	ldr	r1, [pc, #328]	; (8005fe4 <I2C_RequestMemoryRead+0x1cc>)
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f9a2 	bl	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e097      	b.n	8005fdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	617b      	str	r3, [r7, #20]
 8005ec0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec4:	6a39      	ldr	r1, [r7, #32]
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 fa0c 	bl	80062e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00d      	beq.n	8005eee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d107      	bne.n	8005eea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ee8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e076      	b.n	8005fdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005eee:	88fb      	ldrh	r3, [r7, #6]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d105      	bne.n	8005f00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ef4:	893b      	ldrh	r3, [r7, #8]
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	611a      	str	r2, [r3, #16]
 8005efe:	e021      	b.n	8005f44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f00:	893b      	ldrh	r3, [r7, #8]
 8005f02:	0a1b      	lsrs	r3, r3, #8
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f10:	6a39      	ldr	r1, [r7, #32]
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 f9e6 	bl	80062e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00d      	beq.n	8005f3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d107      	bne.n	8005f36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e050      	b.n	8005fdc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f3a:	893b      	ldrh	r3, [r7, #8]
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f46:	6a39      	ldr	r1, [r7, #32]
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 f9cb 	bl	80062e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00d      	beq.n	8005f70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	d107      	bne.n	8005f6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e035      	b.n	8005fdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 f8d3 	bl	8006138 <I2C_WaitOnFlagUntilTimeout>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00d      	beq.n	8005fb4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fa6:	d103      	bne.n	8005fb0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e013      	b.n	8005fdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005fb4:	897b      	ldrh	r3, [r7, #10]
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	f043 0301 	orr.w	r3, r3, #1
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	6a3a      	ldr	r2, [r7, #32]
 8005fc8:	4906      	ldr	r1, [pc, #24]	; (8005fe4 <I2C_RequestMemoryRead+0x1cc>)
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 f90b 	bl	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	00010002 	.word	0x00010002

08005fe8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006000:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006002:	4b4b      	ldr	r3, [pc, #300]	; (8006130 <I2C_DMAAbort+0x148>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	08db      	lsrs	r3, r3, #3
 8006008:	4a4a      	ldr	r2, [pc, #296]	; (8006134 <I2C_DMAAbort+0x14c>)
 800600a:	fba2 2303 	umull	r2, r3, r2, r3
 800600e:	0a1a      	lsrs	r2, r3, #8
 8006010:	4613      	mov	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	00da      	lsls	r2, r3, #3
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d106      	bne.n	8006030 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	f043 0220 	orr.w	r2, r3, #32
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800602e:	e00a      	b.n	8006046 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3b01      	subs	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006044:	d0ea      	beq.n	800601c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006052:	2200      	movs	r2, #0
 8006054:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	2200      	movs	r2, #0
 8006064:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006074:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	2200      	movs	r2, #0
 800607a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006080:	2b00      	cmp	r3, #0
 8006082:	d003      	beq.n	800608c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006088:	2200      	movs	r2, #0
 800608a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	2200      	movs	r2, #0
 800609a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0201 	bic.w	r2, r2, #1
 80060aa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b60      	cmp	r3, #96	; 0x60
 80060b6:	d10e      	bne.n	80060d6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	2220      	movs	r2, #32
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2200      	movs	r2, #0
 80060cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80060ce:	6978      	ldr	r0, [r7, #20]
 80060d0:	f7fe fb4c 	bl	800476c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060d4:	e027      	b.n	8006126 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060d6:	7cfb      	ldrb	r3, [r7, #19]
 80060d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060dc:	2b28      	cmp	r3, #40	; 0x28
 80060de:	d117      	bne.n	8006110 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0201 	orr.w	r2, r2, #1
 80060ee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	2200      	movs	r2, #0
 8006104:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2228      	movs	r2, #40	; 0x28
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800610e:	e007      	b.n	8006120 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2220      	movs	r2, #32
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006120:	6978      	ldr	r0, [r7, #20]
 8006122:	f7fe fb19 	bl	8004758 <HAL_I2C_ErrorCallback>
}
 8006126:	bf00      	nop
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20000004 	.word	0x20000004
 8006134:	14f8b589 	.word	0x14f8b589

08006138 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	603b      	str	r3, [r7, #0]
 8006144:	4613      	mov	r3, r2
 8006146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006148:	e025      	b.n	8006196 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006150:	d021      	beq.n	8006196 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006152:	f7fc fc53 	bl	80029fc <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	429a      	cmp	r2, r3
 8006160:	d302      	bcc.n	8006168 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d116      	bne.n	8006196 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2220      	movs	r2, #32
 8006172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	f043 0220 	orr.w	r2, r3, #32
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e023      	b.n	80061de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	0c1b      	lsrs	r3, r3, #16
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b01      	cmp	r3, #1
 800619e:	d10d      	bne.n	80061bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	43da      	mvns	r2, r3
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	4013      	ands	r3, r2
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	bf0c      	ite	eq
 80061b2:	2301      	moveq	r3, #1
 80061b4:	2300      	movne	r3, #0
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	461a      	mov	r2, r3
 80061ba:	e00c      	b.n	80061d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	43da      	mvns	r2, r3
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4013      	ands	r3, r2
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	bf0c      	ite	eq
 80061ce:	2301      	moveq	r3, #1
 80061d0:	2300      	movne	r3, #0
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	461a      	mov	r2, r3
 80061d6:	79fb      	ldrb	r3, [r7, #7]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d0b6      	beq.n	800614a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	607a      	str	r2, [r7, #4]
 80061f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061f4:	e051      	b.n	800629a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006204:	d123      	bne.n	800624e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006214:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800621e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2220      	movs	r2, #32
 800622a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	f043 0204 	orr.w	r2, r3, #4
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e046      	b.n	80062dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006254:	d021      	beq.n	800629a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006256:	f7fc fbd1 	bl	80029fc <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	429a      	cmp	r2, r3
 8006264:	d302      	bcc.n	800626c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d116      	bne.n	800629a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	f043 0220 	orr.w	r2, r3, #32
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e020      	b.n	80062dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	0c1b      	lsrs	r3, r3, #16
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d10c      	bne.n	80062be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	43da      	mvns	r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4013      	ands	r3, r2
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	bf14      	ite	ne
 80062b6:	2301      	movne	r3, #1
 80062b8:	2300      	moveq	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	e00b      	b.n	80062d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	43da      	mvns	r2, r3
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4013      	ands	r3, r2
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	bf14      	ite	ne
 80062d0:	2301      	movne	r3, #1
 80062d2:	2300      	moveq	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d18d      	bne.n	80061f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062f0:	e02d      	b.n	800634e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f900 	bl	80064f8 <I2C_IsAcknowledgeFailed>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e02d      	b.n	800635e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006308:	d021      	beq.n	800634e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800630a:	f7fc fb77 	bl	80029fc <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	429a      	cmp	r2, r3
 8006318:	d302      	bcc.n	8006320 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d116      	bne.n	800634e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2220      	movs	r2, #32
 800632a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	f043 0220 	orr.w	r2, r3, #32
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e007      	b.n	800635e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006358:	2b80      	cmp	r3, #128	; 0x80
 800635a:	d1ca      	bne.n	80062f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006372:	e02d      	b.n	80063d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 f8bf 	bl	80064f8 <I2C_IsAcknowledgeFailed>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e02d      	b.n	80063e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800638a:	d021      	beq.n	80063d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800638c:	f7fc fb36 	bl	80029fc <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	429a      	cmp	r2, r3
 800639a:	d302      	bcc.n	80063a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d116      	bne.n	80063d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063bc:	f043 0220 	orr.w	r2, r3, #32
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e007      	b.n	80063e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	f003 0304 	and.w	r3, r3, #4
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d1ca      	bne.n	8006374 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80063f4:	4b13      	ldr	r3, [pc, #76]	; (8006444 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	08db      	lsrs	r3, r3, #3
 80063fa:	4a13      	ldr	r2, [pc, #76]	; (8006448 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80063fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006400:	0a1a      	lsrs	r2, r3, #8
 8006402:	4613      	mov	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3b01      	subs	r3, #1
 800640e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d107      	bne.n	8006426 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	f043 0220 	orr.w	r2, r3, #32
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e008      	b.n	8006438 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006434:	d0e9      	beq.n	800640a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	20000004 	.word	0x20000004
 8006448:	14f8b589 	.word	0x14f8b589

0800644c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006458:	e042      	b.n	80064e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b10      	cmp	r3, #16
 8006466:	d119      	bne.n	800649c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f06f 0210 	mvn.w	r2, #16
 8006470:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e029      	b.n	80064f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800649c:	f7fc faae 	bl	80029fc <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d302      	bcc.n	80064b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d116      	bne.n	80064e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064cc:	f043 0220 	orr.w	r2, r3, #32
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e007      	b.n	80064f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ea:	2b40      	cmp	r3, #64	; 0x40
 80064ec:	d1b5      	bne.n	800645a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800650a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800650e:	d11b      	bne.n	8006548 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006518:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006534:	f043 0204 	orr.w	r2, r3, #4
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e000      	b.n	800654a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006556:	b480      	push	{r7}
 8006558:	b083      	sub	sp, #12
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006562:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006566:	d103      	bne.n	8006570 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800656e:	e007      	b.n	8006580 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006578:	d102      	bne.n	8006580 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2208      	movs	r2, #8
 800657e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e267      	b.n	8006a6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d075      	beq.n	8006696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065aa:	4b88      	ldr	r3, [pc, #544]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f003 030c 	and.w	r3, r3, #12
 80065b2:	2b04      	cmp	r3, #4
 80065b4:	d00c      	beq.n	80065d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065b6:	4b85      	ldr	r3, [pc, #532]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065be:	2b08      	cmp	r3, #8
 80065c0:	d112      	bne.n	80065e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065c2:	4b82      	ldr	r3, [pc, #520]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065ce:	d10b      	bne.n	80065e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065d0:	4b7e      	ldr	r3, [pc, #504]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d05b      	beq.n	8006694 <HAL_RCC_OscConfig+0x108>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d157      	bne.n	8006694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e242      	b.n	8006a6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f0:	d106      	bne.n	8006600 <HAL_RCC_OscConfig+0x74>
 80065f2:	4b76      	ldr	r3, [pc, #472]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a75      	ldr	r2, [pc, #468]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 80065f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	e01d      	b.n	800663c <HAL_RCC_OscConfig+0xb0>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006608:	d10c      	bne.n	8006624 <HAL_RCC_OscConfig+0x98>
 800660a:	4b70      	ldr	r3, [pc, #448]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a6f      	ldr	r2, [pc, #444]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 8006610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	4b6d      	ldr	r3, [pc, #436]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a6c      	ldr	r2, [pc, #432]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 800661c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	e00b      	b.n	800663c <HAL_RCC_OscConfig+0xb0>
 8006624:	4b69      	ldr	r3, [pc, #420]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a68      	ldr	r2, [pc, #416]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 800662a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800662e:	6013      	str	r3, [r2, #0]
 8006630:	4b66      	ldr	r3, [pc, #408]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a65      	ldr	r2, [pc, #404]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 8006636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800663a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d013      	beq.n	800666c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006644:	f7fc f9da 	bl	80029fc <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800664c:	f7fc f9d6 	bl	80029fc <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b64      	cmp	r3, #100	; 0x64
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e207      	b.n	8006a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800665e:	4b5b      	ldr	r3, [pc, #364]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0f0      	beq.n	800664c <HAL_RCC_OscConfig+0xc0>
 800666a:	e014      	b.n	8006696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800666c:	f7fc f9c6 	bl	80029fc <HAL_GetTick>
 8006670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006672:	e008      	b.n	8006686 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006674:	f7fc f9c2 	bl	80029fc <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b64      	cmp	r3, #100	; 0x64
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e1f3      	b.n	8006a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006686:	4b51      	ldr	r3, [pc, #324]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1f0      	bne.n	8006674 <HAL_RCC_OscConfig+0xe8>
 8006692:	e000      	b.n	8006696 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d063      	beq.n	800676a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066a2:	4b4a      	ldr	r3, [pc, #296]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 030c 	and.w	r3, r3, #12
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00b      	beq.n	80066c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066ae:	4b47      	ldr	r3, [pc, #284]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066b6:	2b08      	cmp	r3, #8
 80066b8:	d11c      	bne.n	80066f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066ba:	4b44      	ldr	r3, [pc, #272]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d116      	bne.n	80066f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066c6:	4b41      	ldr	r3, [pc, #260]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d005      	beq.n	80066de <HAL_RCC_OscConfig+0x152>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d001      	beq.n	80066de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e1c7      	b.n	8006a6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066de:	4b3b      	ldr	r3, [pc, #236]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	00db      	lsls	r3, r3, #3
 80066ec:	4937      	ldr	r1, [pc, #220]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066f2:	e03a      	b.n	800676a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d020      	beq.n	800673e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066fc:	4b34      	ldr	r3, [pc, #208]	; (80067d0 <HAL_RCC_OscConfig+0x244>)
 80066fe:	2201      	movs	r2, #1
 8006700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006702:	f7fc f97b 	bl	80029fc <HAL_GetTick>
 8006706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006708:	e008      	b.n	800671c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800670a:	f7fc f977 	bl	80029fc <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e1a8      	b.n	8006a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800671c:	4b2b      	ldr	r3, [pc, #172]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d0f0      	beq.n	800670a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006728:	4b28      	ldr	r3, [pc, #160]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	4925      	ldr	r1, [pc, #148]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 8006738:	4313      	orrs	r3, r2
 800673a:	600b      	str	r3, [r1, #0]
 800673c:	e015      	b.n	800676a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800673e:	4b24      	ldr	r3, [pc, #144]	; (80067d0 <HAL_RCC_OscConfig+0x244>)
 8006740:	2200      	movs	r2, #0
 8006742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006744:	f7fc f95a 	bl	80029fc <HAL_GetTick>
 8006748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800674a:	e008      	b.n	800675e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800674c:	f7fc f956 	bl	80029fc <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	2b02      	cmp	r3, #2
 8006758:	d901      	bls.n	800675e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e187      	b.n	8006a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800675e:	4b1b      	ldr	r3, [pc, #108]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1f0      	bne.n	800674c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0308 	and.w	r3, r3, #8
 8006772:	2b00      	cmp	r3, #0
 8006774:	d036      	beq.n	80067e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d016      	beq.n	80067ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800677e:	4b15      	ldr	r3, [pc, #84]	; (80067d4 <HAL_RCC_OscConfig+0x248>)
 8006780:	2201      	movs	r2, #1
 8006782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006784:	f7fc f93a 	bl	80029fc <HAL_GetTick>
 8006788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800678a:	e008      	b.n	800679e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800678c:	f7fc f936 	bl	80029fc <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	2b02      	cmp	r3, #2
 8006798:	d901      	bls.n	800679e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e167      	b.n	8006a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800679e:	4b0b      	ldr	r3, [pc, #44]	; (80067cc <HAL_RCC_OscConfig+0x240>)
 80067a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0f0      	beq.n	800678c <HAL_RCC_OscConfig+0x200>
 80067aa:	e01b      	b.n	80067e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067ac:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <HAL_RCC_OscConfig+0x248>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067b2:	f7fc f923 	bl	80029fc <HAL_GetTick>
 80067b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067b8:	e00e      	b.n	80067d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067ba:	f7fc f91f 	bl	80029fc <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d907      	bls.n	80067d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e150      	b.n	8006a6e <HAL_RCC_OscConfig+0x4e2>
 80067cc:	40023800 	.word	0x40023800
 80067d0:	42470000 	.word	0x42470000
 80067d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067d8:	4b88      	ldr	r3, [pc, #544]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 80067da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1ea      	bne.n	80067ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 8097 	beq.w	8006920 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067f2:	2300      	movs	r3, #0
 80067f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067f6:	4b81      	ldr	r3, [pc, #516]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10f      	bne.n	8006822 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006802:	2300      	movs	r3, #0
 8006804:	60bb      	str	r3, [r7, #8]
 8006806:	4b7d      	ldr	r3, [pc, #500]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	4a7c      	ldr	r2, [pc, #496]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 800680c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006810:	6413      	str	r3, [r2, #64]	; 0x40
 8006812:	4b7a      	ldr	r3, [pc, #488]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800681a:	60bb      	str	r3, [r7, #8]
 800681c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800681e:	2301      	movs	r3, #1
 8006820:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006822:	4b77      	ldr	r3, [pc, #476]	; (8006a00 <HAL_RCC_OscConfig+0x474>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800682a:	2b00      	cmp	r3, #0
 800682c:	d118      	bne.n	8006860 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800682e:	4b74      	ldr	r3, [pc, #464]	; (8006a00 <HAL_RCC_OscConfig+0x474>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a73      	ldr	r2, [pc, #460]	; (8006a00 <HAL_RCC_OscConfig+0x474>)
 8006834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800683a:	f7fc f8df 	bl	80029fc <HAL_GetTick>
 800683e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006840:	e008      	b.n	8006854 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006842:	f7fc f8db 	bl	80029fc <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b02      	cmp	r3, #2
 800684e:	d901      	bls.n	8006854 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e10c      	b.n	8006a6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006854:	4b6a      	ldr	r3, [pc, #424]	; (8006a00 <HAL_RCC_OscConfig+0x474>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0f0      	beq.n	8006842 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d106      	bne.n	8006876 <HAL_RCC_OscConfig+0x2ea>
 8006868:	4b64      	ldr	r3, [pc, #400]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 800686a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686c:	4a63      	ldr	r2, [pc, #396]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 800686e:	f043 0301 	orr.w	r3, r3, #1
 8006872:	6713      	str	r3, [r2, #112]	; 0x70
 8006874:	e01c      	b.n	80068b0 <HAL_RCC_OscConfig+0x324>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	2b05      	cmp	r3, #5
 800687c:	d10c      	bne.n	8006898 <HAL_RCC_OscConfig+0x30c>
 800687e:	4b5f      	ldr	r3, [pc, #380]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 8006880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006882:	4a5e      	ldr	r2, [pc, #376]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 8006884:	f043 0304 	orr.w	r3, r3, #4
 8006888:	6713      	str	r3, [r2, #112]	; 0x70
 800688a:	4b5c      	ldr	r3, [pc, #368]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 800688c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688e:	4a5b      	ldr	r2, [pc, #364]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 8006890:	f043 0301 	orr.w	r3, r3, #1
 8006894:	6713      	str	r3, [r2, #112]	; 0x70
 8006896:	e00b      	b.n	80068b0 <HAL_RCC_OscConfig+0x324>
 8006898:	4b58      	ldr	r3, [pc, #352]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 800689a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689c:	4a57      	ldr	r2, [pc, #348]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 800689e:	f023 0301 	bic.w	r3, r3, #1
 80068a2:	6713      	str	r3, [r2, #112]	; 0x70
 80068a4:	4b55      	ldr	r3, [pc, #340]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 80068a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a8:	4a54      	ldr	r2, [pc, #336]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 80068aa:	f023 0304 	bic.w	r3, r3, #4
 80068ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d015      	beq.n	80068e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b8:	f7fc f8a0 	bl	80029fc <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068be:	e00a      	b.n	80068d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068c0:	f7fc f89c 	bl	80029fc <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e0cb      	b.n	8006a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068d6:	4b49      	ldr	r3, [pc, #292]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 80068d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0ee      	beq.n	80068c0 <HAL_RCC_OscConfig+0x334>
 80068e2:	e014      	b.n	800690e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068e4:	f7fc f88a 	bl	80029fc <HAL_GetTick>
 80068e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068ea:	e00a      	b.n	8006902 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068ec:	f7fc f886 	bl	80029fc <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d901      	bls.n	8006902 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e0b5      	b.n	8006a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006902:	4b3e      	ldr	r3, [pc, #248]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 8006904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1ee      	bne.n	80068ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800690e:	7dfb      	ldrb	r3, [r7, #23]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d105      	bne.n	8006920 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006914:	4b39      	ldr	r3, [pc, #228]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 8006916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006918:	4a38      	ldr	r2, [pc, #224]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 800691a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800691e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 80a1 	beq.w	8006a6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800692a:	4b34      	ldr	r3, [pc, #208]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f003 030c 	and.w	r3, r3, #12
 8006932:	2b08      	cmp	r3, #8
 8006934:	d05c      	beq.n	80069f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	2b02      	cmp	r3, #2
 800693c:	d141      	bne.n	80069c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800693e:	4b31      	ldr	r3, [pc, #196]	; (8006a04 <HAL_RCC_OscConfig+0x478>)
 8006940:	2200      	movs	r2, #0
 8006942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006944:	f7fc f85a 	bl	80029fc <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800694a:	e008      	b.n	800695e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800694c:	f7fc f856 	bl	80029fc <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b02      	cmp	r3, #2
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e087      	b.n	8006a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800695e:	4b27      	ldr	r3, [pc, #156]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1f0      	bne.n	800694c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69da      	ldr	r2, [r3, #28]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	431a      	orrs	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	019b      	lsls	r3, r3, #6
 800697a:	431a      	orrs	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006980:	085b      	lsrs	r3, r3, #1
 8006982:	3b01      	subs	r3, #1
 8006984:	041b      	lsls	r3, r3, #16
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698c:	061b      	lsls	r3, r3, #24
 800698e:	491b      	ldr	r1, [pc, #108]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 8006990:	4313      	orrs	r3, r2
 8006992:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006994:	4b1b      	ldr	r3, [pc, #108]	; (8006a04 <HAL_RCC_OscConfig+0x478>)
 8006996:	2201      	movs	r2, #1
 8006998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800699a:	f7fc f82f 	bl	80029fc <HAL_GetTick>
 800699e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069a0:	e008      	b.n	80069b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069a2:	f7fc f82b 	bl	80029fc <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d901      	bls.n	80069b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e05c      	b.n	8006a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069b4:	4b11      	ldr	r3, [pc, #68]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0f0      	beq.n	80069a2 <HAL_RCC_OscConfig+0x416>
 80069c0:	e054      	b.n	8006a6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069c2:	4b10      	ldr	r3, [pc, #64]	; (8006a04 <HAL_RCC_OscConfig+0x478>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c8:	f7fc f818 	bl	80029fc <HAL_GetTick>
 80069cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ce:	e008      	b.n	80069e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069d0:	f7fc f814 	bl	80029fc <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e045      	b.n	8006a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069e2:	4b06      	ldr	r3, [pc, #24]	; (80069fc <HAL_RCC_OscConfig+0x470>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1f0      	bne.n	80069d0 <HAL_RCC_OscConfig+0x444>
 80069ee:	e03d      	b.n	8006a6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d107      	bne.n	8006a08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e038      	b.n	8006a6e <HAL_RCC_OscConfig+0x4e2>
 80069fc:	40023800 	.word	0x40023800
 8006a00:	40007000 	.word	0x40007000
 8006a04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a08:	4b1b      	ldr	r3, [pc, #108]	; (8006a78 <HAL_RCC_OscConfig+0x4ec>)
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d028      	beq.n	8006a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d121      	bne.n	8006a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d11a      	bne.n	8006a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a38:	4013      	ands	r3, r2
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d111      	bne.n	8006a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4e:	085b      	lsrs	r3, r3, #1
 8006a50:	3b01      	subs	r3, #1
 8006a52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d107      	bne.n	8006a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d001      	beq.n	8006a6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e000      	b.n	8006a6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3718      	adds	r7, #24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	40023800 	.word	0x40023800

08006a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e0cc      	b.n	8006c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a90:	4b68      	ldr	r3, [pc, #416]	; (8006c34 <HAL_RCC_ClockConfig+0x1b8>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0307 	and.w	r3, r3, #7
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d90c      	bls.n	8006ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a9e:	4b65      	ldr	r3, [pc, #404]	; (8006c34 <HAL_RCC_ClockConfig+0x1b8>)
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aa6:	4b63      	ldr	r3, [pc, #396]	; (8006c34 <HAL_RCC_ClockConfig+0x1b8>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0307 	and.w	r3, r3, #7
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d001      	beq.n	8006ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e0b8      	b.n	8006c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d020      	beq.n	8006b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0304 	and.w	r3, r3, #4
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d005      	beq.n	8006adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ad0:	4b59      	ldr	r3, [pc, #356]	; (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	4a58      	ldr	r2, [pc, #352]	; (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ada:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0308 	and.w	r3, r3, #8
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d005      	beq.n	8006af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ae8:	4b53      	ldr	r3, [pc, #332]	; (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	4a52      	ldr	r2, [pc, #328]	; (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006af4:	4b50      	ldr	r3, [pc, #320]	; (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	494d      	ldr	r1, [pc, #308]	; (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d044      	beq.n	8006b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d107      	bne.n	8006b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b1a:	4b47      	ldr	r3, [pc, #284]	; (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d119      	bne.n	8006b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e07f      	b.n	8006c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d003      	beq.n	8006b3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d107      	bne.n	8006b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b3a:	4b3f      	ldr	r3, [pc, #252]	; (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d109      	bne.n	8006b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e06f      	b.n	8006c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b4a:	4b3b      	ldr	r3, [pc, #236]	; (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e067      	b.n	8006c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b5a:	4b37      	ldr	r3, [pc, #220]	; (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f023 0203 	bic.w	r2, r3, #3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	4934      	ldr	r1, [pc, #208]	; (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b6c:	f7fb ff46 	bl	80029fc <HAL_GetTick>
 8006b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b72:	e00a      	b.n	8006b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b74:	f7fb ff42 	bl	80029fc <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e04f      	b.n	8006c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b8a:	4b2b      	ldr	r3, [pc, #172]	; (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 020c 	and.w	r2, r3, #12
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d1eb      	bne.n	8006b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b9c:	4b25      	ldr	r3, [pc, #148]	; (8006c34 <HAL_RCC_ClockConfig+0x1b8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	683a      	ldr	r2, [r7, #0]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d20c      	bcs.n	8006bc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006baa:	4b22      	ldr	r3, [pc, #136]	; (8006c34 <HAL_RCC_ClockConfig+0x1b8>)
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	b2d2      	uxtb	r2, r2
 8006bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bb2:	4b20      	ldr	r3, [pc, #128]	; (8006c34 <HAL_RCC_ClockConfig+0x1b8>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0307 	and.w	r3, r3, #7
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d001      	beq.n	8006bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e032      	b.n	8006c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0304 	and.w	r3, r3, #4
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d008      	beq.n	8006be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bd0:	4b19      	ldr	r3, [pc, #100]	; (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	4916      	ldr	r1, [pc, #88]	; (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0308 	and.w	r3, r3, #8
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d009      	beq.n	8006c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bee:	4b12      	ldr	r3, [pc, #72]	; (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	490e      	ldr	r1, [pc, #56]	; (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c02:	f000 f821 	bl	8006c48 <HAL_RCC_GetSysClockFreq>
 8006c06:	4602      	mov	r2, r0
 8006c08:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	091b      	lsrs	r3, r3, #4
 8006c0e:	f003 030f 	and.w	r3, r3, #15
 8006c12:	490a      	ldr	r1, [pc, #40]	; (8006c3c <HAL_RCC_ClockConfig+0x1c0>)
 8006c14:	5ccb      	ldrb	r3, [r1, r3]
 8006c16:	fa22 f303 	lsr.w	r3, r2, r3
 8006c1a:	4a09      	ldr	r2, [pc, #36]	; (8006c40 <HAL_RCC_ClockConfig+0x1c4>)
 8006c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c1e:	4b09      	ldr	r3, [pc, #36]	; (8006c44 <HAL_RCC_ClockConfig+0x1c8>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fb fa8c 	bl	8002140 <HAL_InitTick>

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	40023c00 	.word	0x40023c00
 8006c38:	40023800 	.word	0x40023800
 8006c3c:	0800e660 	.word	0x0800e660
 8006c40:	20000004 	.word	0x20000004
 8006c44:	20000008 	.word	0x20000008

08006c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c4c:	b094      	sub	sp, #80	; 0x50
 8006c4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	647b      	str	r3, [r7, #68]	; 0x44
 8006c54:	2300      	movs	r3, #0
 8006c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c58:	2300      	movs	r3, #0
 8006c5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c60:	4b79      	ldr	r3, [pc, #484]	; (8006e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f003 030c 	and.w	r3, r3, #12
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d00d      	beq.n	8006c88 <HAL_RCC_GetSysClockFreq+0x40>
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	f200 80e1 	bhi.w	8006e34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d002      	beq.n	8006c7c <HAL_RCC_GetSysClockFreq+0x34>
 8006c76:	2b04      	cmp	r3, #4
 8006c78:	d003      	beq.n	8006c82 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c7a:	e0db      	b.n	8006e34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c7c:	4b73      	ldr	r3, [pc, #460]	; (8006e4c <HAL_RCC_GetSysClockFreq+0x204>)
 8006c7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006c80:	e0db      	b.n	8006e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c82:	4b73      	ldr	r3, [pc, #460]	; (8006e50 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c86:	e0d8      	b.n	8006e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c88:	4b6f      	ldr	r3, [pc, #444]	; (8006e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c92:	4b6d      	ldr	r3, [pc, #436]	; (8006e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d063      	beq.n	8006d66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c9e:	4b6a      	ldr	r3, [pc, #424]	; (8006e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	099b      	lsrs	r3, r3, #6
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ca8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb0:	633b      	str	r3, [r7, #48]	; 0x30
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8006cb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006cba:	4622      	mov	r2, r4
 8006cbc:	462b      	mov	r3, r5
 8006cbe:	f04f 0000 	mov.w	r0, #0
 8006cc2:	f04f 0100 	mov.w	r1, #0
 8006cc6:	0159      	lsls	r1, r3, #5
 8006cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ccc:	0150      	lsls	r0, r2, #5
 8006cce:	4602      	mov	r2, r0
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	4621      	mov	r1, r4
 8006cd4:	1a51      	subs	r1, r2, r1
 8006cd6:	6139      	str	r1, [r7, #16]
 8006cd8:	4629      	mov	r1, r5
 8006cda:	eb63 0301 	sbc.w	r3, r3, r1
 8006cde:	617b      	str	r3, [r7, #20]
 8006ce0:	f04f 0200 	mov.w	r2, #0
 8006ce4:	f04f 0300 	mov.w	r3, #0
 8006ce8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cec:	4659      	mov	r1, fp
 8006cee:	018b      	lsls	r3, r1, #6
 8006cf0:	4651      	mov	r1, sl
 8006cf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cf6:	4651      	mov	r1, sl
 8006cf8:	018a      	lsls	r2, r1, #6
 8006cfa:	4651      	mov	r1, sl
 8006cfc:	ebb2 0801 	subs.w	r8, r2, r1
 8006d00:	4659      	mov	r1, fp
 8006d02:	eb63 0901 	sbc.w	r9, r3, r1
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	f04f 0300 	mov.w	r3, #0
 8006d0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d1a:	4690      	mov	r8, r2
 8006d1c:	4699      	mov	r9, r3
 8006d1e:	4623      	mov	r3, r4
 8006d20:	eb18 0303 	adds.w	r3, r8, r3
 8006d24:	60bb      	str	r3, [r7, #8]
 8006d26:	462b      	mov	r3, r5
 8006d28:	eb49 0303 	adc.w	r3, r9, r3
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	f04f 0200 	mov.w	r2, #0
 8006d32:	f04f 0300 	mov.w	r3, #0
 8006d36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	024b      	lsls	r3, r1, #9
 8006d3e:	4621      	mov	r1, r4
 8006d40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d44:	4621      	mov	r1, r4
 8006d46:	024a      	lsls	r2, r1, #9
 8006d48:	4610      	mov	r0, r2
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d4e:	2200      	movs	r2, #0
 8006d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d58:	f7f9 ffae 	bl	8000cb8 <__aeabi_uldivmod>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4613      	mov	r3, r2
 8006d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d64:	e058      	b.n	8006e18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d66:	4b38      	ldr	r3, [pc, #224]	; (8006e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	099b      	lsrs	r3, r3, #6
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	4618      	mov	r0, r3
 8006d70:	4611      	mov	r1, r2
 8006d72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d76:	623b      	str	r3, [r7, #32]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d80:	4642      	mov	r2, r8
 8006d82:	464b      	mov	r3, r9
 8006d84:	f04f 0000 	mov.w	r0, #0
 8006d88:	f04f 0100 	mov.w	r1, #0
 8006d8c:	0159      	lsls	r1, r3, #5
 8006d8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d92:	0150      	lsls	r0, r2, #5
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	4641      	mov	r1, r8
 8006d9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d9e:	4649      	mov	r1, r9
 8006da0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006da4:	f04f 0200 	mov.w	r2, #0
 8006da8:	f04f 0300 	mov.w	r3, #0
 8006dac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006db0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006db4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006db8:	ebb2 040a 	subs.w	r4, r2, sl
 8006dbc:	eb63 050b 	sbc.w	r5, r3, fp
 8006dc0:	f04f 0200 	mov.w	r2, #0
 8006dc4:	f04f 0300 	mov.w	r3, #0
 8006dc8:	00eb      	lsls	r3, r5, #3
 8006dca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dce:	00e2      	lsls	r2, r4, #3
 8006dd0:	4614      	mov	r4, r2
 8006dd2:	461d      	mov	r5, r3
 8006dd4:	4643      	mov	r3, r8
 8006dd6:	18e3      	adds	r3, r4, r3
 8006dd8:	603b      	str	r3, [r7, #0]
 8006dda:	464b      	mov	r3, r9
 8006ddc:	eb45 0303 	adc.w	r3, r5, r3
 8006de0:	607b      	str	r3, [r7, #4]
 8006de2:	f04f 0200 	mov.w	r2, #0
 8006de6:	f04f 0300 	mov.w	r3, #0
 8006dea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006dee:	4629      	mov	r1, r5
 8006df0:	028b      	lsls	r3, r1, #10
 8006df2:	4621      	mov	r1, r4
 8006df4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006df8:	4621      	mov	r1, r4
 8006dfa:	028a      	lsls	r2, r1, #10
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e02:	2200      	movs	r2, #0
 8006e04:	61bb      	str	r3, [r7, #24]
 8006e06:	61fa      	str	r2, [r7, #28]
 8006e08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e0c:	f7f9 ff54 	bl	8000cb8 <__aeabi_uldivmod>
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	4613      	mov	r3, r2
 8006e16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e18:	4b0b      	ldr	r3, [pc, #44]	; (8006e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	0c1b      	lsrs	r3, r3, #16
 8006e1e:	f003 0303 	and.w	r3, r3, #3
 8006e22:	3301      	adds	r3, #1
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006e28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e32:	e002      	b.n	8006e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e34:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <HAL_RCC_GetSysClockFreq+0x204>)
 8006e36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3750      	adds	r7, #80	; 0x50
 8006e40:	46bd      	mov	sp, r7
 8006e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e46:	bf00      	nop
 8006e48:	40023800 	.word	0x40023800
 8006e4c:	00f42400 	.word	0x00f42400
 8006e50:	007a1200 	.word	0x007a1200

08006e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e58:	4b03      	ldr	r3, [pc, #12]	; (8006e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	20000004 	.word	0x20000004

08006e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e70:	f7ff fff0 	bl	8006e54 <HAL_RCC_GetHCLKFreq>
 8006e74:	4602      	mov	r2, r0
 8006e76:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	0a9b      	lsrs	r3, r3, #10
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	4903      	ldr	r1, [pc, #12]	; (8006e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e82:	5ccb      	ldrb	r3, [r1, r3]
 8006e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	40023800 	.word	0x40023800
 8006e90:	0800e670 	.word	0x0800e670

08006e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e98:	f7ff ffdc 	bl	8006e54 <HAL_RCC_GetHCLKFreq>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	4b05      	ldr	r3, [pc, #20]	; (8006eb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	0b5b      	lsrs	r3, r3, #13
 8006ea4:	f003 0307 	and.w	r3, r3, #7
 8006ea8:	4903      	ldr	r1, [pc, #12]	; (8006eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006eaa:	5ccb      	ldrb	r3, [r1, r3]
 8006eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	40023800 	.word	0x40023800
 8006eb8:	0800e670 	.word	0x0800e670

08006ebc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	220f      	movs	r2, #15
 8006eca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ecc:	4b12      	ldr	r3, [pc, #72]	; (8006f18 <HAL_RCC_GetClockConfig+0x5c>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f003 0203 	and.w	r2, r3, #3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ed8:	4b0f      	ldr	r3, [pc, #60]	; (8006f18 <HAL_RCC_GetClockConfig+0x5c>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006ee4:	4b0c      	ldr	r3, [pc, #48]	; (8006f18 <HAL_RCC_GetClockConfig+0x5c>)
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006ef0:	4b09      	ldr	r3, [pc, #36]	; (8006f18 <HAL_RCC_GetClockConfig+0x5c>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	08db      	lsrs	r3, r3, #3
 8006ef6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006efe:	4b07      	ldr	r3, [pc, #28]	; (8006f1c <HAL_RCC_GetClockConfig+0x60>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0207 	and.w	r2, r3, #7
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	601a      	str	r2, [r3, #0]
}
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	40023800 	.word	0x40023800
 8006f1c:	40023c00 	.word	0x40023c00

08006f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e041      	b.n	8006fb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d106      	bne.n	8006f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f839 	bl	8006fbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3304      	adds	r3, #4
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	4610      	mov	r0, r2
 8006f60:	f000 fb8c 	bl	800767c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b083      	sub	sp, #12
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006fc6:	bf00      	nop
 8006fc8:	370c      	adds	r7, #12
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
	...

08006fd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d001      	beq.n	8006fec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e044      	b.n	8007076 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0201 	orr.w	r2, r2, #1
 8007002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a1e      	ldr	r2, [pc, #120]	; (8007084 <HAL_TIM_Base_Start_IT+0xb0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d018      	beq.n	8007040 <HAL_TIM_Base_Start_IT+0x6c>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007016:	d013      	beq.n	8007040 <HAL_TIM_Base_Start_IT+0x6c>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a1a      	ldr	r2, [pc, #104]	; (8007088 <HAL_TIM_Base_Start_IT+0xb4>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d00e      	beq.n	8007040 <HAL_TIM_Base_Start_IT+0x6c>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a19      	ldr	r2, [pc, #100]	; (800708c <HAL_TIM_Base_Start_IT+0xb8>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d009      	beq.n	8007040 <HAL_TIM_Base_Start_IT+0x6c>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a17      	ldr	r2, [pc, #92]	; (8007090 <HAL_TIM_Base_Start_IT+0xbc>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d004      	beq.n	8007040 <HAL_TIM_Base_Start_IT+0x6c>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a16      	ldr	r2, [pc, #88]	; (8007094 <HAL_TIM_Base_Start_IT+0xc0>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d111      	bne.n	8007064 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b06      	cmp	r3, #6
 8007050:	d010      	beq.n	8007074 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f042 0201 	orr.w	r2, r2, #1
 8007060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007062:	e007      	b.n	8007074 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f042 0201 	orr.w	r2, r2, #1
 8007072:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	40010000 	.word	0x40010000
 8007088:	40000400 	.word	0x40000400
 800708c:	40000800 	.word	0x40000800
 8007090:	40000c00 	.word	0x40000c00
 8007094:	40014000 	.word	0x40014000

08007098 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e041      	b.n	800712e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d106      	bne.n	80070c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7fb fab0 	bl	8002624 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	3304      	adds	r3, #4
 80070d4:	4619      	mov	r1, r3
 80070d6:	4610      	mov	r0, r2
 80070d8:	f000 fad0 	bl	800767c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
	...

08007138 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d109      	bne.n	800715c <HAL_TIM_PWM_Start+0x24>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b01      	cmp	r3, #1
 8007152:	bf14      	ite	ne
 8007154:	2301      	movne	r3, #1
 8007156:	2300      	moveq	r3, #0
 8007158:	b2db      	uxtb	r3, r3
 800715a:	e022      	b.n	80071a2 <HAL_TIM_PWM_Start+0x6a>
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2b04      	cmp	r3, #4
 8007160:	d109      	bne.n	8007176 <HAL_TIM_PWM_Start+0x3e>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b01      	cmp	r3, #1
 800716c:	bf14      	ite	ne
 800716e:	2301      	movne	r3, #1
 8007170:	2300      	moveq	r3, #0
 8007172:	b2db      	uxtb	r3, r3
 8007174:	e015      	b.n	80071a2 <HAL_TIM_PWM_Start+0x6a>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b08      	cmp	r3, #8
 800717a:	d109      	bne.n	8007190 <HAL_TIM_PWM_Start+0x58>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b01      	cmp	r3, #1
 8007186:	bf14      	ite	ne
 8007188:	2301      	movne	r3, #1
 800718a:	2300      	moveq	r3, #0
 800718c:	b2db      	uxtb	r3, r3
 800718e:	e008      	b.n	80071a2 <HAL_TIM_PWM_Start+0x6a>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b01      	cmp	r3, #1
 800719a:	bf14      	ite	ne
 800719c:	2301      	movne	r3, #1
 800719e:	2300      	moveq	r3, #0
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e068      	b.n	800727c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d104      	bne.n	80071ba <HAL_TIM_PWM_Start+0x82>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071b8:	e013      	b.n	80071e2 <HAL_TIM_PWM_Start+0xaa>
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b04      	cmp	r3, #4
 80071be:	d104      	bne.n	80071ca <HAL_TIM_PWM_Start+0x92>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2202      	movs	r2, #2
 80071c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071c8:	e00b      	b.n	80071e2 <HAL_TIM_PWM_Start+0xaa>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b08      	cmp	r3, #8
 80071ce:	d104      	bne.n	80071da <HAL_TIM_PWM_Start+0xa2>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071d8:	e003      	b.n	80071e2 <HAL_TIM_PWM_Start+0xaa>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2202      	movs	r2, #2
 80071de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2201      	movs	r2, #1
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 fc52 	bl	8007a94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a23      	ldr	r2, [pc, #140]	; (8007284 <HAL_TIM_PWM_Start+0x14c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d107      	bne.n	800720a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007208:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a1d      	ldr	r2, [pc, #116]	; (8007284 <HAL_TIM_PWM_Start+0x14c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d018      	beq.n	8007246 <HAL_TIM_PWM_Start+0x10e>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800721c:	d013      	beq.n	8007246 <HAL_TIM_PWM_Start+0x10e>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a19      	ldr	r2, [pc, #100]	; (8007288 <HAL_TIM_PWM_Start+0x150>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d00e      	beq.n	8007246 <HAL_TIM_PWM_Start+0x10e>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a17      	ldr	r2, [pc, #92]	; (800728c <HAL_TIM_PWM_Start+0x154>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d009      	beq.n	8007246 <HAL_TIM_PWM_Start+0x10e>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a16      	ldr	r2, [pc, #88]	; (8007290 <HAL_TIM_PWM_Start+0x158>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d004      	beq.n	8007246 <HAL_TIM_PWM_Start+0x10e>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a14      	ldr	r2, [pc, #80]	; (8007294 <HAL_TIM_PWM_Start+0x15c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d111      	bne.n	800726a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f003 0307 	and.w	r3, r3, #7
 8007250:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b06      	cmp	r3, #6
 8007256:	d010      	beq.n	800727a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0201 	orr.w	r2, r2, #1
 8007266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007268:	e007      	b.n	800727a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f042 0201 	orr.w	r2, r2, #1
 8007278:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	40010000 	.word	0x40010000
 8007288:	40000400 	.word	0x40000400
 800728c:	40000800 	.word	0x40000800
 8007290:	40000c00 	.word	0x40000c00
 8007294:	40014000 	.word	0x40014000

08007298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d122      	bne.n	80072f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d11b      	bne.n	80072f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f06f 0202 	mvn.w	r2, #2
 80072c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	f003 0303 	and.w	r3, r3, #3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f9b0 	bl	8007640 <HAL_TIM_IC_CaptureCallback>
 80072e0:	e005      	b.n	80072ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f9a2 	bl	800762c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f9b3 	bl	8007654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	f003 0304 	and.w	r3, r3, #4
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d122      	bne.n	8007348 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f003 0304 	and.w	r3, r3, #4
 800730c:	2b04      	cmp	r3, #4
 800730e:	d11b      	bne.n	8007348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f06f 0204 	mvn.w	r2, #4
 8007318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2202      	movs	r2, #2
 800731e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f986 	bl	8007640 <HAL_TIM_IC_CaptureCallback>
 8007334:	e005      	b.n	8007342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f978 	bl	800762c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f989 	bl	8007654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	f003 0308 	and.w	r3, r3, #8
 8007352:	2b08      	cmp	r3, #8
 8007354:	d122      	bne.n	800739c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f003 0308 	and.w	r3, r3, #8
 8007360:	2b08      	cmp	r3, #8
 8007362:	d11b      	bne.n	800739c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f06f 0208 	mvn.w	r2, #8
 800736c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2204      	movs	r2, #4
 8007372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	f003 0303 	and.w	r3, r3, #3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f95c 	bl	8007640 <HAL_TIM_IC_CaptureCallback>
 8007388:	e005      	b.n	8007396 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f94e 	bl	800762c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f95f 	bl	8007654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	f003 0310 	and.w	r3, r3, #16
 80073a6:	2b10      	cmp	r3, #16
 80073a8:	d122      	bne.n	80073f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f003 0310 	and.w	r3, r3, #16
 80073b4:	2b10      	cmp	r3, #16
 80073b6:	d11b      	bne.n	80073f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f06f 0210 	mvn.w	r2, #16
 80073c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2208      	movs	r2, #8
 80073c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f932 	bl	8007640 <HAL_TIM_IC_CaptureCallback>
 80073dc:	e005      	b.n	80073ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f924 	bl	800762c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f935 	bl	8007654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d10e      	bne.n	800741c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b01      	cmp	r3, #1
 800740a:	d107      	bne.n	800741c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f06f 0201 	mvn.w	r2, #1
 8007414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7fa fd52 	bl	8001ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007426:	2b80      	cmp	r3, #128	; 0x80
 8007428:	d10e      	bne.n	8007448 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007434:	2b80      	cmp	r3, #128	; 0x80
 8007436:	d107      	bne.n	8007448 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fbc4 	bl	8007bd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007452:	2b40      	cmp	r3, #64	; 0x40
 8007454:	d10e      	bne.n	8007474 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007460:	2b40      	cmp	r3, #64	; 0x40
 8007462:	d107      	bne.n	8007474 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800746c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f8fa 	bl	8007668 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	f003 0320 	and.w	r3, r3, #32
 800747e:	2b20      	cmp	r3, #32
 8007480:	d10e      	bne.n	80074a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f003 0320 	and.w	r3, r3, #32
 800748c:	2b20      	cmp	r3, #32
 800748e:	d107      	bne.n	80074a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f06f 0220 	mvn.w	r2, #32
 8007498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fb8e 	bl	8007bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074a0:	bf00      	nop
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d101      	bne.n	80074c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80074c2:	2302      	movs	r3, #2
 80074c4:	e0ae      	b.n	8007624 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b0c      	cmp	r3, #12
 80074d2:	f200 809f 	bhi.w	8007614 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80074d6:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074dc:	08007511 	.word	0x08007511
 80074e0:	08007615 	.word	0x08007615
 80074e4:	08007615 	.word	0x08007615
 80074e8:	08007615 	.word	0x08007615
 80074ec:	08007551 	.word	0x08007551
 80074f0:	08007615 	.word	0x08007615
 80074f4:	08007615 	.word	0x08007615
 80074f8:	08007615 	.word	0x08007615
 80074fc:	08007593 	.word	0x08007593
 8007500:	08007615 	.word	0x08007615
 8007504:	08007615 	.word	0x08007615
 8007508:	08007615 	.word	0x08007615
 800750c:	080075d3 	.word	0x080075d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68b9      	ldr	r1, [r7, #8]
 8007516:	4618      	mov	r0, r3
 8007518:	f000 f930 	bl	800777c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	699a      	ldr	r2, [r3, #24]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f042 0208 	orr.w	r2, r2, #8
 800752a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	699a      	ldr	r2, [r3, #24]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 0204 	bic.w	r2, r2, #4
 800753a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6999      	ldr	r1, [r3, #24]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	691a      	ldr	r2, [r3, #16]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	619a      	str	r2, [r3, #24]
      break;
 800754e:	e064      	b.n	800761a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68b9      	ldr	r1, [r7, #8]
 8007556:	4618      	mov	r0, r3
 8007558:	f000 f976 	bl	8007848 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699a      	ldr	r2, [r3, #24]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800756a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699a      	ldr	r2, [r3, #24]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800757a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6999      	ldr	r1, [r3, #24]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	021a      	lsls	r2, r3, #8
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	619a      	str	r2, [r3, #24]
      break;
 8007590:	e043      	b.n	800761a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68b9      	ldr	r1, [r7, #8]
 8007598:	4618      	mov	r0, r3
 800759a:	f000 f9c1 	bl	8007920 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69da      	ldr	r2, [r3, #28]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f042 0208 	orr.w	r2, r2, #8
 80075ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	69da      	ldr	r2, [r3, #28]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0204 	bic.w	r2, r2, #4
 80075bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69d9      	ldr	r1, [r3, #28]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	691a      	ldr	r2, [r3, #16]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	61da      	str	r2, [r3, #28]
      break;
 80075d0:	e023      	b.n	800761a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68b9      	ldr	r1, [r7, #8]
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 fa0b 	bl	80079f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	69da      	ldr	r2, [r3, #28]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69da      	ldr	r2, [r3, #28]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69d9      	ldr	r1, [r3, #28]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	021a      	lsls	r2, r3, #8
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	61da      	str	r2, [r3, #28]
      break;
 8007612:	e002      	b.n	800761a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	75fb      	strb	r3, [r7, #23]
      break;
 8007618:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007622:	7dfb      	ldrb	r3, [r7, #23]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3718      	adds	r7, #24
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800765c:	bf00      	nop
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a34      	ldr	r2, [pc, #208]	; (8007760 <TIM_Base_SetConfig+0xe4>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d00f      	beq.n	80076b4 <TIM_Base_SetConfig+0x38>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800769a:	d00b      	beq.n	80076b4 <TIM_Base_SetConfig+0x38>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a31      	ldr	r2, [pc, #196]	; (8007764 <TIM_Base_SetConfig+0xe8>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d007      	beq.n	80076b4 <TIM_Base_SetConfig+0x38>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a30      	ldr	r2, [pc, #192]	; (8007768 <TIM_Base_SetConfig+0xec>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d003      	beq.n	80076b4 <TIM_Base_SetConfig+0x38>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a2f      	ldr	r2, [pc, #188]	; (800776c <TIM_Base_SetConfig+0xf0>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d108      	bne.n	80076c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a25      	ldr	r2, [pc, #148]	; (8007760 <TIM_Base_SetConfig+0xe4>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d01b      	beq.n	8007706 <TIM_Base_SetConfig+0x8a>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076d4:	d017      	beq.n	8007706 <TIM_Base_SetConfig+0x8a>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a22      	ldr	r2, [pc, #136]	; (8007764 <TIM_Base_SetConfig+0xe8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d013      	beq.n	8007706 <TIM_Base_SetConfig+0x8a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a21      	ldr	r2, [pc, #132]	; (8007768 <TIM_Base_SetConfig+0xec>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d00f      	beq.n	8007706 <TIM_Base_SetConfig+0x8a>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a20      	ldr	r2, [pc, #128]	; (800776c <TIM_Base_SetConfig+0xf0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00b      	beq.n	8007706 <TIM_Base_SetConfig+0x8a>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a1f      	ldr	r2, [pc, #124]	; (8007770 <TIM_Base_SetConfig+0xf4>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d007      	beq.n	8007706 <TIM_Base_SetConfig+0x8a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a1e      	ldr	r2, [pc, #120]	; (8007774 <TIM_Base_SetConfig+0xf8>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d003      	beq.n	8007706 <TIM_Base_SetConfig+0x8a>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a1d      	ldr	r2, [pc, #116]	; (8007778 <TIM_Base_SetConfig+0xfc>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d108      	bne.n	8007718 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800770c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	4313      	orrs	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	689a      	ldr	r2, [r3, #8]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a08      	ldr	r2, [pc, #32]	; (8007760 <TIM_Base_SetConfig+0xe4>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d103      	bne.n	800774c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	691a      	ldr	r2, [r3, #16]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	615a      	str	r2, [r3, #20]
}
 8007752:	bf00      	nop
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	40010000 	.word	0x40010000
 8007764:	40000400 	.word	0x40000400
 8007768:	40000800 	.word	0x40000800
 800776c:	40000c00 	.word	0x40000c00
 8007770:	40014000 	.word	0x40014000
 8007774:	40014400 	.word	0x40014400
 8007778:	40014800 	.word	0x40014800

0800777c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	f023 0201 	bic.w	r2, r3, #1
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f023 0303 	bic.w	r3, r3, #3
 80077b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f023 0302 	bic.w	r3, r3, #2
 80077c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a1c      	ldr	r2, [pc, #112]	; (8007844 <TIM_OC1_SetConfig+0xc8>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d10c      	bne.n	80077f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f023 0308 	bic.w	r3, r3, #8
 80077de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f023 0304 	bic.w	r3, r3, #4
 80077f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a13      	ldr	r2, [pc, #76]	; (8007844 <TIM_OC1_SetConfig+0xc8>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d111      	bne.n	800781e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	4313      	orrs	r3, r2
 8007812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	4313      	orrs	r3, r2
 800781c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	621a      	str	r2, [r3, #32]
}
 8007838:	bf00      	nop
 800783a:	371c      	adds	r7, #28
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	40010000 	.word	0x40010000

08007848 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	f023 0210 	bic.w	r2, r3, #16
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800787e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	021b      	lsls	r3, r3, #8
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	4313      	orrs	r3, r2
 800788a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f023 0320 	bic.w	r3, r3, #32
 8007892:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	011b      	lsls	r3, r3, #4
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	4313      	orrs	r3, r2
 800789e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a1e      	ldr	r2, [pc, #120]	; (800791c <TIM_OC2_SetConfig+0xd4>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d10d      	bne.n	80078c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a15      	ldr	r2, [pc, #84]	; (800791c <TIM_OC2_SetConfig+0xd4>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d113      	bne.n	80078f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	621a      	str	r2, [r3, #32]
}
 800790e:	bf00      	nop
 8007910:	371c      	adds	r7, #28
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	40010000 	.word	0x40010000

08007920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800794e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f023 0303 	bic.w	r3, r3, #3
 8007956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	4313      	orrs	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	021b      	lsls	r3, r3, #8
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	4313      	orrs	r3, r2
 8007974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a1d      	ldr	r2, [pc, #116]	; (80079f0 <TIM_OC3_SetConfig+0xd0>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d10d      	bne.n	800799a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007984:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	021b      	lsls	r3, r3, #8
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	4313      	orrs	r3, r2
 8007990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a14      	ldr	r2, [pc, #80]	; (80079f0 <TIM_OC3_SetConfig+0xd0>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d113      	bne.n	80079ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	011b      	lsls	r3, r3, #4
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	011b      	lsls	r3, r3, #4
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	621a      	str	r2, [r3, #32]
}
 80079e4:	bf00      	nop
 80079e6:	371c      	adds	r7, #28
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	40010000 	.word	0x40010000

080079f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	021b      	lsls	r3, r3, #8
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	031b      	lsls	r3, r3, #12
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a10      	ldr	r2, [pc, #64]	; (8007a90 <TIM_OC4_SetConfig+0x9c>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d109      	bne.n	8007a68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	695b      	ldr	r3, [r3, #20]
 8007a60:	019b      	lsls	r3, r3, #6
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	621a      	str	r2, [r3, #32]
}
 8007a82:	bf00      	nop
 8007a84:	371c      	adds	r7, #28
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	40010000 	.word	0x40010000

08007a94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b087      	sub	sp, #28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f003 031f 	and.w	r3, r3, #31
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8007aac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6a1a      	ldr	r2, [r3, #32]
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	43db      	mvns	r3, r3
 8007ab6:	401a      	ands	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6a1a      	ldr	r2, [r3, #32]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	f003 031f 	and.w	r3, r3, #31
 8007ac6:	6879      	ldr	r1, [r7, #4]
 8007ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8007acc:	431a      	orrs	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	621a      	str	r2, [r3, #32]
}
 8007ad2:	bf00      	nop
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
	...

08007ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d101      	bne.n	8007af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007af4:	2302      	movs	r3, #2
 8007af6:	e050      	b.n	8007b9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2202      	movs	r2, #2
 8007b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a1c      	ldr	r2, [pc, #112]	; (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d018      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b44:	d013      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a18      	ldr	r2, [pc, #96]	; (8007bac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d00e      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a16      	ldr	r2, [pc, #88]	; (8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d009      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a15      	ldr	r2, [pc, #84]	; (8007bb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d004      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a13      	ldr	r2, [pc, #76]	; (8007bb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d10c      	bne.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	40010000 	.word	0x40010000
 8007bac:	40000400 	.word	0x40000400
 8007bb0:	40000800 	.word	0x40000800
 8007bb4:	40000c00 	.word	0x40000c00
 8007bb8:	40014000 	.word	0x40014000

08007bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d101      	bne.n	8007bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e03f      	b.n	8007c76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d106      	bne.n	8007c10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7fa fdf2 	bl	80027f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2224      	movs	r2, #36	; 0x24
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fddf 	bl	80087ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	691a      	ldr	r2, [r3, #16]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	695a      	ldr	r2, [r3, #20]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68da      	ldr	r2, [r3, #12]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2220      	movs	r2, #32
 8007c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b08a      	sub	sp, #40	; 0x28
 8007c82:	af02      	add	r7, sp, #8
 8007c84:	60f8      	str	r0, [r7, #12]
 8007c86:	60b9      	str	r1, [r7, #8]
 8007c88:	603b      	str	r3, [r7, #0]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b20      	cmp	r3, #32
 8007c9c:	d17c      	bne.n	8007d98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <HAL_UART_Transmit+0x2c>
 8007ca4:	88fb      	ldrh	r3, [r7, #6]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e075      	b.n	8007d9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d101      	bne.n	8007cbc <HAL_UART_Transmit+0x3e>
 8007cb8:	2302      	movs	r3, #2
 8007cba:	e06e      	b.n	8007d9a <HAL_UART_Transmit+0x11c>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2221      	movs	r2, #33	; 0x21
 8007cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cd2:	f7fa fe93 	bl	80029fc <HAL_GetTick>
 8007cd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	88fa      	ldrh	r2, [r7, #6]
 8007cdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	88fa      	ldrh	r2, [r7, #6]
 8007ce2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cec:	d108      	bne.n	8007d00 <HAL_UART_Transmit+0x82>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d104      	bne.n	8007d00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	61bb      	str	r3, [r7, #24]
 8007cfe:	e003      	b.n	8007d08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d04:	2300      	movs	r3, #0
 8007d06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007d10:	e02a      	b.n	8007d68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	2180      	movs	r1, #128	; 0x80
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 fb1f 	bl	8008360 <UART_WaitOnFlagUntilTimeout>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e036      	b.n	8007d9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10b      	bne.n	8007d4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	881b      	ldrh	r3, [r3, #0]
 8007d36:	461a      	mov	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	3302      	adds	r3, #2
 8007d46:	61bb      	str	r3, [r7, #24]
 8007d48:	e007      	b.n	8007d5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	781a      	ldrb	r2, [r3, #0]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	3301      	adds	r3, #1
 8007d58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	3b01      	subs	r3, #1
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1cf      	bne.n	8007d12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	2140      	movs	r1, #64	; 0x40
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 faef 	bl	8008360 <UART_WaitOnFlagUntilTimeout>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e006      	b.n	8007d9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2220      	movs	r2, #32
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	e000      	b.n	8007d9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007d98:	2302      	movs	r3, #2
  }
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3720      	adds	r7, #32
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b084      	sub	sp, #16
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	4613      	mov	r3, r2
 8007dae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b20      	cmp	r3, #32
 8007dba:	d11d      	bne.n	8007df8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d002      	beq.n	8007dc8 <HAL_UART_Receive_IT+0x26>
 8007dc2:	88fb      	ldrh	r3, [r7, #6]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e016      	b.n	8007dfa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d101      	bne.n	8007dda <HAL_UART_Receive_IT+0x38>
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	e00f      	b.n	8007dfa <HAL_UART_Receive_IT+0x58>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007de8:	88fb      	ldrh	r3, [r7, #6]
 8007dea:	461a      	mov	r2, r3
 8007dec:	68b9      	ldr	r1, [r7, #8]
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 fb24 	bl	800843c <UART_Start_Receive_IT>
 8007df4:	4603      	mov	r3, r0
 8007df6:	e000      	b.n	8007dfa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007df8:	2302      	movs	r3, #2
  }
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b0ba      	sub	sp, #232	; 0xe8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007e30:	2300      	movs	r3, #0
 8007e32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e3a:	f003 030f 	and.w	r3, r3, #15
 8007e3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007e42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10f      	bne.n	8007e6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e4e:	f003 0320 	and.w	r3, r3, #32
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d009      	beq.n	8007e6a <HAL_UART_IRQHandler+0x66>
 8007e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e5a:	f003 0320 	and.w	r3, r3, #32
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d003      	beq.n	8007e6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fc07 	bl	8008676 <UART_Receive_IT>
      return;
 8007e68:	e256      	b.n	8008318 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f000 80de 	beq.w	8008030 <HAL_UART_IRQHandler+0x22c>
 8007e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d106      	bne.n	8007e8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 80d1 	beq.w	8008030 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00b      	beq.n	8007eb2 <HAL_UART_IRQHandler+0xae>
 8007e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d005      	beq.n	8007eb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eaa:	f043 0201 	orr.w	r2, r3, #1
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb6:	f003 0304 	and.w	r3, r3, #4
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00b      	beq.n	8007ed6 <HAL_UART_IRQHandler+0xd2>
 8007ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d005      	beq.n	8007ed6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ece:	f043 0202 	orr.w	r2, r3, #2
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00b      	beq.n	8007efa <HAL_UART_IRQHandler+0xf6>
 8007ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d005      	beq.n	8007efa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef2:	f043 0204 	orr.w	r2, r3, #4
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007efe:	f003 0308 	and.w	r3, r3, #8
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d011      	beq.n	8007f2a <HAL_UART_IRQHandler+0x126>
 8007f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f0a:	f003 0320 	and.w	r3, r3, #32
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d105      	bne.n	8007f1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d005      	beq.n	8007f2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f22:	f043 0208 	orr.w	r2, r3, #8
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f000 81ed 	beq.w	800830e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f38:	f003 0320 	and.w	r3, r3, #32
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d008      	beq.n	8007f52 <HAL_UART_IRQHandler+0x14e>
 8007f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f44:	f003 0320 	and.w	r3, r3, #32
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d002      	beq.n	8007f52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fb92 	bl	8008676 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5c:	2b40      	cmp	r3, #64	; 0x40
 8007f5e:	bf0c      	ite	eq
 8007f60:	2301      	moveq	r3, #1
 8007f62:	2300      	movne	r3, #0
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6e:	f003 0308 	and.w	r3, r3, #8
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d103      	bne.n	8007f7e <HAL_UART_IRQHandler+0x17a>
 8007f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d04f      	beq.n	800801e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fa9a 	bl	80084b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f8e:	2b40      	cmp	r3, #64	; 0x40
 8007f90:	d141      	bne.n	8008016 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	3314      	adds	r3, #20
 8007f98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fa0:	e853 3f00 	ldrex	r3, [r3]
 8007fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007fa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3314      	adds	r3, #20
 8007fba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007fbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007fc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007fca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007fce:	e841 2300 	strex	r3, r2, [r1]
 8007fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007fd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1d9      	bne.n	8007f92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d013      	beq.n	800800e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fea:	4a7d      	ldr	r2, [pc, #500]	; (80081e0 <HAL_UART_IRQHandler+0x3dc>)
 8007fec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fa fe84 	bl	8002d00 <HAL_DMA_Abort_IT>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d016      	beq.n	800802c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008008:	4610      	mov	r0, r2
 800800a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800c:	e00e      	b.n	800802c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f990 	bl	8008334 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008014:	e00a      	b.n	800802c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f98c 	bl	8008334 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800801c:	e006      	b.n	800802c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f988 	bl	8008334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800802a:	e170      	b.n	800830e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800802c:	bf00      	nop
    return;
 800802e:	e16e      	b.n	800830e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008034:	2b01      	cmp	r3, #1
 8008036:	f040 814a 	bne.w	80082ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800803a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800803e:	f003 0310 	and.w	r3, r3, #16
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 8143 	beq.w	80082ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800804c:	f003 0310 	and.w	r3, r3, #16
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 813c 	beq.w	80082ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008056:	2300      	movs	r3, #0
 8008058:	60bb      	str	r3, [r7, #8]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	60bb      	str	r3, [r7, #8]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	60bb      	str	r3, [r7, #8]
 800806a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008076:	2b40      	cmp	r3, #64	; 0x40
 8008078:	f040 80b4 	bne.w	80081e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008088:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 8140 	beq.w	8008312 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008096:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800809a:	429a      	cmp	r2, r3
 800809c:	f080 8139 	bcs.w	8008312 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080b2:	f000 8088 	beq.w	80081c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	330c      	adds	r3, #12
 80080bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080c4:	e853 3f00 	ldrex	r3, [r3]
 80080c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80080cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	330c      	adds	r3, #12
 80080de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80080e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80080e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80080ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80080f2:	e841 2300 	strex	r3, r2, [r1]
 80080f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80080fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1d9      	bne.n	80080b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3314      	adds	r3, #20
 8008108:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800810c:	e853 3f00 	ldrex	r3, [r3]
 8008110:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008114:	f023 0301 	bic.w	r3, r3, #1
 8008118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3314      	adds	r3, #20
 8008122:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008126:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800812a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800812e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008132:	e841 2300 	strex	r3, r2, [r1]
 8008136:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e1      	bne.n	8008102 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3314      	adds	r3, #20
 8008144:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008148:	e853 3f00 	ldrex	r3, [r3]
 800814c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800814e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3314      	adds	r3, #20
 800815e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008162:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008164:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008168:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e3      	bne.n	800813e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	330c      	adds	r3, #12
 800818a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800818e:	e853 3f00 	ldrex	r3, [r3]
 8008192:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008196:	f023 0310 	bic.w	r3, r3, #16
 800819a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	330c      	adds	r3, #12
 80081a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80081a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80081aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081b0:	e841 2300 	strex	r3, r2, [r1]
 80081b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1e3      	bne.n	8008184 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fa fd2d 	bl	8002c20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	4619      	mov	r1, r3
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f8b6 	bl	8008348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80081dc:	e099      	b.n	8008312 <HAL_UART_IRQHandler+0x50e>
 80081de:	bf00      	nop
 80081e0:	0800857f 	.word	0x0800857f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 808b 	beq.w	8008316 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 8086 	beq.w	8008316 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	330c      	adds	r3, #12
 8008210:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008214:	e853 3f00 	ldrex	r3, [r3]
 8008218:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800821a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800821c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008220:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	330c      	adds	r3, #12
 800822a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800822e:	647a      	str	r2, [r7, #68]	; 0x44
 8008230:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008232:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008234:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008236:	e841 2300 	strex	r3, r2, [r1]
 800823a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800823c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1e3      	bne.n	800820a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3314      	adds	r3, #20
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	623b      	str	r3, [r7, #32]
   return(result);
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	f023 0301 	bic.w	r3, r3, #1
 8008258:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3314      	adds	r3, #20
 8008262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008266:	633a      	str	r2, [r7, #48]	; 0x30
 8008268:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800826c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e3      	bne.n	8008242 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2220      	movs	r2, #32
 800827e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	330c      	adds	r3, #12
 800828e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	e853 3f00 	ldrex	r3, [r3]
 8008296:	60fb      	str	r3, [r7, #12]
   return(result);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 0310 	bic.w	r3, r3, #16
 800829e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	330c      	adds	r3, #12
 80082a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80082ac:	61fa      	str	r2, [r7, #28]
 80082ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b0:	69b9      	ldr	r1, [r7, #24]
 80082b2:	69fa      	ldr	r2, [r7, #28]
 80082b4:	e841 2300 	strex	r3, r2, [r1]
 80082b8:	617b      	str	r3, [r7, #20]
   return(result);
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e3      	bne.n	8008288 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082c4:	4619      	mov	r1, r3
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f83e 	bl	8008348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082cc:	e023      	b.n	8008316 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80082ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d009      	beq.n	80082ee <HAL_UART_IRQHandler+0x4ea>
 80082da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f95d 	bl	80085a6 <UART_Transmit_IT>
    return;
 80082ec:	e014      	b.n	8008318 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00e      	beq.n	8008318 <HAL_UART_IRQHandler+0x514>
 80082fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008302:	2b00      	cmp	r3, #0
 8008304:	d008      	beq.n	8008318 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f99d 	bl	8008646 <UART_EndTransmit_IT>
    return;
 800830c:	e004      	b.n	8008318 <HAL_UART_IRQHandler+0x514>
    return;
 800830e:	bf00      	nop
 8008310:	e002      	b.n	8008318 <HAL_UART_IRQHandler+0x514>
      return;
 8008312:	bf00      	nop
 8008314:	e000      	b.n	8008318 <HAL_UART_IRQHandler+0x514>
      return;
 8008316:	bf00      	nop
  }
}
 8008318:	37e8      	adds	r7, #232	; 0xe8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop

08008320 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b090      	sub	sp, #64	; 0x40
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	603b      	str	r3, [r7, #0]
 800836c:	4613      	mov	r3, r2
 800836e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008370:	e050      	b.n	8008414 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008378:	d04c      	beq.n	8008414 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800837a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800837c:	2b00      	cmp	r3, #0
 800837e:	d007      	beq.n	8008390 <UART_WaitOnFlagUntilTimeout+0x30>
 8008380:	f7fa fb3c 	bl	80029fc <HAL_GetTick>
 8008384:	4602      	mov	r2, r0
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800838c:	429a      	cmp	r2, r3
 800838e:	d241      	bcs.n	8008414 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	330c      	adds	r3, #12
 8008396:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839a:	e853 3f00 	ldrex	r3, [r3]
 800839e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	330c      	adds	r3, #12
 80083ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083b0:	637a      	str	r2, [r7, #52]	; 0x34
 80083b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083b8:	e841 2300 	strex	r3, r2, [r1]
 80083bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1e5      	bne.n	8008390 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	3314      	adds	r3, #20
 80083ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	e853 3f00 	ldrex	r3, [r3]
 80083d2:	613b      	str	r3, [r7, #16]
   return(result);
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f023 0301 	bic.w	r3, r3, #1
 80083da:	63bb      	str	r3, [r7, #56]	; 0x38
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	3314      	adds	r3, #20
 80083e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083e4:	623a      	str	r2, [r7, #32]
 80083e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e8:	69f9      	ldr	r1, [r7, #28]
 80083ea:	6a3a      	ldr	r2, [r7, #32]
 80083ec:	e841 2300 	strex	r3, r2, [r1]
 80083f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1e5      	bne.n	80083c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2220      	movs	r2, #32
 80083fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2220      	movs	r2, #32
 8008404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e00f      	b.n	8008434 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	4013      	ands	r3, r2
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	429a      	cmp	r2, r3
 8008422:	bf0c      	ite	eq
 8008424:	2301      	moveq	r3, #1
 8008426:	2300      	movne	r3, #0
 8008428:	b2db      	uxtb	r3, r3
 800842a:	461a      	mov	r2, r3
 800842c:	79fb      	ldrb	r3, [r7, #7]
 800842e:	429a      	cmp	r2, r3
 8008430:	d09f      	beq.n	8008372 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3740      	adds	r7, #64	; 0x40
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	4613      	mov	r3, r2
 8008448:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	88fa      	ldrh	r2, [r7, #6]
 8008454:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	88fa      	ldrh	r2, [r7, #6]
 800845a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2222      	movs	r2, #34	; 0x22
 8008466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d007      	beq.n	800848a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68da      	ldr	r2, [r3, #12]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008488:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	695a      	ldr	r2, [r3, #20]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f042 0201 	orr.w	r2, r2, #1
 8008498:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68da      	ldr	r2, [r3, #12]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f042 0220 	orr.w	r2, r2, #32
 80084a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b095      	sub	sp, #84	; 0x54
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	330c      	adds	r3, #12
 80084c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ca:	e853 3f00 	ldrex	r3, [r3]
 80084ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	330c      	adds	r3, #12
 80084de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084e0:	643a      	str	r2, [r7, #64]	; 0x40
 80084e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084e8:	e841 2300 	strex	r3, r2, [r1]
 80084ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1e5      	bne.n	80084c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3314      	adds	r3, #20
 80084fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fc:	6a3b      	ldr	r3, [r7, #32]
 80084fe:	e853 3f00 	ldrex	r3, [r3]
 8008502:	61fb      	str	r3, [r7, #28]
   return(result);
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	f023 0301 	bic.w	r3, r3, #1
 800850a:	64bb      	str	r3, [r7, #72]	; 0x48
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3314      	adds	r3, #20
 8008512:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008514:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008516:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800851a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800851c:	e841 2300 	strex	r3, r2, [r1]
 8008520:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1e5      	bne.n	80084f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852c:	2b01      	cmp	r3, #1
 800852e:	d119      	bne.n	8008564 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	330c      	adds	r3, #12
 8008536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	e853 3f00 	ldrex	r3, [r3]
 800853e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	f023 0310 	bic.w	r3, r3, #16
 8008546:	647b      	str	r3, [r7, #68]	; 0x44
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	330c      	adds	r3, #12
 800854e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008550:	61ba      	str	r2, [r7, #24]
 8008552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008554:	6979      	ldr	r1, [r7, #20]
 8008556:	69ba      	ldr	r2, [r7, #24]
 8008558:	e841 2300 	strex	r3, r2, [r1]
 800855c:	613b      	str	r3, [r7, #16]
   return(result);
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1e5      	bne.n	8008530 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2220      	movs	r2, #32
 8008568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008572:	bf00      	nop
 8008574:	3754      	adds	r7, #84	; 0x54
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b084      	sub	sp, #16
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f7ff fecb 	bl	8008334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800859e:	bf00      	nop
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b085      	sub	sp, #20
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b21      	cmp	r3, #33	; 0x21
 80085b8:	d13e      	bne.n	8008638 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085c2:	d114      	bne.n	80085ee <UART_Transmit_IT+0x48>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d110      	bne.n	80085ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a1b      	ldr	r3, [r3, #32]
 80085d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	881b      	ldrh	r3, [r3, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	1c9a      	adds	r2, r3, #2
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	621a      	str	r2, [r3, #32]
 80085ec:	e008      	b.n	8008600 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	1c59      	adds	r1, r3, #1
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	6211      	str	r1, [r2, #32]
 80085f8:	781a      	ldrb	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008604:	b29b      	uxth	r3, r3
 8008606:	3b01      	subs	r3, #1
 8008608:	b29b      	uxth	r3, r3
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	4619      	mov	r1, r3
 800860e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008610:	2b00      	cmp	r3, #0
 8008612:	d10f      	bne.n	8008634 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68da      	ldr	r2, [r3, #12]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008622:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68da      	ldr	r2, [r3, #12]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008632:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	e000      	b.n	800863a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008638:	2302      	movs	r3, #2
  }
}
 800863a:	4618      	mov	r0, r3
 800863c:	3714      	adds	r7, #20
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b082      	sub	sp, #8
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68da      	ldr	r2, [r3, #12]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800865c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2220      	movs	r2, #32
 8008662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7ff fe5a 	bl	8008320 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b08c      	sub	sp, #48	; 0x30
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b22      	cmp	r3, #34	; 0x22
 8008688:	f040 80ab 	bne.w	80087e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008694:	d117      	bne.n	80086c6 <UART_Receive_IT+0x50>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d113      	bne.n	80086c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800869e:	2300      	movs	r3, #0
 80086a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086be:	1c9a      	adds	r2, r3, #2
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	629a      	str	r2, [r3, #40]	; 0x28
 80086c4:	e026      	b.n	8008714 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80086cc:	2300      	movs	r3, #0
 80086ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086d8:	d007      	beq.n	80086ea <UART_Receive_IT+0x74>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10a      	bne.n	80086f8 <UART_Receive_IT+0x82>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d106      	bne.n	80086f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f4:	701a      	strb	r2, [r3, #0]
 80086f6:	e008      	b.n	800870a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008704:	b2da      	uxtb	r2, r3
 8008706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008708:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870e:	1c5a      	adds	r2, r3, #1
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008718:	b29b      	uxth	r3, r3
 800871a:	3b01      	subs	r3, #1
 800871c:	b29b      	uxth	r3, r3
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	4619      	mov	r1, r3
 8008722:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008724:	2b00      	cmp	r3, #0
 8008726:	d15a      	bne.n	80087de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68da      	ldr	r2, [r3, #12]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f022 0220 	bic.w	r2, r2, #32
 8008736:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68da      	ldr	r2, [r3, #12]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008746:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	695a      	ldr	r2, [r3, #20]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f022 0201 	bic.w	r2, r2, #1
 8008756:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2220      	movs	r2, #32
 800875c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008764:	2b01      	cmp	r3, #1
 8008766:	d135      	bne.n	80087d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	330c      	adds	r3, #12
 8008774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	e853 3f00 	ldrex	r3, [r3]
 800877c:	613b      	str	r3, [r7, #16]
   return(result);
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	f023 0310 	bic.w	r3, r3, #16
 8008784:	627b      	str	r3, [r7, #36]	; 0x24
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	330c      	adds	r3, #12
 800878c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800878e:	623a      	str	r2, [r7, #32]
 8008790:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008792:	69f9      	ldr	r1, [r7, #28]
 8008794:	6a3a      	ldr	r2, [r7, #32]
 8008796:	e841 2300 	strex	r3, r2, [r1]
 800879a:	61bb      	str	r3, [r7, #24]
   return(result);
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1e5      	bne.n	800876e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 0310 	and.w	r3, r3, #16
 80087ac:	2b10      	cmp	r3, #16
 80087ae:	d10a      	bne.n	80087c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087b0:	2300      	movs	r3, #0
 80087b2:	60fb      	str	r3, [r7, #12]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	60fb      	str	r3, [r7, #12]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f7ff fdbb 	bl	8008348 <HAL_UARTEx_RxEventCallback>
 80087d2:	e002      	b.n	80087da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7f9 f9cf 	bl	8001b78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	e002      	b.n	80087e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	e000      	b.n	80087e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80087e2:	2302      	movs	r3, #2
  }
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3730      	adds	r7, #48	; 0x30
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087f0:	b0c0      	sub	sp, #256	; 0x100
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008808:	68d9      	ldr	r1, [r3, #12]
 800880a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	ea40 0301 	orr.w	r3, r0, r1
 8008814:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800881a:	689a      	ldr	r2, [r3, #8]
 800881c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	431a      	orrs	r2, r3
 8008824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	431a      	orrs	r2, r3
 800882c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	4313      	orrs	r3, r2
 8008834:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008844:	f021 010c 	bic.w	r1, r1, #12
 8008848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008852:	430b      	orrs	r3, r1
 8008854:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008866:	6999      	ldr	r1, [r3, #24]
 8008868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	ea40 0301 	orr.w	r3, r0, r1
 8008872:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	4b8f      	ldr	r3, [pc, #572]	; (8008ab8 <UART_SetConfig+0x2cc>)
 800887c:	429a      	cmp	r2, r3
 800887e:	d005      	beq.n	800888c <UART_SetConfig+0xa0>
 8008880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	4b8d      	ldr	r3, [pc, #564]	; (8008abc <UART_SetConfig+0x2d0>)
 8008888:	429a      	cmp	r2, r3
 800888a:	d104      	bne.n	8008896 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800888c:	f7fe fb02 	bl	8006e94 <HAL_RCC_GetPCLK2Freq>
 8008890:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008894:	e003      	b.n	800889e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008896:	f7fe fae9 	bl	8006e6c <HAL_RCC_GetPCLK1Freq>
 800889a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800889e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088a2:	69db      	ldr	r3, [r3, #28]
 80088a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088a8:	f040 810c 	bne.w	8008ac4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80088ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088b0:	2200      	movs	r2, #0
 80088b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80088b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80088ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80088be:	4622      	mov	r2, r4
 80088c0:	462b      	mov	r3, r5
 80088c2:	1891      	adds	r1, r2, r2
 80088c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80088c6:	415b      	adcs	r3, r3
 80088c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80088ce:	4621      	mov	r1, r4
 80088d0:	eb12 0801 	adds.w	r8, r2, r1
 80088d4:	4629      	mov	r1, r5
 80088d6:	eb43 0901 	adc.w	r9, r3, r1
 80088da:	f04f 0200 	mov.w	r2, #0
 80088de:	f04f 0300 	mov.w	r3, #0
 80088e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80088e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80088ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80088ee:	4690      	mov	r8, r2
 80088f0:	4699      	mov	r9, r3
 80088f2:	4623      	mov	r3, r4
 80088f4:	eb18 0303 	adds.w	r3, r8, r3
 80088f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088fc:	462b      	mov	r3, r5
 80088fe:	eb49 0303 	adc.w	r3, r9, r3
 8008902:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008912:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008916:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800891a:	460b      	mov	r3, r1
 800891c:	18db      	adds	r3, r3, r3
 800891e:	653b      	str	r3, [r7, #80]	; 0x50
 8008920:	4613      	mov	r3, r2
 8008922:	eb42 0303 	adc.w	r3, r2, r3
 8008926:	657b      	str	r3, [r7, #84]	; 0x54
 8008928:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800892c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008930:	f7f8 f9c2 	bl	8000cb8 <__aeabi_uldivmod>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	4b61      	ldr	r3, [pc, #388]	; (8008ac0 <UART_SetConfig+0x2d4>)
 800893a:	fba3 2302 	umull	r2, r3, r3, r2
 800893e:	095b      	lsrs	r3, r3, #5
 8008940:	011c      	lsls	r4, r3, #4
 8008942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008946:	2200      	movs	r2, #0
 8008948:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800894c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008950:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008954:	4642      	mov	r2, r8
 8008956:	464b      	mov	r3, r9
 8008958:	1891      	adds	r1, r2, r2
 800895a:	64b9      	str	r1, [r7, #72]	; 0x48
 800895c:	415b      	adcs	r3, r3
 800895e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008960:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008964:	4641      	mov	r1, r8
 8008966:	eb12 0a01 	adds.w	sl, r2, r1
 800896a:	4649      	mov	r1, r9
 800896c:	eb43 0b01 	adc.w	fp, r3, r1
 8008970:	f04f 0200 	mov.w	r2, #0
 8008974:	f04f 0300 	mov.w	r3, #0
 8008978:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800897c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008980:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008984:	4692      	mov	sl, r2
 8008986:	469b      	mov	fp, r3
 8008988:	4643      	mov	r3, r8
 800898a:	eb1a 0303 	adds.w	r3, sl, r3
 800898e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008992:	464b      	mov	r3, r9
 8008994:	eb4b 0303 	adc.w	r3, fp, r3
 8008998:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800899c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80089a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80089ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80089b0:	460b      	mov	r3, r1
 80089b2:	18db      	adds	r3, r3, r3
 80089b4:	643b      	str	r3, [r7, #64]	; 0x40
 80089b6:	4613      	mov	r3, r2
 80089b8:	eb42 0303 	adc.w	r3, r2, r3
 80089bc:	647b      	str	r3, [r7, #68]	; 0x44
 80089be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80089c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80089c6:	f7f8 f977 	bl	8000cb8 <__aeabi_uldivmod>
 80089ca:	4602      	mov	r2, r0
 80089cc:	460b      	mov	r3, r1
 80089ce:	4611      	mov	r1, r2
 80089d0:	4b3b      	ldr	r3, [pc, #236]	; (8008ac0 <UART_SetConfig+0x2d4>)
 80089d2:	fba3 2301 	umull	r2, r3, r3, r1
 80089d6:	095b      	lsrs	r3, r3, #5
 80089d8:	2264      	movs	r2, #100	; 0x64
 80089da:	fb02 f303 	mul.w	r3, r2, r3
 80089de:	1acb      	subs	r3, r1, r3
 80089e0:	00db      	lsls	r3, r3, #3
 80089e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80089e6:	4b36      	ldr	r3, [pc, #216]	; (8008ac0 <UART_SetConfig+0x2d4>)
 80089e8:	fba3 2302 	umull	r2, r3, r3, r2
 80089ec:	095b      	lsrs	r3, r3, #5
 80089ee:	005b      	lsls	r3, r3, #1
 80089f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80089f4:	441c      	add	r4, r3
 80089f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089fa:	2200      	movs	r2, #0
 80089fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008a04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008a08:	4642      	mov	r2, r8
 8008a0a:	464b      	mov	r3, r9
 8008a0c:	1891      	adds	r1, r2, r2
 8008a0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008a10:	415b      	adcs	r3, r3
 8008a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008a18:	4641      	mov	r1, r8
 8008a1a:	1851      	adds	r1, r2, r1
 8008a1c:	6339      	str	r1, [r7, #48]	; 0x30
 8008a1e:	4649      	mov	r1, r9
 8008a20:	414b      	adcs	r3, r1
 8008a22:	637b      	str	r3, [r7, #52]	; 0x34
 8008a24:	f04f 0200 	mov.w	r2, #0
 8008a28:	f04f 0300 	mov.w	r3, #0
 8008a2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008a30:	4659      	mov	r1, fp
 8008a32:	00cb      	lsls	r3, r1, #3
 8008a34:	4651      	mov	r1, sl
 8008a36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a3a:	4651      	mov	r1, sl
 8008a3c:	00ca      	lsls	r2, r1, #3
 8008a3e:	4610      	mov	r0, r2
 8008a40:	4619      	mov	r1, r3
 8008a42:	4603      	mov	r3, r0
 8008a44:	4642      	mov	r2, r8
 8008a46:	189b      	adds	r3, r3, r2
 8008a48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a4c:	464b      	mov	r3, r9
 8008a4e:	460a      	mov	r2, r1
 8008a50:	eb42 0303 	adc.w	r3, r2, r3
 8008a54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008a64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008a68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	18db      	adds	r3, r3, r3
 8008a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a72:	4613      	mov	r3, r2
 8008a74:	eb42 0303 	adc.w	r3, r2, r3
 8008a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008a82:	f7f8 f919 	bl	8000cb8 <__aeabi_uldivmod>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	4b0d      	ldr	r3, [pc, #52]	; (8008ac0 <UART_SetConfig+0x2d4>)
 8008a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a90:	095b      	lsrs	r3, r3, #5
 8008a92:	2164      	movs	r1, #100	; 0x64
 8008a94:	fb01 f303 	mul.w	r3, r1, r3
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	00db      	lsls	r3, r3, #3
 8008a9c:	3332      	adds	r3, #50	; 0x32
 8008a9e:	4a08      	ldr	r2, [pc, #32]	; (8008ac0 <UART_SetConfig+0x2d4>)
 8008aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa4:	095b      	lsrs	r3, r3, #5
 8008aa6:	f003 0207 	and.w	r2, r3, #7
 8008aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4422      	add	r2, r4
 8008ab2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ab4:	e105      	b.n	8008cc2 <UART_SetConfig+0x4d6>
 8008ab6:	bf00      	nop
 8008ab8:	40011000 	.word	0x40011000
 8008abc:	40011400 	.word	0x40011400
 8008ac0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ace:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008ad2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008ad6:	4642      	mov	r2, r8
 8008ad8:	464b      	mov	r3, r9
 8008ada:	1891      	adds	r1, r2, r2
 8008adc:	6239      	str	r1, [r7, #32]
 8008ade:	415b      	adcs	r3, r3
 8008ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ae2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ae6:	4641      	mov	r1, r8
 8008ae8:	1854      	adds	r4, r2, r1
 8008aea:	4649      	mov	r1, r9
 8008aec:	eb43 0501 	adc.w	r5, r3, r1
 8008af0:	f04f 0200 	mov.w	r2, #0
 8008af4:	f04f 0300 	mov.w	r3, #0
 8008af8:	00eb      	lsls	r3, r5, #3
 8008afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008afe:	00e2      	lsls	r2, r4, #3
 8008b00:	4614      	mov	r4, r2
 8008b02:	461d      	mov	r5, r3
 8008b04:	4643      	mov	r3, r8
 8008b06:	18e3      	adds	r3, r4, r3
 8008b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b0c:	464b      	mov	r3, r9
 8008b0e:	eb45 0303 	adc.w	r3, r5, r3
 8008b12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008b26:	f04f 0200 	mov.w	r2, #0
 8008b2a:	f04f 0300 	mov.w	r3, #0
 8008b2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008b32:	4629      	mov	r1, r5
 8008b34:	008b      	lsls	r3, r1, #2
 8008b36:	4621      	mov	r1, r4
 8008b38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b3c:	4621      	mov	r1, r4
 8008b3e:	008a      	lsls	r2, r1, #2
 8008b40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008b44:	f7f8 f8b8 	bl	8000cb8 <__aeabi_uldivmod>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	4b60      	ldr	r3, [pc, #384]	; (8008cd0 <UART_SetConfig+0x4e4>)
 8008b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8008b52:	095b      	lsrs	r3, r3, #5
 8008b54:	011c      	lsls	r4, r3, #4
 8008b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008b64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008b68:	4642      	mov	r2, r8
 8008b6a:	464b      	mov	r3, r9
 8008b6c:	1891      	adds	r1, r2, r2
 8008b6e:	61b9      	str	r1, [r7, #24]
 8008b70:	415b      	adcs	r3, r3
 8008b72:	61fb      	str	r3, [r7, #28]
 8008b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b78:	4641      	mov	r1, r8
 8008b7a:	1851      	adds	r1, r2, r1
 8008b7c:	6139      	str	r1, [r7, #16]
 8008b7e:	4649      	mov	r1, r9
 8008b80:	414b      	adcs	r3, r1
 8008b82:	617b      	str	r3, [r7, #20]
 8008b84:	f04f 0200 	mov.w	r2, #0
 8008b88:	f04f 0300 	mov.w	r3, #0
 8008b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b90:	4659      	mov	r1, fp
 8008b92:	00cb      	lsls	r3, r1, #3
 8008b94:	4651      	mov	r1, sl
 8008b96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b9a:	4651      	mov	r1, sl
 8008b9c:	00ca      	lsls	r2, r1, #3
 8008b9e:	4610      	mov	r0, r2
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	4642      	mov	r2, r8
 8008ba6:	189b      	adds	r3, r3, r2
 8008ba8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008bac:	464b      	mov	r3, r9
 8008bae:	460a      	mov	r2, r1
 8008bb0:	eb42 0303 	adc.w	r3, r2, r3
 8008bb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008bc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008bc4:	f04f 0200 	mov.w	r2, #0
 8008bc8:	f04f 0300 	mov.w	r3, #0
 8008bcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008bd0:	4649      	mov	r1, r9
 8008bd2:	008b      	lsls	r3, r1, #2
 8008bd4:	4641      	mov	r1, r8
 8008bd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bda:	4641      	mov	r1, r8
 8008bdc:	008a      	lsls	r2, r1, #2
 8008bde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008be2:	f7f8 f869 	bl	8000cb8 <__aeabi_uldivmod>
 8008be6:	4602      	mov	r2, r0
 8008be8:	460b      	mov	r3, r1
 8008bea:	4b39      	ldr	r3, [pc, #228]	; (8008cd0 <UART_SetConfig+0x4e4>)
 8008bec:	fba3 1302 	umull	r1, r3, r3, r2
 8008bf0:	095b      	lsrs	r3, r3, #5
 8008bf2:	2164      	movs	r1, #100	; 0x64
 8008bf4:	fb01 f303 	mul.w	r3, r1, r3
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	011b      	lsls	r3, r3, #4
 8008bfc:	3332      	adds	r3, #50	; 0x32
 8008bfe:	4a34      	ldr	r2, [pc, #208]	; (8008cd0 <UART_SetConfig+0x4e4>)
 8008c00:	fba2 2303 	umull	r2, r3, r2, r3
 8008c04:	095b      	lsrs	r3, r3, #5
 8008c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c0a:	441c      	add	r4, r3
 8008c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c10:	2200      	movs	r2, #0
 8008c12:	673b      	str	r3, [r7, #112]	; 0x70
 8008c14:	677a      	str	r2, [r7, #116]	; 0x74
 8008c16:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008c1a:	4642      	mov	r2, r8
 8008c1c:	464b      	mov	r3, r9
 8008c1e:	1891      	adds	r1, r2, r2
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	415b      	adcs	r3, r3
 8008c24:	60fb      	str	r3, [r7, #12]
 8008c26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c2a:	4641      	mov	r1, r8
 8008c2c:	1851      	adds	r1, r2, r1
 8008c2e:	6039      	str	r1, [r7, #0]
 8008c30:	4649      	mov	r1, r9
 8008c32:	414b      	adcs	r3, r1
 8008c34:	607b      	str	r3, [r7, #4]
 8008c36:	f04f 0200 	mov.w	r2, #0
 8008c3a:	f04f 0300 	mov.w	r3, #0
 8008c3e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008c42:	4659      	mov	r1, fp
 8008c44:	00cb      	lsls	r3, r1, #3
 8008c46:	4651      	mov	r1, sl
 8008c48:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c4c:	4651      	mov	r1, sl
 8008c4e:	00ca      	lsls	r2, r1, #3
 8008c50:	4610      	mov	r0, r2
 8008c52:	4619      	mov	r1, r3
 8008c54:	4603      	mov	r3, r0
 8008c56:	4642      	mov	r2, r8
 8008c58:	189b      	adds	r3, r3, r2
 8008c5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c5c:	464b      	mov	r3, r9
 8008c5e:	460a      	mov	r2, r1
 8008c60:	eb42 0303 	adc.w	r3, r2, r3
 8008c64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	663b      	str	r3, [r7, #96]	; 0x60
 8008c70:	667a      	str	r2, [r7, #100]	; 0x64
 8008c72:	f04f 0200 	mov.w	r2, #0
 8008c76:	f04f 0300 	mov.w	r3, #0
 8008c7a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008c7e:	4649      	mov	r1, r9
 8008c80:	008b      	lsls	r3, r1, #2
 8008c82:	4641      	mov	r1, r8
 8008c84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c88:	4641      	mov	r1, r8
 8008c8a:	008a      	lsls	r2, r1, #2
 8008c8c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008c90:	f7f8 f812 	bl	8000cb8 <__aeabi_uldivmod>
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	4b0d      	ldr	r3, [pc, #52]	; (8008cd0 <UART_SetConfig+0x4e4>)
 8008c9a:	fba3 1302 	umull	r1, r3, r3, r2
 8008c9e:	095b      	lsrs	r3, r3, #5
 8008ca0:	2164      	movs	r1, #100	; 0x64
 8008ca2:	fb01 f303 	mul.w	r3, r1, r3
 8008ca6:	1ad3      	subs	r3, r2, r3
 8008ca8:	011b      	lsls	r3, r3, #4
 8008caa:	3332      	adds	r3, #50	; 0x32
 8008cac:	4a08      	ldr	r2, [pc, #32]	; (8008cd0 <UART_SetConfig+0x4e4>)
 8008cae:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb2:	095b      	lsrs	r3, r3, #5
 8008cb4:	f003 020f 	and.w	r2, r3, #15
 8008cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4422      	add	r2, r4
 8008cc0:	609a      	str	r2, [r3, #8]
}
 8008cc2:	bf00      	nop
 8008cc4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cce:	bf00      	nop
 8008cd0:	51eb851f 	.word	0x51eb851f

08008cd4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	4603      	mov	r3, r0
 8008cdc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ce6:	2b84      	cmp	r3, #132	; 0x84
 8008ce8:	d005      	beq.n	8008cf6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008cea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	3303      	adds	r3, #3
 8008cf4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008d08:	f000 ff46 	bl	8009b98 <vTaskStartScheduler>
  
  return osOK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008d12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d14:	b089      	sub	sp, #36	; 0x24
 8008d16:	af04      	add	r7, sp, #16
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d020      	beq.n	8008d66 <osThreadCreate+0x54>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d01c      	beq.n	8008d66 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685c      	ldr	r4, [r3, #4]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681d      	ldr	r5, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	691e      	ldr	r6, [r3, #16]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff ffc8 	bl	8008cd4 <makeFreeRtosPriority>
 8008d44:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d4e:	9202      	str	r2, [sp, #8]
 8008d50:	9301      	str	r3, [sp, #4]
 8008d52:	9100      	str	r1, [sp, #0]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	4632      	mov	r2, r6
 8008d58:	4629      	mov	r1, r5
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f000 fc2f 	bl	80095be <xTaskCreateStatic>
 8008d60:	4603      	mov	r3, r0
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	e01c      	b.n	8008da0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685c      	ldr	r4, [r3, #4]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d72:	b29e      	uxth	r6, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7ff ffaa 	bl	8008cd4 <makeFreeRtosPriority>
 8008d80:	4602      	mov	r2, r0
 8008d82:	f107 030c 	add.w	r3, r7, #12
 8008d86:	9301      	str	r3, [sp, #4]
 8008d88:	9200      	str	r2, [sp, #0]
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	4632      	mov	r2, r6
 8008d8e:	4629      	mov	r1, r5
 8008d90:	4620      	mov	r0, r4
 8008d92:	f000 fc71 	bl	8009678 <xTaskCreate>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d001      	beq.n	8008da0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	e000      	b.n	8008da2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008da0:	68fb      	ldr	r3, [r7, #12]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008daa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d001      	beq.n	8008dc0 <osDelay+0x16>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	e000      	b.n	8008dc2 <osDelay+0x18>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 feb4 	bl	8009b30 <vTaskDelay>
  
  return osOK;
 8008dc8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b083      	sub	sp, #12
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f103 0208 	add.w	r2, r3, #8
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f103 0208 	add.w	r2, r3, #8
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f103 0208 	add.w	r2, r3, #8
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008e06:	bf00      	nop
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008e12:	b480      	push	{r7}
 8008e14:	b083      	sub	sp, #12
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	689a      	ldr	r2, [r3, #8]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	1c5a      	adds	r2, r3, #1
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	601a      	str	r2, [r3, #0]
}
 8008e68:	bf00      	nop
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e8a:	d103      	bne.n	8008e94 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	60fb      	str	r3, [r7, #12]
 8008e92:	e00c      	b.n	8008eae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	3308      	adds	r3, #8
 8008e98:	60fb      	str	r3, [r7, #12]
 8008e9a:	e002      	b.n	8008ea2 <vListInsert+0x2e>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	60fb      	str	r3, [r7, #12]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d2f6      	bcs.n	8008e9c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	685a      	ldr	r2, [r3, #4]
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	1c5a      	adds	r2, r3, #1
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	601a      	str	r2, [r3, #0]
}
 8008eda:	bf00      	nop
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b085      	sub	sp, #20
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	6892      	ldr	r2, [r2, #8]
 8008efc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	6852      	ldr	r2, [r2, #4]
 8008f06:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d103      	bne.n	8008f1a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	689a      	ldr	r2, [r3, #8]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	1e5a      	subs	r2, r3, #1
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b08c      	sub	sp, #48	; 0x30
 8008f3e:	af02      	add	r7, sp, #8
 8008f40:	60f8      	str	r0, [r7, #12]
 8008f42:	60b9      	str	r1, [r7, #8]
 8008f44:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d110      	bne.n	8008f6e <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2b04      	cmp	r3, #4
 8008f56:	d81b      	bhi.n	8008f90 <xStreamBufferGenericCreate+0x56>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008f6a:	bf00      	nop
 8008f6c:	e7fe      	b.n	8008f6c <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d10a      	bne.n	8008f90 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8008f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7e:	f383 8811 	msr	BASEPRI, r3
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	61bb      	str	r3, [r7, #24]
}
 8008f8c:	bf00      	nop
 8008f8e:	e7fe      	b.n	8008f8e <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d90a      	bls.n	8008fae <xStreamBufferGenericCreate+0x74>
	__asm volatile
 8008f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9c:	f383 8811 	msr	BASEPRI, r3
 8008fa0:	f3bf 8f6f 	isb	sy
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	617b      	str	r3, [r7, #20]
}
 8008faa:	bf00      	nop
 8008fac:	e7fe      	b.n	8008fac <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	3320      	adds	r3, #32
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f001 fdf0 	bl	800aba8 <pvPortMalloc>
 8008fc8:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00a      	beq.n	8008fe6 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8008fd0:	6a3b      	ldr	r3, [r7, #32]
 8008fd2:	f103 0120 	add.w	r1, r3, #32
 8008fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	6a38      	ldr	r0, [r7, #32]
 8008fe2:	f000 fab9 	bl	8009558 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8008fe6:	6a3b      	ldr	r3, [r7, #32]
	}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3728      	adds	r7, #40	; 0x28
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10a      	bne.n	8009018 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	60fb      	str	r3, [r7, #12]
}
 8009014:	bf00      	nop
 8009016:	e7fe      	b.n	8009016 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	689a      	ldr	r2, [r3, #8]
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4413      	add	r3, r2
 8009022:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	3b01      	subs	r3, #1
 8009032:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	697a      	ldr	r2, [r7, #20]
 800903a:	429a      	cmp	r2, r3
 800903c:	d304      	bcc.n	8009048 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8009048:	697b      	ldr	r3, [r7, #20]
}
 800904a:	4618      	mov	r0, r3
 800904c:	371c      	adds	r7, #28
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b090      	sub	sp, #64	; 0x40
 800905a:	af02      	add	r7, sp, #8
 800905c:	60f8      	str	r0, [r7, #12]
 800905e:	60b9      	str	r1, [r7, #8]
 8009060:	607a      	str	r2, [r7, #4]
 8009062:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10a      	bne.n	8009088 <xStreamBufferSendFromISR+0x32>
	__asm volatile
 8009072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	623b      	str	r3, [r7, #32]
}
 8009084:	bf00      	nop
 8009086:	e7fe      	b.n	8009086 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8009088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908a:	2b00      	cmp	r3, #0
 800908c:	d10a      	bne.n	80090a4 <xStreamBufferSendFromISR+0x4e>
	__asm volatile
 800908e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009092:	f383 8811 	msr	BASEPRI, r3
 8009096:	f3bf 8f6f 	isb	sy
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	61fb      	str	r3, [r7, #28]
}
 80090a0:	bf00      	nop
 80090a2:	e7fe      	b.n	80090a2 <xStreamBufferSendFromISR+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80090a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a6:	7f1b      	ldrb	r3, [r3, #28]
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <xStreamBufferSendFromISR+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80090b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b2:	3304      	adds	r3, #4
 80090b4:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80090b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090b8:	f7ff ff9a 	bl	8008ff0 <xStreamBufferSpacesAvailable>
 80090bc:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80090be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	68b9      	ldr	r1, [r7, #8]
 80090c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090ca:	f000 f835 	bl	8009138 <prvWriteMessageToBuffer>
 80090ce:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 80090d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d02b      	beq.n	800912e <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80090d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090d8:	f000 fa1e 	bl	8009518 <prvBytesInBuffer>
 80090dc:	4602      	mov	r2, r0
 80090de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d323      	bcc.n	800912e <xStreamBufferSendFromISR+0xd8>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80090e6:	f3ef 8211 	mrs	r2, BASEPRI
 80090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	61ba      	str	r2, [r7, #24]
 80090fc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80090fe:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8009100:	627b      	str	r3, [r7, #36]	; 0x24
 8009102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00b      	beq.n	8009122 <xStreamBufferSendFromISR+0xcc>
 800910a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910c:	6918      	ldr	r0, [r3, #16]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	2300      	movs	r3, #0
 8009114:	2200      	movs	r2, #0
 8009116:	2100      	movs	r1, #0
 8009118:	f001 f984 	bl	800a424 <xTaskGenericNotifyFromISR>
 800911c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911e:	2200      	movs	r2, #0
 8009120:	611a      	str	r2, [r3, #16]
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800912c:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 800912e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8009130:	4618      	mov	r0, r3
 8009132:	3738      	adds	r7, #56	; 0x38
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b086      	sub	sp, #24
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
 8009144:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d102      	bne.n	8009152 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800914c:	2300      	movs	r3, #0
 800914e:	617b      	str	r3, [r7, #20]
 8009150:	e01d      	b.n	800918e <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	7f1b      	ldrb	r3, [r3, #28]
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b00      	cmp	r3, #0
 800915c:	d108      	bne.n	8009170 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800915e:	2301      	movs	r3, #1
 8009160:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	4293      	cmp	r3, r2
 8009168:	bf28      	it	cs
 800916a:	4613      	movcs	r3, r2
 800916c:	607b      	str	r3, [r7, #4]
 800916e:	e00e      	b.n	800918e <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	6a3b      	ldr	r3, [r7, #32]
 8009174:	429a      	cmp	r2, r3
 8009176:	d308      	bcc.n	800918a <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8009178:	2301      	movs	r3, #1
 800917a:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800917c:	1d3b      	adds	r3, r7, #4
 800917e:	2204      	movs	r2, #4
 8009180:	4619      	mov	r1, r3
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f000 f8dc 	bl	8009340 <prvWriteBytesToBuffer>
 8009188:	e001      	b.n	800918e <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800918a:	2300      	movs	r3, #0
 800918c:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d007      	beq.n	80091a4 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	461a      	mov	r2, r3
 8009198:	68b9      	ldr	r1, [r7, #8]
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f000 f8d0 	bl	8009340 <prvWriteBytesToBuffer>
 80091a0:	6138      	str	r0, [r7, #16]
 80091a2:	e001      	b.n	80091a8 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 80091a4:	2300      	movs	r3, #0
 80091a6:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 80091a8:	693b      	ldr	r3, [r7, #16]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3718      	adds	r7, #24
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b08e      	sub	sp, #56	; 0x38
 80091b6:	af02      	add	r7, sp, #8
 80091b8:	60f8      	str	r0, [r7, #12]
 80091ba:	60b9      	str	r1, [r7, #8]
 80091bc:	607a      	str	r2, [r7, #4]
 80091be:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 80091c4:	2300      	movs	r3, #0
 80091c6:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10a      	bne.n	80091e4 <xStreamBufferReceive+0x32>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	61fb      	str	r3, [r7, #28]
}
 80091e0:	bf00      	nop
 80091e2:	e7fe      	b.n	80091e2 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10a      	bne.n	8009200 <xStreamBufferReceive+0x4e>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	61bb      	str	r3, [r7, #24]
}
 80091fc:	bf00      	nop
 80091fe:	e7fe      	b.n	80091fe <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	7f1b      	ldrb	r3, [r3, #28]
 8009204:	f003 0301 	and.w	r3, r3, #1
 8009208:	2b00      	cmp	r3, #0
 800920a:	d002      	beq.n	8009212 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800920c:	2304      	movs	r3, #4
 800920e:	627b      	str	r3, [r7, #36]	; 0x24
 8009210:	e001      	b.n	8009216 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8009212:	2300      	movs	r3, #0
 8009214:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d034      	beq.n	8009286 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800921c:	f001 fba2 	bl	800a964 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009220:	6a38      	ldr	r0, [r7, #32]
 8009222:	f000 f979 	bl	8009518 <prvBytesInBuffer>
 8009226:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8009228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	429a      	cmp	r2, r3
 800922e:	d816      	bhi.n	800925e <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8009230:	2000      	movs	r0, #0
 8009232:	f001 f9db 	bl	800a5ec <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00a      	beq.n	8009254 <xStreamBufferReceive+0xa2>
	__asm volatile
 800923e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009242:	f383 8811 	msr	BASEPRI, r3
 8009246:	f3bf 8f6f 	isb	sy
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	617b      	str	r3, [r7, #20]
}
 8009250:	bf00      	nop
 8009252:	e7fe      	b.n	8009252 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8009254:	f000 ffb8 	bl	800a1c8 <xTaskGetCurrentTaskHandle>
 8009258:	4602      	mov	r2, r0
 800925a:	6a3b      	ldr	r3, [r7, #32]
 800925c:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800925e:	f001 fbb1 	bl	800a9c4 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8009262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	429a      	cmp	r2, r3
 8009268:	d811      	bhi.n	800928e <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2200      	movs	r2, #0
 800926e:	2100      	movs	r1, #0
 8009270:	2000      	movs	r0, #0
 8009272:	f000 ffb9 	bl	800a1e8 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8009276:	6a3b      	ldr	r3, [r7, #32]
 8009278:	2200      	movs	r2, #0
 800927a:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800927c:	6a38      	ldr	r0, [r7, #32]
 800927e:	f000 f94b 	bl	8009518 <prvBytesInBuffer>
 8009282:	62b8      	str	r0, [r7, #40]	; 0x28
 8009284:	e003      	b.n	800928e <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009286:	6a38      	ldr	r0, [r7, #32]
 8009288:	f000 f946 	bl	8009518 <prvBytesInBuffer>
 800928c:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800928e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	429a      	cmp	r2, r3
 8009294:	d91d      	bls.n	80092d2 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8009296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009298:	9300      	str	r3, [sp, #0]
 800929a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	68b9      	ldr	r1, [r7, #8]
 80092a0:	6a38      	ldr	r0, [r7, #32]
 80092a2:	f000 f81b 	bl	80092dc <prvReadMessageFromBuffer>
 80092a6:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 80092a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d011      	beq.n	80092d2 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 80092ae:	f000 fcdd 	bl	8009c6c <vTaskSuspendAll>
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	695b      	ldr	r3, [r3, #20]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d009      	beq.n	80092ce <xStreamBufferReceive+0x11c>
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	6958      	ldr	r0, [r3, #20]
 80092be:	2300      	movs	r3, #0
 80092c0:	2200      	movs	r2, #0
 80092c2:	2100      	movs	r1, #0
 80092c4:	f000 fff0 	bl	800a2a8 <xTaskGenericNotify>
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	2200      	movs	r2, #0
 80092cc:	615a      	str	r2, [r3, #20]
 80092ce:	f000 fcdb 	bl	8009c88 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 80092d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3730      	adds	r7, #48	; 0x30
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b088      	sub	sp, #32
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	607a      	str	r2, [r7, #4]
 80092e8:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 80092ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d019      	beq.n	8009324 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 80092f6:	f107 0110 	add.w	r1, r7, #16
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f000 f890 	bl	8009424 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8009308:	683a      	ldr	r2, [r7, #0]
 800930a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8009310:	69fa      	ldr	r2, [r7, #28]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	429a      	cmp	r2, r3
 8009316:	d907      	bls.n	8009328 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	69ba      	ldr	r2, [r7, #24]
 800931c:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	61fb      	str	r3, [r7, #28]
 8009322:	e001      	b.n	8009328 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	69fa      	ldr	r2, [r7, #28]
 800932c:	68b9      	ldr	r1, [r7, #8]
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f000 f878 	bl	8009424 <prvReadBytesFromBuffer>
 8009334:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8009336:	697b      	ldr	r3, [r7, #20]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3720      	adds	r7, #32
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b08a      	sub	sp, #40	; 0x28
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10a      	bne.n	8009368 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8009352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	61fb      	str	r3, [r7, #28]
}
 8009364:	bf00      	nop
 8009366:	e7fe      	b.n	8009366 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	689a      	ldr	r2, [r3, #8]
 8009372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009374:	1ad3      	subs	r3, r2, r3
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	4293      	cmp	r3, r2
 800937a:	bf28      	it	cs
 800937c:	4613      	movcs	r3, r2
 800937e:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8009380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009382:	6a3b      	ldr	r3, [r7, #32]
 8009384:	441a      	add	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	429a      	cmp	r2, r3
 800938c:	d90a      	bls.n	80093a4 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	61bb      	str	r3, [r7, #24]
}
 80093a0:	bf00      	nop
 80093a2:	e7fe      	b.n	80093a2 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	699a      	ldr	r2, [r3, #24]
 80093a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093aa:	4413      	add	r3, r2
 80093ac:	6a3a      	ldr	r2, [r7, #32]
 80093ae:	68b9      	ldr	r1, [r7, #8]
 80093b0:	4618      	mov	r0, r3
 80093b2:	f001 ff06 	bl	800b1c2 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	6a3b      	ldr	r3, [r7, #32]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d91c      	bls.n	80093f8 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	6a3b      	ldr	r3, [r7, #32]
 80093c2:	1ad2      	subs	r2, r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d90a      	bls.n	80093e2 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	617b      	str	r3, [r7, #20]
}
 80093de:	bf00      	nop
 80093e0:	e7fe      	b.n	80093e0 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6998      	ldr	r0, [r3, #24]
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	6a3b      	ldr	r3, [r7, #32]
 80093ea:	18d1      	adds	r1, r2, r3
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	461a      	mov	r2, r3
 80093f4:	f001 fee5 	bl	800b1c2 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 80093f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4413      	add	r3, r2
 80093fe:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009406:	429a      	cmp	r2, r3
 8009408:	d304      	bcc.n	8009414 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009418:	605a      	str	r2, [r3, #4]

	return xCount;
 800941a:	687b      	ldr	r3, [r7, #4]
}
 800941c:	4618      	mov	r0, r3
 800941e:	3728      	adds	r7, #40	; 0x28
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b08a      	sub	sp, #40	; 0x28
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
 8009430:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	4293      	cmp	r3, r2
 8009438:	bf28      	it	cs
 800943a:	4613      	movcs	r3, r2
 800943c:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d064      	beq.n	800950e <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	689a      	ldr	r2, [r3, #8]
 800944e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	6a3a      	ldr	r2, [r7, #32]
 8009454:	4293      	cmp	r3, r2
 8009456:	bf28      	it	cs
 8009458:	4613      	movcs	r3, r2
 800945a:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800945c:	69fa      	ldr	r2, [r7, #28]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	429a      	cmp	r2, r3
 8009462:	d90a      	bls.n	800947a <prvReadBytesFromBuffer+0x56>
	__asm volatile
 8009464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009468:	f383 8811 	msr	BASEPRI, r3
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	61bb      	str	r3, [r7, #24]
}
 8009476:	bf00      	nop
 8009478:	e7fe      	b.n	8009478 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800947a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	441a      	add	r2, r3
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	429a      	cmp	r2, r3
 8009486:	d90a      	bls.n	800949e <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 8009488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	617b      	str	r3, [r7, #20]
}
 800949a:	bf00      	nop
 800949c:	e7fe      	b.n	800949c <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	699a      	ldr	r2, [r3, #24]
 80094a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a4:	4413      	add	r3, r2
 80094a6:	69fa      	ldr	r2, [r7, #28]
 80094a8:	4619      	mov	r1, r3
 80094aa:	68b8      	ldr	r0, [r7, #8]
 80094ac:	f001 fe89 	bl	800b1c2 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80094b0:	6a3a      	ldr	r2, [r7, #32]
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d919      	bls.n	80094ec <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 80094b8:	6a3a      	ldr	r2, [r7, #32]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d90a      	bls.n	80094d6 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 80094c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c4:	f383 8811 	msr	BASEPRI, r3
 80094c8:	f3bf 8f6f 	isb	sy
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	613b      	str	r3, [r7, #16]
}
 80094d2:	bf00      	nop
 80094d4:	e7fe      	b.n	80094d4 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	18d0      	adds	r0, r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6999      	ldr	r1, [r3, #24]
 80094e0:	6a3a      	ldr	r2, [r7, #32]
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	461a      	mov	r2, r3
 80094e8:	f001 fe6b 	bl	800b1c2 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80094ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ee:	6a3b      	ldr	r3, [r7, #32]
 80094f0:	4413      	add	r3, r2
 80094f2:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d304      	bcc.n	8009508 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009504:	1ad3      	subs	r3, r2, r3
 8009506:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800950c:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800950e:	6a3b      	ldr	r3, [r7, #32]
}
 8009510:	4618      	mov	r0, r3
 8009512:	3728      	adds	r7, #40	; 0x28
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	689a      	ldr	r2, [r3, #8]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	4413      	add	r3, r2
 800952a:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	429a      	cmp	r2, r3
 800953e:	d304      	bcc.n	800954a <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800954a:	68fb      	ldr	r3, [r7, #12]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3714      	adds	r7, #20
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b086      	sub	sp, #24
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
 8009564:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8009566:	2355      	movs	r3, #85	; 0x55
 8009568:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	6979      	ldr	r1, [r7, #20]
 800956e:	68b8      	ldr	r0, [r7, #8]
 8009570:	f001 fe35 	bl	800b1de <memset>
 8009574:	4602      	mov	r2, r0
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	4293      	cmp	r3, r2
 800957a:	d00a      	beq.n	8009592 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800957c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	613b      	str	r3, [r7, #16]
}
 800958e:	bf00      	nop
 8009590:	e7fe      	b.n	8009590 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8009592:	2220      	movs	r2, #32
 8009594:	2100      	movs	r1, #0
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f001 fe21 	bl	800b1de <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80095b4:	771a      	strb	r2, [r3, #28]
}
 80095b6:	bf00      	nop
 80095b8:	3718      	adds	r7, #24
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b08e      	sub	sp, #56	; 0x38
 80095c2:	af04      	add	r7, sp, #16
 80095c4:	60f8      	str	r0, [r7, #12]
 80095c6:	60b9      	str	r1, [r7, #8]
 80095c8:	607a      	str	r2, [r7, #4]
 80095ca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80095cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10a      	bne.n	80095e8 <xTaskCreateStatic+0x2a>
	__asm volatile
 80095d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	623b      	str	r3, [r7, #32]
}
 80095e4:	bf00      	nop
 80095e6:	e7fe      	b.n	80095e6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80095e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10a      	bne.n	8009604 <xTaskCreateStatic+0x46>
	__asm volatile
 80095ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f2:	f383 8811 	msr	BASEPRI, r3
 80095f6:	f3bf 8f6f 	isb	sy
 80095fa:	f3bf 8f4f 	dsb	sy
 80095fe:	61fb      	str	r3, [r7, #28]
}
 8009600:	bf00      	nop
 8009602:	e7fe      	b.n	8009602 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009604:	23b4      	movs	r3, #180	; 0xb4
 8009606:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	2bb4      	cmp	r3, #180	; 0xb4
 800960c:	d00a      	beq.n	8009624 <xTaskCreateStatic+0x66>
	__asm volatile
 800960e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	61bb      	str	r3, [r7, #24]
}
 8009620:	bf00      	nop
 8009622:	e7fe      	b.n	8009622 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009624:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009628:	2b00      	cmp	r3, #0
 800962a:	d01e      	beq.n	800966a <xTaskCreateStatic+0xac>
 800962c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800962e:	2b00      	cmp	r3, #0
 8009630:	d01b      	beq.n	800966a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009634:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800963a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800963c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963e:	2202      	movs	r2, #2
 8009640:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009644:	2300      	movs	r3, #0
 8009646:	9303      	str	r3, [sp, #12]
 8009648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964a:	9302      	str	r3, [sp, #8]
 800964c:	f107 0314 	add.w	r3, r7, #20
 8009650:	9301      	str	r3, [sp, #4]
 8009652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009654:	9300      	str	r3, [sp, #0]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	68b9      	ldr	r1, [r7, #8]
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f000 f851 	bl	8009704 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009662:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009664:	f000 f8ec 	bl	8009840 <prvAddNewTaskToReadyList>
 8009668:	e001      	b.n	800966e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800966a:	2300      	movs	r3, #0
 800966c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800966e:	697b      	ldr	r3, [r7, #20]
	}
 8009670:	4618      	mov	r0, r3
 8009672:	3728      	adds	r7, #40	; 0x28
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009678:	b580      	push	{r7, lr}
 800967a:	b08c      	sub	sp, #48	; 0x30
 800967c:	af04      	add	r7, sp, #16
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	603b      	str	r3, [r7, #0]
 8009684:	4613      	mov	r3, r2
 8009686:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009688:	88fb      	ldrh	r3, [r7, #6]
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4618      	mov	r0, r3
 800968e:	f001 fa8b 	bl	800aba8 <pvPortMalloc>
 8009692:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00e      	beq.n	80096b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800969a:	20b4      	movs	r0, #180	; 0xb4
 800969c:	f001 fa84 	bl	800aba8 <pvPortMalloc>
 80096a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d003      	beq.n	80096b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	631a      	str	r2, [r3, #48]	; 0x30
 80096ae:	e005      	b.n	80096bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80096b0:	6978      	ldr	r0, [r7, #20]
 80096b2:	f001 fb45 	bl	800ad40 <vPortFree>
 80096b6:	e001      	b.n	80096bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80096b8:	2300      	movs	r3, #0
 80096ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d017      	beq.n	80096f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80096ca:	88fa      	ldrh	r2, [r7, #6]
 80096cc:	2300      	movs	r3, #0
 80096ce:	9303      	str	r3, [sp, #12]
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	9302      	str	r3, [sp, #8]
 80096d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	68b9      	ldr	r1, [r7, #8]
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f000 f80f 	bl	8009704 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096e6:	69f8      	ldr	r0, [r7, #28]
 80096e8:	f000 f8aa 	bl	8009840 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80096ec:	2301      	movs	r3, #1
 80096ee:	61bb      	str	r3, [r7, #24]
 80096f0:	e002      	b.n	80096f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80096f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80096f8:	69bb      	ldr	r3, [r7, #24]
	}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3720      	adds	r7, #32
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
	...

08009704 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b088      	sub	sp, #32
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	607a      	str	r2, [r7, #4]
 8009710:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800971c:	3b01      	subs	r3, #1
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4413      	add	r3, r2
 8009722:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	f023 0307 	bic.w	r3, r3, #7
 800972a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	f003 0307 	and.w	r3, r3, #7
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00a      	beq.n	800974c <prvInitialiseNewTask+0x48>
	__asm volatile
 8009736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	617b      	str	r3, [r7, #20]
}
 8009748:	bf00      	nop
 800974a:	e7fe      	b.n	800974a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d01f      	beq.n	8009792 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009752:	2300      	movs	r3, #0
 8009754:	61fb      	str	r3, [r7, #28]
 8009756:	e012      	b.n	800977e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	4413      	add	r3, r2
 800975e:	7819      	ldrb	r1, [r3, #0]
 8009760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	4413      	add	r3, r2
 8009766:	3334      	adds	r3, #52	; 0x34
 8009768:	460a      	mov	r2, r1
 800976a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800976c:	68ba      	ldr	r2, [r7, #8]
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	4413      	add	r3, r2
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d006      	beq.n	8009786 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	3301      	adds	r3, #1
 800977c:	61fb      	str	r3, [r7, #28]
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	2b0f      	cmp	r3, #15
 8009782:	d9e9      	bls.n	8009758 <prvInitialiseNewTask+0x54>
 8009784:	e000      	b.n	8009788 <prvInitialiseNewTask+0x84>
			{
				break;
 8009786:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009790:	e003      	b.n	800979a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009794:	2200      	movs	r2, #0
 8009796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800979a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979c:	2b06      	cmp	r3, #6
 800979e:	d901      	bls.n	80097a4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80097a0:	2306      	movs	r3, #6
 80097a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80097a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80097aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80097b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b2:	2200      	movs	r2, #0
 80097b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80097b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b8:	3304      	adds	r3, #4
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7ff fb29 	bl	8008e12 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80097c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c2:	3318      	adds	r3, #24
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7ff fb24 	bl	8008e12 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80097ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d2:	f1c3 0207 	rsb	r2, r3, #7
 80097d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80097e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e2:	2200      	movs	r2, #0
 80097e4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80097f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f2:	334c      	adds	r3, #76	; 0x4c
 80097f4:	2260      	movs	r2, #96	; 0x60
 80097f6:	2100      	movs	r1, #0
 80097f8:	4618      	mov	r0, r3
 80097fa:	f001 fcf0 	bl	800b1de <memset>
 80097fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009800:	4a0c      	ldr	r2, [pc, #48]	; (8009834 <prvInitialiseNewTask+0x130>)
 8009802:	651a      	str	r2, [r3, #80]	; 0x50
 8009804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009806:	4a0c      	ldr	r2, [pc, #48]	; (8009838 <prvInitialiseNewTask+0x134>)
 8009808:	655a      	str	r2, [r3, #84]	; 0x54
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	4a0b      	ldr	r2, [pc, #44]	; (800983c <prvInitialiseNewTask+0x138>)
 800980e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	68f9      	ldr	r1, [r7, #12]
 8009814:	69b8      	ldr	r0, [r7, #24]
 8009816:	f000 ff75 	bl	800a704 <pxPortInitialiseStack>
 800981a:	4602      	mov	r2, r0
 800981c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009822:	2b00      	cmp	r3, #0
 8009824:	d002      	beq.n	800982c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800982a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800982c:	bf00      	nop
 800982e:	3720      	adds	r7, #32
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	0800e698 	.word	0x0800e698
 8009838:	0800e6b8 	.word	0x0800e6b8
 800983c:	0800e678 	.word	0x0800e678

08009840 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009848:	f001 f88c 	bl	800a964 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800984c:	4b2a      	ldr	r3, [pc, #168]	; (80098f8 <prvAddNewTaskToReadyList+0xb8>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	3301      	adds	r3, #1
 8009852:	4a29      	ldr	r2, [pc, #164]	; (80098f8 <prvAddNewTaskToReadyList+0xb8>)
 8009854:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009856:	4b29      	ldr	r3, [pc, #164]	; (80098fc <prvAddNewTaskToReadyList+0xbc>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d109      	bne.n	8009872 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800985e:	4a27      	ldr	r2, [pc, #156]	; (80098fc <prvAddNewTaskToReadyList+0xbc>)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009864:	4b24      	ldr	r3, [pc, #144]	; (80098f8 <prvAddNewTaskToReadyList+0xb8>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d110      	bne.n	800988e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800986c:	f000 fbea 	bl	800a044 <prvInitialiseTaskLists>
 8009870:	e00d      	b.n	800988e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009872:	4b23      	ldr	r3, [pc, #140]	; (8009900 <prvAddNewTaskToReadyList+0xc0>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d109      	bne.n	800988e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800987a:	4b20      	ldr	r3, [pc, #128]	; (80098fc <prvAddNewTaskToReadyList+0xbc>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009884:	429a      	cmp	r2, r3
 8009886:	d802      	bhi.n	800988e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009888:	4a1c      	ldr	r2, [pc, #112]	; (80098fc <prvAddNewTaskToReadyList+0xbc>)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800988e:	4b1d      	ldr	r3, [pc, #116]	; (8009904 <prvAddNewTaskToReadyList+0xc4>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	3301      	adds	r3, #1
 8009894:	4a1b      	ldr	r2, [pc, #108]	; (8009904 <prvAddNewTaskToReadyList+0xc4>)
 8009896:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989c:	2201      	movs	r2, #1
 800989e:	409a      	lsls	r2, r3
 80098a0:	4b19      	ldr	r3, [pc, #100]	; (8009908 <prvAddNewTaskToReadyList+0xc8>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	4a18      	ldr	r2, [pc, #96]	; (8009908 <prvAddNewTaskToReadyList+0xc8>)
 80098a8:	6013      	str	r3, [r2, #0]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ae:	4613      	mov	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4413      	add	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4a15      	ldr	r2, [pc, #84]	; (800990c <prvAddNewTaskToReadyList+0xcc>)
 80098b8:	441a      	add	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	3304      	adds	r3, #4
 80098be:	4619      	mov	r1, r3
 80098c0:	4610      	mov	r0, r2
 80098c2:	f7ff fab3 	bl	8008e2c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80098c6:	f001 f87d 	bl	800a9c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80098ca:	4b0d      	ldr	r3, [pc, #52]	; (8009900 <prvAddNewTaskToReadyList+0xc0>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00e      	beq.n	80098f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80098d2:	4b0a      	ldr	r3, [pc, #40]	; (80098fc <prvAddNewTaskToReadyList+0xbc>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098dc:	429a      	cmp	r2, r3
 80098de:	d207      	bcs.n	80098f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80098e0:	4b0b      	ldr	r3, [pc, #44]	; (8009910 <prvAddNewTaskToReadyList+0xd0>)
 80098e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098e6:	601a      	str	r2, [r3, #0]
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098f0:	bf00      	nop
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	200008c4 	.word	0x200008c4
 80098fc:	200007c4 	.word	0x200007c4
 8009900:	200008d0 	.word	0x200008d0
 8009904:	200008e0 	.word	0x200008e0
 8009908:	200008cc 	.word	0x200008cc
 800990c:	200007c8 	.word	0x200007c8
 8009910:	e000ed04 	.word	0xe000ed04

08009914 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800991c:	f001 f822 	bl	800a964 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d102      	bne.n	800992c <vTaskDelete+0x18>
 8009926:	4b39      	ldr	r3, [pc, #228]	; (8009a0c <vTaskDelete+0xf8>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	e000      	b.n	800992e <vTaskDelete+0x1a>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	3304      	adds	r3, #4
 8009934:	4618      	mov	r0, r3
 8009936:	f7ff fad6 	bl	8008ee6 <uxListRemove>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d115      	bne.n	800996c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009944:	4932      	ldr	r1, [pc, #200]	; (8009a10 <vTaskDelete+0xfc>)
 8009946:	4613      	mov	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	440b      	add	r3, r1
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d10a      	bne.n	800996c <vTaskDelete+0x58>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995a:	2201      	movs	r2, #1
 800995c:	fa02 f303 	lsl.w	r3, r2, r3
 8009960:	43da      	mvns	r2, r3
 8009962:	4b2c      	ldr	r3, [pc, #176]	; (8009a14 <vTaskDelete+0x100>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4013      	ands	r3, r2
 8009968:	4a2a      	ldr	r2, [pc, #168]	; (8009a14 <vTaskDelete+0x100>)
 800996a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009970:	2b00      	cmp	r3, #0
 8009972:	d004      	beq.n	800997e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	3318      	adds	r3, #24
 8009978:	4618      	mov	r0, r3
 800997a:	f7ff fab4 	bl	8008ee6 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800997e:	4b26      	ldr	r3, [pc, #152]	; (8009a18 <vTaskDelete+0x104>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3301      	adds	r3, #1
 8009984:	4a24      	ldr	r2, [pc, #144]	; (8009a18 <vTaskDelete+0x104>)
 8009986:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009988:	4b20      	ldr	r3, [pc, #128]	; (8009a0c <vTaskDelete+0xf8>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	429a      	cmp	r2, r3
 8009990:	d10b      	bne.n	80099aa <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	3304      	adds	r3, #4
 8009996:	4619      	mov	r1, r3
 8009998:	4820      	ldr	r0, [pc, #128]	; (8009a1c <vTaskDelete+0x108>)
 800999a:	f7ff fa47 	bl	8008e2c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800999e:	4b20      	ldr	r3, [pc, #128]	; (8009a20 <vTaskDelete+0x10c>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	3301      	adds	r3, #1
 80099a4:	4a1e      	ldr	r2, [pc, #120]	; (8009a20 <vTaskDelete+0x10c>)
 80099a6:	6013      	str	r3, [r2, #0]
 80099a8:	e009      	b.n	80099be <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80099aa:	4b1e      	ldr	r3, [pc, #120]	; (8009a24 <vTaskDelete+0x110>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	4a1c      	ldr	r2, [pc, #112]	; (8009a24 <vTaskDelete+0x110>)
 80099b2:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f000 fbb3 	bl	800a120 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80099ba:	f000 fbe5 	bl	800a188 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80099be:	f001 f801 	bl	800a9c4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80099c2:	4b19      	ldr	r3, [pc, #100]	; (8009a28 <vTaskDelete+0x114>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d01b      	beq.n	8009a02 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80099ca:	4b10      	ldr	r3, [pc, #64]	; (8009a0c <vTaskDelete+0xf8>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d116      	bne.n	8009a02 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80099d4:	4b15      	ldr	r3, [pc, #84]	; (8009a2c <vTaskDelete+0x118>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00a      	beq.n	80099f2 <vTaskDelete+0xde>
	__asm volatile
 80099dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e0:	f383 8811 	msr	BASEPRI, r3
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	60bb      	str	r3, [r7, #8]
}
 80099ee:	bf00      	nop
 80099f0:	e7fe      	b.n	80099f0 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80099f2:	4b0f      	ldr	r3, [pc, #60]	; (8009a30 <vTaskDelete+0x11c>)
 80099f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099f8:	601a      	str	r2, [r3, #0]
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009a02:	bf00      	nop
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	200007c4 	.word	0x200007c4
 8009a10:	200007c8 	.word	0x200007c8
 8009a14:	200008cc 	.word	0x200008cc
 8009a18:	200008e0 	.word	0x200008e0
 8009a1c:	20000898 	.word	0x20000898
 8009a20:	200008ac 	.word	0x200008ac
 8009a24:	200008c4 	.word	0x200008c4
 8009a28:	200008d0 	.word	0x200008d0
 8009a2c:	200008ec 	.word	0x200008ec
 8009a30:	e000ed04 	.word	0xe000ed04

08009a34 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b08a      	sub	sp, #40	; 0x28
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10a      	bne.n	8009a5e <vTaskDelayUntil+0x2a>
	__asm volatile
 8009a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4c:	f383 8811 	msr	BASEPRI, r3
 8009a50:	f3bf 8f6f 	isb	sy
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	617b      	str	r3, [r7, #20]
}
 8009a5a:	bf00      	nop
 8009a5c:	e7fe      	b.n	8009a5c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10a      	bne.n	8009a7a <vTaskDelayUntil+0x46>
	__asm volatile
 8009a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a68:	f383 8811 	msr	BASEPRI, r3
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	613b      	str	r3, [r7, #16]
}
 8009a76:	bf00      	nop
 8009a78:	e7fe      	b.n	8009a78 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8009a7a:	4b2a      	ldr	r3, [pc, #168]	; (8009b24 <vTaskDelayUntil+0xf0>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00a      	beq.n	8009a98 <vTaskDelayUntil+0x64>
	__asm volatile
 8009a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	60fb      	str	r3, [r7, #12]
}
 8009a94:	bf00      	nop
 8009a96:	e7fe      	b.n	8009a96 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009a98:	f000 f8e8 	bl	8009c6c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009a9c:	4b22      	ldr	r3, [pc, #136]	; (8009b28 <vTaskDelayUntil+0xf4>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	683a      	ldr	r2, [r7, #0]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6a3a      	ldr	r2, [r7, #32]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d20b      	bcs.n	8009ace <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	69fa      	ldr	r2, [r7, #28]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d211      	bcs.n	8009ae4 <vTaskDelayUntil+0xb0>
 8009ac0:	69fa      	ldr	r2, [r7, #28]
 8009ac2:	6a3b      	ldr	r3, [r7, #32]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d90d      	bls.n	8009ae4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	627b      	str	r3, [r7, #36]	; 0x24
 8009acc:	e00a      	b.n	8009ae4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	69fa      	ldr	r2, [r7, #28]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d303      	bcc.n	8009ae0 <vTaskDelayUntil+0xac>
 8009ad8:	69fa      	ldr	r2, [r7, #28]
 8009ada:	6a3b      	ldr	r3, [r7, #32]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d901      	bls.n	8009ae4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	69fa      	ldr	r2, [r7, #28]
 8009ae8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d006      	beq.n	8009afe <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009af0:	69fa      	ldr	r2, [r7, #28]
 8009af2:	6a3b      	ldr	r3, [r7, #32]
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	2100      	movs	r1, #0
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 fd9d 	bl	800a638 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009afe:	f000 f8c3 	bl	8009c88 <xTaskResumeAll>
 8009b02:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d107      	bne.n	8009b1a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009b0a:	4b08      	ldr	r3, [pc, #32]	; (8009b2c <vTaskDelayUntil+0xf8>)
 8009b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b10:	601a      	str	r2, [r3, #0]
 8009b12:	f3bf 8f4f 	dsb	sy
 8009b16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b1a:	bf00      	nop
 8009b1c:	3728      	adds	r7, #40	; 0x28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	200008ec 	.word	0x200008ec
 8009b28:	200008c8 	.word	0x200008c8
 8009b2c:	e000ed04 	.word	0xe000ed04

08009b30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d017      	beq.n	8009b72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b42:	4b13      	ldr	r3, [pc, #76]	; (8009b90 <vTaskDelay+0x60>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00a      	beq.n	8009b60 <vTaskDelay+0x30>
	__asm volatile
 8009b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	60bb      	str	r3, [r7, #8]
}
 8009b5c:	bf00      	nop
 8009b5e:	e7fe      	b.n	8009b5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b60:	f000 f884 	bl	8009c6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b64:	2100      	movs	r1, #0
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fd66 	bl	800a638 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b6c:	f000 f88c 	bl	8009c88 <xTaskResumeAll>
 8009b70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d107      	bne.n	8009b88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009b78:	4b06      	ldr	r3, [pc, #24]	; (8009b94 <vTaskDelay+0x64>)
 8009b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b7e:	601a      	str	r2, [r3, #0]
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b88:	bf00      	nop
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	200008ec 	.word	0x200008ec
 8009b94:	e000ed04 	.word	0xe000ed04

08009b98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08a      	sub	sp, #40	; 0x28
 8009b9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009ba6:	463a      	mov	r2, r7
 8009ba8:	1d39      	adds	r1, r7, #4
 8009baa:	f107 0308 	add.w	r3, r7, #8
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7f7 fe5c 	bl	800186c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	68ba      	ldr	r2, [r7, #8]
 8009bba:	9202      	str	r2, [sp, #8]
 8009bbc:	9301      	str	r3, [sp, #4]
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	460a      	mov	r2, r1
 8009bc6:	4921      	ldr	r1, [pc, #132]	; (8009c4c <vTaskStartScheduler+0xb4>)
 8009bc8:	4821      	ldr	r0, [pc, #132]	; (8009c50 <vTaskStartScheduler+0xb8>)
 8009bca:	f7ff fcf8 	bl	80095be <xTaskCreateStatic>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	4a20      	ldr	r2, [pc, #128]	; (8009c54 <vTaskStartScheduler+0xbc>)
 8009bd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009bd4:	4b1f      	ldr	r3, [pc, #124]	; (8009c54 <vTaskStartScheduler+0xbc>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	617b      	str	r3, [r7, #20]
 8009be0:	e001      	b.n	8009be6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009be2:	2300      	movs	r3, #0
 8009be4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d11b      	bne.n	8009c24 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf0:	f383 8811 	msr	BASEPRI, r3
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	613b      	str	r3, [r7, #16]
}
 8009bfe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c00:	4b15      	ldr	r3, [pc, #84]	; (8009c58 <vTaskStartScheduler+0xc0>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	334c      	adds	r3, #76	; 0x4c
 8009c06:	4a15      	ldr	r2, [pc, #84]	; (8009c5c <vTaskStartScheduler+0xc4>)
 8009c08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c0a:	4b15      	ldr	r3, [pc, #84]	; (8009c60 <vTaskStartScheduler+0xc8>)
 8009c0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c12:	4b14      	ldr	r3, [pc, #80]	; (8009c64 <vTaskStartScheduler+0xcc>)
 8009c14:	2201      	movs	r2, #1
 8009c16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c18:	4b13      	ldr	r3, [pc, #76]	; (8009c68 <vTaskStartScheduler+0xd0>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c1e:	f000 fdff 	bl	800a820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c22:	e00e      	b.n	8009c42 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c2a:	d10a      	bne.n	8009c42 <vTaskStartScheduler+0xaa>
	__asm volatile
 8009c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c30:	f383 8811 	msr	BASEPRI, r3
 8009c34:	f3bf 8f6f 	isb	sy
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	60fb      	str	r3, [r7, #12]
}
 8009c3e:	bf00      	nop
 8009c40:	e7fe      	b.n	8009c40 <vTaskStartScheduler+0xa8>
}
 8009c42:	bf00      	nop
 8009c44:	3718      	adds	r7, #24
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	0800e658 	.word	0x0800e658
 8009c50:	0800a015 	.word	0x0800a015
 8009c54:	200008e8 	.word	0x200008e8
 8009c58:	200007c4 	.word	0x200007c4
 8009c5c:	20000014 	.word	0x20000014
 8009c60:	200008e4 	.word	0x200008e4
 8009c64:	200008d0 	.word	0x200008d0
 8009c68:	200008c8 	.word	0x200008c8

08009c6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c70:	4b04      	ldr	r3, [pc, #16]	; (8009c84 <vTaskSuspendAll+0x18>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3301      	adds	r3, #1
 8009c76:	4a03      	ldr	r2, [pc, #12]	; (8009c84 <vTaskSuspendAll+0x18>)
 8009c78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c7a:	bf00      	nop
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr
 8009c84:	200008ec 	.word	0x200008ec

08009c88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c92:	2300      	movs	r3, #0
 8009c94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c96:	4b41      	ldr	r3, [pc, #260]	; (8009d9c <xTaskResumeAll+0x114>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10a      	bne.n	8009cb4 <xTaskResumeAll+0x2c>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	603b      	str	r3, [r7, #0]
}
 8009cb0:	bf00      	nop
 8009cb2:	e7fe      	b.n	8009cb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009cb4:	f000 fe56 	bl	800a964 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009cb8:	4b38      	ldr	r3, [pc, #224]	; (8009d9c <xTaskResumeAll+0x114>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	4a37      	ldr	r2, [pc, #220]	; (8009d9c <xTaskResumeAll+0x114>)
 8009cc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cc2:	4b36      	ldr	r3, [pc, #216]	; (8009d9c <xTaskResumeAll+0x114>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d161      	bne.n	8009d8e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009cca:	4b35      	ldr	r3, [pc, #212]	; (8009da0 <xTaskResumeAll+0x118>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d05d      	beq.n	8009d8e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cd2:	e02e      	b.n	8009d32 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cd4:	4b33      	ldr	r3, [pc, #204]	; (8009da4 <xTaskResumeAll+0x11c>)
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	3318      	adds	r3, #24
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7ff f900 	bl	8008ee6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	3304      	adds	r3, #4
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7ff f8fb 	bl	8008ee6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	409a      	lsls	r2, r3
 8009cf8:	4b2b      	ldr	r3, [pc, #172]	; (8009da8 <xTaskResumeAll+0x120>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	4a2a      	ldr	r2, [pc, #168]	; (8009da8 <xTaskResumeAll+0x120>)
 8009d00:	6013      	str	r3, [r2, #0]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d06:	4613      	mov	r3, r2
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	4413      	add	r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4a27      	ldr	r2, [pc, #156]	; (8009dac <xTaskResumeAll+0x124>)
 8009d10:	441a      	add	r2, r3
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	3304      	adds	r3, #4
 8009d16:	4619      	mov	r1, r3
 8009d18:	4610      	mov	r0, r2
 8009d1a:	f7ff f887 	bl	8008e2c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d22:	4b23      	ldr	r3, [pc, #140]	; (8009db0 <xTaskResumeAll+0x128>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d302      	bcc.n	8009d32 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009d2c:	4b21      	ldr	r3, [pc, #132]	; (8009db4 <xTaskResumeAll+0x12c>)
 8009d2e:	2201      	movs	r2, #1
 8009d30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d32:	4b1c      	ldr	r3, [pc, #112]	; (8009da4 <xTaskResumeAll+0x11c>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1cc      	bne.n	8009cd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d40:	f000 fa22 	bl	800a188 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d44:	4b1c      	ldr	r3, [pc, #112]	; (8009db8 <xTaskResumeAll+0x130>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d010      	beq.n	8009d72 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d50:	f000 f846 	bl	8009de0 <xTaskIncrementTick>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d002      	beq.n	8009d60 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009d5a:	4b16      	ldr	r3, [pc, #88]	; (8009db4 <xTaskResumeAll+0x12c>)
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	3b01      	subs	r3, #1
 8009d64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1f1      	bne.n	8009d50 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009d6c:	4b12      	ldr	r3, [pc, #72]	; (8009db8 <xTaskResumeAll+0x130>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d72:	4b10      	ldr	r3, [pc, #64]	; (8009db4 <xTaskResumeAll+0x12c>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d009      	beq.n	8009d8e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d7e:	4b0f      	ldr	r3, [pc, #60]	; (8009dbc <xTaskResumeAll+0x134>)
 8009d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d84:	601a      	str	r2, [r3, #0]
 8009d86:	f3bf 8f4f 	dsb	sy
 8009d8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d8e:	f000 fe19 	bl	800a9c4 <vPortExitCritical>

	return xAlreadyYielded;
 8009d92:	68bb      	ldr	r3, [r7, #8]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	200008ec 	.word	0x200008ec
 8009da0:	200008c4 	.word	0x200008c4
 8009da4:	20000884 	.word	0x20000884
 8009da8:	200008cc 	.word	0x200008cc
 8009dac:	200007c8 	.word	0x200007c8
 8009db0:	200007c4 	.word	0x200007c4
 8009db4:	200008d8 	.word	0x200008d8
 8009db8:	200008d4 	.word	0x200008d4
 8009dbc:	e000ed04 	.word	0xe000ed04

08009dc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009dc6:	4b05      	ldr	r3, [pc, #20]	; (8009ddc <xTaskGetTickCount+0x1c>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009dcc:	687b      	ldr	r3, [r7, #4]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	200008c8 	.word	0x200008c8

08009de0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009de6:	2300      	movs	r3, #0
 8009de8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dea:	4b4e      	ldr	r3, [pc, #312]	; (8009f24 <xTaskIncrementTick+0x144>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f040 808e 	bne.w	8009f10 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009df4:	4b4c      	ldr	r3, [pc, #304]	; (8009f28 <xTaskIncrementTick+0x148>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009dfc:	4a4a      	ldr	r2, [pc, #296]	; (8009f28 <xTaskIncrementTick+0x148>)
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d120      	bne.n	8009e4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e08:	4b48      	ldr	r3, [pc, #288]	; (8009f2c <xTaskIncrementTick+0x14c>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00a      	beq.n	8009e28 <xTaskIncrementTick+0x48>
	__asm volatile
 8009e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e16:	f383 8811 	msr	BASEPRI, r3
 8009e1a:	f3bf 8f6f 	isb	sy
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	603b      	str	r3, [r7, #0]
}
 8009e24:	bf00      	nop
 8009e26:	e7fe      	b.n	8009e26 <xTaskIncrementTick+0x46>
 8009e28:	4b40      	ldr	r3, [pc, #256]	; (8009f2c <xTaskIncrementTick+0x14c>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	60fb      	str	r3, [r7, #12]
 8009e2e:	4b40      	ldr	r3, [pc, #256]	; (8009f30 <xTaskIncrementTick+0x150>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a3e      	ldr	r2, [pc, #248]	; (8009f2c <xTaskIncrementTick+0x14c>)
 8009e34:	6013      	str	r3, [r2, #0]
 8009e36:	4a3e      	ldr	r2, [pc, #248]	; (8009f30 <xTaskIncrementTick+0x150>)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6013      	str	r3, [r2, #0]
 8009e3c:	4b3d      	ldr	r3, [pc, #244]	; (8009f34 <xTaskIncrementTick+0x154>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	3301      	adds	r3, #1
 8009e42:	4a3c      	ldr	r2, [pc, #240]	; (8009f34 <xTaskIncrementTick+0x154>)
 8009e44:	6013      	str	r3, [r2, #0]
 8009e46:	f000 f99f 	bl	800a188 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e4a:	4b3b      	ldr	r3, [pc, #236]	; (8009f38 <xTaskIncrementTick+0x158>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d348      	bcc.n	8009ee6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e54:	4b35      	ldr	r3, [pc, #212]	; (8009f2c <xTaskIncrementTick+0x14c>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d104      	bne.n	8009e68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e5e:	4b36      	ldr	r3, [pc, #216]	; (8009f38 <xTaskIncrementTick+0x158>)
 8009e60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e64:	601a      	str	r2, [r3, #0]
					break;
 8009e66:	e03e      	b.n	8009ee6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e68:	4b30      	ldr	r3, [pc, #192]	; (8009f2c <xTaskIncrementTick+0x14c>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e78:	693a      	ldr	r2, [r7, #16]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d203      	bcs.n	8009e88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e80:	4a2d      	ldr	r2, [pc, #180]	; (8009f38 <xTaskIncrementTick+0x158>)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e86:	e02e      	b.n	8009ee6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7ff f82a 	bl	8008ee6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d004      	beq.n	8009ea4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	3318      	adds	r3, #24
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7ff f821 	bl	8008ee6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	409a      	lsls	r2, r3
 8009eac:	4b23      	ldr	r3, [pc, #140]	; (8009f3c <xTaskIncrementTick+0x15c>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	4a22      	ldr	r2, [pc, #136]	; (8009f3c <xTaskIncrementTick+0x15c>)
 8009eb4:	6013      	str	r3, [r2, #0]
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eba:	4613      	mov	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4413      	add	r3, r2
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4a1f      	ldr	r2, [pc, #124]	; (8009f40 <xTaskIncrementTick+0x160>)
 8009ec4:	441a      	add	r2, r3
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	3304      	adds	r3, #4
 8009eca:	4619      	mov	r1, r3
 8009ecc:	4610      	mov	r0, r2
 8009ece:	f7fe ffad 	bl	8008e2c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed6:	4b1b      	ldr	r3, [pc, #108]	; (8009f44 <xTaskIncrementTick+0x164>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d3b9      	bcc.n	8009e54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ee4:	e7b6      	b.n	8009e54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ee6:	4b17      	ldr	r3, [pc, #92]	; (8009f44 <xTaskIncrementTick+0x164>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eec:	4914      	ldr	r1, [pc, #80]	; (8009f40 <xTaskIncrementTick+0x160>)
 8009eee:	4613      	mov	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4413      	add	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	440b      	add	r3, r1
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d901      	bls.n	8009f02 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009efe:	2301      	movs	r3, #1
 8009f00:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009f02:	4b11      	ldr	r3, [pc, #68]	; (8009f48 <xTaskIncrementTick+0x168>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d007      	beq.n	8009f1a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	617b      	str	r3, [r7, #20]
 8009f0e:	e004      	b.n	8009f1a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009f10:	4b0e      	ldr	r3, [pc, #56]	; (8009f4c <xTaskIncrementTick+0x16c>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3301      	adds	r3, #1
 8009f16:	4a0d      	ldr	r2, [pc, #52]	; (8009f4c <xTaskIncrementTick+0x16c>)
 8009f18:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009f1a:	697b      	ldr	r3, [r7, #20]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3718      	adds	r7, #24
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	200008ec 	.word	0x200008ec
 8009f28:	200008c8 	.word	0x200008c8
 8009f2c:	2000087c 	.word	0x2000087c
 8009f30:	20000880 	.word	0x20000880
 8009f34:	200008dc 	.word	0x200008dc
 8009f38:	200008e4 	.word	0x200008e4
 8009f3c:	200008cc 	.word	0x200008cc
 8009f40:	200007c8 	.word	0x200007c8
 8009f44:	200007c4 	.word	0x200007c4
 8009f48:	200008d8 	.word	0x200008d8
 8009f4c:	200008d4 	.word	0x200008d4

08009f50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f50:	b480      	push	{r7}
 8009f52:	b087      	sub	sp, #28
 8009f54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f56:	4b29      	ldr	r3, [pc, #164]	; (8009ffc <vTaskSwitchContext+0xac>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d003      	beq.n	8009f66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f5e:	4b28      	ldr	r3, [pc, #160]	; (800a000 <vTaskSwitchContext+0xb0>)
 8009f60:	2201      	movs	r2, #1
 8009f62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f64:	e044      	b.n	8009ff0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009f66:	4b26      	ldr	r3, [pc, #152]	; (800a000 <vTaskSwitchContext+0xb0>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f6c:	4b25      	ldr	r3, [pc, #148]	; (800a004 <vTaskSwitchContext+0xb4>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	fab3 f383 	clz	r3, r3
 8009f78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009f7a:	7afb      	ldrb	r3, [r7, #11]
 8009f7c:	f1c3 031f 	rsb	r3, r3, #31
 8009f80:	617b      	str	r3, [r7, #20]
 8009f82:	4921      	ldr	r1, [pc, #132]	; (800a008 <vTaskSwitchContext+0xb8>)
 8009f84:	697a      	ldr	r2, [r7, #20]
 8009f86:	4613      	mov	r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	4413      	add	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	440b      	add	r3, r1
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d10a      	bne.n	8009fac <vTaskSwitchContext+0x5c>
	__asm volatile
 8009f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9a:	f383 8811 	msr	BASEPRI, r3
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	f3bf 8f4f 	dsb	sy
 8009fa6:	607b      	str	r3, [r7, #4]
}
 8009fa8:	bf00      	nop
 8009faa:	e7fe      	b.n	8009faa <vTaskSwitchContext+0x5a>
 8009fac:	697a      	ldr	r2, [r7, #20]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4413      	add	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	4a14      	ldr	r2, [pc, #80]	; (800a008 <vTaskSwitchContext+0xb8>)
 8009fb8:	4413      	add	r3, r2
 8009fba:	613b      	str	r3, [r7, #16]
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	685a      	ldr	r2, [r3, #4]
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	605a      	str	r2, [r3, #4]
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	685a      	ldr	r2, [r3, #4]
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	3308      	adds	r3, #8
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d104      	bne.n	8009fdc <vTaskSwitchContext+0x8c>
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	685a      	ldr	r2, [r3, #4]
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	605a      	str	r2, [r3, #4]
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	4a0a      	ldr	r2, [pc, #40]	; (800a00c <vTaskSwitchContext+0xbc>)
 8009fe4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009fe6:	4b09      	ldr	r3, [pc, #36]	; (800a00c <vTaskSwitchContext+0xbc>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	334c      	adds	r3, #76	; 0x4c
 8009fec:	4a08      	ldr	r2, [pc, #32]	; (800a010 <vTaskSwitchContext+0xc0>)
 8009fee:	6013      	str	r3, [r2, #0]
}
 8009ff0:	bf00      	nop
 8009ff2:	371c      	adds	r7, #28
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	200008ec 	.word	0x200008ec
 800a000:	200008d8 	.word	0x200008d8
 800a004:	200008cc 	.word	0x200008cc
 800a008:	200007c8 	.word	0x200007c8
 800a00c:	200007c4 	.word	0x200007c4
 800a010:	20000014 	.word	0x20000014

0800a014 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a01c:	f000 f852 	bl	800a0c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a020:	4b06      	ldr	r3, [pc, #24]	; (800a03c <prvIdleTask+0x28>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d9f9      	bls.n	800a01c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a028:	4b05      	ldr	r3, [pc, #20]	; (800a040 <prvIdleTask+0x2c>)
 800a02a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a02e:	601a      	str	r2, [r3, #0]
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a038:	e7f0      	b.n	800a01c <prvIdleTask+0x8>
 800a03a:	bf00      	nop
 800a03c:	200007c8 	.word	0x200007c8
 800a040:	e000ed04 	.word	0xe000ed04

0800a044 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a04a:	2300      	movs	r3, #0
 800a04c:	607b      	str	r3, [r7, #4]
 800a04e:	e00c      	b.n	800a06a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	4613      	mov	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	4413      	add	r3, r2
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4a12      	ldr	r2, [pc, #72]	; (800a0a4 <prvInitialiseTaskLists+0x60>)
 800a05c:	4413      	add	r3, r2
 800a05e:	4618      	mov	r0, r3
 800a060:	f7fe feb7 	bl	8008dd2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	3301      	adds	r3, #1
 800a068:	607b      	str	r3, [r7, #4]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2b06      	cmp	r3, #6
 800a06e:	d9ef      	bls.n	800a050 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a070:	480d      	ldr	r0, [pc, #52]	; (800a0a8 <prvInitialiseTaskLists+0x64>)
 800a072:	f7fe feae 	bl	8008dd2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a076:	480d      	ldr	r0, [pc, #52]	; (800a0ac <prvInitialiseTaskLists+0x68>)
 800a078:	f7fe feab 	bl	8008dd2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a07c:	480c      	ldr	r0, [pc, #48]	; (800a0b0 <prvInitialiseTaskLists+0x6c>)
 800a07e:	f7fe fea8 	bl	8008dd2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a082:	480c      	ldr	r0, [pc, #48]	; (800a0b4 <prvInitialiseTaskLists+0x70>)
 800a084:	f7fe fea5 	bl	8008dd2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a088:	480b      	ldr	r0, [pc, #44]	; (800a0b8 <prvInitialiseTaskLists+0x74>)
 800a08a:	f7fe fea2 	bl	8008dd2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a08e:	4b0b      	ldr	r3, [pc, #44]	; (800a0bc <prvInitialiseTaskLists+0x78>)
 800a090:	4a05      	ldr	r2, [pc, #20]	; (800a0a8 <prvInitialiseTaskLists+0x64>)
 800a092:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a094:	4b0a      	ldr	r3, [pc, #40]	; (800a0c0 <prvInitialiseTaskLists+0x7c>)
 800a096:	4a05      	ldr	r2, [pc, #20]	; (800a0ac <prvInitialiseTaskLists+0x68>)
 800a098:	601a      	str	r2, [r3, #0]
}
 800a09a:	bf00      	nop
 800a09c:	3708      	adds	r7, #8
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	200007c8 	.word	0x200007c8
 800a0a8:	20000854 	.word	0x20000854
 800a0ac:	20000868 	.word	0x20000868
 800a0b0:	20000884 	.word	0x20000884
 800a0b4:	20000898 	.word	0x20000898
 800a0b8:	200008b0 	.word	0x200008b0
 800a0bc:	2000087c 	.word	0x2000087c
 800a0c0:	20000880 	.word	0x20000880

0800a0c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0ca:	e019      	b.n	800a100 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a0cc:	f000 fc4a 	bl	800a964 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0d0:	4b10      	ldr	r3, [pc, #64]	; (800a114 <prvCheckTasksWaitingTermination+0x50>)
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	3304      	adds	r3, #4
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7fe ff02 	bl	8008ee6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a0e2:	4b0d      	ldr	r3, [pc, #52]	; (800a118 <prvCheckTasksWaitingTermination+0x54>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	4a0b      	ldr	r2, [pc, #44]	; (800a118 <prvCheckTasksWaitingTermination+0x54>)
 800a0ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a0ec:	4b0b      	ldr	r3, [pc, #44]	; (800a11c <prvCheckTasksWaitingTermination+0x58>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	4a0a      	ldr	r2, [pc, #40]	; (800a11c <prvCheckTasksWaitingTermination+0x58>)
 800a0f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a0f6:	f000 fc65 	bl	800a9c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f810 	bl	800a120 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a100:	4b06      	ldr	r3, [pc, #24]	; (800a11c <prvCheckTasksWaitingTermination+0x58>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1e1      	bne.n	800a0cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a108:	bf00      	nop
 800a10a:	bf00      	nop
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	20000898 	.word	0x20000898
 800a118:	200008c4 	.word	0x200008c4
 800a11c:	200008ac 	.word	0x200008ac

0800a120 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	334c      	adds	r3, #76	; 0x4c
 800a12c:	4618      	mov	r0, r3
 800a12e:	f001 fdf9 	bl	800bd24 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d108      	bne.n	800a14e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a140:	4618      	mov	r0, r3
 800a142:	f000 fdfd 	bl	800ad40 <vPortFree>
				vPortFree( pxTCB );
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 fdfa 	bl	800ad40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a14c:	e018      	b.n	800a180 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a154:	2b01      	cmp	r3, #1
 800a156:	d103      	bne.n	800a160 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fdf1 	bl	800ad40 <vPortFree>
	}
 800a15e:	e00f      	b.n	800a180 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a166:	2b02      	cmp	r3, #2
 800a168:	d00a      	beq.n	800a180 <prvDeleteTCB+0x60>
	__asm volatile
 800a16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	60fb      	str	r3, [r7, #12]
}
 800a17c:	bf00      	nop
 800a17e:	e7fe      	b.n	800a17e <prvDeleteTCB+0x5e>
	}
 800a180:	bf00      	nop
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a18e:	4b0c      	ldr	r3, [pc, #48]	; (800a1c0 <prvResetNextTaskUnblockTime+0x38>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d104      	bne.n	800a1a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a198:	4b0a      	ldr	r3, [pc, #40]	; (800a1c4 <prvResetNextTaskUnblockTime+0x3c>)
 800a19a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a19e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a1a0:	e008      	b.n	800a1b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1a2:	4b07      	ldr	r3, [pc, #28]	; (800a1c0 <prvResetNextTaskUnblockTime+0x38>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	4a04      	ldr	r2, [pc, #16]	; (800a1c4 <prvResetNextTaskUnblockTime+0x3c>)
 800a1b2:	6013      	str	r3, [r2, #0]
}
 800a1b4:	bf00      	nop
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr
 800a1c0:	2000087c 	.word	0x2000087c
 800a1c4:	200008e4 	.word	0x200008e4

0800a1c8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a1ce:	4b05      	ldr	r3, [pc, #20]	; (800a1e4 <xTaskGetCurrentTaskHandle+0x1c>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a1d4:	687b      	ldr	r3, [r7, #4]
	}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	370c      	adds	r7, #12
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	200007c4 	.word	0x200007c4

0800a1e8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
 800a1f4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800a1f6:	f000 fbb5 	bl	800a964 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a1fa:	4b29      	ldr	r3, [pc, #164]	; (800a2a0 <xTaskNotifyWait+0xb8>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800a202:	b2db      	uxtb	r3, r3
 800a204:	2b02      	cmp	r3, #2
 800a206:	d01c      	beq.n	800a242 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a208:	4b25      	ldr	r3, [pc, #148]	; (800a2a0 <xTaskNotifyWait+0xb8>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	43d2      	mvns	r2, r2
 800a214:	400a      	ands	r2, r1
 800a216:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a21a:	4b21      	ldr	r3, [pc, #132]	; (800a2a0 <xTaskNotifyWait+0xb8>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d00b      	beq.n	800a242 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a22a:	2101      	movs	r1, #1
 800a22c:	6838      	ldr	r0, [r7, #0]
 800a22e:	f000 fa03 	bl	800a638 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a232:	4b1c      	ldr	r3, [pc, #112]	; (800a2a4 <xTaskNotifyWait+0xbc>)
 800a234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a238:	601a      	str	r2, [r3, #0]
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a242:	f000 fbbf 	bl	800a9c4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800a246:	f000 fb8d 	bl	800a964 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d005      	beq.n	800a25c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a250:	4b13      	ldr	r3, [pc, #76]	; (800a2a0 <xTaskNotifyWait+0xb8>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a25c:	4b10      	ldr	r3, [pc, #64]	; (800a2a0 <xTaskNotifyWait+0xb8>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800a264:	b2db      	uxtb	r3, r3
 800a266:	2b02      	cmp	r3, #2
 800a268:	d002      	beq.n	800a270 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800a26a:	2300      	movs	r3, #0
 800a26c:	617b      	str	r3, [r7, #20]
 800a26e:	e00a      	b.n	800a286 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a270:	4b0b      	ldr	r3, [pc, #44]	; (800a2a0 <xTaskNotifyWait+0xb8>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	43d2      	mvns	r2, r2
 800a27c:	400a      	ands	r2, r1
 800a27e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 800a282:	2301      	movs	r3, #1
 800a284:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a286:	4b06      	ldr	r3, [pc, #24]	; (800a2a0 <xTaskNotifyWait+0xb8>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 800a290:	f000 fb98 	bl	800a9c4 <vPortExitCritical>

		return xReturn;
 800a294:	697b      	ldr	r3, [r7, #20]
	}
 800a296:	4618      	mov	r0, r3
 800a298:	3718      	adds	r7, #24
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	200007c4 	.word	0x200007c4
 800a2a4:	e000ed04 	.word	0xe000ed04

0800a2a8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b08a      	sub	sp, #40	; 0x28
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	603b      	str	r3, [r7, #0]
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10a      	bne.n	800a2d8 <xTaskGenericNotify+0x30>
	__asm volatile
 800a2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	61bb      	str	r3, [r7, #24]
}
 800a2d4:	bf00      	nop
 800a2d6:	e7fe      	b.n	800a2d6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a2dc:	f000 fb42 	bl	800a964 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d004      	beq.n	800a2f0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a2e6:	6a3b      	ldr	r3, [r7, #32]
 800a2e8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800a2f6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	2202      	movs	r2, #2
 800a2fc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 800a300:	79fb      	ldrb	r3, [r7, #7]
 800a302:	2b04      	cmp	r3, #4
 800a304:	d82d      	bhi.n	800a362 <xTaskGenericNotify+0xba>
 800a306:	a201      	add	r2, pc, #4	; (adr r2, 800a30c <xTaskGenericNotify+0x64>)
 800a308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30c:	0800a385 	.word	0x0800a385
 800a310:	0800a321 	.word	0x0800a321
 800a314:	0800a333 	.word	0x0800a333
 800a318:	0800a343 	.word	0x0800a343
 800a31c:	0800a34d 	.word	0x0800a34d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a320:	6a3b      	ldr	r3, [r7, #32]
 800a322:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	431a      	orrs	r2, r3
 800a32a:	6a3b      	ldr	r3, [r7, #32]
 800a32c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800a330:	e02b      	b.n	800a38a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a332:	6a3b      	ldr	r3, [r7, #32]
 800a334:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a338:	1c5a      	adds	r2, r3, #1
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800a340:	e023      	b.n	800a38a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a342:	6a3b      	ldr	r3, [r7, #32]
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800a34a:	e01e      	b.n	800a38a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a34c:	7ffb      	ldrb	r3, [r7, #31]
 800a34e:	2b02      	cmp	r3, #2
 800a350:	d004      	beq.n	800a35c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a352:	6a3b      	ldr	r3, [r7, #32]
 800a354:	68ba      	ldr	r2, [r7, #8]
 800a356:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a35a:	e016      	b.n	800a38a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800a35c:	2300      	movs	r3, #0
 800a35e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800a360:	e013      	b.n	800a38a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a362:	6a3b      	ldr	r3, [r7, #32]
 800a364:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a368:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a36c:	d00c      	beq.n	800a388 <xTaskGenericNotify+0xe0>
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	617b      	str	r3, [r7, #20]
}
 800a380:	bf00      	nop
 800a382:	e7fe      	b.n	800a382 <xTaskGenericNotify+0xda>
					break;
 800a384:	bf00      	nop
 800a386:	e000      	b.n	800a38a <xTaskGenericNotify+0xe2>

					break;
 800a388:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a38a:	7ffb      	ldrb	r3, [r7, #31]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d139      	bne.n	800a404 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a390:	6a3b      	ldr	r3, [r7, #32]
 800a392:	3304      	adds	r3, #4
 800a394:	4618      	mov	r0, r3
 800a396:	f7fe fda6 	bl	8008ee6 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a39a:	6a3b      	ldr	r3, [r7, #32]
 800a39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39e:	2201      	movs	r2, #1
 800a3a0:	409a      	lsls	r2, r3
 800a3a2:	4b1c      	ldr	r3, [pc, #112]	; (800a414 <xTaskGenericNotify+0x16c>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	4a1a      	ldr	r2, [pc, #104]	; (800a414 <xTaskGenericNotify+0x16c>)
 800a3aa:	6013      	str	r3, [r2, #0]
 800a3ac:	6a3b      	ldr	r3, [r7, #32]
 800a3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	4a17      	ldr	r2, [pc, #92]	; (800a418 <xTaskGenericNotify+0x170>)
 800a3ba:	441a      	add	r2, r3
 800a3bc:	6a3b      	ldr	r3, [r7, #32]
 800a3be:	3304      	adds	r3, #4
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	4610      	mov	r0, r2
 800a3c4:	f7fe fd32 	bl	8008e2c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a3c8:	6a3b      	ldr	r3, [r7, #32]
 800a3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00a      	beq.n	800a3e6 <xTaskGenericNotify+0x13e>
	__asm volatile
 800a3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d4:	f383 8811 	msr	BASEPRI, r3
 800a3d8:	f3bf 8f6f 	isb	sy
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	613b      	str	r3, [r7, #16]
}
 800a3e2:	bf00      	nop
 800a3e4:	e7fe      	b.n	800a3e4 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a3e6:	6a3b      	ldr	r3, [r7, #32]
 800a3e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ea:	4b0c      	ldr	r3, [pc, #48]	; (800a41c <xTaskGenericNotify+0x174>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d907      	bls.n	800a404 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a3f4:	4b0a      	ldr	r3, [pc, #40]	; (800a420 <xTaskGenericNotify+0x178>)
 800a3f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3fa:	601a      	str	r2, [r3, #0]
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a404:	f000 fade 	bl	800a9c4 <vPortExitCritical>

		return xReturn;
 800a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3728      	adds	r7, #40	; 0x28
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	200008cc 	.word	0x200008cc
 800a418:	200007c8 	.word	0x200007c8
 800a41c:	200007c4 	.word	0x200007c4
 800a420:	e000ed04 	.word	0xe000ed04

0800a424 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a424:	b580      	push	{r7, lr}
 800a426:	b08e      	sub	sp, #56	; 0x38
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	603b      	str	r3, [r7, #0]
 800a430:	4613      	mov	r3, r2
 800a432:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a434:	2301      	movs	r3, #1
 800a436:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d10a      	bne.n	800a454 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800a43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a450:	bf00      	nop
 800a452:	e7fe      	b.n	800a452 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a454:	f000 fb68 	bl	800ab28 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800a45c:	f3ef 8211 	mrs	r2, BASEPRI
 800a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	623a      	str	r2, [r7, #32]
 800a472:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800a474:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a476:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d004      	beq.n	800a488 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a480:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800a48e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a494:	2202      	movs	r2, #2
 800a496:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 800a49a:	79fb      	ldrb	r3, [r7, #7]
 800a49c:	2b04      	cmp	r3, #4
 800a49e:	d82f      	bhi.n	800a500 <xTaskGenericNotifyFromISR+0xdc>
 800a4a0:	a201      	add	r2, pc, #4	; (adr r2, 800a4a8 <xTaskGenericNotifyFromISR+0x84>)
 800a4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a6:	bf00      	nop
 800a4a8:	0800a523 	.word	0x0800a523
 800a4ac:	0800a4bd 	.word	0x0800a4bd
 800a4b0:	0800a4cf 	.word	0x0800a4cf
 800a4b4:	0800a4df 	.word	0x0800a4df
 800a4b8:	0800a4e9 	.word	0x0800a4e9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4be:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	431a      	orrs	r2, r3
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800a4cc:	e02c      	b.n	800a528 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a4d4:	1c5a      	adds	r2, r3, #1
 800a4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800a4dc:	e024      	b.n	800a528 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e0:	68ba      	ldr	r2, [r7, #8]
 800a4e2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800a4e6:	e01f      	b.n	800a528 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a4e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	d004      	beq.n	800a4fa <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f2:	68ba      	ldr	r2, [r7, #8]
 800a4f4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a4f8:	e016      	b.n	800a528 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800a4fe:	e013      	b.n	800a528 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a502:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a50a:	d00c      	beq.n	800a526 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800a50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a510:	f383 8811 	msr	BASEPRI, r3
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	61bb      	str	r3, [r7, #24]
}
 800a51e:	bf00      	nop
 800a520:	e7fe      	b.n	800a520 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800a522:	bf00      	nop
 800a524:	e000      	b.n	800a528 <xTaskGenericNotifyFromISR+0x104>
					break;
 800a526:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a528:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d145      	bne.n	800a5bc <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00a      	beq.n	800a54e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800a538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53c:	f383 8811 	msr	BASEPRI, r3
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	617b      	str	r3, [r7, #20]
}
 800a54a:	bf00      	nop
 800a54c:	e7fe      	b.n	800a54c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a54e:	4b21      	ldr	r3, [pc, #132]	; (800a5d4 <xTaskGenericNotifyFromISR+0x1b0>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d11c      	bne.n	800a590 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a558:	3304      	adds	r3, #4
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7fe fcc3 	bl	8008ee6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a564:	2201      	movs	r2, #1
 800a566:	409a      	lsls	r2, r3
 800a568:	4b1b      	ldr	r3, [pc, #108]	; (800a5d8 <xTaskGenericNotifyFromISR+0x1b4>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4313      	orrs	r3, r2
 800a56e:	4a1a      	ldr	r2, [pc, #104]	; (800a5d8 <xTaskGenericNotifyFromISR+0x1b4>)
 800a570:	6013      	str	r3, [r2, #0]
 800a572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a576:	4613      	mov	r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4413      	add	r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4a17      	ldr	r2, [pc, #92]	; (800a5dc <xTaskGenericNotifyFromISR+0x1b8>)
 800a580:	441a      	add	r2, r3
 800a582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a584:	3304      	adds	r3, #4
 800a586:	4619      	mov	r1, r3
 800a588:	4610      	mov	r0, r2
 800a58a:	f7fe fc4f 	bl	8008e2c <vListInsertEnd>
 800a58e:	e005      	b.n	800a59c <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a592:	3318      	adds	r3, #24
 800a594:	4619      	mov	r1, r3
 800a596:	4812      	ldr	r0, [pc, #72]	; (800a5e0 <xTaskGenericNotifyFromISR+0x1bc>)
 800a598:	f7fe fc48 	bl	8008e2c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a0:	4b10      	ldr	r3, [pc, #64]	; (800a5e4 <xTaskGenericNotifyFromISR+0x1c0>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d908      	bls.n	800a5bc <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a5aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d002      	beq.n	800a5b6 <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a5b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a5b6:	4b0c      	ldr	r3, [pc, #48]	; (800a5e8 <xTaskGenericNotifyFromISR+0x1c4>)
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	601a      	str	r2, [r3, #0]
 800a5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5be:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	f383 8811 	msr	BASEPRI, r3
}
 800a5c6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3738      	adds	r7, #56	; 0x38
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	200008ec 	.word	0x200008ec
 800a5d8:	200008cc 	.word	0x200008cc
 800a5dc:	200007c8 	.word	0x200007c8
 800a5e0:	20000884 	.word	0x20000884
 800a5e4:	200007c4 	.word	0x200007c4
 800a5e8:	200008d8 	.word	0x200008d8

0800a5ec <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d102      	bne.n	800a600 <xTaskNotifyStateClear+0x14>
 800a5fa:	4b0e      	ldr	r3, [pc, #56]	; (800a634 <xTaskNotifyStateClear+0x48>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	e000      	b.n	800a602 <xTaskNotifyStateClear+0x16>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800a604:	f000 f9ae 	bl	800a964 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b02      	cmp	r3, #2
 800a612:	d106      	bne.n	800a622 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	2200      	movs	r2, #0
 800a618:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				xReturn = pdPASS;
 800a61c:	2301      	movs	r3, #1
 800a61e:	60fb      	str	r3, [r7, #12]
 800a620:	e001      	b.n	800a626 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800a622:	2300      	movs	r3, #0
 800a624:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800a626:	f000 f9cd 	bl	800a9c4 <vPortExitCritical>

		return xReturn;
 800a62a:	68fb      	ldr	r3, [r7, #12]
	}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	200007c4 	.word	0x200007c4

0800a638 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a642:	4b29      	ldr	r3, [pc, #164]	; (800a6e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a648:	4b28      	ldr	r3, [pc, #160]	; (800a6ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	3304      	adds	r3, #4
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fe fc49 	bl	8008ee6 <uxListRemove>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10b      	bne.n	800a672 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a65a:	4b24      	ldr	r3, [pc, #144]	; (800a6ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a660:	2201      	movs	r2, #1
 800a662:	fa02 f303 	lsl.w	r3, r2, r3
 800a666:	43da      	mvns	r2, r3
 800a668:	4b21      	ldr	r3, [pc, #132]	; (800a6f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4013      	ands	r3, r2
 800a66e:	4a20      	ldr	r2, [pc, #128]	; (800a6f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a670:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a678:	d10a      	bne.n	800a690 <prvAddCurrentTaskToDelayedList+0x58>
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d007      	beq.n	800a690 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a680:	4b1a      	ldr	r3, [pc, #104]	; (800a6ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	3304      	adds	r3, #4
 800a686:	4619      	mov	r1, r3
 800a688:	481a      	ldr	r0, [pc, #104]	; (800a6f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a68a:	f7fe fbcf 	bl	8008e2c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a68e:	e026      	b.n	800a6de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4413      	add	r3, r2
 800a696:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a698:	4b14      	ldr	r3, [pc, #80]	; (800a6ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a6a0:	68ba      	ldr	r2, [r7, #8]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d209      	bcs.n	800a6bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6a8:	4b13      	ldr	r3, [pc, #76]	; (800a6f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	4b0f      	ldr	r3, [pc, #60]	; (800a6ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	3304      	adds	r3, #4
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	f7fe fbdd 	bl	8008e74 <vListInsert>
}
 800a6ba:	e010      	b.n	800a6de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6bc:	4b0f      	ldr	r3, [pc, #60]	; (800a6fc <prvAddCurrentTaskToDelayedList+0xc4>)
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	4b0a      	ldr	r3, [pc, #40]	; (800a6ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	3304      	adds	r3, #4
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	f7fe fbd3 	bl	8008e74 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a6ce:	4b0c      	ldr	r3, [pc, #48]	; (800a700 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68ba      	ldr	r2, [r7, #8]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d202      	bcs.n	800a6de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a6d8:	4a09      	ldr	r2, [pc, #36]	; (800a700 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	6013      	str	r3, [r2, #0]
}
 800a6de:	bf00      	nop
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	200008c8 	.word	0x200008c8
 800a6ec:	200007c4 	.word	0x200007c4
 800a6f0:	200008cc 	.word	0x200008cc
 800a6f4:	200008b0 	.word	0x200008b0
 800a6f8:	20000880 	.word	0x20000880
 800a6fc:	2000087c 	.word	0x2000087c
 800a700:	200008e4 	.word	0x200008e4

0800a704 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	3b04      	subs	r3, #4
 800a714:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a71c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	3b04      	subs	r3, #4
 800a722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	f023 0201 	bic.w	r2, r3, #1
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	3b04      	subs	r3, #4
 800a732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a734:	4a0c      	ldr	r2, [pc, #48]	; (800a768 <pxPortInitialiseStack+0x64>)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	3b14      	subs	r3, #20
 800a73e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3b04      	subs	r3, #4
 800a74a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f06f 0202 	mvn.w	r2, #2
 800a752:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	3b20      	subs	r3, #32
 800a758:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a75a:	68fb      	ldr	r3, [r7, #12]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	0800a76d 	.word	0x0800a76d

0800a76c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a772:	2300      	movs	r3, #0
 800a774:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a776:	4b12      	ldr	r3, [pc, #72]	; (800a7c0 <prvTaskExitError+0x54>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a77e:	d00a      	beq.n	800a796 <prvTaskExitError+0x2a>
	__asm volatile
 800a780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a784:	f383 8811 	msr	BASEPRI, r3
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	60fb      	str	r3, [r7, #12]
}
 800a792:	bf00      	nop
 800a794:	e7fe      	b.n	800a794 <prvTaskExitError+0x28>
	__asm volatile
 800a796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	60bb      	str	r3, [r7, #8]
}
 800a7a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a7aa:	bf00      	nop
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d0fc      	beq.n	800a7ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a7b2:	bf00      	nop
 800a7b4:	bf00      	nop
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr
 800a7c0:	20000010 	.word	0x20000010
	...

0800a7d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a7d0:	4b07      	ldr	r3, [pc, #28]	; (800a7f0 <pxCurrentTCBConst2>)
 800a7d2:	6819      	ldr	r1, [r3, #0]
 800a7d4:	6808      	ldr	r0, [r1, #0]
 800a7d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7da:	f380 8809 	msr	PSP, r0
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f04f 0000 	mov.w	r0, #0
 800a7e6:	f380 8811 	msr	BASEPRI, r0
 800a7ea:	4770      	bx	lr
 800a7ec:	f3af 8000 	nop.w

0800a7f0 <pxCurrentTCBConst2>:
 800a7f0:	200007c4 	.word	0x200007c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a7f4:	bf00      	nop
 800a7f6:	bf00      	nop

0800a7f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a7f8:	4808      	ldr	r0, [pc, #32]	; (800a81c <prvPortStartFirstTask+0x24>)
 800a7fa:	6800      	ldr	r0, [r0, #0]
 800a7fc:	6800      	ldr	r0, [r0, #0]
 800a7fe:	f380 8808 	msr	MSP, r0
 800a802:	f04f 0000 	mov.w	r0, #0
 800a806:	f380 8814 	msr	CONTROL, r0
 800a80a:	b662      	cpsie	i
 800a80c:	b661      	cpsie	f
 800a80e:	f3bf 8f4f 	dsb	sy
 800a812:	f3bf 8f6f 	isb	sy
 800a816:	df00      	svc	0
 800a818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a81a:	bf00      	nop
 800a81c:	e000ed08 	.word	0xe000ed08

0800a820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a826:	4b46      	ldr	r3, [pc, #280]	; (800a940 <xPortStartScheduler+0x120>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a46      	ldr	r2, [pc, #280]	; (800a944 <xPortStartScheduler+0x124>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d10a      	bne.n	800a846 <xPortStartScheduler+0x26>
	__asm volatile
 800a830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	613b      	str	r3, [r7, #16]
}
 800a842:	bf00      	nop
 800a844:	e7fe      	b.n	800a844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a846:	4b3e      	ldr	r3, [pc, #248]	; (800a940 <xPortStartScheduler+0x120>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a3f      	ldr	r2, [pc, #252]	; (800a948 <xPortStartScheduler+0x128>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d10a      	bne.n	800a866 <xPortStartScheduler+0x46>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	60fb      	str	r3, [r7, #12]
}
 800a862:	bf00      	nop
 800a864:	e7fe      	b.n	800a864 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a866:	4b39      	ldr	r3, [pc, #228]	; (800a94c <xPortStartScheduler+0x12c>)
 800a868:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	22ff      	movs	r2, #255	; 0xff
 800a876:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a880:	78fb      	ldrb	r3, [r7, #3]
 800a882:	b2db      	uxtb	r3, r3
 800a884:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a888:	b2da      	uxtb	r2, r3
 800a88a:	4b31      	ldr	r3, [pc, #196]	; (800a950 <xPortStartScheduler+0x130>)
 800a88c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a88e:	4b31      	ldr	r3, [pc, #196]	; (800a954 <xPortStartScheduler+0x134>)
 800a890:	2207      	movs	r2, #7
 800a892:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a894:	e009      	b.n	800a8aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a896:	4b2f      	ldr	r3, [pc, #188]	; (800a954 <xPortStartScheduler+0x134>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	3b01      	subs	r3, #1
 800a89c:	4a2d      	ldr	r2, [pc, #180]	; (800a954 <xPortStartScheduler+0x134>)
 800a89e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a8a0:	78fb      	ldrb	r3, [r7, #3]
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	005b      	lsls	r3, r3, #1
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8aa:	78fb      	ldrb	r3, [r7, #3]
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8b2:	2b80      	cmp	r3, #128	; 0x80
 800a8b4:	d0ef      	beq.n	800a896 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a8b6:	4b27      	ldr	r3, [pc, #156]	; (800a954 <xPortStartScheduler+0x134>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f1c3 0307 	rsb	r3, r3, #7
 800a8be:	2b04      	cmp	r3, #4
 800a8c0:	d00a      	beq.n	800a8d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c6:	f383 8811 	msr	BASEPRI, r3
 800a8ca:	f3bf 8f6f 	isb	sy
 800a8ce:	f3bf 8f4f 	dsb	sy
 800a8d2:	60bb      	str	r3, [r7, #8]
}
 800a8d4:	bf00      	nop
 800a8d6:	e7fe      	b.n	800a8d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a8d8:	4b1e      	ldr	r3, [pc, #120]	; (800a954 <xPortStartScheduler+0x134>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	021b      	lsls	r3, r3, #8
 800a8de:	4a1d      	ldr	r2, [pc, #116]	; (800a954 <xPortStartScheduler+0x134>)
 800a8e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8e2:	4b1c      	ldr	r3, [pc, #112]	; (800a954 <xPortStartScheduler+0x134>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8ea:	4a1a      	ldr	r2, [pc, #104]	; (800a954 <xPortStartScheduler+0x134>)
 800a8ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	b2da      	uxtb	r2, r3
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8f6:	4b18      	ldr	r3, [pc, #96]	; (800a958 <xPortStartScheduler+0x138>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a17      	ldr	r2, [pc, #92]	; (800a958 <xPortStartScheduler+0x138>)
 800a8fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a900:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a902:	4b15      	ldr	r3, [pc, #84]	; (800a958 <xPortStartScheduler+0x138>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a14      	ldr	r2, [pc, #80]	; (800a958 <xPortStartScheduler+0x138>)
 800a908:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a90c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a90e:	f000 f8dd 	bl	800aacc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a912:	4b12      	ldr	r3, [pc, #72]	; (800a95c <xPortStartScheduler+0x13c>)
 800a914:	2200      	movs	r2, #0
 800a916:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a918:	f000 f8fc 	bl	800ab14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a91c:	4b10      	ldr	r3, [pc, #64]	; (800a960 <xPortStartScheduler+0x140>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a0f      	ldr	r2, [pc, #60]	; (800a960 <xPortStartScheduler+0x140>)
 800a922:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a926:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a928:	f7ff ff66 	bl	800a7f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a92c:	f7ff fb10 	bl	8009f50 <vTaskSwitchContext>
	prvTaskExitError();
 800a930:	f7ff ff1c 	bl	800a76c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3718      	adds	r7, #24
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	e000ed00 	.word	0xe000ed00
 800a944:	410fc271 	.word	0x410fc271
 800a948:	410fc270 	.word	0x410fc270
 800a94c:	e000e400 	.word	0xe000e400
 800a950:	200008f0 	.word	0x200008f0
 800a954:	200008f4 	.word	0x200008f4
 800a958:	e000ed20 	.word	0xe000ed20
 800a95c:	20000010 	.word	0x20000010
 800a960:	e000ef34 	.word	0xe000ef34

0800a964 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
	__asm volatile
 800a96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96e:	f383 8811 	msr	BASEPRI, r3
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	f3bf 8f4f 	dsb	sy
 800a97a:	607b      	str	r3, [r7, #4]
}
 800a97c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a97e:	4b0f      	ldr	r3, [pc, #60]	; (800a9bc <vPortEnterCritical+0x58>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	3301      	adds	r3, #1
 800a984:	4a0d      	ldr	r2, [pc, #52]	; (800a9bc <vPortEnterCritical+0x58>)
 800a986:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a988:	4b0c      	ldr	r3, [pc, #48]	; (800a9bc <vPortEnterCritical+0x58>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d10f      	bne.n	800a9b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a990:	4b0b      	ldr	r3, [pc, #44]	; (800a9c0 <vPortEnterCritical+0x5c>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	b2db      	uxtb	r3, r3
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00a      	beq.n	800a9b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	603b      	str	r3, [r7, #0]
}
 800a9ac:	bf00      	nop
 800a9ae:	e7fe      	b.n	800a9ae <vPortEnterCritical+0x4a>
	}
}
 800a9b0:	bf00      	nop
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	20000010 	.word	0x20000010
 800a9c0:	e000ed04 	.word	0xe000ed04

0800a9c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a9ca:	4b12      	ldr	r3, [pc, #72]	; (800aa14 <vPortExitCritical+0x50>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10a      	bne.n	800a9e8 <vPortExitCritical+0x24>
	__asm volatile
 800a9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	607b      	str	r3, [r7, #4]
}
 800a9e4:	bf00      	nop
 800a9e6:	e7fe      	b.n	800a9e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a9e8:	4b0a      	ldr	r3, [pc, #40]	; (800aa14 <vPortExitCritical+0x50>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	4a09      	ldr	r2, [pc, #36]	; (800aa14 <vPortExitCritical+0x50>)
 800a9f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9f2:	4b08      	ldr	r3, [pc, #32]	; (800aa14 <vPortExitCritical+0x50>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d105      	bne.n	800aa06 <vPortExitCritical+0x42>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	f383 8811 	msr	BASEPRI, r3
}
 800aa04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa06:	bf00      	nop
 800aa08:	370c      	adds	r7, #12
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	20000010 	.word	0x20000010
	...

0800aa20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa20:	f3ef 8009 	mrs	r0, PSP
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	4b15      	ldr	r3, [pc, #84]	; (800aa80 <pxCurrentTCBConst>)
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	f01e 0f10 	tst.w	lr, #16
 800aa30:	bf08      	it	eq
 800aa32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3a:	6010      	str	r0, [r2, #0]
 800aa3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa44:	f380 8811 	msr	BASEPRI, r0
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	f3bf 8f6f 	isb	sy
 800aa50:	f7ff fa7e 	bl	8009f50 <vTaskSwitchContext>
 800aa54:	f04f 0000 	mov.w	r0, #0
 800aa58:	f380 8811 	msr	BASEPRI, r0
 800aa5c:	bc09      	pop	{r0, r3}
 800aa5e:	6819      	ldr	r1, [r3, #0]
 800aa60:	6808      	ldr	r0, [r1, #0]
 800aa62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa66:	f01e 0f10 	tst.w	lr, #16
 800aa6a:	bf08      	it	eq
 800aa6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa70:	f380 8809 	msr	PSP, r0
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	f3af 8000 	nop.w

0800aa80 <pxCurrentTCBConst>:
 800aa80:	200007c4 	.word	0x200007c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa84:	bf00      	nop
 800aa86:	bf00      	nop

0800aa88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	607b      	str	r3, [r7, #4]
}
 800aaa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aaa2:	f7ff f99d 	bl	8009de0 <xTaskIncrementTick>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d003      	beq.n	800aab4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aaac:	4b06      	ldr	r3, [pc, #24]	; (800aac8 <SysTick_Handler+0x40>)
 800aaae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aab2:	601a      	str	r2, [r3, #0]
 800aab4:	2300      	movs	r3, #0
 800aab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	f383 8811 	msr	BASEPRI, r3
}
 800aabe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aac0:	bf00      	nop
 800aac2:	3708      	adds	r7, #8
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	e000ed04 	.word	0xe000ed04

0800aacc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aacc:	b480      	push	{r7}
 800aace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aad0:	4b0b      	ldr	r3, [pc, #44]	; (800ab00 <vPortSetupTimerInterrupt+0x34>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aad6:	4b0b      	ldr	r3, [pc, #44]	; (800ab04 <vPortSetupTimerInterrupt+0x38>)
 800aad8:	2200      	movs	r2, #0
 800aada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aadc:	4b0a      	ldr	r3, [pc, #40]	; (800ab08 <vPortSetupTimerInterrupt+0x3c>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a0a      	ldr	r2, [pc, #40]	; (800ab0c <vPortSetupTimerInterrupt+0x40>)
 800aae2:	fba2 2303 	umull	r2, r3, r2, r3
 800aae6:	099b      	lsrs	r3, r3, #6
 800aae8:	4a09      	ldr	r2, [pc, #36]	; (800ab10 <vPortSetupTimerInterrupt+0x44>)
 800aaea:	3b01      	subs	r3, #1
 800aaec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aaee:	4b04      	ldr	r3, [pc, #16]	; (800ab00 <vPortSetupTimerInterrupt+0x34>)
 800aaf0:	2207      	movs	r2, #7
 800aaf2:	601a      	str	r2, [r3, #0]
}
 800aaf4:	bf00      	nop
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	e000e010 	.word	0xe000e010
 800ab04:	e000e018 	.word	0xe000e018
 800ab08:	20000004 	.word	0x20000004
 800ab0c:	10624dd3 	.word	0x10624dd3
 800ab10:	e000e014 	.word	0xe000e014

0800ab14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ab24 <vPortEnableVFP+0x10>
 800ab18:	6801      	ldr	r1, [r0, #0]
 800ab1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ab1e:	6001      	str	r1, [r0, #0]
 800ab20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab22:	bf00      	nop
 800ab24:	e000ed88 	.word	0xe000ed88

0800ab28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab28:	b480      	push	{r7}
 800ab2a:	b085      	sub	sp, #20
 800ab2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab2e:	f3ef 8305 	mrs	r3, IPSR
 800ab32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2b0f      	cmp	r3, #15
 800ab38:	d914      	bls.n	800ab64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab3a:	4a17      	ldr	r2, [pc, #92]	; (800ab98 <vPortValidateInterruptPriority+0x70>)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	4413      	add	r3, r2
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab44:	4b15      	ldr	r3, [pc, #84]	; (800ab9c <vPortValidateInterruptPriority+0x74>)
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	7afa      	ldrb	r2, [r7, #11]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d20a      	bcs.n	800ab64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ab4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab52:	f383 8811 	msr	BASEPRI, r3
 800ab56:	f3bf 8f6f 	isb	sy
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	607b      	str	r3, [r7, #4]
}
 800ab60:	bf00      	nop
 800ab62:	e7fe      	b.n	800ab62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab64:	4b0e      	ldr	r3, [pc, #56]	; (800aba0 <vPortValidateInterruptPriority+0x78>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab6c:	4b0d      	ldr	r3, [pc, #52]	; (800aba4 <vPortValidateInterruptPriority+0x7c>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d90a      	bls.n	800ab8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ab74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab78:	f383 8811 	msr	BASEPRI, r3
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	603b      	str	r3, [r7, #0]
}
 800ab86:	bf00      	nop
 800ab88:	e7fe      	b.n	800ab88 <vPortValidateInterruptPriority+0x60>
	}
 800ab8a:	bf00      	nop
 800ab8c:	3714      	adds	r7, #20
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr
 800ab96:	bf00      	nop
 800ab98:	e000e3f0 	.word	0xe000e3f0
 800ab9c:	200008f0 	.word	0x200008f0
 800aba0:	e000ed0c 	.word	0xe000ed0c
 800aba4:	200008f4 	.word	0x200008f4

0800aba8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b08a      	sub	sp, #40	; 0x28
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800abb0:	2300      	movs	r3, #0
 800abb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800abb4:	f7ff f85a 	bl	8009c6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800abb8:	4b5b      	ldr	r3, [pc, #364]	; (800ad28 <pvPortMalloc+0x180>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d101      	bne.n	800abc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800abc0:	f000 f920 	bl	800ae04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800abc4:	4b59      	ldr	r3, [pc, #356]	; (800ad2c <pvPortMalloc+0x184>)
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4013      	ands	r3, r2
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f040 8093 	bne.w	800acf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d01d      	beq.n	800ac14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800abd8:	2208      	movs	r2, #8
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4413      	add	r3, r2
 800abde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f003 0307 	and.w	r3, r3, #7
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d014      	beq.n	800ac14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f023 0307 	bic.w	r3, r3, #7
 800abf0:	3308      	adds	r3, #8
 800abf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f003 0307 	and.w	r3, r3, #7
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00a      	beq.n	800ac14 <pvPortMalloc+0x6c>
	__asm volatile
 800abfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac02:	f383 8811 	msr	BASEPRI, r3
 800ac06:	f3bf 8f6f 	isb	sy
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	617b      	str	r3, [r7, #20]
}
 800ac10:	bf00      	nop
 800ac12:	e7fe      	b.n	800ac12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d06e      	beq.n	800acf8 <pvPortMalloc+0x150>
 800ac1a:	4b45      	ldr	r3, [pc, #276]	; (800ad30 <pvPortMalloc+0x188>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d869      	bhi.n	800acf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac24:	4b43      	ldr	r3, [pc, #268]	; (800ad34 <pvPortMalloc+0x18c>)
 800ac26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac28:	4b42      	ldr	r3, [pc, #264]	; (800ad34 <pvPortMalloc+0x18c>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac2e:	e004      	b.n	800ac3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d903      	bls.n	800ac4c <pvPortMalloc+0xa4>
 800ac44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1f1      	bne.n	800ac30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac4c:	4b36      	ldr	r3, [pc, #216]	; (800ad28 <pvPortMalloc+0x180>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d050      	beq.n	800acf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac56:	6a3b      	ldr	r3, [r7, #32]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2208      	movs	r2, #8
 800ac5c:	4413      	add	r3, r2
 800ac5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	6a3b      	ldr	r3, [r7, #32]
 800ac66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6a:	685a      	ldr	r2, [r3, #4]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	1ad2      	subs	r2, r2, r3
 800ac70:	2308      	movs	r3, #8
 800ac72:	005b      	lsls	r3, r3, #1
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d91f      	bls.n	800acb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	f003 0307 	and.w	r3, r3, #7
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00a      	beq.n	800aca0 <pvPortMalloc+0xf8>
	__asm volatile
 800ac8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8e:	f383 8811 	msr	BASEPRI, r3
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	613b      	str	r3, [r7, #16]
}
 800ac9c:	bf00      	nop
 800ac9e:	e7fe      	b.n	800ac9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca2:	685a      	ldr	r2, [r3, #4]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	1ad2      	subs	r2, r2, r3
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800acac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800acb2:	69b8      	ldr	r0, [r7, #24]
 800acb4:	f000 f908 	bl	800aec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800acb8:	4b1d      	ldr	r3, [pc, #116]	; (800ad30 <pvPortMalloc+0x188>)
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	1ad3      	subs	r3, r2, r3
 800acc2:	4a1b      	ldr	r2, [pc, #108]	; (800ad30 <pvPortMalloc+0x188>)
 800acc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800acc6:	4b1a      	ldr	r3, [pc, #104]	; (800ad30 <pvPortMalloc+0x188>)
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	4b1b      	ldr	r3, [pc, #108]	; (800ad38 <pvPortMalloc+0x190>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d203      	bcs.n	800acda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800acd2:	4b17      	ldr	r3, [pc, #92]	; (800ad30 <pvPortMalloc+0x188>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a18      	ldr	r2, [pc, #96]	; (800ad38 <pvPortMalloc+0x190>)
 800acd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acdc:	685a      	ldr	r2, [r3, #4]
 800acde:	4b13      	ldr	r3, [pc, #76]	; (800ad2c <pvPortMalloc+0x184>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	431a      	orrs	r2, r3
 800ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ace8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acea:	2200      	movs	r2, #0
 800acec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800acee:	4b13      	ldr	r3, [pc, #76]	; (800ad3c <pvPortMalloc+0x194>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	3301      	adds	r3, #1
 800acf4:	4a11      	ldr	r2, [pc, #68]	; (800ad3c <pvPortMalloc+0x194>)
 800acf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800acf8:	f7fe ffc6 	bl	8009c88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	f003 0307 	and.w	r3, r3, #7
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00a      	beq.n	800ad1c <pvPortMalloc+0x174>
	__asm volatile
 800ad06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	60fb      	str	r3, [r7, #12]
}
 800ad18:	bf00      	nop
 800ad1a:	e7fe      	b.n	800ad1a <pvPortMalloc+0x172>
	return pvReturn;
 800ad1c:	69fb      	ldr	r3, [r7, #28]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3728      	adds	r7, #40	; 0x28
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	20004500 	.word	0x20004500
 800ad2c:	20004514 	.word	0x20004514
 800ad30:	20004504 	.word	0x20004504
 800ad34:	200044f8 	.word	0x200044f8
 800ad38:	20004508 	.word	0x20004508
 800ad3c:	2000450c 	.word	0x2000450c

0800ad40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d04d      	beq.n	800adee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad52:	2308      	movs	r3, #8
 800ad54:	425b      	negs	r3, r3
 800ad56:	697a      	ldr	r2, [r7, #20]
 800ad58:	4413      	add	r3, r2
 800ad5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	685a      	ldr	r2, [r3, #4]
 800ad64:	4b24      	ldr	r3, [pc, #144]	; (800adf8 <vPortFree+0xb8>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4013      	ands	r3, r2
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d10a      	bne.n	800ad84 <vPortFree+0x44>
	__asm volatile
 800ad6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	60fb      	str	r3, [r7, #12]
}
 800ad80:	bf00      	nop
 800ad82:	e7fe      	b.n	800ad82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00a      	beq.n	800ada2 <vPortFree+0x62>
	__asm volatile
 800ad8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad90:	f383 8811 	msr	BASEPRI, r3
 800ad94:	f3bf 8f6f 	isb	sy
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	60bb      	str	r3, [r7, #8]
}
 800ad9e:	bf00      	nop
 800ada0:	e7fe      	b.n	800ada0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	685a      	ldr	r2, [r3, #4]
 800ada6:	4b14      	ldr	r3, [pc, #80]	; (800adf8 <vPortFree+0xb8>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4013      	ands	r3, r2
 800adac:	2b00      	cmp	r3, #0
 800adae:	d01e      	beq.n	800adee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d11a      	bne.n	800adee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	685a      	ldr	r2, [r3, #4]
 800adbc:	4b0e      	ldr	r3, [pc, #56]	; (800adf8 <vPortFree+0xb8>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	43db      	mvns	r3, r3
 800adc2:	401a      	ands	r2, r3
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800adc8:	f7fe ff50 	bl	8009c6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	685a      	ldr	r2, [r3, #4]
 800add0:	4b0a      	ldr	r3, [pc, #40]	; (800adfc <vPortFree+0xbc>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4413      	add	r3, r2
 800add6:	4a09      	ldr	r2, [pc, #36]	; (800adfc <vPortFree+0xbc>)
 800add8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800adda:	6938      	ldr	r0, [r7, #16]
 800addc:	f000 f874 	bl	800aec8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ade0:	4b07      	ldr	r3, [pc, #28]	; (800ae00 <vPortFree+0xc0>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	3301      	adds	r3, #1
 800ade6:	4a06      	ldr	r2, [pc, #24]	; (800ae00 <vPortFree+0xc0>)
 800ade8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800adea:	f7fe ff4d 	bl	8009c88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800adee:	bf00      	nop
 800adf0:	3718      	adds	r7, #24
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	20004514 	.word	0x20004514
 800adfc:	20004504 	.word	0x20004504
 800ae00:	20004510 	.word	0x20004510

0800ae04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ae0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae10:	4b27      	ldr	r3, [pc, #156]	; (800aeb0 <prvHeapInit+0xac>)
 800ae12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f003 0307 	and.w	r3, r3, #7
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00c      	beq.n	800ae38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	3307      	adds	r3, #7
 800ae22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f023 0307 	bic.w	r3, r3, #7
 800ae2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae2c:	68ba      	ldr	r2, [r7, #8]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	4a1f      	ldr	r2, [pc, #124]	; (800aeb0 <prvHeapInit+0xac>)
 800ae34:	4413      	add	r3, r2
 800ae36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae3c:	4a1d      	ldr	r2, [pc, #116]	; (800aeb4 <prvHeapInit+0xb0>)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae42:	4b1c      	ldr	r3, [pc, #112]	; (800aeb4 <prvHeapInit+0xb0>)
 800ae44:	2200      	movs	r2, #0
 800ae46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae50:	2208      	movs	r2, #8
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	1a9b      	subs	r3, r3, r2
 800ae56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f023 0307 	bic.w	r3, r3, #7
 800ae5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	4a15      	ldr	r2, [pc, #84]	; (800aeb8 <prvHeapInit+0xb4>)
 800ae64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae66:	4b14      	ldr	r3, [pc, #80]	; (800aeb8 <prvHeapInit+0xb4>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae6e:	4b12      	ldr	r3, [pc, #72]	; (800aeb8 <prvHeapInit+0xb4>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2200      	movs	r2, #0
 800ae74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	68fa      	ldr	r2, [r7, #12]
 800ae7e:	1ad2      	subs	r2, r2, r3
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae84:	4b0c      	ldr	r3, [pc, #48]	; (800aeb8 <prvHeapInit+0xb4>)
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	4a0a      	ldr	r2, [pc, #40]	; (800aebc <prvHeapInit+0xb8>)
 800ae92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	4a09      	ldr	r2, [pc, #36]	; (800aec0 <prvHeapInit+0xbc>)
 800ae9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae9c:	4b09      	ldr	r3, [pc, #36]	; (800aec4 <prvHeapInit+0xc0>)
 800ae9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aea2:	601a      	str	r2, [r3, #0]
}
 800aea4:	bf00      	nop
 800aea6:	3714      	adds	r7, #20
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr
 800aeb0:	200008f8 	.word	0x200008f8
 800aeb4:	200044f8 	.word	0x200044f8
 800aeb8:	20004500 	.word	0x20004500
 800aebc:	20004508 	.word	0x20004508
 800aec0:	20004504 	.word	0x20004504
 800aec4:	20004514 	.word	0x20004514

0800aec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aed0:	4b28      	ldr	r3, [pc, #160]	; (800af74 <prvInsertBlockIntoFreeList+0xac>)
 800aed2:	60fb      	str	r3, [r7, #12]
 800aed4:	e002      	b.n	800aedc <prvInsertBlockIntoFreeList+0x14>
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	60fb      	str	r3, [r7, #12]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d8f7      	bhi.n	800aed6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	68ba      	ldr	r2, [r7, #8]
 800aef0:	4413      	add	r3, r2
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d108      	bne.n	800af0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	685a      	ldr	r2, [r3, #4]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	441a      	add	r2, r3
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	441a      	add	r2, r3
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d118      	bne.n	800af50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	4b15      	ldr	r3, [pc, #84]	; (800af78 <prvInsertBlockIntoFreeList+0xb0>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	429a      	cmp	r2, r3
 800af28:	d00d      	beq.n	800af46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	685a      	ldr	r2, [r3, #4]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	441a      	add	r2, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	601a      	str	r2, [r3, #0]
 800af44:	e008      	b.n	800af58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af46:	4b0c      	ldr	r3, [pc, #48]	; (800af78 <prvInsertBlockIntoFreeList+0xb0>)
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	601a      	str	r2, [r3, #0]
 800af4e:	e003      	b.n	800af58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d002      	beq.n	800af66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af66:	bf00      	nop
 800af68:	3714      	adds	r7, #20
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	200044f8 	.word	0x200044f8
 800af78:	20004500 	.word	0x20004500

0800af7c <__errno>:
 800af7c:	4b01      	ldr	r3, [pc, #4]	; (800af84 <__errno+0x8>)
 800af7e:	6818      	ldr	r0, [r3, #0]
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	20000014 	.word	0x20000014

0800af88 <std>:
 800af88:	2300      	movs	r3, #0
 800af8a:	b510      	push	{r4, lr}
 800af8c:	4604      	mov	r4, r0
 800af8e:	e9c0 3300 	strd	r3, r3, [r0]
 800af92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af96:	6083      	str	r3, [r0, #8]
 800af98:	8181      	strh	r1, [r0, #12]
 800af9a:	6643      	str	r3, [r0, #100]	; 0x64
 800af9c:	81c2      	strh	r2, [r0, #14]
 800af9e:	6183      	str	r3, [r0, #24]
 800afa0:	4619      	mov	r1, r3
 800afa2:	2208      	movs	r2, #8
 800afa4:	305c      	adds	r0, #92	; 0x5c
 800afa6:	f000 f91a 	bl	800b1de <memset>
 800afaa:	4b05      	ldr	r3, [pc, #20]	; (800afc0 <std+0x38>)
 800afac:	6263      	str	r3, [r4, #36]	; 0x24
 800afae:	4b05      	ldr	r3, [pc, #20]	; (800afc4 <std+0x3c>)
 800afb0:	62a3      	str	r3, [r4, #40]	; 0x28
 800afb2:	4b05      	ldr	r3, [pc, #20]	; (800afc8 <std+0x40>)
 800afb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afb6:	4b05      	ldr	r3, [pc, #20]	; (800afcc <std+0x44>)
 800afb8:	6224      	str	r4, [r4, #32]
 800afba:	6323      	str	r3, [r4, #48]	; 0x30
 800afbc:	bd10      	pop	{r4, pc}
 800afbe:	bf00      	nop
 800afc0:	0800bdfd 	.word	0x0800bdfd
 800afc4:	0800be1f 	.word	0x0800be1f
 800afc8:	0800be57 	.word	0x0800be57
 800afcc:	0800be7b 	.word	0x0800be7b

0800afd0 <_cleanup_r>:
 800afd0:	4901      	ldr	r1, [pc, #4]	; (800afd8 <_cleanup_r+0x8>)
 800afd2:	f000 b8af 	b.w	800b134 <_fwalk_reent>
 800afd6:	bf00      	nop
 800afd8:	0800ce49 	.word	0x0800ce49

0800afdc <__sfmoreglue>:
 800afdc:	b570      	push	{r4, r5, r6, lr}
 800afde:	2268      	movs	r2, #104	; 0x68
 800afe0:	1e4d      	subs	r5, r1, #1
 800afe2:	4355      	muls	r5, r2
 800afe4:	460e      	mov	r6, r1
 800afe6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800afea:	f000 f921 	bl	800b230 <_malloc_r>
 800afee:	4604      	mov	r4, r0
 800aff0:	b140      	cbz	r0, 800b004 <__sfmoreglue+0x28>
 800aff2:	2100      	movs	r1, #0
 800aff4:	e9c0 1600 	strd	r1, r6, [r0]
 800aff8:	300c      	adds	r0, #12
 800affa:	60a0      	str	r0, [r4, #8]
 800affc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b000:	f000 f8ed 	bl	800b1de <memset>
 800b004:	4620      	mov	r0, r4
 800b006:	bd70      	pop	{r4, r5, r6, pc}

0800b008 <__sfp_lock_acquire>:
 800b008:	4801      	ldr	r0, [pc, #4]	; (800b010 <__sfp_lock_acquire+0x8>)
 800b00a:	f000 b8d8 	b.w	800b1be <__retarget_lock_acquire_recursive>
 800b00e:	bf00      	nop
 800b010:	20004519 	.word	0x20004519

0800b014 <__sfp_lock_release>:
 800b014:	4801      	ldr	r0, [pc, #4]	; (800b01c <__sfp_lock_release+0x8>)
 800b016:	f000 b8d3 	b.w	800b1c0 <__retarget_lock_release_recursive>
 800b01a:	bf00      	nop
 800b01c:	20004519 	.word	0x20004519

0800b020 <__sinit_lock_acquire>:
 800b020:	4801      	ldr	r0, [pc, #4]	; (800b028 <__sinit_lock_acquire+0x8>)
 800b022:	f000 b8cc 	b.w	800b1be <__retarget_lock_acquire_recursive>
 800b026:	bf00      	nop
 800b028:	2000451a 	.word	0x2000451a

0800b02c <__sinit_lock_release>:
 800b02c:	4801      	ldr	r0, [pc, #4]	; (800b034 <__sinit_lock_release+0x8>)
 800b02e:	f000 b8c7 	b.w	800b1c0 <__retarget_lock_release_recursive>
 800b032:	bf00      	nop
 800b034:	2000451a 	.word	0x2000451a

0800b038 <__sinit>:
 800b038:	b510      	push	{r4, lr}
 800b03a:	4604      	mov	r4, r0
 800b03c:	f7ff fff0 	bl	800b020 <__sinit_lock_acquire>
 800b040:	69a3      	ldr	r3, [r4, #24]
 800b042:	b11b      	cbz	r3, 800b04c <__sinit+0x14>
 800b044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b048:	f7ff bff0 	b.w	800b02c <__sinit_lock_release>
 800b04c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b050:	6523      	str	r3, [r4, #80]	; 0x50
 800b052:	4b13      	ldr	r3, [pc, #76]	; (800b0a0 <__sinit+0x68>)
 800b054:	4a13      	ldr	r2, [pc, #76]	; (800b0a4 <__sinit+0x6c>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	62a2      	str	r2, [r4, #40]	; 0x28
 800b05a:	42a3      	cmp	r3, r4
 800b05c:	bf04      	itt	eq
 800b05e:	2301      	moveq	r3, #1
 800b060:	61a3      	streq	r3, [r4, #24]
 800b062:	4620      	mov	r0, r4
 800b064:	f000 f820 	bl	800b0a8 <__sfp>
 800b068:	6060      	str	r0, [r4, #4]
 800b06a:	4620      	mov	r0, r4
 800b06c:	f000 f81c 	bl	800b0a8 <__sfp>
 800b070:	60a0      	str	r0, [r4, #8]
 800b072:	4620      	mov	r0, r4
 800b074:	f000 f818 	bl	800b0a8 <__sfp>
 800b078:	2200      	movs	r2, #0
 800b07a:	60e0      	str	r0, [r4, #12]
 800b07c:	2104      	movs	r1, #4
 800b07e:	6860      	ldr	r0, [r4, #4]
 800b080:	f7ff ff82 	bl	800af88 <std>
 800b084:	68a0      	ldr	r0, [r4, #8]
 800b086:	2201      	movs	r2, #1
 800b088:	2109      	movs	r1, #9
 800b08a:	f7ff ff7d 	bl	800af88 <std>
 800b08e:	68e0      	ldr	r0, [r4, #12]
 800b090:	2202      	movs	r2, #2
 800b092:	2112      	movs	r1, #18
 800b094:	f7ff ff78 	bl	800af88 <std>
 800b098:	2301      	movs	r3, #1
 800b09a:	61a3      	str	r3, [r4, #24]
 800b09c:	e7d2      	b.n	800b044 <__sinit+0xc>
 800b09e:	bf00      	nop
 800b0a0:	0800e6d8 	.word	0x0800e6d8
 800b0a4:	0800afd1 	.word	0x0800afd1

0800b0a8 <__sfp>:
 800b0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0aa:	4607      	mov	r7, r0
 800b0ac:	f7ff ffac 	bl	800b008 <__sfp_lock_acquire>
 800b0b0:	4b1e      	ldr	r3, [pc, #120]	; (800b12c <__sfp+0x84>)
 800b0b2:	681e      	ldr	r6, [r3, #0]
 800b0b4:	69b3      	ldr	r3, [r6, #24]
 800b0b6:	b913      	cbnz	r3, 800b0be <__sfp+0x16>
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	f7ff ffbd 	bl	800b038 <__sinit>
 800b0be:	3648      	adds	r6, #72	; 0x48
 800b0c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	d503      	bpl.n	800b0d0 <__sfp+0x28>
 800b0c8:	6833      	ldr	r3, [r6, #0]
 800b0ca:	b30b      	cbz	r3, 800b110 <__sfp+0x68>
 800b0cc:	6836      	ldr	r6, [r6, #0]
 800b0ce:	e7f7      	b.n	800b0c0 <__sfp+0x18>
 800b0d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b0d4:	b9d5      	cbnz	r5, 800b10c <__sfp+0x64>
 800b0d6:	4b16      	ldr	r3, [pc, #88]	; (800b130 <__sfp+0x88>)
 800b0d8:	60e3      	str	r3, [r4, #12]
 800b0da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0de:	6665      	str	r5, [r4, #100]	; 0x64
 800b0e0:	f000 f86c 	bl	800b1bc <__retarget_lock_init_recursive>
 800b0e4:	f7ff ff96 	bl	800b014 <__sfp_lock_release>
 800b0e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b0ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b0f0:	6025      	str	r5, [r4, #0]
 800b0f2:	61a5      	str	r5, [r4, #24]
 800b0f4:	2208      	movs	r2, #8
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b0fc:	f000 f86f 	bl	800b1de <memset>
 800b100:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b104:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b108:	4620      	mov	r0, r4
 800b10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b10c:	3468      	adds	r4, #104	; 0x68
 800b10e:	e7d9      	b.n	800b0c4 <__sfp+0x1c>
 800b110:	2104      	movs	r1, #4
 800b112:	4638      	mov	r0, r7
 800b114:	f7ff ff62 	bl	800afdc <__sfmoreglue>
 800b118:	4604      	mov	r4, r0
 800b11a:	6030      	str	r0, [r6, #0]
 800b11c:	2800      	cmp	r0, #0
 800b11e:	d1d5      	bne.n	800b0cc <__sfp+0x24>
 800b120:	f7ff ff78 	bl	800b014 <__sfp_lock_release>
 800b124:	230c      	movs	r3, #12
 800b126:	603b      	str	r3, [r7, #0]
 800b128:	e7ee      	b.n	800b108 <__sfp+0x60>
 800b12a:	bf00      	nop
 800b12c:	0800e6d8 	.word	0x0800e6d8
 800b130:	ffff0001 	.word	0xffff0001

0800b134 <_fwalk_reent>:
 800b134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b138:	4606      	mov	r6, r0
 800b13a:	4688      	mov	r8, r1
 800b13c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b140:	2700      	movs	r7, #0
 800b142:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b146:	f1b9 0901 	subs.w	r9, r9, #1
 800b14a:	d505      	bpl.n	800b158 <_fwalk_reent+0x24>
 800b14c:	6824      	ldr	r4, [r4, #0]
 800b14e:	2c00      	cmp	r4, #0
 800b150:	d1f7      	bne.n	800b142 <_fwalk_reent+0xe>
 800b152:	4638      	mov	r0, r7
 800b154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b158:	89ab      	ldrh	r3, [r5, #12]
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d907      	bls.n	800b16e <_fwalk_reent+0x3a>
 800b15e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b162:	3301      	adds	r3, #1
 800b164:	d003      	beq.n	800b16e <_fwalk_reent+0x3a>
 800b166:	4629      	mov	r1, r5
 800b168:	4630      	mov	r0, r6
 800b16a:	47c0      	blx	r8
 800b16c:	4307      	orrs	r7, r0
 800b16e:	3568      	adds	r5, #104	; 0x68
 800b170:	e7e9      	b.n	800b146 <_fwalk_reent+0x12>
	...

0800b174 <__libc_init_array>:
 800b174:	b570      	push	{r4, r5, r6, lr}
 800b176:	4d0d      	ldr	r5, [pc, #52]	; (800b1ac <__libc_init_array+0x38>)
 800b178:	4c0d      	ldr	r4, [pc, #52]	; (800b1b0 <__libc_init_array+0x3c>)
 800b17a:	1b64      	subs	r4, r4, r5
 800b17c:	10a4      	asrs	r4, r4, #2
 800b17e:	2600      	movs	r6, #0
 800b180:	42a6      	cmp	r6, r4
 800b182:	d109      	bne.n	800b198 <__libc_init_array+0x24>
 800b184:	4d0b      	ldr	r5, [pc, #44]	; (800b1b4 <__libc_init_array+0x40>)
 800b186:	4c0c      	ldr	r4, [pc, #48]	; (800b1b8 <__libc_init_array+0x44>)
 800b188:	f002 ffb0 	bl	800e0ec <_init>
 800b18c:	1b64      	subs	r4, r4, r5
 800b18e:	10a4      	asrs	r4, r4, #2
 800b190:	2600      	movs	r6, #0
 800b192:	42a6      	cmp	r6, r4
 800b194:	d105      	bne.n	800b1a2 <__libc_init_array+0x2e>
 800b196:	bd70      	pop	{r4, r5, r6, pc}
 800b198:	f855 3b04 	ldr.w	r3, [r5], #4
 800b19c:	4798      	blx	r3
 800b19e:	3601      	adds	r6, #1
 800b1a0:	e7ee      	b.n	800b180 <__libc_init_array+0xc>
 800b1a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1a6:	4798      	blx	r3
 800b1a8:	3601      	adds	r6, #1
 800b1aa:	e7f2      	b.n	800b192 <__libc_init_array+0x1e>
 800b1ac:	0800ead0 	.word	0x0800ead0
 800b1b0:	0800ead0 	.word	0x0800ead0
 800b1b4:	0800ead0 	.word	0x0800ead0
 800b1b8:	0800ead4 	.word	0x0800ead4

0800b1bc <__retarget_lock_init_recursive>:
 800b1bc:	4770      	bx	lr

0800b1be <__retarget_lock_acquire_recursive>:
 800b1be:	4770      	bx	lr

0800b1c0 <__retarget_lock_release_recursive>:
 800b1c0:	4770      	bx	lr

0800b1c2 <memcpy>:
 800b1c2:	440a      	add	r2, r1
 800b1c4:	4291      	cmp	r1, r2
 800b1c6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b1ca:	d100      	bne.n	800b1ce <memcpy+0xc>
 800b1cc:	4770      	bx	lr
 800b1ce:	b510      	push	{r4, lr}
 800b1d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1d8:	4291      	cmp	r1, r2
 800b1da:	d1f9      	bne.n	800b1d0 <memcpy+0xe>
 800b1dc:	bd10      	pop	{r4, pc}

0800b1de <memset>:
 800b1de:	4402      	add	r2, r0
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d100      	bne.n	800b1e8 <memset+0xa>
 800b1e6:	4770      	bx	lr
 800b1e8:	f803 1b01 	strb.w	r1, [r3], #1
 800b1ec:	e7f9      	b.n	800b1e2 <memset+0x4>
	...

0800b1f0 <sbrk_aligned>:
 800b1f0:	b570      	push	{r4, r5, r6, lr}
 800b1f2:	4e0e      	ldr	r6, [pc, #56]	; (800b22c <sbrk_aligned+0x3c>)
 800b1f4:	460c      	mov	r4, r1
 800b1f6:	6831      	ldr	r1, [r6, #0]
 800b1f8:	4605      	mov	r5, r0
 800b1fa:	b911      	cbnz	r1, 800b202 <sbrk_aligned+0x12>
 800b1fc:	f000 fdee 	bl	800bddc <_sbrk_r>
 800b200:	6030      	str	r0, [r6, #0]
 800b202:	4621      	mov	r1, r4
 800b204:	4628      	mov	r0, r5
 800b206:	f000 fde9 	bl	800bddc <_sbrk_r>
 800b20a:	1c43      	adds	r3, r0, #1
 800b20c:	d00a      	beq.n	800b224 <sbrk_aligned+0x34>
 800b20e:	1cc4      	adds	r4, r0, #3
 800b210:	f024 0403 	bic.w	r4, r4, #3
 800b214:	42a0      	cmp	r0, r4
 800b216:	d007      	beq.n	800b228 <sbrk_aligned+0x38>
 800b218:	1a21      	subs	r1, r4, r0
 800b21a:	4628      	mov	r0, r5
 800b21c:	f000 fdde 	bl	800bddc <_sbrk_r>
 800b220:	3001      	adds	r0, #1
 800b222:	d101      	bne.n	800b228 <sbrk_aligned+0x38>
 800b224:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b228:	4620      	mov	r0, r4
 800b22a:	bd70      	pop	{r4, r5, r6, pc}
 800b22c:	20004520 	.word	0x20004520

0800b230 <_malloc_r>:
 800b230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b234:	1ccd      	adds	r5, r1, #3
 800b236:	f025 0503 	bic.w	r5, r5, #3
 800b23a:	3508      	adds	r5, #8
 800b23c:	2d0c      	cmp	r5, #12
 800b23e:	bf38      	it	cc
 800b240:	250c      	movcc	r5, #12
 800b242:	2d00      	cmp	r5, #0
 800b244:	4607      	mov	r7, r0
 800b246:	db01      	blt.n	800b24c <_malloc_r+0x1c>
 800b248:	42a9      	cmp	r1, r5
 800b24a:	d905      	bls.n	800b258 <_malloc_r+0x28>
 800b24c:	230c      	movs	r3, #12
 800b24e:	603b      	str	r3, [r7, #0]
 800b250:	2600      	movs	r6, #0
 800b252:	4630      	mov	r0, r6
 800b254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b258:	4e2e      	ldr	r6, [pc, #184]	; (800b314 <_malloc_r+0xe4>)
 800b25a:	f001 fec7 	bl	800cfec <__malloc_lock>
 800b25e:	6833      	ldr	r3, [r6, #0]
 800b260:	461c      	mov	r4, r3
 800b262:	bb34      	cbnz	r4, 800b2b2 <_malloc_r+0x82>
 800b264:	4629      	mov	r1, r5
 800b266:	4638      	mov	r0, r7
 800b268:	f7ff ffc2 	bl	800b1f0 <sbrk_aligned>
 800b26c:	1c43      	adds	r3, r0, #1
 800b26e:	4604      	mov	r4, r0
 800b270:	d14d      	bne.n	800b30e <_malloc_r+0xde>
 800b272:	6834      	ldr	r4, [r6, #0]
 800b274:	4626      	mov	r6, r4
 800b276:	2e00      	cmp	r6, #0
 800b278:	d140      	bne.n	800b2fc <_malloc_r+0xcc>
 800b27a:	6823      	ldr	r3, [r4, #0]
 800b27c:	4631      	mov	r1, r6
 800b27e:	4638      	mov	r0, r7
 800b280:	eb04 0803 	add.w	r8, r4, r3
 800b284:	f000 fdaa 	bl	800bddc <_sbrk_r>
 800b288:	4580      	cmp	r8, r0
 800b28a:	d13a      	bne.n	800b302 <_malloc_r+0xd2>
 800b28c:	6821      	ldr	r1, [r4, #0]
 800b28e:	3503      	adds	r5, #3
 800b290:	1a6d      	subs	r5, r5, r1
 800b292:	f025 0503 	bic.w	r5, r5, #3
 800b296:	3508      	adds	r5, #8
 800b298:	2d0c      	cmp	r5, #12
 800b29a:	bf38      	it	cc
 800b29c:	250c      	movcc	r5, #12
 800b29e:	4629      	mov	r1, r5
 800b2a0:	4638      	mov	r0, r7
 800b2a2:	f7ff ffa5 	bl	800b1f0 <sbrk_aligned>
 800b2a6:	3001      	adds	r0, #1
 800b2a8:	d02b      	beq.n	800b302 <_malloc_r+0xd2>
 800b2aa:	6823      	ldr	r3, [r4, #0]
 800b2ac:	442b      	add	r3, r5
 800b2ae:	6023      	str	r3, [r4, #0]
 800b2b0:	e00e      	b.n	800b2d0 <_malloc_r+0xa0>
 800b2b2:	6822      	ldr	r2, [r4, #0]
 800b2b4:	1b52      	subs	r2, r2, r5
 800b2b6:	d41e      	bmi.n	800b2f6 <_malloc_r+0xc6>
 800b2b8:	2a0b      	cmp	r2, #11
 800b2ba:	d916      	bls.n	800b2ea <_malloc_r+0xba>
 800b2bc:	1961      	adds	r1, r4, r5
 800b2be:	42a3      	cmp	r3, r4
 800b2c0:	6025      	str	r5, [r4, #0]
 800b2c2:	bf18      	it	ne
 800b2c4:	6059      	strne	r1, [r3, #4]
 800b2c6:	6863      	ldr	r3, [r4, #4]
 800b2c8:	bf08      	it	eq
 800b2ca:	6031      	streq	r1, [r6, #0]
 800b2cc:	5162      	str	r2, [r4, r5]
 800b2ce:	604b      	str	r3, [r1, #4]
 800b2d0:	4638      	mov	r0, r7
 800b2d2:	f104 060b 	add.w	r6, r4, #11
 800b2d6:	f001 fe8f 	bl	800cff8 <__malloc_unlock>
 800b2da:	f026 0607 	bic.w	r6, r6, #7
 800b2de:	1d23      	adds	r3, r4, #4
 800b2e0:	1af2      	subs	r2, r6, r3
 800b2e2:	d0b6      	beq.n	800b252 <_malloc_r+0x22>
 800b2e4:	1b9b      	subs	r3, r3, r6
 800b2e6:	50a3      	str	r3, [r4, r2]
 800b2e8:	e7b3      	b.n	800b252 <_malloc_r+0x22>
 800b2ea:	6862      	ldr	r2, [r4, #4]
 800b2ec:	42a3      	cmp	r3, r4
 800b2ee:	bf0c      	ite	eq
 800b2f0:	6032      	streq	r2, [r6, #0]
 800b2f2:	605a      	strne	r2, [r3, #4]
 800b2f4:	e7ec      	b.n	800b2d0 <_malloc_r+0xa0>
 800b2f6:	4623      	mov	r3, r4
 800b2f8:	6864      	ldr	r4, [r4, #4]
 800b2fa:	e7b2      	b.n	800b262 <_malloc_r+0x32>
 800b2fc:	4634      	mov	r4, r6
 800b2fe:	6876      	ldr	r6, [r6, #4]
 800b300:	e7b9      	b.n	800b276 <_malloc_r+0x46>
 800b302:	230c      	movs	r3, #12
 800b304:	603b      	str	r3, [r7, #0]
 800b306:	4638      	mov	r0, r7
 800b308:	f001 fe76 	bl	800cff8 <__malloc_unlock>
 800b30c:	e7a1      	b.n	800b252 <_malloc_r+0x22>
 800b30e:	6025      	str	r5, [r4, #0]
 800b310:	e7de      	b.n	800b2d0 <_malloc_r+0xa0>
 800b312:	bf00      	nop
 800b314:	2000451c 	.word	0x2000451c

0800b318 <__cvt>:
 800b318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b31c:	ec55 4b10 	vmov	r4, r5, d0
 800b320:	2d00      	cmp	r5, #0
 800b322:	460e      	mov	r6, r1
 800b324:	4619      	mov	r1, r3
 800b326:	462b      	mov	r3, r5
 800b328:	bfbb      	ittet	lt
 800b32a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b32e:	461d      	movlt	r5, r3
 800b330:	2300      	movge	r3, #0
 800b332:	232d      	movlt	r3, #45	; 0x2d
 800b334:	700b      	strb	r3, [r1, #0]
 800b336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b338:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b33c:	4691      	mov	r9, r2
 800b33e:	f023 0820 	bic.w	r8, r3, #32
 800b342:	bfbc      	itt	lt
 800b344:	4622      	movlt	r2, r4
 800b346:	4614      	movlt	r4, r2
 800b348:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b34c:	d005      	beq.n	800b35a <__cvt+0x42>
 800b34e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b352:	d100      	bne.n	800b356 <__cvt+0x3e>
 800b354:	3601      	adds	r6, #1
 800b356:	2102      	movs	r1, #2
 800b358:	e000      	b.n	800b35c <__cvt+0x44>
 800b35a:	2103      	movs	r1, #3
 800b35c:	ab03      	add	r3, sp, #12
 800b35e:	9301      	str	r3, [sp, #4]
 800b360:	ab02      	add	r3, sp, #8
 800b362:	9300      	str	r3, [sp, #0]
 800b364:	ec45 4b10 	vmov	d0, r4, r5
 800b368:	4653      	mov	r3, sl
 800b36a:	4632      	mov	r2, r6
 800b36c:	f000 fef8 	bl	800c160 <_dtoa_r>
 800b370:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b374:	4607      	mov	r7, r0
 800b376:	d102      	bne.n	800b37e <__cvt+0x66>
 800b378:	f019 0f01 	tst.w	r9, #1
 800b37c:	d022      	beq.n	800b3c4 <__cvt+0xac>
 800b37e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b382:	eb07 0906 	add.w	r9, r7, r6
 800b386:	d110      	bne.n	800b3aa <__cvt+0x92>
 800b388:	783b      	ldrb	r3, [r7, #0]
 800b38a:	2b30      	cmp	r3, #48	; 0x30
 800b38c:	d10a      	bne.n	800b3a4 <__cvt+0x8c>
 800b38e:	2200      	movs	r2, #0
 800b390:	2300      	movs	r3, #0
 800b392:	4620      	mov	r0, r4
 800b394:	4629      	mov	r1, r5
 800b396:	f7f5 fbaf 	bl	8000af8 <__aeabi_dcmpeq>
 800b39a:	b918      	cbnz	r0, 800b3a4 <__cvt+0x8c>
 800b39c:	f1c6 0601 	rsb	r6, r6, #1
 800b3a0:	f8ca 6000 	str.w	r6, [sl]
 800b3a4:	f8da 3000 	ldr.w	r3, [sl]
 800b3a8:	4499      	add	r9, r3
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	f7f5 fba1 	bl	8000af8 <__aeabi_dcmpeq>
 800b3b6:	b108      	cbz	r0, 800b3bc <__cvt+0xa4>
 800b3b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b3bc:	2230      	movs	r2, #48	; 0x30
 800b3be:	9b03      	ldr	r3, [sp, #12]
 800b3c0:	454b      	cmp	r3, r9
 800b3c2:	d307      	bcc.n	800b3d4 <__cvt+0xbc>
 800b3c4:	9b03      	ldr	r3, [sp, #12]
 800b3c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3c8:	1bdb      	subs	r3, r3, r7
 800b3ca:	4638      	mov	r0, r7
 800b3cc:	6013      	str	r3, [r2, #0]
 800b3ce:	b004      	add	sp, #16
 800b3d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d4:	1c59      	adds	r1, r3, #1
 800b3d6:	9103      	str	r1, [sp, #12]
 800b3d8:	701a      	strb	r2, [r3, #0]
 800b3da:	e7f0      	b.n	800b3be <__cvt+0xa6>

0800b3dc <__exponent>:
 800b3dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3de:	4603      	mov	r3, r0
 800b3e0:	2900      	cmp	r1, #0
 800b3e2:	bfb8      	it	lt
 800b3e4:	4249      	neglt	r1, r1
 800b3e6:	f803 2b02 	strb.w	r2, [r3], #2
 800b3ea:	bfb4      	ite	lt
 800b3ec:	222d      	movlt	r2, #45	; 0x2d
 800b3ee:	222b      	movge	r2, #43	; 0x2b
 800b3f0:	2909      	cmp	r1, #9
 800b3f2:	7042      	strb	r2, [r0, #1]
 800b3f4:	dd2a      	ble.n	800b44c <__exponent+0x70>
 800b3f6:	f10d 0407 	add.w	r4, sp, #7
 800b3fa:	46a4      	mov	ip, r4
 800b3fc:	270a      	movs	r7, #10
 800b3fe:	46a6      	mov	lr, r4
 800b400:	460a      	mov	r2, r1
 800b402:	fb91 f6f7 	sdiv	r6, r1, r7
 800b406:	fb07 1516 	mls	r5, r7, r6, r1
 800b40a:	3530      	adds	r5, #48	; 0x30
 800b40c:	2a63      	cmp	r2, #99	; 0x63
 800b40e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b412:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b416:	4631      	mov	r1, r6
 800b418:	dcf1      	bgt.n	800b3fe <__exponent+0x22>
 800b41a:	3130      	adds	r1, #48	; 0x30
 800b41c:	f1ae 0502 	sub.w	r5, lr, #2
 800b420:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b424:	1c44      	adds	r4, r0, #1
 800b426:	4629      	mov	r1, r5
 800b428:	4561      	cmp	r1, ip
 800b42a:	d30a      	bcc.n	800b442 <__exponent+0x66>
 800b42c:	f10d 0209 	add.w	r2, sp, #9
 800b430:	eba2 020e 	sub.w	r2, r2, lr
 800b434:	4565      	cmp	r5, ip
 800b436:	bf88      	it	hi
 800b438:	2200      	movhi	r2, #0
 800b43a:	4413      	add	r3, r2
 800b43c:	1a18      	subs	r0, r3, r0
 800b43e:	b003      	add	sp, #12
 800b440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b442:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b446:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b44a:	e7ed      	b.n	800b428 <__exponent+0x4c>
 800b44c:	2330      	movs	r3, #48	; 0x30
 800b44e:	3130      	adds	r1, #48	; 0x30
 800b450:	7083      	strb	r3, [r0, #2]
 800b452:	70c1      	strb	r1, [r0, #3]
 800b454:	1d03      	adds	r3, r0, #4
 800b456:	e7f1      	b.n	800b43c <__exponent+0x60>

0800b458 <_printf_float>:
 800b458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45c:	ed2d 8b02 	vpush	{d8}
 800b460:	b08d      	sub	sp, #52	; 0x34
 800b462:	460c      	mov	r4, r1
 800b464:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b468:	4616      	mov	r6, r2
 800b46a:	461f      	mov	r7, r3
 800b46c:	4605      	mov	r5, r0
 800b46e:	f001 fd27 	bl	800cec0 <_localeconv_r>
 800b472:	f8d0 a000 	ldr.w	sl, [r0]
 800b476:	4650      	mov	r0, sl
 800b478:	f7f4 febc 	bl	80001f4 <strlen>
 800b47c:	2300      	movs	r3, #0
 800b47e:	930a      	str	r3, [sp, #40]	; 0x28
 800b480:	6823      	ldr	r3, [r4, #0]
 800b482:	9305      	str	r3, [sp, #20]
 800b484:	f8d8 3000 	ldr.w	r3, [r8]
 800b488:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b48c:	3307      	adds	r3, #7
 800b48e:	f023 0307 	bic.w	r3, r3, #7
 800b492:	f103 0208 	add.w	r2, r3, #8
 800b496:	f8c8 2000 	str.w	r2, [r8]
 800b49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b4a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b4a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b4aa:	9307      	str	r3, [sp, #28]
 800b4ac:	f8cd 8018 	str.w	r8, [sp, #24]
 800b4b0:	ee08 0a10 	vmov	s16, r0
 800b4b4:	4b9f      	ldr	r3, [pc, #636]	; (800b734 <_printf_float+0x2dc>)
 800b4b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4be:	f7f5 fb4d 	bl	8000b5c <__aeabi_dcmpun>
 800b4c2:	bb88      	cbnz	r0, 800b528 <_printf_float+0xd0>
 800b4c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4c8:	4b9a      	ldr	r3, [pc, #616]	; (800b734 <_printf_float+0x2dc>)
 800b4ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4ce:	f7f5 fb27 	bl	8000b20 <__aeabi_dcmple>
 800b4d2:	bb48      	cbnz	r0, 800b528 <_printf_float+0xd0>
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	4640      	mov	r0, r8
 800b4da:	4649      	mov	r1, r9
 800b4dc:	f7f5 fb16 	bl	8000b0c <__aeabi_dcmplt>
 800b4e0:	b110      	cbz	r0, 800b4e8 <_printf_float+0x90>
 800b4e2:	232d      	movs	r3, #45	; 0x2d
 800b4e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4e8:	4b93      	ldr	r3, [pc, #588]	; (800b738 <_printf_float+0x2e0>)
 800b4ea:	4894      	ldr	r0, [pc, #592]	; (800b73c <_printf_float+0x2e4>)
 800b4ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b4f0:	bf94      	ite	ls
 800b4f2:	4698      	movls	r8, r3
 800b4f4:	4680      	movhi	r8, r0
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	6123      	str	r3, [r4, #16]
 800b4fa:	9b05      	ldr	r3, [sp, #20]
 800b4fc:	f023 0204 	bic.w	r2, r3, #4
 800b500:	6022      	str	r2, [r4, #0]
 800b502:	f04f 0900 	mov.w	r9, #0
 800b506:	9700      	str	r7, [sp, #0]
 800b508:	4633      	mov	r3, r6
 800b50a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b50c:	4621      	mov	r1, r4
 800b50e:	4628      	mov	r0, r5
 800b510:	f000 f9d8 	bl	800b8c4 <_printf_common>
 800b514:	3001      	adds	r0, #1
 800b516:	f040 8090 	bne.w	800b63a <_printf_float+0x1e2>
 800b51a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b51e:	b00d      	add	sp, #52	; 0x34
 800b520:	ecbd 8b02 	vpop	{d8}
 800b524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b528:	4642      	mov	r2, r8
 800b52a:	464b      	mov	r3, r9
 800b52c:	4640      	mov	r0, r8
 800b52e:	4649      	mov	r1, r9
 800b530:	f7f5 fb14 	bl	8000b5c <__aeabi_dcmpun>
 800b534:	b140      	cbz	r0, 800b548 <_printf_float+0xf0>
 800b536:	464b      	mov	r3, r9
 800b538:	2b00      	cmp	r3, #0
 800b53a:	bfbc      	itt	lt
 800b53c:	232d      	movlt	r3, #45	; 0x2d
 800b53e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b542:	487f      	ldr	r0, [pc, #508]	; (800b740 <_printf_float+0x2e8>)
 800b544:	4b7f      	ldr	r3, [pc, #508]	; (800b744 <_printf_float+0x2ec>)
 800b546:	e7d1      	b.n	800b4ec <_printf_float+0x94>
 800b548:	6863      	ldr	r3, [r4, #4]
 800b54a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b54e:	9206      	str	r2, [sp, #24]
 800b550:	1c5a      	adds	r2, r3, #1
 800b552:	d13f      	bne.n	800b5d4 <_printf_float+0x17c>
 800b554:	2306      	movs	r3, #6
 800b556:	6063      	str	r3, [r4, #4]
 800b558:	9b05      	ldr	r3, [sp, #20]
 800b55a:	6861      	ldr	r1, [r4, #4]
 800b55c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b560:	2300      	movs	r3, #0
 800b562:	9303      	str	r3, [sp, #12]
 800b564:	ab0a      	add	r3, sp, #40	; 0x28
 800b566:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b56a:	ab09      	add	r3, sp, #36	; 0x24
 800b56c:	ec49 8b10 	vmov	d0, r8, r9
 800b570:	9300      	str	r3, [sp, #0]
 800b572:	6022      	str	r2, [r4, #0]
 800b574:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b578:	4628      	mov	r0, r5
 800b57a:	f7ff fecd 	bl	800b318 <__cvt>
 800b57e:	9b06      	ldr	r3, [sp, #24]
 800b580:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b582:	2b47      	cmp	r3, #71	; 0x47
 800b584:	4680      	mov	r8, r0
 800b586:	d108      	bne.n	800b59a <_printf_float+0x142>
 800b588:	1cc8      	adds	r0, r1, #3
 800b58a:	db02      	blt.n	800b592 <_printf_float+0x13a>
 800b58c:	6863      	ldr	r3, [r4, #4]
 800b58e:	4299      	cmp	r1, r3
 800b590:	dd41      	ble.n	800b616 <_printf_float+0x1be>
 800b592:	f1ab 0b02 	sub.w	fp, fp, #2
 800b596:	fa5f fb8b 	uxtb.w	fp, fp
 800b59a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b59e:	d820      	bhi.n	800b5e2 <_printf_float+0x18a>
 800b5a0:	3901      	subs	r1, #1
 800b5a2:	465a      	mov	r2, fp
 800b5a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b5a8:	9109      	str	r1, [sp, #36]	; 0x24
 800b5aa:	f7ff ff17 	bl	800b3dc <__exponent>
 800b5ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5b0:	1813      	adds	r3, r2, r0
 800b5b2:	2a01      	cmp	r2, #1
 800b5b4:	4681      	mov	r9, r0
 800b5b6:	6123      	str	r3, [r4, #16]
 800b5b8:	dc02      	bgt.n	800b5c0 <_printf_float+0x168>
 800b5ba:	6822      	ldr	r2, [r4, #0]
 800b5bc:	07d2      	lsls	r2, r2, #31
 800b5be:	d501      	bpl.n	800b5c4 <_printf_float+0x16c>
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	6123      	str	r3, [r4, #16]
 800b5c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d09c      	beq.n	800b506 <_printf_float+0xae>
 800b5cc:	232d      	movs	r3, #45	; 0x2d
 800b5ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5d2:	e798      	b.n	800b506 <_printf_float+0xae>
 800b5d4:	9a06      	ldr	r2, [sp, #24]
 800b5d6:	2a47      	cmp	r2, #71	; 0x47
 800b5d8:	d1be      	bne.n	800b558 <_printf_float+0x100>
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d1bc      	bne.n	800b558 <_printf_float+0x100>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e7b9      	b.n	800b556 <_printf_float+0xfe>
 800b5e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b5e6:	d118      	bne.n	800b61a <_printf_float+0x1c2>
 800b5e8:	2900      	cmp	r1, #0
 800b5ea:	6863      	ldr	r3, [r4, #4]
 800b5ec:	dd0b      	ble.n	800b606 <_printf_float+0x1ae>
 800b5ee:	6121      	str	r1, [r4, #16]
 800b5f0:	b913      	cbnz	r3, 800b5f8 <_printf_float+0x1a0>
 800b5f2:	6822      	ldr	r2, [r4, #0]
 800b5f4:	07d0      	lsls	r0, r2, #31
 800b5f6:	d502      	bpl.n	800b5fe <_printf_float+0x1a6>
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	440b      	add	r3, r1
 800b5fc:	6123      	str	r3, [r4, #16]
 800b5fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800b600:	f04f 0900 	mov.w	r9, #0
 800b604:	e7de      	b.n	800b5c4 <_printf_float+0x16c>
 800b606:	b913      	cbnz	r3, 800b60e <_printf_float+0x1b6>
 800b608:	6822      	ldr	r2, [r4, #0]
 800b60a:	07d2      	lsls	r2, r2, #31
 800b60c:	d501      	bpl.n	800b612 <_printf_float+0x1ba>
 800b60e:	3302      	adds	r3, #2
 800b610:	e7f4      	b.n	800b5fc <_printf_float+0x1a4>
 800b612:	2301      	movs	r3, #1
 800b614:	e7f2      	b.n	800b5fc <_printf_float+0x1a4>
 800b616:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b61a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b61c:	4299      	cmp	r1, r3
 800b61e:	db05      	blt.n	800b62c <_printf_float+0x1d4>
 800b620:	6823      	ldr	r3, [r4, #0]
 800b622:	6121      	str	r1, [r4, #16]
 800b624:	07d8      	lsls	r0, r3, #31
 800b626:	d5ea      	bpl.n	800b5fe <_printf_float+0x1a6>
 800b628:	1c4b      	adds	r3, r1, #1
 800b62a:	e7e7      	b.n	800b5fc <_printf_float+0x1a4>
 800b62c:	2900      	cmp	r1, #0
 800b62e:	bfd4      	ite	le
 800b630:	f1c1 0202 	rsble	r2, r1, #2
 800b634:	2201      	movgt	r2, #1
 800b636:	4413      	add	r3, r2
 800b638:	e7e0      	b.n	800b5fc <_printf_float+0x1a4>
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	055a      	lsls	r2, r3, #21
 800b63e:	d407      	bmi.n	800b650 <_printf_float+0x1f8>
 800b640:	6923      	ldr	r3, [r4, #16]
 800b642:	4642      	mov	r2, r8
 800b644:	4631      	mov	r1, r6
 800b646:	4628      	mov	r0, r5
 800b648:	47b8      	blx	r7
 800b64a:	3001      	adds	r0, #1
 800b64c:	d12c      	bne.n	800b6a8 <_printf_float+0x250>
 800b64e:	e764      	b.n	800b51a <_printf_float+0xc2>
 800b650:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b654:	f240 80e0 	bls.w	800b818 <_printf_float+0x3c0>
 800b658:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b65c:	2200      	movs	r2, #0
 800b65e:	2300      	movs	r3, #0
 800b660:	f7f5 fa4a 	bl	8000af8 <__aeabi_dcmpeq>
 800b664:	2800      	cmp	r0, #0
 800b666:	d034      	beq.n	800b6d2 <_printf_float+0x27a>
 800b668:	4a37      	ldr	r2, [pc, #220]	; (800b748 <_printf_float+0x2f0>)
 800b66a:	2301      	movs	r3, #1
 800b66c:	4631      	mov	r1, r6
 800b66e:	4628      	mov	r0, r5
 800b670:	47b8      	blx	r7
 800b672:	3001      	adds	r0, #1
 800b674:	f43f af51 	beq.w	800b51a <_printf_float+0xc2>
 800b678:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b67c:	429a      	cmp	r2, r3
 800b67e:	db02      	blt.n	800b686 <_printf_float+0x22e>
 800b680:	6823      	ldr	r3, [r4, #0]
 800b682:	07d8      	lsls	r0, r3, #31
 800b684:	d510      	bpl.n	800b6a8 <_printf_float+0x250>
 800b686:	ee18 3a10 	vmov	r3, s16
 800b68a:	4652      	mov	r2, sl
 800b68c:	4631      	mov	r1, r6
 800b68e:	4628      	mov	r0, r5
 800b690:	47b8      	blx	r7
 800b692:	3001      	adds	r0, #1
 800b694:	f43f af41 	beq.w	800b51a <_printf_float+0xc2>
 800b698:	f04f 0800 	mov.w	r8, #0
 800b69c:	f104 091a 	add.w	r9, r4, #26
 800b6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6a2:	3b01      	subs	r3, #1
 800b6a4:	4543      	cmp	r3, r8
 800b6a6:	dc09      	bgt.n	800b6bc <_printf_float+0x264>
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	079b      	lsls	r3, r3, #30
 800b6ac:	f100 8105 	bmi.w	800b8ba <_printf_float+0x462>
 800b6b0:	68e0      	ldr	r0, [r4, #12]
 800b6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6b4:	4298      	cmp	r0, r3
 800b6b6:	bfb8      	it	lt
 800b6b8:	4618      	movlt	r0, r3
 800b6ba:	e730      	b.n	800b51e <_printf_float+0xc6>
 800b6bc:	2301      	movs	r3, #1
 800b6be:	464a      	mov	r2, r9
 800b6c0:	4631      	mov	r1, r6
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	47b8      	blx	r7
 800b6c6:	3001      	adds	r0, #1
 800b6c8:	f43f af27 	beq.w	800b51a <_printf_float+0xc2>
 800b6cc:	f108 0801 	add.w	r8, r8, #1
 800b6d0:	e7e6      	b.n	800b6a0 <_printf_float+0x248>
 800b6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	dc39      	bgt.n	800b74c <_printf_float+0x2f4>
 800b6d8:	4a1b      	ldr	r2, [pc, #108]	; (800b748 <_printf_float+0x2f0>)
 800b6da:	2301      	movs	r3, #1
 800b6dc:	4631      	mov	r1, r6
 800b6de:	4628      	mov	r0, r5
 800b6e0:	47b8      	blx	r7
 800b6e2:	3001      	adds	r0, #1
 800b6e4:	f43f af19 	beq.w	800b51a <_printf_float+0xc2>
 800b6e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	d102      	bne.n	800b6f6 <_printf_float+0x29e>
 800b6f0:	6823      	ldr	r3, [r4, #0]
 800b6f2:	07d9      	lsls	r1, r3, #31
 800b6f4:	d5d8      	bpl.n	800b6a8 <_printf_float+0x250>
 800b6f6:	ee18 3a10 	vmov	r3, s16
 800b6fa:	4652      	mov	r2, sl
 800b6fc:	4631      	mov	r1, r6
 800b6fe:	4628      	mov	r0, r5
 800b700:	47b8      	blx	r7
 800b702:	3001      	adds	r0, #1
 800b704:	f43f af09 	beq.w	800b51a <_printf_float+0xc2>
 800b708:	f04f 0900 	mov.w	r9, #0
 800b70c:	f104 0a1a 	add.w	sl, r4, #26
 800b710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b712:	425b      	negs	r3, r3
 800b714:	454b      	cmp	r3, r9
 800b716:	dc01      	bgt.n	800b71c <_printf_float+0x2c4>
 800b718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b71a:	e792      	b.n	800b642 <_printf_float+0x1ea>
 800b71c:	2301      	movs	r3, #1
 800b71e:	4652      	mov	r2, sl
 800b720:	4631      	mov	r1, r6
 800b722:	4628      	mov	r0, r5
 800b724:	47b8      	blx	r7
 800b726:	3001      	adds	r0, #1
 800b728:	f43f aef7 	beq.w	800b51a <_printf_float+0xc2>
 800b72c:	f109 0901 	add.w	r9, r9, #1
 800b730:	e7ee      	b.n	800b710 <_printf_float+0x2b8>
 800b732:	bf00      	nop
 800b734:	7fefffff 	.word	0x7fefffff
 800b738:	0800e6dc 	.word	0x0800e6dc
 800b73c:	0800e6e0 	.word	0x0800e6e0
 800b740:	0800e6e8 	.word	0x0800e6e8
 800b744:	0800e6e4 	.word	0x0800e6e4
 800b748:	0800e6ec 	.word	0x0800e6ec
 800b74c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b74e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b750:	429a      	cmp	r2, r3
 800b752:	bfa8      	it	ge
 800b754:	461a      	movge	r2, r3
 800b756:	2a00      	cmp	r2, #0
 800b758:	4691      	mov	r9, r2
 800b75a:	dc37      	bgt.n	800b7cc <_printf_float+0x374>
 800b75c:	f04f 0b00 	mov.w	fp, #0
 800b760:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b764:	f104 021a 	add.w	r2, r4, #26
 800b768:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b76a:	9305      	str	r3, [sp, #20]
 800b76c:	eba3 0309 	sub.w	r3, r3, r9
 800b770:	455b      	cmp	r3, fp
 800b772:	dc33      	bgt.n	800b7dc <_printf_float+0x384>
 800b774:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b778:	429a      	cmp	r2, r3
 800b77a:	db3b      	blt.n	800b7f4 <_printf_float+0x39c>
 800b77c:	6823      	ldr	r3, [r4, #0]
 800b77e:	07da      	lsls	r2, r3, #31
 800b780:	d438      	bmi.n	800b7f4 <_printf_float+0x39c>
 800b782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b784:	9a05      	ldr	r2, [sp, #20]
 800b786:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b788:	1a9a      	subs	r2, r3, r2
 800b78a:	eba3 0901 	sub.w	r9, r3, r1
 800b78e:	4591      	cmp	r9, r2
 800b790:	bfa8      	it	ge
 800b792:	4691      	movge	r9, r2
 800b794:	f1b9 0f00 	cmp.w	r9, #0
 800b798:	dc35      	bgt.n	800b806 <_printf_float+0x3ae>
 800b79a:	f04f 0800 	mov.w	r8, #0
 800b79e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7a2:	f104 0a1a 	add.w	sl, r4, #26
 800b7a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7aa:	1a9b      	subs	r3, r3, r2
 800b7ac:	eba3 0309 	sub.w	r3, r3, r9
 800b7b0:	4543      	cmp	r3, r8
 800b7b2:	f77f af79 	ble.w	800b6a8 <_printf_float+0x250>
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	4652      	mov	r2, sl
 800b7ba:	4631      	mov	r1, r6
 800b7bc:	4628      	mov	r0, r5
 800b7be:	47b8      	blx	r7
 800b7c0:	3001      	adds	r0, #1
 800b7c2:	f43f aeaa 	beq.w	800b51a <_printf_float+0xc2>
 800b7c6:	f108 0801 	add.w	r8, r8, #1
 800b7ca:	e7ec      	b.n	800b7a6 <_printf_float+0x34e>
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	4631      	mov	r1, r6
 800b7d0:	4642      	mov	r2, r8
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	47b8      	blx	r7
 800b7d6:	3001      	adds	r0, #1
 800b7d8:	d1c0      	bne.n	800b75c <_printf_float+0x304>
 800b7da:	e69e      	b.n	800b51a <_printf_float+0xc2>
 800b7dc:	2301      	movs	r3, #1
 800b7de:	4631      	mov	r1, r6
 800b7e0:	4628      	mov	r0, r5
 800b7e2:	9205      	str	r2, [sp, #20]
 800b7e4:	47b8      	blx	r7
 800b7e6:	3001      	adds	r0, #1
 800b7e8:	f43f ae97 	beq.w	800b51a <_printf_float+0xc2>
 800b7ec:	9a05      	ldr	r2, [sp, #20]
 800b7ee:	f10b 0b01 	add.w	fp, fp, #1
 800b7f2:	e7b9      	b.n	800b768 <_printf_float+0x310>
 800b7f4:	ee18 3a10 	vmov	r3, s16
 800b7f8:	4652      	mov	r2, sl
 800b7fa:	4631      	mov	r1, r6
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	47b8      	blx	r7
 800b800:	3001      	adds	r0, #1
 800b802:	d1be      	bne.n	800b782 <_printf_float+0x32a>
 800b804:	e689      	b.n	800b51a <_printf_float+0xc2>
 800b806:	9a05      	ldr	r2, [sp, #20]
 800b808:	464b      	mov	r3, r9
 800b80a:	4442      	add	r2, r8
 800b80c:	4631      	mov	r1, r6
 800b80e:	4628      	mov	r0, r5
 800b810:	47b8      	blx	r7
 800b812:	3001      	adds	r0, #1
 800b814:	d1c1      	bne.n	800b79a <_printf_float+0x342>
 800b816:	e680      	b.n	800b51a <_printf_float+0xc2>
 800b818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b81a:	2a01      	cmp	r2, #1
 800b81c:	dc01      	bgt.n	800b822 <_printf_float+0x3ca>
 800b81e:	07db      	lsls	r3, r3, #31
 800b820:	d538      	bpl.n	800b894 <_printf_float+0x43c>
 800b822:	2301      	movs	r3, #1
 800b824:	4642      	mov	r2, r8
 800b826:	4631      	mov	r1, r6
 800b828:	4628      	mov	r0, r5
 800b82a:	47b8      	blx	r7
 800b82c:	3001      	adds	r0, #1
 800b82e:	f43f ae74 	beq.w	800b51a <_printf_float+0xc2>
 800b832:	ee18 3a10 	vmov	r3, s16
 800b836:	4652      	mov	r2, sl
 800b838:	4631      	mov	r1, r6
 800b83a:	4628      	mov	r0, r5
 800b83c:	47b8      	blx	r7
 800b83e:	3001      	adds	r0, #1
 800b840:	f43f ae6b 	beq.w	800b51a <_printf_float+0xc2>
 800b844:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b848:	2200      	movs	r2, #0
 800b84a:	2300      	movs	r3, #0
 800b84c:	f7f5 f954 	bl	8000af8 <__aeabi_dcmpeq>
 800b850:	b9d8      	cbnz	r0, 800b88a <_printf_float+0x432>
 800b852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b854:	f108 0201 	add.w	r2, r8, #1
 800b858:	3b01      	subs	r3, #1
 800b85a:	4631      	mov	r1, r6
 800b85c:	4628      	mov	r0, r5
 800b85e:	47b8      	blx	r7
 800b860:	3001      	adds	r0, #1
 800b862:	d10e      	bne.n	800b882 <_printf_float+0x42a>
 800b864:	e659      	b.n	800b51a <_printf_float+0xc2>
 800b866:	2301      	movs	r3, #1
 800b868:	4652      	mov	r2, sl
 800b86a:	4631      	mov	r1, r6
 800b86c:	4628      	mov	r0, r5
 800b86e:	47b8      	blx	r7
 800b870:	3001      	adds	r0, #1
 800b872:	f43f ae52 	beq.w	800b51a <_printf_float+0xc2>
 800b876:	f108 0801 	add.w	r8, r8, #1
 800b87a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b87c:	3b01      	subs	r3, #1
 800b87e:	4543      	cmp	r3, r8
 800b880:	dcf1      	bgt.n	800b866 <_printf_float+0x40e>
 800b882:	464b      	mov	r3, r9
 800b884:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b888:	e6dc      	b.n	800b644 <_printf_float+0x1ec>
 800b88a:	f04f 0800 	mov.w	r8, #0
 800b88e:	f104 0a1a 	add.w	sl, r4, #26
 800b892:	e7f2      	b.n	800b87a <_printf_float+0x422>
 800b894:	2301      	movs	r3, #1
 800b896:	4642      	mov	r2, r8
 800b898:	e7df      	b.n	800b85a <_printf_float+0x402>
 800b89a:	2301      	movs	r3, #1
 800b89c:	464a      	mov	r2, r9
 800b89e:	4631      	mov	r1, r6
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	47b8      	blx	r7
 800b8a4:	3001      	adds	r0, #1
 800b8a6:	f43f ae38 	beq.w	800b51a <_printf_float+0xc2>
 800b8aa:	f108 0801 	add.w	r8, r8, #1
 800b8ae:	68e3      	ldr	r3, [r4, #12]
 800b8b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b8b2:	1a5b      	subs	r3, r3, r1
 800b8b4:	4543      	cmp	r3, r8
 800b8b6:	dcf0      	bgt.n	800b89a <_printf_float+0x442>
 800b8b8:	e6fa      	b.n	800b6b0 <_printf_float+0x258>
 800b8ba:	f04f 0800 	mov.w	r8, #0
 800b8be:	f104 0919 	add.w	r9, r4, #25
 800b8c2:	e7f4      	b.n	800b8ae <_printf_float+0x456>

0800b8c4 <_printf_common>:
 800b8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8c8:	4616      	mov	r6, r2
 800b8ca:	4699      	mov	r9, r3
 800b8cc:	688a      	ldr	r2, [r1, #8]
 800b8ce:	690b      	ldr	r3, [r1, #16]
 800b8d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	bfb8      	it	lt
 800b8d8:	4613      	movlt	r3, r2
 800b8da:	6033      	str	r3, [r6, #0]
 800b8dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b8e0:	4607      	mov	r7, r0
 800b8e2:	460c      	mov	r4, r1
 800b8e4:	b10a      	cbz	r2, 800b8ea <_printf_common+0x26>
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	6033      	str	r3, [r6, #0]
 800b8ea:	6823      	ldr	r3, [r4, #0]
 800b8ec:	0699      	lsls	r1, r3, #26
 800b8ee:	bf42      	ittt	mi
 800b8f0:	6833      	ldrmi	r3, [r6, #0]
 800b8f2:	3302      	addmi	r3, #2
 800b8f4:	6033      	strmi	r3, [r6, #0]
 800b8f6:	6825      	ldr	r5, [r4, #0]
 800b8f8:	f015 0506 	ands.w	r5, r5, #6
 800b8fc:	d106      	bne.n	800b90c <_printf_common+0x48>
 800b8fe:	f104 0a19 	add.w	sl, r4, #25
 800b902:	68e3      	ldr	r3, [r4, #12]
 800b904:	6832      	ldr	r2, [r6, #0]
 800b906:	1a9b      	subs	r3, r3, r2
 800b908:	42ab      	cmp	r3, r5
 800b90a:	dc26      	bgt.n	800b95a <_printf_common+0x96>
 800b90c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b910:	1e13      	subs	r3, r2, #0
 800b912:	6822      	ldr	r2, [r4, #0]
 800b914:	bf18      	it	ne
 800b916:	2301      	movne	r3, #1
 800b918:	0692      	lsls	r2, r2, #26
 800b91a:	d42b      	bmi.n	800b974 <_printf_common+0xb0>
 800b91c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b920:	4649      	mov	r1, r9
 800b922:	4638      	mov	r0, r7
 800b924:	47c0      	blx	r8
 800b926:	3001      	adds	r0, #1
 800b928:	d01e      	beq.n	800b968 <_printf_common+0xa4>
 800b92a:	6823      	ldr	r3, [r4, #0]
 800b92c:	68e5      	ldr	r5, [r4, #12]
 800b92e:	6832      	ldr	r2, [r6, #0]
 800b930:	f003 0306 	and.w	r3, r3, #6
 800b934:	2b04      	cmp	r3, #4
 800b936:	bf08      	it	eq
 800b938:	1aad      	subeq	r5, r5, r2
 800b93a:	68a3      	ldr	r3, [r4, #8]
 800b93c:	6922      	ldr	r2, [r4, #16]
 800b93e:	bf0c      	ite	eq
 800b940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b944:	2500      	movne	r5, #0
 800b946:	4293      	cmp	r3, r2
 800b948:	bfc4      	itt	gt
 800b94a:	1a9b      	subgt	r3, r3, r2
 800b94c:	18ed      	addgt	r5, r5, r3
 800b94e:	2600      	movs	r6, #0
 800b950:	341a      	adds	r4, #26
 800b952:	42b5      	cmp	r5, r6
 800b954:	d11a      	bne.n	800b98c <_printf_common+0xc8>
 800b956:	2000      	movs	r0, #0
 800b958:	e008      	b.n	800b96c <_printf_common+0xa8>
 800b95a:	2301      	movs	r3, #1
 800b95c:	4652      	mov	r2, sl
 800b95e:	4649      	mov	r1, r9
 800b960:	4638      	mov	r0, r7
 800b962:	47c0      	blx	r8
 800b964:	3001      	adds	r0, #1
 800b966:	d103      	bne.n	800b970 <_printf_common+0xac>
 800b968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b970:	3501      	adds	r5, #1
 800b972:	e7c6      	b.n	800b902 <_printf_common+0x3e>
 800b974:	18e1      	adds	r1, r4, r3
 800b976:	1c5a      	adds	r2, r3, #1
 800b978:	2030      	movs	r0, #48	; 0x30
 800b97a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b97e:	4422      	add	r2, r4
 800b980:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b984:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b988:	3302      	adds	r3, #2
 800b98a:	e7c7      	b.n	800b91c <_printf_common+0x58>
 800b98c:	2301      	movs	r3, #1
 800b98e:	4622      	mov	r2, r4
 800b990:	4649      	mov	r1, r9
 800b992:	4638      	mov	r0, r7
 800b994:	47c0      	blx	r8
 800b996:	3001      	adds	r0, #1
 800b998:	d0e6      	beq.n	800b968 <_printf_common+0xa4>
 800b99a:	3601      	adds	r6, #1
 800b99c:	e7d9      	b.n	800b952 <_printf_common+0x8e>
	...

0800b9a0 <_printf_i>:
 800b9a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9a4:	7e0f      	ldrb	r7, [r1, #24]
 800b9a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b9a8:	2f78      	cmp	r7, #120	; 0x78
 800b9aa:	4691      	mov	r9, r2
 800b9ac:	4680      	mov	r8, r0
 800b9ae:	460c      	mov	r4, r1
 800b9b0:	469a      	mov	sl, r3
 800b9b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b9b6:	d807      	bhi.n	800b9c8 <_printf_i+0x28>
 800b9b8:	2f62      	cmp	r7, #98	; 0x62
 800b9ba:	d80a      	bhi.n	800b9d2 <_printf_i+0x32>
 800b9bc:	2f00      	cmp	r7, #0
 800b9be:	f000 80d8 	beq.w	800bb72 <_printf_i+0x1d2>
 800b9c2:	2f58      	cmp	r7, #88	; 0x58
 800b9c4:	f000 80a3 	beq.w	800bb0e <_printf_i+0x16e>
 800b9c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b9d0:	e03a      	b.n	800ba48 <_printf_i+0xa8>
 800b9d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b9d6:	2b15      	cmp	r3, #21
 800b9d8:	d8f6      	bhi.n	800b9c8 <_printf_i+0x28>
 800b9da:	a101      	add	r1, pc, #4	; (adr r1, 800b9e0 <_printf_i+0x40>)
 800b9dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9e0:	0800ba39 	.word	0x0800ba39
 800b9e4:	0800ba4d 	.word	0x0800ba4d
 800b9e8:	0800b9c9 	.word	0x0800b9c9
 800b9ec:	0800b9c9 	.word	0x0800b9c9
 800b9f0:	0800b9c9 	.word	0x0800b9c9
 800b9f4:	0800b9c9 	.word	0x0800b9c9
 800b9f8:	0800ba4d 	.word	0x0800ba4d
 800b9fc:	0800b9c9 	.word	0x0800b9c9
 800ba00:	0800b9c9 	.word	0x0800b9c9
 800ba04:	0800b9c9 	.word	0x0800b9c9
 800ba08:	0800b9c9 	.word	0x0800b9c9
 800ba0c:	0800bb59 	.word	0x0800bb59
 800ba10:	0800ba7d 	.word	0x0800ba7d
 800ba14:	0800bb3b 	.word	0x0800bb3b
 800ba18:	0800b9c9 	.word	0x0800b9c9
 800ba1c:	0800b9c9 	.word	0x0800b9c9
 800ba20:	0800bb7b 	.word	0x0800bb7b
 800ba24:	0800b9c9 	.word	0x0800b9c9
 800ba28:	0800ba7d 	.word	0x0800ba7d
 800ba2c:	0800b9c9 	.word	0x0800b9c9
 800ba30:	0800b9c9 	.word	0x0800b9c9
 800ba34:	0800bb43 	.word	0x0800bb43
 800ba38:	682b      	ldr	r3, [r5, #0]
 800ba3a:	1d1a      	adds	r2, r3, #4
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	602a      	str	r2, [r5, #0]
 800ba40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e0a3      	b.n	800bb94 <_printf_i+0x1f4>
 800ba4c:	6820      	ldr	r0, [r4, #0]
 800ba4e:	6829      	ldr	r1, [r5, #0]
 800ba50:	0606      	lsls	r6, r0, #24
 800ba52:	f101 0304 	add.w	r3, r1, #4
 800ba56:	d50a      	bpl.n	800ba6e <_printf_i+0xce>
 800ba58:	680e      	ldr	r6, [r1, #0]
 800ba5a:	602b      	str	r3, [r5, #0]
 800ba5c:	2e00      	cmp	r6, #0
 800ba5e:	da03      	bge.n	800ba68 <_printf_i+0xc8>
 800ba60:	232d      	movs	r3, #45	; 0x2d
 800ba62:	4276      	negs	r6, r6
 800ba64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba68:	485e      	ldr	r0, [pc, #376]	; (800bbe4 <_printf_i+0x244>)
 800ba6a:	230a      	movs	r3, #10
 800ba6c:	e019      	b.n	800baa2 <_printf_i+0x102>
 800ba6e:	680e      	ldr	r6, [r1, #0]
 800ba70:	602b      	str	r3, [r5, #0]
 800ba72:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ba76:	bf18      	it	ne
 800ba78:	b236      	sxthne	r6, r6
 800ba7a:	e7ef      	b.n	800ba5c <_printf_i+0xbc>
 800ba7c:	682b      	ldr	r3, [r5, #0]
 800ba7e:	6820      	ldr	r0, [r4, #0]
 800ba80:	1d19      	adds	r1, r3, #4
 800ba82:	6029      	str	r1, [r5, #0]
 800ba84:	0601      	lsls	r1, r0, #24
 800ba86:	d501      	bpl.n	800ba8c <_printf_i+0xec>
 800ba88:	681e      	ldr	r6, [r3, #0]
 800ba8a:	e002      	b.n	800ba92 <_printf_i+0xf2>
 800ba8c:	0646      	lsls	r6, r0, #25
 800ba8e:	d5fb      	bpl.n	800ba88 <_printf_i+0xe8>
 800ba90:	881e      	ldrh	r6, [r3, #0]
 800ba92:	4854      	ldr	r0, [pc, #336]	; (800bbe4 <_printf_i+0x244>)
 800ba94:	2f6f      	cmp	r7, #111	; 0x6f
 800ba96:	bf0c      	ite	eq
 800ba98:	2308      	moveq	r3, #8
 800ba9a:	230a      	movne	r3, #10
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800baa2:	6865      	ldr	r5, [r4, #4]
 800baa4:	60a5      	str	r5, [r4, #8]
 800baa6:	2d00      	cmp	r5, #0
 800baa8:	bfa2      	ittt	ge
 800baaa:	6821      	ldrge	r1, [r4, #0]
 800baac:	f021 0104 	bicge.w	r1, r1, #4
 800bab0:	6021      	strge	r1, [r4, #0]
 800bab2:	b90e      	cbnz	r6, 800bab8 <_printf_i+0x118>
 800bab4:	2d00      	cmp	r5, #0
 800bab6:	d04d      	beq.n	800bb54 <_printf_i+0x1b4>
 800bab8:	4615      	mov	r5, r2
 800baba:	fbb6 f1f3 	udiv	r1, r6, r3
 800babe:	fb03 6711 	mls	r7, r3, r1, r6
 800bac2:	5dc7      	ldrb	r7, [r0, r7]
 800bac4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bac8:	4637      	mov	r7, r6
 800baca:	42bb      	cmp	r3, r7
 800bacc:	460e      	mov	r6, r1
 800bace:	d9f4      	bls.n	800baba <_printf_i+0x11a>
 800bad0:	2b08      	cmp	r3, #8
 800bad2:	d10b      	bne.n	800baec <_printf_i+0x14c>
 800bad4:	6823      	ldr	r3, [r4, #0]
 800bad6:	07de      	lsls	r6, r3, #31
 800bad8:	d508      	bpl.n	800baec <_printf_i+0x14c>
 800bada:	6923      	ldr	r3, [r4, #16]
 800badc:	6861      	ldr	r1, [r4, #4]
 800bade:	4299      	cmp	r1, r3
 800bae0:	bfde      	ittt	le
 800bae2:	2330      	movle	r3, #48	; 0x30
 800bae4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bae8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800baec:	1b52      	subs	r2, r2, r5
 800baee:	6122      	str	r2, [r4, #16]
 800baf0:	f8cd a000 	str.w	sl, [sp]
 800baf4:	464b      	mov	r3, r9
 800baf6:	aa03      	add	r2, sp, #12
 800baf8:	4621      	mov	r1, r4
 800bafa:	4640      	mov	r0, r8
 800bafc:	f7ff fee2 	bl	800b8c4 <_printf_common>
 800bb00:	3001      	adds	r0, #1
 800bb02:	d14c      	bne.n	800bb9e <_printf_i+0x1fe>
 800bb04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb08:	b004      	add	sp, #16
 800bb0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb0e:	4835      	ldr	r0, [pc, #212]	; (800bbe4 <_printf_i+0x244>)
 800bb10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bb14:	6829      	ldr	r1, [r5, #0]
 800bb16:	6823      	ldr	r3, [r4, #0]
 800bb18:	f851 6b04 	ldr.w	r6, [r1], #4
 800bb1c:	6029      	str	r1, [r5, #0]
 800bb1e:	061d      	lsls	r5, r3, #24
 800bb20:	d514      	bpl.n	800bb4c <_printf_i+0x1ac>
 800bb22:	07df      	lsls	r7, r3, #31
 800bb24:	bf44      	itt	mi
 800bb26:	f043 0320 	orrmi.w	r3, r3, #32
 800bb2a:	6023      	strmi	r3, [r4, #0]
 800bb2c:	b91e      	cbnz	r6, 800bb36 <_printf_i+0x196>
 800bb2e:	6823      	ldr	r3, [r4, #0]
 800bb30:	f023 0320 	bic.w	r3, r3, #32
 800bb34:	6023      	str	r3, [r4, #0]
 800bb36:	2310      	movs	r3, #16
 800bb38:	e7b0      	b.n	800ba9c <_printf_i+0xfc>
 800bb3a:	6823      	ldr	r3, [r4, #0]
 800bb3c:	f043 0320 	orr.w	r3, r3, #32
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	2378      	movs	r3, #120	; 0x78
 800bb44:	4828      	ldr	r0, [pc, #160]	; (800bbe8 <_printf_i+0x248>)
 800bb46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb4a:	e7e3      	b.n	800bb14 <_printf_i+0x174>
 800bb4c:	0659      	lsls	r1, r3, #25
 800bb4e:	bf48      	it	mi
 800bb50:	b2b6      	uxthmi	r6, r6
 800bb52:	e7e6      	b.n	800bb22 <_printf_i+0x182>
 800bb54:	4615      	mov	r5, r2
 800bb56:	e7bb      	b.n	800bad0 <_printf_i+0x130>
 800bb58:	682b      	ldr	r3, [r5, #0]
 800bb5a:	6826      	ldr	r6, [r4, #0]
 800bb5c:	6961      	ldr	r1, [r4, #20]
 800bb5e:	1d18      	adds	r0, r3, #4
 800bb60:	6028      	str	r0, [r5, #0]
 800bb62:	0635      	lsls	r5, r6, #24
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	d501      	bpl.n	800bb6c <_printf_i+0x1cc>
 800bb68:	6019      	str	r1, [r3, #0]
 800bb6a:	e002      	b.n	800bb72 <_printf_i+0x1d2>
 800bb6c:	0670      	lsls	r0, r6, #25
 800bb6e:	d5fb      	bpl.n	800bb68 <_printf_i+0x1c8>
 800bb70:	8019      	strh	r1, [r3, #0]
 800bb72:	2300      	movs	r3, #0
 800bb74:	6123      	str	r3, [r4, #16]
 800bb76:	4615      	mov	r5, r2
 800bb78:	e7ba      	b.n	800baf0 <_printf_i+0x150>
 800bb7a:	682b      	ldr	r3, [r5, #0]
 800bb7c:	1d1a      	adds	r2, r3, #4
 800bb7e:	602a      	str	r2, [r5, #0]
 800bb80:	681d      	ldr	r5, [r3, #0]
 800bb82:	6862      	ldr	r2, [r4, #4]
 800bb84:	2100      	movs	r1, #0
 800bb86:	4628      	mov	r0, r5
 800bb88:	f7f4 fb42 	bl	8000210 <memchr>
 800bb8c:	b108      	cbz	r0, 800bb92 <_printf_i+0x1f2>
 800bb8e:	1b40      	subs	r0, r0, r5
 800bb90:	6060      	str	r0, [r4, #4]
 800bb92:	6863      	ldr	r3, [r4, #4]
 800bb94:	6123      	str	r3, [r4, #16]
 800bb96:	2300      	movs	r3, #0
 800bb98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb9c:	e7a8      	b.n	800baf0 <_printf_i+0x150>
 800bb9e:	6923      	ldr	r3, [r4, #16]
 800bba0:	462a      	mov	r2, r5
 800bba2:	4649      	mov	r1, r9
 800bba4:	4640      	mov	r0, r8
 800bba6:	47d0      	blx	sl
 800bba8:	3001      	adds	r0, #1
 800bbaa:	d0ab      	beq.n	800bb04 <_printf_i+0x164>
 800bbac:	6823      	ldr	r3, [r4, #0]
 800bbae:	079b      	lsls	r3, r3, #30
 800bbb0:	d413      	bmi.n	800bbda <_printf_i+0x23a>
 800bbb2:	68e0      	ldr	r0, [r4, #12]
 800bbb4:	9b03      	ldr	r3, [sp, #12]
 800bbb6:	4298      	cmp	r0, r3
 800bbb8:	bfb8      	it	lt
 800bbba:	4618      	movlt	r0, r3
 800bbbc:	e7a4      	b.n	800bb08 <_printf_i+0x168>
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	4632      	mov	r2, r6
 800bbc2:	4649      	mov	r1, r9
 800bbc4:	4640      	mov	r0, r8
 800bbc6:	47d0      	blx	sl
 800bbc8:	3001      	adds	r0, #1
 800bbca:	d09b      	beq.n	800bb04 <_printf_i+0x164>
 800bbcc:	3501      	adds	r5, #1
 800bbce:	68e3      	ldr	r3, [r4, #12]
 800bbd0:	9903      	ldr	r1, [sp, #12]
 800bbd2:	1a5b      	subs	r3, r3, r1
 800bbd4:	42ab      	cmp	r3, r5
 800bbd6:	dcf2      	bgt.n	800bbbe <_printf_i+0x21e>
 800bbd8:	e7eb      	b.n	800bbb2 <_printf_i+0x212>
 800bbda:	2500      	movs	r5, #0
 800bbdc:	f104 0619 	add.w	r6, r4, #25
 800bbe0:	e7f5      	b.n	800bbce <_printf_i+0x22e>
 800bbe2:	bf00      	nop
 800bbe4:	0800e6ee 	.word	0x0800e6ee
 800bbe8:	0800e6ff 	.word	0x0800e6ff

0800bbec <iprintf>:
 800bbec:	b40f      	push	{r0, r1, r2, r3}
 800bbee:	4b0a      	ldr	r3, [pc, #40]	; (800bc18 <iprintf+0x2c>)
 800bbf0:	b513      	push	{r0, r1, r4, lr}
 800bbf2:	681c      	ldr	r4, [r3, #0]
 800bbf4:	b124      	cbz	r4, 800bc00 <iprintf+0x14>
 800bbf6:	69a3      	ldr	r3, [r4, #24]
 800bbf8:	b913      	cbnz	r3, 800bc00 <iprintf+0x14>
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f7ff fa1c 	bl	800b038 <__sinit>
 800bc00:	ab05      	add	r3, sp, #20
 800bc02:	9a04      	ldr	r2, [sp, #16]
 800bc04:	68a1      	ldr	r1, [r4, #8]
 800bc06:	9301      	str	r3, [sp, #4]
 800bc08:	4620      	mov	r0, r4
 800bc0a:	f001 fe0b 	bl	800d824 <_vfiprintf_r>
 800bc0e:	b002      	add	sp, #8
 800bc10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc14:	b004      	add	sp, #16
 800bc16:	4770      	bx	lr
 800bc18:	20000014 	.word	0x20000014

0800bc1c <_puts_r>:
 800bc1c:	b570      	push	{r4, r5, r6, lr}
 800bc1e:	460e      	mov	r6, r1
 800bc20:	4605      	mov	r5, r0
 800bc22:	b118      	cbz	r0, 800bc2c <_puts_r+0x10>
 800bc24:	6983      	ldr	r3, [r0, #24]
 800bc26:	b90b      	cbnz	r3, 800bc2c <_puts_r+0x10>
 800bc28:	f7ff fa06 	bl	800b038 <__sinit>
 800bc2c:	69ab      	ldr	r3, [r5, #24]
 800bc2e:	68ac      	ldr	r4, [r5, #8]
 800bc30:	b913      	cbnz	r3, 800bc38 <_puts_r+0x1c>
 800bc32:	4628      	mov	r0, r5
 800bc34:	f7ff fa00 	bl	800b038 <__sinit>
 800bc38:	4b2c      	ldr	r3, [pc, #176]	; (800bcec <_puts_r+0xd0>)
 800bc3a:	429c      	cmp	r4, r3
 800bc3c:	d120      	bne.n	800bc80 <_puts_r+0x64>
 800bc3e:	686c      	ldr	r4, [r5, #4]
 800bc40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc42:	07db      	lsls	r3, r3, #31
 800bc44:	d405      	bmi.n	800bc52 <_puts_r+0x36>
 800bc46:	89a3      	ldrh	r3, [r4, #12]
 800bc48:	0598      	lsls	r0, r3, #22
 800bc4a:	d402      	bmi.n	800bc52 <_puts_r+0x36>
 800bc4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc4e:	f7ff fab6 	bl	800b1be <__retarget_lock_acquire_recursive>
 800bc52:	89a3      	ldrh	r3, [r4, #12]
 800bc54:	0719      	lsls	r1, r3, #28
 800bc56:	d51d      	bpl.n	800bc94 <_puts_r+0x78>
 800bc58:	6923      	ldr	r3, [r4, #16]
 800bc5a:	b1db      	cbz	r3, 800bc94 <_puts_r+0x78>
 800bc5c:	3e01      	subs	r6, #1
 800bc5e:	68a3      	ldr	r3, [r4, #8]
 800bc60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bc64:	3b01      	subs	r3, #1
 800bc66:	60a3      	str	r3, [r4, #8]
 800bc68:	bb39      	cbnz	r1, 800bcba <_puts_r+0x9e>
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	da38      	bge.n	800bce0 <_puts_r+0xc4>
 800bc6e:	4622      	mov	r2, r4
 800bc70:	210a      	movs	r1, #10
 800bc72:	4628      	mov	r0, r5
 800bc74:	f000 f906 	bl	800be84 <__swbuf_r>
 800bc78:	3001      	adds	r0, #1
 800bc7a:	d011      	beq.n	800bca0 <_puts_r+0x84>
 800bc7c:	250a      	movs	r5, #10
 800bc7e:	e011      	b.n	800bca4 <_puts_r+0x88>
 800bc80:	4b1b      	ldr	r3, [pc, #108]	; (800bcf0 <_puts_r+0xd4>)
 800bc82:	429c      	cmp	r4, r3
 800bc84:	d101      	bne.n	800bc8a <_puts_r+0x6e>
 800bc86:	68ac      	ldr	r4, [r5, #8]
 800bc88:	e7da      	b.n	800bc40 <_puts_r+0x24>
 800bc8a:	4b1a      	ldr	r3, [pc, #104]	; (800bcf4 <_puts_r+0xd8>)
 800bc8c:	429c      	cmp	r4, r3
 800bc8e:	bf08      	it	eq
 800bc90:	68ec      	ldreq	r4, [r5, #12]
 800bc92:	e7d5      	b.n	800bc40 <_puts_r+0x24>
 800bc94:	4621      	mov	r1, r4
 800bc96:	4628      	mov	r0, r5
 800bc98:	f000 f958 	bl	800bf4c <__swsetup_r>
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	d0dd      	beq.n	800bc5c <_puts_r+0x40>
 800bca0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bca4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bca6:	07da      	lsls	r2, r3, #31
 800bca8:	d405      	bmi.n	800bcb6 <_puts_r+0x9a>
 800bcaa:	89a3      	ldrh	r3, [r4, #12]
 800bcac:	059b      	lsls	r3, r3, #22
 800bcae:	d402      	bmi.n	800bcb6 <_puts_r+0x9a>
 800bcb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcb2:	f7ff fa85 	bl	800b1c0 <__retarget_lock_release_recursive>
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	bd70      	pop	{r4, r5, r6, pc}
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	da04      	bge.n	800bcc8 <_puts_r+0xac>
 800bcbe:	69a2      	ldr	r2, [r4, #24]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	dc06      	bgt.n	800bcd2 <_puts_r+0xb6>
 800bcc4:	290a      	cmp	r1, #10
 800bcc6:	d004      	beq.n	800bcd2 <_puts_r+0xb6>
 800bcc8:	6823      	ldr	r3, [r4, #0]
 800bcca:	1c5a      	adds	r2, r3, #1
 800bccc:	6022      	str	r2, [r4, #0]
 800bcce:	7019      	strb	r1, [r3, #0]
 800bcd0:	e7c5      	b.n	800bc5e <_puts_r+0x42>
 800bcd2:	4622      	mov	r2, r4
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	f000 f8d5 	bl	800be84 <__swbuf_r>
 800bcda:	3001      	adds	r0, #1
 800bcdc:	d1bf      	bne.n	800bc5e <_puts_r+0x42>
 800bcde:	e7df      	b.n	800bca0 <_puts_r+0x84>
 800bce0:	6823      	ldr	r3, [r4, #0]
 800bce2:	250a      	movs	r5, #10
 800bce4:	1c5a      	adds	r2, r3, #1
 800bce6:	6022      	str	r2, [r4, #0]
 800bce8:	701d      	strb	r5, [r3, #0]
 800bcea:	e7db      	b.n	800bca4 <_puts_r+0x88>
 800bcec:	0800e698 	.word	0x0800e698
 800bcf0:	0800e6b8 	.word	0x0800e6b8
 800bcf4:	0800e678 	.word	0x0800e678

0800bcf8 <puts>:
 800bcf8:	4b02      	ldr	r3, [pc, #8]	; (800bd04 <puts+0xc>)
 800bcfa:	4601      	mov	r1, r0
 800bcfc:	6818      	ldr	r0, [r3, #0]
 800bcfe:	f7ff bf8d 	b.w	800bc1c <_puts_r>
 800bd02:	bf00      	nop
 800bd04:	20000014 	.word	0x20000014

0800bd08 <cleanup_glue>:
 800bd08:	b538      	push	{r3, r4, r5, lr}
 800bd0a:	460c      	mov	r4, r1
 800bd0c:	6809      	ldr	r1, [r1, #0]
 800bd0e:	4605      	mov	r5, r0
 800bd10:	b109      	cbz	r1, 800bd16 <cleanup_glue+0xe>
 800bd12:	f7ff fff9 	bl	800bd08 <cleanup_glue>
 800bd16:	4621      	mov	r1, r4
 800bd18:	4628      	mov	r0, r5
 800bd1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd1e:	f001 bd0b 	b.w	800d738 <_free_r>
	...

0800bd24 <_reclaim_reent>:
 800bd24:	4b2c      	ldr	r3, [pc, #176]	; (800bdd8 <_reclaim_reent+0xb4>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4283      	cmp	r3, r0
 800bd2a:	b570      	push	{r4, r5, r6, lr}
 800bd2c:	4604      	mov	r4, r0
 800bd2e:	d051      	beq.n	800bdd4 <_reclaim_reent+0xb0>
 800bd30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bd32:	b143      	cbz	r3, 800bd46 <_reclaim_reent+0x22>
 800bd34:	68db      	ldr	r3, [r3, #12]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d14a      	bne.n	800bdd0 <_reclaim_reent+0xac>
 800bd3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd3c:	6819      	ldr	r1, [r3, #0]
 800bd3e:	b111      	cbz	r1, 800bd46 <_reclaim_reent+0x22>
 800bd40:	4620      	mov	r0, r4
 800bd42:	f001 fcf9 	bl	800d738 <_free_r>
 800bd46:	6961      	ldr	r1, [r4, #20]
 800bd48:	b111      	cbz	r1, 800bd50 <_reclaim_reent+0x2c>
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	f001 fcf4 	bl	800d738 <_free_r>
 800bd50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bd52:	b111      	cbz	r1, 800bd5a <_reclaim_reent+0x36>
 800bd54:	4620      	mov	r0, r4
 800bd56:	f001 fcef 	bl	800d738 <_free_r>
 800bd5a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bd5c:	b111      	cbz	r1, 800bd64 <_reclaim_reent+0x40>
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f001 fcea 	bl	800d738 <_free_r>
 800bd64:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bd66:	b111      	cbz	r1, 800bd6e <_reclaim_reent+0x4a>
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f001 fce5 	bl	800d738 <_free_r>
 800bd6e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bd70:	b111      	cbz	r1, 800bd78 <_reclaim_reent+0x54>
 800bd72:	4620      	mov	r0, r4
 800bd74:	f001 fce0 	bl	800d738 <_free_r>
 800bd78:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bd7a:	b111      	cbz	r1, 800bd82 <_reclaim_reent+0x5e>
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f001 fcdb 	bl	800d738 <_free_r>
 800bd82:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bd84:	b111      	cbz	r1, 800bd8c <_reclaim_reent+0x68>
 800bd86:	4620      	mov	r0, r4
 800bd88:	f001 fcd6 	bl	800d738 <_free_r>
 800bd8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd8e:	b111      	cbz	r1, 800bd96 <_reclaim_reent+0x72>
 800bd90:	4620      	mov	r0, r4
 800bd92:	f001 fcd1 	bl	800d738 <_free_r>
 800bd96:	69a3      	ldr	r3, [r4, #24]
 800bd98:	b1e3      	cbz	r3, 800bdd4 <_reclaim_reent+0xb0>
 800bd9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	4798      	blx	r3
 800bda0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bda2:	b1b9      	cbz	r1, 800bdd4 <_reclaim_reent+0xb0>
 800bda4:	4620      	mov	r0, r4
 800bda6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bdaa:	f7ff bfad 	b.w	800bd08 <cleanup_glue>
 800bdae:	5949      	ldr	r1, [r1, r5]
 800bdb0:	b941      	cbnz	r1, 800bdc4 <_reclaim_reent+0xa0>
 800bdb2:	3504      	adds	r5, #4
 800bdb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdb6:	2d80      	cmp	r5, #128	; 0x80
 800bdb8:	68d9      	ldr	r1, [r3, #12]
 800bdba:	d1f8      	bne.n	800bdae <_reclaim_reent+0x8a>
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	f001 fcbb 	bl	800d738 <_free_r>
 800bdc2:	e7ba      	b.n	800bd3a <_reclaim_reent+0x16>
 800bdc4:	680e      	ldr	r6, [r1, #0]
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f001 fcb6 	bl	800d738 <_free_r>
 800bdcc:	4631      	mov	r1, r6
 800bdce:	e7ef      	b.n	800bdb0 <_reclaim_reent+0x8c>
 800bdd0:	2500      	movs	r5, #0
 800bdd2:	e7ef      	b.n	800bdb4 <_reclaim_reent+0x90>
 800bdd4:	bd70      	pop	{r4, r5, r6, pc}
 800bdd6:	bf00      	nop
 800bdd8:	20000014 	.word	0x20000014

0800bddc <_sbrk_r>:
 800bddc:	b538      	push	{r3, r4, r5, lr}
 800bdde:	4d06      	ldr	r5, [pc, #24]	; (800bdf8 <_sbrk_r+0x1c>)
 800bde0:	2300      	movs	r3, #0
 800bde2:	4604      	mov	r4, r0
 800bde4:	4608      	mov	r0, r1
 800bde6:	602b      	str	r3, [r5, #0]
 800bde8:	f7f6 fb16 	bl	8002418 <_sbrk>
 800bdec:	1c43      	adds	r3, r0, #1
 800bdee:	d102      	bne.n	800bdf6 <_sbrk_r+0x1a>
 800bdf0:	682b      	ldr	r3, [r5, #0]
 800bdf2:	b103      	cbz	r3, 800bdf6 <_sbrk_r+0x1a>
 800bdf4:	6023      	str	r3, [r4, #0]
 800bdf6:	bd38      	pop	{r3, r4, r5, pc}
 800bdf8:	20004524 	.word	0x20004524

0800bdfc <__sread>:
 800bdfc:	b510      	push	{r4, lr}
 800bdfe:	460c      	mov	r4, r1
 800be00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be04:	f001 fe3e 	bl	800da84 <_read_r>
 800be08:	2800      	cmp	r0, #0
 800be0a:	bfab      	itete	ge
 800be0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be0e:	89a3      	ldrhlt	r3, [r4, #12]
 800be10:	181b      	addge	r3, r3, r0
 800be12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be16:	bfac      	ite	ge
 800be18:	6563      	strge	r3, [r4, #84]	; 0x54
 800be1a:	81a3      	strhlt	r3, [r4, #12]
 800be1c:	bd10      	pop	{r4, pc}

0800be1e <__swrite>:
 800be1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be22:	461f      	mov	r7, r3
 800be24:	898b      	ldrh	r3, [r1, #12]
 800be26:	05db      	lsls	r3, r3, #23
 800be28:	4605      	mov	r5, r0
 800be2a:	460c      	mov	r4, r1
 800be2c:	4616      	mov	r6, r2
 800be2e:	d505      	bpl.n	800be3c <__swrite+0x1e>
 800be30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be34:	2302      	movs	r3, #2
 800be36:	2200      	movs	r2, #0
 800be38:	f001 f846 	bl	800cec8 <_lseek_r>
 800be3c:	89a3      	ldrh	r3, [r4, #12]
 800be3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be46:	81a3      	strh	r3, [r4, #12]
 800be48:	4632      	mov	r2, r6
 800be4a:	463b      	mov	r3, r7
 800be4c:	4628      	mov	r0, r5
 800be4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be52:	f000 b869 	b.w	800bf28 <_write_r>

0800be56 <__sseek>:
 800be56:	b510      	push	{r4, lr}
 800be58:	460c      	mov	r4, r1
 800be5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be5e:	f001 f833 	bl	800cec8 <_lseek_r>
 800be62:	1c43      	adds	r3, r0, #1
 800be64:	89a3      	ldrh	r3, [r4, #12]
 800be66:	bf15      	itete	ne
 800be68:	6560      	strne	r0, [r4, #84]	; 0x54
 800be6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be72:	81a3      	strheq	r3, [r4, #12]
 800be74:	bf18      	it	ne
 800be76:	81a3      	strhne	r3, [r4, #12]
 800be78:	bd10      	pop	{r4, pc}

0800be7a <__sclose>:
 800be7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be7e:	f000 b8d3 	b.w	800c028 <_close_r>
	...

0800be84 <__swbuf_r>:
 800be84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be86:	460e      	mov	r6, r1
 800be88:	4614      	mov	r4, r2
 800be8a:	4605      	mov	r5, r0
 800be8c:	b118      	cbz	r0, 800be96 <__swbuf_r+0x12>
 800be8e:	6983      	ldr	r3, [r0, #24]
 800be90:	b90b      	cbnz	r3, 800be96 <__swbuf_r+0x12>
 800be92:	f7ff f8d1 	bl	800b038 <__sinit>
 800be96:	4b21      	ldr	r3, [pc, #132]	; (800bf1c <__swbuf_r+0x98>)
 800be98:	429c      	cmp	r4, r3
 800be9a:	d12b      	bne.n	800bef4 <__swbuf_r+0x70>
 800be9c:	686c      	ldr	r4, [r5, #4]
 800be9e:	69a3      	ldr	r3, [r4, #24]
 800bea0:	60a3      	str	r3, [r4, #8]
 800bea2:	89a3      	ldrh	r3, [r4, #12]
 800bea4:	071a      	lsls	r2, r3, #28
 800bea6:	d52f      	bpl.n	800bf08 <__swbuf_r+0x84>
 800bea8:	6923      	ldr	r3, [r4, #16]
 800beaa:	b36b      	cbz	r3, 800bf08 <__swbuf_r+0x84>
 800beac:	6923      	ldr	r3, [r4, #16]
 800beae:	6820      	ldr	r0, [r4, #0]
 800beb0:	1ac0      	subs	r0, r0, r3
 800beb2:	6963      	ldr	r3, [r4, #20]
 800beb4:	b2f6      	uxtb	r6, r6
 800beb6:	4283      	cmp	r3, r0
 800beb8:	4637      	mov	r7, r6
 800beba:	dc04      	bgt.n	800bec6 <__swbuf_r+0x42>
 800bebc:	4621      	mov	r1, r4
 800bebe:	4628      	mov	r0, r5
 800bec0:	f000 ffc2 	bl	800ce48 <_fflush_r>
 800bec4:	bb30      	cbnz	r0, 800bf14 <__swbuf_r+0x90>
 800bec6:	68a3      	ldr	r3, [r4, #8]
 800bec8:	3b01      	subs	r3, #1
 800beca:	60a3      	str	r3, [r4, #8]
 800becc:	6823      	ldr	r3, [r4, #0]
 800bece:	1c5a      	adds	r2, r3, #1
 800bed0:	6022      	str	r2, [r4, #0]
 800bed2:	701e      	strb	r6, [r3, #0]
 800bed4:	6963      	ldr	r3, [r4, #20]
 800bed6:	3001      	adds	r0, #1
 800bed8:	4283      	cmp	r3, r0
 800beda:	d004      	beq.n	800bee6 <__swbuf_r+0x62>
 800bedc:	89a3      	ldrh	r3, [r4, #12]
 800bede:	07db      	lsls	r3, r3, #31
 800bee0:	d506      	bpl.n	800bef0 <__swbuf_r+0x6c>
 800bee2:	2e0a      	cmp	r6, #10
 800bee4:	d104      	bne.n	800bef0 <__swbuf_r+0x6c>
 800bee6:	4621      	mov	r1, r4
 800bee8:	4628      	mov	r0, r5
 800beea:	f000 ffad 	bl	800ce48 <_fflush_r>
 800beee:	b988      	cbnz	r0, 800bf14 <__swbuf_r+0x90>
 800bef0:	4638      	mov	r0, r7
 800bef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bef4:	4b0a      	ldr	r3, [pc, #40]	; (800bf20 <__swbuf_r+0x9c>)
 800bef6:	429c      	cmp	r4, r3
 800bef8:	d101      	bne.n	800befe <__swbuf_r+0x7a>
 800befa:	68ac      	ldr	r4, [r5, #8]
 800befc:	e7cf      	b.n	800be9e <__swbuf_r+0x1a>
 800befe:	4b09      	ldr	r3, [pc, #36]	; (800bf24 <__swbuf_r+0xa0>)
 800bf00:	429c      	cmp	r4, r3
 800bf02:	bf08      	it	eq
 800bf04:	68ec      	ldreq	r4, [r5, #12]
 800bf06:	e7ca      	b.n	800be9e <__swbuf_r+0x1a>
 800bf08:	4621      	mov	r1, r4
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	f000 f81e 	bl	800bf4c <__swsetup_r>
 800bf10:	2800      	cmp	r0, #0
 800bf12:	d0cb      	beq.n	800beac <__swbuf_r+0x28>
 800bf14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bf18:	e7ea      	b.n	800bef0 <__swbuf_r+0x6c>
 800bf1a:	bf00      	nop
 800bf1c:	0800e698 	.word	0x0800e698
 800bf20:	0800e6b8 	.word	0x0800e6b8
 800bf24:	0800e678 	.word	0x0800e678

0800bf28 <_write_r>:
 800bf28:	b538      	push	{r3, r4, r5, lr}
 800bf2a:	4d07      	ldr	r5, [pc, #28]	; (800bf48 <_write_r+0x20>)
 800bf2c:	4604      	mov	r4, r0
 800bf2e:	4608      	mov	r0, r1
 800bf30:	4611      	mov	r1, r2
 800bf32:	2200      	movs	r2, #0
 800bf34:	602a      	str	r2, [r5, #0]
 800bf36:	461a      	mov	r2, r3
 800bf38:	f7f6 fa1d 	bl	8002376 <_write>
 800bf3c:	1c43      	adds	r3, r0, #1
 800bf3e:	d102      	bne.n	800bf46 <_write_r+0x1e>
 800bf40:	682b      	ldr	r3, [r5, #0]
 800bf42:	b103      	cbz	r3, 800bf46 <_write_r+0x1e>
 800bf44:	6023      	str	r3, [r4, #0]
 800bf46:	bd38      	pop	{r3, r4, r5, pc}
 800bf48:	20004524 	.word	0x20004524

0800bf4c <__swsetup_r>:
 800bf4c:	4b32      	ldr	r3, [pc, #200]	; (800c018 <__swsetup_r+0xcc>)
 800bf4e:	b570      	push	{r4, r5, r6, lr}
 800bf50:	681d      	ldr	r5, [r3, #0]
 800bf52:	4606      	mov	r6, r0
 800bf54:	460c      	mov	r4, r1
 800bf56:	b125      	cbz	r5, 800bf62 <__swsetup_r+0x16>
 800bf58:	69ab      	ldr	r3, [r5, #24]
 800bf5a:	b913      	cbnz	r3, 800bf62 <__swsetup_r+0x16>
 800bf5c:	4628      	mov	r0, r5
 800bf5e:	f7ff f86b 	bl	800b038 <__sinit>
 800bf62:	4b2e      	ldr	r3, [pc, #184]	; (800c01c <__swsetup_r+0xd0>)
 800bf64:	429c      	cmp	r4, r3
 800bf66:	d10f      	bne.n	800bf88 <__swsetup_r+0x3c>
 800bf68:	686c      	ldr	r4, [r5, #4]
 800bf6a:	89a3      	ldrh	r3, [r4, #12]
 800bf6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf70:	0719      	lsls	r1, r3, #28
 800bf72:	d42c      	bmi.n	800bfce <__swsetup_r+0x82>
 800bf74:	06dd      	lsls	r5, r3, #27
 800bf76:	d411      	bmi.n	800bf9c <__swsetup_r+0x50>
 800bf78:	2309      	movs	r3, #9
 800bf7a:	6033      	str	r3, [r6, #0]
 800bf7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf80:	81a3      	strh	r3, [r4, #12]
 800bf82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf86:	e03e      	b.n	800c006 <__swsetup_r+0xba>
 800bf88:	4b25      	ldr	r3, [pc, #148]	; (800c020 <__swsetup_r+0xd4>)
 800bf8a:	429c      	cmp	r4, r3
 800bf8c:	d101      	bne.n	800bf92 <__swsetup_r+0x46>
 800bf8e:	68ac      	ldr	r4, [r5, #8]
 800bf90:	e7eb      	b.n	800bf6a <__swsetup_r+0x1e>
 800bf92:	4b24      	ldr	r3, [pc, #144]	; (800c024 <__swsetup_r+0xd8>)
 800bf94:	429c      	cmp	r4, r3
 800bf96:	bf08      	it	eq
 800bf98:	68ec      	ldreq	r4, [r5, #12]
 800bf9a:	e7e6      	b.n	800bf6a <__swsetup_r+0x1e>
 800bf9c:	0758      	lsls	r0, r3, #29
 800bf9e:	d512      	bpl.n	800bfc6 <__swsetup_r+0x7a>
 800bfa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfa2:	b141      	cbz	r1, 800bfb6 <__swsetup_r+0x6a>
 800bfa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfa8:	4299      	cmp	r1, r3
 800bfaa:	d002      	beq.n	800bfb2 <__swsetup_r+0x66>
 800bfac:	4630      	mov	r0, r6
 800bfae:	f001 fbc3 	bl	800d738 <_free_r>
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	6363      	str	r3, [r4, #52]	; 0x34
 800bfb6:	89a3      	ldrh	r3, [r4, #12]
 800bfb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bfbc:	81a3      	strh	r3, [r4, #12]
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	6063      	str	r3, [r4, #4]
 800bfc2:	6923      	ldr	r3, [r4, #16]
 800bfc4:	6023      	str	r3, [r4, #0]
 800bfc6:	89a3      	ldrh	r3, [r4, #12]
 800bfc8:	f043 0308 	orr.w	r3, r3, #8
 800bfcc:	81a3      	strh	r3, [r4, #12]
 800bfce:	6923      	ldr	r3, [r4, #16]
 800bfd0:	b94b      	cbnz	r3, 800bfe6 <__swsetup_r+0x9a>
 800bfd2:	89a3      	ldrh	r3, [r4, #12]
 800bfd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bfd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfdc:	d003      	beq.n	800bfe6 <__swsetup_r+0x9a>
 800bfde:	4621      	mov	r1, r4
 800bfe0:	4630      	mov	r0, r6
 800bfe2:	f000 ffa9 	bl	800cf38 <__smakebuf_r>
 800bfe6:	89a0      	ldrh	r0, [r4, #12]
 800bfe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfec:	f010 0301 	ands.w	r3, r0, #1
 800bff0:	d00a      	beq.n	800c008 <__swsetup_r+0xbc>
 800bff2:	2300      	movs	r3, #0
 800bff4:	60a3      	str	r3, [r4, #8]
 800bff6:	6963      	ldr	r3, [r4, #20]
 800bff8:	425b      	negs	r3, r3
 800bffa:	61a3      	str	r3, [r4, #24]
 800bffc:	6923      	ldr	r3, [r4, #16]
 800bffe:	b943      	cbnz	r3, 800c012 <__swsetup_r+0xc6>
 800c000:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c004:	d1ba      	bne.n	800bf7c <__swsetup_r+0x30>
 800c006:	bd70      	pop	{r4, r5, r6, pc}
 800c008:	0781      	lsls	r1, r0, #30
 800c00a:	bf58      	it	pl
 800c00c:	6963      	ldrpl	r3, [r4, #20]
 800c00e:	60a3      	str	r3, [r4, #8]
 800c010:	e7f4      	b.n	800bffc <__swsetup_r+0xb0>
 800c012:	2000      	movs	r0, #0
 800c014:	e7f7      	b.n	800c006 <__swsetup_r+0xba>
 800c016:	bf00      	nop
 800c018:	20000014 	.word	0x20000014
 800c01c:	0800e698 	.word	0x0800e698
 800c020:	0800e6b8 	.word	0x0800e6b8
 800c024:	0800e678 	.word	0x0800e678

0800c028 <_close_r>:
 800c028:	b538      	push	{r3, r4, r5, lr}
 800c02a:	4d06      	ldr	r5, [pc, #24]	; (800c044 <_close_r+0x1c>)
 800c02c:	2300      	movs	r3, #0
 800c02e:	4604      	mov	r4, r0
 800c030:	4608      	mov	r0, r1
 800c032:	602b      	str	r3, [r5, #0]
 800c034:	f7f6 f9bb 	bl	80023ae <_close>
 800c038:	1c43      	adds	r3, r0, #1
 800c03a:	d102      	bne.n	800c042 <_close_r+0x1a>
 800c03c:	682b      	ldr	r3, [r5, #0]
 800c03e:	b103      	cbz	r3, 800c042 <_close_r+0x1a>
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	bd38      	pop	{r3, r4, r5, pc}
 800c044:	20004524 	.word	0x20004524

0800c048 <quorem>:
 800c048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c04c:	6903      	ldr	r3, [r0, #16]
 800c04e:	690c      	ldr	r4, [r1, #16]
 800c050:	42a3      	cmp	r3, r4
 800c052:	4607      	mov	r7, r0
 800c054:	f2c0 8081 	blt.w	800c15a <quorem+0x112>
 800c058:	3c01      	subs	r4, #1
 800c05a:	f101 0814 	add.w	r8, r1, #20
 800c05e:	f100 0514 	add.w	r5, r0, #20
 800c062:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c066:	9301      	str	r3, [sp, #4]
 800c068:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c06c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c070:	3301      	adds	r3, #1
 800c072:	429a      	cmp	r2, r3
 800c074:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c078:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c07c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c080:	d331      	bcc.n	800c0e6 <quorem+0x9e>
 800c082:	f04f 0e00 	mov.w	lr, #0
 800c086:	4640      	mov	r0, r8
 800c088:	46ac      	mov	ip, r5
 800c08a:	46f2      	mov	sl, lr
 800c08c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c090:	b293      	uxth	r3, r2
 800c092:	fb06 e303 	mla	r3, r6, r3, lr
 800c096:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	ebaa 0303 	sub.w	r3, sl, r3
 800c0a0:	f8dc a000 	ldr.w	sl, [ip]
 800c0a4:	0c12      	lsrs	r2, r2, #16
 800c0a6:	fa13 f38a 	uxtah	r3, r3, sl
 800c0aa:	fb06 e202 	mla	r2, r6, r2, lr
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	9b00      	ldr	r3, [sp, #0]
 800c0b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c0b6:	b292      	uxth	r2, r2
 800c0b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c0bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c0c0:	f8bd 3000 	ldrh.w	r3, [sp]
 800c0c4:	4581      	cmp	r9, r0
 800c0c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0ca:	f84c 3b04 	str.w	r3, [ip], #4
 800c0ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c0d2:	d2db      	bcs.n	800c08c <quorem+0x44>
 800c0d4:	f855 300b 	ldr.w	r3, [r5, fp]
 800c0d8:	b92b      	cbnz	r3, 800c0e6 <quorem+0x9e>
 800c0da:	9b01      	ldr	r3, [sp, #4]
 800c0dc:	3b04      	subs	r3, #4
 800c0de:	429d      	cmp	r5, r3
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	d32e      	bcc.n	800c142 <quorem+0xfa>
 800c0e4:	613c      	str	r4, [r7, #16]
 800c0e6:	4638      	mov	r0, r7
 800c0e8:	f001 fa0e 	bl	800d508 <__mcmp>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	db24      	blt.n	800c13a <quorem+0xf2>
 800c0f0:	3601      	adds	r6, #1
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	f04f 0c00 	mov.w	ip, #0
 800c0f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800c0fc:	f8d0 e000 	ldr.w	lr, [r0]
 800c100:	b293      	uxth	r3, r2
 800c102:	ebac 0303 	sub.w	r3, ip, r3
 800c106:	0c12      	lsrs	r2, r2, #16
 800c108:	fa13 f38e 	uxtah	r3, r3, lr
 800c10c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c110:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c114:	b29b      	uxth	r3, r3
 800c116:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c11a:	45c1      	cmp	r9, r8
 800c11c:	f840 3b04 	str.w	r3, [r0], #4
 800c120:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c124:	d2e8      	bcs.n	800c0f8 <quorem+0xb0>
 800c126:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c12a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c12e:	b922      	cbnz	r2, 800c13a <quorem+0xf2>
 800c130:	3b04      	subs	r3, #4
 800c132:	429d      	cmp	r5, r3
 800c134:	461a      	mov	r2, r3
 800c136:	d30a      	bcc.n	800c14e <quorem+0x106>
 800c138:	613c      	str	r4, [r7, #16]
 800c13a:	4630      	mov	r0, r6
 800c13c:	b003      	add	sp, #12
 800c13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c142:	6812      	ldr	r2, [r2, #0]
 800c144:	3b04      	subs	r3, #4
 800c146:	2a00      	cmp	r2, #0
 800c148:	d1cc      	bne.n	800c0e4 <quorem+0x9c>
 800c14a:	3c01      	subs	r4, #1
 800c14c:	e7c7      	b.n	800c0de <quorem+0x96>
 800c14e:	6812      	ldr	r2, [r2, #0]
 800c150:	3b04      	subs	r3, #4
 800c152:	2a00      	cmp	r2, #0
 800c154:	d1f0      	bne.n	800c138 <quorem+0xf0>
 800c156:	3c01      	subs	r4, #1
 800c158:	e7eb      	b.n	800c132 <quorem+0xea>
 800c15a:	2000      	movs	r0, #0
 800c15c:	e7ee      	b.n	800c13c <quorem+0xf4>
	...

0800c160 <_dtoa_r>:
 800c160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c164:	ed2d 8b04 	vpush	{d8-d9}
 800c168:	ec57 6b10 	vmov	r6, r7, d0
 800c16c:	b093      	sub	sp, #76	; 0x4c
 800c16e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c170:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c174:	9106      	str	r1, [sp, #24]
 800c176:	ee10 aa10 	vmov	sl, s0
 800c17a:	4604      	mov	r4, r0
 800c17c:	9209      	str	r2, [sp, #36]	; 0x24
 800c17e:	930c      	str	r3, [sp, #48]	; 0x30
 800c180:	46bb      	mov	fp, r7
 800c182:	b975      	cbnz	r5, 800c1a2 <_dtoa_r+0x42>
 800c184:	2010      	movs	r0, #16
 800c186:	f000 ff17 	bl	800cfb8 <malloc>
 800c18a:	4602      	mov	r2, r0
 800c18c:	6260      	str	r0, [r4, #36]	; 0x24
 800c18e:	b920      	cbnz	r0, 800c19a <_dtoa_r+0x3a>
 800c190:	4ba7      	ldr	r3, [pc, #668]	; (800c430 <_dtoa_r+0x2d0>)
 800c192:	21ea      	movs	r1, #234	; 0xea
 800c194:	48a7      	ldr	r0, [pc, #668]	; (800c434 <_dtoa_r+0x2d4>)
 800c196:	f001 fc95 	bl	800dac4 <__assert_func>
 800c19a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c19e:	6005      	str	r5, [r0, #0]
 800c1a0:	60c5      	str	r5, [r0, #12]
 800c1a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1a4:	6819      	ldr	r1, [r3, #0]
 800c1a6:	b151      	cbz	r1, 800c1be <_dtoa_r+0x5e>
 800c1a8:	685a      	ldr	r2, [r3, #4]
 800c1aa:	604a      	str	r2, [r1, #4]
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	4093      	lsls	r3, r2
 800c1b0:	608b      	str	r3, [r1, #8]
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	f000 ff66 	bl	800d084 <_Bfree>
 800c1b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	601a      	str	r2, [r3, #0]
 800c1be:	1e3b      	subs	r3, r7, #0
 800c1c0:	bfaa      	itet	ge
 800c1c2:	2300      	movge	r3, #0
 800c1c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c1c8:	f8c8 3000 	strge.w	r3, [r8]
 800c1cc:	4b9a      	ldr	r3, [pc, #616]	; (800c438 <_dtoa_r+0x2d8>)
 800c1ce:	bfbc      	itt	lt
 800c1d0:	2201      	movlt	r2, #1
 800c1d2:	f8c8 2000 	strlt.w	r2, [r8]
 800c1d6:	ea33 030b 	bics.w	r3, r3, fp
 800c1da:	d11b      	bne.n	800c214 <_dtoa_r+0xb4>
 800c1dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1de:	f242 730f 	movw	r3, #9999	; 0x270f
 800c1e2:	6013      	str	r3, [r2, #0]
 800c1e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1e8:	4333      	orrs	r3, r6
 800c1ea:	f000 8592 	beq.w	800cd12 <_dtoa_r+0xbb2>
 800c1ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1f0:	b963      	cbnz	r3, 800c20c <_dtoa_r+0xac>
 800c1f2:	4b92      	ldr	r3, [pc, #584]	; (800c43c <_dtoa_r+0x2dc>)
 800c1f4:	e022      	b.n	800c23c <_dtoa_r+0xdc>
 800c1f6:	4b92      	ldr	r3, [pc, #584]	; (800c440 <_dtoa_r+0x2e0>)
 800c1f8:	9301      	str	r3, [sp, #4]
 800c1fa:	3308      	adds	r3, #8
 800c1fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c1fe:	6013      	str	r3, [r2, #0]
 800c200:	9801      	ldr	r0, [sp, #4]
 800c202:	b013      	add	sp, #76	; 0x4c
 800c204:	ecbd 8b04 	vpop	{d8-d9}
 800c208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c20c:	4b8b      	ldr	r3, [pc, #556]	; (800c43c <_dtoa_r+0x2dc>)
 800c20e:	9301      	str	r3, [sp, #4]
 800c210:	3303      	adds	r3, #3
 800c212:	e7f3      	b.n	800c1fc <_dtoa_r+0x9c>
 800c214:	2200      	movs	r2, #0
 800c216:	2300      	movs	r3, #0
 800c218:	4650      	mov	r0, sl
 800c21a:	4659      	mov	r1, fp
 800c21c:	f7f4 fc6c 	bl	8000af8 <__aeabi_dcmpeq>
 800c220:	ec4b ab19 	vmov	d9, sl, fp
 800c224:	4680      	mov	r8, r0
 800c226:	b158      	cbz	r0, 800c240 <_dtoa_r+0xe0>
 800c228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c22a:	2301      	movs	r3, #1
 800c22c:	6013      	str	r3, [r2, #0]
 800c22e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c230:	2b00      	cmp	r3, #0
 800c232:	f000 856b 	beq.w	800cd0c <_dtoa_r+0xbac>
 800c236:	4883      	ldr	r0, [pc, #524]	; (800c444 <_dtoa_r+0x2e4>)
 800c238:	6018      	str	r0, [r3, #0]
 800c23a:	1e43      	subs	r3, r0, #1
 800c23c:	9301      	str	r3, [sp, #4]
 800c23e:	e7df      	b.n	800c200 <_dtoa_r+0xa0>
 800c240:	ec4b ab10 	vmov	d0, sl, fp
 800c244:	aa10      	add	r2, sp, #64	; 0x40
 800c246:	a911      	add	r1, sp, #68	; 0x44
 800c248:	4620      	mov	r0, r4
 800c24a:	f001 fa03 	bl	800d654 <__d2b>
 800c24e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c252:	ee08 0a10 	vmov	s16, r0
 800c256:	2d00      	cmp	r5, #0
 800c258:	f000 8084 	beq.w	800c364 <_dtoa_r+0x204>
 800c25c:	ee19 3a90 	vmov	r3, s19
 800c260:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c264:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c268:	4656      	mov	r6, sl
 800c26a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c26e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c272:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c276:	4b74      	ldr	r3, [pc, #464]	; (800c448 <_dtoa_r+0x2e8>)
 800c278:	2200      	movs	r2, #0
 800c27a:	4630      	mov	r0, r6
 800c27c:	4639      	mov	r1, r7
 800c27e:	f7f4 f81b 	bl	80002b8 <__aeabi_dsub>
 800c282:	a365      	add	r3, pc, #404	; (adr r3, 800c418 <_dtoa_r+0x2b8>)
 800c284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c288:	f7f4 f9ce 	bl	8000628 <__aeabi_dmul>
 800c28c:	a364      	add	r3, pc, #400	; (adr r3, 800c420 <_dtoa_r+0x2c0>)
 800c28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c292:	f7f4 f813 	bl	80002bc <__adddf3>
 800c296:	4606      	mov	r6, r0
 800c298:	4628      	mov	r0, r5
 800c29a:	460f      	mov	r7, r1
 800c29c:	f7f4 f95a 	bl	8000554 <__aeabi_i2d>
 800c2a0:	a361      	add	r3, pc, #388	; (adr r3, 800c428 <_dtoa_r+0x2c8>)
 800c2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a6:	f7f4 f9bf 	bl	8000628 <__aeabi_dmul>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	4639      	mov	r1, r7
 800c2b2:	f7f4 f803 	bl	80002bc <__adddf3>
 800c2b6:	4606      	mov	r6, r0
 800c2b8:	460f      	mov	r7, r1
 800c2ba:	f7f4 fc65 	bl	8000b88 <__aeabi_d2iz>
 800c2be:	2200      	movs	r2, #0
 800c2c0:	9000      	str	r0, [sp, #0]
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	4639      	mov	r1, r7
 800c2c8:	f7f4 fc20 	bl	8000b0c <__aeabi_dcmplt>
 800c2cc:	b150      	cbz	r0, 800c2e4 <_dtoa_r+0x184>
 800c2ce:	9800      	ldr	r0, [sp, #0]
 800c2d0:	f7f4 f940 	bl	8000554 <__aeabi_i2d>
 800c2d4:	4632      	mov	r2, r6
 800c2d6:	463b      	mov	r3, r7
 800c2d8:	f7f4 fc0e 	bl	8000af8 <__aeabi_dcmpeq>
 800c2dc:	b910      	cbnz	r0, 800c2e4 <_dtoa_r+0x184>
 800c2de:	9b00      	ldr	r3, [sp, #0]
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	9300      	str	r3, [sp, #0]
 800c2e4:	9b00      	ldr	r3, [sp, #0]
 800c2e6:	2b16      	cmp	r3, #22
 800c2e8:	d85a      	bhi.n	800c3a0 <_dtoa_r+0x240>
 800c2ea:	9a00      	ldr	r2, [sp, #0]
 800c2ec:	4b57      	ldr	r3, [pc, #348]	; (800c44c <_dtoa_r+0x2ec>)
 800c2ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f6:	ec51 0b19 	vmov	r0, r1, d9
 800c2fa:	f7f4 fc07 	bl	8000b0c <__aeabi_dcmplt>
 800c2fe:	2800      	cmp	r0, #0
 800c300:	d050      	beq.n	800c3a4 <_dtoa_r+0x244>
 800c302:	9b00      	ldr	r3, [sp, #0]
 800c304:	3b01      	subs	r3, #1
 800c306:	9300      	str	r3, [sp, #0]
 800c308:	2300      	movs	r3, #0
 800c30a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c30c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c30e:	1b5d      	subs	r5, r3, r5
 800c310:	1e6b      	subs	r3, r5, #1
 800c312:	9305      	str	r3, [sp, #20]
 800c314:	bf45      	ittet	mi
 800c316:	f1c5 0301 	rsbmi	r3, r5, #1
 800c31a:	9304      	strmi	r3, [sp, #16]
 800c31c:	2300      	movpl	r3, #0
 800c31e:	2300      	movmi	r3, #0
 800c320:	bf4c      	ite	mi
 800c322:	9305      	strmi	r3, [sp, #20]
 800c324:	9304      	strpl	r3, [sp, #16]
 800c326:	9b00      	ldr	r3, [sp, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	db3d      	blt.n	800c3a8 <_dtoa_r+0x248>
 800c32c:	9b05      	ldr	r3, [sp, #20]
 800c32e:	9a00      	ldr	r2, [sp, #0]
 800c330:	920a      	str	r2, [sp, #40]	; 0x28
 800c332:	4413      	add	r3, r2
 800c334:	9305      	str	r3, [sp, #20]
 800c336:	2300      	movs	r3, #0
 800c338:	9307      	str	r3, [sp, #28]
 800c33a:	9b06      	ldr	r3, [sp, #24]
 800c33c:	2b09      	cmp	r3, #9
 800c33e:	f200 8089 	bhi.w	800c454 <_dtoa_r+0x2f4>
 800c342:	2b05      	cmp	r3, #5
 800c344:	bfc4      	itt	gt
 800c346:	3b04      	subgt	r3, #4
 800c348:	9306      	strgt	r3, [sp, #24]
 800c34a:	9b06      	ldr	r3, [sp, #24]
 800c34c:	f1a3 0302 	sub.w	r3, r3, #2
 800c350:	bfcc      	ite	gt
 800c352:	2500      	movgt	r5, #0
 800c354:	2501      	movle	r5, #1
 800c356:	2b03      	cmp	r3, #3
 800c358:	f200 8087 	bhi.w	800c46a <_dtoa_r+0x30a>
 800c35c:	e8df f003 	tbb	[pc, r3]
 800c360:	59383a2d 	.word	0x59383a2d
 800c364:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c368:	441d      	add	r5, r3
 800c36a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c36e:	2b20      	cmp	r3, #32
 800c370:	bfc1      	itttt	gt
 800c372:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c376:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c37a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c37e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c382:	bfda      	itte	le
 800c384:	f1c3 0320 	rsble	r3, r3, #32
 800c388:	fa06 f003 	lslle.w	r0, r6, r3
 800c38c:	4318      	orrgt	r0, r3
 800c38e:	f7f4 f8d1 	bl	8000534 <__aeabi_ui2d>
 800c392:	2301      	movs	r3, #1
 800c394:	4606      	mov	r6, r0
 800c396:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c39a:	3d01      	subs	r5, #1
 800c39c:	930e      	str	r3, [sp, #56]	; 0x38
 800c39e:	e76a      	b.n	800c276 <_dtoa_r+0x116>
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e7b2      	b.n	800c30a <_dtoa_r+0x1aa>
 800c3a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c3a6:	e7b1      	b.n	800c30c <_dtoa_r+0x1ac>
 800c3a8:	9b04      	ldr	r3, [sp, #16]
 800c3aa:	9a00      	ldr	r2, [sp, #0]
 800c3ac:	1a9b      	subs	r3, r3, r2
 800c3ae:	9304      	str	r3, [sp, #16]
 800c3b0:	4253      	negs	r3, r2
 800c3b2:	9307      	str	r3, [sp, #28]
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	930a      	str	r3, [sp, #40]	; 0x28
 800c3b8:	e7bf      	b.n	800c33a <_dtoa_r+0x1da>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	9308      	str	r3, [sp, #32]
 800c3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	dc55      	bgt.n	800c470 <_dtoa_r+0x310>
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	9209      	str	r2, [sp, #36]	; 0x24
 800c3ce:	e00c      	b.n	800c3ea <_dtoa_r+0x28a>
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e7f3      	b.n	800c3bc <_dtoa_r+0x25c>
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3d8:	9308      	str	r3, [sp, #32]
 800c3da:	9b00      	ldr	r3, [sp, #0]
 800c3dc:	4413      	add	r3, r2
 800c3de:	9302      	str	r3, [sp, #8]
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	2b01      	cmp	r3, #1
 800c3e4:	9303      	str	r3, [sp, #12]
 800c3e6:	bfb8      	it	lt
 800c3e8:	2301      	movlt	r3, #1
 800c3ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	6042      	str	r2, [r0, #4]
 800c3f0:	2204      	movs	r2, #4
 800c3f2:	f102 0614 	add.w	r6, r2, #20
 800c3f6:	429e      	cmp	r6, r3
 800c3f8:	6841      	ldr	r1, [r0, #4]
 800c3fa:	d93d      	bls.n	800c478 <_dtoa_r+0x318>
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f000 fe01 	bl	800d004 <_Balloc>
 800c402:	9001      	str	r0, [sp, #4]
 800c404:	2800      	cmp	r0, #0
 800c406:	d13b      	bne.n	800c480 <_dtoa_r+0x320>
 800c408:	4b11      	ldr	r3, [pc, #68]	; (800c450 <_dtoa_r+0x2f0>)
 800c40a:	4602      	mov	r2, r0
 800c40c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c410:	e6c0      	b.n	800c194 <_dtoa_r+0x34>
 800c412:	2301      	movs	r3, #1
 800c414:	e7df      	b.n	800c3d6 <_dtoa_r+0x276>
 800c416:	bf00      	nop
 800c418:	636f4361 	.word	0x636f4361
 800c41c:	3fd287a7 	.word	0x3fd287a7
 800c420:	8b60c8b3 	.word	0x8b60c8b3
 800c424:	3fc68a28 	.word	0x3fc68a28
 800c428:	509f79fb 	.word	0x509f79fb
 800c42c:	3fd34413 	.word	0x3fd34413
 800c430:	0800e71d 	.word	0x0800e71d
 800c434:	0800e734 	.word	0x0800e734
 800c438:	7ff00000 	.word	0x7ff00000
 800c43c:	0800e719 	.word	0x0800e719
 800c440:	0800e710 	.word	0x0800e710
 800c444:	0800e6ed 	.word	0x0800e6ed
 800c448:	3ff80000 	.word	0x3ff80000
 800c44c:	0800e830 	.word	0x0800e830
 800c450:	0800e78f 	.word	0x0800e78f
 800c454:	2501      	movs	r5, #1
 800c456:	2300      	movs	r3, #0
 800c458:	9306      	str	r3, [sp, #24]
 800c45a:	9508      	str	r5, [sp, #32]
 800c45c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c460:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c464:	2200      	movs	r2, #0
 800c466:	2312      	movs	r3, #18
 800c468:	e7b0      	b.n	800c3cc <_dtoa_r+0x26c>
 800c46a:	2301      	movs	r3, #1
 800c46c:	9308      	str	r3, [sp, #32]
 800c46e:	e7f5      	b.n	800c45c <_dtoa_r+0x2fc>
 800c470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c472:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c476:	e7b8      	b.n	800c3ea <_dtoa_r+0x28a>
 800c478:	3101      	adds	r1, #1
 800c47a:	6041      	str	r1, [r0, #4]
 800c47c:	0052      	lsls	r2, r2, #1
 800c47e:	e7b8      	b.n	800c3f2 <_dtoa_r+0x292>
 800c480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c482:	9a01      	ldr	r2, [sp, #4]
 800c484:	601a      	str	r2, [r3, #0]
 800c486:	9b03      	ldr	r3, [sp, #12]
 800c488:	2b0e      	cmp	r3, #14
 800c48a:	f200 809d 	bhi.w	800c5c8 <_dtoa_r+0x468>
 800c48e:	2d00      	cmp	r5, #0
 800c490:	f000 809a 	beq.w	800c5c8 <_dtoa_r+0x468>
 800c494:	9b00      	ldr	r3, [sp, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	dd32      	ble.n	800c500 <_dtoa_r+0x3a0>
 800c49a:	4ab7      	ldr	r2, [pc, #732]	; (800c778 <_dtoa_r+0x618>)
 800c49c:	f003 030f 	and.w	r3, r3, #15
 800c4a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c4a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c4a8:	9b00      	ldr	r3, [sp, #0]
 800c4aa:	05d8      	lsls	r0, r3, #23
 800c4ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c4b0:	d516      	bpl.n	800c4e0 <_dtoa_r+0x380>
 800c4b2:	4bb2      	ldr	r3, [pc, #712]	; (800c77c <_dtoa_r+0x61c>)
 800c4b4:	ec51 0b19 	vmov	r0, r1, d9
 800c4b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c4bc:	f7f4 f9de 	bl	800087c <__aeabi_ddiv>
 800c4c0:	f007 070f 	and.w	r7, r7, #15
 800c4c4:	4682      	mov	sl, r0
 800c4c6:	468b      	mov	fp, r1
 800c4c8:	2503      	movs	r5, #3
 800c4ca:	4eac      	ldr	r6, [pc, #688]	; (800c77c <_dtoa_r+0x61c>)
 800c4cc:	b957      	cbnz	r7, 800c4e4 <_dtoa_r+0x384>
 800c4ce:	4642      	mov	r2, r8
 800c4d0:	464b      	mov	r3, r9
 800c4d2:	4650      	mov	r0, sl
 800c4d4:	4659      	mov	r1, fp
 800c4d6:	f7f4 f9d1 	bl	800087c <__aeabi_ddiv>
 800c4da:	4682      	mov	sl, r0
 800c4dc:	468b      	mov	fp, r1
 800c4de:	e028      	b.n	800c532 <_dtoa_r+0x3d2>
 800c4e0:	2502      	movs	r5, #2
 800c4e2:	e7f2      	b.n	800c4ca <_dtoa_r+0x36a>
 800c4e4:	07f9      	lsls	r1, r7, #31
 800c4e6:	d508      	bpl.n	800c4fa <_dtoa_r+0x39a>
 800c4e8:	4640      	mov	r0, r8
 800c4ea:	4649      	mov	r1, r9
 800c4ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c4f0:	f7f4 f89a 	bl	8000628 <__aeabi_dmul>
 800c4f4:	3501      	adds	r5, #1
 800c4f6:	4680      	mov	r8, r0
 800c4f8:	4689      	mov	r9, r1
 800c4fa:	107f      	asrs	r7, r7, #1
 800c4fc:	3608      	adds	r6, #8
 800c4fe:	e7e5      	b.n	800c4cc <_dtoa_r+0x36c>
 800c500:	f000 809b 	beq.w	800c63a <_dtoa_r+0x4da>
 800c504:	9b00      	ldr	r3, [sp, #0]
 800c506:	4f9d      	ldr	r7, [pc, #628]	; (800c77c <_dtoa_r+0x61c>)
 800c508:	425e      	negs	r6, r3
 800c50a:	4b9b      	ldr	r3, [pc, #620]	; (800c778 <_dtoa_r+0x618>)
 800c50c:	f006 020f 	and.w	r2, r6, #15
 800c510:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c518:	ec51 0b19 	vmov	r0, r1, d9
 800c51c:	f7f4 f884 	bl	8000628 <__aeabi_dmul>
 800c520:	1136      	asrs	r6, r6, #4
 800c522:	4682      	mov	sl, r0
 800c524:	468b      	mov	fp, r1
 800c526:	2300      	movs	r3, #0
 800c528:	2502      	movs	r5, #2
 800c52a:	2e00      	cmp	r6, #0
 800c52c:	d17a      	bne.n	800c624 <_dtoa_r+0x4c4>
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1d3      	bne.n	800c4da <_dtoa_r+0x37a>
 800c532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c534:	2b00      	cmp	r3, #0
 800c536:	f000 8082 	beq.w	800c63e <_dtoa_r+0x4de>
 800c53a:	4b91      	ldr	r3, [pc, #580]	; (800c780 <_dtoa_r+0x620>)
 800c53c:	2200      	movs	r2, #0
 800c53e:	4650      	mov	r0, sl
 800c540:	4659      	mov	r1, fp
 800c542:	f7f4 fae3 	bl	8000b0c <__aeabi_dcmplt>
 800c546:	2800      	cmp	r0, #0
 800c548:	d079      	beq.n	800c63e <_dtoa_r+0x4de>
 800c54a:	9b03      	ldr	r3, [sp, #12]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d076      	beq.n	800c63e <_dtoa_r+0x4de>
 800c550:	9b02      	ldr	r3, [sp, #8]
 800c552:	2b00      	cmp	r3, #0
 800c554:	dd36      	ble.n	800c5c4 <_dtoa_r+0x464>
 800c556:	9b00      	ldr	r3, [sp, #0]
 800c558:	4650      	mov	r0, sl
 800c55a:	4659      	mov	r1, fp
 800c55c:	1e5f      	subs	r7, r3, #1
 800c55e:	2200      	movs	r2, #0
 800c560:	4b88      	ldr	r3, [pc, #544]	; (800c784 <_dtoa_r+0x624>)
 800c562:	f7f4 f861 	bl	8000628 <__aeabi_dmul>
 800c566:	9e02      	ldr	r6, [sp, #8]
 800c568:	4682      	mov	sl, r0
 800c56a:	468b      	mov	fp, r1
 800c56c:	3501      	adds	r5, #1
 800c56e:	4628      	mov	r0, r5
 800c570:	f7f3 fff0 	bl	8000554 <__aeabi_i2d>
 800c574:	4652      	mov	r2, sl
 800c576:	465b      	mov	r3, fp
 800c578:	f7f4 f856 	bl	8000628 <__aeabi_dmul>
 800c57c:	4b82      	ldr	r3, [pc, #520]	; (800c788 <_dtoa_r+0x628>)
 800c57e:	2200      	movs	r2, #0
 800c580:	f7f3 fe9c 	bl	80002bc <__adddf3>
 800c584:	46d0      	mov	r8, sl
 800c586:	46d9      	mov	r9, fp
 800c588:	4682      	mov	sl, r0
 800c58a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c58e:	2e00      	cmp	r6, #0
 800c590:	d158      	bne.n	800c644 <_dtoa_r+0x4e4>
 800c592:	4b7e      	ldr	r3, [pc, #504]	; (800c78c <_dtoa_r+0x62c>)
 800c594:	2200      	movs	r2, #0
 800c596:	4640      	mov	r0, r8
 800c598:	4649      	mov	r1, r9
 800c59a:	f7f3 fe8d 	bl	80002b8 <__aeabi_dsub>
 800c59e:	4652      	mov	r2, sl
 800c5a0:	465b      	mov	r3, fp
 800c5a2:	4680      	mov	r8, r0
 800c5a4:	4689      	mov	r9, r1
 800c5a6:	f7f4 facf 	bl	8000b48 <__aeabi_dcmpgt>
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	f040 8295 	bne.w	800cada <_dtoa_r+0x97a>
 800c5b0:	4652      	mov	r2, sl
 800c5b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c5b6:	4640      	mov	r0, r8
 800c5b8:	4649      	mov	r1, r9
 800c5ba:	f7f4 faa7 	bl	8000b0c <__aeabi_dcmplt>
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	f040 8289 	bne.w	800cad6 <_dtoa_r+0x976>
 800c5c4:	ec5b ab19 	vmov	sl, fp, d9
 800c5c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	f2c0 8148 	blt.w	800c860 <_dtoa_r+0x700>
 800c5d0:	9a00      	ldr	r2, [sp, #0]
 800c5d2:	2a0e      	cmp	r2, #14
 800c5d4:	f300 8144 	bgt.w	800c860 <_dtoa_r+0x700>
 800c5d8:	4b67      	ldr	r3, [pc, #412]	; (800c778 <_dtoa_r+0x618>)
 800c5da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c5e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	f280 80d5 	bge.w	800c794 <_dtoa_r+0x634>
 800c5ea:	9b03      	ldr	r3, [sp, #12]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f300 80d1 	bgt.w	800c794 <_dtoa_r+0x634>
 800c5f2:	f040 826f 	bne.w	800cad4 <_dtoa_r+0x974>
 800c5f6:	4b65      	ldr	r3, [pc, #404]	; (800c78c <_dtoa_r+0x62c>)
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	4640      	mov	r0, r8
 800c5fc:	4649      	mov	r1, r9
 800c5fe:	f7f4 f813 	bl	8000628 <__aeabi_dmul>
 800c602:	4652      	mov	r2, sl
 800c604:	465b      	mov	r3, fp
 800c606:	f7f4 fa95 	bl	8000b34 <__aeabi_dcmpge>
 800c60a:	9e03      	ldr	r6, [sp, #12]
 800c60c:	4637      	mov	r7, r6
 800c60e:	2800      	cmp	r0, #0
 800c610:	f040 8245 	bne.w	800ca9e <_dtoa_r+0x93e>
 800c614:	9d01      	ldr	r5, [sp, #4]
 800c616:	2331      	movs	r3, #49	; 0x31
 800c618:	f805 3b01 	strb.w	r3, [r5], #1
 800c61c:	9b00      	ldr	r3, [sp, #0]
 800c61e:	3301      	adds	r3, #1
 800c620:	9300      	str	r3, [sp, #0]
 800c622:	e240      	b.n	800caa6 <_dtoa_r+0x946>
 800c624:	07f2      	lsls	r2, r6, #31
 800c626:	d505      	bpl.n	800c634 <_dtoa_r+0x4d4>
 800c628:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c62c:	f7f3 fffc 	bl	8000628 <__aeabi_dmul>
 800c630:	3501      	adds	r5, #1
 800c632:	2301      	movs	r3, #1
 800c634:	1076      	asrs	r6, r6, #1
 800c636:	3708      	adds	r7, #8
 800c638:	e777      	b.n	800c52a <_dtoa_r+0x3ca>
 800c63a:	2502      	movs	r5, #2
 800c63c:	e779      	b.n	800c532 <_dtoa_r+0x3d2>
 800c63e:	9f00      	ldr	r7, [sp, #0]
 800c640:	9e03      	ldr	r6, [sp, #12]
 800c642:	e794      	b.n	800c56e <_dtoa_r+0x40e>
 800c644:	9901      	ldr	r1, [sp, #4]
 800c646:	4b4c      	ldr	r3, [pc, #304]	; (800c778 <_dtoa_r+0x618>)
 800c648:	4431      	add	r1, r6
 800c64a:	910d      	str	r1, [sp, #52]	; 0x34
 800c64c:	9908      	ldr	r1, [sp, #32]
 800c64e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c652:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c656:	2900      	cmp	r1, #0
 800c658:	d043      	beq.n	800c6e2 <_dtoa_r+0x582>
 800c65a:	494d      	ldr	r1, [pc, #308]	; (800c790 <_dtoa_r+0x630>)
 800c65c:	2000      	movs	r0, #0
 800c65e:	f7f4 f90d 	bl	800087c <__aeabi_ddiv>
 800c662:	4652      	mov	r2, sl
 800c664:	465b      	mov	r3, fp
 800c666:	f7f3 fe27 	bl	80002b8 <__aeabi_dsub>
 800c66a:	9d01      	ldr	r5, [sp, #4]
 800c66c:	4682      	mov	sl, r0
 800c66e:	468b      	mov	fp, r1
 800c670:	4649      	mov	r1, r9
 800c672:	4640      	mov	r0, r8
 800c674:	f7f4 fa88 	bl	8000b88 <__aeabi_d2iz>
 800c678:	4606      	mov	r6, r0
 800c67a:	f7f3 ff6b 	bl	8000554 <__aeabi_i2d>
 800c67e:	4602      	mov	r2, r0
 800c680:	460b      	mov	r3, r1
 800c682:	4640      	mov	r0, r8
 800c684:	4649      	mov	r1, r9
 800c686:	f7f3 fe17 	bl	80002b8 <__aeabi_dsub>
 800c68a:	3630      	adds	r6, #48	; 0x30
 800c68c:	f805 6b01 	strb.w	r6, [r5], #1
 800c690:	4652      	mov	r2, sl
 800c692:	465b      	mov	r3, fp
 800c694:	4680      	mov	r8, r0
 800c696:	4689      	mov	r9, r1
 800c698:	f7f4 fa38 	bl	8000b0c <__aeabi_dcmplt>
 800c69c:	2800      	cmp	r0, #0
 800c69e:	d163      	bne.n	800c768 <_dtoa_r+0x608>
 800c6a0:	4642      	mov	r2, r8
 800c6a2:	464b      	mov	r3, r9
 800c6a4:	4936      	ldr	r1, [pc, #216]	; (800c780 <_dtoa_r+0x620>)
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	f7f3 fe06 	bl	80002b8 <__aeabi_dsub>
 800c6ac:	4652      	mov	r2, sl
 800c6ae:	465b      	mov	r3, fp
 800c6b0:	f7f4 fa2c 	bl	8000b0c <__aeabi_dcmplt>
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	f040 80b5 	bne.w	800c824 <_dtoa_r+0x6c4>
 800c6ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6bc:	429d      	cmp	r5, r3
 800c6be:	d081      	beq.n	800c5c4 <_dtoa_r+0x464>
 800c6c0:	4b30      	ldr	r3, [pc, #192]	; (800c784 <_dtoa_r+0x624>)
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	4650      	mov	r0, sl
 800c6c6:	4659      	mov	r1, fp
 800c6c8:	f7f3 ffae 	bl	8000628 <__aeabi_dmul>
 800c6cc:	4b2d      	ldr	r3, [pc, #180]	; (800c784 <_dtoa_r+0x624>)
 800c6ce:	4682      	mov	sl, r0
 800c6d0:	468b      	mov	fp, r1
 800c6d2:	4640      	mov	r0, r8
 800c6d4:	4649      	mov	r1, r9
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f7f3 ffa6 	bl	8000628 <__aeabi_dmul>
 800c6dc:	4680      	mov	r8, r0
 800c6de:	4689      	mov	r9, r1
 800c6e0:	e7c6      	b.n	800c670 <_dtoa_r+0x510>
 800c6e2:	4650      	mov	r0, sl
 800c6e4:	4659      	mov	r1, fp
 800c6e6:	f7f3 ff9f 	bl	8000628 <__aeabi_dmul>
 800c6ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6ec:	9d01      	ldr	r5, [sp, #4]
 800c6ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6f0:	4682      	mov	sl, r0
 800c6f2:	468b      	mov	fp, r1
 800c6f4:	4649      	mov	r1, r9
 800c6f6:	4640      	mov	r0, r8
 800c6f8:	f7f4 fa46 	bl	8000b88 <__aeabi_d2iz>
 800c6fc:	4606      	mov	r6, r0
 800c6fe:	f7f3 ff29 	bl	8000554 <__aeabi_i2d>
 800c702:	3630      	adds	r6, #48	; 0x30
 800c704:	4602      	mov	r2, r0
 800c706:	460b      	mov	r3, r1
 800c708:	4640      	mov	r0, r8
 800c70a:	4649      	mov	r1, r9
 800c70c:	f7f3 fdd4 	bl	80002b8 <__aeabi_dsub>
 800c710:	f805 6b01 	strb.w	r6, [r5], #1
 800c714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c716:	429d      	cmp	r5, r3
 800c718:	4680      	mov	r8, r0
 800c71a:	4689      	mov	r9, r1
 800c71c:	f04f 0200 	mov.w	r2, #0
 800c720:	d124      	bne.n	800c76c <_dtoa_r+0x60c>
 800c722:	4b1b      	ldr	r3, [pc, #108]	; (800c790 <_dtoa_r+0x630>)
 800c724:	4650      	mov	r0, sl
 800c726:	4659      	mov	r1, fp
 800c728:	f7f3 fdc8 	bl	80002bc <__adddf3>
 800c72c:	4602      	mov	r2, r0
 800c72e:	460b      	mov	r3, r1
 800c730:	4640      	mov	r0, r8
 800c732:	4649      	mov	r1, r9
 800c734:	f7f4 fa08 	bl	8000b48 <__aeabi_dcmpgt>
 800c738:	2800      	cmp	r0, #0
 800c73a:	d173      	bne.n	800c824 <_dtoa_r+0x6c4>
 800c73c:	4652      	mov	r2, sl
 800c73e:	465b      	mov	r3, fp
 800c740:	4913      	ldr	r1, [pc, #76]	; (800c790 <_dtoa_r+0x630>)
 800c742:	2000      	movs	r0, #0
 800c744:	f7f3 fdb8 	bl	80002b8 <__aeabi_dsub>
 800c748:	4602      	mov	r2, r0
 800c74a:	460b      	mov	r3, r1
 800c74c:	4640      	mov	r0, r8
 800c74e:	4649      	mov	r1, r9
 800c750:	f7f4 f9dc 	bl	8000b0c <__aeabi_dcmplt>
 800c754:	2800      	cmp	r0, #0
 800c756:	f43f af35 	beq.w	800c5c4 <_dtoa_r+0x464>
 800c75a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c75c:	1e6b      	subs	r3, r5, #1
 800c75e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c760:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c764:	2b30      	cmp	r3, #48	; 0x30
 800c766:	d0f8      	beq.n	800c75a <_dtoa_r+0x5fa>
 800c768:	9700      	str	r7, [sp, #0]
 800c76a:	e049      	b.n	800c800 <_dtoa_r+0x6a0>
 800c76c:	4b05      	ldr	r3, [pc, #20]	; (800c784 <_dtoa_r+0x624>)
 800c76e:	f7f3 ff5b 	bl	8000628 <__aeabi_dmul>
 800c772:	4680      	mov	r8, r0
 800c774:	4689      	mov	r9, r1
 800c776:	e7bd      	b.n	800c6f4 <_dtoa_r+0x594>
 800c778:	0800e830 	.word	0x0800e830
 800c77c:	0800e808 	.word	0x0800e808
 800c780:	3ff00000 	.word	0x3ff00000
 800c784:	40240000 	.word	0x40240000
 800c788:	401c0000 	.word	0x401c0000
 800c78c:	40140000 	.word	0x40140000
 800c790:	3fe00000 	.word	0x3fe00000
 800c794:	9d01      	ldr	r5, [sp, #4]
 800c796:	4656      	mov	r6, sl
 800c798:	465f      	mov	r7, fp
 800c79a:	4642      	mov	r2, r8
 800c79c:	464b      	mov	r3, r9
 800c79e:	4630      	mov	r0, r6
 800c7a0:	4639      	mov	r1, r7
 800c7a2:	f7f4 f86b 	bl	800087c <__aeabi_ddiv>
 800c7a6:	f7f4 f9ef 	bl	8000b88 <__aeabi_d2iz>
 800c7aa:	4682      	mov	sl, r0
 800c7ac:	f7f3 fed2 	bl	8000554 <__aeabi_i2d>
 800c7b0:	4642      	mov	r2, r8
 800c7b2:	464b      	mov	r3, r9
 800c7b4:	f7f3 ff38 	bl	8000628 <__aeabi_dmul>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	4630      	mov	r0, r6
 800c7be:	4639      	mov	r1, r7
 800c7c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c7c4:	f7f3 fd78 	bl	80002b8 <__aeabi_dsub>
 800c7c8:	f805 6b01 	strb.w	r6, [r5], #1
 800c7cc:	9e01      	ldr	r6, [sp, #4]
 800c7ce:	9f03      	ldr	r7, [sp, #12]
 800c7d0:	1bae      	subs	r6, r5, r6
 800c7d2:	42b7      	cmp	r7, r6
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	460b      	mov	r3, r1
 800c7d8:	d135      	bne.n	800c846 <_dtoa_r+0x6e6>
 800c7da:	f7f3 fd6f 	bl	80002bc <__adddf3>
 800c7de:	4642      	mov	r2, r8
 800c7e0:	464b      	mov	r3, r9
 800c7e2:	4606      	mov	r6, r0
 800c7e4:	460f      	mov	r7, r1
 800c7e6:	f7f4 f9af 	bl	8000b48 <__aeabi_dcmpgt>
 800c7ea:	b9d0      	cbnz	r0, 800c822 <_dtoa_r+0x6c2>
 800c7ec:	4642      	mov	r2, r8
 800c7ee:	464b      	mov	r3, r9
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	4639      	mov	r1, r7
 800c7f4:	f7f4 f980 	bl	8000af8 <__aeabi_dcmpeq>
 800c7f8:	b110      	cbz	r0, 800c800 <_dtoa_r+0x6a0>
 800c7fa:	f01a 0f01 	tst.w	sl, #1
 800c7fe:	d110      	bne.n	800c822 <_dtoa_r+0x6c2>
 800c800:	4620      	mov	r0, r4
 800c802:	ee18 1a10 	vmov	r1, s16
 800c806:	f000 fc3d 	bl	800d084 <_Bfree>
 800c80a:	2300      	movs	r3, #0
 800c80c:	9800      	ldr	r0, [sp, #0]
 800c80e:	702b      	strb	r3, [r5, #0]
 800c810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c812:	3001      	adds	r0, #1
 800c814:	6018      	str	r0, [r3, #0]
 800c816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c818:	2b00      	cmp	r3, #0
 800c81a:	f43f acf1 	beq.w	800c200 <_dtoa_r+0xa0>
 800c81e:	601d      	str	r5, [r3, #0]
 800c820:	e4ee      	b.n	800c200 <_dtoa_r+0xa0>
 800c822:	9f00      	ldr	r7, [sp, #0]
 800c824:	462b      	mov	r3, r5
 800c826:	461d      	mov	r5, r3
 800c828:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c82c:	2a39      	cmp	r2, #57	; 0x39
 800c82e:	d106      	bne.n	800c83e <_dtoa_r+0x6de>
 800c830:	9a01      	ldr	r2, [sp, #4]
 800c832:	429a      	cmp	r2, r3
 800c834:	d1f7      	bne.n	800c826 <_dtoa_r+0x6c6>
 800c836:	9901      	ldr	r1, [sp, #4]
 800c838:	2230      	movs	r2, #48	; 0x30
 800c83a:	3701      	adds	r7, #1
 800c83c:	700a      	strb	r2, [r1, #0]
 800c83e:	781a      	ldrb	r2, [r3, #0]
 800c840:	3201      	adds	r2, #1
 800c842:	701a      	strb	r2, [r3, #0]
 800c844:	e790      	b.n	800c768 <_dtoa_r+0x608>
 800c846:	4ba6      	ldr	r3, [pc, #664]	; (800cae0 <_dtoa_r+0x980>)
 800c848:	2200      	movs	r2, #0
 800c84a:	f7f3 feed 	bl	8000628 <__aeabi_dmul>
 800c84e:	2200      	movs	r2, #0
 800c850:	2300      	movs	r3, #0
 800c852:	4606      	mov	r6, r0
 800c854:	460f      	mov	r7, r1
 800c856:	f7f4 f94f 	bl	8000af8 <__aeabi_dcmpeq>
 800c85a:	2800      	cmp	r0, #0
 800c85c:	d09d      	beq.n	800c79a <_dtoa_r+0x63a>
 800c85e:	e7cf      	b.n	800c800 <_dtoa_r+0x6a0>
 800c860:	9a08      	ldr	r2, [sp, #32]
 800c862:	2a00      	cmp	r2, #0
 800c864:	f000 80d7 	beq.w	800ca16 <_dtoa_r+0x8b6>
 800c868:	9a06      	ldr	r2, [sp, #24]
 800c86a:	2a01      	cmp	r2, #1
 800c86c:	f300 80ba 	bgt.w	800c9e4 <_dtoa_r+0x884>
 800c870:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c872:	2a00      	cmp	r2, #0
 800c874:	f000 80b2 	beq.w	800c9dc <_dtoa_r+0x87c>
 800c878:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c87c:	9e07      	ldr	r6, [sp, #28]
 800c87e:	9d04      	ldr	r5, [sp, #16]
 800c880:	9a04      	ldr	r2, [sp, #16]
 800c882:	441a      	add	r2, r3
 800c884:	9204      	str	r2, [sp, #16]
 800c886:	9a05      	ldr	r2, [sp, #20]
 800c888:	2101      	movs	r1, #1
 800c88a:	441a      	add	r2, r3
 800c88c:	4620      	mov	r0, r4
 800c88e:	9205      	str	r2, [sp, #20]
 800c890:	f000 fcb0 	bl	800d1f4 <__i2b>
 800c894:	4607      	mov	r7, r0
 800c896:	2d00      	cmp	r5, #0
 800c898:	dd0c      	ble.n	800c8b4 <_dtoa_r+0x754>
 800c89a:	9b05      	ldr	r3, [sp, #20]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	dd09      	ble.n	800c8b4 <_dtoa_r+0x754>
 800c8a0:	42ab      	cmp	r3, r5
 800c8a2:	9a04      	ldr	r2, [sp, #16]
 800c8a4:	bfa8      	it	ge
 800c8a6:	462b      	movge	r3, r5
 800c8a8:	1ad2      	subs	r2, r2, r3
 800c8aa:	9204      	str	r2, [sp, #16]
 800c8ac:	9a05      	ldr	r2, [sp, #20]
 800c8ae:	1aed      	subs	r5, r5, r3
 800c8b0:	1ad3      	subs	r3, r2, r3
 800c8b2:	9305      	str	r3, [sp, #20]
 800c8b4:	9b07      	ldr	r3, [sp, #28]
 800c8b6:	b31b      	cbz	r3, 800c900 <_dtoa_r+0x7a0>
 800c8b8:	9b08      	ldr	r3, [sp, #32]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	f000 80af 	beq.w	800ca1e <_dtoa_r+0x8be>
 800c8c0:	2e00      	cmp	r6, #0
 800c8c2:	dd13      	ble.n	800c8ec <_dtoa_r+0x78c>
 800c8c4:	4639      	mov	r1, r7
 800c8c6:	4632      	mov	r2, r6
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	f000 fd53 	bl	800d374 <__pow5mult>
 800c8ce:	ee18 2a10 	vmov	r2, s16
 800c8d2:	4601      	mov	r1, r0
 800c8d4:	4607      	mov	r7, r0
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f000 fca2 	bl	800d220 <__multiply>
 800c8dc:	ee18 1a10 	vmov	r1, s16
 800c8e0:	4680      	mov	r8, r0
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	f000 fbce 	bl	800d084 <_Bfree>
 800c8e8:	ee08 8a10 	vmov	s16, r8
 800c8ec:	9b07      	ldr	r3, [sp, #28]
 800c8ee:	1b9a      	subs	r2, r3, r6
 800c8f0:	d006      	beq.n	800c900 <_dtoa_r+0x7a0>
 800c8f2:	ee18 1a10 	vmov	r1, s16
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	f000 fd3c 	bl	800d374 <__pow5mult>
 800c8fc:	ee08 0a10 	vmov	s16, r0
 800c900:	2101      	movs	r1, #1
 800c902:	4620      	mov	r0, r4
 800c904:	f000 fc76 	bl	800d1f4 <__i2b>
 800c908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	4606      	mov	r6, r0
 800c90e:	f340 8088 	ble.w	800ca22 <_dtoa_r+0x8c2>
 800c912:	461a      	mov	r2, r3
 800c914:	4601      	mov	r1, r0
 800c916:	4620      	mov	r0, r4
 800c918:	f000 fd2c 	bl	800d374 <__pow5mult>
 800c91c:	9b06      	ldr	r3, [sp, #24]
 800c91e:	2b01      	cmp	r3, #1
 800c920:	4606      	mov	r6, r0
 800c922:	f340 8081 	ble.w	800ca28 <_dtoa_r+0x8c8>
 800c926:	f04f 0800 	mov.w	r8, #0
 800c92a:	6933      	ldr	r3, [r6, #16]
 800c92c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c930:	6918      	ldr	r0, [r3, #16]
 800c932:	f000 fc0f 	bl	800d154 <__hi0bits>
 800c936:	f1c0 0020 	rsb	r0, r0, #32
 800c93a:	9b05      	ldr	r3, [sp, #20]
 800c93c:	4418      	add	r0, r3
 800c93e:	f010 001f 	ands.w	r0, r0, #31
 800c942:	f000 8092 	beq.w	800ca6a <_dtoa_r+0x90a>
 800c946:	f1c0 0320 	rsb	r3, r0, #32
 800c94a:	2b04      	cmp	r3, #4
 800c94c:	f340 808a 	ble.w	800ca64 <_dtoa_r+0x904>
 800c950:	f1c0 001c 	rsb	r0, r0, #28
 800c954:	9b04      	ldr	r3, [sp, #16]
 800c956:	4403      	add	r3, r0
 800c958:	9304      	str	r3, [sp, #16]
 800c95a:	9b05      	ldr	r3, [sp, #20]
 800c95c:	4403      	add	r3, r0
 800c95e:	4405      	add	r5, r0
 800c960:	9305      	str	r3, [sp, #20]
 800c962:	9b04      	ldr	r3, [sp, #16]
 800c964:	2b00      	cmp	r3, #0
 800c966:	dd07      	ble.n	800c978 <_dtoa_r+0x818>
 800c968:	ee18 1a10 	vmov	r1, s16
 800c96c:	461a      	mov	r2, r3
 800c96e:	4620      	mov	r0, r4
 800c970:	f000 fd5a 	bl	800d428 <__lshift>
 800c974:	ee08 0a10 	vmov	s16, r0
 800c978:	9b05      	ldr	r3, [sp, #20]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	dd05      	ble.n	800c98a <_dtoa_r+0x82a>
 800c97e:	4631      	mov	r1, r6
 800c980:	461a      	mov	r2, r3
 800c982:	4620      	mov	r0, r4
 800c984:	f000 fd50 	bl	800d428 <__lshift>
 800c988:	4606      	mov	r6, r0
 800c98a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d06e      	beq.n	800ca6e <_dtoa_r+0x90e>
 800c990:	ee18 0a10 	vmov	r0, s16
 800c994:	4631      	mov	r1, r6
 800c996:	f000 fdb7 	bl	800d508 <__mcmp>
 800c99a:	2800      	cmp	r0, #0
 800c99c:	da67      	bge.n	800ca6e <_dtoa_r+0x90e>
 800c99e:	9b00      	ldr	r3, [sp, #0]
 800c9a0:	3b01      	subs	r3, #1
 800c9a2:	ee18 1a10 	vmov	r1, s16
 800c9a6:	9300      	str	r3, [sp, #0]
 800c9a8:	220a      	movs	r2, #10
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f000 fb8b 	bl	800d0c8 <__multadd>
 800c9b2:	9b08      	ldr	r3, [sp, #32]
 800c9b4:	ee08 0a10 	vmov	s16, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f000 81b1 	beq.w	800cd20 <_dtoa_r+0xbc0>
 800c9be:	2300      	movs	r3, #0
 800c9c0:	4639      	mov	r1, r7
 800c9c2:	220a      	movs	r2, #10
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	f000 fb7f 	bl	800d0c8 <__multadd>
 800c9ca:	9b02      	ldr	r3, [sp, #8]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	4607      	mov	r7, r0
 800c9d0:	f300 808e 	bgt.w	800caf0 <_dtoa_r+0x990>
 800c9d4:	9b06      	ldr	r3, [sp, #24]
 800c9d6:	2b02      	cmp	r3, #2
 800c9d8:	dc51      	bgt.n	800ca7e <_dtoa_r+0x91e>
 800c9da:	e089      	b.n	800caf0 <_dtoa_r+0x990>
 800c9dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c9e2:	e74b      	b.n	800c87c <_dtoa_r+0x71c>
 800c9e4:	9b03      	ldr	r3, [sp, #12]
 800c9e6:	1e5e      	subs	r6, r3, #1
 800c9e8:	9b07      	ldr	r3, [sp, #28]
 800c9ea:	42b3      	cmp	r3, r6
 800c9ec:	bfbf      	itttt	lt
 800c9ee:	9b07      	ldrlt	r3, [sp, #28]
 800c9f0:	9607      	strlt	r6, [sp, #28]
 800c9f2:	1af2      	sublt	r2, r6, r3
 800c9f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c9f6:	bfb6      	itet	lt
 800c9f8:	189b      	addlt	r3, r3, r2
 800c9fa:	1b9e      	subge	r6, r3, r6
 800c9fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c9fe:	9b03      	ldr	r3, [sp, #12]
 800ca00:	bfb8      	it	lt
 800ca02:	2600      	movlt	r6, #0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	bfb7      	itett	lt
 800ca08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ca0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ca10:	1a9d      	sublt	r5, r3, r2
 800ca12:	2300      	movlt	r3, #0
 800ca14:	e734      	b.n	800c880 <_dtoa_r+0x720>
 800ca16:	9e07      	ldr	r6, [sp, #28]
 800ca18:	9d04      	ldr	r5, [sp, #16]
 800ca1a:	9f08      	ldr	r7, [sp, #32]
 800ca1c:	e73b      	b.n	800c896 <_dtoa_r+0x736>
 800ca1e:	9a07      	ldr	r2, [sp, #28]
 800ca20:	e767      	b.n	800c8f2 <_dtoa_r+0x792>
 800ca22:	9b06      	ldr	r3, [sp, #24]
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	dc18      	bgt.n	800ca5a <_dtoa_r+0x8fa>
 800ca28:	f1ba 0f00 	cmp.w	sl, #0
 800ca2c:	d115      	bne.n	800ca5a <_dtoa_r+0x8fa>
 800ca2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca32:	b993      	cbnz	r3, 800ca5a <_dtoa_r+0x8fa>
 800ca34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ca38:	0d1b      	lsrs	r3, r3, #20
 800ca3a:	051b      	lsls	r3, r3, #20
 800ca3c:	b183      	cbz	r3, 800ca60 <_dtoa_r+0x900>
 800ca3e:	9b04      	ldr	r3, [sp, #16]
 800ca40:	3301      	adds	r3, #1
 800ca42:	9304      	str	r3, [sp, #16]
 800ca44:	9b05      	ldr	r3, [sp, #20]
 800ca46:	3301      	adds	r3, #1
 800ca48:	9305      	str	r3, [sp, #20]
 800ca4a:	f04f 0801 	mov.w	r8, #1
 800ca4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f47f af6a 	bne.w	800c92a <_dtoa_r+0x7ca>
 800ca56:	2001      	movs	r0, #1
 800ca58:	e76f      	b.n	800c93a <_dtoa_r+0x7da>
 800ca5a:	f04f 0800 	mov.w	r8, #0
 800ca5e:	e7f6      	b.n	800ca4e <_dtoa_r+0x8ee>
 800ca60:	4698      	mov	r8, r3
 800ca62:	e7f4      	b.n	800ca4e <_dtoa_r+0x8ee>
 800ca64:	f43f af7d 	beq.w	800c962 <_dtoa_r+0x802>
 800ca68:	4618      	mov	r0, r3
 800ca6a:	301c      	adds	r0, #28
 800ca6c:	e772      	b.n	800c954 <_dtoa_r+0x7f4>
 800ca6e:	9b03      	ldr	r3, [sp, #12]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	dc37      	bgt.n	800cae4 <_dtoa_r+0x984>
 800ca74:	9b06      	ldr	r3, [sp, #24]
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	dd34      	ble.n	800cae4 <_dtoa_r+0x984>
 800ca7a:	9b03      	ldr	r3, [sp, #12]
 800ca7c:	9302      	str	r3, [sp, #8]
 800ca7e:	9b02      	ldr	r3, [sp, #8]
 800ca80:	b96b      	cbnz	r3, 800ca9e <_dtoa_r+0x93e>
 800ca82:	4631      	mov	r1, r6
 800ca84:	2205      	movs	r2, #5
 800ca86:	4620      	mov	r0, r4
 800ca88:	f000 fb1e 	bl	800d0c8 <__multadd>
 800ca8c:	4601      	mov	r1, r0
 800ca8e:	4606      	mov	r6, r0
 800ca90:	ee18 0a10 	vmov	r0, s16
 800ca94:	f000 fd38 	bl	800d508 <__mcmp>
 800ca98:	2800      	cmp	r0, #0
 800ca9a:	f73f adbb 	bgt.w	800c614 <_dtoa_r+0x4b4>
 800ca9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa0:	9d01      	ldr	r5, [sp, #4]
 800caa2:	43db      	mvns	r3, r3
 800caa4:	9300      	str	r3, [sp, #0]
 800caa6:	f04f 0800 	mov.w	r8, #0
 800caaa:	4631      	mov	r1, r6
 800caac:	4620      	mov	r0, r4
 800caae:	f000 fae9 	bl	800d084 <_Bfree>
 800cab2:	2f00      	cmp	r7, #0
 800cab4:	f43f aea4 	beq.w	800c800 <_dtoa_r+0x6a0>
 800cab8:	f1b8 0f00 	cmp.w	r8, #0
 800cabc:	d005      	beq.n	800caca <_dtoa_r+0x96a>
 800cabe:	45b8      	cmp	r8, r7
 800cac0:	d003      	beq.n	800caca <_dtoa_r+0x96a>
 800cac2:	4641      	mov	r1, r8
 800cac4:	4620      	mov	r0, r4
 800cac6:	f000 fadd 	bl	800d084 <_Bfree>
 800caca:	4639      	mov	r1, r7
 800cacc:	4620      	mov	r0, r4
 800cace:	f000 fad9 	bl	800d084 <_Bfree>
 800cad2:	e695      	b.n	800c800 <_dtoa_r+0x6a0>
 800cad4:	2600      	movs	r6, #0
 800cad6:	4637      	mov	r7, r6
 800cad8:	e7e1      	b.n	800ca9e <_dtoa_r+0x93e>
 800cada:	9700      	str	r7, [sp, #0]
 800cadc:	4637      	mov	r7, r6
 800cade:	e599      	b.n	800c614 <_dtoa_r+0x4b4>
 800cae0:	40240000 	.word	0x40240000
 800cae4:	9b08      	ldr	r3, [sp, #32]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	f000 80ca 	beq.w	800cc80 <_dtoa_r+0xb20>
 800caec:	9b03      	ldr	r3, [sp, #12]
 800caee:	9302      	str	r3, [sp, #8]
 800caf0:	2d00      	cmp	r5, #0
 800caf2:	dd05      	ble.n	800cb00 <_dtoa_r+0x9a0>
 800caf4:	4639      	mov	r1, r7
 800caf6:	462a      	mov	r2, r5
 800caf8:	4620      	mov	r0, r4
 800cafa:	f000 fc95 	bl	800d428 <__lshift>
 800cafe:	4607      	mov	r7, r0
 800cb00:	f1b8 0f00 	cmp.w	r8, #0
 800cb04:	d05b      	beq.n	800cbbe <_dtoa_r+0xa5e>
 800cb06:	6879      	ldr	r1, [r7, #4]
 800cb08:	4620      	mov	r0, r4
 800cb0a:	f000 fa7b 	bl	800d004 <_Balloc>
 800cb0e:	4605      	mov	r5, r0
 800cb10:	b928      	cbnz	r0, 800cb1e <_dtoa_r+0x9be>
 800cb12:	4b87      	ldr	r3, [pc, #540]	; (800cd30 <_dtoa_r+0xbd0>)
 800cb14:	4602      	mov	r2, r0
 800cb16:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cb1a:	f7ff bb3b 	b.w	800c194 <_dtoa_r+0x34>
 800cb1e:	693a      	ldr	r2, [r7, #16]
 800cb20:	3202      	adds	r2, #2
 800cb22:	0092      	lsls	r2, r2, #2
 800cb24:	f107 010c 	add.w	r1, r7, #12
 800cb28:	300c      	adds	r0, #12
 800cb2a:	f7fe fb4a 	bl	800b1c2 <memcpy>
 800cb2e:	2201      	movs	r2, #1
 800cb30:	4629      	mov	r1, r5
 800cb32:	4620      	mov	r0, r4
 800cb34:	f000 fc78 	bl	800d428 <__lshift>
 800cb38:	9b01      	ldr	r3, [sp, #4]
 800cb3a:	f103 0901 	add.w	r9, r3, #1
 800cb3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cb42:	4413      	add	r3, r2
 800cb44:	9305      	str	r3, [sp, #20]
 800cb46:	f00a 0301 	and.w	r3, sl, #1
 800cb4a:	46b8      	mov	r8, r7
 800cb4c:	9304      	str	r3, [sp, #16]
 800cb4e:	4607      	mov	r7, r0
 800cb50:	4631      	mov	r1, r6
 800cb52:	ee18 0a10 	vmov	r0, s16
 800cb56:	f7ff fa77 	bl	800c048 <quorem>
 800cb5a:	4641      	mov	r1, r8
 800cb5c:	9002      	str	r0, [sp, #8]
 800cb5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cb62:	ee18 0a10 	vmov	r0, s16
 800cb66:	f000 fccf 	bl	800d508 <__mcmp>
 800cb6a:	463a      	mov	r2, r7
 800cb6c:	9003      	str	r0, [sp, #12]
 800cb6e:	4631      	mov	r1, r6
 800cb70:	4620      	mov	r0, r4
 800cb72:	f000 fce5 	bl	800d540 <__mdiff>
 800cb76:	68c2      	ldr	r2, [r0, #12]
 800cb78:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800cb7c:	4605      	mov	r5, r0
 800cb7e:	bb02      	cbnz	r2, 800cbc2 <_dtoa_r+0xa62>
 800cb80:	4601      	mov	r1, r0
 800cb82:	ee18 0a10 	vmov	r0, s16
 800cb86:	f000 fcbf 	bl	800d508 <__mcmp>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	4620      	mov	r0, r4
 800cb90:	9207      	str	r2, [sp, #28]
 800cb92:	f000 fa77 	bl	800d084 <_Bfree>
 800cb96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cb9a:	ea43 0102 	orr.w	r1, r3, r2
 800cb9e:	9b04      	ldr	r3, [sp, #16]
 800cba0:	430b      	orrs	r3, r1
 800cba2:	464d      	mov	r5, r9
 800cba4:	d10f      	bne.n	800cbc6 <_dtoa_r+0xa66>
 800cba6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cbaa:	d02a      	beq.n	800cc02 <_dtoa_r+0xaa2>
 800cbac:	9b03      	ldr	r3, [sp, #12]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	dd02      	ble.n	800cbb8 <_dtoa_r+0xa58>
 800cbb2:	9b02      	ldr	r3, [sp, #8]
 800cbb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cbb8:	f88b a000 	strb.w	sl, [fp]
 800cbbc:	e775      	b.n	800caaa <_dtoa_r+0x94a>
 800cbbe:	4638      	mov	r0, r7
 800cbc0:	e7ba      	b.n	800cb38 <_dtoa_r+0x9d8>
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	e7e2      	b.n	800cb8c <_dtoa_r+0xa2c>
 800cbc6:	9b03      	ldr	r3, [sp, #12]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	db04      	blt.n	800cbd6 <_dtoa_r+0xa76>
 800cbcc:	9906      	ldr	r1, [sp, #24]
 800cbce:	430b      	orrs	r3, r1
 800cbd0:	9904      	ldr	r1, [sp, #16]
 800cbd2:	430b      	orrs	r3, r1
 800cbd4:	d122      	bne.n	800cc1c <_dtoa_r+0xabc>
 800cbd6:	2a00      	cmp	r2, #0
 800cbd8:	ddee      	ble.n	800cbb8 <_dtoa_r+0xa58>
 800cbda:	ee18 1a10 	vmov	r1, s16
 800cbde:	2201      	movs	r2, #1
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	f000 fc21 	bl	800d428 <__lshift>
 800cbe6:	4631      	mov	r1, r6
 800cbe8:	ee08 0a10 	vmov	s16, r0
 800cbec:	f000 fc8c 	bl	800d508 <__mcmp>
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	dc03      	bgt.n	800cbfc <_dtoa_r+0xa9c>
 800cbf4:	d1e0      	bne.n	800cbb8 <_dtoa_r+0xa58>
 800cbf6:	f01a 0f01 	tst.w	sl, #1
 800cbfa:	d0dd      	beq.n	800cbb8 <_dtoa_r+0xa58>
 800cbfc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cc00:	d1d7      	bne.n	800cbb2 <_dtoa_r+0xa52>
 800cc02:	2339      	movs	r3, #57	; 0x39
 800cc04:	f88b 3000 	strb.w	r3, [fp]
 800cc08:	462b      	mov	r3, r5
 800cc0a:	461d      	mov	r5, r3
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cc12:	2a39      	cmp	r2, #57	; 0x39
 800cc14:	d071      	beq.n	800ccfa <_dtoa_r+0xb9a>
 800cc16:	3201      	adds	r2, #1
 800cc18:	701a      	strb	r2, [r3, #0]
 800cc1a:	e746      	b.n	800caaa <_dtoa_r+0x94a>
 800cc1c:	2a00      	cmp	r2, #0
 800cc1e:	dd07      	ble.n	800cc30 <_dtoa_r+0xad0>
 800cc20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cc24:	d0ed      	beq.n	800cc02 <_dtoa_r+0xaa2>
 800cc26:	f10a 0301 	add.w	r3, sl, #1
 800cc2a:	f88b 3000 	strb.w	r3, [fp]
 800cc2e:	e73c      	b.n	800caaa <_dtoa_r+0x94a>
 800cc30:	9b05      	ldr	r3, [sp, #20]
 800cc32:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cc36:	4599      	cmp	r9, r3
 800cc38:	d047      	beq.n	800ccca <_dtoa_r+0xb6a>
 800cc3a:	ee18 1a10 	vmov	r1, s16
 800cc3e:	2300      	movs	r3, #0
 800cc40:	220a      	movs	r2, #10
 800cc42:	4620      	mov	r0, r4
 800cc44:	f000 fa40 	bl	800d0c8 <__multadd>
 800cc48:	45b8      	cmp	r8, r7
 800cc4a:	ee08 0a10 	vmov	s16, r0
 800cc4e:	f04f 0300 	mov.w	r3, #0
 800cc52:	f04f 020a 	mov.w	r2, #10
 800cc56:	4641      	mov	r1, r8
 800cc58:	4620      	mov	r0, r4
 800cc5a:	d106      	bne.n	800cc6a <_dtoa_r+0xb0a>
 800cc5c:	f000 fa34 	bl	800d0c8 <__multadd>
 800cc60:	4680      	mov	r8, r0
 800cc62:	4607      	mov	r7, r0
 800cc64:	f109 0901 	add.w	r9, r9, #1
 800cc68:	e772      	b.n	800cb50 <_dtoa_r+0x9f0>
 800cc6a:	f000 fa2d 	bl	800d0c8 <__multadd>
 800cc6e:	4639      	mov	r1, r7
 800cc70:	4680      	mov	r8, r0
 800cc72:	2300      	movs	r3, #0
 800cc74:	220a      	movs	r2, #10
 800cc76:	4620      	mov	r0, r4
 800cc78:	f000 fa26 	bl	800d0c8 <__multadd>
 800cc7c:	4607      	mov	r7, r0
 800cc7e:	e7f1      	b.n	800cc64 <_dtoa_r+0xb04>
 800cc80:	9b03      	ldr	r3, [sp, #12]
 800cc82:	9302      	str	r3, [sp, #8]
 800cc84:	9d01      	ldr	r5, [sp, #4]
 800cc86:	ee18 0a10 	vmov	r0, s16
 800cc8a:	4631      	mov	r1, r6
 800cc8c:	f7ff f9dc 	bl	800c048 <quorem>
 800cc90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cc94:	9b01      	ldr	r3, [sp, #4]
 800cc96:	f805 ab01 	strb.w	sl, [r5], #1
 800cc9a:	1aea      	subs	r2, r5, r3
 800cc9c:	9b02      	ldr	r3, [sp, #8]
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	dd09      	ble.n	800ccb6 <_dtoa_r+0xb56>
 800cca2:	ee18 1a10 	vmov	r1, s16
 800cca6:	2300      	movs	r3, #0
 800cca8:	220a      	movs	r2, #10
 800ccaa:	4620      	mov	r0, r4
 800ccac:	f000 fa0c 	bl	800d0c8 <__multadd>
 800ccb0:	ee08 0a10 	vmov	s16, r0
 800ccb4:	e7e7      	b.n	800cc86 <_dtoa_r+0xb26>
 800ccb6:	9b02      	ldr	r3, [sp, #8]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	bfc8      	it	gt
 800ccbc:	461d      	movgt	r5, r3
 800ccbe:	9b01      	ldr	r3, [sp, #4]
 800ccc0:	bfd8      	it	le
 800ccc2:	2501      	movle	r5, #1
 800ccc4:	441d      	add	r5, r3
 800ccc6:	f04f 0800 	mov.w	r8, #0
 800ccca:	ee18 1a10 	vmov	r1, s16
 800ccce:	2201      	movs	r2, #1
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	f000 fba9 	bl	800d428 <__lshift>
 800ccd6:	4631      	mov	r1, r6
 800ccd8:	ee08 0a10 	vmov	s16, r0
 800ccdc:	f000 fc14 	bl	800d508 <__mcmp>
 800cce0:	2800      	cmp	r0, #0
 800cce2:	dc91      	bgt.n	800cc08 <_dtoa_r+0xaa8>
 800cce4:	d102      	bne.n	800ccec <_dtoa_r+0xb8c>
 800cce6:	f01a 0f01 	tst.w	sl, #1
 800ccea:	d18d      	bne.n	800cc08 <_dtoa_r+0xaa8>
 800ccec:	462b      	mov	r3, r5
 800ccee:	461d      	mov	r5, r3
 800ccf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccf4:	2a30      	cmp	r2, #48	; 0x30
 800ccf6:	d0fa      	beq.n	800ccee <_dtoa_r+0xb8e>
 800ccf8:	e6d7      	b.n	800caaa <_dtoa_r+0x94a>
 800ccfa:	9a01      	ldr	r2, [sp, #4]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d184      	bne.n	800cc0a <_dtoa_r+0xaaa>
 800cd00:	9b00      	ldr	r3, [sp, #0]
 800cd02:	3301      	adds	r3, #1
 800cd04:	9300      	str	r3, [sp, #0]
 800cd06:	2331      	movs	r3, #49	; 0x31
 800cd08:	7013      	strb	r3, [r2, #0]
 800cd0a:	e6ce      	b.n	800caaa <_dtoa_r+0x94a>
 800cd0c:	4b09      	ldr	r3, [pc, #36]	; (800cd34 <_dtoa_r+0xbd4>)
 800cd0e:	f7ff ba95 	b.w	800c23c <_dtoa_r+0xdc>
 800cd12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	f47f aa6e 	bne.w	800c1f6 <_dtoa_r+0x96>
 800cd1a:	4b07      	ldr	r3, [pc, #28]	; (800cd38 <_dtoa_r+0xbd8>)
 800cd1c:	f7ff ba8e 	b.w	800c23c <_dtoa_r+0xdc>
 800cd20:	9b02      	ldr	r3, [sp, #8]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	dcae      	bgt.n	800cc84 <_dtoa_r+0xb24>
 800cd26:	9b06      	ldr	r3, [sp, #24]
 800cd28:	2b02      	cmp	r3, #2
 800cd2a:	f73f aea8 	bgt.w	800ca7e <_dtoa_r+0x91e>
 800cd2e:	e7a9      	b.n	800cc84 <_dtoa_r+0xb24>
 800cd30:	0800e78f 	.word	0x0800e78f
 800cd34:	0800e6ec 	.word	0x0800e6ec
 800cd38:	0800e710 	.word	0x0800e710

0800cd3c <__sflush_r>:
 800cd3c:	898a      	ldrh	r2, [r1, #12]
 800cd3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd42:	4605      	mov	r5, r0
 800cd44:	0710      	lsls	r0, r2, #28
 800cd46:	460c      	mov	r4, r1
 800cd48:	d458      	bmi.n	800cdfc <__sflush_r+0xc0>
 800cd4a:	684b      	ldr	r3, [r1, #4]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	dc05      	bgt.n	800cd5c <__sflush_r+0x20>
 800cd50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	dc02      	bgt.n	800cd5c <__sflush_r+0x20>
 800cd56:	2000      	movs	r0, #0
 800cd58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd5e:	2e00      	cmp	r6, #0
 800cd60:	d0f9      	beq.n	800cd56 <__sflush_r+0x1a>
 800cd62:	2300      	movs	r3, #0
 800cd64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd68:	682f      	ldr	r7, [r5, #0]
 800cd6a:	602b      	str	r3, [r5, #0]
 800cd6c:	d032      	beq.n	800cdd4 <__sflush_r+0x98>
 800cd6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd70:	89a3      	ldrh	r3, [r4, #12]
 800cd72:	075a      	lsls	r2, r3, #29
 800cd74:	d505      	bpl.n	800cd82 <__sflush_r+0x46>
 800cd76:	6863      	ldr	r3, [r4, #4]
 800cd78:	1ac0      	subs	r0, r0, r3
 800cd7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd7c:	b10b      	cbz	r3, 800cd82 <__sflush_r+0x46>
 800cd7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd80:	1ac0      	subs	r0, r0, r3
 800cd82:	2300      	movs	r3, #0
 800cd84:	4602      	mov	r2, r0
 800cd86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd88:	6a21      	ldr	r1, [r4, #32]
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	47b0      	blx	r6
 800cd8e:	1c43      	adds	r3, r0, #1
 800cd90:	89a3      	ldrh	r3, [r4, #12]
 800cd92:	d106      	bne.n	800cda2 <__sflush_r+0x66>
 800cd94:	6829      	ldr	r1, [r5, #0]
 800cd96:	291d      	cmp	r1, #29
 800cd98:	d82c      	bhi.n	800cdf4 <__sflush_r+0xb8>
 800cd9a:	4a2a      	ldr	r2, [pc, #168]	; (800ce44 <__sflush_r+0x108>)
 800cd9c:	40ca      	lsrs	r2, r1
 800cd9e:	07d6      	lsls	r6, r2, #31
 800cda0:	d528      	bpl.n	800cdf4 <__sflush_r+0xb8>
 800cda2:	2200      	movs	r2, #0
 800cda4:	6062      	str	r2, [r4, #4]
 800cda6:	04d9      	lsls	r1, r3, #19
 800cda8:	6922      	ldr	r2, [r4, #16]
 800cdaa:	6022      	str	r2, [r4, #0]
 800cdac:	d504      	bpl.n	800cdb8 <__sflush_r+0x7c>
 800cdae:	1c42      	adds	r2, r0, #1
 800cdb0:	d101      	bne.n	800cdb6 <__sflush_r+0x7a>
 800cdb2:	682b      	ldr	r3, [r5, #0]
 800cdb4:	b903      	cbnz	r3, 800cdb8 <__sflush_r+0x7c>
 800cdb6:	6560      	str	r0, [r4, #84]	; 0x54
 800cdb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdba:	602f      	str	r7, [r5, #0]
 800cdbc:	2900      	cmp	r1, #0
 800cdbe:	d0ca      	beq.n	800cd56 <__sflush_r+0x1a>
 800cdc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cdc4:	4299      	cmp	r1, r3
 800cdc6:	d002      	beq.n	800cdce <__sflush_r+0x92>
 800cdc8:	4628      	mov	r0, r5
 800cdca:	f000 fcb5 	bl	800d738 <_free_r>
 800cdce:	2000      	movs	r0, #0
 800cdd0:	6360      	str	r0, [r4, #52]	; 0x34
 800cdd2:	e7c1      	b.n	800cd58 <__sflush_r+0x1c>
 800cdd4:	6a21      	ldr	r1, [r4, #32]
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	4628      	mov	r0, r5
 800cdda:	47b0      	blx	r6
 800cddc:	1c41      	adds	r1, r0, #1
 800cdde:	d1c7      	bne.n	800cd70 <__sflush_r+0x34>
 800cde0:	682b      	ldr	r3, [r5, #0]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d0c4      	beq.n	800cd70 <__sflush_r+0x34>
 800cde6:	2b1d      	cmp	r3, #29
 800cde8:	d001      	beq.n	800cdee <__sflush_r+0xb2>
 800cdea:	2b16      	cmp	r3, #22
 800cdec:	d101      	bne.n	800cdf2 <__sflush_r+0xb6>
 800cdee:	602f      	str	r7, [r5, #0]
 800cdf0:	e7b1      	b.n	800cd56 <__sflush_r+0x1a>
 800cdf2:	89a3      	ldrh	r3, [r4, #12]
 800cdf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdf8:	81a3      	strh	r3, [r4, #12]
 800cdfa:	e7ad      	b.n	800cd58 <__sflush_r+0x1c>
 800cdfc:	690f      	ldr	r7, [r1, #16]
 800cdfe:	2f00      	cmp	r7, #0
 800ce00:	d0a9      	beq.n	800cd56 <__sflush_r+0x1a>
 800ce02:	0793      	lsls	r3, r2, #30
 800ce04:	680e      	ldr	r6, [r1, #0]
 800ce06:	bf08      	it	eq
 800ce08:	694b      	ldreq	r3, [r1, #20]
 800ce0a:	600f      	str	r7, [r1, #0]
 800ce0c:	bf18      	it	ne
 800ce0e:	2300      	movne	r3, #0
 800ce10:	eba6 0807 	sub.w	r8, r6, r7
 800ce14:	608b      	str	r3, [r1, #8]
 800ce16:	f1b8 0f00 	cmp.w	r8, #0
 800ce1a:	dd9c      	ble.n	800cd56 <__sflush_r+0x1a>
 800ce1c:	6a21      	ldr	r1, [r4, #32]
 800ce1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ce20:	4643      	mov	r3, r8
 800ce22:	463a      	mov	r2, r7
 800ce24:	4628      	mov	r0, r5
 800ce26:	47b0      	blx	r6
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	dc06      	bgt.n	800ce3a <__sflush_r+0xfe>
 800ce2c:	89a3      	ldrh	r3, [r4, #12]
 800ce2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce32:	81a3      	strh	r3, [r4, #12]
 800ce34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce38:	e78e      	b.n	800cd58 <__sflush_r+0x1c>
 800ce3a:	4407      	add	r7, r0
 800ce3c:	eba8 0800 	sub.w	r8, r8, r0
 800ce40:	e7e9      	b.n	800ce16 <__sflush_r+0xda>
 800ce42:	bf00      	nop
 800ce44:	20400001 	.word	0x20400001

0800ce48 <_fflush_r>:
 800ce48:	b538      	push	{r3, r4, r5, lr}
 800ce4a:	690b      	ldr	r3, [r1, #16]
 800ce4c:	4605      	mov	r5, r0
 800ce4e:	460c      	mov	r4, r1
 800ce50:	b913      	cbnz	r3, 800ce58 <_fflush_r+0x10>
 800ce52:	2500      	movs	r5, #0
 800ce54:	4628      	mov	r0, r5
 800ce56:	bd38      	pop	{r3, r4, r5, pc}
 800ce58:	b118      	cbz	r0, 800ce62 <_fflush_r+0x1a>
 800ce5a:	6983      	ldr	r3, [r0, #24]
 800ce5c:	b90b      	cbnz	r3, 800ce62 <_fflush_r+0x1a>
 800ce5e:	f7fe f8eb 	bl	800b038 <__sinit>
 800ce62:	4b14      	ldr	r3, [pc, #80]	; (800ceb4 <_fflush_r+0x6c>)
 800ce64:	429c      	cmp	r4, r3
 800ce66:	d11b      	bne.n	800cea0 <_fflush_r+0x58>
 800ce68:	686c      	ldr	r4, [r5, #4]
 800ce6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d0ef      	beq.n	800ce52 <_fflush_r+0xa>
 800ce72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce74:	07d0      	lsls	r0, r2, #31
 800ce76:	d404      	bmi.n	800ce82 <_fflush_r+0x3a>
 800ce78:	0599      	lsls	r1, r3, #22
 800ce7a:	d402      	bmi.n	800ce82 <_fflush_r+0x3a>
 800ce7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce7e:	f7fe f99e 	bl	800b1be <__retarget_lock_acquire_recursive>
 800ce82:	4628      	mov	r0, r5
 800ce84:	4621      	mov	r1, r4
 800ce86:	f7ff ff59 	bl	800cd3c <__sflush_r>
 800ce8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce8c:	07da      	lsls	r2, r3, #31
 800ce8e:	4605      	mov	r5, r0
 800ce90:	d4e0      	bmi.n	800ce54 <_fflush_r+0xc>
 800ce92:	89a3      	ldrh	r3, [r4, #12]
 800ce94:	059b      	lsls	r3, r3, #22
 800ce96:	d4dd      	bmi.n	800ce54 <_fflush_r+0xc>
 800ce98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce9a:	f7fe f991 	bl	800b1c0 <__retarget_lock_release_recursive>
 800ce9e:	e7d9      	b.n	800ce54 <_fflush_r+0xc>
 800cea0:	4b05      	ldr	r3, [pc, #20]	; (800ceb8 <_fflush_r+0x70>)
 800cea2:	429c      	cmp	r4, r3
 800cea4:	d101      	bne.n	800ceaa <_fflush_r+0x62>
 800cea6:	68ac      	ldr	r4, [r5, #8]
 800cea8:	e7df      	b.n	800ce6a <_fflush_r+0x22>
 800ceaa:	4b04      	ldr	r3, [pc, #16]	; (800cebc <_fflush_r+0x74>)
 800ceac:	429c      	cmp	r4, r3
 800ceae:	bf08      	it	eq
 800ceb0:	68ec      	ldreq	r4, [r5, #12]
 800ceb2:	e7da      	b.n	800ce6a <_fflush_r+0x22>
 800ceb4:	0800e698 	.word	0x0800e698
 800ceb8:	0800e6b8 	.word	0x0800e6b8
 800cebc:	0800e678 	.word	0x0800e678

0800cec0 <_localeconv_r>:
 800cec0:	4800      	ldr	r0, [pc, #0]	; (800cec4 <_localeconv_r+0x4>)
 800cec2:	4770      	bx	lr
 800cec4:	20000168 	.word	0x20000168

0800cec8 <_lseek_r>:
 800cec8:	b538      	push	{r3, r4, r5, lr}
 800ceca:	4d07      	ldr	r5, [pc, #28]	; (800cee8 <_lseek_r+0x20>)
 800cecc:	4604      	mov	r4, r0
 800cece:	4608      	mov	r0, r1
 800ced0:	4611      	mov	r1, r2
 800ced2:	2200      	movs	r2, #0
 800ced4:	602a      	str	r2, [r5, #0]
 800ced6:	461a      	mov	r2, r3
 800ced8:	f7f5 fa90 	bl	80023fc <_lseek>
 800cedc:	1c43      	adds	r3, r0, #1
 800cede:	d102      	bne.n	800cee6 <_lseek_r+0x1e>
 800cee0:	682b      	ldr	r3, [r5, #0]
 800cee2:	b103      	cbz	r3, 800cee6 <_lseek_r+0x1e>
 800cee4:	6023      	str	r3, [r4, #0]
 800cee6:	bd38      	pop	{r3, r4, r5, pc}
 800cee8:	20004524 	.word	0x20004524

0800ceec <__swhatbuf_r>:
 800ceec:	b570      	push	{r4, r5, r6, lr}
 800ceee:	460e      	mov	r6, r1
 800cef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cef4:	2900      	cmp	r1, #0
 800cef6:	b096      	sub	sp, #88	; 0x58
 800cef8:	4614      	mov	r4, r2
 800cefa:	461d      	mov	r5, r3
 800cefc:	da08      	bge.n	800cf10 <__swhatbuf_r+0x24>
 800cefe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cf02:	2200      	movs	r2, #0
 800cf04:	602a      	str	r2, [r5, #0]
 800cf06:	061a      	lsls	r2, r3, #24
 800cf08:	d410      	bmi.n	800cf2c <__swhatbuf_r+0x40>
 800cf0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf0e:	e00e      	b.n	800cf2e <__swhatbuf_r+0x42>
 800cf10:	466a      	mov	r2, sp
 800cf12:	f000 fe07 	bl	800db24 <_fstat_r>
 800cf16:	2800      	cmp	r0, #0
 800cf18:	dbf1      	blt.n	800cefe <__swhatbuf_r+0x12>
 800cf1a:	9a01      	ldr	r2, [sp, #4]
 800cf1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cf20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cf24:	425a      	negs	r2, r3
 800cf26:	415a      	adcs	r2, r3
 800cf28:	602a      	str	r2, [r5, #0]
 800cf2a:	e7ee      	b.n	800cf0a <__swhatbuf_r+0x1e>
 800cf2c:	2340      	movs	r3, #64	; 0x40
 800cf2e:	2000      	movs	r0, #0
 800cf30:	6023      	str	r3, [r4, #0]
 800cf32:	b016      	add	sp, #88	; 0x58
 800cf34:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cf38 <__smakebuf_r>:
 800cf38:	898b      	ldrh	r3, [r1, #12]
 800cf3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf3c:	079d      	lsls	r5, r3, #30
 800cf3e:	4606      	mov	r6, r0
 800cf40:	460c      	mov	r4, r1
 800cf42:	d507      	bpl.n	800cf54 <__smakebuf_r+0x1c>
 800cf44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf48:	6023      	str	r3, [r4, #0]
 800cf4a:	6123      	str	r3, [r4, #16]
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	6163      	str	r3, [r4, #20]
 800cf50:	b002      	add	sp, #8
 800cf52:	bd70      	pop	{r4, r5, r6, pc}
 800cf54:	ab01      	add	r3, sp, #4
 800cf56:	466a      	mov	r2, sp
 800cf58:	f7ff ffc8 	bl	800ceec <__swhatbuf_r>
 800cf5c:	9900      	ldr	r1, [sp, #0]
 800cf5e:	4605      	mov	r5, r0
 800cf60:	4630      	mov	r0, r6
 800cf62:	f7fe f965 	bl	800b230 <_malloc_r>
 800cf66:	b948      	cbnz	r0, 800cf7c <__smakebuf_r+0x44>
 800cf68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf6c:	059a      	lsls	r2, r3, #22
 800cf6e:	d4ef      	bmi.n	800cf50 <__smakebuf_r+0x18>
 800cf70:	f023 0303 	bic.w	r3, r3, #3
 800cf74:	f043 0302 	orr.w	r3, r3, #2
 800cf78:	81a3      	strh	r3, [r4, #12]
 800cf7a:	e7e3      	b.n	800cf44 <__smakebuf_r+0xc>
 800cf7c:	4b0d      	ldr	r3, [pc, #52]	; (800cfb4 <__smakebuf_r+0x7c>)
 800cf7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf80:	89a3      	ldrh	r3, [r4, #12]
 800cf82:	6020      	str	r0, [r4, #0]
 800cf84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf88:	81a3      	strh	r3, [r4, #12]
 800cf8a:	9b00      	ldr	r3, [sp, #0]
 800cf8c:	6163      	str	r3, [r4, #20]
 800cf8e:	9b01      	ldr	r3, [sp, #4]
 800cf90:	6120      	str	r0, [r4, #16]
 800cf92:	b15b      	cbz	r3, 800cfac <__smakebuf_r+0x74>
 800cf94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf98:	4630      	mov	r0, r6
 800cf9a:	f000 fdd5 	bl	800db48 <_isatty_r>
 800cf9e:	b128      	cbz	r0, 800cfac <__smakebuf_r+0x74>
 800cfa0:	89a3      	ldrh	r3, [r4, #12]
 800cfa2:	f023 0303 	bic.w	r3, r3, #3
 800cfa6:	f043 0301 	orr.w	r3, r3, #1
 800cfaa:	81a3      	strh	r3, [r4, #12]
 800cfac:	89a0      	ldrh	r0, [r4, #12]
 800cfae:	4305      	orrs	r5, r0
 800cfb0:	81a5      	strh	r5, [r4, #12]
 800cfb2:	e7cd      	b.n	800cf50 <__smakebuf_r+0x18>
 800cfb4:	0800afd1 	.word	0x0800afd1

0800cfb8 <malloc>:
 800cfb8:	4b02      	ldr	r3, [pc, #8]	; (800cfc4 <malloc+0xc>)
 800cfba:	4601      	mov	r1, r0
 800cfbc:	6818      	ldr	r0, [r3, #0]
 800cfbe:	f7fe b937 	b.w	800b230 <_malloc_r>
 800cfc2:	bf00      	nop
 800cfc4:	20000014 	.word	0x20000014

0800cfc8 <__ascii_mbtowc>:
 800cfc8:	b082      	sub	sp, #8
 800cfca:	b901      	cbnz	r1, 800cfce <__ascii_mbtowc+0x6>
 800cfcc:	a901      	add	r1, sp, #4
 800cfce:	b142      	cbz	r2, 800cfe2 <__ascii_mbtowc+0x1a>
 800cfd0:	b14b      	cbz	r3, 800cfe6 <__ascii_mbtowc+0x1e>
 800cfd2:	7813      	ldrb	r3, [r2, #0]
 800cfd4:	600b      	str	r3, [r1, #0]
 800cfd6:	7812      	ldrb	r2, [r2, #0]
 800cfd8:	1e10      	subs	r0, r2, #0
 800cfda:	bf18      	it	ne
 800cfdc:	2001      	movne	r0, #1
 800cfde:	b002      	add	sp, #8
 800cfe0:	4770      	bx	lr
 800cfe2:	4610      	mov	r0, r2
 800cfe4:	e7fb      	b.n	800cfde <__ascii_mbtowc+0x16>
 800cfe6:	f06f 0001 	mvn.w	r0, #1
 800cfea:	e7f8      	b.n	800cfde <__ascii_mbtowc+0x16>

0800cfec <__malloc_lock>:
 800cfec:	4801      	ldr	r0, [pc, #4]	; (800cff4 <__malloc_lock+0x8>)
 800cfee:	f7fe b8e6 	b.w	800b1be <__retarget_lock_acquire_recursive>
 800cff2:	bf00      	nop
 800cff4:	20004518 	.word	0x20004518

0800cff8 <__malloc_unlock>:
 800cff8:	4801      	ldr	r0, [pc, #4]	; (800d000 <__malloc_unlock+0x8>)
 800cffa:	f7fe b8e1 	b.w	800b1c0 <__retarget_lock_release_recursive>
 800cffe:	bf00      	nop
 800d000:	20004518 	.word	0x20004518

0800d004 <_Balloc>:
 800d004:	b570      	push	{r4, r5, r6, lr}
 800d006:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d008:	4604      	mov	r4, r0
 800d00a:	460d      	mov	r5, r1
 800d00c:	b976      	cbnz	r6, 800d02c <_Balloc+0x28>
 800d00e:	2010      	movs	r0, #16
 800d010:	f7ff ffd2 	bl	800cfb8 <malloc>
 800d014:	4602      	mov	r2, r0
 800d016:	6260      	str	r0, [r4, #36]	; 0x24
 800d018:	b920      	cbnz	r0, 800d024 <_Balloc+0x20>
 800d01a:	4b18      	ldr	r3, [pc, #96]	; (800d07c <_Balloc+0x78>)
 800d01c:	4818      	ldr	r0, [pc, #96]	; (800d080 <_Balloc+0x7c>)
 800d01e:	2166      	movs	r1, #102	; 0x66
 800d020:	f000 fd50 	bl	800dac4 <__assert_func>
 800d024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d028:	6006      	str	r6, [r0, #0]
 800d02a:	60c6      	str	r6, [r0, #12]
 800d02c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d02e:	68f3      	ldr	r3, [r6, #12]
 800d030:	b183      	cbz	r3, 800d054 <_Balloc+0x50>
 800d032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d03a:	b9b8      	cbnz	r0, 800d06c <_Balloc+0x68>
 800d03c:	2101      	movs	r1, #1
 800d03e:	fa01 f605 	lsl.w	r6, r1, r5
 800d042:	1d72      	adds	r2, r6, #5
 800d044:	0092      	lsls	r2, r2, #2
 800d046:	4620      	mov	r0, r4
 800d048:	f000 fb60 	bl	800d70c <_calloc_r>
 800d04c:	b160      	cbz	r0, 800d068 <_Balloc+0x64>
 800d04e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d052:	e00e      	b.n	800d072 <_Balloc+0x6e>
 800d054:	2221      	movs	r2, #33	; 0x21
 800d056:	2104      	movs	r1, #4
 800d058:	4620      	mov	r0, r4
 800d05a:	f000 fb57 	bl	800d70c <_calloc_r>
 800d05e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d060:	60f0      	str	r0, [r6, #12]
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d1e4      	bne.n	800d032 <_Balloc+0x2e>
 800d068:	2000      	movs	r0, #0
 800d06a:	bd70      	pop	{r4, r5, r6, pc}
 800d06c:	6802      	ldr	r2, [r0, #0]
 800d06e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d072:	2300      	movs	r3, #0
 800d074:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d078:	e7f7      	b.n	800d06a <_Balloc+0x66>
 800d07a:	bf00      	nop
 800d07c:	0800e71d 	.word	0x0800e71d
 800d080:	0800e7aa 	.word	0x0800e7aa

0800d084 <_Bfree>:
 800d084:	b570      	push	{r4, r5, r6, lr}
 800d086:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d088:	4605      	mov	r5, r0
 800d08a:	460c      	mov	r4, r1
 800d08c:	b976      	cbnz	r6, 800d0ac <_Bfree+0x28>
 800d08e:	2010      	movs	r0, #16
 800d090:	f7ff ff92 	bl	800cfb8 <malloc>
 800d094:	4602      	mov	r2, r0
 800d096:	6268      	str	r0, [r5, #36]	; 0x24
 800d098:	b920      	cbnz	r0, 800d0a4 <_Bfree+0x20>
 800d09a:	4b09      	ldr	r3, [pc, #36]	; (800d0c0 <_Bfree+0x3c>)
 800d09c:	4809      	ldr	r0, [pc, #36]	; (800d0c4 <_Bfree+0x40>)
 800d09e:	218a      	movs	r1, #138	; 0x8a
 800d0a0:	f000 fd10 	bl	800dac4 <__assert_func>
 800d0a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0a8:	6006      	str	r6, [r0, #0]
 800d0aa:	60c6      	str	r6, [r0, #12]
 800d0ac:	b13c      	cbz	r4, 800d0be <_Bfree+0x3a>
 800d0ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d0b0:	6862      	ldr	r2, [r4, #4]
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d0b8:	6021      	str	r1, [r4, #0]
 800d0ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d0be:	bd70      	pop	{r4, r5, r6, pc}
 800d0c0:	0800e71d 	.word	0x0800e71d
 800d0c4:	0800e7aa 	.word	0x0800e7aa

0800d0c8 <__multadd>:
 800d0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0cc:	690d      	ldr	r5, [r1, #16]
 800d0ce:	4607      	mov	r7, r0
 800d0d0:	460c      	mov	r4, r1
 800d0d2:	461e      	mov	r6, r3
 800d0d4:	f101 0c14 	add.w	ip, r1, #20
 800d0d8:	2000      	movs	r0, #0
 800d0da:	f8dc 3000 	ldr.w	r3, [ip]
 800d0de:	b299      	uxth	r1, r3
 800d0e0:	fb02 6101 	mla	r1, r2, r1, r6
 800d0e4:	0c1e      	lsrs	r6, r3, #16
 800d0e6:	0c0b      	lsrs	r3, r1, #16
 800d0e8:	fb02 3306 	mla	r3, r2, r6, r3
 800d0ec:	b289      	uxth	r1, r1
 800d0ee:	3001      	adds	r0, #1
 800d0f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d0f4:	4285      	cmp	r5, r0
 800d0f6:	f84c 1b04 	str.w	r1, [ip], #4
 800d0fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d0fe:	dcec      	bgt.n	800d0da <__multadd+0x12>
 800d100:	b30e      	cbz	r6, 800d146 <__multadd+0x7e>
 800d102:	68a3      	ldr	r3, [r4, #8]
 800d104:	42ab      	cmp	r3, r5
 800d106:	dc19      	bgt.n	800d13c <__multadd+0x74>
 800d108:	6861      	ldr	r1, [r4, #4]
 800d10a:	4638      	mov	r0, r7
 800d10c:	3101      	adds	r1, #1
 800d10e:	f7ff ff79 	bl	800d004 <_Balloc>
 800d112:	4680      	mov	r8, r0
 800d114:	b928      	cbnz	r0, 800d122 <__multadd+0x5a>
 800d116:	4602      	mov	r2, r0
 800d118:	4b0c      	ldr	r3, [pc, #48]	; (800d14c <__multadd+0x84>)
 800d11a:	480d      	ldr	r0, [pc, #52]	; (800d150 <__multadd+0x88>)
 800d11c:	21b5      	movs	r1, #181	; 0xb5
 800d11e:	f000 fcd1 	bl	800dac4 <__assert_func>
 800d122:	6922      	ldr	r2, [r4, #16]
 800d124:	3202      	adds	r2, #2
 800d126:	f104 010c 	add.w	r1, r4, #12
 800d12a:	0092      	lsls	r2, r2, #2
 800d12c:	300c      	adds	r0, #12
 800d12e:	f7fe f848 	bl	800b1c2 <memcpy>
 800d132:	4621      	mov	r1, r4
 800d134:	4638      	mov	r0, r7
 800d136:	f7ff ffa5 	bl	800d084 <_Bfree>
 800d13a:	4644      	mov	r4, r8
 800d13c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d140:	3501      	adds	r5, #1
 800d142:	615e      	str	r6, [r3, #20]
 800d144:	6125      	str	r5, [r4, #16]
 800d146:	4620      	mov	r0, r4
 800d148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d14c:	0800e78f 	.word	0x0800e78f
 800d150:	0800e7aa 	.word	0x0800e7aa

0800d154 <__hi0bits>:
 800d154:	0c03      	lsrs	r3, r0, #16
 800d156:	041b      	lsls	r3, r3, #16
 800d158:	b9d3      	cbnz	r3, 800d190 <__hi0bits+0x3c>
 800d15a:	0400      	lsls	r0, r0, #16
 800d15c:	2310      	movs	r3, #16
 800d15e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d162:	bf04      	itt	eq
 800d164:	0200      	lsleq	r0, r0, #8
 800d166:	3308      	addeq	r3, #8
 800d168:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d16c:	bf04      	itt	eq
 800d16e:	0100      	lsleq	r0, r0, #4
 800d170:	3304      	addeq	r3, #4
 800d172:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d176:	bf04      	itt	eq
 800d178:	0080      	lsleq	r0, r0, #2
 800d17a:	3302      	addeq	r3, #2
 800d17c:	2800      	cmp	r0, #0
 800d17e:	db05      	blt.n	800d18c <__hi0bits+0x38>
 800d180:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d184:	f103 0301 	add.w	r3, r3, #1
 800d188:	bf08      	it	eq
 800d18a:	2320      	moveq	r3, #32
 800d18c:	4618      	mov	r0, r3
 800d18e:	4770      	bx	lr
 800d190:	2300      	movs	r3, #0
 800d192:	e7e4      	b.n	800d15e <__hi0bits+0xa>

0800d194 <__lo0bits>:
 800d194:	6803      	ldr	r3, [r0, #0]
 800d196:	f013 0207 	ands.w	r2, r3, #7
 800d19a:	4601      	mov	r1, r0
 800d19c:	d00b      	beq.n	800d1b6 <__lo0bits+0x22>
 800d19e:	07da      	lsls	r2, r3, #31
 800d1a0:	d423      	bmi.n	800d1ea <__lo0bits+0x56>
 800d1a2:	0798      	lsls	r0, r3, #30
 800d1a4:	bf49      	itett	mi
 800d1a6:	085b      	lsrmi	r3, r3, #1
 800d1a8:	089b      	lsrpl	r3, r3, #2
 800d1aa:	2001      	movmi	r0, #1
 800d1ac:	600b      	strmi	r3, [r1, #0]
 800d1ae:	bf5c      	itt	pl
 800d1b0:	600b      	strpl	r3, [r1, #0]
 800d1b2:	2002      	movpl	r0, #2
 800d1b4:	4770      	bx	lr
 800d1b6:	b298      	uxth	r0, r3
 800d1b8:	b9a8      	cbnz	r0, 800d1e6 <__lo0bits+0x52>
 800d1ba:	0c1b      	lsrs	r3, r3, #16
 800d1bc:	2010      	movs	r0, #16
 800d1be:	b2da      	uxtb	r2, r3
 800d1c0:	b90a      	cbnz	r2, 800d1c6 <__lo0bits+0x32>
 800d1c2:	3008      	adds	r0, #8
 800d1c4:	0a1b      	lsrs	r3, r3, #8
 800d1c6:	071a      	lsls	r2, r3, #28
 800d1c8:	bf04      	itt	eq
 800d1ca:	091b      	lsreq	r3, r3, #4
 800d1cc:	3004      	addeq	r0, #4
 800d1ce:	079a      	lsls	r2, r3, #30
 800d1d0:	bf04      	itt	eq
 800d1d2:	089b      	lsreq	r3, r3, #2
 800d1d4:	3002      	addeq	r0, #2
 800d1d6:	07da      	lsls	r2, r3, #31
 800d1d8:	d403      	bmi.n	800d1e2 <__lo0bits+0x4e>
 800d1da:	085b      	lsrs	r3, r3, #1
 800d1dc:	f100 0001 	add.w	r0, r0, #1
 800d1e0:	d005      	beq.n	800d1ee <__lo0bits+0x5a>
 800d1e2:	600b      	str	r3, [r1, #0]
 800d1e4:	4770      	bx	lr
 800d1e6:	4610      	mov	r0, r2
 800d1e8:	e7e9      	b.n	800d1be <__lo0bits+0x2a>
 800d1ea:	2000      	movs	r0, #0
 800d1ec:	4770      	bx	lr
 800d1ee:	2020      	movs	r0, #32
 800d1f0:	4770      	bx	lr
	...

0800d1f4 <__i2b>:
 800d1f4:	b510      	push	{r4, lr}
 800d1f6:	460c      	mov	r4, r1
 800d1f8:	2101      	movs	r1, #1
 800d1fa:	f7ff ff03 	bl	800d004 <_Balloc>
 800d1fe:	4602      	mov	r2, r0
 800d200:	b928      	cbnz	r0, 800d20e <__i2b+0x1a>
 800d202:	4b05      	ldr	r3, [pc, #20]	; (800d218 <__i2b+0x24>)
 800d204:	4805      	ldr	r0, [pc, #20]	; (800d21c <__i2b+0x28>)
 800d206:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d20a:	f000 fc5b 	bl	800dac4 <__assert_func>
 800d20e:	2301      	movs	r3, #1
 800d210:	6144      	str	r4, [r0, #20]
 800d212:	6103      	str	r3, [r0, #16]
 800d214:	bd10      	pop	{r4, pc}
 800d216:	bf00      	nop
 800d218:	0800e78f 	.word	0x0800e78f
 800d21c:	0800e7aa 	.word	0x0800e7aa

0800d220 <__multiply>:
 800d220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d224:	4691      	mov	r9, r2
 800d226:	690a      	ldr	r2, [r1, #16]
 800d228:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	bfb8      	it	lt
 800d230:	460b      	movlt	r3, r1
 800d232:	460c      	mov	r4, r1
 800d234:	bfbc      	itt	lt
 800d236:	464c      	movlt	r4, r9
 800d238:	4699      	movlt	r9, r3
 800d23a:	6927      	ldr	r7, [r4, #16]
 800d23c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d240:	68a3      	ldr	r3, [r4, #8]
 800d242:	6861      	ldr	r1, [r4, #4]
 800d244:	eb07 060a 	add.w	r6, r7, sl
 800d248:	42b3      	cmp	r3, r6
 800d24a:	b085      	sub	sp, #20
 800d24c:	bfb8      	it	lt
 800d24e:	3101      	addlt	r1, #1
 800d250:	f7ff fed8 	bl	800d004 <_Balloc>
 800d254:	b930      	cbnz	r0, 800d264 <__multiply+0x44>
 800d256:	4602      	mov	r2, r0
 800d258:	4b44      	ldr	r3, [pc, #272]	; (800d36c <__multiply+0x14c>)
 800d25a:	4845      	ldr	r0, [pc, #276]	; (800d370 <__multiply+0x150>)
 800d25c:	f240 115d 	movw	r1, #349	; 0x15d
 800d260:	f000 fc30 	bl	800dac4 <__assert_func>
 800d264:	f100 0514 	add.w	r5, r0, #20
 800d268:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d26c:	462b      	mov	r3, r5
 800d26e:	2200      	movs	r2, #0
 800d270:	4543      	cmp	r3, r8
 800d272:	d321      	bcc.n	800d2b8 <__multiply+0x98>
 800d274:	f104 0314 	add.w	r3, r4, #20
 800d278:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d27c:	f109 0314 	add.w	r3, r9, #20
 800d280:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d284:	9202      	str	r2, [sp, #8]
 800d286:	1b3a      	subs	r2, r7, r4
 800d288:	3a15      	subs	r2, #21
 800d28a:	f022 0203 	bic.w	r2, r2, #3
 800d28e:	3204      	adds	r2, #4
 800d290:	f104 0115 	add.w	r1, r4, #21
 800d294:	428f      	cmp	r7, r1
 800d296:	bf38      	it	cc
 800d298:	2204      	movcc	r2, #4
 800d29a:	9201      	str	r2, [sp, #4]
 800d29c:	9a02      	ldr	r2, [sp, #8]
 800d29e:	9303      	str	r3, [sp, #12]
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d80c      	bhi.n	800d2be <__multiply+0x9e>
 800d2a4:	2e00      	cmp	r6, #0
 800d2a6:	dd03      	ble.n	800d2b0 <__multiply+0x90>
 800d2a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d05a      	beq.n	800d366 <__multiply+0x146>
 800d2b0:	6106      	str	r6, [r0, #16]
 800d2b2:	b005      	add	sp, #20
 800d2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2b8:	f843 2b04 	str.w	r2, [r3], #4
 800d2bc:	e7d8      	b.n	800d270 <__multiply+0x50>
 800d2be:	f8b3 a000 	ldrh.w	sl, [r3]
 800d2c2:	f1ba 0f00 	cmp.w	sl, #0
 800d2c6:	d024      	beq.n	800d312 <__multiply+0xf2>
 800d2c8:	f104 0e14 	add.w	lr, r4, #20
 800d2cc:	46a9      	mov	r9, r5
 800d2ce:	f04f 0c00 	mov.w	ip, #0
 800d2d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d2d6:	f8d9 1000 	ldr.w	r1, [r9]
 800d2da:	fa1f fb82 	uxth.w	fp, r2
 800d2de:	b289      	uxth	r1, r1
 800d2e0:	fb0a 110b 	mla	r1, sl, fp, r1
 800d2e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d2e8:	f8d9 2000 	ldr.w	r2, [r9]
 800d2ec:	4461      	add	r1, ip
 800d2ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d2f2:	fb0a c20b 	mla	r2, sl, fp, ip
 800d2f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d2fa:	b289      	uxth	r1, r1
 800d2fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d300:	4577      	cmp	r7, lr
 800d302:	f849 1b04 	str.w	r1, [r9], #4
 800d306:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d30a:	d8e2      	bhi.n	800d2d2 <__multiply+0xb2>
 800d30c:	9a01      	ldr	r2, [sp, #4]
 800d30e:	f845 c002 	str.w	ip, [r5, r2]
 800d312:	9a03      	ldr	r2, [sp, #12]
 800d314:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d318:	3304      	adds	r3, #4
 800d31a:	f1b9 0f00 	cmp.w	r9, #0
 800d31e:	d020      	beq.n	800d362 <__multiply+0x142>
 800d320:	6829      	ldr	r1, [r5, #0]
 800d322:	f104 0c14 	add.w	ip, r4, #20
 800d326:	46ae      	mov	lr, r5
 800d328:	f04f 0a00 	mov.w	sl, #0
 800d32c:	f8bc b000 	ldrh.w	fp, [ip]
 800d330:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d334:	fb09 220b 	mla	r2, r9, fp, r2
 800d338:	4492      	add	sl, r2
 800d33a:	b289      	uxth	r1, r1
 800d33c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d340:	f84e 1b04 	str.w	r1, [lr], #4
 800d344:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d348:	f8be 1000 	ldrh.w	r1, [lr]
 800d34c:	0c12      	lsrs	r2, r2, #16
 800d34e:	fb09 1102 	mla	r1, r9, r2, r1
 800d352:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d356:	4567      	cmp	r7, ip
 800d358:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d35c:	d8e6      	bhi.n	800d32c <__multiply+0x10c>
 800d35e:	9a01      	ldr	r2, [sp, #4]
 800d360:	50a9      	str	r1, [r5, r2]
 800d362:	3504      	adds	r5, #4
 800d364:	e79a      	b.n	800d29c <__multiply+0x7c>
 800d366:	3e01      	subs	r6, #1
 800d368:	e79c      	b.n	800d2a4 <__multiply+0x84>
 800d36a:	bf00      	nop
 800d36c:	0800e78f 	.word	0x0800e78f
 800d370:	0800e7aa 	.word	0x0800e7aa

0800d374 <__pow5mult>:
 800d374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d378:	4615      	mov	r5, r2
 800d37a:	f012 0203 	ands.w	r2, r2, #3
 800d37e:	4606      	mov	r6, r0
 800d380:	460f      	mov	r7, r1
 800d382:	d007      	beq.n	800d394 <__pow5mult+0x20>
 800d384:	4c25      	ldr	r4, [pc, #148]	; (800d41c <__pow5mult+0xa8>)
 800d386:	3a01      	subs	r2, #1
 800d388:	2300      	movs	r3, #0
 800d38a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d38e:	f7ff fe9b 	bl	800d0c8 <__multadd>
 800d392:	4607      	mov	r7, r0
 800d394:	10ad      	asrs	r5, r5, #2
 800d396:	d03d      	beq.n	800d414 <__pow5mult+0xa0>
 800d398:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d39a:	b97c      	cbnz	r4, 800d3bc <__pow5mult+0x48>
 800d39c:	2010      	movs	r0, #16
 800d39e:	f7ff fe0b 	bl	800cfb8 <malloc>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	6270      	str	r0, [r6, #36]	; 0x24
 800d3a6:	b928      	cbnz	r0, 800d3b4 <__pow5mult+0x40>
 800d3a8:	4b1d      	ldr	r3, [pc, #116]	; (800d420 <__pow5mult+0xac>)
 800d3aa:	481e      	ldr	r0, [pc, #120]	; (800d424 <__pow5mult+0xb0>)
 800d3ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d3b0:	f000 fb88 	bl	800dac4 <__assert_func>
 800d3b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3b8:	6004      	str	r4, [r0, #0]
 800d3ba:	60c4      	str	r4, [r0, #12]
 800d3bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d3c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d3c4:	b94c      	cbnz	r4, 800d3da <__pow5mult+0x66>
 800d3c6:	f240 2171 	movw	r1, #625	; 0x271
 800d3ca:	4630      	mov	r0, r6
 800d3cc:	f7ff ff12 	bl	800d1f4 <__i2b>
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	6003      	str	r3, [r0, #0]
 800d3da:	f04f 0900 	mov.w	r9, #0
 800d3de:	07eb      	lsls	r3, r5, #31
 800d3e0:	d50a      	bpl.n	800d3f8 <__pow5mult+0x84>
 800d3e2:	4639      	mov	r1, r7
 800d3e4:	4622      	mov	r2, r4
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	f7ff ff1a 	bl	800d220 <__multiply>
 800d3ec:	4639      	mov	r1, r7
 800d3ee:	4680      	mov	r8, r0
 800d3f0:	4630      	mov	r0, r6
 800d3f2:	f7ff fe47 	bl	800d084 <_Bfree>
 800d3f6:	4647      	mov	r7, r8
 800d3f8:	106d      	asrs	r5, r5, #1
 800d3fa:	d00b      	beq.n	800d414 <__pow5mult+0xa0>
 800d3fc:	6820      	ldr	r0, [r4, #0]
 800d3fe:	b938      	cbnz	r0, 800d410 <__pow5mult+0x9c>
 800d400:	4622      	mov	r2, r4
 800d402:	4621      	mov	r1, r4
 800d404:	4630      	mov	r0, r6
 800d406:	f7ff ff0b 	bl	800d220 <__multiply>
 800d40a:	6020      	str	r0, [r4, #0]
 800d40c:	f8c0 9000 	str.w	r9, [r0]
 800d410:	4604      	mov	r4, r0
 800d412:	e7e4      	b.n	800d3de <__pow5mult+0x6a>
 800d414:	4638      	mov	r0, r7
 800d416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d41a:	bf00      	nop
 800d41c:	0800e8f8 	.word	0x0800e8f8
 800d420:	0800e71d 	.word	0x0800e71d
 800d424:	0800e7aa 	.word	0x0800e7aa

0800d428 <__lshift>:
 800d428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d42c:	460c      	mov	r4, r1
 800d42e:	6849      	ldr	r1, [r1, #4]
 800d430:	6923      	ldr	r3, [r4, #16]
 800d432:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d436:	68a3      	ldr	r3, [r4, #8]
 800d438:	4607      	mov	r7, r0
 800d43a:	4691      	mov	r9, r2
 800d43c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d440:	f108 0601 	add.w	r6, r8, #1
 800d444:	42b3      	cmp	r3, r6
 800d446:	db0b      	blt.n	800d460 <__lshift+0x38>
 800d448:	4638      	mov	r0, r7
 800d44a:	f7ff fddb 	bl	800d004 <_Balloc>
 800d44e:	4605      	mov	r5, r0
 800d450:	b948      	cbnz	r0, 800d466 <__lshift+0x3e>
 800d452:	4602      	mov	r2, r0
 800d454:	4b2a      	ldr	r3, [pc, #168]	; (800d500 <__lshift+0xd8>)
 800d456:	482b      	ldr	r0, [pc, #172]	; (800d504 <__lshift+0xdc>)
 800d458:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d45c:	f000 fb32 	bl	800dac4 <__assert_func>
 800d460:	3101      	adds	r1, #1
 800d462:	005b      	lsls	r3, r3, #1
 800d464:	e7ee      	b.n	800d444 <__lshift+0x1c>
 800d466:	2300      	movs	r3, #0
 800d468:	f100 0114 	add.w	r1, r0, #20
 800d46c:	f100 0210 	add.w	r2, r0, #16
 800d470:	4618      	mov	r0, r3
 800d472:	4553      	cmp	r3, sl
 800d474:	db37      	blt.n	800d4e6 <__lshift+0xbe>
 800d476:	6920      	ldr	r0, [r4, #16]
 800d478:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d47c:	f104 0314 	add.w	r3, r4, #20
 800d480:	f019 091f 	ands.w	r9, r9, #31
 800d484:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d488:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d48c:	d02f      	beq.n	800d4ee <__lshift+0xc6>
 800d48e:	f1c9 0e20 	rsb	lr, r9, #32
 800d492:	468a      	mov	sl, r1
 800d494:	f04f 0c00 	mov.w	ip, #0
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	fa02 f209 	lsl.w	r2, r2, r9
 800d49e:	ea42 020c 	orr.w	r2, r2, ip
 800d4a2:	f84a 2b04 	str.w	r2, [sl], #4
 800d4a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4aa:	4298      	cmp	r0, r3
 800d4ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d4b0:	d8f2      	bhi.n	800d498 <__lshift+0x70>
 800d4b2:	1b03      	subs	r3, r0, r4
 800d4b4:	3b15      	subs	r3, #21
 800d4b6:	f023 0303 	bic.w	r3, r3, #3
 800d4ba:	3304      	adds	r3, #4
 800d4bc:	f104 0215 	add.w	r2, r4, #21
 800d4c0:	4290      	cmp	r0, r2
 800d4c2:	bf38      	it	cc
 800d4c4:	2304      	movcc	r3, #4
 800d4c6:	f841 c003 	str.w	ip, [r1, r3]
 800d4ca:	f1bc 0f00 	cmp.w	ip, #0
 800d4ce:	d001      	beq.n	800d4d4 <__lshift+0xac>
 800d4d0:	f108 0602 	add.w	r6, r8, #2
 800d4d4:	3e01      	subs	r6, #1
 800d4d6:	4638      	mov	r0, r7
 800d4d8:	612e      	str	r6, [r5, #16]
 800d4da:	4621      	mov	r1, r4
 800d4dc:	f7ff fdd2 	bl	800d084 <_Bfree>
 800d4e0:	4628      	mov	r0, r5
 800d4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	e7c1      	b.n	800d472 <__lshift+0x4a>
 800d4ee:	3904      	subs	r1, #4
 800d4f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d4f8:	4298      	cmp	r0, r3
 800d4fa:	d8f9      	bhi.n	800d4f0 <__lshift+0xc8>
 800d4fc:	e7ea      	b.n	800d4d4 <__lshift+0xac>
 800d4fe:	bf00      	nop
 800d500:	0800e78f 	.word	0x0800e78f
 800d504:	0800e7aa 	.word	0x0800e7aa

0800d508 <__mcmp>:
 800d508:	b530      	push	{r4, r5, lr}
 800d50a:	6902      	ldr	r2, [r0, #16]
 800d50c:	690c      	ldr	r4, [r1, #16]
 800d50e:	1b12      	subs	r2, r2, r4
 800d510:	d10e      	bne.n	800d530 <__mcmp+0x28>
 800d512:	f100 0314 	add.w	r3, r0, #20
 800d516:	3114      	adds	r1, #20
 800d518:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d51c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d520:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d524:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d528:	42a5      	cmp	r5, r4
 800d52a:	d003      	beq.n	800d534 <__mcmp+0x2c>
 800d52c:	d305      	bcc.n	800d53a <__mcmp+0x32>
 800d52e:	2201      	movs	r2, #1
 800d530:	4610      	mov	r0, r2
 800d532:	bd30      	pop	{r4, r5, pc}
 800d534:	4283      	cmp	r3, r0
 800d536:	d3f3      	bcc.n	800d520 <__mcmp+0x18>
 800d538:	e7fa      	b.n	800d530 <__mcmp+0x28>
 800d53a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d53e:	e7f7      	b.n	800d530 <__mcmp+0x28>

0800d540 <__mdiff>:
 800d540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d544:	460c      	mov	r4, r1
 800d546:	4606      	mov	r6, r0
 800d548:	4611      	mov	r1, r2
 800d54a:	4620      	mov	r0, r4
 800d54c:	4690      	mov	r8, r2
 800d54e:	f7ff ffdb 	bl	800d508 <__mcmp>
 800d552:	1e05      	subs	r5, r0, #0
 800d554:	d110      	bne.n	800d578 <__mdiff+0x38>
 800d556:	4629      	mov	r1, r5
 800d558:	4630      	mov	r0, r6
 800d55a:	f7ff fd53 	bl	800d004 <_Balloc>
 800d55e:	b930      	cbnz	r0, 800d56e <__mdiff+0x2e>
 800d560:	4b3a      	ldr	r3, [pc, #232]	; (800d64c <__mdiff+0x10c>)
 800d562:	4602      	mov	r2, r0
 800d564:	f240 2132 	movw	r1, #562	; 0x232
 800d568:	4839      	ldr	r0, [pc, #228]	; (800d650 <__mdiff+0x110>)
 800d56a:	f000 faab 	bl	800dac4 <__assert_func>
 800d56e:	2301      	movs	r3, #1
 800d570:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d574:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d578:	bfa4      	itt	ge
 800d57a:	4643      	movge	r3, r8
 800d57c:	46a0      	movge	r8, r4
 800d57e:	4630      	mov	r0, r6
 800d580:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d584:	bfa6      	itte	ge
 800d586:	461c      	movge	r4, r3
 800d588:	2500      	movge	r5, #0
 800d58a:	2501      	movlt	r5, #1
 800d58c:	f7ff fd3a 	bl	800d004 <_Balloc>
 800d590:	b920      	cbnz	r0, 800d59c <__mdiff+0x5c>
 800d592:	4b2e      	ldr	r3, [pc, #184]	; (800d64c <__mdiff+0x10c>)
 800d594:	4602      	mov	r2, r0
 800d596:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d59a:	e7e5      	b.n	800d568 <__mdiff+0x28>
 800d59c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d5a0:	6926      	ldr	r6, [r4, #16]
 800d5a2:	60c5      	str	r5, [r0, #12]
 800d5a4:	f104 0914 	add.w	r9, r4, #20
 800d5a8:	f108 0514 	add.w	r5, r8, #20
 800d5ac:	f100 0e14 	add.w	lr, r0, #20
 800d5b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d5b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d5b8:	f108 0210 	add.w	r2, r8, #16
 800d5bc:	46f2      	mov	sl, lr
 800d5be:	2100      	movs	r1, #0
 800d5c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d5c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d5c8:	fa1f f883 	uxth.w	r8, r3
 800d5cc:	fa11 f18b 	uxtah	r1, r1, fp
 800d5d0:	0c1b      	lsrs	r3, r3, #16
 800d5d2:	eba1 0808 	sub.w	r8, r1, r8
 800d5d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d5da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d5de:	fa1f f888 	uxth.w	r8, r8
 800d5e2:	1419      	asrs	r1, r3, #16
 800d5e4:	454e      	cmp	r6, r9
 800d5e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d5ea:	f84a 3b04 	str.w	r3, [sl], #4
 800d5ee:	d8e7      	bhi.n	800d5c0 <__mdiff+0x80>
 800d5f0:	1b33      	subs	r3, r6, r4
 800d5f2:	3b15      	subs	r3, #21
 800d5f4:	f023 0303 	bic.w	r3, r3, #3
 800d5f8:	3304      	adds	r3, #4
 800d5fa:	3415      	adds	r4, #21
 800d5fc:	42a6      	cmp	r6, r4
 800d5fe:	bf38      	it	cc
 800d600:	2304      	movcc	r3, #4
 800d602:	441d      	add	r5, r3
 800d604:	4473      	add	r3, lr
 800d606:	469e      	mov	lr, r3
 800d608:	462e      	mov	r6, r5
 800d60a:	4566      	cmp	r6, ip
 800d60c:	d30e      	bcc.n	800d62c <__mdiff+0xec>
 800d60e:	f10c 0203 	add.w	r2, ip, #3
 800d612:	1b52      	subs	r2, r2, r5
 800d614:	f022 0203 	bic.w	r2, r2, #3
 800d618:	3d03      	subs	r5, #3
 800d61a:	45ac      	cmp	ip, r5
 800d61c:	bf38      	it	cc
 800d61e:	2200      	movcc	r2, #0
 800d620:	441a      	add	r2, r3
 800d622:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d626:	b17b      	cbz	r3, 800d648 <__mdiff+0x108>
 800d628:	6107      	str	r7, [r0, #16]
 800d62a:	e7a3      	b.n	800d574 <__mdiff+0x34>
 800d62c:	f856 8b04 	ldr.w	r8, [r6], #4
 800d630:	fa11 f288 	uxtah	r2, r1, r8
 800d634:	1414      	asrs	r4, r2, #16
 800d636:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d63a:	b292      	uxth	r2, r2
 800d63c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d640:	f84e 2b04 	str.w	r2, [lr], #4
 800d644:	1421      	asrs	r1, r4, #16
 800d646:	e7e0      	b.n	800d60a <__mdiff+0xca>
 800d648:	3f01      	subs	r7, #1
 800d64a:	e7ea      	b.n	800d622 <__mdiff+0xe2>
 800d64c:	0800e78f 	.word	0x0800e78f
 800d650:	0800e7aa 	.word	0x0800e7aa

0800d654 <__d2b>:
 800d654:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d658:	4689      	mov	r9, r1
 800d65a:	2101      	movs	r1, #1
 800d65c:	ec57 6b10 	vmov	r6, r7, d0
 800d660:	4690      	mov	r8, r2
 800d662:	f7ff fccf 	bl	800d004 <_Balloc>
 800d666:	4604      	mov	r4, r0
 800d668:	b930      	cbnz	r0, 800d678 <__d2b+0x24>
 800d66a:	4602      	mov	r2, r0
 800d66c:	4b25      	ldr	r3, [pc, #148]	; (800d704 <__d2b+0xb0>)
 800d66e:	4826      	ldr	r0, [pc, #152]	; (800d708 <__d2b+0xb4>)
 800d670:	f240 310a 	movw	r1, #778	; 0x30a
 800d674:	f000 fa26 	bl	800dac4 <__assert_func>
 800d678:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d67c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d680:	bb35      	cbnz	r5, 800d6d0 <__d2b+0x7c>
 800d682:	2e00      	cmp	r6, #0
 800d684:	9301      	str	r3, [sp, #4]
 800d686:	d028      	beq.n	800d6da <__d2b+0x86>
 800d688:	4668      	mov	r0, sp
 800d68a:	9600      	str	r6, [sp, #0]
 800d68c:	f7ff fd82 	bl	800d194 <__lo0bits>
 800d690:	9900      	ldr	r1, [sp, #0]
 800d692:	b300      	cbz	r0, 800d6d6 <__d2b+0x82>
 800d694:	9a01      	ldr	r2, [sp, #4]
 800d696:	f1c0 0320 	rsb	r3, r0, #32
 800d69a:	fa02 f303 	lsl.w	r3, r2, r3
 800d69e:	430b      	orrs	r3, r1
 800d6a0:	40c2      	lsrs	r2, r0
 800d6a2:	6163      	str	r3, [r4, #20]
 800d6a4:	9201      	str	r2, [sp, #4]
 800d6a6:	9b01      	ldr	r3, [sp, #4]
 800d6a8:	61a3      	str	r3, [r4, #24]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	bf14      	ite	ne
 800d6ae:	2202      	movne	r2, #2
 800d6b0:	2201      	moveq	r2, #1
 800d6b2:	6122      	str	r2, [r4, #16]
 800d6b4:	b1d5      	cbz	r5, 800d6ec <__d2b+0x98>
 800d6b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d6ba:	4405      	add	r5, r0
 800d6bc:	f8c9 5000 	str.w	r5, [r9]
 800d6c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d6c4:	f8c8 0000 	str.w	r0, [r8]
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	b003      	add	sp, #12
 800d6cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6d4:	e7d5      	b.n	800d682 <__d2b+0x2e>
 800d6d6:	6161      	str	r1, [r4, #20]
 800d6d8:	e7e5      	b.n	800d6a6 <__d2b+0x52>
 800d6da:	a801      	add	r0, sp, #4
 800d6dc:	f7ff fd5a 	bl	800d194 <__lo0bits>
 800d6e0:	9b01      	ldr	r3, [sp, #4]
 800d6e2:	6163      	str	r3, [r4, #20]
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	6122      	str	r2, [r4, #16]
 800d6e8:	3020      	adds	r0, #32
 800d6ea:	e7e3      	b.n	800d6b4 <__d2b+0x60>
 800d6ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d6f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d6f4:	f8c9 0000 	str.w	r0, [r9]
 800d6f8:	6918      	ldr	r0, [r3, #16]
 800d6fa:	f7ff fd2b 	bl	800d154 <__hi0bits>
 800d6fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d702:	e7df      	b.n	800d6c4 <__d2b+0x70>
 800d704:	0800e78f 	.word	0x0800e78f
 800d708:	0800e7aa 	.word	0x0800e7aa

0800d70c <_calloc_r>:
 800d70c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d70e:	fba1 2402 	umull	r2, r4, r1, r2
 800d712:	b94c      	cbnz	r4, 800d728 <_calloc_r+0x1c>
 800d714:	4611      	mov	r1, r2
 800d716:	9201      	str	r2, [sp, #4]
 800d718:	f7fd fd8a 	bl	800b230 <_malloc_r>
 800d71c:	9a01      	ldr	r2, [sp, #4]
 800d71e:	4605      	mov	r5, r0
 800d720:	b930      	cbnz	r0, 800d730 <_calloc_r+0x24>
 800d722:	4628      	mov	r0, r5
 800d724:	b003      	add	sp, #12
 800d726:	bd30      	pop	{r4, r5, pc}
 800d728:	220c      	movs	r2, #12
 800d72a:	6002      	str	r2, [r0, #0]
 800d72c:	2500      	movs	r5, #0
 800d72e:	e7f8      	b.n	800d722 <_calloc_r+0x16>
 800d730:	4621      	mov	r1, r4
 800d732:	f7fd fd54 	bl	800b1de <memset>
 800d736:	e7f4      	b.n	800d722 <_calloc_r+0x16>

0800d738 <_free_r>:
 800d738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d73a:	2900      	cmp	r1, #0
 800d73c:	d044      	beq.n	800d7c8 <_free_r+0x90>
 800d73e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d742:	9001      	str	r0, [sp, #4]
 800d744:	2b00      	cmp	r3, #0
 800d746:	f1a1 0404 	sub.w	r4, r1, #4
 800d74a:	bfb8      	it	lt
 800d74c:	18e4      	addlt	r4, r4, r3
 800d74e:	f7ff fc4d 	bl	800cfec <__malloc_lock>
 800d752:	4a1e      	ldr	r2, [pc, #120]	; (800d7cc <_free_r+0x94>)
 800d754:	9801      	ldr	r0, [sp, #4]
 800d756:	6813      	ldr	r3, [r2, #0]
 800d758:	b933      	cbnz	r3, 800d768 <_free_r+0x30>
 800d75a:	6063      	str	r3, [r4, #4]
 800d75c:	6014      	str	r4, [r2, #0]
 800d75e:	b003      	add	sp, #12
 800d760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d764:	f7ff bc48 	b.w	800cff8 <__malloc_unlock>
 800d768:	42a3      	cmp	r3, r4
 800d76a:	d908      	bls.n	800d77e <_free_r+0x46>
 800d76c:	6825      	ldr	r5, [r4, #0]
 800d76e:	1961      	adds	r1, r4, r5
 800d770:	428b      	cmp	r3, r1
 800d772:	bf01      	itttt	eq
 800d774:	6819      	ldreq	r1, [r3, #0]
 800d776:	685b      	ldreq	r3, [r3, #4]
 800d778:	1949      	addeq	r1, r1, r5
 800d77a:	6021      	streq	r1, [r4, #0]
 800d77c:	e7ed      	b.n	800d75a <_free_r+0x22>
 800d77e:	461a      	mov	r2, r3
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	b10b      	cbz	r3, 800d788 <_free_r+0x50>
 800d784:	42a3      	cmp	r3, r4
 800d786:	d9fa      	bls.n	800d77e <_free_r+0x46>
 800d788:	6811      	ldr	r1, [r2, #0]
 800d78a:	1855      	adds	r5, r2, r1
 800d78c:	42a5      	cmp	r5, r4
 800d78e:	d10b      	bne.n	800d7a8 <_free_r+0x70>
 800d790:	6824      	ldr	r4, [r4, #0]
 800d792:	4421      	add	r1, r4
 800d794:	1854      	adds	r4, r2, r1
 800d796:	42a3      	cmp	r3, r4
 800d798:	6011      	str	r1, [r2, #0]
 800d79a:	d1e0      	bne.n	800d75e <_free_r+0x26>
 800d79c:	681c      	ldr	r4, [r3, #0]
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	6053      	str	r3, [r2, #4]
 800d7a2:	4421      	add	r1, r4
 800d7a4:	6011      	str	r1, [r2, #0]
 800d7a6:	e7da      	b.n	800d75e <_free_r+0x26>
 800d7a8:	d902      	bls.n	800d7b0 <_free_r+0x78>
 800d7aa:	230c      	movs	r3, #12
 800d7ac:	6003      	str	r3, [r0, #0]
 800d7ae:	e7d6      	b.n	800d75e <_free_r+0x26>
 800d7b0:	6825      	ldr	r5, [r4, #0]
 800d7b2:	1961      	adds	r1, r4, r5
 800d7b4:	428b      	cmp	r3, r1
 800d7b6:	bf04      	itt	eq
 800d7b8:	6819      	ldreq	r1, [r3, #0]
 800d7ba:	685b      	ldreq	r3, [r3, #4]
 800d7bc:	6063      	str	r3, [r4, #4]
 800d7be:	bf04      	itt	eq
 800d7c0:	1949      	addeq	r1, r1, r5
 800d7c2:	6021      	streq	r1, [r4, #0]
 800d7c4:	6054      	str	r4, [r2, #4]
 800d7c6:	e7ca      	b.n	800d75e <_free_r+0x26>
 800d7c8:	b003      	add	sp, #12
 800d7ca:	bd30      	pop	{r4, r5, pc}
 800d7cc:	2000451c 	.word	0x2000451c

0800d7d0 <__sfputc_r>:
 800d7d0:	6893      	ldr	r3, [r2, #8]
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	b410      	push	{r4}
 800d7d8:	6093      	str	r3, [r2, #8]
 800d7da:	da08      	bge.n	800d7ee <__sfputc_r+0x1e>
 800d7dc:	6994      	ldr	r4, [r2, #24]
 800d7de:	42a3      	cmp	r3, r4
 800d7e0:	db01      	blt.n	800d7e6 <__sfputc_r+0x16>
 800d7e2:	290a      	cmp	r1, #10
 800d7e4:	d103      	bne.n	800d7ee <__sfputc_r+0x1e>
 800d7e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7ea:	f7fe bb4b 	b.w	800be84 <__swbuf_r>
 800d7ee:	6813      	ldr	r3, [r2, #0]
 800d7f0:	1c58      	adds	r0, r3, #1
 800d7f2:	6010      	str	r0, [r2, #0]
 800d7f4:	7019      	strb	r1, [r3, #0]
 800d7f6:	4608      	mov	r0, r1
 800d7f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7fc:	4770      	bx	lr

0800d7fe <__sfputs_r>:
 800d7fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d800:	4606      	mov	r6, r0
 800d802:	460f      	mov	r7, r1
 800d804:	4614      	mov	r4, r2
 800d806:	18d5      	adds	r5, r2, r3
 800d808:	42ac      	cmp	r4, r5
 800d80a:	d101      	bne.n	800d810 <__sfputs_r+0x12>
 800d80c:	2000      	movs	r0, #0
 800d80e:	e007      	b.n	800d820 <__sfputs_r+0x22>
 800d810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d814:	463a      	mov	r2, r7
 800d816:	4630      	mov	r0, r6
 800d818:	f7ff ffda 	bl	800d7d0 <__sfputc_r>
 800d81c:	1c43      	adds	r3, r0, #1
 800d81e:	d1f3      	bne.n	800d808 <__sfputs_r+0xa>
 800d820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d824 <_vfiprintf_r>:
 800d824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d828:	460d      	mov	r5, r1
 800d82a:	b09d      	sub	sp, #116	; 0x74
 800d82c:	4614      	mov	r4, r2
 800d82e:	4698      	mov	r8, r3
 800d830:	4606      	mov	r6, r0
 800d832:	b118      	cbz	r0, 800d83c <_vfiprintf_r+0x18>
 800d834:	6983      	ldr	r3, [r0, #24]
 800d836:	b90b      	cbnz	r3, 800d83c <_vfiprintf_r+0x18>
 800d838:	f7fd fbfe 	bl	800b038 <__sinit>
 800d83c:	4b89      	ldr	r3, [pc, #548]	; (800da64 <_vfiprintf_r+0x240>)
 800d83e:	429d      	cmp	r5, r3
 800d840:	d11b      	bne.n	800d87a <_vfiprintf_r+0x56>
 800d842:	6875      	ldr	r5, [r6, #4]
 800d844:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d846:	07d9      	lsls	r1, r3, #31
 800d848:	d405      	bmi.n	800d856 <_vfiprintf_r+0x32>
 800d84a:	89ab      	ldrh	r3, [r5, #12]
 800d84c:	059a      	lsls	r2, r3, #22
 800d84e:	d402      	bmi.n	800d856 <_vfiprintf_r+0x32>
 800d850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d852:	f7fd fcb4 	bl	800b1be <__retarget_lock_acquire_recursive>
 800d856:	89ab      	ldrh	r3, [r5, #12]
 800d858:	071b      	lsls	r3, r3, #28
 800d85a:	d501      	bpl.n	800d860 <_vfiprintf_r+0x3c>
 800d85c:	692b      	ldr	r3, [r5, #16]
 800d85e:	b9eb      	cbnz	r3, 800d89c <_vfiprintf_r+0x78>
 800d860:	4629      	mov	r1, r5
 800d862:	4630      	mov	r0, r6
 800d864:	f7fe fb72 	bl	800bf4c <__swsetup_r>
 800d868:	b1c0      	cbz	r0, 800d89c <_vfiprintf_r+0x78>
 800d86a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d86c:	07dc      	lsls	r4, r3, #31
 800d86e:	d50e      	bpl.n	800d88e <_vfiprintf_r+0x6a>
 800d870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d874:	b01d      	add	sp, #116	; 0x74
 800d876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d87a:	4b7b      	ldr	r3, [pc, #492]	; (800da68 <_vfiprintf_r+0x244>)
 800d87c:	429d      	cmp	r5, r3
 800d87e:	d101      	bne.n	800d884 <_vfiprintf_r+0x60>
 800d880:	68b5      	ldr	r5, [r6, #8]
 800d882:	e7df      	b.n	800d844 <_vfiprintf_r+0x20>
 800d884:	4b79      	ldr	r3, [pc, #484]	; (800da6c <_vfiprintf_r+0x248>)
 800d886:	429d      	cmp	r5, r3
 800d888:	bf08      	it	eq
 800d88a:	68f5      	ldreq	r5, [r6, #12]
 800d88c:	e7da      	b.n	800d844 <_vfiprintf_r+0x20>
 800d88e:	89ab      	ldrh	r3, [r5, #12]
 800d890:	0598      	lsls	r0, r3, #22
 800d892:	d4ed      	bmi.n	800d870 <_vfiprintf_r+0x4c>
 800d894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d896:	f7fd fc93 	bl	800b1c0 <__retarget_lock_release_recursive>
 800d89a:	e7e9      	b.n	800d870 <_vfiprintf_r+0x4c>
 800d89c:	2300      	movs	r3, #0
 800d89e:	9309      	str	r3, [sp, #36]	; 0x24
 800d8a0:	2320      	movs	r3, #32
 800d8a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d8a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8aa:	2330      	movs	r3, #48	; 0x30
 800d8ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800da70 <_vfiprintf_r+0x24c>
 800d8b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8b4:	f04f 0901 	mov.w	r9, #1
 800d8b8:	4623      	mov	r3, r4
 800d8ba:	469a      	mov	sl, r3
 800d8bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8c0:	b10a      	cbz	r2, 800d8c6 <_vfiprintf_r+0xa2>
 800d8c2:	2a25      	cmp	r2, #37	; 0x25
 800d8c4:	d1f9      	bne.n	800d8ba <_vfiprintf_r+0x96>
 800d8c6:	ebba 0b04 	subs.w	fp, sl, r4
 800d8ca:	d00b      	beq.n	800d8e4 <_vfiprintf_r+0xc0>
 800d8cc:	465b      	mov	r3, fp
 800d8ce:	4622      	mov	r2, r4
 800d8d0:	4629      	mov	r1, r5
 800d8d2:	4630      	mov	r0, r6
 800d8d4:	f7ff ff93 	bl	800d7fe <__sfputs_r>
 800d8d8:	3001      	adds	r0, #1
 800d8da:	f000 80aa 	beq.w	800da32 <_vfiprintf_r+0x20e>
 800d8de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8e0:	445a      	add	r2, fp
 800d8e2:	9209      	str	r2, [sp, #36]	; 0x24
 800d8e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	f000 80a2 	beq.w	800da32 <_vfiprintf_r+0x20e>
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d8f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8f8:	f10a 0a01 	add.w	sl, sl, #1
 800d8fc:	9304      	str	r3, [sp, #16]
 800d8fe:	9307      	str	r3, [sp, #28]
 800d900:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d904:	931a      	str	r3, [sp, #104]	; 0x68
 800d906:	4654      	mov	r4, sl
 800d908:	2205      	movs	r2, #5
 800d90a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d90e:	4858      	ldr	r0, [pc, #352]	; (800da70 <_vfiprintf_r+0x24c>)
 800d910:	f7f2 fc7e 	bl	8000210 <memchr>
 800d914:	9a04      	ldr	r2, [sp, #16]
 800d916:	b9d8      	cbnz	r0, 800d950 <_vfiprintf_r+0x12c>
 800d918:	06d1      	lsls	r1, r2, #27
 800d91a:	bf44      	itt	mi
 800d91c:	2320      	movmi	r3, #32
 800d91e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d922:	0713      	lsls	r3, r2, #28
 800d924:	bf44      	itt	mi
 800d926:	232b      	movmi	r3, #43	; 0x2b
 800d928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d92c:	f89a 3000 	ldrb.w	r3, [sl]
 800d930:	2b2a      	cmp	r3, #42	; 0x2a
 800d932:	d015      	beq.n	800d960 <_vfiprintf_r+0x13c>
 800d934:	9a07      	ldr	r2, [sp, #28]
 800d936:	4654      	mov	r4, sl
 800d938:	2000      	movs	r0, #0
 800d93a:	f04f 0c0a 	mov.w	ip, #10
 800d93e:	4621      	mov	r1, r4
 800d940:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d944:	3b30      	subs	r3, #48	; 0x30
 800d946:	2b09      	cmp	r3, #9
 800d948:	d94e      	bls.n	800d9e8 <_vfiprintf_r+0x1c4>
 800d94a:	b1b0      	cbz	r0, 800d97a <_vfiprintf_r+0x156>
 800d94c:	9207      	str	r2, [sp, #28]
 800d94e:	e014      	b.n	800d97a <_vfiprintf_r+0x156>
 800d950:	eba0 0308 	sub.w	r3, r0, r8
 800d954:	fa09 f303 	lsl.w	r3, r9, r3
 800d958:	4313      	orrs	r3, r2
 800d95a:	9304      	str	r3, [sp, #16]
 800d95c:	46a2      	mov	sl, r4
 800d95e:	e7d2      	b.n	800d906 <_vfiprintf_r+0xe2>
 800d960:	9b03      	ldr	r3, [sp, #12]
 800d962:	1d19      	adds	r1, r3, #4
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	9103      	str	r1, [sp, #12]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	bfbb      	ittet	lt
 800d96c:	425b      	neglt	r3, r3
 800d96e:	f042 0202 	orrlt.w	r2, r2, #2
 800d972:	9307      	strge	r3, [sp, #28]
 800d974:	9307      	strlt	r3, [sp, #28]
 800d976:	bfb8      	it	lt
 800d978:	9204      	strlt	r2, [sp, #16]
 800d97a:	7823      	ldrb	r3, [r4, #0]
 800d97c:	2b2e      	cmp	r3, #46	; 0x2e
 800d97e:	d10c      	bne.n	800d99a <_vfiprintf_r+0x176>
 800d980:	7863      	ldrb	r3, [r4, #1]
 800d982:	2b2a      	cmp	r3, #42	; 0x2a
 800d984:	d135      	bne.n	800d9f2 <_vfiprintf_r+0x1ce>
 800d986:	9b03      	ldr	r3, [sp, #12]
 800d988:	1d1a      	adds	r2, r3, #4
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	9203      	str	r2, [sp, #12]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	bfb8      	it	lt
 800d992:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d996:	3402      	adds	r4, #2
 800d998:	9305      	str	r3, [sp, #20]
 800d99a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800da80 <_vfiprintf_r+0x25c>
 800d99e:	7821      	ldrb	r1, [r4, #0]
 800d9a0:	2203      	movs	r2, #3
 800d9a2:	4650      	mov	r0, sl
 800d9a4:	f7f2 fc34 	bl	8000210 <memchr>
 800d9a8:	b140      	cbz	r0, 800d9bc <_vfiprintf_r+0x198>
 800d9aa:	2340      	movs	r3, #64	; 0x40
 800d9ac:	eba0 000a 	sub.w	r0, r0, sl
 800d9b0:	fa03 f000 	lsl.w	r0, r3, r0
 800d9b4:	9b04      	ldr	r3, [sp, #16]
 800d9b6:	4303      	orrs	r3, r0
 800d9b8:	3401      	adds	r4, #1
 800d9ba:	9304      	str	r3, [sp, #16]
 800d9bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9c0:	482c      	ldr	r0, [pc, #176]	; (800da74 <_vfiprintf_r+0x250>)
 800d9c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9c6:	2206      	movs	r2, #6
 800d9c8:	f7f2 fc22 	bl	8000210 <memchr>
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	d03f      	beq.n	800da50 <_vfiprintf_r+0x22c>
 800d9d0:	4b29      	ldr	r3, [pc, #164]	; (800da78 <_vfiprintf_r+0x254>)
 800d9d2:	bb1b      	cbnz	r3, 800da1c <_vfiprintf_r+0x1f8>
 800d9d4:	9b03      	ldr	r3, [sp, #12]
 800d9d6:	3307      	adds	r3, #7
 800d9d8:	f023 0307 	bic.w	r3, r3, #7
 800d9dc:	3308      	adds	r3, #8
 800d9de:	9303      	str	r3, [sp, #12]
 800d9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9e2:	443b      	add	r3, r7
 800d9e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d9e6:	e767      	b.n	800d8b8 <_vfiprintf_r+0x94>
 800d9e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9ec:	460c      	mov	r4, r1
 800d9ee:	2001      	movs	r0, #1
 800d9f0:	e7a5      	b.n	800d93e <_vfiprintf_r+0x11a>
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	3401      	adds	r4, #1
 800d9f6:	9305      	str	r3, [sp, #20]
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	f04f 0c0a 	mov.w	ip, #10
 800d9fe:	4620      	mov	r0, r4
 800da00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da04:	3a30      	subs	r2, #48	; 0x30
 800da06:	2a09      	cmp	r2, #9
 800da08:	d903      	bls.n	800da12 <_vfiprintf_r+0x1ee>
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d0c5      	beq.n	800d99a <_vfiprintf_r+0x176>
 800da0e:	9105      	str	r1, [sp, #20]
 800da10:	e7c3      	b.n	800d99a <_vfiprintf_r+0x176>
 800da12:	fb0c 2101 	mla	r1, ip, r1, r2
 800da16:	4604      	mov	r4, r0
 800da18:	2301      	movs	r3, #1
 800da1a:	e7f0      	b.n	800d9fe <_vfiprintf_r+0x1da>
 800da1c:	ab03      	add	r3, sp, #12
 800da1e:	9300      	str	r3, [sp, #0]
 800da20:	462a      	mov	r2, r5
 800da22:	4b16      	ldr	r3, [pc, #88]	; (800da7c <_vfiprintf_r+0x258>)
 800da24:	a904      	add	r1, sp, #16
 800da26:	4630      	mov	r0, r6
 800da28:	f7fd fd16 	bl	800b458 <_printf_float>
 800da2c:	4607      	mov	r7, r0
 800da2e:	1c78      	adds	r0, r7, #1
 800da30:	d1d6      	bne.n	800d9e0 <_vfiprintf_r+0x1bc>
 800da32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da34:	07d9      	lsls	r1, r3, #31
 800da36:	d405      	bmi.n	800da44 <_vfiprintf_r+0x220>
 800da38:	89ab      	ldrh	r3, [r5, #12]
 800da3a:	059a      	lsls	r2, r3, #22
 800da3c:	d402      	bmi.n	800da44 <_vfiprintf_r+0x220>
 800da3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da40:	f7fd fbbe 	bl	800b1c0 <__retarget_lock_release_recursive>
 800da44:	89ab      	ldrh	r3, [r5, #12]
 800da46:	065b      	lsls	r3, r3, #25
 800da48:	f53f af12 	bmi.w	800d870 <_vfiprintf_r+0x4c>
 800da4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da4e:	e711      	b.n	800d874 <_vfiprintf_r+0x50>
 800da50:	ab03      	add	r3, sp, #12
 800da52:	9300      	str	r3, [sp, #0]
 800da54:	462a      	mov	r2, r5
 800da56:	4b09      	ldr	r3, [pc, #36]	; (800da7c <_vfiprintf_r+0x258>)
 800da58:	a904      	add	r1, sp, #16
 800da5a:	4630      	mov	r0, r6
 800da5c:	f7fd ffa0 	bl	800b9a0 <_printf_i>
 800da60:	e7e4      	b.n	800da2c <_vfiprintf_r+0x208>
 800da62:	bf00      	nop
 800da64:	0800e698 	.word	0x0800e698
 800da68:	0800e6b8 	.word	0x0800e6b8
 800da6c:	0800e678 	.word	0x0800e678
 800da70:	0800e904 	.word	0x0800e904
 800da74:	0800e90e 	.word	0x0800e90e
 800da78:	0800b459 	.word	0x0800b459
 800da7c:	0800d7ff 	.word	0x0800d7ff
 800da80:	0800e90a 	.word	0x0800e90a

0800da84 <_read_r>:
 800da84:	b538      	push	{r3, r4, r5, lr}
 800da86:	4d07      	ldr	r5, [pc, #28]	; (800daa4 <_read_r+0x20>)
 800da88:	4604      	mov	r4, r0
 800da8a:	4608      	mov	r0, r1
 800da8c:	4611      	mov	r1, r2
 800da8e:	2200      	movs	r2, #0
 800da90:	602a      	str	r2, [r5, #0]
 800da92:	461a      	mov	r2, r3
 800da94:	f7f4 fc52 	bl	800233c <_read>
 800da98:	1c43      	adds	r3, r0, #1
 800da9a:	d102      	bne.n	800daa2 <_read_r+0x1e>
 800da9c:	682b      	ldr	r3, [r5, #0]
 800da9e:	b103      	cbz	r3, 800daa2 <_read_r+0x1e>
 800daa0:	6023      	str	r3, [r4, #0]
 800daa2:	bd38      	pop	{r3, r4, r5, pc}
 800daa4:	20004524 	.word	0x20004524

0800daa8 <__ascii_wctomb>:
 800daa8:	b149      	cbz	r1, 800dabe <__ascii_wctomb+0x16>
 800daaa:	2aff      	cmp	r2, #255	; 0xff
 800daac:	bf85      	ittet	hi
 800daae:	238a      	movhi	r3, #138	; 0x8a
 800dab0:	6003      	strhi	r3, [r0, #0]
 800dab2:	700a      	strbls	r2, [r1, #0]
 800dab4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800dab8:	bf98      	it	ls
 800daba:	2001      	movls	r0, #1
 800dabc:	4770      	bx	lr
 800dabe:	4608      	mov	r0, r1
 800dac0:	4770      	bx	lr
	...

0800dac4 <__assert_func>:
 800dac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dac6:	4614      	mov	r4, r2
 800dac8:	461a      	mov	r2, r3
 800daca:	4b09      	ldr	r3, [pc, #36]	; (800daf0 <__assert_func+0x2c>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4605      	mov	r5, r0
 800dad0:	68d8      	ldr	r0, [r3, #12]
 800dad2:	b14c      	cbz	r4, 800dae8 <__assert_func+0x24>
 800dad4:	4b07      	ldr	r3, [pc, #28]	; (800daf4 <__assert_func+0x30>)
 800dad6:	9100      	str	r1, [sp, #0]
 800dad8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dadc:	4906      	ldr	r1, [pc, #24]	; (800daf8 <__assert_func+0x34>)
 800dade:	462b      	mov	r3, r5
 800dae0:	f000 f80e 	bl	800db00 <fiprintf>
 800dae4:	f000 f840 	bl	800db68 <abort>
 800dae8:	4b04      	ldr	r3, [pc, #16]	; (800dafc <__assert_func+0x38>)
 800daea:	461c      	mov	r4, r3
 800daec:	e7f3      	b.n	800dad6 <__assert_func+0x12>
 800daee:	bf00      	nop
 800daf0:	20000014 	.word	0x20000014
 800daf4:	0800e915 	.word	0x0800e915
 800daf8:	0800e922 	.word	0x0800e922
 800dafc:	0800e950 	.word	0x0800e950

0800db00 <fiprintf>:
 800db00:	b40e      	push	{r1, r2, r3}
 800db02:	b503      	push	{r0, r1, lr}
 800db04:	4601      	mov	r1, r0
 800db06:	ab03      	add	r3, sp, #12
 800db08:	4805      	ldr	r0, [pc, #20]	; (800db20 <fiprintf+0x20>)
 800db0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800db0e:	6800      	ldr	r0, [r0, #0]
 800db10:	9301      	str	r3, [sp, #4]
 800db12:	f7ff fe87 	bl	800d824 <_vfiprintf_r>
 800db16:	b002      	add	sp, #8
 800db18:	f85d eb04 	ldr.w	lr, [sp], #4
 800db1c:	b003      	add	sp, #12
 800db1e:	4770      	bx	lr
 800db20:	20000014 	.word	0x20000014

0800db24 <_fstat_r>:
 800db24:	b538      	push	{r3, r4, r5, lr}
 800db26:	4d07      	ldr	r5, [pc, #28]	; (800db44 <_fstat_r+0x20>)
 800db28:	2300      	movs	r3, #0
 800db2a:	4604      	mov	r4, r0
 800db2c:	4608      	mov	r0, r1
 800db2e:	4611      	mov	r1, r2
 800db30:	602b      	str	r3, [r5, #0]
 800db32:	f7f4 fc48 	bl	80023c6 <_fstat>
 800db36:	1c43      	adds	r3, r0, #1
 800db38:	d102      	bne.n	800db40 <_fstat_r+0x1c>
 800db3a:	682b      	ldr	r3, [r5, #0]
 800db3c:	b103      	cbz	r3, 800db40 <_fstat_r+0x1c>
 800db3e:	6023      	str	r3, [r4, #0]
 800db40:	bd38      	pop	{r3, r4, r5, pc}
 800db42:	bf00      	nop
 800db44:	20004524 	.word	0x20004524

0800db48 <_isatty_r>:
 800db48:	b538      	push	{r3, r4, r5, lr}
 800db4a:	4d06      	ldr	r5, [pc, #24]	; (800db64 <_isatty_r+0x1c>)
 800db4c:	2300      	movs	r3, #0
 800db4e:	4604      	mov	r4, r0
 800db50:	4608      	mov	r0, r1
 800db52:	602b      	str	r3, [r5, #0]
 800db54:	f7f4 fc47 	bl	80023e6 <_isatty>
 800db58:	1c43      	adds	r3, r0, #1
 800db5a:	d102      	bne.n	800db62 <_isatty_r+0x1a>
 800db5c:	682b      	ldr	r3, [r5, #0]
 800db5e:	b103      	cbz	r3, 800db62 <_isatty_r+0x1a>
 800db60:	6023      	str	r3, [r4, #0]
 800db62:	bd38      	pop	{r3, r4, r5, pc}
 800db64:	20004524 	.word	0x20004524

0800db68 <abort>:
 800db68:	b508      	push	{r3, lr}
 800db6a:	2006      	movs	r0, #6
 800db6c:	f000 f82c 	bl	800dbc8 <raise>
 800db70:	2001      	movs	r0, #1
 800db72:	f7f4 fbd9 	bl	8002328 <_exit>

0800db76 <_raise_r>:
 800db76:	291f      	cmp	r1, #31
 800db78:	b538      	push	{r3, r4, r5, lr}
 800db7a:	4604      	mov	r4, r0
 800db7c:	460d      	mov	r5, r1
 800db7e:	d904      	bls.n	800db8a <_raise_r+0x14>
 800db80:	2316      	movs	r3, #22
 800db82:	6003      	str	r3, [r0, #0]
 800db84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db88:	bd38      	pop	{r3, r4, r5, pc}
 800db8a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800db8c:	b112      	cbz	r2, 800db94 <_raise_r+0x1e>
 800db8e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db92:	b94b      	cbnz	r3, 800dba8 <_raise_r+0x32>
 800db94:	4620      	mov	r0, r4
 800db96:	f000 f831 	bl	800dbfc <_getpid_r>
 800db9a:	462a      	mov	r2, r5
 800db9c:	4601      	mov	r1, r0
 800db9e:	4620      	mov	r0, r4
 800dba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dba4:	f000 b818 	b.w	800dbd8 <_kill_r>
 800dba8:	2b01      	cmp	r3, #1
 800dbaa:	d00a      	beq.n	800dbc2 <_raise_r+0x4c>
 800dbac:	1c59      	adds	r1, r3, #1
 800dbae:	d103      	bne.n	800dbb8 <_raise_r+0x42>
 800dbb0:	2316      	movs	r3, #22
 800dbb2:	6003      	str	r3, [r0, #0]
 800dbb4:	2001      	movs	r0, #1
 800dbb6:	e7e7      	b.n	800db88 <_raise_r+0x12>
 800dbb8:	2400      	movs	r4, #0
 800dbba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dbbe:	4628      	mov	r0, r5
 800dbc0:	4798      	blx	r3
 800dbc2:	2000      	movs	r0, #0
 800dbc4:	e7e0      	b.n	800db88 <_raise_r+0x12>
	...

0800dbc8 <raise>:
 800dbc8:	4b02      	ldr	r3, [pc, #8]	; (800dbd4 <raise+0xc>)
 800dbca:	4601      	mov	r1, r0
 800dbcc:	6818      	ldr	r0, [r3, #0]
 800dbce:	f7ff bfd2 	b.w	800db76 <_raise_r>
 800dbd2:	bf00      	nop
 800dbd4:	20000014 	.word	0x20000014

0800dbd8 <_kill_r>:
 800dbd8:	b538      	push	{r3, r4, r5, lr}
 800dbda:	4d07      	ldr	r5, [pc, #28]	; (800dbf8 <_kill_r+0x20>)
 800dbdc:	2300      	movs	r3, #0
 800dbde:	4604      	mov	r4, r0
 800dbe0:	4608      	mov	r0, r1
 800dbe2:	4611      	mov	r1, r2
 800dbe4:	602b      	str	r3, [r5, #0]
 800dbe6:	f7f4 fb8f 	bl	8002308 <_kill>
 800dbea:	1c43      	adds	r3, r0, #1
 800dbec:	d102      	bne.n	800dbf4 <_kill_r+0x1c>
 800dbee:	682b      	ldr	r3, [r5, #0]
 800dbf0:	b103      	cbz	r3, 800dbf4 <_kill_r+0x1c>
 800dbf2:	6023      	str	r3, [r4, #0]
 800dbf4:	bd38      	pop	{r3, r4, r5, pc}
 800dbf6:	bf00      	nop
 800dbf8:	20004524 	.word	0x20004524

0800dbfc <_getpid_r>:
 800dbfc:	f7f4 bb7c 	b.w	80022f8 <_getpid>

0800dc00 <atan>:
 800dc00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc04:	ec55 4b10 	vmov	r4, r5, d0
 800dc08:	4bc3      	ldr	r3, [pc, #780]	; (800df18 <atan+0x318>)
 800dc0a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dc0e:	429e      	cmp	r6, r3
 800dc10:	46ab      	mov	fp, r5
 800dc12:	dd18      	ble.n	800dc46 <atan+0x46>
 800dc14:	4bc1      	ldr	r3, [pc, #772]	; (800df1c <atan+0x31c>)
 800dc16:	429e      	cmp	r6, r3
 800dc18:	dc01      	bgt.n	800dc1e <atan+0x1e>
 800dc1a:	d109      	bne.n	800dc30 <atan+0x30>
 800dc1c:	b144      	cbz	r4, 800dc30 <atan+0x30>
 800dc1e:	4622      	mov	r2, r4
 800dc20:	462b      	mov	r3, r5
 800dc22:	4620      	mov	r0, r4
 800dc24:	4629      	mov	r1, r5
 800dc26:	f7f2 fb49 	bl	80002bc <__adddf3>
 800dc2a:	4604      	mov	r4, r0
 800dc2c:	460d      	mov	r5, r1
 800dc2e:	e006      	b.n	800dc3e <atan+0x3e>
 800dc30:	f1bb 0f00 	cmp.w	fp, #0
 800dc34:	f300 8131 	bgt.w	800de9a <atan+0x29a>
 800dc38:	a59b      	add	r5, pc, #620	; (adr r5, 800dea8 <atan+0x2a8>)
 800dc3a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dc3e:	ec45 4b10 	vmov	d0, r4, r5
 800dc42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc46:	4bb6      	ldr	r3, [pc, #728]	; (800df20 <atan+0x320>)
 800dc48:	429e      	cmp	r6, r3
 800dc4a:	dc14      	bgt.n	800dc76 <atan+0x76>
 800dc4c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800dc50:	429e      	cmp	r6, r3
 800dc52:	dc0d      	bgt.n	800dc70 <atan+0x70>
 800dc54:	a396      	add	r3, pc, #600	; (adr r3, 800deb0 <atan+0x2b0>)
 800dc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5a:	ee10 0a10 	vmov	r0, s0
 800dc5e:	4629      	mov	r1, r5
 800dc60:	f7f2 fb2c 	bl	80002bc <__adddf3>
 800dc64:	4baf      	ldr	r3, [pc, #700]	; (800df24 <atan+0x324>)
 800dc66:	2200      	movs	r2, #0
 800dc68:	f7f2 ff6e 	bl	8000b48 <__aeabi_dcmpgt>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	d1e6      	bne.n	800dc3e <atan+0x3e>
 800dc70:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800dc74:	e02b      	b.n	800dcce <atan+0xce>
 800dc76:	f000 f963 	bl	800df40 <fabs>
 800dc7a:	4bab      	ldr	r3, [pc, #684]	; (800df28 <atan+0x328>)
 800dc7c:	429e      	cmp	r6, r3
 800dc7e:	ec55 4b10 	vmov	r4, r5, d0
 800dc82:	f300 80bf 	bgt.w	800de04 <atan+0x204>
 800dc86:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800dc8a:	429e      	cmp	r6, r3
 800dc8c:	f300 80a0 	bgt.w	800ddd0 <atan+0x1d0>
 800dc90:	ee10 2a10 	vmov	r2, s0
 800dc94:	ee10 0a10 	vmov	r0, s0
 800dc98:	462b      	mov	r3, r5
 800dc9a:	4629      	mov	r1, r5
 800dc9c:	f7f2 fb0e 	bl	80002bc <__adddf3>
 800dca0:	4ba0      	ldr	r3, [pc, #640]	; (800df24 <atan+0x324>)
 800dca2:	2200      	movs	r2, #0
 800dca4:	f7f2 fb08 	bl	80002b8 <__aeabi_dsub>
 800dca8:	2200      	movs	r2, #0
 800dcaa:	4606      	mov	r6, r0
 800dcac:	460f      	mov	r7, r1
 800dcae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dcb2:	4620      	mov	r0, r4
 800dcb4:	4629      	mov	r1, r5
 800dcb6:	f7f2 fb01 	bl	80002bc <__adddf3>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	460b      	mov	r3, r1
 800dcbe:	4630      	mov	r0, r6
 800dcc0:	4639      	mov	r1, r7
 800dcc2:	f7f2 fddb 	bl	800087c <__aeabi_ddiv>
 800dcc6:	f04f 0a00 	mov.w	sl, #0
 800dcca:	4604      	mov	r4, r0
 800dccc:	460d      	mov	r5, r1
 800dcce:	4622      	mov	r2, r4
 800dcd0:	462b      	mov	r3, r5
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	4629      	mov	r1, r5
 800dcd6:	f7f2 fca7 	bl	8000628 <__aeabi_dmul>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	460b      	mov	r3, r1
 800dcde:	4680      	mov	r8, r0
 800dce0:	4689      	mov	r9, r1
 800dce2:	f7f2 fca1 	bl	8000628 <__aeabi_dmul>
 800dce6:	a374      	add	r3, pc, #464	; (adr r3, 800deb8 <atan+0x2b8>)
 800dce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcec:	4606      	mov	r6, r0
 800dcee:	460f      	mov	r7, r1
 800dcf0:	f7f2 fc9a 	bl	8000628 <__aeabi_dmul>
 800dcf4:	a372      	add	r3, pc, #456	; (adr r3, 800dec0 <atan+0x2c0>)
 800dcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfa:	f7f2 fadf 	bl	80002bc <__adddf3>
 800dcfe:	4632      	mov	r2, r6
 800dd00:	463b      	mov	r3, r7
 800dd02:	f7f2 fc91 	bl	8000628 <__aeabi_dmul>
 800dd06:	a370      	add	r3, pc, #448	; (adr r3, 800dec8 <atan+0x2c8>)
 800dd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd0c:	f7f2 fad6 	bl	80002bc <__adddf3>
 800dd10:	4632      	mov	r2, r6
 800dd12:	463b      	mov	r3, r7
 800dd14:	f7f2 fc88 	bl	8000628 <__aeabi_dmul>
 800dd18:	a36d      	add	r3, pc, #436	; (adr r3, 800ded0 <atan+0x2d0>)
 800dd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1e:	f7f2 facd 	bl	80002bc <__adddf3>
 800dd22:	4632      	mov	r2, r6
 800dd24:	463b      	mov	r3, r7
 800dd26:	f7f2 fc7f 	bl	8000628 <__aeabi_dmul>
 800dd2a:	a36b      	add	r3, pc, #428	; (adr r3, 800ded8 <atan+0x2d8>)
 800dd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd30:	f7f2 fac4 	bl	80002bc <__adddf3>
 800dd34:	4632      	mov	r2, r6
 800dd36:	463b      	mov	r3, r7
 800dd38:	f7f2 fc76 	bl	8000628 <__aeabi_dmul>
 800dd3c:	a368      	add	r3, pc, #416	; (adr r3, 800dee0 <atan+0x2e0>)
 800dd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd42:	f7f2 fabb 	bl	80002bc <__adddf3>
 800dd46:	4642      	mov	r2, r8
 800dd48:	464b      	mov	r3, r9
 800dd4a:	f7f2 fc6d 	bl	8000628 <__aeabi_dmul>
 800dd4e:	a366      	add	r3, pc, #408	; (adr r3, 800dee8 <atan+0x2e8>)
 800dd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd54:	4680      	mov	r8, r0
 800dd56:	4689      	mov	r9, r1
 800dd58:	4630      	mov	r0, r6
 800dd5a:	4639      	mov	r1, r7
 800dd5c:	f7f2 fc64 	bl	8000628 <__aeabi_dmul>
 800dd60:	a363      	add	r3, pc, #396	; (adr r3, 800def0 <atan+0x2f0>)
 800dd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd66:	f7f2 faa7 	bl	80002b8 <__aeabi_dsub>
 800dd6a:	4632      	mov	r2, r6
 800dd6c:	463b      	mov	r3, r7
 800dd6e:	f7f2 fc5b 	bl	8000628 <__aeabi_dmul>
 800dd72:	a361      	add	r3, pc, #388	; (adr r3, 800def8 <atan+0x2f8>)
 800dd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd78:	f7f2 fa9e 	bl	80002b8 <__aeabi_dsub>
 800dd7c:	4632      	mov	r2, r6
 800dd7e:	463b      	mov	r3, r7
 800dd80:	f7f2 fc52 	bl	8000628 <__aeabi_dmul>
 800dd84:	a35e      	add	r3, pc, #376	; (adr r3, 800df00 <atan+0x300>)
 800dd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8a:	f7f2 fa95 	bl	80002b8 <__aeabi_dsub>
 800dd8e:	4632      	mov	r2, r6
 800dd90:	463b      	mov	r3, r7
 800dd92:	f7f2 fc49 	bl	8000628 <__aeabi_dmul>
 800dd96:	a35c      	add	r3, pc, #368	; (adr r3, 800df08 <atan+0x308>)
 800dd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd9c:	f7f2 fa8c 	bl	80002b8 <__aeabi_dsub>
 800dda0:	4632      	mov	r2, r6
 800dda2:	463b      	mov	r3, r7
 800dda4:	f7f2 fc40 	bl	8000628 <__aeabi_dmul>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	460b      	mov	r3, r1
 800ddac:	4640      	mov	r0, r8
 800ddae:	4649      	mov	r1, r9
 800ddb0:	f7f2 fa84 	bl	80002bc <__adddf3>
 800ddb4:	4622      	mov	r2, r4
 800ddb6:	462b      	mov	r3, r5
 800ddb8:	f7f2 fc36 	bl	8000628 <__aeabi_dmul>
 800ddbc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	460b      	mov	r3, r1
 800ddc4:	d14b      	bne.n	800de5e <atan+0x25e>
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	4629      	mov	r1, r5
 800ddca:	f7f2 fa75 	bl	80002b8 <__aeabi_dsub>
 800ddce:	e72c      	b.n	800dc2a <atan+0x2a>
 800ddd0:	ee10 0a10 	vmov	r0, s0
 800ddd4:	4b53      	ldr	r3, [pc, #332]	; (800df24 <atan+0x324>)
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	4629      	mov	r1, r5
 800ddda:	f7f2 fa6d 	bl	80002b8 <__aeabi_dsub>
 800ddde:	4b51      	ldr	r3, [pc, #324]	; (800df24 <atan+0x324>)
 800dde0:	4606      	mov	r6, r0
 800dde2:	460f      	mov	r7, r1
 800dde4:	2200      	movs	r2, #0
 800dde6:	4620      	mov	r0, r4
 800dde8:	4629      	mov	r1, r5
 800ddea:	f7f2 fa67 	bl	80002bc <__adddf3>
 800ddee:	4602      	mov	r2, r0
 800ddf0:	460b      	mov	r3, r1
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	4639      	mov	r1, r7
 800ddf6:	f7f2 fd41 	bl	800087c <__aeabi_ddiv>
 800ddfa:	f04f 0a01 	mov.w	sl, #1
 800ddfe:	4604      	mov	r4, r0
 800de00:	460d      	mov	r5, r1
 800de02:	e764      	b.n	800dcce <atan+0xce>
 800de04:	4b49      	ldr	r3, [pc, #292]	; (800df2c <atan+0x32c>)
 800de06:	429e      	cmp	r6, r3
 800de08:	da1d      	bge.n	800de46 <atan+0x246>
 800de0a:	ee10 0a10 	vmov	r0, s0
 800de0e:	4b48      	ldr	r3, [pc, #288]	; (800df30 <atan+0x330>)
 800de10:	2200      	movs	r2, #0
 800de12:	4629      	mov	r1, r5
 800de14:	f7f2 fa50 	bl	80002b8 <__aeabi_dsub>
 800de18:	4b45      	ldr	r3, [pc, #276]	; (800df30 <atan+0x330>)
 800de1a:	4606      	mov	r6, r0
 800de1c:	460f      	mov	r7, r1
 800de1e:	2200      	movs	r2, #0
 800de20:	4620      	mov	r0, r4
 800de22:	4629      	mov	r1, r5
 800de24:	f7f2 fc00 	bl	8000628 <__aeabi_dmul>
 800de28:	4b3e      	ldr	r3, [pc, #248]	; (800df24 <atan+0x324>)
 800de2a:	2200      	movs	r2, #0
 800de2c:	f7f2 fa46 	bl	80002bc <__adddf3>
 800de30:	4602      	mov	r2, r0
 800de32:	460b      	mov	r3, r1
 800de34:	4630      	mov	r0, r6
 800de36:	4639      	mov	r1, r7
 800de38:	f7f2 fd20 	bl	800087c <__aeabi_ddiv>
 800de3c:	f04f 0a02 	mov.w	sl, #2
 800de40:	4604      	mov	r4, r0
 800de42:	460d      	mov	r5, r1
 800de44:	e743      	b.n	800dcce <atan+0xce>
 800de46:	462b      	mov	r3, r5
 800de48:	ee10 2a10 	vmov	r2, s0
 800de4c:	4939      	ldr	r1, [pc, #228]	; (800df34 <atan+0x334>)
 800de4e:	2000      	movs	r0, #0
 800de50:	f7f2 fd14 	bl	800087c <__aeabi_ddiv>
 800de54:	f04f 0a03 	mov.w	sl, #3
 800de58:	4604      	mov	r4, r0
 800de5a:	460d      	mov	r5, r1
 800de5c:	e737      	b.n	800dcce <atan+0xce>
 800de5e:	4b36      	ldr	r3, [pc, #216]	; (800df38 <atan+0x338>)
 800de60:	4e36      	ldr	r6, [pc, #216]	; (800df3c <atan+0x33c>)
 800de62:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800de66:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800de6a:	e9da 2300 	ldrd	r2, r3, [sl]
 800de6e:	f7f2 fa23 	bl	80002b8 <__aeabi_dsub>
 800de72:	4622      	mov	r2, r4
 800de74:	462b      	mov	r3, r5
 800de76:	f7f2 fa1f 	bl	80002b8 <__aeabi_dsub>
 800de7a:	4602      	mov	r2, r0
 800de7c:	460b      	mov	r3, r1
 800de7e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800de82:	f7f2 fa19 	bl	80002b8 <__aeabi_dsub>
 800de86:	f1bb 0f00 	cmp.w	fp, #0
 800de8a:	4604      	mov	r4, r0
 800de8c:	460d      	mov	r5, r1
 800de8e:	f6bf aed6 	bge.w	800dc3e <atan+0x3e>
 800de92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de96:	461d      	mov	r5, r3
 800de98:	e6d1      	b.n	800dc3e <atan+0x3e>
 800de9a:	a51d      	add	r5, pc, #116	; (adr r5, 800df10 <atan+0x310>)
 800de9c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dea0:	e6cd      	b.n	800dc3e <atan+0x3e>
 800dea2:	bf00      	nop
 800dea4:	f3af 8000 	nop.w
 800dea8:	54442d18 	.word	0x54442d18
 800deac:	bff921fb 	.word	0xbff921fb
 800deb0:	8800759c 	.word	0x8800759c
 800deb4:	7e37e43c 	.word	0x7e37e43c
 800deb8:	e322da11 	.word	0xe322da11
 800debc:	3f90ad3a 	.word	0x3f90ad3a
 800dec0:	24760deb 	.word	0x24760deb
 800dec4:	3fa97b4b 	.word	0x3fa97b4b
 800dec8:	a0d03d51 	.word	0xa0d03d51
 800decc:	3fb10d66 	.word	0x3fb10d66
 800ded0:	c54c206e 	.word	0xc54c206e
 800ded4:	3fb745cd 	.word	0x3fb745cd
 800ded8:	920083ff 	.word	0x920083ff
 800dedc:	3fc24924 	.word	0x3fc24924
 800dee0:	5555550d 	.word	0x5555550d
 800dee4:	3fd55555 	.word	0x3fd55555
 800dee8:	2c6a6c2f 	.word	0x2c6a6c2f
 800deec:	bfa2b444 	.word	0xbfa2b444
 800def0:	52defd9a 	.word	0x52defd9a
 800def4:	3fadde2d 	.word	0x3fadde2d
 800def8:	af749a6d 	.word	0xaf749a6d
 800defc:	3fb3b0f2 	.word	0x3fb3b0f2
 800df00:	fe231671 	.word	0xfe231671
 800df04:	3fbc71c6 	.word	0x3fbc71c6
 800df08:	9998ebc4 	.word	0x9998ebc4
 800df0c:	3fc99999 	.word	0x3fc99999
 800df10:	54442d18 	.word	0x54442d18
 800df14:	3ff921fb 	.word	0x3ff921fb
 800df18:	440fffff 	.word	0x440fffff
 800df1c:	7ff00000 	.word	0x7ff00000
 800df20:	3fdbffff 	.word	0x3fdbffff
 800df24:	3ff00000 	.word	0x3ff00000
 800df28:	3ff2ffff 	.word	0x3ff2ffff
 800df2c:	40038000 	.word	0x40038000
 800df30:	3ff80000 	.word	0x3ff80000
 800df34:	bff00000 	.word	0xbff00000
 800df38:	0800ea78 	.word	0x0800ea78
 800df3c:	0800ea58 	.word	0x0800ea58

0800df40 <fabs>:
 800df40:	ec51 0b10 	vmov	r0, r1, d0
 800df44:	ee10 2a10 	vmov	r2, s0
 800df48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df4c:	ec43 2b10 	vmov	d0, r2, r3
 800df50:	4770      	bx	lr

0800df52 <atan2>:
 800df52:	f000 b801 	b.w	800df58 <__ieee754_atan2>
	...

0800df58 <__ieee754_atan2>:
 800df58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df5c:	ec57 6b11 	vmov	r6, r7, d1
 800df60:	4273      	negs	r3, r6
 800df62:	f8df e184 	ldr.w	lr, [pc, #388]	; 800e0e8 <__ieee754_atan2+0x190>
 800df66:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800df6a:	4333      	orrs	r3, r6
 800df6c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800df70:	4573      	cmp	r3, lr
 800df72:	ec51 0b10 	vmov	r0, r1, d0
 800df76:	ee11 8a10 	vmov	r8, s2
 800df7a:	d80a      	bhi.n	800df92 <__ieee754_atan2+0x3a>
 800df7c:	4244      	negs	r4, r0
 800df7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df82:	4304      	orrs	r4, r0
 800df84:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800df88:	4574      	cmp	r4, lr
 800df8a:	ee10 9a10 	vmov	r9, s0
 800df8e:	468c      	mov	ip, r1
 800df90:	d907      	bls.n	800dfa2 <__ieee754_atan2+0x4a>
 800df92:	4632      	mov	r2, r6
 800df94:	463b      	mov	r3, r7
 800df96:	f7f2 f991 	bl	80002bc <__adddf3>
 800df9a:	ec41 0b10 	vmov	d0, r0, r1
 800df9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfa2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800dfa6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dfaa:	4334      	orrs	r4, r6
 800dfac:	d103      	bne.n	800dfb6 <__ieee754_atan2+0x5e>
 800dfae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfb2:	f7ff be25 	b.w	800dc00 <atan>
 800dfb6:	17bc      	asrs	r4, r7, #30
 800dfb8:	f004 0402 	and.w	r4, r4, #2
 800dfbc:	ea53 0909 	orrs.w	r9, r3, r9
 800dfc0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800dfc4:	d107      	bne.n	800dfd6 <__ieee754_atan2+0x7e>
 800dfc6:	2c02      	cmp	r4, #2
 800dfc8:	d060      	beq.n	800e08c <__ieee754_atan2+0x134>
 800dfca:	2c03      	cmp	r4, #3
 800dfcc:	d1e5      	bne.n	800df9a <__ieee754_atan2+0x42>
 800dfce:	a142      	add	r1, pc, #264	; (adr r1, 800e0d8 <__ieee754_atan2+0x180>)
 800dfd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfd4:	e7e1      	b.n	800df9a <__ieee754_atan2+0x42>
 800dfd6:	ea52 0808 	orrs.w	r8, r2, r8
 800dfda:	d106      	bne.n	800dfea <__ieee754_atan2+0x92>
 800dfdc:	f1bc 0f00 	cmp.w	ip, #0
 800dfe0:	da5f      	bge.n	800e0a2 <__ieee754_atan2+0x14a>
 800dfe2:	a13f      	add	r1, pc, #252	; (adr r1, 800e0e0 <__ieee754_atan2+0x188>)
 800dfe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfe8:	e7d7      	b.n	800df9a <__ieee754_atan2+0x42>
 800dfea:	4572      	cmp	r2, lr
 800dfec:	d10f      	bne.n	800e00e <__ieee754_atan2+0xb6>
 800dfee:	4293      	cmp	r3, r2
 800dff0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800dff4:	d107      	bne.n	800e006 <__ieee754_atan2+0xae>
 800dff6:	2c02      	cmp	r4, #2
 800dff8:	d84c      	bhi.n	800e094 <__ieee754_atan2+0x13c>
 800dffa:	4b35      	ldr	r3, [pc, #212]	; (800e0d0 <__ieee754_atan2+0x178>)
 800dffc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e000:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e004:	e7c9      	b.n	800df9a <__ieee754_atan2+0x42>
 800e006:	2c02      	cmp	r4, #2
 800e008:	d848      	bhi.n	800e09c <__ieee754_atan2+0x144>
 800e00a:	4b32      	ldr	r3, [pc, #200]	; (800e0d4 <__ieee754_atan2+0x17c>)
 800e00c:	e7f6      	b.n	800dffc <__ieee754_atan2+0xa4>
 800e00e:	4573      	cmp	r3, lr
 800e010:	d0e4      	beq.n	800dfdc <__ieee754_atan2+0x84>
 800e012:	1a9b      	subs	r3, r3, r2
 800e014:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e018:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e01c:	da1e      	bge.n	800e05c <__ieee754_atan2+0x104>
 800e01e:	2f00      	cmp	r7, #0
 800e020:	da01      	bge.n	800e026 <__ieee754_atan2+0xce>
 800e022:	323c      	adds	r2, #60	; 0x3c
 800e024:	db1e      	blt.n	800e064 <__ieee754_atan2+0x10c>
 800e026:	4632      	mov	r2, r6
 800e028:	463b      	mov	r3, r7
 800e02a:	f7f2 fc27 	bl	800087c <__aeabi_ddiv>
 800e02e:	ec41 0b10 	vmov	d0, r0, r1
 800e032:	f7ff ff85 	bl	800df40 <fabs>
 800e036:	f7ff fde3 	bl	800dc00 <atan>
 800e03a:	ec51 0b10 	vmov	r0, r1, d0
 800e03e:	2c01      	cmp	r4, #1
 800e040:	d013      	beq.n	800e06a <__ieee754_atan2+0x112>
 800e042:	2c02      	cmp	r4, #2
 800e044:	d015      	beq.n	800e072 <__ieee754_atan2+0x11a>
 800e046:	2c00      	cmp	r4, #0
 800e048:	d0a7      	beq.n	800df9a <__ieee754_atan2+0x42>
 800e04a:	a319      	add	r3, pc, #100	; (adr r3, 800e0b0 <__ieee754_atan2+0x158>)
 800e04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e050:	f7f2 f932 	bl	80002b8 <__aeabi_dsub>
 800e054:	a318      	add	r3, pc, #96	; (adr r3, 800e0b8 <__ieee754_atan2+0x160>)
 800e056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05a:	e014      	b.n	800e086 <__ieee754_atan2+0x12e>
 800e05c:	a118      	add	r1, pc, #96	; (adr r1, 800e0c0 <__ieee754_atan2+0x168>)
 800e05e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e062:	e7ec      	b.n	800e03e <__ieee754_atan2+0xe6>
 800e064:	2000      	movs	r0, #0
 800e066:	2100      	movs	r1, #0
 800e068:	e7e9      	b.n	800e03e <__ieee754_atan2+0xe6>
 800e06a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e06e:	4619      	mov	r1, r3
 800e070:	e793      	b.n	800df9a <__ieee754_atan2+0x42>
 800e072:	a30f      	add	r3, pc, #60	; (adr r3, 800e0b0 <__ieee754_atan2+0x158>)
 800e074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e078:	f7f2 f91e 	bl	80002b8 <__aeabi_dsub>
 800e07c:	4602      	mov	r2, r0
 800e07e:	460b      	mov	r3, r1
 800e080:	a10d      	add	r1, pc, #52	; (adr r1, 800e0b8 <__ieee754_atan2+0x160>)
 800e082:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e086:	f7f2 f917 	bl	80002b8 <__aeabi_dsub>
 800e08a:	e786      	b.n	800df9a <__ieee754_atan2+0x42>
 800e08c:	a10a      	add	r1, pc, #40	; (adr r1, 800e0b8 <__ieee754_atan2+0x160>)
 800e08e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e092:	e782      	b.n	800df9a <__ieee754_atan2+0x42>
 800e094:	a10c      	add	r1, pc, #48	; (adr r1, 800e0c8 <__ieee754_atan2+0x170>)
 800e096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e09a:	e77e      	b.n	800df9a <__ieee754_atan2+0x42>
 800e09c:	2000      	movs	r0, #0
 800e09e:	2100      	movs	r1, #0
 800e0a0:	e77b      	b.n	800df9a <__ieee754_atan2+0x42>
 800e0a2:	a107      	add	r1, pc, #28	; (adr r1, 800e0c0 <__ieee754_atan2+0x168>)
 800e0a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0a8:	e777      	b.n	800df9a <__ieee754_atan2+0x42>
 800e0aa:	bf00      	nop
 800e0ac:	f3af 8000 	nop.w
 800e0b0:	33145c07 	.word	0x33145c07
 800e0b4:	3ca1a626 	.word	0x3ca1a626
 800e0b8:	54442d18 	.word	0x54442d18
 800e0bc:	400921fb 	.word	0x400921fb
 800e0c0:	54442d18 	.word	0x54442d18
 800e0c4:	3ff921fb 	.word	0x3ff921fb
 800e0c8:	54442d18 	.word	0x54442d18
 800e0cc:	3fe921fb 	.word	0x3fe921fb
 800e0d0:	0800ea98 	.word	0x0800ea98
 800e0d4:	0800eab0 	.word	0x0800eab0
 800e0d8:	54442d18 	.word	0x54442d18
 800e0dc:	c00921fb 	.word	0xc00921fb
 800e0e0:	54442d18 	.word	0x54442d18
 800e0e4:	bff921fb 	.word	0xbff921fb
 800e0e8:	7ff00000 	.word	0x7ff00000

0800e0ec <_init>:
 800e0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ee:	bf00      	nop
 800e0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0f2:	bc08      	pop	{r3}
 800e0f4:	469e      	mov	lr, r3
 800e0f6:	4770      	bx	lr

0800e0f8 <_fini>:
 800e0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0fa:	bf00      	nop
 800e0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0fe:	bc08      	pop	{r3}
 800e100:	469e      	mov	lr, r3
 800e102:	4770      	bx	lr
