
Cansat_final_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec24  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c0  0800edc8  0800edc8  0001edc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f788  0800f788  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f788  0800f788  0001f788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f790  0800f790  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f790  0800f790  0001f790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f794  0800f794  0001f794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004724  200001e8  0800f97c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000490c  0800f97c  0002490c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d4e6  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000434a  00000000  00000000  0003d6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  00041a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a8  00000000  00000000  000430b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be7a  00000000  00000000  00044558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e2d0  00000000  00000000  000603d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c73c  00000000  00000000  0007e6a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011adde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000709c  00000000  00000000  0011ae30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800edac 	.word	0x0800edac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800edac 	.word	0x0800edac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <Task_lancement_Cansat>:
extern TaskHandle_t pxeCompass;
/****************************/



void Task_lancement_Cansat(){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af02      	add	r7, sp, #8

	for(;;){

		xTaskCreate(Task_Mesure_M, "mesure champ magnetique", 500, NULL, osPriorityHigh, &pxMesure_M);
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <Task_lancement_Cansat+0x3c>)
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	2302      	movs	r3, #2
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2300      	movs	r3, #0
 8001018:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800101c:	490a      	ldr	r1, [pc, #40]	; (8001048 <Task_lancement_Cansat+0x40>)
 800101e:	480b      	ldr	r0, [pc, #44]	; (800104c <Task_lancement_Cansat+0x44>)
 8001020:	f008 f906 	bl	8009230 <xTaskCreate>
		//xTaskCreate(Task_Mesure_AetG, "mesure acceleration lineaire et angulaire", 500, NULL, osPriorityAboveNormal, pxCreatedTask);
		xTaskCreate(Task_eCompass, "eCompass", 500, NULL, osPriorityAboveNormal, &pxeCompass);
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <Task_lancement_Cansat+0x48>)
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	2301      	movs	r3, #1
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2300      	movs	r3, #0
 800102e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001032:	4908      	ldr	r1, [pc, #32]	; (8001054 <Task_lancement_Cansat+0x4c>)
 8001034:	4808      	ldr	r0, [pc, #32]	; (8001058 <Task_lancement_Cansat+0x50>)
 8001036:	f008 f8fb 	bl	8009230 <xTaskCreate>

		vTaskDelete(NULL);
 800103a:	2000      	movs	r0, #0
 800103c:	f008 fa46 	bl	80094cc <vTaskDelete>
		xTaskCreate(Task_Mesure_M, "mesure champ magnetique", 500, NULL, osPriorityHigh, &pxMesure_M);
 8001040:	e7e5      	b.n	800100e <Task_lancement_Cansat+0x6>
 8001042:	bf00      	nop
 8001044:	20000210 	.word	0x20000210
 8001048:	0800edc8 	.word	0x0800edc8
 800104c:	0800105d 	.word	0x0800105d
 8001050:	20000214 	.word	0x20000214
 8001054:	0800ede0 	.word	0x0800ede0
 8001058:	08001135 	.word	0x08001135

0800105c <Task_Mesure_M>:
	}
}


void Task_Mesure_M(){
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200;
 8001062:	23c8      	movs	r3, #200	; 0xc8
 8001064:	607b      	str	r3, [r7, #4]

  //Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8001066:	f008 fc87 	bl	8009978 <xTaskGetTickCount>
 800106a:	4603      	mov	r3, r0
 800106c:	603b      	str	r3, [r7, #0]

	for(;;){

		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800106e:	463b      	mov	r3, r7
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	4618      	mov	r0, r3
 8001074:	f008 faba 	bl	80095ec <vTaskDelayUntil>
		printf("mesure champ magnetique \r\n");
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <Task_Mesure_M+0x30>)
 800107a:	f00a f9a1 	bl	800b3c0 <puts>
		Measure_M(&hi2c1, pDataCansat.IMU.MagnetometerData.mag_raw, pDataCansat.IMU.MagnetometerData.offset, pDataCansat.IMU.MagnetometerData.coeff);
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <Task_Mesure_M+0x34>)
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <Task_Mesure_M+0x38>)
 8001082:	4905      	ldr	r1, [pc, #20]	; (8001098 <Task_Mesure_M+0x3c>)
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <Task_Mesure_M+0x40>)
 8001086:	f000 f9a3 	bl	80013d0 <Measure_M>
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800108a:	e7f0      	b.n	800106e <Task_Mesure_M+0x12>
 800108c:	0800edec 	.word	0x0800edec
 8001090:	200009f8 	.word	0x200009f8
 8001094:	200009e0 	.word	0x200009e0
 8001098:	200009c8 	.word	0x200009c8
 800109c:	20000914 	.word	0x20000914

080010a0 <Task_GPS_data_reading>:
}

/* On démarre cette tâche dès la mise sous tension du Cansat car le GPS met un peu de temps à se lancer
 * Par la suite, elle tourne en tâche de fond toutes les secondes.
 */
void Task_GPS_data_reading(){
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	b0b4      	sub	sp, #208	; 0xd0
 80010a4:	af30      	add	r7, sp, #192	; 0xc0

	int i = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
	int gps_data_ready_flag = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_gps_rx, 1);
 80010ae:	2201      	movs	r2, #1
 80010b0:	491b      	ldr	r1, [pc, #108]	; (8001120 <Task_GPS_data_reading+0x80>)
 80010b2:	481c      	ldr	r0, [pc, #112]	; (8001124 <Task_GPS_data_reading+0x84>)
 80010b4:	f006 ff89 	bl	8007fca <HAL_UART_Receive_IT>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 20;
 80010b8:	2314      	movs	r3, #20
 80010ba:	607b      	str	r3, [r7, #4]

  //Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80010bc:	f008 fc5c 	bl	8009978 <xTaskGetTickCount>
 80010c0:	4603      	mov	r3, r0
 80010c2:	603b      	str	r3, [r7, #0]

	for(;;){

		//ulTaskNotifyTake(pdTRUE, 500);

		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 80010c4:	463b      	mov	r3, r7
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f008 fa8f 	bl	80095ec <vTaskDelayUntil>

		GPS_data_reading(pDataCansat, i, gps_data_ready_flag);
 80010ce:	4c16      	ldr	r4, [pc, #88]	; (8001128 <Task_GPS_data_reading+0x88>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	932f      	str	r3, [sp, #188]	; 0xbc
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	932e      	str	r3, [sp, #184]	; 0xb8
 80010d8:	4668      	mov	r0, sp
 80010da:	f104 0310 	add.w	r3, r4, #16
 80010de:	22b8      	movs	r2, #184	; 0xb8
 80010e0:	4619      	mov	r1, r3
 80010e2:	f009 fbd2 	bl	800a88a <memcpy>
 80010e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010ea:	f000 fc57 	bl	800199c <GPS_data_reading>

		if(gps_data_ready_flag){
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0e7      	beq.n	80010c4 <Task_GPS_data_reading+0x24>
			printf("GPS read ***************** \r\n");
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <Task_GPS_data_reading+0x8c>)
 80010f6:	f00a f963 	bl	800b3c0 <puts>
			printf("latitude : %lf N, longitude : %lf E, altitude : %lf m \r\n", pDataCansat.GPS.latitude_Cansat, pDataCansat.GPS.longitude_Cansat, pDataCansat.GPS.altitude_Cansat);
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <Task_GPS_data_reading+0x88>)
 80010fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <Task_GPS_data_reading+0x88>)
 8001102:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001106:	4908      	ldr	r1, [pc, #32]	; (8001128 <Task_GPS_data_reading+0x88>)
 8001108:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800110c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001110:	e9cd 2300 	strd	r2, r3, [sp]
 8001114:	4622      	mov	r2, r4
 8001116:	462b      	mov	r3, r5
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <Task_GPS_data_reading+0x90>)
 800111a:	f00a f8cb 	bl	800b2b4 <iprintf>
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800111e:	e7d1      	b.n	80010c4 <Task_GPS_data_reading+0x24>
 8001120:	20000a34 	.word	0x20000a34
 8001124:	20000b1c 	.word	0x20000b1c
 8001128:	20000968 	.word	0x20000968
 800112c:	0800ee08 	.word	0x0800ee08
 8001130:	0800ee28 	.word	0x0800ee28

08001134 <Task_eCompass>:
	}
}



void Task_eCompass(){
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b0b5      	sub	sp, #212	; 0xd4
 8001138:	af2e      	add	r7, sp, #184	; 0xb8

	float Cansat_theta = 0;
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
	double Delta_theta = 0;
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 2302 	strd	r2, r3, [r7, #8]

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000;
 800114c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001150:	607b      	str	r3, [r7, #4]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8001152:	f008 fc11 	bl	8009978 <xTaskGetTickCount>
 8001156:	4603      	mov	r3, r0
 8001158:	603b      	str	r3, [r7, #0]

	for(;;){

		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800115a:	463b      	mov	r3, r7
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4618      	mov	r0, r3
 8001160:	f008 fa44 	bl	80095ec <vTaskDelayUntil>
		// ---> Messure accéléro
		// ---> calcul

		//3. Conversion du champ magnétique en degré

		Cansat_theta = magnetic_field_to_degree(pDataCansat.IMU.MagnetometerData.mag_raw);
 8001164:	4814      	ldr	r0, [pc, #80]	; (80011b8 <Task_eCompass+0x84>)
 8001166:	f000 fa7b 	bl	8001660 <magnetic_field_to_degree>
 800116a:	ed87 0a05 	vstr	s0, [r7, #20]
		pDataCansat.IMU.MagnetometerData.degree_angle = Cansat_theta;
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff f9f2 	bl	8000558 <__aeabi_f2d>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4910      	ldr	r1, [pc, #64]	; (80011bc <Task_eCompass+0x88>)
 800117a:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0

		printf("Cansat theta computed * * * * * * * * * \r\n");
 800117e:	4810      	ldr	r0, [pc, #64]	; (80011c0 <Task_eCompass+0x8c>)
 8001180:	f00a f91e 	bl	800b3c0 <puts>

		//4. Calcul du Delta theta

		Delta_theta = Delta_theta_calculation(pDataCansat);
 8001184:	4c0d      	ldr	r4, [pc, #52]	; (80011bc <Task_eCompass+0x88>)
 8001186:	4668      	mov	r0, sp
 8001188:	f104 0310 	add.w	r3, r4, #16
 800118c:	22b8      	movs	r2, #184	; 0xb8
 800118e:	4619      	mov	r1, r3
 8001190:	f009 fb7b 	bl	800a88a <memcpy>
 8001194:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001198:	f000 fac4 	bl	8001724 <Delta_theta_calculation>
 800119c:	ed87 0b02 	vstr	d0, [r7, #8]

		printf("Delta theta computed * * * * * * * * * * \r\n");
 80011a0:	4808      	ldr	r0, [pc, #32]	; (80011c4 <Task_eCompass+0x90>)
 80011a2:	f00a f90d 	bl	800b3c0 <puts>

		//5. Rotation des servos en conséquence

		choice_direction_intensity(Delta_theta);
 80011a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011aa:	f7ff fd05 	bl	8000bb8 <__aeabi_d2uiz>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 f857 	bl	8002264 <choice_direction_intensity>
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 80011b6:	e7d0      	b.n	800115a <Task_eCompass+0x26>
 80011b8:	200009c8 	.word	0x200009c8
 80011bc:	20000968 	.word	0x20000968
 80011c0:	0800ee64 	.word	0x0800ee64
 80011c4:	0800ee90 	.word	0x0800ee90

080011c8 <Init>:
	 * et elle configure ce dernier pour qu'il réalise des mesures en continu.
	 * @param p_hi2c1 Pointeur vers une structure I2C qui contient l'information de configuration pour un i2c particulier
	 * @retval None
	 */
void Init(I2C_HandleTypeDef* p_hi2c1)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af04      	add	r7, sp, #16
 80011ce:	6078      	str	r0, [r7, #4]

	uint8_t buff[6];
	buff[0] = 0x80;
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD,  PWR_MGMT_1,  1, &buff[0], 1, 10);
 80011d4:	230a      	movs	r3, #10
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	2301      	movs	r3, #1
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	226b      	movs	r2, #107	; 0x6b
 80011e6:	21d0      	movs	r1, #208	; 0xd0
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f002 fd0f 	bl	8003c0c <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80011ee:	2064      	movs	r0, #100	; 0x64
 80011f0:	f001 fd24 	bl	8002c3c <HAL_Delay>
	buff[0] = 0x1;
 80011f4:	2301      	movs	r3, #1
 80011f6:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD, PWR_MGMT_1,  1, &buff[0], 1, 10);
 80011f8:	230a      	movs	r3, #10
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	2301      	movs	r3, #1
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2301      	movs	r3, #1
 8001208:	226b      	movs	r2, #107	; 0x6b
 800120a:	21d0      	movs	r1, #208	; 0xd0
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f002 fcfd 	bl	8003c0c <HAL_I2C_Mem_Write>


	/********* changement de la sensibilité de l'accélérometre  00=2g 01=4g 10=8g 11=16g *********/
	HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD,  ACCEL_CONFIG,  1, &buff[0], 1, 10);
 8001212:	230a      	movs	r3, #10
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	2301      	movs	r3, #1
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	221c      	movs	r2, #28
 8001224:	21d0      	movs	r1, #208	; 0xd0
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f002 fdea 	bl	8003e00 <HAL_I2C_Mem_Read>

	//Pour mettre 00
	buff[0] =(buff[0] & (0b11100111)) ;
 800122c:	7a3b      	ldrb	r3, [r7, #8]
 800122e:	f023 0318 	bic.w	r3, r3, #24
 8001232:	b2db      	uxtb	r3, r3
 8001234:	723b      	strb	r3, [r7, #8]
	//buff[0] =(buff[0] & (0b11110111)) ;
	//buff[0] =(buff[0] | (0b00010000)) ;
	//Pour mettre 11
	//buff[0] =(buff[0] | (0b00011000)) ;

	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD,  ACCEL_CONFIG,  1, &buff[0], 1, 10);
 8001236:	230a      	movs	r3, #10
 8001238:	9302      	str	r3, [sp, #8]
 800123a:	2301      	movs	r3, #1
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2301      	movs	r3, #1
 8001246:	221c      	movs	r2, #28
 8001248:	21d0      	movs	r1, #208	; 0xd0
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f002 fcde 	bl	8003c0c <HAL_I2C_Mem_Write>


	buff[0]=0x2; // Bypass pour activer le magnétomètre
 8001250:	2302      	movs	r3, #2
 8001252:	723b      	strb	r3, [r7, #8]
		  if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,INT_PIN_CFG,1,&buff[0],1,10)!=HAL_OK){
 8001254:	230a      	movs	r3, #10
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	2301      	movs	r3, #1
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	2237      	movs	r2, #55	; 0x37
 8001266:	21d0      	movs	r1, #208	; 0xd0
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f002 fccf 	bl	8003c0c <HAL_I2C_Mem_Write>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d004      	beq.n	800127e <Init+0xb6>
			  printf("probleme activation magnetometre --> fct Init \r\n");
 8001274:	4851      	ldr	r0, [pc, #324]	; (80013bc <Init+0x1f4>)
 8001276:	f00a f8a3 	bl	800b3c0 <puts>
		  	  Error_Handler();
 800127a:	f000 ff4b 	bl	8002114 <Error_Handler>
		  }
	buff[0]=0x16; // configuration mesure en continu du magnétomètre
 800127e:	2316      	movs	r3, #22
 8001280:	723b      	strb	r3, [r7, #8]
		 	  if(HAL_I2C_Mem_Write(p_hi2c1,MAGNETO_ADD,AK8963_CNTL,1,&buff[0],1,10)!=HAL_OK){
 8001282:	230a      	movs	r3, #10
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	2301      	movs	r3, #1
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2301      	movs	r3, #1
 8001292:	220a      	movs	r2, #10
 8001294:	2118      	movs	r1, #24
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f002 fcb8 	bl	8003c0c <HAL_I2C_Mem_Write>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d004      	beq.n	80012ac <Init+0xe4>
		 		  printf("probleme configuration mesure magnetometre --> fct Init \r\n");
 80012a2:	4847      	ldr	r0, [pc, #284]	; (80013c0 <Init+0x1f8>)
 80012a4:	f00a f88c 	bl	800b3c0 <puts>
		 	  	  Error_Handler();
 80012a8:	f000 ff34 	bl	8002114 <Error_Handler>

		 	  }

	/********** Réglage de la bande passante **********/

	buff[0]=0x3;
 80012ac:	2303      	movs	r3, #3
 80012ae:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,CONFIG,1,&buff[0],1,10)!=HAL_OK){
 80012b0:	230a      	movs	r3, #10
 80012b2:	9302      	str	r3, [sp, #8]
 80012b4:	2301      	movs	r3, #1
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2301      	movs	r3, #1
 80012c0:	221a      	movs	r2, #26
 80012c2:	21d0      	movs	r1, #208	; 0xd0
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f002 fca1 	bl	8003c0c <HAL_I2C_Mem_Write>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d004      	beq.n	80012da <Init+0x112>
		printf("probleme bande passante --> fct Init \r\n");
 80012d0:	483c      	ldr	r0, [pc, #240]	; (80013c4 <Init+0x1fc>)
 80012d2:	f00a f875 	bl	800b3c0 <puts>
		Error_Handler();
 80012d6:	f000 ff1d 	bl	8002114 <Error_Handler>
			Error_Handler();
		}
*/

	// bande passante à 250Hz : FCHOICE = 11 => FCHOICE_b = 00, DLPF_CFG = 000
		HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD,  GYRO_CONFIG,  1, &buff[0], 1, 10);
 80012da:	230a      	movs	r3, #10
 80012dc:	9302      	str	r3, [sp, #8]
 80012de:	2301      	movs	r3, #1
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2301      	movs	r3, #1
 80012ea:	221b      	movs	r2, #27
 80012ec:	21d0      	movs	r1, #208	; 0xd0
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f002 fd86 	bl	8003e00 <HAL_I2C_Mem_Read>
		//Pour mettre 00 dans FCHOICE_b
		buff[0] =(buff[0] & (0b11111100)) ;
 80012f4:	7a3b      	ldrb	r3, [r7, #8]
 80012f6:	f023 0303 	bic.w	r3, r3, #3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	723b      	strb	r3, [r7, #8]
		if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,GYRO_CONFIG,1,&buff[0],1,10)!=HAL_OK){
 80012fe:	230a      	movs	r3, #10
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	2301      	movs	r3, #1
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2301      	movs	r3, #1
 800130e:	221b      	movs	r2, #27
 8001310:	21d0      	movs	r1, #208	; 0xd0
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f002 fc7a 	bl	8003c0c <HAL_I2C_Mem_Write>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <Init+0x15a>
				Error_Handler(); }
 800131e:	f000 fef9 	bl	8002114 <Error_Handler>
		//Pour mettre 000 dans DLPF_CFG
		HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD, CONFIG,  1, &buff[0], 1, 10);
 8001322:	230a      	movs	r3, #10
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	2301      	movs	r3, #1
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2301      	movs	r3, #1
 8001332:	221a      	movs	r2, #26
 8001334:	21d0      	movs	r1, #208	; 0xd0
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f002 fd62 	bl	8003e00 <HAL_I2C_Mem_Read>
		buff[0] =(buff[0] & (0b11111000)) ;
 800133c:	7a3b      	ldrb	r3, [r7, #8]
 800133e:	f023 0307 	bic.w	r3, r3, #7
 8001342:	b2db      	uxtb	r3, r3
 8001344:	723b      	strb	r3, [r7, #8]
		if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,CONFIG,1,&buff[0],1,10)!=HAL_OK){
 8001346:	230a      	movs	r3, #10
 8001348:	9302      	str	r3, [sp, #8]
 800134a:	2301      	movs	r3, #1
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2301      	movs	r3, #1
 8001356:	221a      	movs	r2, #26
 8001358:	21d0      	movs	r1, #208	; 0xd0
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f002 fc56 	bl	8003c0c <HAL_I2C_Mem_Write>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <Init+0x1a2>
				Error_Handler();
 8001366:	f000 fed5 	bl	8002114 <Error_Handler>
		}
*/

	/*********** Réglage de la fréquence d'échantillonnage **********/

	buff[0]=0xFF;
 800136a:	23ff      	movs	r3, #255	; 0xff
 800136c:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,SMPLRT_DIV,1,&buff[0],1,10)!=HAL_OK){
 800136e:	230a      	movs	r3, #10
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	2301      	movs	r3, #1
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2301      	movs	r3, #1
 800137e:	2219      	movs	r2, #25
 8001380:	21d0      	movs	r1, #208	; 0xd0
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f002 fc42 	bl	8003c0c <HAL_I2C_Mem_Write>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d004      	beq.n	8001398 <Init+0x1d0>
		printf("probleme reglage frequence echantillonnage --> Init \r\n");
 800138e:	480e      	ldr	r0, [pc, #56]	; (80013c8 <Init+0x200>)
 8001390:	f00a f816 	bl	800b3c0 <puts>
		Error_Handler();
 8001394:	f000 febe 	bl	8002114 <Error_Handler>
	}
	HAL_I2C_Mem_Read(p_hi2c1,MPU_ADD,LP_ACCEL_ODR,1,&buff[0],1,10);
 8001398:	230a      	movs	r3, #10
 800139a:	9302      	str	r3, [sp, #8]
 800139c:	2301      	movs	r3, #1
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	221e      	movs	r2, #30
 80013aa:	21d0      	movs	r1, #208	; 0xd0
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f002 fd27 	bl	8003e00 <HAL_I2C_Mem_Read>
	// a faire : changer la valeur de DLPF_CFG à 2 par exemple et voir en mode debug si la valeur des 4 derniers bits de LP_ACCEL_ODR est à 4.

}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	0800eebc 	.word	0x0800eebc
 80013c0:	0800eeec 	.word	0x0800eeec
 80013c4:	0800ef28 	.word	0x0800ef28
 80013c8:	0800ef50 	.word	0x0800ef50
 80013cc:	00000000 	.word	0x00000000

080013d0 <Measure_M>:
	 * @param hi2cx Pointeur vers une structure I2C qui contient l'information de configuration pour un i2c particulier
	 * @param tableau_donnee_utiles Pointeur vers une zone mémoire de type double contenant l’information de champ magnétique
	 * @retval None
	 */

void Measure_M(I2C_HandleTypeDef* p_hi2c1,double* mag, double* offset, double* coeff){
 80013d0:	b5b0      	push	{r4, r5, r7, lr}
 80013d2:	b090      	sub	sp, #64	; 0x40
 80013d4:	af04      	add	r7, sp, #16
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	603b      	str	r3, [r7, #0]
		uint8_t buffer[6];
		uint8_t asa[3];
		uint8_t drdy[1];


		HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_ST1,1,drdy,1,20);
 80013de:	2314      	movs	r3, #20
 80013e0:	9302      	str	r3, [sp, #8]
 80013e2:	2301      	movs	r3, #1
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2301      	movs	r3, #1
 80013ee:	2202      	movs	r2, #2
 80013f0:	2118      	movs	r1, #24
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f002 fd04 	bl	8003e00 <HAL_I2C_Mem_Read>
		drdy[0]=((drdy[0])&(00000001));
 80013f8:	7d3b      	ldrb	r3, [r7, #20]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	753b      	strb	r3, [r7, #20]
		if(drdy[0]==1){
 8001402:	7d3b      	ldrb	r3, [r7, #20]
 8001404:	2b01      	cmp	r3, #1
 8001406:	f040 8115 	bne.w	8001634 <Measure_M+0x264>

			if((HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_XOUT_L,1,buffer,7,20)==HAL_OK)
 800140a:	2314      	movs	r3, #20
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	2307      	movs	r3, #7
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2301      	movs	r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	2118      	movs	r1, #24
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f002 fcee 	bl	8003e00 <HAL_I2C_Mem_Read>
 8001424:	4603      	mov	r3, r0
					&(HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_ASAX,1,asa,3,20)==HAL_OK)){
 8001426:	2b00      	cmp	r3, #0
 8001428:	bf0c      	ite	eq
 800142a:	2301      	moveq	r3, #1
 800142c:	2300      	movne	r3, #0
 800142e:	b2dc      	uxtb	r4, r3
 8001430:	2314      	movs	r3, #20
 8001432:	9302      	str	r3, [sp, #8]
 8001434:	2303      	movs	r3, #3
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	f107 0318 	add.w	r3, r7, #24
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2301      	movs	r3, #1
 8001440:	2210      	movs	r2, #16
 8001442:	2118      	movs	r1, #24
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f002 fcdb 	bl	8003e00 <HAL_I2C_Mem_Read>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	bf0c      	ite	eq
 8001450:	2301      	moveq	r3, #1
 8001452:	2300      	movne	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	4023      	ands	r3, r4
 8001458:	b2db      	uxtb	r3, r3
			if((HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_XOUT_L,1,buffer,7,20)==HAL_OK)
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 80ea 	beq.w	8001634 <Measure_M+0x264>


						x = (uint16_t)((buffer[1]<<8)+ buffer[0]);
 8001460:	7f7b      	ldrb	r3, [r7, #29]
 8001462:	b29b      	uxth	r3, r3
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	b29a      	uxth	r2, r3
 8001468:	7f3b      	ldrb	r3, [r7, #28]
 800146a:	b29b      	uxth	r3, r3
 800146c:	4413      	add	r3, r2
 800146e:	b29b      	uxth	r3, r3
 8001470:	85fb      	strh	r3, [r7, #46]	; 0x2e
						y = (uint16_t)((buffer[3]<<8)+ buffer[2]);
 8001472:	7ffb      	ldrb	r3, [r7, #31]
 8001474:	b29b      	uxth	r3, r3
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	b29a      	uxth	r2, r3
 800147a:	7fbb      	ldrb	r3, [r7, #30]
 800147c:	b29b      	uxth	r3, r3
 800147e:	4413      	add	r3, r2
 8001480:	b29b      	uxth	r3, r3
 8001482:	85bb      	strh	r3, [r7, #44]	; 0x2c
						z = (uint16_t)((buffer[5]<<8)+ buffer[4]);
 8001484:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001488:	b29b      	uxth	r3, r3
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b29a      	uxth	r2, r3
 800148e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001492:	b29b      	uxth	r3, r3
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	857b      	strh	r3, [r7, #42]	; 0x2a
						asax=asa[0];
 800149a:	7e3b      	ldrb	r3, [r7, #24]
 800149c:	853b      	strh	r3, [r7, #40]	; 0x28
						asay=asa[1];
 800149e:	7e7b      	ldrb	r3, [r7, #25]
 80014a0:	84fb      	strh	r3, [r7, #38]	; 0x26
						asaz=asa[2];
 80014a2:	7ebb      	ldrb	r3, [r7, #26]
 80014a4:	84bb      	strh	r3, [r7, #36]	; 0x24
						mag[0] = (x*((((asax-128)*0.5)/128)+1)*4912)/32760;
 80014a6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f842 	bl	8000534 <__aeabi_i2d>
 80014b0:	4604      	mov	r4, r0
 80014b2:	460d      	mov	r5, r1
 80014b4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014b8:	3b80      	subs	r3, #128	; 0x80
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f83a 	bl	8000534 <__aeabi_i2d>
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	4b62      	ldr	r3, [pc, #392]	; (8001650 <Measure_M+0x280>)
 80014c6:	f7ff f89f 	bl	8000608 <__aeabi_dmul>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	4b5f      	ldr	r3, [pc, #380]	; (8001654 <Measure_M+0x284>)
 80014d8:	f7ff f9c0 	bl	800085c <__aeabi_ddiv>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	4b5b      	ldr	r3, [pc, #364]	; (8001658 <Measure_M+0x288>)
 80014ea:	f7fe fed7 	bl	800029c <__adddf3>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4620      	mov	r0, r4
 80014f4:	4629      	mov	r1, r5
 80014f6:	f7ff f887 	bl	8000608 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	a34f      	add	r3, pc, #316	; (adr r3, 8001640 <Measure_M+0x270>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f87e 	bl	8000608 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	a34c      	add	r3, pc, #304	; (adr r3, 8001648 <Measure_M+0x278>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7ff f99f 	bl	800085c <__aeabi_ddiv>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	68b9      	ldr	r1, [r7, #8]
 8001524:	e9c1 2300 	strd	r2, r3, [r1]
						mag[1] = (y*((((asay-128)*0.5)/128)+1)*4912)/32760;
 8001528:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f801 	bl	8000534 <__aeabi_i2d>
 8001532:	4604      	mov	r4, r0
 8001534:	460d      	mov	r5, r1
 8001536:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800153a:	3b80      	subs	r3, #128	; 0x80
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe fff9 	bl	8000534 <__aeabi_i2d>
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	4b42      	ldr	r3, [pc, #264]	; (8001650 <Measure_M+0x280>)
 8001548:	f7ff f85e 	bl	8000608 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	4b3e      	ldr	r3, [pc, #248]	; (8001654 <Measure_M+0x284>)
 800155a:	f7ff f97f 	bl	800085c <__aeabi_ddiv>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	4b3b      	ldr	r3, [pc, #236]	; (8001658 <Measure_M+0x288>)
 800156c:	f7fe fe96 	bl	800029c <__adddf3>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4620      	mov	r0, r4
 8001576:	4629      	mov	r1, r5
 8001578:	f7ff f846 	bl	8000608 <__aeabi_dmul>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	a32e      	add	r3, pc, #184	; (adr r3, 8001640 <Measure_M+0x270>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7ff f83d 	bl	8000608 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	f103 0408 	add.w	r4, r3, #8
 800159c:	a32a      	add	r3, pc, #168	; (adr r3, 8001648 <Measure_M+0x278>)
 800159e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a2:	f7ff f95b 	bl	800085c <__aeabi_ddiv>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	e9c4 2300 	strd	r2, r3, [r4]
						mag[2] = (z*((((asaz-128)*0.5)/128)+1)*4912)/32760;
 80015ae:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffbe 	bl	8000534 <__aeabi_i2d>
 80015b8:	4604      	mov	r4, r0
 80015ba:	460d      	mov	r5, r1
 80015bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80015c0:	3b80      	subs	r3, #128	; 0x80
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ffb6 	bl	8000534 <__aeabi_i2d>
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	4b20      	ldr	r3, [pc, #128]	; (8001650 <Measure_M+0x280>)
 80015ce:	f7ff f81b 	bl	8000608 <__aeabi_dmul>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <Measure_M+0x284>)
 80015e0:	f7ff f93c 	bl	800085c <__aeabi_ddiv>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <Measure_M+0x288>)
 80015f2:	f7fe fe53 	bl	800029c <__adddf3>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4620      	mov	r0, r4
 80015fc:	4629      	mov	r1, r5
 80015fe:	f7ff f803 	bl	8000608 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	a30d      	add	r3, pc, #52	; (adr r3, 8001640 <Measure_M+0x270>)
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	f7fe fffa 	bl	8000608 <__aeabi_dmul>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	f103 0410 	add.w	r4, r3, #16
 8001622:	a309      	add	r3, pc, #36	; (adr r3, 8001648 <Measure_M+0x278>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7ff f918 	bl	800085c <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	e9c4 2300 	strd	r2, r3, [r4]
						mag[2] = (mag[2]-offset[2])*coeff[2];
						*/

			}
		}
}
 8001634:	bf00      	nop
 8001636:	3730      	adds	r7, #48	; 0x30
 8001638:	46bd      	mov	sp, r7
 800163a:	bdb0      	pop	{r4, r5, r7, pc}
 800163c:	f3af 8000 	nop.w
 8001640:	00000000 	.word	0x00000000
 8001644:	40b33000 	.word	0x40b33000
 8001648:	00000000 	.word	0x00000000
 800164c:	40dffe00 	.word	0x40dffe00
 8001650:	3fe00000 	.word	0x3fe00000
 8001654:	40600000 	.word	0x40600000
 8001658:	3ff00000 	.word	0x3ff00000
 800165c:	00000000 	.word	0x00000000

08001660 <magnetic_field_to_degree>:
#include <math.h>



float magnetic_field_to_degree(double* mag_calibrated)
{
 8001660:	b5b0      	push	{r4, r5, r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	float heading = atan2(-mag_calibrated[1], mag_calibrated[0]); // atan2(y,x)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3308      	adds	r3, #8
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	4614      	mov	r4, r2
 8001672:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	ed93 7b00 	vldr	d7, [r3]
 800167c:	eeb0 1a47 	vmov.f32	s2, s14
 8001680:	eef0 1a67 	vmov.f32	s3, s15
 8001684:	ec45 4b10 	vmov	d0, r4, r5
 8001688:	f00d fac3 	bl	800ec12 <atan2>
 800168c:	ec53 2b10 	vmov	r2, r3, d0
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fab0 	bl	8000bf8 <__aeabi_d2f>
 8001698:	4603      	mov	r3, r0
 800169a:	613b      	str	r3, [r7, #16]


	  //float declinationAngle = 0.22; // Angle de déclinaison magnétique pour Paris
	  float declinationAngle = 0.21; // Angle de déclinaison magnétique pour Barcelone
 800169c:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <magnetic_field_to_degree+0xb8>)
 800169e:	60fb      	str	r3, [r7, #12]
	  heading += declinationAngle;   // site pour connaitre la déclinaison : https://www.ngdc.noaa.gov/geomag/calculators/magcalc
 80016a0:	ed97 7a04 	vldr	s14, [r7, #16]
 80016a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ac:	edc7 7a04 	vstr	s15, [r7, #16]


	  float headingDegrees = heading * 180 / M_PI; // Conversion en degrés
 80016b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016b4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800171c <magnetic_field_to_degree+0xbc>
 80016b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016bc:	ee17 0a90 	vmov	r0, s15
 80016c0:	f7fe ff4a 	bl	8000558 <__aeabi_f2d>
 80016c4:	a312      	add	r3, pc, #72	; (adr r3, 8001710 <magnetic_field_to_degree+0xb0>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	f7ff f8c7 	bl	800085c <__aeabi_ddiv>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff fa8f 	bl	8000bf8 <__aeabi_d2f>
 80016da:	4603      	mov	r3, r0
 80016dc:	617b      	str	r3, [r7, #20]

	  if(headingDegrees<=0){
 80016de:	edd7 7a05 	vldr	s15, [r7, #20]
 80016e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ea:	d807      	bhi.n	80016fc <magnetic_field_to_degree+0x9c>
			  headingDegrees+=360;
 80016ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80016f0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001720 <magnetic_field_to_degree+0xc0>
 80016f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016f8:	edc7 7a05 	vstr	s15, [r7, #20]
		  }



	  return headingDegrees;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	ee07 3a90 	vmov	s15, r3
}
 8001702:	eeb0 0a67 	vmov.f32	s0, s15
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bdb0      	pop	{r4, r5, r7, pc}
 800170c:	f3af 8000 	nop.w
 8001710:	54442d18 	.word	0x54442d18
 8001714:	400921fb 	.word	0x400921fb
 8001718:	3e570a3d 	.word	0x3e570a3d
 800171c:	43340000 	.word	0x43340000
 8001720:	43b40000 	.word	0x43b40000

08001724 <Delta_theta_calculation>:

double Delta_theta_calculation(TypeDataCansat DataCansat){
 8001724:	b084      	sub	sp, #16
 8001726:	b580      	push	{r7, lr}
 8001728:	b088      	sub	sp, #32
 800172a:	af00      	add	r7, sp, #0
 800172c:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001730:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	double theta_target = 0;
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double latitude_vector = DataCansat.GPS.latitude_Target - DataCansat.GPS.latitude_Cansat;
 8001740:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001744:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001748:	f7fe fda6 	bl	8000298 <__aeabi_dsub>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double longitude_vector = DataCansat.GPS.longitude_Target - DataCansat.GPS.longitude_Cansat;
 8001754:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001758:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800175c:	f7fe fd9c 	bl	8000298 <__aeabi_dsub>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	e9c7 2302 	strd	r2, r3, [r7, #8]

	theta_target = 360 - atan(longitude_vector/latitude_vector);
 8001768:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800176c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001770:	f7ff f874 	bl	800085c <__aeabi_ddiv>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	ec43 2b17 	vmov	d7, r2, r3
 800177c:	eeb0 0a47 	vmov.f32	s0, s14
 8001780:	eef0 0a67 	vmov.f32	s1, s15
 8001784:	f00d f89c 	bl	800e8c0 <atan>
 8001788:	ec53 2b10 	vmov	r2, r3, d0
 800178c:	f04f 0000 	mov.w	r0, #0
 8001790:	490f      	ldr	r1, [pc, #60]	; (80017d0 <Delta_theta_calculation+0xac>)
 8001792:	f7fe fd81 	bl	8000298 <__aeabi_dsub>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double Delta_theta = theta_target - DataCansat.IMU.MagnetometerData.degree_angle;
 800179e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80017a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017a6:	f7fe fd77 	bl	8000298 <__aeabi_dsub>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	e9c7 2300 	strd	r2, r3, [r7]

	return Delta_theta;
 80017b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80017ba:	eeb0 0a47 	vmov.f32	s0, s14
 80017be:	eef0 0a67 	vmov.f32	s1, s15
 80017c2:	3720      	adds	r7, #32
 80017c4:	46bd      	mov	sp, r7
 80017c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017ca:	b004      	add	sp, #16
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40768000 	.word	0x40768000

080017d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4a07      	ldr	r2, [pc, #28]	; (8001800 <vApplicationGetIdleTaskMemory+0x2c>)
 80017e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	4a06      	ldr	r2, [pc, #24]	; (8001804 <vApplicationGetIdleTaskMemory+0x30>)
 80017ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2280      	movs	r2, #128	; 0x80
 80017f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	2000021c 	.word	0x2000021c
 8001804:	200002d0 	.word	0x200002d0

08001808 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001808:	b5b0      	push	{r4, r5, r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <MX_FREERTOS_Init+0x5c>)
 8001810:	1d3c      	adds	r4, r7, #4
 8001812:	461d      	mov	r5, r3
 8001814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001818:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800181c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f007 fb92 	bl	8008f4e <osThreadCreate>
 800182a:	4603      	mov	r3, r0
 800182c:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <MX_FREERTOS_Init+0x60>)
 800182e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

xTaskCreate(Task_Drop_detection, "Drop detection", 500, NULL, osPriorityHigh, &pxDrop_detection);
 8001830:	4b0e      	ldr	r3, [pc, #56]	; (800186c <MX_FREERTOS_Init+0x64>)
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	2302      	movs	r3, #2
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2300      	movs	r3, #0
 800183a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800183e:	490c      	ldr	r1, [pc, #48]	; (8001870 <MX_FREERTOS_Init+0x68>)
 8001840:	480c      	ldr	r0, [pc, #48]	; (8001874 <MX_FREERTOS_Init+0x6c>)
 8001842:	f007 fcf5 	bl	8009230 <xTaskCreate>

xTaskCreate(Task_GPS_data_reading, "Lecture des donnees GPS", 500, NULL, osPriorityAboveNormal, &pxGPS_Handler);
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <MX_FREERTOS_Init+0x70>)
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	2301      	movs	r3, #1
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	2300      	movs	r3, #0
 8001850:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001854:	4909      	ldr	r1, [pc, #36]	; (800187c <MX_FREERTOS_Init+0x74>)
 8001856:	480a      	ldr	r0, [pc, #40]	; (8001880 <MX_FREERTOS_Init+0x78>)
 8001858:	f007 fcea 	bl	8009230 <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

}
 800185c:	bf00      	nop
 800185e:	3720      	adds	r7, #32
 8001860:	46bd      	mov	sp, r7
 8001862:	bdb0      	pop	{r4, r5, r7, pc}
 8001864:	0800f008 	.word	0x0800f008
 8001868:	20000218 	.word	0x20000218
 800186c:	20000208 	.word	0x20000208
 8001870:	0800efe0 	.word	0x0800efe0
 8001874:	08002121 	.word	0x08002121
 8001878:	20000204 	.word	0x20000204
 800187c:	0800eff0 	.word	0x0800eff0
 8001880:	080010a1 	.word	0x080010a1

08001884 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800188c:	2001      	movs	r0, #1
 800188e:	f007 fbaa 	bl	8008fe6 <osDelay>
 8001892:	e7fb      	b.n	800188c <StartDefaultTask+0x8>

08001894 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b38      	ldr	r3, [pc, #224]	; (8001990 <MX_GPIO_Init+0xfc>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a37      	ldr	r2, [pc, #220]	; (8001990 <MX_GPIO_Init+0xfc>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b35      	ldr	r3, [pc, #212]	; (8001990 <MX_GPIO_Init+0xfc>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b31      	ldr	r3, [pc, #196]	; (8001990 <MX_GPIO_Init+0xfc>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a30      	ldr	r2, [pc, #192]	; (8001990 <MX_GPIO_Init+0xfc>)
 80018d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <MX_GPIO_Init+0xfc>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <MX_GPIO_Init+0xfc>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a29      	ldr	r2, [pc, #164]	; (8001990 <MX_GPIO_Init+0xfc>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b27      	ldr	r3, [pc, #156]	; (8001990 <MX_GPIO_Init+0xfc>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	4b23      	ldr	r3, [pc, #140]	; (8001990 <MX_GPIO_Init+0xfc>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a22      	ldr	r2, [pc, #136]	; (8001990 <MX_GPIO_Init+0xfc>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <MX_GPIO_Init+0xfc>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	2120      	movs	r1, #32
 800191e:	481d      	ldr	r0, [pc, #116]	; (8001994 <MX_GPIO_Init+0x100>)
 8001920:	f001 fcce 	bl	80032c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800192a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800192e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	4817      	ldr	r0, [pc, #92]	; (8001998 <MX_GPIO_Init+0x104>)
 800193c:	f001 fb24 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001940:	2320      	movs	r3, #32
 8001942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001944:	2301      	movs	r3, #1
 8001946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4619      	mov	r1, r3
 8001956:	480f      	ldr	r0, [pc, #60]	; (8001994 <MX_GPIO_Init+0x100>)
 8001958:	f001 fb16 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800195c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	4808      	ldr	r0, [pc, #32]	; (8001994 <MX_GPIO_Init+0x100>)
 8001972:	f001 fb09 	bl	8002f88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2105      	movs	r1, #5
 800197a:	2028      	movs	r0, #40	; 0x28
 800197c:	f001 fa3a 	bl	8002df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001980:	2028      	movs	r0, #40	; 0x28
 8001982:	f001 fa53 	bl	8002e2c <HAL_NVIC_EnableIRQ>

}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	; 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	40020000 	.word	0x40020000
 8001998:	40020800 	.word	0x40020800

0800199c <GPS_data_reading>:





void GPS_data_reading(TypeDataCansat pData, int i, int flag){
 800199c:	b084      	sub	sp, #16
 800199e:	b580      	push	{r7, lr}
 80019a0:	b08c      	sub	sp, #48	; 0x30
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	f107 0c38 	add.w	ip, r7, #56	; 0x38
 80019a8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


		if(it_rx_gps == 1){
 80019ac:	4ba6      	ldr	r3, [pc, #664]	; (8001c48 <GPS_data_reading+0x2ac>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	f040 8142 	bne.w	8001c3a <GPS_data_reading+0x29e>
	  		if(data_rdy == 1){
 80019b6:	4ba5      	ldr	r3, [pc, #660]	; (8001c4c <GPS_data_reading+0x2b0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	f040 80ee 	bne.w	8001b9c <GPS_data_reading+0x200>
	  				flag = 1;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	  				for(int j = 0; j<=47;j++){
 80019c6:	2300      	movs	r3, #0
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ca:	e00b      	b.n	80019e4 <GPS_data_reading+0x48>
	  					position[j] = coordonnees[j+18]; //position[] comprend la latitude et la longitude telles que sur la trame reçue
 80019cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ce:	3312      	adds	r3, #18
 80019d0:	4a9f      	ldr	r2, [pc, #636]	; (8001c50 <GPS_data_reading+0x2b4>)
 80019d2:	5cd1      	ldrb	r1, [r2, r3]
 80019d4:	4a9f      	ldr	r2, [pc, #636]	; (8001c54 <GPS_data_reading+0x2b8>)
 80019d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d8:	4413      	add	r3, r2
 80019da:	460a      	mov	r2, r1
 80019dc:	701a      	strb	r2, [r3, #0]
	  				for(int j = 0; j<=47;j++){
 80019de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e0:	3301      	adds	r3, #1
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e6:	2b2f      	cmp	r3, #47	; 0x2f
 80019e8:	ddf0      	ble.n	80019cc <GPS_data_reading+0x30>
	  					//En effet, les coordonnes sont d'abord de cette forme : "$GNGGA,121933.000,4902.36627,N,00204.31287,E,1,05,13.3,0.0,M,0.0,M,,*4D"
	  					//On sélectionne donc la partie qui est après l'identifieur et l'heure mais avant le ",E,".
	  				}

	  				for(int k = 0; k<=9;k++){
 80019ea:	2300      	movs	r3, #0
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ee:	e00b      	b.n	8001a08 <GPS_data_reading+0x6c>
	  					latitude_data[k] = position[k+1]; //latitude non convertie
 80019f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f2:	3301      	adds	r3, #1
 80019f4:	4a97      	ldr	r2, [pc, #604]	; (8001c54 <GPS_data_reading+0x2b8>)
 80019f6:	5cd1      	ldrb	r1, [r2, r3]
 80019f8:	4a97      	ldr	r2, [pc, #604]	; (8001c58 <GPS_data_reading+0x2bc>)
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fc:	4413      	add	r3, r2
 80019fe:	460a      	mov	r2, r1
 8001a00:	701a      	strb	r2, [r3, #0]
	  				for(int k = 0; k<=9;k++){
 8001a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a04:	3301      	adds	r3, #1
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0a:	2b09      	cmp	r3, #9
 8001a0c:	ddf0      	ble.n	80019f0 <GPS_data_reading+0x54>
	  				}
	  				for(int l = 0; l<=10;l++){
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
 8001a12:	e00b      	b.n	8001a2c <GPS_data_reading+0x90>
	  					longitude_data[l] = position[l+14]; //longitude non convertie
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	330e      	adds	r3, #14
 8001a18:	4a8e      	ldr	r2, [pc, #568]	; (8001c54 <GPS_data_reading+0x2b8>)
 8001a1a:	5cd1      	ldrb	r1, [r2, r3]
 8001a1c:	4a8f      	ldr	r2, [pc, #572]	; (8001c5c <GPS_data_reading+0x2c0>)
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	4413      	add	r3, r2
 8001a22:	460a      	mov	r2, r1
 8001a24:	701a      	strb	r2, [r3, #0]
	  				for(int l = 0; l<=10;l++){
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	3301      	adds	r3, #1
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	2b0a      	cmp	r3, #10
 8001a30:	ddf0      	ble.n	8001a14 <GPS_data_reading+0x78>
	  				}
	  				for(int h = 0; h<=4; h++){
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
 8001a36:	e00b      	b.n	8001a50 <GPS_data_reading+0xb4>
	  					altitude_data[h] = position[h+37]; //altitude non convertie
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	3325      	adds	r3, #37	; 0x25
 8001a3c:	4a85      	ldr	r2, [pc, #532]	; (8001c54 <GPS_data_reading+0x2b8>)
 8001a3e:	5cd1      	ldrb	r1, [r2, r3]
 8001a40:	4a87      	ldr	r2, [pc, #540]	; (8001c60 <GPS_data_reading+0x2c4>)
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	4413      	add	r3, r2
 8001a46:	460a      	mov	r2, r1
 8001a48:	701a      	strb	r2, [r3, #0]
	  				for(int h = 0; h<=4; h++){
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	623b      	str	r3, [r7, #32]
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	ddf0      	ble.n	8001a38 <GPS_data_reading+0x9c>
	  				}

	  				lat2[0] = latitude_data[0];
 8001a56:	4b80      	ldr	r3, [pc, #512]	; (8001c58 <GPS_data_reading+0x2bc>)
 8001a58:	781a      	ldrb	r2, [r3, #0]
 8001a5a:	4b82      	ldr	r3, [pc, #520]	; (8001c64 <GPS_data_reading+0x2c8>)
 8001a5c:	701a      	strb	r2, [r3, #0]
	  				lat2[1] = latitude_data[1]; //lat2 -> les deux digits avant la virgue du degré de la lat.
 8001a5e:	4b7e      	ldr	r3, [pc, #504]	; (8001c58 <GPS_data_reading+0x2bc>)
 8001a60:	785a      	ldrb	r2, [r3, #1]
 8001a62:	4b80      	ldr	r3, [pc, #512]	; (8001c64 <GPS_data_reading+0x2c8>)
 8001a64:	705a      	strb	r2, [r3, #1]

	  				for(int m = 0; m<=6;m++){
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	e00b      	b.n	8001a84 <GPS_data_reading+0xe8>
	  					lat7[m] = latitude_data[m+2]; //lat 7 -> ce qui reste après la virgule de la lat.
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	3302      	adds	r3, #2
 8001a70:	4a79      	ldr	r2, [pc, #484]	; (8001c58 <GPS_data_reading+0x2bc>)
 8001a72:	5cd1      	ldrb	r1, [r2, r3]
 8001a74:	4a7c      	ldr	r2, [pc, #496]	; (8001c68 <GPS_data_reading+0x2cc>)
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	4413      	add	r3, r2
 8001a7a:	460a      	mov	r2, r1
 8001a7c:	701a      	strb	r2, [r3, #0]
	  				for(int m = 0; m<=6;m++){
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3301      	adds	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	2b06      	cmp	r3, #6
 8001a88:	ddf0      	ble.n	8001a6c <GPS_data_reading+0xd0>
	  				}

	  				long3[0] = longitude_data[0];
 8001a8a:	4b74      	ldr	r3, [pc, #464]	; (8001c5c <GPS_data_reading+0x2c0>)
 8001a8c:	781a      	ldrb	r2, [r3, #0]
 8001a8e:	4b77      	ldr	r3, [pc, #476]	; (8001c6c <GPS_data_reading+0x2d0>)
 8001a90:	701a      	strb	r2, [r3, #0]
	  				long3[1] = longitude_data[1];
 8001a92:	4b72      	ldr	r3, [pc, #456]	; (8001c5c <GPS_data_reading+0x2c0>)
 8001a94:	785a      	ldrb	r2, [r3, #1]
 8001a96:	4b75      	ldr	r3, [pc, #468]	; (8001c6c <GPS_data_reading+0x2d0>)
 8001a98:	705a      	strb	r2, [r3, #1]
	  				long3[2] = longitude_data[2]; //long3 -> les trois digits avant la virgule du degré de la long.
 8001a9a:	4b70      	ldr	r3, [pc, #448]	; (8001c5c <GPS_data_reading+0x2c0>)
 8001a9c:	789a      	ldrb	r2, [r3, #2]
 8001a9e:	4b73      	ldr	r3, [pc, #460]	; (8001c6c <GPS_data_reading+0x2d0>)
 8001aa0:	709a      	strb	r2, [r3, #2]

	  				for(int n = 0; n<=6;n++){
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
 8001aa6:	e00b      	b.n	8001ac0 <GPS_data_reading+0x124>
	  					long7[n] = longitude_data[n+3]; //long7 -> ce qui reste après la virgule de la long.
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	3303      	adds	r3, #3
 8001aac:	4a6b      	ldr	r2, [pc, #428]	; (8001c5c <GPS_data_reading+0x2c0>)
 8001aae:	5cd1      	ldrb	r1, [r2, r3]
 8001ab0:	4a6f      	ldr	r2, [pc, #444]	; (8001c70 <GPS_data_reading+0x2d4>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	460a      	mov	r2, r1
 8001ab8:	701a      	strb	r2, [r3, #0]
	  				for(int n = 0; n<=6;n++){
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	3301      	adds	r3, #1
 8001abe:	61bb      	str	r3, [r7, #24]
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	ddf0      	ble.n	8001aa8 <GPS_data_reading+0x10c>
	  				}

	  				float deg_lat = atof(lat2);
 8001ac6:	4867      	ldr	r0, [pc, #412]	; (8001c64 <GPS_data_reading+0x2c8>)
 8001ac8:	f008 fdb8 	bl	800a63c <atof>
 8001acc:	ec53 2b10 	vmov	r2, r3, d0
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7ff f890 	bl	8000bf8 <__aeabi_d2f>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	613b      	str	r3, [r7, #16]
	  				float reste_lat = atof(lat7); //conversion du char[lat] en float[lat]
 8001adc:	4862      	ldr	r0, [pc, #392]	; (8001c68 <GPS_data_reading+0x2cc>)
 8001ade:	f008 fdad 	bl	800a63c <atof>
 8001ae2:	ec53 2b10 	vmov	r2, r3, d0
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f7ff f885 	bl	8000bf8 <__aeabi_d2f>
 8001aee:	4603      	mov	r3, r0
 8001af0:	60fb      	str	r3, [r7, #12]

	  				float deg_long = atof(long3);
 8001af2:	485e      	ldr	r0, [pc, #376]	; (8001c6c <GPS_data_reading+0x2d0>)
 8001af4:	f008 fda2 	bl	800a63c <atof>
 8001af8:	ec53 2b10 	vmov	r2, r3, d0
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff f87a 	bl	8000bf8 <__aeabi_d2f>
 8001b04:	4603      	mov	r3, r0
 8001b06:	60bb      	str	r3, [r7, #8]
	  				float reste_long = atof(long7); //conversion du char[long] en float[long]
 8001b08:	4859      	ldr	r0, [pc, #356]	; (8001c70 <GPS_data_reading+0x2d4>)
 8001b0a:	f008 fd97 	bl	800a63c <atof>
 8001b0e:	ec53 2b10 	vmov	r2, r3, d0
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f7ff f86f 	bl	8000bf8 <__aeabi_d2f>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	607b      	str	r3, [r7, #4]

	  				pData.GPS.latitude_Cansat = deg_lat + (reste_lat/60); //latitude convertie
 8001b1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b22:	eddf 6a54 	vldr	s13, [pc, #336]	; 8001c74 <GPS_data_reading+0x2d8>
 8001b26:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b32:	ee17 0a90 	vmov	r0, s15
 8001b36:	f7fe fd0f 	bl	8000558 <__aeabi_f2d>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	  				pData.GPS.longitude_Cansat = deg_long + (reste_long/60); //longitude convertie
 8001b42:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b46:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8001c74 <GPS_data_reading+0x2d8>
 8001b4a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b56:	ee17 0a90 	vmov	r0, s15
 8001b5a:	f7fe fcfd 	bl	8000558 <__aeabi_f2d>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  				pData.GPS.altitude_Cansat = atof(altitude_data); // altitude convertie
 8001b66:	483e      	ldr	r0, [pc, #248]	; (8001c60 <GPS_data_reading+0x2c4>)
 8001b68:	f008 fd68 	bl	800a63c <atof>
 8001b6c:	eeb0 7a40 	vmov.f32	s14, s0
 8001b70:	eef0 7a60 	vmov.f32	s15, s1
 8001b74:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48

	  				//nombre de satellites
	  				for(int k = 0; k<2;k++){
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	e00b      	b.n	8001b96 <GPS_data_reading+0x1fa>
	  				satellites[k] = coordonnees[k+45]; //satellites[] indique le nombre de satellites captés
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	332d      	adds	r3, #45	; 0x2d
 8001b82:	4a33      	ldr	r2, [pc, #204]	; (8001c50 <GPS_data_reading+0x2b4>)
 8001b84:	5cd1      	ldrb	r1, [r2, r3]
 8001b86:	4a3c      	ldr	r2, [pc, #240]	; (8001c78 <GPS_data_reading+0x2dc>)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	460a      	mov	r2, r1
 8001b8e:	701a      	strb	r2, [r3, #0]
	  				for(int k = 0; k<2;k++){
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	3301      	adds	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	ddf0      	ble.n	8001b7e <GPS_data_reading+0x1e2>
	  				}
	  		}
	  		if(uart_gps_rx[0]==10){
 8001b9c:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <GPS_data_reading+0x2e0>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b0a      	cmp	r3, #10
 8001ba2:	d047      	beq.n	8001c34 <GPS_data_reading+0x298>
	  			//HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); //Arrangement de la trame
	  		}
	  		else{
	  			uart_pc_tx[0]=uart_gps_rx[0];
 8001ba4:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <GPS_data_reading+0x2e0>)
 8001ba6:	781a      	ldrb	r2, [r3, #0]
 8001ba8:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <GPS_data_reading+0x2e4>)
 8001baa:	701a      	strb	r2, [r3, #0]
	  			HAL_UART_Transmit(&huart2, (uint8_t*)&uart_pc_tx, 1, HAL_MAX_DELAY);
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4933      	ldr	r1, [pc, #204]	; (8001c80 <GPS_data_reading+0x2e4>)
 8001bb4:	4833      	ldr	r0, [pc, #204]	; (8001c84 <GPS_data_reading+0x2e8>)
 8001bb6:	f006 f976 	bl	8007ea6 <HAL_UART_Transmit>
	  			coordonnees[i] = uart_pc_tx[0]; //On copie ce qui passe dans l'UART dans un tableau coordonnees[i].
 8001bba:	4b31      	ldr	r3, [pc, #196]	; (8001c80 <GPS_data_reading+0x2e4>)
 8001bbc:	7819      	ldrb	r1, [r3, #0]
 8001bbe:	4a24      	ldr	r2, [pc, #144]	; (8001c50 <GPS_data_reading+0x2b4>)
 8001bc0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001bc4:	4413      	add	r3, r2
 8001bc6:	460a      	mov	r2, r1
 8001bc8:	701a      	strb	r2, [r3, #0]
	  			if(i >= 4){
 8001bca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	dd2b      	ble.n	8001c2a <GPS_data_reading+0x28e>
	  				if(strncmp("OK*35",&coordonnees[i-4],5) == 0){
 8001bd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001bd6:	3b04      	subs	r3, #4
 8001bd8:	4a1d      	ldr	r2, [pc, #116]	; (8001c50 <GPS_data_reading+0x2b4>)
 8001bda:	4413      	add	r3, r2
 8001bdc:	2205      	movs	r2, #5
 8001bde:	4619      	mov	r1, r3
 8001be0:	4829      	ldr	r0, [pc, #164]	; (8001c88 <GPS_data_reading+0x2ec>)
 8001be2:	f009 fcb2 	bl	800b54a <strncmp>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10e      	bne.n	8001c0a <GPS_data_reading+0x26e>
	  						i = 0; //Si on trouve "OK", on réinitialise i à 0 pour synchroniser notre trame.
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	  						if(first_data == 1){
 8001bf2:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <GPS_data_reading+0x2f0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d103      	bne.n	8001c02 <GPS_data_reading+0x266>
	  							data_rdy = 1; //Si la trame est initialisée, le premier caractère du tableau voulu est prêt.
 8001bfa:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <GPS_data_reading+0x2b0>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	e018      	b.n	8001c34 <GPS_data_reading+0x298>
	  						}
	  						else first_data = 1; //Permet d'enregistrer le tableau désiré.
 8001c02:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <GPS_data_reading+0x2f0>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e014      	b.n	8001c34 <GPS_data_reading+0x298>
	  					}
	  				else{
	  						if(i == GPS_TRAME_SIZE-1){
 8001c0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001c0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d103      	bne.n	8001c1e <GPS_data_reading+0x282>
	  							i = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001c1c:	e00a      	b.n	8001c34 <GPS_data_reading+0x298>
	  						}
	  						else{
	  							i++;
 8001c1e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001c22:	3301      	adds	r3, #1
 8001c24:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001c28:	e004      	b.n	8001c34 <GPS_data_reading+0x298>
	  					}

	  				}
	  			}
	  			else i++;
 8001c2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001c2e:	3301      	adds	r3, #1
 8001c30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100


		}
		it_rx_gps = 0;
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <GPS_data_reading+0x2ac>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]

	}

}
 8001c3a:	bf00      	nop
 8001c3c:	3730      	adds	r7, #48	; 0x30
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c44:	b004      	add	sp, #16
 8001c46:	4770      	bx	lr
 8001c48:	20000a84 	.word	0x20000a84
 8001c4c:	20000910 	.word	0x20000910
 8001c50:	200004d0 	.word	0x200004d0
 8001c54:	200008d8 	.word	0x200008d8
 8001c58:	200008c4 	.word	0x200008c4
 8001c5c:	200008b8 	.word	0x200008b8
 8001c60:	200008d0 	.word	0x200008d0
 8001c64:	200008f0 	.word	0x200008f0
 8001c68:	200008f4 	.word	0x200008f4
 8001c6c:	200008fc 	.word	0x200008fc
 8001c70:	20000900 	.word	0x20000900
 8001c74:	42700000 	.word	0x42700000
 8001c78:	20000908 	.word	0x20000908
 8001c7c:	20000a34 	.word	0x20000a34
 8001c80:	20000a38 	.word	0x20000a38
 8001c84:	20000b60 	.word	0x20000b60
 8001c88:	0800f024 	.word	0x0800f024
 8001c8c:	2000090c 	.word	0x2000090c

08001c90 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <MX_I2C1_Init+0x50>)
 8001c96:	4a13      	ldr	r2, [pc, #76]	; (8001ce4 <MX_I2C1_Init+0x54>)
 8001c98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_I2C1_Init+0x50>)
 8001c9c:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <MX_I2C1_Init+0x58>)
 8001c9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <MX_I2C1_Init+0x50>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <MX_I2C1_Init+0x50>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <MX_I2C1_Init+0x50>)
 8001cae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <MX_I2C1_Init+0x50>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <MX_I2C1_Init+0x50>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <MX_I2C1_Init+0x50>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <MX_I2C1_Init+0x50>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ccc:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <MX_I2C1_Init+0x50>)
 8001cce:	f001 fb35 	bl	800333c <HAL_I2C_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cd8:	f000 fa1c 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000914 	.word	0x20000914
 8001ce4:	40005400 	.word	0x40005400
 8001ce8:	000186a0 	.word	0x000186a0

08001cec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a21      	ldr	r2, [pc, #132]	; (8001d90 <HAL_I2C_MspInit+0xa4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d13c      	bne.n	8001d88 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_I2C_MspInit+0xa8>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <HAL_I2C_MspInit+0xa8>)
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_I2C_MspInit+0xa8>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001d2a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d30:	2312      	movs	r3, #18
 8001d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	4619      	mov	r1, r3
 8001d46:	4814      	ldr	r0, [pc, #80]	; (8001d98 <HAL_I2C_MspInit+0xac>)
 8001d48:	f001 f91e 	bl	8002f88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <HAL_I2C_MspInit+0xa8>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	4a0f      	ldr	r2, [pc, #60]	; (8001d94 <HAL_I2C_MspInit+0xa8>)
 8001d56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <HAL_I2C_MspInit+0xa8>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2105      	movs	r1, #5
 8001d6c:	201f      	movs	r0, #31
 8001d6e:	f001 f841 	bl	8002df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d72:	201f      	movs	r0, #31
 8001d74:	f001 f85a 	bl	8002e2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2105      	movs	r1, #5
 8001d7c:	2020      	movs	r0, #32
 8001d7e:	f001 f839 	bl	8002df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001d82:	2020      	movs	r0, #32
 8001d84:	f001 f852 	bl	8002e2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3728      	adds	r7, #40	; 0x28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40005400 	.word	0x40005400
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40020400 	.word	0x40020400

08001d9c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001da4:	1d39      	adds	r1, r7, #4
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001daa:	2201      	movs	r2, #1
 8001dac:	4803      	ldr	r0, [pc, #12]	; (8001dbc <__io_putchar+0x20>)
 8001dae:	f006 f87a 	bl	8007ea6 <HAL_UART_Transmit>
return ch;
 8001db2:	687b      	ldr	r3, [r7, #4]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000b60 	.word	0x20000b60

08001dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001dc6:	af02      	add	r7, sp, #8
	  *            entrée des données GPS de la cible
	  ***********************************************************/

	  //Position GPS cible : 43°13'18.7"N 0°03'10.0"W  --> données telles que décrites dans le règlement 2023

	  pDataCansat.GPS.latitude_Target = 43.2218611;
 8001dc8:	4987      	ldr	r1, [pc, #540]	; (8001fe8 <main+0x228>)
 8001dca:	a383      	add	r3, pc, #524	; (adr r3, 8001fd8 <main+0x218>)
 8001dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	  pDataCansat.GPS.longitude_Target = -0.05277777777777778;
 8001dd4:	4984      	ldr	r1, [pc, #528]	; (8001fe8 <main+0x228>)
 8001dd6:	a382      	add	r3, pc, #520	; (adr r3, 8001fe0 <main+0x220>)
 8001dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ddc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001de0:	f000 feea 	bl	8002bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001de4:	f000 f91a 	bl	800201c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001de8:	f7ff fd54 	bl	8001894 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001dec:	f000 fdec 	bl	80029c8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001df0:	f7ff ff4e 	bl	8001c90 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001df4:	f000 fcd0 	bl	8002798 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001df8:	f000 fdbc 	bl	8002974 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001dfc:	f000 fc68 	bl	80026d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("------------------------\r\n");
 8001e00:	487a      	ldr	r0, [pc, #488]	; (8001fec <main+0x22c>)
 8001e02:	f009 fadd 	bl	800b3c0 <puts>
  printf("------------------------\r\n");
 8001e06:	4879      	ldr	r0, [pc, #484]	; (8001fec <main+0x22c>)
 8001e08:	f009 fada 	bl	800b3c0 <puts>
  printf("------------------------\r\n");
 8001e0c:	4877      	ldr	r0, [pc, #476]	; (8001fec <main+0x22c>)
 8001e0e:	f009 fad7 	bl	800b3c0 <puts>
  printf("------------------------\r\n");
 8001e12:	4876      	ldr	r0, [pc, #472]	; (8001fec <main+0x22c>)
 8001e14:	f009 fad4 	bl	800b3c0 <puts>
  printf("initialisation du CanSat\r\n");
 8001e18:	4875      	ldr	r0, [pc, #468]	; (8001ff0 <main+0x230>)
 8001e1a:	f009 fad1 	bl	800b3c0 <puts>
  printf("------------------------\r\n");
 8001e1e:	4873      	ldr	r0, [pc, #460]	; (8001fec <main+0x22c>)
 8001e20:	f009 face 	bl	800b3c0 <puts>
  printf("------------------------\r\n");
 8001e24:	4871      	ldr	r0, [pc, #452]	; (8001fec <main+0x22c>)
 8001e26:	f009 facb 	bl	800b3c0 <puts>
  printf("------------------------\r\n");
 8001e2a:	4870      	ldr	r0, [pc, #448]	; (8001fec <main+0x22c>)
 8001e2c:	f009 fac8 	bl	800b3c0 <puts>
  printf("------------------------\r\n");
 8001e30:	486e      	ldr	r0, [pc, #440]	; (8001fec <main+0x22c>)
 8001e32:	f009 fac5 	bl	800b3c0 <puts>

    int x=0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    int i=0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
    int Devices[100]={0};
 8001e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e46:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001e50:	461a      	mov	r2, r3
 8001e52:	2100      	movs	r1, #0
 8001e54:	f008 fd27 	bl	800a8a6 <memset>

   uint8_t pData[100] = {0};
 8001e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2260      	movs	r2, #96	; 0x60
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f008 fd1b 	bl	800a8a6 <memset>
   /**********                           *********
    * ******** INIT MPU-9250 (IMU_10DOF) *********
    * ********                           *********
    */

   printf("initialisation de l'IMU \r\n \r\n");
 8001e70:	4860      	ldr	r0, [pc, #384]	; (8001ff4 <main+0x234>)
 8001e72:	f009 faa5 	bl	800b3c0 <puts>

   // Initialisation du capteur MPU-9250

   Init(&hi2c1);
 8001e76:	4860      	ldr	r0, [pc, #384]	; (8001ff8 <main+0x238>)
 8001e78:	f7ff f9a6 	bl	80011c8 <Init>

   // vérification identité capteur MPU-9250

   pData[0]= WHO_AM_I_MPU9250;
 8001e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e84:	2275      	movs	r2, #117	; 0x75
 8001e86:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Master_Transmit(&hi2c1, MPU_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001e88:	1d3a      	adds	r2, r7, #4
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	2301      	movs	r3, #1
 8001e92:	21d0      	movs	r1, #208	; 0xd0
 8001e94:	4858      	ldr	r0, [pc, #352]	; (8001ff8 <main+0x238>)
 8001e96:	f001 fb95 	bl	80035c4 <HAL_I2C_Master_Transmit>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <main+0xe6>
    {
  	  printf("il y a une erreur avec I2C Master Transmit \r\n");
 8001ea0:	4856      	ldr	r0, [pc, #344]	; (8001ffc <main+0x23c>)
 8001ea2:	f009 fa8d 	bl	800b3c0 <puts>
    }
    if(HAL_I2C_Master_Receive(&hi2c1, MPU_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001ea6:	1d3a      	adds	r2, r7, #4
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	2301      	movs	r3, #1
 8001eb0:	21d0      	movs	r1, #208	; 0xd0
 8001eb2:	4851      	ldr	r0, [pc, #324]	; (8001ff8 <main+0x238>)
 8001eb4:	f001 fc84 	bl	80037c0 <HAL_I2C_Master_Receive>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d002      	beq.n	8001ec4 <main+0x104>
    {
  	  printf("il y a une erreur avec I2C Master Receive \r\n");
 8001ebe:	4850      	ldr	r0, [pc, #320]	; (8002000 <main+0x240>)
 8001ec0:	f009 fa7e 	bl	800b3c0 <puts>
    }


    printf(" L'identifiant du capteur est : %x \r\n", pData[0]);
 8001ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	484c      	ldr	r0, [pc, #304]	; (8002004 <main+0x244>)
 8001ed2:	f009 f9ef 	bl	800b2b4 <iprintf>
    if((pData[0] =! 0x71))
 8001ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
    {
  	  printf("ce n'est pas le bon capteur \r\n");
    }
    else
  	  printf("MPU-9250 identified \r\n");
 8001ee2:	4849      	ldr	r0, [pc, #292]	; (8002008 <main+0x248>)
 8001ee4:	f009 fa6c 	bl	800b3c0 <puts>

    // vérification identité AK8963C (magnétomètre)

    pData[0]= WHO_AM_I_AK8963;
 8001ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
      if(HAL_I2C_Master_Transmit(&hi2c1, MAGNETO_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001ef4:	1d3a      	adds	r2, r7, #4
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2301      	movs	r3, #1
 8001efe:	2118      	movs	r1, #24
 8001f00:	483d      	ldr	r0, [pc, #244]	; (8001ff8 <main+0x238>)
 8001f02:	f001 fb5f 	bl	80035c4 <HAL_I2C_Master_Transmit>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <main+0x152>
      {
    	  printf("il y a une erreur avec I2C Master Transmit \r\n");
 8001f0c:	483b      	ldr	r0, [pc, #236]	; (8001ffc <main+0x23c>)
 8001f0e:	f009 fa57 	bl	800b3c0 <puts>
      }
      if(HAL_I2C_Master_Receive(&hi2c1, MAGNETO_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001f12:	1d3a      	adds	r2, r7, #4
 8001f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	2118      	movs	r1, #24
 8001f1e:	4836      	ldr	r0, [pc, #216]	; (8001ff8 <main+0x238>)
 8001f20:	f001 fc4e 	bl	80037c0 <HAL_I2C_Master_Receive>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <main+0x170>
      {
    	  printf("il y a une erreur avec I2C Master Receive \r\n");
 8001f2a:	4835      	ldr	r0, [pc, #212]	; (8002000 <main+0x240>)
 8001f2c:	f009 fa48 	bl	800b3c0 <puts>
      }


      printf(" L'identifiant du magnétomètre est : %x \r\n", pData[0]);
 8001f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4833      	ldr	r0, [pc, #204]	; (800200c <main+0x24c>)
 8001f3e:	f009 f9b9 	bl	800b2b4 <iprintf>
      if((pData[0] =! 0x48))
 8001f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
      {
    	  printf("ce n'est pas le bon capteur \r\n  ****** \r\n ****** \r\n ****** \r\n");
      }
      else
    	  printf("AK8963C identified \r\n  ****** \r\n ****** \r\n ****** \r\n");
 8001f4e:	4830      	ldr	r0, [pc, #192]	; (8002010 <main+0x250>)
 8001f50:	f009 fa36 	bl	800b3c0 <puts>



  // check les périphériques i2c disponibles

    for (i=0;i<256;i++){
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8001f5a:	e02a      	b.n	8001fb2 <main+0x1f2>
         	  if(HAL_I2C_IsDeviceReady(&hi2c1, i, 4, 20)==HAL_OK){
 8001f5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f60:	b299      	uxth	r1, r3
 8001f62:	2314      	movs	r3, #20
 8001f64:	2204      	movs	r2, #4
 8001f66:	4824      	ldr	r0, [pc, #144]	; (8001ff8 <main+0x238>)
 8001f68:	f002 f970 	bl	800424c <HAL_I2C_IsDeviceReady>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d11a      	bne.n	8001fa8 <main+0x1e8>
         		  Devices[x]=i;
 8001f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f76:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001f7a:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8001f7e:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8001f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
         		  printf("%d \r\n",Devices[x]);
 8001f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001f8e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8001f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f96:	4619      	mov	r1, r3
 8001f98:	481e      	ldr	r0, [pc, #120]	; (8002014 <main+0x254>)
 8001f9a:	f009 f98b 	bl	800b2b4 <iprintf>
         		  x=x+1;
 8001f9e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    for (i=0;i<256;i++){
 8001fa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fac:	3301      	adds	r3, #1
 8001fae:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8001fb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fb6:	2bff      	cmp	r3, #255	; 0xff
 8001fb8:	ddd0      	ble.n	8001f5c <main+0x19c>
     * ******** INITIALISATION Servos *********
     * ********                       *********
     */


    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4816      	ldr	r0, [pc, #88]	; (8002018 <main+0x258>)
 8001fbe:	f005 f9cf 	bl	8007360 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001fc2:	2104      	movs	r1, #4
 8001fc4:	4814      	ldr	r0, [pc, #80]	; (8002018 <main+0x258>)
 8001fc6:	f005 f9cb 	bl	8007360 <HAL_TIM_PWM_Start>

  //vTaskStartScheduler();
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001fca:	f7ff fc1d 	bl	8001808 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001fce:	f006 ffb7 	bl	8008f40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <main+0x212>
 8001fd4:	f3af 8000 	nop.w
 8001fd8:	f1cc6096 	.word	0xf1cc6096
 8001fdc:	40459c65 	.word	0x40459c65
 8001fe0:	5b05b05b 	.word	0x5b05b05b
 8001fe4:	bfab05b0 	.word	0xbfab05b0
 8001fe8:	20000968 	.word	0x20000968
 8001fec:	0800f02c 	.word	0x0800f02c
 8001ff0:	0800f048 	.word	0x0800f048
 8001ff4:	0800f064 	.word	0x0800f064
 8001ff8:	20000914 	.word	0x20000914
 8001ffc:	0800f084 	.word	0x0800f084
 8002000:	0800f0b4 	.word	0x0800f0b4
 8002004:	0800f0e0 	.word	0x0800f0e0
 8002008:	0800f108 	.word	0x0800f108
 800200c:	0800f120 	.word	0x0800f120
 8002010:	0800f150 	.word	0x0800f150
 8002014:	0800f184 	.word	0x0800f184
 8002018:	20000a8c 	.word	0x20000a8c

0800201c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b094      	sub	sp, #80	; 0x50
 8002020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002022:	f107 0320 	add.w	r3, r7, #32
 8002026:	2230      	movs	r2, #48	; 0x30
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f008 fc3b 	bl	800a8a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002030:	f107 030c 	add.w	r3, r7, #12
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002040:	2300      	movs	r3, #0
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <SystemClock_Config+0xcc>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	4a27      	ldr	r2, [pc, #156]	; (80020e8 <SystemClock_Config+0xcc>)
 800204a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204e:	6413      	str	r3, [r2, #64]	; 0x40
 8002050:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <SystemClock_Config+0xcc>)
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800205c:	2300      	movs	r3, #0
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	4b22      	ldr	r3, [pc, #136]	; (80020ec <SystemClock_Config+0xd0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a21      	ldr	r2, [pc, #132]	; (80020ec <SystemClock_Config+0xd0>)
 8002066:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <SystemClock_Config+0xd0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002078:	2302      	movs	r3, #2
 800207a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800207c:	2301      	movs	r3, #1
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002080:	2310      	movs	r3, #16
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002084:	2302      	movs	r3, #2
 8002086:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002088:	2300      	movs	r3, #0
 800208a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800208c:	2310      	movs	r3, #16
 800208e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002090:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002094:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002096:	2304      	movs	r3, #4
 8002098:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800209a:	2304      	movs	r3, #4
 800209c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800209e:	f107 0320 	add.w	r3, r7, #32
 80020a2:	4618      	mov	r0, r3
 80020a4:	f004 fb86 	bl	80067b4 <HAL_RCC_OscConfig>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80020ae:	f000 f831 	bl	8002114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020b2:	230f      	movs	r3, #15
 80020b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020b6:	2302      	movs	r3, #2
 80020b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020c8:	f107 030c 	add.w	r3, r7, #12
 80020cc:	2102      	movs	r1, #2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f004 fde8 	bl	8006ca4 <HAL_RCC_ClockConfig>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80020da:	f000 f81b 	bl	8002114 <Error_Handler>
  }
}
 80020de:	bf00      	nop
 80020e0:	3750      	adds	r7, #80	; 0x50
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40007000 	.word	0x40007000

080020f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a04      	ldr	r2, [pc, #16]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d101      	bne.n	8002106 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002102:	f000 fd7b 	bl	8002bfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40010000 	.word	0x40010000

08002114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002118:	b672      	cpsid	i
}
 800211a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800211c:	e7fe      	b.n	800211c <Error_Handler+0x8>
	...

08002120 <Task_Drop_detection>:
	 * @param Drop_flag Drapeau qui permet d'indiquer que le Cansat a été largué
	 * @retval None
	 */

void Task_Drop_detection(void * pvParameters)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af02      	add	r7, sp, #8
 8002126:	6078      	str	r0, [r7, #4]
	uint16_t gpio_value = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	82fb      	strh	r3, [r7, #22]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500;
 800212c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002130:	613b      	str	r3, [r7, #16]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8002132:	f007 fc21 	bl	8009978 <xTaskGetTickCount>
 8002136:	4603      	mov	r3, r0
 8002138:	60fb      	str	r3, [r7, #12]

	for(;;)
	{

		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800213a:	f107 030c 	add.w	r3, r7, #12
 800213e:	6939      	ldr	r1, [r7, #16]
 8002140:	4618      	mov	r0, r3
 8002142:	f007 fa53 	bl	80095ec <vTaskDelayUntil>

		gpio_value = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);  // prend la valeur 1 lorsque pas d'obstacles
 8002146:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800214a:	4811      	ldr	r0, [pc, #68]	; (8002190 <Task_Drop_detection+0x70>)
 800214c:	f001 f8a0 	bl	8003290 <HAL_GPIO_ReadPin>
 8002150:	4603      	mov	r3, r0
 8002152:	82fb      	strh	r3, [r7, #22]
															// prend la valeur 0 lorsque detection d'un obstacle
		printf("valeur du capteur IR : %d \r\n", gpio_value);
 8002154:	8afb      	ldrh	r3, [r7, #22]
 8002156:	4619      	mov	r1, r3
 8002158:	480e      	ldr	r0, [pc, #56]	; (8002194 <Task_Drop_detection+0x74>)
 800215a:	f009 f8ab 	bl	800b2b4 <iprintf>

		if(gpio_value == 1)
 800215e:	8afb      	ldrh	r3, [r7, #22]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d1ea      	bne.n	800213a <Task_Drop_detection+0x1a>
		{
			Drop_flag = 1;
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <Task_Drop_detection+0x78>)
 8002166:	2201      	movs	r2, #1
 8002168:	601a      	str	r2, [r3, #0]
			printf("largage effectue \r\n");
 800216a:	480c      	ldr	r0, [pc, #48]	; (800219c <Task_Drop_detection+0x7c>)
 800216c:	f009 f928 	bl	800b3c0 <puts>
			xTaskCreate(Task_lancement_Cansat, "Lancement du Cansat", 500, NULL, osPriorityHigh, &pxLancement_Cansat);
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <Task_Drop_detection+0x80>)
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	2302      	movs	r3, #2
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	2300      	movs	r3, #0
 800217a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800217e:	4909      	ldr	r1, [pc, #36]	; (80021a4 <Task_Drop_detection+0x84>)
 8002180:	4809      	ldr	r0, [pc, #36]	; (80021a8 <Task_Drop_detection+0x88>)
 8002182:	f007 f855 	bl	8009230 <xTaskCreate>
			vTaskDelete(NULL);
 8002186:	2000      	movs	r0, #0
 8002188:	f007 f9a0 	bl	80094cc <vTaskDelete>
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800218c:	e7d5      	b.n	800213a <Task_Drop_detection+0x1a>
 800218e:	bf00      	nop
 8002190:	40020000 	.word	0x40020000
 8002194:	0800f18c 	.word	0x0800f18c
 8002198:	20000a30 	.word	0x20000a30
 800219c:	0800f1ac 	.word	0x0800f1ac
 80021a0:	2000020c 	.word	0x2000020c
 80021a4:	0800f1c0 	.word	0x0800f1c0
 80021a8:	08001009 	.word	0x08001009

080021ac <servoSetPositionLeft>:
 	 * @brief Positionnement du servo gauche
 	 * @Note Cette fonction permet de placer le servo comme on le souhaite avec 4 positions différentes
	 * @param int position : 0,1,2 ou 3
	 * @retval None
	 */
void servoSetPositionLeft (int position){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	if (position == 0){
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d104      	bne.n	80021c4 <servoSetPositionLeft+0x18>
		TIM2->CCR1 = POSITION_0_LEFT;
 80021ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021be:	2250      	movs	r2, #80	; 0x50
 80021c0:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR1 = POSITION_3_LEFT;
	}
	else {
		printf("Vous ne devez mettre en entree que 0,1,2 ou 3 \r\n");
	}
}
 80021c2:	e01a      	b.n	80021fa <servoSetPositionLeft+0x4e>
	else if (position == 1){
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d104      	bne.n	80021d4 <servoSetPositionLeft+0x28>
			TIM2->CCR1 = POSITION_1_LEFT;
 80021ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021ce:	226e      	movs	r2, #110	; 0x6e
 80021d0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021d2:	e012      	b.n	80021fa <servoSetPositionLeft+0x4e>
	else if (position == 2){
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d104      	bne.n	80021e4 <servoSetPositionLeft+0x38>
			TIM2->CCR1 = POSITION_2_LEFT;
 80021da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021de:	22aa      	movs	r2, #170	; 0xaa
 80021e0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021e2:	e00a      	b.n	80021fa <servoSetPositionLeft+0x4e>
	else if (position == 3){
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d104      	bne.n	80021f4 <servoSetPositionLeft+0x48>
			TIM2->CCR1 = POSITION_3_LEFT;
 80021ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021ee:	22fa      	movs	r2, #250	; 0xfa
 80021f0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021f2:	e002      	b.n	80021fa <servoSetPositionLeft+0x4e>
		printf("Vous ne devez mettre en entree que 0,1,2 ou 3 \r\n");
 80021f4:	4803      	ldr	r0, [pc, #12]	; (8002204 <servoSetPositionLeft+0x58>)
 80021f6:	f009 f8e3 	bl	800b3c0 <puts>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	0800f1d4 	.word	0x0800f1d4

08002208 <servoSetPositionRight>:
 	 * @brief Positionnement du servo droit
 	 * @Note Cette fonction permet de placer le servo comme on le souhaite avec 4 positions différentes
	 * @param int position : 0,1,2 ou 3
	 * @retval None
	 */
void servoSetPositionRight (int position){
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	if (position == 0){
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d104      	bne.n	8002220 <servoSetPositionRight+0x18>
		TIM2->CCR2 = POSITION_0_RIGHT;
 8002216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800221a:	22dc      	movs	r2, #220	; 0xdc
 800221c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR2 = POSITION_3_RIGHT;
	}
	else {
		printf("Vous ne devez mettre en entree 0,1,2 ou 3 \r\n");
	}
}
 800221e:	e01a      	b.n	8002256 <servoSetPositionRight+0x4e>
	else if (position == 1){
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d104      	bne.n	8002230 <servoSetPositionRight+0x28>
			TIM2->CCR2 = POSITION_1_RIGHT;
 8002226:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800222a:	22be      	movs	r2, #190	; 0xbe
 800222c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800222e:	e012      	b.n	8002256 <servoSetPositionRight+0x4e>
	else if (position == 2){
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d104      	bne.n	8002240 <servoSetPositionRight+0x38>
			TIM2->CCR2 = POSITION_2_RIGHT;
 8002236:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800223a:	2282      	movs	r2, #130	; 0x82
 800223c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800223e:	e00a      	b.n	8002256 <servoSetPositionRight+0x4e>
	else if (position == 3){
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d104      	bne.n	8002250 <servoSetPositionRight+0x48>
			TIM2->CCR2 = POSITION_3_RIGHT;
 8002246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800224a:	223c      	movs	r2, #60	; 0x3c
 800224c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800224e:	e002      	b.n	8002256 <servoSetPositionRight+0x4e>
		printf("Vous ne devez mettre en entree 0,1,2 ou 3 \r\n");
 8002250:	4803      	ldr	r0, [pc, #12]	; (8002260 <servoSetPositionRight+0x58>)
 8002252:	f009 f8b5 	bl	800b3c0 <puts>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	0800f204 	.word	0x0800f204

08002264 <choice_direction_intensity>:
 	 * @Note Cette fonction permet de choisir la direction dans laquelle le cansat doit aller ainsi que son intensité grâce à une différence d'angle
	 * @param int delta_teta : difference d'angle comprise entre 0 et 360 degrés
	 * @retval None
	 */

void choice_direction_intensity(unsigned int delta_teta){
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	if ((delta_teta<epsilon) || (delta_teta>360-epsilon)){
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b04      	cmp	r3, #4
 8002270:	d903      	bls.n	800227a <choice_direction_intensity+0x16>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 8002278:	d306      	bcc.n	8002288 <choice_direction_intensity+0x24>
		servoSetPositionLeft(0);
 800227a:	2000      	movs	r0, #0
 800227c:	f7ff ff96 	bl	80021ac <servoSetPositionLeft>
		servoSetPositionRight(0);
 8002280:	2000      	movs	r0, #0
 8002282:	f7ff ffc1 	bl	8002208 <servoSetPositionRight>
	}
	else {
		printf("cas non traité \r\n");
	}

}
 8002286:	e040      	b.n	800230a <choice_direction_intensity+0xa6>
	else if (delta_teta<teta_low){
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b1d      	cmp	r3, #29
 800228c:	d806      	bhi.n	800229c <choice_direction_intensity+0x38>
		servoSetPositionLeft(0);
 800228e:	2000      	movs	r0, #0
 8002290:	f7ff ff8c 	bl	80021ac <servoSetPositionLeft>
		servoSetPositionRight(1);
 8002294:	2001      	movs	r0, #1
 8002296:	f7ff ffb7 	bl	8002208 <servoSetPositionRight>
}
 800229a:	e036      	b.n	800230a <choice_direction_intensity+0xa6>
	else if (delta_teta>360-teta_low){
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80022a2:	d906      	bls.n	80022b2 <choice_direction_intensity+0x4e>
		servoSetPositionLeft(1);
 80022a4:	2001      	movs	r0, #1
 80022a6:	f7ff ff81 	bl	80021ac <servoSetPositionLeft>
		servoSetPositionRight(0);
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7ff ffac 	bl	8002208 <servoSetPositionRight>
}
 80022b0:	e02b      	b.n	800230a <choice_direction_intensity+0xa6>
	else if (delta_teta<teta_high){
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b63      	cmp	r3, #99	; 0x63
 80022b6:	d806      	bhi.n	80022c6 <choice_direction_intensity+0x62>
		servoSetPositionLeft(0);
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7ff ff77 	bl	80021ac <servoSetPositionLeft>
		servoSetPositionRight(2);
 80022be:	2002      	movs	r0, #2
 80022c0:	f7ff ffa2 	bl	8002208 <servoSetPositionRight>
}
 80022c4:	e021      	b.n	800230a <choice_direction_intensity+0xa6>
	else if (delta_teta>360-teta_high){
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022cc:	d906      	bls.n	80022dc <choice_direction_intensity+0x78>
		servoSetPositionLeft(2);
 80022ce:	2002      	movs	r0, #2
 80022d0:	f7ff ff6c 	bl	80021ac <servoSetPositionLeft>
		servoSetPositionRight(0);
 80022d4:	2000      	movs	r0, #0
 80022d6:	f7ff ff97 	bl	8002208 <servoSetPositionRight>
}
 80022da:	e016      	b.n	800230a <choice_direction_intensity+0xa6>
	else if (delta_teta<=180){
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2bb4      	cmp	r3, #180	; 0xb4
 80022e0:	d806      	bhi.n	80022f0 <choice_direction_intensity+0x8c>
		servoSetPositionLeft(0);
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7ff ff62 	bl	80021ac <servoSetPositionLeft>
		servoSetPositionRight(3);
 80022e8:	2003      	movs	r0, #3
 80022ea:	f7ff ff8d 	bl	8002208 <servoSetPositionRight>
}
 80022ee:	e00c      	b.n	800230a <choice_direction_intensity+0xa6>
	else if (delta_teta>180){
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2bb4      	cmp	r3, #180	; 0xb4
 80022f4:	d906      	bls.n	8002304 <choice_direction_intensity+0xa0>
		servoSetPositionLeft(3);
 80022f6:	2003      	movs	r0, #3
 80022f8:	f7ff ff58 	bl	80021ac <servoSetPositionLeft>
		servoSetPositionRight(0);
 80022fc:	2000      	movs	r0, #0
 80022fe:	f7ff ff83 	bl	8002208 <servoSetPositionRight>
}
 8002302:	e002      	b.n	800230a <choice_direction_intensity+0xa6>
		printf("cas non traité \r\n");
 8002304:	4803      	ldr	r0, [pc, #12]	; (8002314 <choice_direction_intensity+0xb0>)
 8002306:	f009 f85b 	bl	800b3c0 <puts>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	0800f230 	.word	0x0800f230

08002318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	4b12      	ldr	r3, [pc, #72]	; (800236c <HAL_MspInit+0x54>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	4a11      	ldr	r2, [pc, #68]	; (800236c <HAL_MspInit+0x54>)
 8002328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800232c:	6453      	str	r3, [r2, #68]	; 0x44
 800232e:	4b0f      	ldr	r3, [pc, #60]	; (800236c <HAL_MspInit+0x54>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	603b      	str	r3, [r7, #0]
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_MspInit+0x54>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a0a      	ldr	r2, [pc, #40]	; (800236c <HAL_MspInit+0x54>)
 8002344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <HAL_MspInit+0x54>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	210f      	movs	r1, #15
 800235a:	f06f 0001 	mvn.w	r0, #1
 800235e:	f000 fd49 	bl	8002df4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800

08002370 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08c      	sub	sp, #48	; 0x30
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002380:	2300      	movs	r3, #0
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <HAL_InitTick+0xd0>)
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002388:	4a2d      	ldr	r2, [pc, #180]	; (8002440 <HAL_InitTick+0xd0>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6453      	str	r3, [r2, #68]	; 0x44
 8002390:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <HAL_InitTick+0xd0>)
 8002392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800239c:	f107 020c 	add.w	r2, r7, #12
 80023a0:	f107 0310 	add.w	r3, r7, #16
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f004 fe9c 	bl	80070e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80023ac:	f004 fe86 	bl	80070bc <HAL_RCC_GetPCLK2Freq>
 80023b0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b4:	4a23      	ldr	r2, [pc, #140]	; (8002444 <HAL_InitTick+0xd4>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	0c9b      	lsrs	r3, r3, #18
 80023bc:	3b01      	subs	r3, #1
 80023be:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80023c0:	4b21      	ldr	r3, [pc, #132]	; (8002448 <HAL_InitTick+0xd8>)
 80023c2:	4a22      	ldr	r2, [pc, #136]	; (800244c <HAL_InitTick+0xdc>)
 80023c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80023c6:	4b20      	ldr	r3, [pc, #128]	; (8002448 <HAL_InitTick+0xd8>)
 80023c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80023ce:	4a1e      	ldr	r2, [pc, #120]	; (8002448 <HAL_InitTick+0xd8>)
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80023d4:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <HAL_InitTick+0xd8>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023da:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_InitTick+0xd8>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e0:	4b19      	ldr	r3, [pc, #100]	; (8002448 <HAL_InitTick+0xd8>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80023e6:	4818      	ldr	r0, [pc, #96]	; (8002448 <HAL_InitTick+0xd8>)
 80023e8:	f004 feae 	bl	8007148 <HAL_TIM_Base_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80023f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d11b      	bne.n	8002432 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80023fa:	4813      	ldr	r0, [pc, #76]	; (8002448 <HAL_InitTick+0xd8>)
 80023fc:	f004 fefe 	bl	80071fc <HAL_TIM_Base_Start_IT>
 8002400:	4603      	mov	r3, r0
 8002402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800240a:	2b00      	cmp	r3, #0
 800240c:	d111      	bne.n	8002432 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800240e:	2019      	movs	r0, #25
 8002410:	f000 fd0c 	bl	8002e2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b0f      	cmp	r3, #15
 8002418:	d808      	bhi.n	800242c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800241a:	2200      	movs	r2, #0
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	2019      	movs	r0, #25
 8002420:	f000 fce8 	bl	8002df4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <HAL_InitTick+0xe0>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	e002      	b.n	8002432 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002432:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002436:	4618      	mov	r0, r3
 8002438:	3730      	adds	r7, #48	; 0x30
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	431bde83 	.word	0x431bde83
 8002448:	20000a3c 	.word	0x20000a3c
 800244c:	40010000 	.word	0x40010000
 8002450:	20000004 	.word	0x20000004

08002454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <NMI_Handler+0x4>

0800245a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800245e:	e7fe      	b.n	800245e <HardFault_Handler+0x4>

08002460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002464:	e7fe      	b.n	8002464 <MemManage_Handler+0x4>

08002466 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800246a:	e7fe      	b.n	800246a <BusFault_Handler+0x4>

0800246c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002470:	e7fe      	b.n	8002470 <UsageFault_Handler+0x4>

08002472 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002484:	4802      	ldr	r0, [pc, #8]	; (8002490 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002486:	f005 f81b 	bl	80074c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000a3c 	.word	0x20000a3c

08002494 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002498:	4802      	ldr	r0, [pc, #8]	; (80024a4 <I2C1_EV_IRQHandler+0x10>)
 800249a:	f002 f805 	bl	80044a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000914 	.word	0x20000914

080024a8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <I2C1_ER_IRQHandler+0x10>)
 80024ae:	f002 f96c 	bl	800478a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000914 	.word	0x20000914

080024bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
/*
	BaseType_t higher_priority_task_woken = pdFALSE;
	vTaskNotifyGiveFromISR(pxGPS_Handler,&higher_priority_task_woken);
*/
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_gps_rx, 1);
 80024c0:	2201      	movs	r2, #1
 80024c2:	4906      	ldr	r1, [pc, #24]	; (80024dc <USART1_IRQHandler+0x20>)
 80024c4:	4806      	ldr	r0, [pc, #24]	; (80024e0 <USART1_IRQHandler+0x24>)
 80024c6:	f005 fd80 	bl	8007fca <HAL_UART_Receive_IT>

	it_rx_gps = 1;
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <USART1_IRQHandler+0x28>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024d0:	4803      	ldr	r0, [pc, #12]	; (80024e0 <USART1_IRQHandler+0x24>)
 80024d2:	f005 fdab 	bl	800802c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  //portYIELD_FROM_ISR(higher_priority_task_woken);

  /* USER CODE END USART1_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000a34 	.word	0x20000a34
 80024e0:	20000b1c 	.word	0x20000b1c
 80024e4:	20000a84 	.word	0x20000a84

080024e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80024ee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024f2:	f000 feff 	bl	80032f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  xTaskCreate(Task_Drop_detection, "Drop detection task", 500, NULL, osPriorityAboveNormal, &pxDrop_detection);
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <EXTI15_10_IRQHandler+0x2c>)
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	2301      	movs	r3, #1
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2300      	movs	r3, #0
 8002500:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002504:	4904      	ldr	r1, [pc, #16]	; (8002518 <EXTI15_10_IRQHandler+0x30>)
 8002506:	4805      	ldr	r0, [pc, #20]	; (800251c <EXTI15_10_IRQHandler+0x34>)
 8002508:	f006 fe92 	bl	8009230 <xTaskCreate>

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000208 	.word	0x20000208
 8002518:	0800f244 	.word	0x0800f244
 800251c:	08002121 	.word	0x08002121

08002520 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
	return 1;
 8002524:	2301      	movs	r3, #1
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <_kill>:

int _kill(int pid, int sig)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800253a:	f008 f883 	bl	800a644 <__errno>
 800253e:	4603      	mov	r3, r0
 8002540:	2216      	movs	r2, #22
 8002542:	601a      	str	r2, [r3, #0]
	return -1;
 8002544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <_exit>:

void _exit (int status)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002558:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ffe7 	bl	8002530 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002562:	e7fe      	b.n	8002562 <_exit+0x12>

08002564 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	e00a      	b.n	800258c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002576:	f3af 8000 	nop.w
 800257a:	4601      	mov	r1, r0
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	60ba      	str	r2, [r7, #8]
 8002582:	b2ca      	uxtb	r2, r1
 8002584:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	3301      	adds	r3, #1
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	429a      	cmp	r2, r3
 8002592:	dbf0      	blt.n	8002576 <_read+0x12>
	}

return len;
 8002594:	687b      	ldr	r3, [r7, #4]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	e009      	b.n	80025c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	60ba      	str	r2, [r7, #8]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fbef 	bl	8001d9c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3301      	adds	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	dbf1      	blt.n	80025b0 <_write+0x12>
	}
	return len;
 80025cc:	687b      	ldr	r3, [r7, #4]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <_close>:

int _close(int file)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
	return -1;
 80025de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <_isatty>:

int _isatty(int file)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
	return 1;
 8002616:	2301      	movs	r3, #1
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
	return 0;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002648:	4a14      	ldr	r2, [pc, #80]	; (800269c <_sbrk+0x5c>)
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <_sbrk+0x60>)
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002654:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <_sbrk+0x64>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <_sbrk+0x64>)
 800265e:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <_sbrk+0x68>)
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <_sbrk+0x64>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	429a      	cmp	r2, r3
 800266e:	d207      	bcs.n	8002680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002670:	f007 ffe8 	bl	800a644 <__errno>
 8002674:	4603      	mov	r3, r0
 8002676:	220c      	movs	r2, #12
 8002678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800267a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800267e:	e009      	b.n	8002694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <_sbrk+0x64>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002686:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <_sbrk+0x64>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	4a05      	ldr	r2, [pc, #20]	; (80026a4 <_sbrk+0x64>)
 8002690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002692:	68fb      	ldr	r3, [r7, #12]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20020000 	.word	0x20020000
 80026a0:	00000400 	.word	0x00000400
 80026a4:	20000a88 	.word	0x20000a88
 80026a8:	20004910 	.word	0x20004910

080026ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <SystemInit+0x20>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	4a05      	ldr	r2, [pc, #20]	; (80026cc <SystemInit+0x20>)
 80026b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08a      	sub	sp, #40	; 0x28
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d6:	f107 0320 	add.w	r3, r7, #32
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	609a      	str	r2, [r3, #8]
 80026ea:	60da      	str	r2, [r3, #12]
 80026ec:	611a      	str	r2, [r3, #16]
 80026ee:	615a      	str	r2, [r3, #20]
 80026f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026f2:	4b28      	ldr	r3, [pc, #160]	; (8002794 <MX_TIM2_Init+0xc4>)
 80026f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80026fa:	4b26      	ldr	r3, [pc, #152]	; (8002794 <MX_TIM2_Init+0xc4>)
 80026fc:	2253      	movs	r2, #83	; 0x53
 80026fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002700:	4b24      	ldr	r3, [pc, #144]	; (8002794 <MX_TIM2_Init+0xc4>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8002706:	4b23      	ldr	r3, [pc, #140]	; (8002794 <MX_TIM2_Init+0xc4>)
 8002708:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800270c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800270e:	4b21      	ldr	r3, [pc, #132]	; (8002794 <MX_TIM2_Init+0xc4>)
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002714:	4b1f      	ldr	r3, [pc, #124]	; (8002794 <MX_TIM2_Init+0xc4>)
 8002716:	2200      	movs	r2, #0
 8002718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800271a:	481e      	ldr	r0, [pc, #120]	; (8002794 <MX_TIM2_Init+0xc4>)
 800271c:	f004 fdd0 	bl	80072c0 <HAL_TIM_PWM_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002726:	f7ff fcf5 	bl	8002114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800272e:	2300      	movs	r3, #0
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002732:	f107 0320 	add.w	r3, r7, #32
 8002736:	4619      	mov	r1, r3
 8002738:	4816      	ldr	r0, [pc, #88]	; (8002794 <MX_TIM2_Init+0xc4>)
 800273a:	f005 fae5 	bl	8007d08 <HAL_TIMEx_MasterConfigSynchronization>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002744:	f7ff fce6 	bl	8002114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002748:	2360      	movs	r3, #96	; 0x60
 800274a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002750:	2300      	movs	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002758:	1d3b      	adds	r3, r7, #4
 800275a:	2200      	movs	r2, #0
 800275c:	4619      	mov	r1, r3
 800275e:	480d      	ldr	r0, [pc, #52]	; (8002794 <MX_TIM2_Init+0xc4>)
 8002760:	f004 ffb6 	bl	80076d0 <HAL_TIM_PWM_ConfigChannel>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800276a:	f7ff fcd3 	bl	8002114 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	2204      	movs	r2, #4
 8002772:	4619      	mov	r1, r3
 8002774:	4807      	ldr	r0, [pc, #28]	; (8002794 <MX_TIM2_Init+0xc4>)
 8002776:	f004 ffab 	bl	80076d0 <HAL_TIM_PWM_ConfigChannel>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002780:	f7ff fcc8 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002784:	4803      	ldr	r0, [pc, #12]	; (8002794 <MX_TIM2_Init+0xc4>)
 8002786:	f000 f897 	bl	80028b8 <HAL_TIM_MspPostInit>

}
 800278a:	bf00      	nop
 800278c:	3728      	adds	r7, #40	; 0x28
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000a8c 	.word	0x20000a8c

08002798 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800279e:	f107 0320 	add.w	r3, r7, #32
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027a8:	1d3b      	adds	r3, r7, #4
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	609a      	str	r2, [r3, #8]
 80027b2:	60da      	str	r2, [r3, #12]
 80027b4:	611a      	str	r2, [r3, #16]
 80027b6:	615a      	str	r2, [r3, #20]
 80027b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027ba:	4b22      	ldr	r3, [pc, #136]	; (8002844 <MX_TIM3_Init+0xac>)
 80027bc:	4a22      	ldr	r2, [pc, #136]	; (8002848 <MX_TIM3_Init+0xb0>)
 80027be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80027c0:	4b20      	ldr	r3, [pc, #128]	; (8002844 <MX_TIM3_Init+0xac>)
 80027c2:	2253      	movs	r2, #83	; 0x53
 80027c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c6:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <MX_TIM3_Init+0xac>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80027cc:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <MX_TIM3_Init+0xac>)
 80027ce:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80027d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <MX_TIM3_Init+0xac>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027da:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <MX_TIM3_Init+0xac>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027e0:	4818      	ldr	r0, [pc, #96]	; (8002844 <MX_TIM3_Init+0xac>)
 80027e2:	f004 fd6d 	bl	80072c0 <HAL_TIM_PWM_Init>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80027ec:	f7ff fc92 	bl	8002114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f0:	2300      	movs	r3, #0
 80027f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027f8:	f107 0320 	add.w	r3, r7, #32
 80027fc:	4619      	mov	r1, r3
 80027fe:	4811      	ldr	r0, [pc, #68]	; (8002844 <MX_TIM3_Init+0xac>)
 8002800:	f005 fa82 	bl	8007d08 <HAL_TIMEx_MasterConfigSynchronization>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800280a:	f7ff fc83 	bl	8002114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800280e:	2360      	movs	r3, #96	; 0x60
 8002810:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800281e:	1d3b      	adds	r3, r7, #4
 8002820:	2200      	movs	r2, #0
 8002822:	4619      	mov	r1, r3
 8002824:	4807      	ldr	r0, [pc, #28]	; (8002844 <MX_TIM3_Init+0xac>)
 8002826:	f004 ff53 	bl	80076d0 <HAL_TIM_PWM_ConfigChannel>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002830:	f7ff fc70 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002834:	4803      	ldr	r0, [pc, #12]	; (8002844 <MX_TIM3_Init+0xac>)
 8002836:	f000 f83f 	bl	80028b8 <HAL_TIM_MspPostInit>

}
 800283a:	bf00      	nop
 800283c:	3728      	adds	r7, #40	; 0x28
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000ad4 	.word	0x20000ad4
 8002848:	40000400 	.word	0x40000400

0800284c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285c:	d10e      	bne.n	800287c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <HAL_TIM_PWM_MspInit+0x64>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <HAL_TIM_PWM_MspInit+0x64>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6413      	str	r3, [r2, #64]	; 0x40
 800286e:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <HAL_TIM_PWM_MspInit+0x64>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800287a:	e012      	b.n	80028a2 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a0c      	ldr	r2, [pc, #48]	; (80028b4 <HAL_TIM_PWM_MspInit+0x68>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d10d      	bne.n	80028a2 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <HAL_TIM_PWM_MspInit+0x64>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	4a08      	ldr	r2, [pc, #32]	; (80028b0 <HAL_TIM_PWM_MspInit+0x64>)
 8002890:	f043 0302 	orr.w	r3, r3, #2
 8002894:	6413      	str	r3, [r2, #64]	; 0x40
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_TIM_PWM_MspInit+0x64>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	68bb      	ldr	r3, [r7, #8]
}
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40000400 	.word	0x40000400

080028b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d8:	d11e      	bne.n	8002918 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <HAL_TIM_MspPostInit+0xb0>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a21      	ldr	r2, [pc, #132]	; (8002968 <HAL_TIM_MspPostInit+0xb0>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b1f      	ldr	r3, [pc, #124]	; (8002968 <HAL_TIM_MspPostInit+0xb0>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028f6:	2303      	movs	r3, #3
 80028f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fa:	2302      	movs	r3, #2
 80028fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002906:	2301      	movs	r3, #1
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290a:	f107 0314 	add.w	r3, r7, #20
 800290e:	4619      	mov	r1, r3
 8002910:	4816      	ldr	r0, [pc, #88]	; (800296c <HAL_TIM_MspPostInit+0xb4>)
 8002912:	f000 fb39 	bl	8002f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002916:	e022      	b.n	800295e <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM3)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a14      	ldr	r2, [pc, #80]	; (8002970 <HAL_TIM_MspPostInit+0xb8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d11d      	bne.n	800295e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_TIM_MspPostInit+0xb0>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a0f      	ldr	r2, [pc, #60]	; (8002968 <HAL_TIM_MspPostInit+0xb0>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <HAL_TIM_MspPostInit+0xb0>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800293e:	2340      	movs	r3, #64	; 0x40
 8002940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294a:	2300      	movs	r3, #0
 800294c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800294e:	2302      	movs	r3, #2
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002952:	f107 0314 	add.w	r3, r7, #20
 8002956:	4619      	mov	r1, r3
 8002958:	4804      	ldr	r0, [pc, #16]	; (800296c <HAL_TIM_MspPostInit+0xb4>)
 800295a:	f000 fb15 	bl	8002f88 <HAL_GPIO_Init>
}
 800295e:	bf00      	nop
 8002960:	3728      	adds	r7, #40	; 0x28
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
 800296c:	40020000 	.word	0x40020000
 8002970:	40000400 	.word	0x40000400

08002974 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002978:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <MX_USART1_UART_Init+0x4c>)
 800297a:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <MX_USART1_UART_Init+0x50>)
 800297c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800297e:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <MX_USART1_UART_Init+0x4c>)
 8002980:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002984:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002986:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <MX_USART1_UART_Init+0x4c>)
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <MX_USART1_UART_Init+0x4c>)
 800298e:	2200      	movs	r2, #0
 8002990:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002992:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <MX_USART1_UART_Init+0x4c>)
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002998:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <MX_USART1_UART_Init+0x4c>)
 800299a:	220c      	movs	r2, #12
 800299c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800299e:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <MX_USART1_UART_Init+0x4c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029a4:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <MX_USART1_UART_Init+0x4c>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029aa:	4805      	ldr	r0, [pc, #20]	; (80029c0 <MX_USART1_UART_Init+0x4c>)
 80029ac:	f005 fa2e 	bl	8007e0c <HAL_UART_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80029b6:	f7ff fbad 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000b1c 	.word	0x20000b1c
 80029c4:	40011000 	.word	0x40011000

080029c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029ce:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <MX_USART2_UART_Init+0x50>)
 80029d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029e6:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029ec:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029ee:	220c      	movs	r2, #12
 80029f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029f2:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029fe:	4805      	ldr	r0, [pc, #20]	; (8002a14 <MX_USART2_UART_Init+0x4c>)
 8002a00:	f005 fa04 	bl	8007e0c <HAL_UART_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a0a:	f7ff fb83 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000b60 	.word	0x20000b60
 8002a18:	40004400 	.word	0x40004400

08002a1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08c      	sub	sp, #48	; 0x30
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 031c 	add.w	r3, r7, #28
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a45      	ldr	r2, [pc, #276]	; (8002b50 <HAL_UART_MspInit+0x134>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d153      	bne.n	8002ae6 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	4b44      	ldr	r3, [pc, #272]	; (8002b54 <HAL_UART_MspInit+0x138>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	4a43      	ldr	r2, [pc, #268]	; (8002b54 <HAL_UART_MspInit+0x138>)
 8002a48:	f043 0310 	orr.w	r3, r3, #16
 8002a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a4e:	4b41      	ldr	r3, [pc, #260]	; (8002b54 <HAL_UART_MspInit+0x138>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	61bb      	str	r3, [r7, #24]
 8002a58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	4b3d      	ldr	r3, [pc, #244]	; (8002b54 <HAL_UART_MspInit+0x138>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	4a3c      	ldr	r2, [pc, #240]	; (8002b54 <HAL_UART_MspInit+0x138>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6a:	4b3a      	ldr	r3, [pc, #232]	; (8002b54 <HAL_UART_MspInit+0x138>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <HAL_UART_MspInit+0x138>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a35      	ldr	r2, [pc, #212]	; (8002b54 <HAL_UART_MspInit+0x138>)
 8002a80:	f043 0302 	orr.w	r3, r3, #2
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b33      	ldr	r3, [pc, #204]	; (8002b54 <HAL_UART_MspInit+0x138>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002aa4:	2307      	movs	r3, #7
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa8:	f107 031c 	add.w	r3, r7, #28
 8002aac:	4619      	mov	r1, r3
 8002aae:	482a      	ldr	r0, [pc, #168]	; (8002b58 <HAL_UART_MspInit+0x13c>)
 8002ab0:	f000 fa6a 	bl	8002f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ab4:	2308      	movs	r3, #8
 8002ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ac4:	2307      	movs	r3, #7
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac8:	f107 031c 	add.w	r3, r7, #28
 8002acc:	4619      	mov	r1, r3
 8002ace:	4823      	ldr	r0, [pc, #140]	; (8002b5c <HAL_UART_MspInit+0x140>)
 8002ad0:	f000 fa5a 	bl	8002f88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2105      	movs	r1, #5
 8002ad8:	2025      	movs	r0, #37	; 0x25
 8002ada:	f000 f98b 	bl	8002df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ade:	2025      	movs	r0, #37	; 0x25
 8002ae0:	f000 f9a4 	bl	8002e2c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ae4:	e030      	b.n	8002b48 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART2)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a1d      	ldr	r2, [pc, #116]	; (8002b60 <HAL_UART_MspInit+0x144>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d12b      	bne.n	8002b48 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <HAL_UART_MspInit+0x138>)
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	4a16      	ldr	r2, [pc, #88]	; (8002b54 <HAL_UART_MspInit+0x138>)
 8002afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afe:	6413      	str	r3, [r2, #64]	; 0x40
 8002b00:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <HAL_UART_MspInit+0x138>)
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <HAL_UART_MspInit+0x138>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	4a0f      	ldr	r2, [pc, #60]	; (8002b54 <HAL_UART_MspInit+0x138>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1c:	4b0d      	ldr	r3, [pc, #52]	; (8002b54 <HAL_UART_MspInit+0x138>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b28:	230c      	movs	r3, #12
 8002b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b34:	2303      	movs	r3, #3
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b38:	2307      	movs	r3, #7
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3c:	f107 031c 	add.w	r3, r7, #28
 8002b40:	4619      	mov	r1, r3
 8002b42:	4805      	ldr	r0, [pc, #20]	; (8002b58 <HAL_UART_MspInit+0x13c>)
 8002b44:	f000 fa20 	bl	8002f88 <HAL_GPIO_Init>
}
 8002b48:	bf00      	nop
 8002b4a:	3730      	adds	r7, #48	; 0x30
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40011000 	.word	0x40011000
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40020000 	.word	0x40020000
 8002b5c:	40020400 	.word	0x40020400
 8002b60:	40004400 	.word	0x40004400

08002b64 <Reset_Handler>:
 8002b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b9c <LoopFillZerobss+0x12>
 8002b68:	480d      	ldr	r0, [pc, #52]	; (8002ba0 <LoopFillZerobss+0x16>)
 8002b6a:	490e      	ldr	r1, [pc, #56]	; (8002ba4 <LoopFillZerobss+0x1a>)
 8002b6c:	4a0e      	ldr	r2, [pc, #56]	; (8002ba8 <LoopFillZerobss+0x1e>)
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e002      	b.n	8002b78 <LoopCopyDataInit>

08002b72 <CopyDataInit>:
 8002b72:	58d4      	ldr	r4, [r2, r3]
 8002b74:	50c4      	str	r4, [r0, r3]
 8002b76:	3304      	adds	r3, #4

08002b78 <LoopCopyDataInit>:
 8002b78:	18c4      	adds	r4, r0, r3
 8002b7a:	428c      	cmp	r4, r1
 8002b7c:	d3f9      	bcc.n	8002b72 <CopyDataInit>
 8002b7e:	4a0b      	ldr	r2, [pc, #44]	; (8002bac <LoopFillZerobss+0x22>)
 8002b80:	4c0b      	ldr	r4, [pc, #44]	; (8002bb0 <LoopFillZerobss+0x26>)
 8002b82:	2300      	movs	r3, #0
 8002b84:	e001      	b.n	8002b8a <LoopFillZerobss>

08002b86 <FillZerobss>:
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	3204      	adds	r2, #4

08002b8a <LoopFillZerobss>:
 8002b8a:	42a2      	cmp	r2, r4
 8002b8c:	d3fb      	bcc.n	8002b86 <FillZerobss>
 8002b8e:	f7ff fd8d 	bl	80026ac <SystemInit>
 8002b92:	f007 fe53 	bl	800a83c <__libc_init_array>
 8002b96:	f7ff f913 	bl	8001dc0 <main>
 8002b9a:	4770      	bx	lr
 8002b9c:	20020000 	.word	0x20020000
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	200001e4 	.word	0x200001e4
 8002ba8:	0800f798 	.word	0x0800f798
 8002bac:	200001e8 	.word	0x200001e8
 8002bb0:	2000490c 	.word	0x2000490c

08002bb4 <ADC_IRQHandler>:
 8002bb4:	e7fe      	b.n	8002bb4 <ADC_IRQHandler>
	...

08002bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <HAL_Init+0x40>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0d      	ldr	r2, [pc, #52]	; (8002bf8 <HAL_Init+0x40>)
 8002bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_Init+0x40>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <HAL_Init+0x40>)
 8002bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bd4:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <HAL_Init+0x40>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a07      	ldr	r2, [pc, #28]	; (8002bf8 <HAL_Init+0x40>)
 8002bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be0:	2003      	movs	r0, #3
 8002be2:	f000 f8fc 	bl	8002dde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002be6:	200f      	movs	r0, #15
 8002be8:	f7ff fbc2 	bl	8002370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bec:	f7ff fb94 	bl	8002318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40023c00 	.word	0x40023c00

08002bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_IncTick+0x20>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_IncTick+0x24>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <HAL_IncTick+0x24>)
 8002c0e:	6013      	str	r3, [r2, #0]
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	20000008 	.word	0x20000008
 8002c20:	20000ba4 	.word	0x20000ba4

08002c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return uwTick;
 8002c28:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <HAL_GetTick+0x14>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	20000ba4 	.word	0x20000ba4

08002c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c44:	f7ff ffee 	bl	8002c24 <HAL_GetTick>
 8002c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c54:	d005      	beq.n	8002c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <HAL_Delay+0x44>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4413      	add	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c62:	bf00      	nop
 8002c64:	f7ff ffde 	bl	8002c24 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d8f7      	bhi.n	8002c64 <HAL_Delay+0x28>
  {
  }
}
 8002c74:	bf00      	nop
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000008 	.word	0x20000008

08002c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cb6:	4a04      	ldr	r2, [pc, #16]	; (8002cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	60d3      	str	r3, [r2, #12]
}
 8002cbc:	bf00      	nop
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd0:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	0a1b      	lsrs	r3, r3, #8
 8002cd6:	f003 0307 	and.w	r3, r3, #7
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	db0b      	blt.n	8002d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	f003 021f 	and.w	r2, r3, #31
 8002d00:	4907      	ldr	r1, [pc, #28]	; (8002d20 <__NVIC_EnableIRQ+0x38>)
 8002d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	2001      	movs	r0, #1
 8002d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000e100 	.word	0xe000e100

08002d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	6039      	str	r1, [r7, #0]
 8002d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	db0a      	blt.n	8002d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	490c      	ldr	r1, [pc, #48]	; (8002d70 <__NVIC_SetPriority+0x4c>)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	0112      	lsls	r2, r2, #4
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	440b      	add	r3, r1
 8002d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d4c:	e00a      	b.n	8002d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4908      	ldr	r1, [pc, #32]	; (8002d74 <__NVIC_SetPriority+0x50>)
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	3b04      	subs	r3, #4
 8002d5c:	0112      	lsls	r2, r2, #4
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	440b      	add	r3, r1
 8002d62:	761a      	strb	r2, [r3, #24]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000e100 	.word	0xe000e100
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b089      	sub	sp, #36	; 0x24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f1c3 0307 	rsb	r3, r3, #7
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	bf28      	it	cs
 8002d96:	2304      	movcs	r3, #4
 8002d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	2b06      	cmp	r3, #6
 8002da0:	d902      	bls.n	8002da8 <NVIC_EncodePriority+0x30>
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3b03      	subs	r3, #3
 8002da6:	e000      	b.n	8002daa <NVIC_EncodePriority+0x32>
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43da      	mvns	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	401a      	ands	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	43d9      	mvns	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd0:	4313      	orrs	r3, r2
         );
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3724      	adds	r7, #36	; 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ff4c 	bl	8002c84 <__NVIC_SetPriorityGrouping>
}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e06:	f7ff ff61 	bl	8002ccc <__NVIC_GetPriorityGrouping>
 8002e0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	6978      	ldr	r0, [r7, #20]
 8002e12:	f7ff ffb1 	bl	8002d78 <NVIC_EncodePriority>
 8002e16:	4602      	mov	r2, r0
 8002e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ff80 	bl	8002d24 <__NVIC_SetPriority>
}
 8002e24:	bf00      	nop
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff54 	bl	8002ce8 <__NVIC_EnableIRQ>
}
 8002e40:	bf00      	nop
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e56:	f7ff fee5 	bl	8002c24 <HAL_GetTick>
 8002e5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d008      	beq.n	8002e7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2280      	movs	r2, #128	; 0x80
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e052      	b.n	8002f20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0216 	bic.w	r2, r2, #22
 8002e88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <HAL_DMA_Abort+0x62>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0208 	bic.w	r2, r2, #8
 8002eb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0201 	bic.w	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eca:	e013      	b.n	8002ef4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ecc:	f7ff feaa 	bl	8002c24 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b05      	cmp	r3, #5
 8002ed8:	d90c      	bls.n	8002ef4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2220      	movs	r2, #32
 8002ede:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e015      	b.n	8002f20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1e4      	bne.n	8002ecc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f06:	223f      	movs	r2, #63	; 0x3f
 8002f08:	409a      	lsls	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d004      	beq.n	8002f46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2280      	movs	r2, #128	; 0x80
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e00c      	b.n	8002f60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2205      	movs	r2, #5
 8002f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0201 	bic.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f7a:	b2db      	uxtb	r3, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b089      	sub	sp, #36	; 0x24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	e159      	b.n	8003258 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	f040 8148 	bne.w	8003252 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d005      	beq.n	8002fda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d130      	bne.n	800303c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003010:	2201      	movs	r2, #1
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	f003 0201 	and.w	r2, r3, #1
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	2b03      	cmp	r3, #3
 8003046:	d017      	beq.n	8003078 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	2203      	movs	r2, #3
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d123      	bne.n	80030cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	08da      	lsrs	r2, r3, #3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3208      	adds	r2, #8
 800308c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	220f      	movs	r2, #15
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	08da      	lsrs	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3208      	adds	r2, #8
 80030c6:	69b9      	ldr	r1, [r7, #24]
 80030c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	2203      	movs	r2, #3
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0203 	and.w	r2, r3, #3
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80a2 	beq.w	8003252 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	4b57      	ldr	r3, [pc, #348]	; (8003270 <HAL_GPIO_Init+0x2e8>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	4a56      	ldr	r2, [pc, #344]	; (8003270 <HAL_GPIO_Init+0x2e8>)
 8003118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800311c:	6453      	str	r3, [r2, #68]	; 0x44
 800311e:	4b54      	ldr	r3, [pc, #336]	; (8003270 <HAL_GPIO_Init+0x2e8>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800312a:	4a52      	ldr	r2, [pc, #328]	; (8003274 <HAL_GPIO_Init+0x2ec>)
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	089b      	lsrs	r3, r3, #2
 8003130:	3302      	adds	r3, #2
 8003132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	220f      	movs	r2, #15
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a49      	ldr	r2, [pc, #292]	; (8003278 <HAL_GPIO_Init+0x2f0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d019      	beq.n	800318a <HAL_GPIO_Init+0x202>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a48      	ldr	r2, [pc, #288]	; (800327c <HAL_GPIO_Init+0x2f4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <HAL_GPIO_Init+0x1fe>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a47      	ldr	r2, [pc, #284]	; (8003280 <HAL_GPIO_Init+0x2f8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00d      	beq.n	8003182 <HAL_GPIO_Init+0x1fa>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a46      	ldr	r2, [pc, #280]	; (8003284 <HAL_GPIO_Init+0x2fc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d007      	beq.n	800317e <HAL_GPIO_Init+0x1f6>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a45      	ldr	r2, [pc, #276]	; (8003288 <HAL_GPIO_Init+0x300>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <HAL_GPIO_Init+0x1f2>
 8003176:	2304      	movs	r3, #4
 8003178:	e008      	b.n	800318c <HAL_GPIO_Init+0x204>
 800317a:	2307      	movs	r3, #7
 800317c:	e006      	b.n	800318c <HAL_GPIO_Init+0x204>
 800317e:	2303      	movs	r3, #3
 8003180:	e004      	b.n	800318c <HAL_GPIO_Init+0x204>
 8003182:	2302      	movs	r3, #2
 8003184:	e002      	b.n	800318c <HAL_GPIO_Init+0x204>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_GPIO_Init+0x204>
 800318a:	2300      	movs	r3, #0
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	f002 0203 	and.w	r2, r2, #3
 8003192:	0092      	lsls	r2, r2, #2
 8003194:	4093      	lsls	r3, r2
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800319c:	4935      	ldr	r1, [pc, #212]	; (8003274 <HAL_GPIO_Init+0x2ec>)
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	089b      	lsrs	r3, r3, #2
 80031a2:	3302      	adds	r3, #2
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031aa:	4b38      	ldr	r3, [pc, #224]	; (800328c <HAL_GPIO_Init+0x304>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ce:	4a2f      	ldr	r2, [pc, #188]	; (800328c <HAL_GPIO_Init+0x304>)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031d4:	4b2d      	ldr	r3, [pc, #180]	; (800328c <HAL_GPIO_Init+0x304>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031f8:	4a24      	ldr	r2, [pc, #144]	; (800328c <HAL_GPIO_Init+0x304>)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031fe:	4b23      	ldr	r3, [pc, #140]	; (800328c <HAL_GPIO_Init+0x304>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003222:	4a1a      	ldr	r2, [pc, #104]	; (800328c <HAL_GPIO_Init+0x304>)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003228:	4b18      	ldr	r3, [pc, #96]	; (800328c <HAL_GPIO_Init+0x304>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800324c:	4a0f      	ldr	r2, [pc, #60]	; (800328c <HAL_GPIO_Init+0x304>)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3301      	adds	r3, #1
 8003256:	61fb      	str	r3, [r7, #28]
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	2b0f      	cmp	r3, #15
 800325c:	f67f aea2 	bls.w	8002fa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003260:	bf00      	nop
 8003262:	bf00      	nop
 8003264:	3724      	adds	r7, #36	; 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
 8003274:	40013800 	.word	0x40013800
 8003278:	40020000 	.word	0x40020000
 800327c:	40020400 	.word	0x40020400
 8003280:	40020800 	.word	0x40020800
 8003284:	40020c00 	.word	0x40020c00
 8003288:	40021000 	.word	0x40021000
 800328c:	40013c00 	.word	0x40013c00

08003290 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	887b      	ldrh	r3, [r7, #2]
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
 80032ac:	e001      	b.n	80032b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032ae:	2300      	movs	r3, #0
 80032b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	807b      	strh	r3, [r7, #2]
 80032cc:	4613      	mov	r3, r2
 80032ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032d0:	787b      	ldrb	r3, [r7, #1]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032d6:	887a      	ldrh	r2, [r7, #2]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032dc:	e003      	b.n	80032e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032de:	887b      	ldrh	r3, [r7, #2]
 80032e0:	041a      	lsls	r2, r3, #16
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	619a      	str	r2, [r3, #24]
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
	...

080032f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d006      	beq.n	8003318 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800330a:	4a05      	ldr	r2, [pc, #20]	; (8003320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	4618      	mov	r0, r3
 8003314:	f000 f806 	bl	8003324 <HAL_GPIO_EXTI_Callback>
  }
}
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40013c00 	.word	0x40013c00

08003324 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e12b      	b.n	80035a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fe fcc2 	bl	8001cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2224      	movs	r2, #36	; 0x24
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0201 	bic.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800338e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800339e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033a0:	f003 fe78 	bl	8007094 <HAL_RCC_GetPCLK1Freq>
 80033a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	4a81      	ldr	r2, [pc, #516]	; (80035b0 <HAL_I2C_Init+0x274>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d807      	bhi.n	80033c0 <HAL_I2C_Init+0x84>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4a80      	ldr	r2, [pc, #512]	; (80035b4 <HAL_I2C_Init+0x278>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	bf94      	ite	ls
 80033b8:	2301      	movls	r3, #1
 80033ba:	2300      	movhi	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	e006      	b.n	80033ce <HAL_I2C_Init+0x92>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4a7d      	ldr	r2, [pc, #500]	; (80035b8 <HAL_I2C_Init+0x27c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	bf94      	ite	ls
 80033c8:	2301      	movls	r3, #1
 80033ca:	2300      	movhi	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e0e7      	b.n	80035a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4a78      	ldr	r2, [pc, #480]	; (80035bc <HAL_I2C_Init+0x280>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	0c9b      	lsrs	r3, r3, #18
 80033e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	4a6a      	ldr	r2, [pc, #424]	; (80035b0 <HAL_I2C_Init+0x274>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d802      	bhi.n	8003410 <HAL_I2C_Init+0xd4>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	3301      	adds	r3, #1
 800340e:	e009      	b.n	8003424 <HAL_I2C_Init+0xe8>
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003416:	fb02 f303 	mul.w	r3, r2, r3
 800341a:	4a69      	ldr	r2, [pc, #420]	; (80035c0 <HAL_I2C_Init+0x284>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	099b      	lsrs	r3, r3, #6
 8003422:	3301      	adds	r3, #1
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	430b      	orrs	r3, r1
 800342a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003436:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	495c      	ldr	r1, [pc, #368]	; (80035b0 <HAL_I2C_Init+0x274>)
 8003440:	428b      	cmp	r3, r1
 8003442:	d819      	bhi.n	8003478 <HAL_I2C_Init+0x13c>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1e59      	subs	r1, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003452:	1c59      	adds	r1, r3, #1
 8003454:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003458:	400b      	ands	r3, r1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_I2C_Init+0x138>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1e59      	subs	r1, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	fbb1 f3f3 	udiv	r3, r1, r3
 800346c:	3301      	adds	r3, #1
 800346e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003472:	e051      	b.n	8003518 <HAL_I2C_Init+0x1dc>
 8003474:	2304      	movs	r3, #4
 8003476:	e04f      	b.n	8003518 <HAL_I2C_Init+0x1dc>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d111      	bne.n	80034a4 <HAL_I2C_Init+0x168>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1e58      	subs	r0, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6859      	ldr	r1, [r3, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	440b      	add	r3, r1
 800348e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003492:	3301      	adds	r3, #1
 8003494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003498:	2b00      	cmp	r3, #0
 800349a:	bf0c      	ite	eq
 800349c:	2301      	moveq	r3, #1
 800349e:	2300      	movne	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	e012      	b.n	80034ca <HAL_I2C_Init+0x18e>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	1e58      	subs	r0, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6859      	ldr	r1, [r3, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	0099      	lsls	r1, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ba:	3301      	adds	r3, #1
 80034bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_I2C_Init+0x196>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e022      	b.n	8003518 <HAL_I2C_Init+0x1dc>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10e      	bne.n	80034f8 <HAL_I2C_Init+0x1bc>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	1e58      	subs	r0, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6859      	ldr	r1, [r3, #4]
 80034e2:	460b      	mov	r3, r1
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	440b      	add	r3, r1
 80034e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ec:	3301      	adds	r3, #1
 80034ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f6:	e00f      	b.n	8003518 <HAL_I2C_Init+0x1dc>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	1e58      	subs	r0, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6859      	ldr	r1, [r3, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	0099      	lsls	r1, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	fbb0 f3f3 	udiv	r3, r0, r3
 800350e:	3301      	adds	r3, #1
 8003510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003514:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	6809      	ldr	r1, [r1, #0]
 800351c:	4313      	orrs	r3, r2
 800351e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69da      	ldr	r2, [r3, #28]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003546:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6911      	ldr	r1, [r2, #16]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	68d2      	ldr	r2, [r2, #12]
 8003552:	4311      	orrs	r1, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	430b      	orrs	r3, r1
 800355a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	000186a0 	.word	0x000186a0
 80035b4:	001e847f 	.word	0x001e847f
 80035b8:	003d08ff 	.word	0x003d08ff
 80035bc:	431bde83 	.word	0x431bde83
 80035c0:	10624dd3 	.word	0x10624dd3

080035c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	607a      	str	r2, [r7, #4]
 80035ce:	461a      	mov	r2, r3
 80035d0:	460b      	mov	r3, r1
 80035d2:	817b      	strh	r3, [r7, #10]
 80035d4:	4613      	mov	r3, r2
 80035d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035d8:	f7ff fb24 	bl	8002c24 <HAL_GetTick>
 80035dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	f040 80e0 	bne.w	80037ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	2319      	movs	r3, #25
 80035f2:	2201      	movs	r2, #1
 80035f4:	4970      	ldr	r1, [pc, #448]	; (80037b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f002 feb2 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003602:	2302      	movs	r3, #2
 8003604:	e0d3      	b.n	80037ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_I2C_Master_Transmit+0x50>
 8003610:	2302      	movs	r3, #2
 8003612:	e0cc      	b.n	80037ae <HAL_I2C_Master_Transmit+0x1ea>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b01      	cmp	r3, #1
 8003628:	d007      	beq.n	800363a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 0201 	orr.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003648:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2221      	movs	r2, #33	; 0x21
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2210      	movs	r2, #16
 8003656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	893a      	ldrh	r2, [r7, #8]
 800366a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4a50      	ldr	r2, [pc, #320]	; (80037bc <HAL_I2C_Master_Transmit+0x1f8>)
 800367a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800367c:	8979      	ldrh	r1, [r7, #10]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	6a3a      	ldr	r2, [r7, #32]
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f002 faf6 	bl	8005c74 <I2C_MasterRequestWrite>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e08d      	b.n	80037ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003692:	2300      	movs	r3, #0
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	613b      	str	r3, [r7, #16]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80036a8:	e066      	b.n	8003778 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	6a39      	ldr	r1, [r7, #32]
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f002 ff2c 	bl	800650c <I2C_WaitOnTXEFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00d      	beq.n	80036d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d107      	bne.n	80036d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e06b      	b.n	80037ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	781a      	ldrb	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b04      	cmp	r3, #4
 8003712:	d11b      	bne.n	800374c <HAL_I2C_Master_Transmit+0x188>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003718:	2b00      	cmp	r3, #0
 800371a:	d017      	beq.n	800374c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	781a      	ldrb	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	6a39      	ldr	r1, [r7, #32]
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f002 ff1c 	bl	800658e <I2C_WaitOnBTFFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00d      	beq.n	8003778 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	2b04      	cmp	r3, #4
 8003762:	d107      	bne.n	8003774 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003772:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e01a      	b.n	80037ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377c:	2b00      	cmp	r3, #0
 800377e:	d194      	bne.n	80036aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e000      	b.n	80037ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80037ac:	2302      	movs	r3, #2
  }
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	00100002 	.word	0x00100002
 80037bc:	ffff0000 	.word	0xffff0000

080037c0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08c      	sub	sp, #48	; 0x30
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	461a      	mov	r2, r3
 80037cc:	460b      	mov	r3, r1
 80037ce:	817b      	strh	r3, [r7, #10]
 80037d0:	4613      	mov	r3, r2
 80037d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037d4:	f7ff fa26 	bl	8002c24 <HAL_GetTick>
 80037d8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b20      	cmp	r3, #32
 80037e4:	f040 820b 	bne.w	8003bfe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	2319      	movs	r3, #25
 80037ee:	2201      	movs	r2, #1
 80037f0:	497c      	ldr	r1, [pc, #496]	; (80039e4 <HAL_I2C_Master_Receive+0x224>)
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f002 fdb4 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80037fe:	2302      	movs	r3, #2
 8003800:	e1fe      	b.n	8003c00 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_I2C_Master_Receive+0x50>
 800380c:	2302      	movs	r3, #2
 800380e:	e1f7      	b.n	8003c00 <HAL_I2C_Master_Receive+0x440>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b01      	cmp	r3, #1
 8003824:	d007      	beq.n	8003836 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0201 	orr.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003844:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2222      	movs	r2, #34	; 0x22
 800384a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2210      	movs	r2, #16
 8003852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	893a      	ldrh	r2, [r7, #8]
 8003866:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4a5c      	ldr	r2, [pc, #368]	; (80039e8 <HAL_I2C_Master_Receive+0x228>)
 8003876:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003878:	8979      	ldrh	r1, [r7, #10]
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f002 fa7a 	bl	8005d78 <I2C_MasterRequestRead>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e1b8      	b.n	8003c00 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003892:	2b00      	cmp	r3, #0
 8003894:	d113      	bne.n	80038be <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003896:	2300      	movs	r3, #0
 8003898:	623b      	str	r3, [r7, #32]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	623b      	str	r3, [r7, #32]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	623b      	str	r3, [r7, #32]
 80038aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	e18c      	b.n	8003bd8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d11b      	bne.n	80038fe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	e16c      	b.n	8003bd8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003902:	2b02      	cmp	r3, #2
 8003904:	d11b      	bne.n	800393e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003914:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003924:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003926:	2300      	movs	r3, #0
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	e14c      	b.n	8003bd8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800394c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003964:	e138      	b.n	8003bd8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396a:	2b03      	cmp	r3, #3
 800396c:	f200 80f1 	bhi.w	8003b52 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003974:	2b01      	cmp	r3, #1
 8003976:	d123      	bne.n	80039c0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f002 fe79 	bl	8006674 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e139      	b.n	8003c00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691a      	ldr	r2, [r3, #16]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039be:	e10b      	b.n	8003bd8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d14e      	bne.n	8003a66 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ce:	2200      	movs	r2, #0
 80039d0:	4906      	ldr	r1, [pc, #24]	; (80039ec <HAL_I2C_Master_Receive+0x22c>)
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f002 fcc4 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d008      	beq.n	80039f0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e10e      	b.n	8003c00 <HAL_I2C_Master_Receive+0x440>
 80039e2:	bf00      	nop
 80039e4:	00100002 	.word	0x00100002
 80039e8:	ffff0000 	.word	0xffff0000
 80039ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691a      	ldr	r2, [r3, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a64:	e0b8      	b.n	8003bd8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	4966      	ldr	r1, [pc, #408]	; (8003c08 <HAL_I2C_Master_Receive+0x448>)
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f002 fc75 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0bf      	b.n	8003c00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691a      	ldr	r2, [r3, #16]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	1c5a      	adds	r2, r3, #1
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	2200      	movs	r2, #0
 8003aca:	494f      	ldr	r1, [pc, #316]	; (8003c08 <HAL_I2C_Master_Receive+0x448>)
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f002 fc47 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e091      	b.n	8003c00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b50:	e042      	b.n	8003bd8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f002 fd8c 	bl	8006674 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e04c      	b.n	8003c00 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d118      	bne.n	8003bd8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f47f aec2 	bne.w	8003966 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e000      	b.n	8003c00 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
  }
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3728      	adds	r7, #40	; 0x28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	00010004 	.word	0x00010004

08003c0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	4608      	mov	r0, r1
 8003c16:	4611      	mov	r1, r2
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	817b      	strh	r3, [r7, #10]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	813b      	strh	r3, [r7, #8]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c26:	f7fe fffd 	bl	8002c24 <HAL_GetTick>
 8003c2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	f040 80d9 	bne.w	8003dec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	2319      	movs	r3, #25
 8003c40:	2201      	movs	r2, #1
 8003c42:	496d      	ldr	r1, [pc, #436]	; (8003df8 <HAL_I2C_Mem_Write+0x1ec>)
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f002 fb8b 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c50:	2302      	movs	r3, #2
 8003c52:	e0cc      	b.n	8003dee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <HAL_I2C_Mem_Write+0x56>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e0c5      	b.n	8003dee <HAL_I2C_Mem_Write+0x1e2>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d007      	beq.n	8003c88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2221      	movs	r2, #33	; 0x21
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2240      	movs	r2, #64	; 0x40
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a3a      	ldr	r2, [r7, #32]
 8003cb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4a4d      	ldr	r2, [pc, #308]	; (8003dfc <HAL_I2C_Mem_Write+0x1f0>)
 8003cc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cca:	88f8      	ldrh	r0, [r7, #6]
 8003ccc:	893a      	ldrh	r2, [r7, #8]
 8003cce:	8979      	ldrh	r1, [r7, #10]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	9301      	str	r3, [sp, #4]
 8003cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	4603      	mov	r3, r0
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f002 f91a 	bl	8005f14 <I2C_RequestMemoryWrite>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d052      	beq.n	8003d8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e081      	b.n	8003dee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f002 fc0c 	bl	800650c <I2C_WaitOnTXEFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00d      	beq.n	8003d16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d107      	bne.n	8003d12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e06b      	b.n	8003dee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	781a      	ldrb	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d11b      	bne.n	8003d8c <HAL_I2C_Mem_Write+0x180>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d017      	beq.n	8003d8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	781a      	ldrb	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1aa      	bne.n	8003cea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f002 fbf8 	bl	800658e <I2C_WaitOnBTFFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00d      	beq.n	8003dc0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d107      	bne.n	8003dbc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e016      	b.n	8003dee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	e000      	b.n	8003dee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003dec:	2302      	movs	r3, #2
  }
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	00100002 	.word	0x00100002
 8003dfc:	ffff0000 	.word	0xffff0000

08003e00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08c      	sub	sp, #48	; 0x30
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	4608      	mov	r0, r1
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4603      	mov	r3, r0
 8003e10:	817b      	strh	r3, [r7, #10]
 8003e12:	460b      	mov	r3, r1
 8003e14:	813b      	strh	r3, [r7, #8]
 8003e16:	4613      	mov	r3, r2
 8003e18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e1a:	f7fe ff03 	bl	8002c24 <HAL_GetTick>
 8003e1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	f040 8208 	bne.w	800423e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	2319      	movs	r3, #25
 8003e34:	2201      	movs	r2, #1
 8003e36:	497b      	ldr	r1, [pc, #492]	; (8004024 <HAL_I2C_Mem_Read+0x224>)
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f002 fa91 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
 8003e46:	e1fb      	b.n	8004240 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_I2C_Mem_Read+0x56>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e1f4      	b.n	8004240 <HAL_I2C_Mem_Read+0x440>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d007      	beq.n	8003e7c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2222      	movs	r2, #34	; 0x22
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2240      	movs	r2, #64	; 0x40
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a5b      	ldr	r2, [pc, #364]	; (8004028 <HAL_I2C_Mem_Read+0x228>)
 8003ebc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ebe:	88f8      	ldrh	r0, [r7, #6]
 8003ec0:	893a      	ldrh	r2, [r7, #8]
 8003ec2:	8979      	ldrh	r1, [r7, #10]
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	9301      	str	r3, [sp, #4]
 8003ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	4603      	mov	r3, r0
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f002 f8b6 	bl	8006040 <I2C_RequestMemoryRead>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e1b0      	b.n	8004240 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d113      	bne.n	8003f0e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	623b      	str	r3, [r7, #32]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	623b      	str	r3, [r7, #32]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	623b      	str	r3, [r7, #32]
 8003efa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	e184      	b.n	8004218 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d11b      	bne.n	8003f4e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f26:	2300      	movs	r3, #0
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	61fb      	str	r3, [r7, #28]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	61fb      	str	r3, [r7, #28]
 8003f3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	e164      	b.n	8004218 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d11b      	bne.n	8003f8e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f76:	2300      	movs	r3, #0
 8003f78:	61bb      	str	r3, [r7, #24]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	61bb      	str	r3, [r7, #24]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	e144      	b.n	8004218 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003fa4:	e138      	b.n	8004218 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	f200 80f1 	bhi.w	8004192 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d123      	bne.n	8004000 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f002 fb59 	bl	8006674 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e139      	b.n	8004240 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ffe:	e10b      	b.n	8004218 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004004:	2b02      	cmp	r3, #2
 8004006:	d14e      	bne.n	80040a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400e:	2200      	movs	r2, #0
 8004010:	4906      	ldr	r1, [pc, #24]	; (800402c <HAL_I2C_Mem_Read+0x22c>)
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f002 f9a4 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e10e      	b.n	8004240 <HAL_I2C_Mem_Read+0x440>
 8004022:	bf00      	nop
 8004024:	00100002 	.word	0x00100002
 8004028:	ffff0000 	.word	0xffff0000
 800402c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040a4:	e0b8      	b.n	8004218 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	2200      	movs	r2, #0
 80040ae:	4966      	ldr	r1, [pc, #408]	; (8004248 <HAL_I2C_Mem_Read+0x448>)
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f002 f955 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0bf      	b.n	8004240 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004108:	2200      	movs	r2, #0
 800410a:	494f      	ldr	r1, [pc, #316]	; (8004248 <HAL_I2C_Mem_Read+0x448>)
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f002 f927 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e091      	b.n	8004240 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004190:	e042      	b.n	8004218 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004194:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f002 fa6c 	bl	8006674 <I2C_WaitOnRXNEFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e04c      	b.n	8004240 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d118      	bne.n	8004218 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421c:	2b00      	cmp	r3, #0
 800421e:	f47f aec2 	bne.w	8003fa6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	e000      	b.n	8004240 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800423e:	2302      	movs	r3, #2
  }
}
 8004240:	4618      	mov	r0, r3
 8004242:	3728      	adds	r7, #40	; 0x28
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	00010004 	.word	0x00010004

0800424c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08a      	sub	sp, #40	; 0x28
 8004250:	af02      	add	r7, sp, #8
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	607a      	str	r2, [r7, #4]
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	460b      	mov	r3, r1
 800425a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800425c:	f7fe fce2 	bl	8002c24 <HAL_GetTick>
 8004260:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b20      	cmp	r3, #32
 8004270:	f040 8111 	bne.w	8004496 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	2319      	movs	r3, #25
 800427a:	2201      	movs	r2, #1
 800427c:	4988      	ldr	r1, [pc, #544]	; (80044a0 <HAL_I2C_IsDeviceReady+0x254>)
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f002 f86e 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800428a:	2302      	movs	r3, #2
 800428c:	e104      	b.n	8004498 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_I2C_IsDeviceReady+0x50>
 8004298:	2302      	movs	r3, #2
 800429a:	e0fd      	b.n	8004498 <HAL_I2C_IsDeviceReady+0x24c>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d007      	beq.n	80042c2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0201 	orr.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2224      	movs	r2, #36	; 0x24
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4a70      	ldr	r2, [pc, #448]	; (80044a4 <HAL_I2C_IsDeviceReady+0x258>)
 80042e4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f002 f82c 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00d      	beq.n	800432a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800431c:	d103      	bne.n	8004326 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004324:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e0b6      	b.n	8004498 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800432a:	897b      	ldrh	r3, [r7, #10]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	461a      	mov	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004338:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800433a:	f7fe fc73 	bl	8002c24 <HAL_GetTick>
 800433e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b02      	cmp	r3, #2
 800434c:	bf0c      	ite	eq
 800434e:	2301      	moveq	r3, #1
 8004350:	2300      	movne	r3, #0
 8004352:	b2db      	uxtb	r3, r3
 8004354:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004364:	bf0c      	ite	eq
 8004366:	2301      	moveq	r3, #1
 8004368:	2300      	movne	r3, #0
 800436a:	b2db      	uxtb	r3, r3
 800436c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800436e:	e025      	b.n	80043bc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004370:	f7fe fc58 	bl	8002c24 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d302      	bcc.n	8004386 <HAL_I2C_IsDeviceReady+0x13a>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d103      	bne.n	800438e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	22a0      	movs	r2, #160	; 0xa0
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b02      	cmp	r3, #2
 800439a:	bf0c      	ite	eq
 800439c:	2301      	moveq	r3, #1
 800439e:	2300      	movne	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b2:	bf0c      	ite	eq
 80043b4:	2301      	moveq	r3, #1
 80043b6:	2300      	movne	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2ba0      	cmp	r3, #160	; 0xa0
 80043c6:	d005      	beq.n	80043d4 <HAL_I2C_IsDeviceReady+0x188>
 80043c8:	7dfb      	ldrb	r3, [r7, #23]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d102      	bne.n	80043d4 <HAL_I2C_IsDeviceReady+0x188>
 80043ce:	7dbb      	ldrb	r3, [r7, #22]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0cd      	beq.n	8004370 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d129      	bne.n	800443e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fa:	2300      	movs	r3, #0
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	613b      	str	r3, [r7, #16]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	2319      	movs	r3, #25
 8004416:	2201      	movs	r2, #1
 8004418:	4921      	ldr	r1, [pc, #132]	; (80044a0 <HAL_I2C_IsDeviceReady+0x254>)
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f001 ffa0 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e036      	b.n	8004498 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	e02c      	b.n	8004498 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800444c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004456:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	2319      	movs	r3, #25
 800445e:	2201      	movs	r2, #1
 8004460:	490f      	ldr	r1, [pc, #60]	; (80044a0 <HAL_I2C_IsDeviceReady+0x254>)
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f001 ff7c 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e012      	b.n	8004498 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	3301      	adds	r3, #1
 8004476:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	429a      	cmp	r2, r3
 800447e:	f4ff af32 	bcc.w	80042e6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004496:	2302      	movs	r3, #2
  }
}
 8004498:	4618      	mov	r0, r3
 800449a:	3720      	adds	r7, #32
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	00100002 	.word	0x00100002
 80044a4:	ffff0000 	.word	0xffff0000

080044a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d003      	beq.n	80044e0 <HAL_I2C_EV_IRQHandler+0x38>
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b40      	cmp	r3, #64	; 0x40
 80044dc:	f040 80c1 	bne.w	8004662 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10d      	bne.n	8004516 <HAL_I2C_EV_IRQHandler+0x6e>
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004500:	d003      	beq.n	800450a <HAL_I2C_EV_IRQHandler+0x62>
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004508:	d101      	bne.n	800450e <HAL_I2C_EV_IRQHandler+0x66>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <HAL_I2C_EV_IRQHandler+0x68>
 800450e:	2300      	movs	r3, #0
 8004510:	2b01      	cmp	r3, #1
 8004512:	f000 8132 	beq.w	800477a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00c      	beq.n	800453a <HAL_I2C_EV_IRQHandler+0x92>
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	0a5b      	lsrs	r3, r3, #9
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d006      	beq.n	800453a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f002 f926 	bl	800677e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fd83 	bl	800503e <I2C_Master_SB>
 8004538:	e092      	b.n	8004660 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	08db      	lsrs	r3, r3, #3
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d009      	beq.n	800455a <HAL_I2C_EV_IRQHandler+0xb2>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	0a5b      	lsrs	r3, r3, #9
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fdf9 	bl	800514a <I2C_Master_ADD10>
 8004558:	e082      	b.n	8004660 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	085b      	lsrs	r3, r3, #1
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d009      	beq.n	800457a <HAL_I2C_EV_IRQHandler+0xd2>
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	0a5b      	lsrs	r3, r3, #9
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fe13 	bl	800519e <I2C_Master_ADDR>
 8004578:	e072      	b.n	8004660 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	089b      	lsrs	r3, r3, #2
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d03b      	beq.n	80045fe <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004594:	f000 80f3 	beq.w	800477e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	09db      	lsrs	r3, r3, #7
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00f      	beq.n	80045c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	0a9b      	lsrs	r3, r3, #10
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d009      	beq.n	80045c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	089b      	lsrs	r3, r3, #2
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d103      	bne.n	80045c4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f9f3 	bl	80049a8 <I2C_MasterTransmit_TXE>
 80045c2:	e04d      	b.n	8004660 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	089b      	lsrs	r3, r3, #2
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 80d6 	beq.w	800477e <HAL_I2C_EV_IRQHandler+0x2d6>
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	0a5b      	lsrs	r3, r3, #9
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 80cf 	beq.w	800477e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80045e0:	7bbb      	ldrb	r3, [r7, #14]
 80045e2:	2b21      	cmp	r3, #33	; 0x21
 80045e4:	d103      	bne.n	80045ee <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fa7a 	bl	8004ae0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ec:	e0c7      	b.n	800477e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
 80045f0:	2b40      	cmp	r3, #64	; 0x40
 80045f2:	f040 80c4 	bne.w	800477e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fae8 	bl	8004bcc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045fc:	e0bf      	b.n	800477e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800460c:	f000 80b7 	beq.w	800477e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	099b      	lsrs	r3, r3, #6
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00f      	beq.n	800463c <HAL_I2C_EV_IRQHandler+0x194>
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	0a9b      	lsrs	r3, r3, #10
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d009      	beq.n	800463c <HAL_I2C_EV_IRQHandler+0x194>
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	089b      	lsrs	r3, r3, #2
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d103      	bne.n	800463c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 fb5d 	bl	8004cf4 <I2C_MasterReceive_RXNE>
 800463a:	e011      	b.n	8004660 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	089b      	lsrs	r3, r3, #2
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 809a 	beq.w	800477e <HAL_I2C_EV_IRQHandler+0x2d6>
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	0a5b      	lsrs	r3, r3, #9
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 8093 	beq.w	800477e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fc06 	bl	8004e6a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800465e:	e08e      	b.n	800477e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004660:	e08d      	b.n	800477e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	d004      	beq.n	8004674 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	e007      	b.n	8004684 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	085b      	lsrs	r3, r3, #1
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	d012      	beq.n	80046b6 <HAL_I2C_EV_IRQHandler+0x20e>
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	0a5b      	lsrs	r3, r3, #9
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00c      	beq.n	80046b6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80046ac:	69b9      	ldr	r1, [r7, #24]
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 ffc4 	bl	800563c <I2C_Slave_ADDR>
 80046b4:	e066      	b.n	8004784 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	091b      	lsrs	r3, r3, #4
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <HAL_I2C_EV_IRQHandler+0x22e>
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	0a5b      	lsrs	r3, r3, #9
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fffe 	bl	80056d0 <I2C_Slave_STOPF>
 80046d4:	e056      	b.n	8004784 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046d6:	7bbb      	ldrb	r3, [r7, #14]
 80046d8:	2b21      	cmp	r3, #33	; 0x21
 80046da:	d002      	beq.n	80046e2 <HAL_I2C_EV_IRQHandler+0x23a>
 80046dc:	7bbb      	ldrb	r3, [r7, #14]
 80046de:	2b29      	cmp	r3, #41	; 0x29
 80046e0:	d125      	bne.n	800472e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	09db      	lsrs	r3, r3, #7
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00f      	beq.n	800470e <HAL_I2C_EV_IRQHandler+0x266>
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	0a9b      	lsrs	r3, r3, #10
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <HAL_I2C_EV_IRQHandler+0x266>
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	089b      	lsrs	r3, r3, #2
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d103      	bne.n	800470e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 feda 	bl	80054c0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800470c:	e039      	b.n	8004782 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	089b      	lsrs	r3, r3, #2
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d033      	beq.n	8004782 <HAL_I2C_EV_IRQHandler+0x2da>
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	0a5b      	lsrs	r3, r3, #9
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d02d      	beq.n	8004782 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 ff07 	bl	800553a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800472c:	e029      	b.n	8004782 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	099b      	lsrs	r3, r3, #6
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00f      	beq.n	800475a <HAL_I2C_EV_IRQHandler+0x2b2>
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	0a9b      	lsrs	r3, r3, #10
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	089b      	lsrs	r3, r3, #2
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d103      	bne.n	800475a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 ff12 	bl	800557c <I2C_SlaveReceive_RXNE>
 8004758:	e014      	b.n	8004784 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	089b      	lsrs	r3, r3, #2
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00e      	beq.n	8004784 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	0a5b      	lsrs	r3, r3, #9
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d008      	beq.n	8004784 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 ff40 	bl	80055f8 <I2C_SlaveReceive_BTF>
 8004778:	e004      	b.n	8004784 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800477a:	bf00      	nop
 800477c:	e002      	b.n	8004784 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800477e:	bf00      	nop
 8004780:	e000      	b.n	8004784 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004782:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004784:	3720      	adds	r7, #32
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b08a      	sub	sp, #40	; 0x28
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80047a2:	2300      	movs	r3, #0
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ac:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	0a1b      	lsrs	r3, r3, #8
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00e      	beq.n	80047d8 <HAL_I2C_ER_IRQHandler+0x4e>
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	0a1b      	lsrs	r3, r3, #8
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d008      	beq.n	80047d8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80047d6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	0a5b      	lsrs	r3, r3, #9
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00e      	beq.n	8004802 <HAL_I2C_ER_IRQHandler+0x78>
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	0a1b      	lsrs	r3, r3, #8
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	f043 0302 	orr.w	r3, r3, #2
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004800:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	0a9b      	lsrs	r3, r3, #10
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d03f      	beq.n	800488e <HAL_I2C_ER_IRQHandler+0x104>
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	0a1b      	lsrs	r3, r3, #8
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d039      	beq.n	800488e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800481a:	7efb      	ldrb	r3, [r7, #27]
 800481c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004822:	b29b      	uxth	r3, r3
 8004824:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004834:	7ebb      	ldrb	r3, [r7, #26]
 8004836:	2b20      	cmp	r3, #32
 8004838:	d112      	bne.n	8004860 <HAL_I2C_ER_IRQHandler+0xd6>
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10f      	bne.n	8004860 <HAL_I2C_ER_IRQHandler+0xd6>
 8004840:	7cfb      	ldrb	r3, [r7, #19]
 8004842:	2b21      	cmp	r3, #33	; 0x21
 8004844:	d008      	beq.n	8004858 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004846:	7cfb      	ldrb	r3, [r7, #19]
 8004848:	2b29      	cmp	r3, #41	; 0x29
 800484a:	d005      	beq.n	8004858 <HAL_I2C_ER_IRQHandler+0xce>
 800484c:	7cfb      	ldrb	r3, [r7, #19]
 800484e:	2b28      	cmp	r3, #40	; 0x28
 8004850:	d106      	bne.n	8004860 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b21      	cmp	r3, #33	; 0x21
 8004856:	d103      	bne.n	8004860 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f001 f869 	bl	8005930 <I2C_Slave_AF>
 800485e:	e016      	b.n	800488e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004868:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	f043 0304 	orr.w	r3, r3, #4
 8004870:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004872:	7efb      	ldrb	r3, [r7, #27]
 8004874:	2b10      	cmp	r3, #16
 8004876:	d002      	beq.n	800487e <HAL_I2C_ER_IRQHandler+0xf4>
 8004878:	7efb      	ldrb	r3, [r7, #27]
 800487a:	2b40      	cmp	r3, #64	; 0x40
 800487c:	d107      	bne.n	800488e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800488c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	0adb      	lsrs	r3, r3, #11
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00e      	beq.n	80048b8 <HAL_I2C_ER_IRQHandler+0x12e>
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	0a1b      	lsrs	r3, r3, #8
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d008      	beq.n	80048b8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	f043 0308 	orr.w	r3, r3, #8
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80048b6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d008      	beq.n	80048d0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f001 f8a0 	bl	8005a10 <I2C_ITError>
  }
}
 80048d0:	bf00      	nop
 80048d2:	3728      	adds	r7, #40	; 0x28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	70fb      	strb	r3, [r7, #3]
 8004934:	4613      	mov	r3, r2
 8004936:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049be:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d150      	bne.n	8004a70 <I2C_MasterTransmit_TXE+0xc8>
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
 80049d0:	2b21      	cmp	r3, #33	; 0x21
 80049d2:	d14d      	bne.n	8004a70 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d01d      	beq.n	8004a16 <I2C_MasterTransmit_TXE+0x6e>
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b20      	cmp	r3, #32
 80049de:	d01a      	beq.n	8004a16 <I2C_MasterTransmit_TXE+0x6e>
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049e6:	d016      	beq.n	8004a16 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049f6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2211      	movs	r2, #17
 80049fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff ff62 	bl	80048d8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a14:	e060      	b.n	8004ad8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a24:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a34:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	d107      	bne.n	8004a60 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff ff7d 	bl	8004958 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a5e:	e03b      	b.n	8004ad8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7ff ff35 	bl	80048d8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a6e:	e033      	b.n	8004ad8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
 8004a72:	2b21      	cmp	r3, #33	; 0x21
 8004a74:	d005      	beq.n	8004a82 <I2C_MasterTransmit_TXE+0xda>
 8004a76:	7bbb      	ldrb	r3, [r7, #14]
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d12d      	bne.n	8004ad8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	2b22      	cmp	r3, #34	; 0x22
 8004a80:	d12a      	bne.n	8004ad8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d108      	bne.n	8004a9e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a9a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004a9c:	e01c      	b.n	8004ad8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b40      	cmp	r3, #64	; 0x40
 8004aa8:	d103      	bne.n	8004ab2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f88e 	bl	8004bcc <I2C_MemoryTransmit_TXE_BTF>
}
 8004ab0:	e012      	b.n	8004ad8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	781a      	ldrb	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ad6:	e7ff      	b.n	8004ad8 <I2C_MasterTransmit_TXE+0x130>
 8004ad8:	bf00      	nop
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b21      	cmp	r3, #33	; 0x21
 8004af8:	d164      	bne.n	8004bc4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d012      	beq.n	8004b2a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	781a      	ldrb	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004b28:	e04c      	b.n	8004bc4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d01d      	beq.n	8004b6c <I2C_MasterTransmit_BTF+0x8c>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d01a      	beq.n	8004b6c <I2C_MasterTransmit_BTF+0x8c>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b3c:	d016      	beq.n	8004b6c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b4c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2211      	movs	r2, #17
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7ff feb7 	bl	80048d8 <HAL_I2C_MasterTxCpltCallback>
}
 8004b6a:	e02b      	b.n	8004bc4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b7a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b8a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b40      	cmp	r3, #64	; 0x40
 8004ba4:	d107      	bne.n	8004bb6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff fed2 	bl	8004958 <HAL_I2C_MemTxCpltCallback>
}
 8004bb4:	e006      	b.n	8004bc4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff fe8a 	bl	80048d8 <HAL_I2C_MasterTxCpltCallback>
}
 8004bc4:	bf00      	nop
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d11d      	bne.n	8004c20 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d10b      	bne.n	8004c04 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bfc:	1c9a      	adds	r2, r3, #2
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004c02:	e073      	b.n	8004cec <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	121b      	asrs	r3, r3, #8
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c1e:	e065      	b.n	8004cec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d10b      	bne.n	8004c40 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c3e:	e055      	b.n	8004cec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d151      	bne.n	8004cec <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	2b22      	cmp	r3, #34	; 0x22
 8004c4c:	d10d      	bne.n	8004c6a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c5c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c68:	e040      	b.n	8004cec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d015      	beq.n	8004ca0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	2b21      	cmp	r3, #33	; 0x21
 8004c78:	d112      	bne.n	8004ca0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	781a      	ldrb	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	3b01      	subs	r3, #1
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c9e:	e025      	b.n	8004cec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d120      	bne.n	8004cec <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
 8004cac:	2b21      	cmp	r3, #33	; 0x21
 8004cae:	d11d      	bne.n	8004cec <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cbe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff fe36 	bl	8004958 <HAL_I2C_MemTxCpltCallback>
}
 8004cec:	bf00      	nop
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b22      	cmp	r3, #34	; 0x22
 8004d06:	f040 80ac 	bne.w	8004e62 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d921      	bls.n	8004d5c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691a      	ldr	r2, [r3, #16]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	f040 808c 	bne.w	8004e62 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d58:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004d5a:	e082      	b.n	8004e62 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d075      	beq.n	8004e50 <I2C_MasterReceive_RXNE+0x15c>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d002      	beq.n	8004d70 <I2C_MasterReceive_RXNE+0x7c>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d16f      	bne.n	8004e50 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f001 fc4d 	bl	8006610 <I2C_WaitOnSTOPRequestThroughIT>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d142      	bne.n	8004e02 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d8a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d9a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b40      	cmp	r3, #64	; 0x40
 8004dd4:	d10a      	bne.n	8004dec <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff fdc1 	bl	800496c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004dea:	e03a      	b.n	8004e62 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2212      	movs	r2, #18
 8004df8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7ff fd76 	bl	80048ec <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e00:	e02f      	b.n	8004e62 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e10:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	b2d2      	uxtb	r2, r2
 8004e1e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7ff fd99 	bl	8004980 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e4e:	e008      	b.n	8004e62 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5e:	605a      	str	r2, [r3, #4]
}
 8004e60:	e7ff      	b.n	8004e62 <I2C_MasterReceive_RXNE+0x16e>
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d11b      	bne.n	8004eba <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e90:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004eb8:	e0bd      	b.n	8005036 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d129      	bne.n	8004f18 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ed2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d00a      	beq.n	8004ef0 <I2C_MasterReceive_BTF+0x86>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d007      	beq.n	8004ef0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f16:	e08e      	b.n	8005036 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d176      	bne.n	8005010 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d002      	beq.n	8004f2e <I2C_MasterReceive_BTF+0xc4>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b10      	cmp	r3, #16
 8004f2c:	d108      	bne.n	8004f40 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	e019      	b.n	8004f74 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d002      	beq.n	8004f4c <I2C_MasterReceive_BTF+0xe2>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d108      	bne.n	8004f5e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	e00a      	b.n	8004f74 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b10      	cmp	r3, #16
 8004f62:	d007      	beq.n	8004f74 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f72:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	b2d2      	uxtb	r2, r2
 8004f80:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004fce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b40      	cmp	r3, #64	; 0x40
 8004fe2:	d10a      	bne.n	8004ffa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7ff fcba 	bl	800496c <HAL_I2C_MemRxCpltCallback>
}
 8004ff8:	e01d      	b.n	8005036 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2212      	movs	r2, #18
 8005006:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff fc6f 	bl	80048ec <HAL_I2C_MasterRxCpltCallback>
}
 800500e:	e012      	b.n	8005036 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691a      	ldr	r2, [r3, #16]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b40      	cmp	r3, #64	; 0x40
 8005050:	d117      	bne.n	8005082 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005056:	2b00      	cmp	r3, #0
 8005058:	d109      	bne.n	800506e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505e:	b2db      	uxtb	r3, r3
 8005060:	461a      	mov	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800506a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800506c:	e067      	b.n	800513e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005072:	b2db      	uxtb	r3, r3
 8005074:	f043 0301 	orr.w	r3, r3, #1
 8005078:	b2da      	uxtb	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	611a      	str	r2, [r3, #16]
}
 8005080:	e05d      	b.n	800513e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800508a:	d133      	bne.n	80050f4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b21      	cmp	r3, #33	; 0x21
 8005096:	d109      	bne.n	80050ac <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509c:	b2db      	uxtb	r3, r3
 800509e:	461a      	mov	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050a8:	611a      	str	r2, [r3, #16]
 80050aa:	e008      	b.n	80050be <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	f043 0301 	orr.w	r3, r3, #1
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d004      	beq.n	80050d0 <I2C_Master_SB+0x92>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d108      	bne.n	80050e2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d032      	beq.n	800513e <I2C_Master_SB+0x100>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d02d      	beq.n	800513e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050f0:	605a      	str	r2, [r3, #4]
}
 80050f2:	e024      	b.n	800513e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10e      	bne.n	800511a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005100:	b29b      	uxth	r3, r3
 8005102:	11db      	asrs	r3, r3, #7
 8005104:	b2db      	uxtb	r3, r3
 8005106:	f003 0306 	and.w	r3, r3, #6
 800510a:	b2db      	uxtb	r3, r3
 800510c:	f063 030f 	orn	r3, r3, #15
 8005110:	b2da      	uxtb	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	611a      	str	r2, [r3, #16]
}
 8005118:	e011      	b.n	800513e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511e:	2b01      	cmp	r3, #1
 8005120:	d10d      	bne.n	800513e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	b29b      	uxth	r3, r3
 8005128:	11db      	asrs	r3, r3, #7
 800512a:	b2db      	uxtb	r3, r3
 800512c:	f003 0306 	and.w	r3, r3, #6
 8005130:	b2db      	uxtb	r3, r3
 8005132:	f063 030e 	orn	r3, r3, #14
 8005136:	b2da      	uxtb	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	611a      	str	r2, [r3, #16]
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005156:	b2da      	uxtb	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005162:	2b00      	cmp	r3, #0
 8005164:	d004      	beq.n	8005170 <I2C_Master_ADD10+0x26>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516c:	2b00      	cmp	r3, #0
 800516e:	d108      	bne.n	8005182 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00c      	beq.n	8005192 <I2C_Master_ADD10+0x48>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d007      	beq.n	8005192 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005190:	605a      	str	r2, [r3, #4]
  }
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800519e:	b480      	push	{r7}
 80051a0:	b091      	sub	sp, #68	; 0x44
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b22      	cmp	r3, #34	; 0x22
 80051c6:	f040 8169 	bne.w	800549c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10f      	bne.n	80051f2 <I2C_Master_ADDR+0x54>
 80051d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80051d6:	2b40      	cmp	r3, #64	; 0x40
 80051d8:	d10b      	bne.n	80051f2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051da:	2300      	movs	r3, #0
 80051dc:	633b      	str	r3, [r7, #48]	; 0x30
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	633b      	str	r3, [r7, #48]	; 0x30
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	633b      	str	r3, [r7, #48]	; 0x30
 80051ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f0:	e160      	b.n	80054b4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d11d      	bne.n	8005236 <I2C_Master_ADDR+0x98>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005202:	d118      	bne.n	8005236 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005204:	2300      	movs	r3, #0
 8005206:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005218:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005228:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	651a      	str	r2, [r3, #80]	; 0x50
 8005234:	e13e      	b.n	80054b4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523a:	b29b      	uxth	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d113      	bne.n	8005268 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005240:	2300      	movs	r3, #0
 8005242:	62bb      	str	r3, [r7, #40]	; 0x28
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	62bb      	str	r3, [r7, #40]	; 0x28
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	62bb      	str	r3, [r7, #40]	; 0x28
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	e115      	b.n	8005494 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b01      	cmp	r3, #1
 8005270:	f040 808a 	bne.w	8005388 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005276:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800527a:	d137      	bne.n	80052ec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800528a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800529a:	d113      	bne.n	80052c4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052aa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ac:	2300      	movs	r3, #0
 80052ae:	627b      	str	r3, [r7, #36]	; 0x24
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	e0e7      	b.n	8005494 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c4:	2300      	movs	r3, #0
 80052c6:	623b      	str	r3, [r7, #32]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	623b      	str	r3, [r7, #32]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	623b      	str	r3, [r7, #32]
 80052d8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	e0d3      	b.n	8005494 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80052ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ee:	2b08      	cmp	r3, #8
 80052f0:	d02e      	beq.n	8005350 <I2C_Master_ADDR+0x1b2>
 80052f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f4:	2b20      	cmp	r3, #32
 80052f6:	d02b      	beq.n	8005350 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80052f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fa:	2b12      	cmp	r3, #18
 80052fc:	d102      	bne.n	8005304 <I2C_Master_ADDR+0x166>
 80052fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005300:	2b01      	cmp	r3, #1
 8005302:	d125      	bne.n	8005350 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005306:	2b04      	cmp	r3, #4
 8005308:	d00e      	beq.n	8005328 <I2C_Master_ADDR+0x18a>
 800530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530c:	2b02      	cmp	r3, #2
 800530e:	d00b      	beq.n	8005328 <I2C_Master_ADDR+0x18a>
 8005310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005312:	2b10      	cmp	r3, #16
 8005314:	d008      	beq.n	8005328 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	e007      	b.n	8005338 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005336:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005338:	2300      	movs	r3, #0
 800533a:	61fb      	str	r3, [r7, #28]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	61fb      	str	r3, [r7, #28]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	61fb      	str	r3, [r7, #28]
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	e0a1      	b.n	8005494 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800535e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005360:	2300      	movs	r3, #0
 8005362:	61bb      	str	r3, [r7, #24]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	61bb      	str	r3, [r7, #24]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	61bb      	str	r3, [r7, #24]
 8005374:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	e085      	b.n	8005494 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d14d      	bne.n	800542e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005394:	2b04      	cmp	r3, #4
 8005396:	d016      	beq.n	80053c6 <I2C_Master_ADDR+0x228>
 8005398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539a:	2b02      	cmp	r3, #2
 800539c:	d013      	beq.n	80053c6 <I2C_Master_ADDR+0x228>
 800539e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a0:	2b10      	cmp	r3, #16
 80053a2:	d010      	beq.n	80053c6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053b2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	e007      	b.n	80053d6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053d4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053e4:	d117      	bne.n	8005416 <I2C_Master_ADDR+0x278>
 80053e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053ec:	d00b      	beq.n	8005406 <I2C_Master_ADDR+0x268>
 80053ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d008      	beq.n	8005406 <I2C_Master_ADDR+0x268>
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	d005      	beq.n	8005406 <I2C_Master_ADDR+0x268>
 80053fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fc:	2b10      	cmp	r3, #16
 80053fe:	d002      	beq.n	8005406 <I2C_Master_ADDR+0x268>
 8005400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005402:	2b20      	cmp	r3, #32
 8005404:	d107      	bne.n	8005416 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005414:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	e032      	b.n	8005494 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800543c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800544c:	d117      	bne.n	800547e <I2C_Master_ADDR+0x2e0>
 800544e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005450:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005454:	d00b      	beq.n	800546e <I2C_Master_ADDR+0x2d0>
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	2b01      	cmp	r3, #1
 800545a:	d008      	beq.n	800546e <I2C_Master_ADDR+0x2d0>
 800545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545e:	2b08      	cmp	r3, #8
 8005460:	d005      	beq.n	800546e <I2C_Master_ADDR+0x2d0>
 8005462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005464:	2b10      	cmp	r3, #16
 8005466:	d002      	beq.n	800546e <I2C_Master_ADDR+0x2d0>
 8005468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546a:	2b20      	cmp	r3, #32
 800546c:	d107      	bne.n	800547e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800547c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800547e:	2300      	movs	r3, #0
 8005480:	613b      	str	r3, [r7, #16]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	613b      	str	r3, [r7, #16]
 8005492:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800549a:	e00b      	b.n	80054b4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800549c:	2300      	movs	r3, #0
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	68fb      	ldr	r3, [r7, #12]
}
 80054b2:	e7ff      	b.n	80054b4 <I2C_Master_ADDR+0x316>
 80054b4:	bf00      	nop
 80054b6:	3744      	adds	r7, #68	; 0x44
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d02b      	beq.n	8005532 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	781a      	ldrb	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	3b01      	subs	r3, #1
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005502:	b29b      	uxth	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d114      	bne.n	8005532 <I2C_SlaveTransmit_TXE+0x72>
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	2b29      	cmp	r3, #41	; 0x29
 800550c:	d111      	bne.n	8005532 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800551c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2221      	movs	r2, #33	; 0x21
 8005522:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2228      	movs	r2, #40	; 0x28
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff f9e7 	bl	8004900 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005532:	bf00      	nop
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005546:	b29b      	uxth	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	d011      	beq.n	8005570 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	781a      	ldrb	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005566:	b29b      	uxth	r3, r3
 8005568:	3b01      	subs	r3, #1
 800556a:	b29a      	uxth	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d02c      	beq.n	80055f0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	691a      	ldr	r2, [r3, #16]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	b2d2      	uxtb	r2, r2
 80055a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d114      	bne.n	80055f0 <I2C_SlaveReceive_RXNE+0x74>
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	2b2a      	cmp	r3, #42	; 0x2a
 80055ca:	d111      	bne.n	80055f0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055da:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2222      	movs	r2, #34	; 0x22
 80055e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2228      	movs	r2, #40	; 0x28
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff f992 	bl	8004914 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055f0:	bf00      	nop
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d012      	beq.n	8005630 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005646:	2300      	movs	r3, #0
 8005648:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005650:	b2db      	uxtb	r3, r3
 8005652:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005656:	2b28      	cmp	r3, #40	; 0x28
 8005658:	d127      	bne.n	80056aa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005668:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	089b      	lsrs	r3, r3, #2
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005676:	2301      	movs	r3, #1
 8005678:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	09db      	lsrs	r3, r3, #7
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d103      	bne.n	800568e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	81bb      	strh	r3, [r7, #12]
 800568c:	e002      	b.n	8005694 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800569c:	89ba      	ldrh	r2, [r7, #12]
 800569e:	7bfb      	ldrb	r3, [r7, #15]
 80056a0:	4619      	mov	r1, r3
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff f940 	bl	8004928 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80056a8:	e00e      	b.n	80056c8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056aa:	2300      	movs	r3, #0
 80056ac:	60bb      	str	r3, [r7, #8]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	60bb      	str	r3, [r7, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	60bb      	str	r3, [r7, #8]
 80056be:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80056c8:	bf00      	nop
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056de:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056ee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80056f0:	2300      	movs	r3, #0
 80056f2:	60bb      	str	r3, [r7, #8]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	60bb      	str	r3, [r7, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0201 	orr.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800571c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800572c:	d172      	bne.n	8005814 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800572e:	7bfb      	ldrb	r3, [r7, #15]
 8005730:	2b22      	cmp	r3, #34	; 0x22
 8005732:	d002      	beq.n	800573a <I2C_Slave_STOPF+0x6a>
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	2b2a      	cmp	r3, #42	; 0x2a
 8005738:	d135      	bne.n	80057a6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	b29a      	uxth	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574c:	b29b      	uxth	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d005      	beq.n	800575e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	f043 0204 	orr.w	r2, r3, #4
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800576c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005772:	4618      	mov	r0, r3
 8005774:	f7fd fbfa 	bl	8002f6c <HAL_DMA_GetState>
 8005778:	4603      	mov	r3, r0
 800577a:	2b01      	cmp	r3, #1
 800577c:	d049      	beq.n	8005812 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005782:	4a69      	ldr	r2, [pc, #420]	; (8005928 <I2C_Slave_STOPF+0x258>)
 8005784:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578a:	4618      	mov	r0, r3
 800578c:	f7fd fbcc 	bl	8002f28 <HAL_DMA_Abort_IT>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d03d      	beq.n	8005812 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057a0:	4610      	mov	r0, r2
 80057a2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057a4:	e035      	b.n	8005812 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d005      	beq.n	80057ca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	f043 0204 	orr.w	r2, r3, #4
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fd fbc4 	bl	8002f6c <HAL_DMA_GetState>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d014      	beq.n	8005814 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ee:	4a4e      	ldr	r2, [pc, #312]	; (8005928 <I2C_Slave_STOPF+0x258>)
 80057f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fd fb96 	bl	8002f28 <HAL_DMA_Abort_IT>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d008      	beq.n	8005814 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800580c:	4610      	mov	r0, r2
 800580e:	4798      	blx	r3
 8005810:	e000      	b.n	8005814 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005812:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d03e      	beq.n	800589c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b04      	cmp	r3, #4
 800582a:	d112      	bne.n	8005852 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691a      	ldr	r2, [r3, #16]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005848:	b29b      	uxth	r3, r3
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585c:	2b40      	cmp	r3, #64	; 0x40
 800585e:	d112      	bne.n	8005886 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	691a      	ldr	r2, [r3, #16]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587c:	b29b      	uxth	r3, r3
 800587e:	3b01      	subs	r3, #1
 8005880:	b29a      	uxth	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588a:	b29b      	uxth	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005894:	f043 0204 	orr.w	r2, r3, #4
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f8b3 	bl	8005a10 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80058aa:	e039      	b.n	8005920 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
 80058ae:	2b2a      	cmp	r3, #42	; 0x2a
 80058b0:	d109      	bne.n	80058c6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2228      	movs	r2, #40	; 0x28
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff f827 	bl	8004914 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b28      	cmp	r3, #40	; 0x28
 80058d0:	d111      	bne.n	80058f6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a15      	ldr	r2, [pc, #84]	; (800592c <I2C_Slave_STOPF+0x25c>)
 80058d6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7ff f828 	bl	8004944 <HAL_I2C_ListenCpltCallback>
}
 80058f4:	e014      	b.n	8005920 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	2b22      	cmp	r3, #34	; 0x22
 80058fc:	d002      	beq.n	8005904 <I2C_Slave_STOPF+0x234>
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
 8005900:	2b22      	cmp	r3, #34	; 0x22
 8005902:	d10d      	bne.n	8005920 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fe fffa 	bl	8004914 <HAL_I2C_SlaveRxCpltCallback>
}
 8005920:	bf00      	nop
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	08006211 	.word	0x08006211
 800592c:	ffff0000 	.word	0xffff0000

08005930 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b08      	cmp	r3, #8
 800594a:	d002      	beq.n	8005952 <I2C_Slave_AF+0x22>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b20      	cmp	r3, #32
 8005950:	d129      	bne.n	80059a6 <I2C_Slave_AF+0x76>
 8005952:	7bfb      	ldrb	r3, [r7, #15]
 8005954:	2b28      	cmp	r3, #40	; 0x28
 8005956:	d126      	bne.n	80059a6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a2c      	ldr	r2, [pc, #176]	; (8005a0c <I2C_Slave_AF+0xdc>)
 800595c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800596c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005976:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005986:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2220      	movs	r2, #32
 8005992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7fe ffd0 	bl	8004944 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80059a4:	e02e      	b.n	8005a04 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
 80059a8:	2b21      	cmp	r3, #33	; 0x21
 80059aa:	d126      	bne.n	80059fa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a17      	ldr	r2, [pc, #92]	; (8005a0c <I2C_Slave_AF+0xdc>)
 80059b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2221      	movs	r2, #33	; 0x21
 80059b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059d6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059e0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059f0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7fe ff84 	bl	8004900 <HAL_I2C_SlaveTxCpltCallback>
}
 80059f8:	e004      	b.n	8005a04 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a02:	615a      	str	r2, [r3, #20]
}
 8005a04:	bf00      	nop
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	ffff0000 	.word	0xffff0000

08005a10 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a28:	7bbb      	ldrb	r3, [r7, #14]
 8005a2a:	2b10      	cmp	r3, #16
 8005a2c:	d002      	beq.n	8005a34 <I2C_ITError+0x24>
 8005a2e:	7bbb      	ldrb	r3, [r7, #14]
 8005a30:	2b40      	cmp	r3, #64	; 0x40
 8005a32:	d10a      	bne.n	8005a4a <I2C_ITError+0x3a>
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
 8005a36:	2b22      	cmp	r3, #34	; 0x22
 8005a38:	d107      	bne.n	8005a4a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a48:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
 8005a4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a50:	2b28      	cmp	r3, #40	; 0x28
 8005a52:	d107      	bne.n	8005a64 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2228      	movs	r2, #40	; 0x28
 8005a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a62:	e015      	b.n	8005a90 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a72:	d00a      	beq.n	8005a8a <I2C_ITError+0x7a>
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	2b60      	cmp	r3, #96	; 0x60
 8005a78:	d007      	beq.n	8005a8a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a9e:	d162      	bne.n	8005b66 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d020      	beq.n	8005b00 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac2:	4a6a      	ldr	r2, [pc, #424]	; (8005c6c <I2C_ITError+0x25c>)
 8005ac4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fd fa2c 	bl	8002f28 <HAL_DMA_Abort_IT>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 8089 	beq.w	8005bea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0201 	bic.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005afa:	4610      	mov	r0, r2
 8005afc:	4798      	blx	r3
 8005afe:	e074      	b.n	8005bea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	4a59      	ldr	r2, [pc, #356]	; (8005c6c <I2C_ITError+0x25c>)
 8005b06:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fd fa0b 	bl	8002f28 <HAL_DMA_Abort_IT>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d068      	beq.n	8005bea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b22:	2b40      	cmp	r3, #64	; 0x40
 8005b24:	d10b      	bne.n	8005b3e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0201 	bic.w	r2, r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b60:	4610      	mov	r0, r2
 8005b62:	4798      	blx	r3
 8005b64:	e041      	b.n	8005bea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b60      	cmp	r3, #96	; 0x60
 8005b70:	d125      	bne.n	8005bbe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8a:	2b40      	cmp	r3, #64	; 0x40
 8005b8c:	d10b      	bne.n	8005ba6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	691a      	ldr	r2, [r3, #16]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0201 	bic.w	r2, r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fe feec 	bl	8004994 <HAL_I2C_AbortCpltCallback>
 8005bbc:	e015      	b.n	8005bea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc8:	2b40      	cmp	r3, #64	; 0x40
 8005bca:	d10b      	bne.n	8005be4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f7fe fecb 	bl	8004980 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10e      	bne.n	8005c18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d109      	bne.n	8005c18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d104      	bne.n	8005c18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d007      	beq.n	8005c28 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c26:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d113      	bne.n	8005c64 <I2C_ITError+0x254>
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
 8005c3e:	2b28      	cmp	r3, #40	; 0x28
 8005c40:	d110      	bne.n	8005c64 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a0a      	ldr	r2, [pc, #40]	; (8005c70 <I2C_ITError+0x260>)
 8005c46:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fe fe70 	bl	8004944 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c64:	bf00      	nop
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	08006211 	.word	0x08006211
 8005c70:	ffff0000 	.word	0xffff0000

08005c74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af02      	add	r7, sp, #8
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	607a      	str	r2, [r7, #4]
 8005c7e:	603b      	str	r3, [r7, #0]
 8005c80:	460b      	mov	r3, r1
 8005c82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d006      	beq.n	8005c9e <I2C_MasterRequestWrite+0x2a>
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d003      	beq.n	8005c9e <I2C_MasterRequestWrite+0x2a>
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c9c:	d108      	bne.n	8005cb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	e00b      	b.n	8005cc8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb4:	2b12      	cmp	r3, #18
 8005cb6:	d107      	bne.n	8005cc8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 fb43 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00d      	beq.n	8005cfc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cee:	d103      	bne.n	8005cf8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e035      	b.n	8005d68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d04:	d108      	bne.n	8005d18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d06:	897b      	ldrh	r3, [r7, #10]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d14:	611a      	str	r2, [r3, #16]
 8005d16:	e01b      	b.n	8005d50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d18:	897b      	ldrh	r3, [r7, #10]
 8005d1a:	11db      	asrs	r3, r3, #7
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f003 0306 	and.w	r3, r3, #6
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	f063 030f 	orn	r3, r3, #15
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	490e      	ldr	r1, [pc, #56]	; (8005d70 <I2C_MasterRequestWrite+0xfc>)
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 fb69 	bl	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e010      	b.n	8005d68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d46:	897b      	ldrh	r3, [r7, #10]
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	4907      	ldr	r1, [pc, #28]	; (8005d74 <I2C_MasterRequestWrite+0x100>)
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 fb59 	bl	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e000      	b.n	8005d68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	00010008 	.word	0x00010008
 8005d74:	00010002 	.word	0x00010002

08005d78 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	607a      	str	r2, [r7, #4]
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	460b      	mov	r3, r1
 8005d86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d9c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d006      	beq.n	8005db2 <I2C_MasterRequestRead+0x3a>
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d003      	beq.n	8005db2 <I2C_MasterRequestRead+0x3a>
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005db0:	d108      	bne.n	8005dc4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	e00b      	b.n	8005ddc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc8:	2b11      	cmp	r3, #17
 8005dca:	d107      	bne.n	8005ddc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 fab9 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00d      	beq.n	8005e10 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e02:	d103      	bne.n	8005e0c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e079      	b.n	8005f04 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e18:	d108      	bne.n	8005e2c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e1a:	897b      	ldrh	r3, [r7, #10]
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	f043 0301 	orr.w	r3, r3, #1
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	611a      	str	r2, [r3, #16]
 8005e2a:	e05f      	b.n	8005eec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005e2c:	897b      	ldrh	r3, [r7, #10]
 8005e2e:	11db      	asrs	r3, r3, #7
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	f003 0306 	and.w	r3, r3, #6
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	f063 030f 	orn	r3, r3, #15
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	4930      	ldr	r1, [pc, #192]	; (8005f0c <I2C_MasterRequestRead+0x194>)
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 fadf 	bl	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e054      	b.n	8005f04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e5a:	897b      	ldrh	r3, [r7, #10]
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	4929      	ldr	r1, [pc, #164]	; (8005f10 <I2C_MasterRequestRead+0x198>)
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 facf 	bl	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e044      	b.n	8005f04 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	613b      	str	r3, [r7, #16]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	613b      	str	r3, [r7, #16]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e9e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 fa57 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00d      	beq.n	8005ed4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ec6:	d103      	bne.n	8005ed0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ece:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e017      	b.n	8005f04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005ed4:	897b      	ldrh	r3, [r7, #10]
 8005ed6:	11db      	asrs	r3, r3, #7
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	f003 0306 	and.w	r3, r3, #6
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	f063 030e 	orn	r3, r3, #14
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	4907      	ldr	r1, [pc, #28]	; (8005f10 <I2C_MasterRequestRead+0x198>)
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 fa8b 	bl	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e000      	b.n	8005f04 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	00010008 	.word	0x00010008
 8005f10:	00010002 	.word	0x00010002

08005f14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	4608      	mov	r0, r1
 8005f1e:	4611      	mov	r1, r2
 8005f20:	461a      	mov	r2, r3
 8005f22:	4603      	mov	r3, r0
 8005f24:	817b      	strh	r3, [r7, #10]
 8005f26:	460b      	mov	r3, r1
 8005f28:	813b      	strh	r3, [r7, #8]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 fa08 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00d      	beq.n	8005f72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f64:	d103      	bne.n	8005f6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e05f      	b.n	8006032 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f72:	897b      	ldrh	r3, [r7, #10]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	461a      	mov	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	6a3a      	ldr	r2, [r7, #32]
 8005f86:	492d      	ldr	r1, [pc, #180]	; (800603c <I2C_RequestMemoryWrite+0x128>)
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 fa40 	bl	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e04c      	b.n	8006032 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f98:	2300      	movs	r3, #0
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb0:	6a39      	ldr	r1, [r7, #32]
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 faaa 	bl	800650c <I2C_WaitOnTXEFlagUntilTimeout>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00d      	beq.n	8005fda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	2b04      	cmp	r3, #4
 8005fc4:	d107      	bne.n	8005fd6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e02b      	b.n	8006032 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fda:	88fb      	ldrh	r3, [r7, #6]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d105      	bne.n	8005fec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fe0:	893b      	ldrh	r3, [r7, #8]
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	611a      	str	r2, [r3, #16]
 8005fea:	e021      	b.n	8006030 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fec:	893b      	ldrh	r3, [r7, #8]
 8005fee:	0a1b      	lsrs	r3, r3, #8
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffc:	6a39      	ldr	r1, [r7, #32]
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 fa84 	bl	800650c <I2C_WaitOnTXEFlagUntilTimeout>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00d      	beq.n	8006026 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	2b04      	cmp	r3, #4
 8006010:	d107      	bne.n	8006022 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006020:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e005      	b.n	8006032 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006026:	893b      	ldrh	r3, [r7, #8]
 8006028:	b2da      	uxtb	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	00010002 	.word	0x00010002

08006040 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b088      	sub	sp, #32
 8006044:	af02      	add	r7, sp, #8
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	4608      	mov	r0, r1
 800604a:	4611      	mov	r1, r2
 800604c:	461a      	mov	r2, r3
 800604e:	4603      	mov	r3, r0
 8006050:	817b      	strh	r3, [r7, #10]
 8006052:	460b      	mov	r3, r1
 8006054:	813b      	strh	r3, [r7, #8]
 8006056:	4613      	mov	r3, r2
 8006058:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006068:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006078:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	2200      	movs	r2, #0
 8006082:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 f96a 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00d      	beq.n	80060ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a0:	d103      	bne.n	80060aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e0aa      	b.n	8006204 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060ae:	897b      	ldrh	r3, [r7, #10]
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	461a      	mov	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80060bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	6a3a      	ldr	r2, [r7, #32]
 80060c2:	4952      	ldr	r1, [pc, #328]	; (800620c <I2C_RequestMemoryRead+0x1cc>)
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 f9a2 	bl	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e097      	b.n	8006204 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060d4:	2300      	movs	r3, #0
 80060d6:	617b      	str	r3, [r7, #20]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	617b      	str	r3, [r7, #20]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ec:	6a39      	ldr	r1, [r7, #32]
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 fa0c 	bl	800650c <I2C_WaitOnTXEFlagUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00d      	beq.n	8006116 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d107      	bne.n	8006112 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006110:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e076      	b.n	8006204 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006116:	88fb      	ldrh	r3, [r7, #6]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d105      	bne.n	8006128 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800611c:	893b      	ldrh	r3, [r7, #8]
 800611e:	b2da      	uxtb	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	611a      	str	r2, [r3, #16]
 8006126:	e021      	b.n	800616c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006128:	893b      	ldrh	r3, [r7, #8]
 800612a:	0a1b      	lsrs	r3, r3, #8
 800612c:	b29b      	uxth	r3, r3
 800612e:	b2da      	uxtb	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006138:	6a39      	ldr	r1, [r7, #32]
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 f9e6 	bl	800650c <I2C_WaitOnTXEFlagUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00d      	beq.n	8006162 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	2b04      	cmp	r3, #4
 800614c:	d107      	bne.n	800615e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800615c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e050      	b.n	8006204 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006162:	893b      	ldrh	r3, [r7, #8]
 8006164:	b2da      	uxtb	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800616c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800616e:	6a39      	ldr	r1, [r7, #32]
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 f9cb 	bl	800650c <I2C_WaitOnTXEFlagUntilTimeout>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00d      	beq.n	8006198 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006180:	2b04      	cmp	r3, #4
 8006182:	d107      	bne.n	8006194 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006192:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e035      	b.n	8006204 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 f8d3 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00d      	beq.n	80061dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ce:	d103      	bne.n	80061d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e013      	b.n	8006204 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80061dc:	897b      	ldrh	r3, [r7, #10]
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	f043 0301 	orr.w	r3, r3, #1
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	6a3a      	ldr	r2, [r7, #32]
 80061f0:	4906      	ldr	r1, [pc, #24]	; (800620c <I2C_RequestMemoryRead+0x1cc>)
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 f90b 	bl	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e000      	b.n	8006204 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	00010002 	.word	0x00010002

08006210 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006220:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006228:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800622a:	4b4b      	ldr	r3, [pc, #300]	; (8006358 <I2C_DMAAbort+0x148>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	08db      	lsrs	r3, r3, #3
 8006230:	4a4a      	ldr	r2, [pc, #296]	; (800635c <I2C_DMAAbort+0x14c>)
 8006232:	fba2 2303 	umull	r2, r3, r2, r3
 8006236:	0a1a      	lsrs	r2, r3, #8
 8006238:	4613      	mov	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	00da      	lsls	r2, r3, #3
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d106      	bne.n	8006258 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	f043 0220 	orr.w	r2, r3, #32
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006256:	e00a      	b.n	800626e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3b01      	subs	r3, #1
 800625c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800626c:	d0ea      	beq.n	8006244 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627a:	2200      	movs	r2, #0
 800627c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628a:	2200      	movs	r2, #0
 800628c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800629c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2200      	movs	r2, #0
 80062a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b0:	2200      	movs	r2, #0
 80062b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	2200      	movs	r2, #0
 80062c2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0201 	bic.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b60      	cmp	r3, #96	; 0x60
 80062de:	d10e      	bne.n	80062fe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	2200      	movs	r2, #0
 80062f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80062f6:	6978      	ldr	r0, [r7, #20]
 80062f8:	f7fe fb4c 	bl	8004994 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80062fc:	e027      	b.n	800634e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062fe:	7cfb      	ldrb	r3, [r7, #19]
 8006300:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006304:	2b28      	cmp	r3, #40	; 0x28
 8006306:	d117      	bne.n	8006338 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0201 	orr.w	r2, r2, #1
 8006316:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006326:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	2200      	movs	r2, #0
 800632c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2228      	movs	r2, #40	; 0x28
 8006332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006336:	e007      	b.n	8006348 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2220      	movs	r2, #32
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006348:	6978      	ldr	r0, [r7, #20]
 800634a:	f7fe fb19 	bl	8004980 <HAL_I2C_ErrorCallback>
}
 800634e:	bf00      	nop
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20000000 	.word	0x20000000
 800635c:	14f8b589 	.word	0x14f8b589

08006360 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	4613      	mov	r3, r2
 800636e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006370:	e025      	b.n	80063be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006378:	d021      	beq.n	80063be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800637a:	f7fc fc53 	bl	8002c24 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	429a      	cmp	r2, r3
 8006388:	d302      	bcc.n	8006390 <I2C_WaitOnFlagUntilTimeout+0x30>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d116      	bne.n	80063be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	f043 0220 	orr.w	r2, r3, #32
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e023      	b.n	8006406 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	0c1b      	lsrs	r3, r3, #16
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d10d      	bne.n	80063e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	43da      	mvns	r2, r3
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4013      	ands	r3, r2
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	bf0c      	ite	eq
 80063da:	2301      	moveq	r3, #1
 80063dc:	2300      	movne	r3, #0
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	461a      	mov	r2, r3
 80063e2:	e00c      	b.n	80063fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	43da      	mvns	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	4013      	ands	r3, r2
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	bf0c      	ite	eq
 80063f6:	2301      	moveq	r3, #1
 80063f8:	2300      	movne	r3, #0
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	79fb      	ldrb	r3, [r7, #7]
 8006400:	429a      	cmp	r2, r3
 8006402:	d0b6      	beq.n	8006372 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	60f8      	str	r0, [r7, #12]
 8006416:	60b9      	str	r1, [r7, #8]
 8006418:	607a      	str	r2, [r7, #4]
 800641a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800641c:	e051      	b.n	80064c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800642c:	d123      	bne.n	8006476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800643c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006446:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	f043 0204 	orr.w	r2, r3, #4
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e046      	b.n	8006504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800647c:	d021      	beq.n	80064c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647e:	f7fc fbd1 	bl	8002c24 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	429a      	cmp	r2, r3
 800648c:	d302      	bcc.n	8006494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d116      	bne.n	80064c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	f043 0220 	orr.w	r2, r3, #32
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e020      	b.n	8006504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	0c1b      	lsrs	r3, r3, #16
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d10c      	bne.n	80064e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	43da      	mvns	r2, r3
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4013      	ands	r3, r2
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	bf14      	ite	ne
 80064de:	2301      	movne	r3, #1
 80064e0:	2300      	moveq	r3, #0
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	e00b      	b.n	80064fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	43da      	mvns	r2, r3
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	4013      	ands	r3, r2
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	bf14      	ite	ne
 80064f8:	2301      	movne	r3, #1
 80064fa:	2300      	moveq	r3, #0
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d18d      	bne.n	800641e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006518:	e02d      	b.n	8006576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 f900 	bl	8006720 <I2C_IsAcknowledgeFailed>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e02d      	b.n	8006586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006530:	d021      	beq.n	8006576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006532:	f7fc fb77 	bl	8002c24 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	429a      	cmp	r2, r3
 8006540:	d302      	bcc.n	8006548 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d116      	bne.n	8006576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2220      	movs	r2, #32
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	f043 0220 	orr.w	r2, r3, #32
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e007      	b.n	8006586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006580:	2b80      	cmp	r3, #128	; 0x80
 8006582:	d1ca      	bne.n	800651a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800659a:	e02d      	b.n	80065f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 f8bf 	bl	8006720 <I2C_IsAcknowledgeFailed>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e02d      	b.n	8006608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065b2:	d021      	beq.n	80065f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065b4:	f7fc fb36 	bl	8002c24 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d302      	bcc.n	80065ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d116      	bne.n	80065f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e4:	f043 0220 	orr.w	r2, r3, #32
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e007      	b.n	8006608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	f003 0304 	and.w	r3, r3, #4
 8006602:	2b04      	cmp	r3, #4
 8006604:	d1ca      	bne.n	800659c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800661c:	4b13      	ldr	r3, [pc, #76]	; (800666c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	08db      	lsrs	r3, r3, #3
 8006622:	4a13      	ldr	r2, [pc, #76]	; (8006670 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006624:	fba2 2303 	umull	r2, r3, r2, r3
 8006628:	0a1a      	lsrs	r2, r3, #8
 800662a:	4613      	mov	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3b01      	subs	r3, #1
 8006636:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d107      	bne.n	800664e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	f043 0220 	orr.w	r2, r3, #32
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e008      	b.n	8006660 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800665c:	d0e9      	beq.n	8006632 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	20000000 	.word	0x20000000
 8006670:	14f8b589 	.word	0x14f8b589

08006674 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006680:	e042      	b.n	8006708 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	f003 0310 	and.w	r3, r3, #16
 800668c:	2b10      	cmp	r3, #16
 800668e:	d119      	bne.n	80066c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f06f 0210 	mvn.w	r2, #16
 8006698:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e029      	b.n	8006718 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066c4:	f7fc faae 	bl	8002c24 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d302      	bcc.n	80066da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d116      	bne.n	8006708 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	f043 0220 	orr.w	r2, r3, #32
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e007      	b.n	8006718 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006712:	2b40      	cmp	r3, #64	; 0x40
 8006714:	d1b5      	bne.n	8006682 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006736:	d11b      	bne.n	8006770 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006740:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675c:	f043 0204 	orr.w	r2, r3, #4
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e000      	b.n	8006772 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800678e:	d103      	bne.n	8006798 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006796:	e007      	b.n	80067a8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80067a0:	d102      	bne.n	80067a8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2208      	movs	r2, #8
 80067a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e267      	b.n	8006c96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d075      	beq.n	80068be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067d2:	4b88      	ldr	r3, [pc, #544]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 030c 	and.w	r3, r3, #12
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d00c      	beq.n	80067f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067de:	4b85      	ldr	r3, [pc, #532]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067e6:	2b08      	cmp	r3, #8
 80067e8:	d112      	bne.n	8006810 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067ea:	4b82      	ldr	r3, [pc, #520]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067f6:	d10b      	bne.n	8006810 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067f8:	4b7e      	ldr	r3, [pc, #504]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d05b      	beq.n	80068bc <HAL_RCC_OscConfig+0x108>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d157      	bne.n	80068bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e242      	b.n	8006c96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006818:	d106      	bne.n	8006828 <HAL_RCC_OscConfig+0x74>
 800681a:	4b76      	ldr	r3, [pc, #472]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a75      	ldr	r2, [pc, #468]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 8006820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006824:	6013      	str	r3, [r2, #0]
 8006826:	e01d      	b.n	8006864 <HAL_RCC_OscConfig+0xb0>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006830:	d10c      	bne.n	800684c <HAL_RCC_OscConfig+0x98>
 8006832:	4b70      	ldr	r3, [pc, #448]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a6f      	ldr	r2, [pc, #444]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 8006838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	4b6d      	ldr	r3, [pc, #436]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a6c      	ldr	r2, [pc, #432]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 8006844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	e00b      	b.n	8006864 <HAL_RCC_OscConfig+0xb0>
 800684c:	4b69      	ldr	r3, [pc, #420]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a68      	ldr	r2, [pc, #416]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 8006852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	4b66      	ldr	r3, [pc, #408]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a65      	ldr	r2, [pc, #404]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 800685e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d013      	beq.n	8006894 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800686c:	f7fc f9da 	bl	8002c24 <HAL_GetTick>
 8006870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006872:	e008      	b.n	8006886 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006874:	f7fc f9d6 	bl	8002c24 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b64      	cmp	r3, #100	; 0x64
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e207      	b.n	8006c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006886:	4b5b      	ldr	r3, [pc, #364]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0f0      	beq.n	8006874 <HAL_RCC_OscConfig+0xc0>
 8006892:	e014      	b.n	80068be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006894:	f7fc f9c6 	bl	8002c24 <HAL_GetTick>
 8006898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800689a:	e008      	b.n	80068ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800689c:	f7fc f9c2 	bl	8002c24 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b64      	cmp	r3, #100	; 0x64
 80068a8:	d901      	bls.n	80068ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e1f3      	b.n	8006c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ae:	4b51      	ldr	r3, [pc, #324]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1f0      	bne.n	800689c <HAL_RCC_OscConfig+0xe8>
 80068ba:	e000      	b.n	80068be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d063      	beq.n	8006992 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068ca:	4b4a      	ldr	r3, [pc, #296]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f003 030c 	and.w	r3, r3, #12
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00b      	beq.n	80068ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068d6:	4b47      	ldr	r3, [pc, #284]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068de:	2b08      	cmp	r3, #8
 80068e0:	d11c      	bne.n	800691c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068e2:	4b44      	ldr	r3, [pc, #272]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d116      	bne.n	800691c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068ee:	4b41      	ldr	r3, [pc, #260]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d005      	beq.n	8006906 <HAL_RCC_OscConfig+0x152>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d001      	beq.n	8006906 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e1c7      	b.n	8006c96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006906:	4b3b      	ldr	r3, [pc, #236]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	4937      	ldr	r1, [pc, #220]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 8006916:	4313      	orrs	r3, r2
 8006918:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800691a:	e03a      	b.n	8006992 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d020      	beq.n	8006966 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006924:	4b34      	ldr	r3, [pc, #208]	; (80069f8 <HAL_RCC_OscConfig+0x244>)
 8006926:	2201      	movs	r2, #1
 8006928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692a:	f7fc f97b 	bl	8002c24 <HAL_GetTick>
 800692e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006930:	e008      	b.n	8006944 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006932:	f7fc f977 	bl	8002c24 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d901      	bls.n	8006944 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e1a8      	b.n	8006c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006944:	4b2b      	ldr	r3, [pc, #172]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d0f0      	beq.n	8006932 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006950:	4b28      	ldr	r3, [pc, #160]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	00db      	lsls	r3, r3, #3
 800695e:	4925      	ldr	r1, [pc, #148]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 8006960:	4313      	orrs	r3, r2
 8006962:	600b      	str	r3, [r1, #0]
 8006964:	e015      	b.n	8006992 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006966:	4b24      	ldr	r3, [pc, #144]	; (80069f8 <HAL_RCC_OscConfig+0x244>)
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696c:	f7fc f95a 	bl	8002c24 <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006974:	f7fc f956 	bl	8002c24 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e187      	b.n	8006c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006986:	4b1b      	ldr	r3, [pc, #108]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1f0      	bne.n	8006974 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0308 	and.w	r3, r3, #8
 800699a:	2b00      	cmp	r3, #0
 800699c:	d036      	beq.n	8006a0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d016      	beq.n	80069d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069a6:	4b15      	ldr	r3, [pc, #84]	; (80069fc <HAL_RCC_OscConfig+0x248>)
 80069a8:	2201      	movs	r2, #1
 80069aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ac:	f7fc f93a 	bl	8002c24 <HAL_GetTick>
 80069b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069b2:	e008      	b.n	80069c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069b4:	f7fc f936 	bl	8002c24 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d901      	bls.n	80069c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e167      	b.n	8006c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069c6:	4b0b      	ldr	r3, [pc, #44]	; (80069f4 <HAL_RCC_OscConfig+0x240>)
 80069c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d0f0      	beq.n	80069b4 <HAL_RCC_OscConfig+0x200>
 80069d2:	e01b      	b.n	8006a0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069d4:	4b09      	ldr	r3, [pc, #36]	; (80069fc <HAL_RCC_OscConfig+0x248>)
 80069d6:	2200      	movs	r2, #0
 80069d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069da:	f7fc f923 	bl	8002c24 <HAL_GetTick>
 80069de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069e0:	e00e      	b.n	8006a00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069e2:	f7fc f91f 	bl	8002c24 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d907      	bls.n	8006a00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e150      	b.n	8006c96 <HAL_RCC_OscConfig+0x4e2>
 80069f4:	40023800 	.word	0x40023800
 80069f8:	42470000 	.word	0x42470000
 80069fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a00:	4b88      	ldr	r3, [pc, #544]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1ea      	bne.n	80069e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 8097 	beq.w	8006b48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a1e:	4b81      	ldr	r3, [pc, #516]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10f      	bne.n	8006a4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60bb      	str	r3, [r7, #8]
 8006a2e:	4b7d      	ldr	r3, [pc, #500]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a32:	4a7c      	ldr	r2, [pc, #496]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a38:	6413      	str	r3, [r2, #64]	; 0x40
 8006a3a:	4b7a      	ldr	r3, [pc, #488]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a42:	60bb      	str	r3, [r7, #8]
 8006a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a46:	2301      	movs	r3, #1
 8006a48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a4a:	4b77      	ldr	r3, [pc, #476]	; (8006c28 <HAL_RCC_OscConfig+0x474>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d118      	bne.n	8006a88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a56:	4b74      	ldr	r3, [pc, #464]	; (8006c28 <HAL_RCC_OscConfig+0x474>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a73      	ldr	r2, [pc, #460]	; (8006c28 <HAL_RCC_OscConfig+0x474>)
 8006a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a62:	f7fc f8df 	bl	8002c24 <HAL_GetTick>
 8006a66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a68:	e008      	b.n	8006a7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a6a:	f7fc f8db 	bl	8002c24 <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d901      	bls.n	8006a7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e10c      	b.n	8006c96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a7c:	4b6a      	ldr	r3, [pc, #424]	; (8006c28 <HAL_RCC_OscConfig+0x474>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d0f0      	beq.n	8006a6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d106      	bne.n	8006a9e <HAL_RCC_OscConfig+0x2ea>
 8006a90:	4b64      	ldr	r3, [pc, #400]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a94:	4a63      	ldr	r2, [pc, #396]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006a96:	f043 0301 	orr.w	r3, r3, #1
 8006a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a9c:	e01c      	b.n	8006ad8 <HAL_RCC_OscConfig+0x324>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	2b05      	cmp	r3, #5
 8006aa4:	d10c      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x30c>
 8006aa6:	4b5f      	ldr	r3, [pc, #380]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aaa:	4a5e      	ldr	r2, [pc, #376]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006aac:	f043 0304 	orr.w	r3, r3, #4
 8006ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ab2:	4b5c      	ldr	r3, [pc, #368]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab6:	4a5b      	ldr	r2, [pc, #364]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006ab8:	f043 0301 	orr.w	r3, r3, #1
 8006abc:	6713      	str	r3, [r2, #112]	; 0x70
 8006abe:	e00b      	b.n	8006ad8 <HAL_RCC_OscConfig+0x324>
 8006ac0:	4b58      	ldr	r3, [pc, #352]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac4:	4a57      	ldr	r2, [pc, #348]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006ac6:	f023 0301 	bic.w	r3, r3, #1
 8006aca:	6713      	str	r3, [r2, #112]	; 0x70
 8006acc:	4b55      	ldr	r3, [pc, #340]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad0:	4a54      	ldr	r2, [pc, #336]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006ad2:	f023 0304 	bic.w	r3, r3, #4
 8006ad6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d015      	beq.n	8006b0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ae0:	f7fc f8a0 	bl	8002c24 <HAL_GetTick>
 8006ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ae6:	e00a      	b.n	8006afe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ae8:	f7fc f89c 	bl	8002c24 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d901      	bls.n	8006afe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e0cb      	b.n	8006c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006afe:	4b49      	ldr	r3, [pc, #292]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d0ee      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x334>
 8006b0a:	e014      	b.n	8006b36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b0c:	f7fc f88a 	bl	8002c24 <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b12:	e00a      	b.n	8006b2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b14:	f7fc f886 	bl	8002c24 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e0b5      	b.n	8006c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b2a:	4b3e      	ldr	r3, [pc, #248]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1ee      	bne.n	8006b14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b36:	7dfb      	ldrb	r3, [r7, #23]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d105      	bne.n	8006b48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b3c:	4b39      	ldr	r3, [pc, #228]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b40:	4a38      	ldr	r2, [pc, #224]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 80a1 	beq.w	8006c94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b52:	4b34      	ldr	r3, [pc, #208]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f003 030c 	and.w	r3, r3, #12
 8006b5a:	2b08      	cmp	r3, #8
 8006b5c:	d05c      	beq.n	8006c18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d141      	bne.n	8006bea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b66:	4b31      	ldr	r3, [pc, #196]	; (8006c2c <HAL_RCC_OscConfig+0x478>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b6c:	f7fc f85a 	bl	8002c24 <HAL_GetTick>
 8006b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b72:	e008      	b.n	8006b86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b74:	f7fc f856 	bl	8002c24 <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d901      	bls.n	8006b86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e087      	b.n	8006c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b86:	4b27      	ldr	r3, [pc, #156]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1f0      	bne.n	8006b74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	69da      	ldr	r2, [r3, #28]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba0:	019b      	lsls	r3, r3, #6
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba8:	085b      	lsrs	r3, r3, #1
 8006baa:	3b01      	subs	r3, #1
 8006bac:	041b      	lsls	r3, r3, #16
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb4:	061b      	lsls	r3, r3, #24
 8006bb6:	491b      	ldr	r1, [pc, #108]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bbc:	4b1b      	ldr	r3, [pc, #108]	; (8006c2c <HAL_RCC_OscConfig+0x478>)
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc2:	f7fc f82f 	bl	8002c24 <HAL_GetTick>
 8006bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bc8:	e008      	b.n	8006bdc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bca:	f7fc f82b 	bl	8002c24 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e05c      	b.n	8006c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bdc:	4b11      	ldr	r3, [pc, #68]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d0f0      	beq.n	8006bca <HAL_RCC_OscConfig+0x416>
 8006be8:	e054      	b.n	8006c94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bea:	4b10      	ldr	r3, [pc, #64]	; (8006c2c <HAL_RCC_OscConfig+0x478>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bf0:	f7fc f818 	bl	8002c24 <HAL_GetTick>
 8006bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bf8:	f7fc f814 	bl	8002c24 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e045      	b.n	8006c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c0a:	4b06      	ldr	r3, [pc, #24]	; (8006c24 <HAL_RCC_OscConfig+0x470>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1f0      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x444>
 8006c16:	e03d      	b.n	8006c94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d107      	bne.n	8006c30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e038      	b.n	8006c96 <HAL_RCC_OscConfig+0x4e2>
 8006c24:	40023800 	.word	0x40023800
 8006c28:	40007000 	.word	0x40007000
 8006c2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c30:	4b1b      	ldr	r3, [pc, #108]	; (8006ca0 <HAL_RCC_OscConfig+0x4ec>)
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d028      	beq.n	8006c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d121      	bne.n	8006c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d11a      	bne.n	8006c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c60:	4013      	ands	r3, r2
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d111      	bne.n	8006c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c76:	085b      	lsrs	r3, r3, #1
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d107      	bne.n	8006c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d001      	beq.n	8006c94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e000      	b.n	8006c96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	40023800 	.word	0x40023800

08006ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e0cc      	b.n	8006e52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cb8:	4b68      	ldr	r3, [pc, #416]	; (8006e5c <HAL_RCC_ClockConfig+0x1b8>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0307 	and.w	r3, r3, #7
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d90c      	bls.n	8006ce0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cc6:	4b65      	ldr	r3, [pc, #404]	; (8006e5c <HAL_RCC_ClockConfig+0x1b8>)
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cce:	4b63      	ldr	r3, [pc, #396]	; (8006e5c <HAL_RCC_ClockConfig+0x1b8>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0307 	and.w	r3, r3, #7
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d001      	beq.n	8006ce0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e0b8      	b.n	8006e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d020      	beq.n	8006d2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0304 	and.w	r3, r3, #4
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d005      	beq.n	8006d04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cf8:	4b59      	ldr	r3, [pc, #356]	; (8006e60 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	4a58      	ldr	r2, [pc, #352]	; (8006e60 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0308 	and.w	r3, r3, #8
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d005      	beq.n	8006d1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d10:	4b53      	ldr	r3, [pc, #332]	; (8006e60 <HAL_RCC_ClockConfig+0x1bc>)
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	4a52      	ldr	r2, [pc, #328]	; (8006e60 <HAL_RCC_ClockConfig+0x1bc>)
 8006d16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d1c:	4b50      	ldr	r3, [pc, #320]	; (8006e60 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	494d      	ldr	r1, [pc, #308]	; (8006e60 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d044      	beq.n	8006dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d107      	bne.n	8006d52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d42:	4b47      	ldr	r3, [pc, #284]	; (8006e60 <HAL_RCC_ClockConfig+0x1bc>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d119      	bne.n	8006d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e07f      	b.n	8006e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d003      	beq.n	8006d62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d107      	bne.n	8006d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d62:	4b3f      	ldr	r3, [pc, #252]	; (8006e60 <HAL_RCC_ClockConfig+0x1bc>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d109      	bne.n	8006d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e06f      	b.n	8006e52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d72:	4b3b      	ldr	r3, [pc, #236]	; (8006e60 <HAL_RCC_ClockConfig+0x1bc>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e067      	b.n	8006e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d82:	4b37      	ldr	r3, [pc, #220]	; (8006e60 <HAL_RCC_ClockConfig+0x1bc>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f023 0203 	bic.w	r2, r3, #3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	4934      	ldr	r1, [pc, #208]	; (8006e60 <HAL_RCC_ClockConfig+0x1bc>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d94:	f7fb ff46 	bl	8002c24 <HAL_GetTick>
 8006d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d9a:	e00a      	b.n	8006db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d9c:	f7fb ff42 	bl	8002c24 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e04f      	b.n	8006e52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006db2:	4b2b      	ldr	r3, [pc, #172]	; (8006e60 <HAL_RCC_ClockConfig+0x1bc>)
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f003 020c 	and.w	r2, r3, #12
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d1eb      	bne.n	8006d9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dc4:	4b25      	ldr	r3, [pc, #148]	; (8006e5c <HAL_RCC_ClockConfig+0x1b8>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d20c      	bcs.n	8006dec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dd2:	4b22      	ldr	r3, [pc, #136]	; (8006e5c <HAL_RCC_ClockConfig+0x1b8>)
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dda:	4b20      	ldr	r3, [pc, #128]	; (8006e5c <HAL_RCC_ClockConfig+0x1b8>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d001      	beq.n	8006dec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e032      	b.n	8006e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0304 	and.w	r3, r3, #4
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d008      	beq.n	8006e0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006df8:	4b19      	ldr	r3, [pc, #100]	; (8006e60 <HAL_RCC_ClockConfig+0x1bc>)
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	4916      	ldr	r1, [pc, #88]	; (8006e60 <HAL_RCC_ClockConfig+0x1bc>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0308 	and.w	r3, r3, #8
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d009      	beq.n	8006e2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e16:	4b12      	ldr	r3, [pc, #72]	; (8006e60 <HAL_RCC_ClockConfig+0x1bc>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	00db      	lsls	r3, r3, #3
 8006e24:	490e      	ldr	r1, [pc, #56]	; (8006e60 <HAL_RCC_ClockConfig+0x1bc>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e2a:	f000 f821 	bl	8006e70 <HAL_RCC_GetSysClockFreq>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	4b0b      	ldr	r3, [pc, #44]	; (8006e60 <HAL_RCC_ClockConfig+0x1bc>)
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	091b      	lsrs	r3, r3, #4
 8006e36:	f003 030f 	and.w	r3, r3, #15
 8006e3a:	490a      	ldr	r1, [pc, #40]	; (8006e64 <HAL_RCC_ClockConfig+0x1c0>)
 8006e3c:	5ccb      	ldrb	r3, [r1, r3]
 8006e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e42:	4a09      	ldr	r2, [pc, #36]	; (8006e68 <HAL_RCC_ClockConfig+0x1c4>)
 8006e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e46:	4b09      	ldr	r3, [pc, #36]	; (8006e6c <HAL_RCC_ClockConfig+0x1c8>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fb fa90 	bl	8002370 <HAL_InitTick>

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	40023c00 	.word	0x40023c00
 8006e60:	40023800 	.word	0x40023800
 8006e64:	0800f260 	.word	0x0800f260
 8006e68:	20000000 	.word	0x20000000
 8006e6c:	20000004 	.word	0x20000004

08006e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e74:	b094      	sub	sp, #80	; 0x50
 8006e76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e80:	2300      	movs	r3, #0
 8006e82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e88:	4b79      	ldr	r3, [pc, #484]	; (8007070 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f003 030c 	and.w	r3, r3, #12
 8006e90:	2b08      	cmp	r3, #8
 8006e92:	d00d      	beq.n	8006eb0 <HAL_RCC_GetSysClockFreq+0x40>
 8006e94:	2b08      	cmp	r3, #8
 8006e96:	f200 80e1 	bhi.w	800705c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d002      	beq.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	d003      	beq.n	8006eaa <HAL_RCC_GetSysClockFreq+0x3a>
 8006ea2:	e0db      	b.n	800705c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ea4:	4b73      	ldr	r3, [pc, #460]	; (8007074 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ea6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006ea8:	e0db      	b.n	8007062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006eaa:	4b73      	ldr	r3, [pc, #460]	; (8007078 <HAL_RCC_GetSysClockFreq+0x208>)
 8006eac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006eae:	e0d8      	b.n	8007062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006eb0:	4b6f      	ldr	r3, [pc, #444]	; (8007070 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eb8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006eba:	4b6d      	ldr	r3, [pc, #436]	; (8007070 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d063      	beq.n	8006f8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ec6:	4b6a      	ldr	r3, [pc, #424]	; (8007070 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	099b      	lsrs	r3, r3, #6
 8006ecc:	2200      	movs	r2, #0
 8006ece:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ed0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8006eda:	2300      	movs	r3, #0
 8006edc:	637b      	str	r3, [r7, #52]	; 0x34
 8006ede:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006ee2:	4622      	mov	r2, r4
 8006ee4:	462b      	mov	r3, r5
 8006ee6:	f04f 0000 	mov.w	r0, #0
 8006eea:	f04f 0100 	mov.w	r1, #0
 8006eee:	0159      	lsls	r1, r3, #5
 8006ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ef4:	0150      	lsls	r0, r2, #5
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4621      	mov	r1, r4
 8006efc:	1a51      	subs	r1, r2, r1
 8006efe:	6139      	str	r1, [r7, #16]
 8006f00:	4629      	mov	r1, r5
 8006f02:	eb63 0301 	sbc.w	r3, r3, r1
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	f04f 0200 	mov.w	r2, #0
 8006f0c:	f04f 0300 	mov.w	r3, #0
 8006f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f14:	4659      	mov	r1, fp
 8006f16:	018b      	lsls	r3, r1, #6
 8006f18:	4651      	mov	r1, sl
 8006f1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f1e:	4651      	mov	r1, sl
 8006f20:	018a      	lsls	r2, r1, #6
 8006f22:	4651      	mov	r1, sl
 8006f24:	ebb2 0801 	subs.w	r8, r2, r1
 8006f28:	4659      	mov	r1, fp
 8006f2a:	eb63 0901 	sbc.w	r9, r3, r1
 8006f2e:	f04f 0200 	mov.w	r2, #0
 8006f32:	f04f 0300 	mov.w	r3, #0
 8006f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f42:	4690      	mov	r8, r2
 8006f44:	4699      	mov	r9, r3
 8006f46:	4623      	mov	r3, r4
 8006f48:	eb18 0303 	adds.w	r3, r8, r3
 8006f4c:	60bb      	str	r3, [r7, #8]
 8006f4e:	462b      	mov	r3, r5
 8006f50:	eb49 0303 	adc.w	r3, r9, r3
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	f04f 0200 	mov.w	r2, #0
 8006f5a:	f04f 0300 	mov.w	r3, #0
 8006f5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f62:	4629      	mov	r1, r5
 8006f64:	024b      	lsls	r3, r1, #9
 8006f66:	4621      	mov	r1, r4
 8006f68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	024a      	lsls	r2, r1, #9
 8006f70:	4610      	mov	r0, r2
 8006f72:	4619      	mov	r1, r3
 8006f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f76:	2200      	movs	r2, #0
 8006f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f80:	f7f9 fe8a 	bl	8000c98 <__aeabi_uldivmod>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	4613      	mov	r3, r2
 8006f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f8c:	e058      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f8e:	4b38      	ldr	r3, [pc, #224]	; (8007070 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	099b      	lsrs	r3, r3, #6
 8006f94:	2200      	movs	r2, #0
 8006f96:	4618      	mov	r0, r3
 8006f98:	4611      	mov	r1, r2
 8006f9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f9e:	623b      	str	r3, [r7, #32]
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006fa8:	4642      	mov	r2, r8
 8006faa:	464b      	mov	r3, r9
 8006fac:	f04f 0000 	mov.w	r0, #0
 8006fb0:	f04f 0100 	mov.w	r1, #0
 8006fb4:	0159      	lsls	r1, r3, #5
 8006fb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fba:	0150      	lsls	r0, r2, #5
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4641      	mov	r1, r8
 8006fc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006fc6:	4649      	mov	r1, r9
 8006fc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006fcc:	f04f 0200 	mov.w	r2, #0
 8006fd0:	f04f 0300 	mov.w	r3, #0
 8006fd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006fd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006fdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006fe0:	ebb2 040a 	subs.w	r4, r2, sl
 8006fe4:	eb63 050b 	sbc.w	r5, r3, fp
 8006fe8:	f04f 0200 	mov.w	r2, #0
 8006fec:	f04f 0300 	mov.w	r3, #0
 8006ff0:	00eb      	lsls	r3, r5, #3
 8006ff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ff6:	00e2      	lsls	r2, r4, #3
 8006ff8:	4614      	mov	r4, r2
 8006ffa:	461d      	mov	r5, r3
 8006ffc:	4643      	mov	r3, r8
 8006ffe:	18e3      	adds	r3, r4, r3
 8007000:	603b      	str	r3, [r7, #0]
 8007002:	464b      	mov	r3, r9
 8007004:	eb45 0303 	adc.w	r3, r5, r3
 8007008:	607b      	str	r3, [r7, #4]
 800700a:	f04f 0200 	mov.w	r2, #0
 800700e:	f04f 0300 	mov.w	r3, #0
 8007012:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007016:	4629      	mov	r1, r5
 8007018:	028b      	lsls	r3, r1, #10
 800701a:	4621      	mov	r1, r4
 800701c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007020:	4621      	mov	r1, r4
 8007022:	028a      	lsls	r2, r1, #10
 8007024:	4610      	mov	r0, r2
 8007026:	4619      	mov	r1, r3
 8007028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800702a:	2200      	movs	r2, #0
 800702c:	61bb      	str	r3, [r7, #24]
 800702e:	61fa      	str	r2, [r7, #28]
 8007030:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007034:	f7f9 fe30 	bl	8000c98 <__aeabi_uldivmod>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	4613      	mov	r3, r2
 800703e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007040:	4b0b      	ldr	r3, [pc, #44]	; (8007070 <HAL_RCC_GetSysClockFreq+0x200>)
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	0c1b      	lsrs	r3, r3, #16
 8007046:	f003 0303 	and.w	r3, r3, #3
 800704a:	3301      	adds	r3, #1
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007050:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007054:	fbb2 f3f3 	udiv	r3, r2, r3
 8007058:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800705a:	e002      	b.n	8007062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800705c:	4b05      	ldr	r3, [pc, #20]	; (8007074 <HAL_RCC_GetSysClockFreq+0x204>)
 800705e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007064:	4618      	mov	r0, r3
 8007066:	3750      	adds	r7, #80	; 0x50
 8007068:	46bd      	mov	sp, r7
 800706a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800706e:	bf00      	nop
 8007070:	40023800 	.word	0x40023800
 8007074:	00f42400 	.word	0x00f42400
 8007078:	007a1200 	.word	0x007a1200

0800707c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800707c:	b480      	push	{r7}
 800707e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007080:	4b03      	ldr	r3, [pc, #12]	; (8007090 <HAL_RCC_GetHCLKFreq+0x14>)
 8007082:	681b      	ldr	r3, [r3, #0]
}
 8007084:	4618      	mov	r0, r3
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	20000000 	.word	0x20000000

08007094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007098:	f7ff fff0 	bl	800707c <HAL_RCC_GetHCLKFreq>
 800709c:	4602      	mov	r2, r0
 800709e:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	0a9b      	lsrs	r3, r3, #10
 80070a4:	f003 0307 	and.w	r3, r3, #7
 80070a8:	4903      	ldr	r1, [pc, #12]	; (80070b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070aa:	5ccb      	ldrb	r3, [r1, r3]
 80070ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	40023800 	.word	0x40023800
 80070b8:	0800f270 	.word	0x0800f270

080070bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070c0:	f7ff ffdc 	bl	800707c <HAL_RCC_GetHCLKFreq>
 80070c4:	4602      	mov	r2, r0
 80070c6:	4b05      	ldr	r3, [pc, #20]	; (80070dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	0b5b      	lsrs	r3, r3, #13
 80070cc:	f003 0307 	and.w	r3, r3, #7
 80070d0:	4903      	ldr	r1, [pc, #12]	; (80070e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070d2:	5ccb      	ldrb	r3, [r1, r3]
 80070d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070d8:	4618      	mov	r0, r3
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	40023800 	.word	0x40023800
 80070e0:	0800f270 	.word	0x0800f270

080070e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	220f      	movs	r2, #15
 80070f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80070f4:	4b12      	ldr	r3, [pc, #72]	; (8007140 <HAL_RCC_GetClockConfig+0x5c>)
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f003 0203 	and.w	r2, r3, #3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007100:	4b0f      	ldr	r3, [pc, #60]	; (8007140 <HAL_RCC_GetClockConfig+0x5c>)
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800710c:	4b0c      	ldr	r3, [pc, #48]	; (8007140 <HAL_RCC_GetClockConfig+0x5c>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007118:	4b09      	ldr	r3, [pc, #36]	; (8007140 <HAL_RCC_GetClockConfig+0x5c>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	08db      	lsrs	r3, r3, #3
 800711e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007126:	4b07      	ldr	r3, [pc, #28]	; (8007144 <HAL_RCC_GetClockConfig+0x60>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0207 	and.w	r2, r3, #7
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	601a      	str	r2, [r3, #0]
}
 8007132:	bf00      	nop
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	40023800 	.word	0x40023800
 8007144:	40023c00 	.word	0x40023c00

08007148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d101      	bne.n	800715a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e041      	b.n	80071de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d106      	bne.n	8007174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f839 	bl	80071e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3304      	adds	r3, #4
 8007184:	4619      	mov	r1, r3
 8007186:	4610      	mov	r0, r2
 8007188:	f000 fb8c 	bl	80078a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80071ee:	bf00      	nop
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
	...

080071fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b01      	cmp	r3, #1
 800720e:	d001      	beq.n	8007214 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e044      	b.n	800729e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2202      	movs	r2, #2
 8007218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68da      	ldr	r2, [r3, #12]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0201 	orr.w	r2, r2, #1
 800722a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a1e      	ldr	r2, [pc, #120]	; (80072ac <HAL_TIM_Base_Start_IT+0xb0>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d018      	beq.n	8007268 <HAL_TIM_Base_Start_IT+0x6c>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723e:	d013      	beq.n	8007268 <HAL_TIM_Base_Start_IT+0x6c>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a1a      	ldr	r2, [pc, #104]	; (80072b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d00e      	beq.n	8007268 <HAL_TIM_Base_Start_IT+0x6c>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a19      	ldr	r2, [pc, #100]	; (80072b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d009      	beq.n	8007268 <HAL_TIM_Base_Start_IT+0x6c>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a17      	ldr	r2, [pc, #92]	; (80072b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d004      	beq.n	8007268 <HAL_TIM_Base_Start_IT+0x6c>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a16      	ldr	r2, [pc, #88]	; (80072bc <HAL_TIM_Base_Start_IT+0xc0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d111      	bne.n	800728c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f003 0307 	and.w	r3, r3, #7
 8007272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2b06      	cmp	r3, #6
 8007278:	d010      	beq.n	800729c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f042 0201 	orr.w	r2, r2, #1
 8007288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728a:	e007      	b.n	800729c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0201 	orr.w	r2, r2, #1
 800729a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	40010000 	.word	0x40010000
 80072b0:	40000400 	.word	0x40000400
 80072b4:	40000800 	.word	0x40000800
 80072b8:	40000c00 	.word	0x40000c00
 80072bc:	40014000 	.word	0x40014000

080072c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d101      	bne.n	80072d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e041      	b.n	8007356 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d106      	bne.n	80072ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7fb fab0 	bl	800284c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2202      	movs	r2, #2
 80072f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	3304      	adds	r3, #4
 80072fc:	4619      	mov	r1, r3
 80072fe:	4610      	mov	r0, r2
 8007300:	f000 fad0 	bl	80078a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
	...

08007360 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d109      	bne.n	8007384 <HAL_TIM_PWM_Start+0x24>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b01      	cmp	r3, #1
 800737a:	bf14      	ite	ne
 800737c:	2301      	movne	r3, #1
 800737e:	2300      	moveq	r3, #0
 8007380:	b2db      	uxtb	r3, r3
 8007382:	e022      	b.n	80073ca <HAL_TIM_PWM_Start+0x6a>
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	2b04      	cmp	r3, #4
 8007388:	d109      	bne.n	800739e <HAL_TIM_PWM_Start+0x3e>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b01      	cmp	r3, #1
 8007394:	bf14      	ite	ne
 8007396:	2301      	movne	r3, #1
 8007398:	2300      	moveq	r3, #0
 800739a:	b2db      	uxtb	r3, r3
 800739c:	e015      	b.n	80073ca <HAL_TIM_PWM_Start+0x6a>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b08      	cmp	r3, #8
 80073a2:	d109      	bne.n	80073b8 <HAL_TIM_PWM_Start+0x58>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	bf14      	ite	ne
 80073b0:	2301      	movne	r3, #1
 80073b2:	2300      	moveq	r3, #0
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	e008      	b.n	80073ca <HAL_TIM_PWM_Start+0x6a>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	bf14      	ite	ne
 80073c4:	2301      	movne	r3, #1
 80073c6:	2300      	moveq	r3, #0
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e068      	b.n	80074a4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d104      	bne.n	80073e2 <HAL_TIM_PWM_Start+0x82>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2202      	movs	r2, #2
 80073dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073e0:	e013      	b.n	800740a <HAL_TIM_PWM_Start+0xaa>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d104      	bne.n	80073f2 <HAL_TIM_PWM_Start+0x92>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073f0:	e00b      	b.n	800740a <HAL_TIM_PWM_Start+0xaa>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	d104      	bne.n	8007402 <HAL_TIM_PWM_Start+0xa2>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007400:	e003      	b.n	800740a <HAL_TIM_PWM_Start+0xaa>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2202      	movs	r2, #2
 8007406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2201      	movs	r2, #1
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	4618      	mov	r0, r3
 8007414:	f000 fc52 	bl	8007cbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a23      	ldr	r2, [pc, #140]	; (80074ac <HAL_TIM_PWM_Start+0x14c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d107      	bne.n	8007432 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007430:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a1d      	ldr	r2, [pc, #116]	; (80074ac <HAL_TIM_PWM_Start+0x14c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d018      	beq.n	800746e <HAL_TIM_PWM_Start+0x10e>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007444:	d013      	beq.n	800746e <HAL_TIM_PWM_Start+0x10e>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a19      	ldr	r2, [pc, #100]	; (80074b0 <HAL_TIM_PWM_Start+0x150>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d00e      	beq.n	800746e <HAL_TIM_PWM_Start+0x10e>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a17      	ldr	r2, [pc, #92]	; (80074b4 <HAL_TIM_PWM_Start+0x154>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d009      	beq.n	800746e <HAL_TIM_PWM_Start+0x10e>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a16      	ldr	r2, [pc, #88]	; (80074b8 <HAL_TIM_PWM_Start+0x158>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d004      	beq.n	800746e <HAL_TIM_PWM_Start+0x10e>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a14      	ldr	r2, [pc, #80]	; (80074bc <HAL_TIM_PWM_Start+0x15c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d111      	bne.n	8007492 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f003 0307 	and.w	r3, r3, #7
 8007478:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b06      	cmp	r3, #6
 800747e:	d010      	beq.n	80074a2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f042 0201 	orr.w	r2, r2, #1
 800748e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007490:	e007      	b.n	80074a2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f042 0201 	orr.w	r2, r2, #1
 80074a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	40010000 	.word	0x40010000
 80074b0:	40000400 	.word	0x40000400
 80074b4:	40000800 	.word	0x40000800
 80074b8:	40000c00 	.word	0x40000c00
 80074bc:	40014000 	.word	0x40014000

080074c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d122      	bne.n	800751c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d11b      	bne.n	800751c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f06f 0202 	mvn.w	r2, #2
 80074ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f9b0 	bl	8007868 <HAL_TIM_IC_CaptureCallback>
 8007508:	e005      	b.n	8007516 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f9a2 	bl	8007854 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f9b3 	bl	800787c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	f003 0304 	and.w	r3, r3, #4
 8007526:	2b04      	cmp	r3, #4
 8007528:	d122      	bne.n	8007570 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b04      	cmp	r3, #4
 8007536:	d11b      	bne.n	8007570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f06f 0204 	mvn.w	r2, #4
 8007540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2202      	movs	r2, #2
 8007546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f986 	bl	8007868 <HAL_TIM_IC_CaptureCallback>
 800755c:	e005      	b.n	800756a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f978 	bl	8007854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f989 	bl	800787c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	f003 0308 	and.w	r3, r3, #8
 800757a:	2b08      	cmp	r3, #8
 800757c:	d122      	bne.n	80075c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	f003 0308 	and.w	r3, r3, #8
 8007588:	2b08      	cmp	r3, #8
 800758a:	d11b      	bne.n	80075c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f06f 0208 	mvn.w	r2, #8
 8007594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2204      	movs	r2, #4
 800759a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	f003 0303 	and.w	r3, r3, #3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d003      	beq.n	80075b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f95c 	bl	8007868 <HAL_TIM_IC_CaptureCallback>
 80075b0:	e005      	b.n	80075be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f94e 	bl	8007854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f95f 	bl	800787c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	f003 0310 	and.w	r3, r3, #16
 80075ce:	2b10      	cmp	r3, #16
 80075d0:	d122      	bne.n	8007618 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f003 0310 	and.w	r3, r3, #16
 80075dc:	2b10      	cmp	r3, #16
 80075de:	d11b      	bne.n	8007618 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f06f 0210 	mvn.w	r2, #16
 80075e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2208      	movs	r2, #8
 80075ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f932 	bl	8007868 <HAL_TIM_IC_CaptureCallback>
 8007604:	e005      	b.n	8007612 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f924 	bl	8007854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f935 	bl	800787c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b01      	cmp	r3, #1
 8007624:	d10e      	bne.n	8007644 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f003 0301 	and.w	r3, r3, #1
 8007630:	2b01      	cmp	r3, #1
 8007632:	d107      	bne.n	8007644 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f06f 0201 	mvn.w	r2, #1
 800763c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fa fd56 	bl	80020f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764e:	2b80      	cmp	r3, #128	; 0x80
 8007650:	d10e      	bne.n	8007670 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765c:	2b80      	cmp	r3, #128	; 0x80
 800765e:	d107      	bne.n	8007670 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fbc4 	bl	8007df8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767a:	2b40      	cmp	r3, #64	; 0x40
 800767c:	d10e      	bne.n	800769c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007688:	2b40      	cmp	r3, #64	; 0x40
 800768a:	d107      	bne.n	800769c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f8fa 	bl	8007890 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	f003 0320 	and.w	r3, r3, #32
 80076a6:	2b20      	cmp	r3, #32
 80076a8:	d10e      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	f003 0320 	and.w	r3, r3, #32
 80076b4:	2b20      	cmp	r3, #32
 80076b6:	d107      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f06f 0220 	mvn.w	r2, #32
 80076c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fb8e 	bl	8007de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076c8:	bf00      	nop
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d101      	bne.n	80076ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076ea:	2302      	movs	r3, #2
 80076ec:	e0ae      	b.n	800784c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b0c      	cmp	r3, #12
 80076fa:	f200 809f 	bhi.w	800783c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80076fe:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007704:	08007739 	.word	0x08007739
 8007708:	0800783d 	.word	0x0800783d
 800770c:	0800783d 	.word	0x0800783d
 8007710:	0800783d 	.word	0x0800783d
 8007714:	08007779 	.word	0x08007779
 8007718:	0800783d 	.word	0x0800783d
 800771c:	0800783d 	.word	0x0800783d
 8007720:	0800783d 	.word	0x0800783d
 8007724:	080077bb 	.word	0x080077bb
 8007728:	0800783d 	.word	0x0800783d
 800772c:	0800783d 	.word	0x0800783d
 8007730:	0800783d 	.word	0x0800783d
 8007734:	080077fb 	.word	0x080077fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68b9      	ldr	r1, [r7, #8]
 800773e:	4618      	mov	r0, r3
 8007740:	f000 f930 	bl	80079a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	699a      	ldr	r2, [r3, #24]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f042 0208 	orr.w	r2, r2, #8
 8007752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	699a      	ldr	r2, [r3, #24]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f022 0204 	bic.w	r2, r2, #4
 8007762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6999      	ldr	r1, [r3, #24]
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	691a      	ldr	r2, [r3, #16]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	430a      	orrs	r2, r1
 8007774:	619a      	str	r2, [r3, #24]
      break;
 8007776:	e064      	b.n	8007842 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68b9      	ldr	r1, [r7, #8]
 800777e:	4618      	mov	r0, r3
 8007780:	f000 f976 	bl	8007a70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	699a      	ldr	r2, [r3, #24]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699a      	ldr	r2, [r3, #24]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6999      	ldr	r1, [r3, #24]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	021a      	lsls	r2, r3, #8
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	619a      	str	r2, [r3, #24]
      break;
 80077b8:	e043      	b.n	8007842 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68b9      	ldr	r1, [r7, #8]
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 f9c1 	bl	8007b48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69da      	ldr	r2, [r3, #28]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f042 0208 	orr.w	r2, r2, #8
 80077d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	69da      	ldr	r2, [r3, #28]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f022 0204 	bic.w	r2, r2, #4
 80077e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	69d9      	ldr	r1, [r3, #28]
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	691a      	ldr	r2, [r3, #16]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	61da      	str	r2, [r3, #28]
      break;
 80077f8:	e023      	b.n	8007842 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68b9      	ldr	r1, [r7, #8]
 8007800:	4618      	mov	r0, r3
 8007802:	f000 fa0b 	bl	8007c1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	69da      	ldr	r2, [r3, #28]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	69da      	ldr	r2, [r3, #28]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	69d9      	ldr	r1, [r3, #28]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	021a      	lsls	r2, r3, #8
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	430a      	orrs	r2, r1
 8007838:	61da      	str	r2, [r3, #28]
      break;
 800783a:	e002      	b.n	8007842 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	75fb      	strb	r3, [r7, #23]
      break;
 8007840:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800784a:	7dfb      	ldrb	r3, [r7, #23]
}
 800784c:	4618      	mov	r0, r3
 800784e:	3718      	adds	r7, #24
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a34      	ldr	r2, [pc, #208]	; (8007988 <TIM_Base_SetConfig+0xe4>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d00f      	beq.n	80078dc <TIM_Base_SetConfig+0x38>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c2:	d00b      	beq.n	80078dc <TIM_Base_SetConfig+0x38>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a31      	ldr	r2, [pc, #196]	; (800798c <TIM_Base_SetConfig+0xe8>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d007      	beq.n	80078dc <TIM_Base_SetConfig+0x38>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a30      	ldr	r2, [pc, #192]	; (8007990 <TIM_Base_SetConfig+0xec>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d003      	beq.n	80078dc <TIM_Base_SetConfig+0x38>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a2f      	ldr	r2, [pc, #188]	; (8007994 <TIM_Base_SetConfig+0xf0>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d108      	bne.n	80078ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a25      	ldr	r2, [pc, #148]	; (8007988 <TIM_Base_SetConfig+0xe4>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d01b      	beq.n	800792e <TIM_Base_SetConfig+0x8a>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078fc:	d017      	beq.n	800792e <TIM_Base_SetConfig+0x8a>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a22      	ldr	r2, [pc, #136]	; (800798c <TIM_Base_SetConfig+0xe8>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d013      	beq.n	800792e <TIM_Base_SetConfig+0x8a>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a21      	ldr	r2, [pc, #132]	; (8007990 <TIM_Base_SetConfig+0xec>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d00f      	beq.n	800792e <TIM_Base_SetConfig+0x8a>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a20      	ldr	r2, [pc, #128]	; (8007994 <TIM_Base_SetConfig+0xf0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d00b      	beq.n	800792e <TIM_Base_SetConfig+0x8a>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a1f      	ldr	r2, [pc, #124]	; (8007998 <TIM_Base_SetConfig+0xf4>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d007      	beq.n	800792e <TIM_Base_SetConfig+0x8a>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a1e      	ldr	r2, [pc, #120]	; (800799c <TIM_Base_SetConfig+0xf8>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d003      	beq.n	800792e <TIM_Base_SetConfig+0x8a>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a1d      	ldr	r2, [pc, #116]	; (80079a0 <TIM_Base_SetConfig+0xfc>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d108      	bne.n	8007940 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	4313      	orrs	r3, r2
 800793e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	4313      	orrs	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	689a      	ldr	r2, [r3, #8]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a08      	ldr	r2, [pc, #32]	; (8007988 <TIM_Base_SetConfig+0xe4>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d103      	bne.n	8007974 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	691a      	ldr	r2, [r3, #16]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	615a      	str	r2, [r3, #20]
}
 800797a:	bf00      	nop
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	40010000 	.word	0x40010000
 800798c:	40000400 	.word	0x40000400
 8007990:	40000800 	.word	0x40000800
 8007994:	40000c00 	.word	0x40000c00
 8007998:	40014000 	.word	0x40014000
 800799c:	40014400 	.word	0x40014400
 80079a0:	40014800 	.word	0x40014800

080079a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b087      	sub	sp, #28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	f023 0201 	bic.w	r2, r3, #1
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0303 	bic.w	r3, r3, #3
 80079da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f023 0302 	bic.w	r3, r3, #2
 80079ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a1c      	ldr	r2, [pc, #112]	; (8007a6c <TIM_OC1_SetConfig+0xc8>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d10c      	bne.n	8007a1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f023 0308 	bic.w	r3, r3, #8
 8007a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f023 0304 	bic.w	r3, r3, #4
 8007a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a13      	ldr	r2, [pc, #76]	; (8007a6c <TIM_OC1_SetConfig+0xc8>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d111      	bne.n	8007a46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	685a      	ldr	r2, [r3, #4]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	621a      	str	r2, [r3, #32]
}
 8007a60:	bf00      	nop
 8007a62:	371c      	adds	r7, #28
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	40010000 	.word	0x40010000

08007a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	f023 0210 	bic.w	r2, r3, #16
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	021b      	lsls	r3, r3, #8
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f023 0320 	bic.w	r3, r3, #32
 8007aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	011b      	lsls	r3, r3, #4
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a1e      	ldr	r2, [pc, #120]	; (8007b44 <TIM_OC2_SetConfig+0xd4>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d10d      	bne.n	8007aec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a15      	ldr	r2, [pc, #84]	; (8007b44 <TIM_OC2_SetConfig+0xd4>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d113      	bne.n	8007b1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	621a      	str	r2, [r3, #32]
}
 8007b36:	bf00      	nop
 8007b38:	371c      	adds	r7, #28
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	40010000 	.word	0x40010000

08007b48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f023 0303 	bic.w	r3, r3, #3
 8007b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	021b      	lsls	r3, r3, #8
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a1d      	ldr	r2, [pc, #116]	; (8007c18 <TIM_OC3_SetConfig+0xd0>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d10d      	bne.n	8007bc2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	021b      	lsls	r3, r3, #8
 8007bb4:	697a      	ldr	r2, [r7, #20]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a14      	ldr	r2, [pc, #80]	; (8007c18 <TIM_OC3_SetConfig+0xd0>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d113      	bne.n	8007bf2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	011b      	lsls	r3, r3, #4
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	011b      	lsls	r3, r3, #4
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	621a      	str	r2, [r3, #32]
}
 8007c0c:	bf00      	nop
 8007c0e:	371c      	adds	r7, #28
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	40010000 	.word	0x40010000

08007c1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b087      	sub	sp, #28
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	021b      	lsls	r3, r3, #8
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	031b      	lsls	r3, r3, #12
 8007c6e:	693a      	ldr	r2, [r7, #16]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a10      	ldr	r2, [pc, #64]	; (8007cb8 <TIM_OC4_SetConfig+0x9c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d109      	bne.n	8007c90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	019b      	lsls	r3, r3, #6
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	621a      	str	r2, [r3, #32]
}
 8007caa:	bf00      	nop
 8007cac:	371c      	adds	r7, #28
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	40010000 	.word	0x40010000

08007cbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	f003 031f 	and.w	r3, r3, #31
 8007cce:	2201      	movs	r2, #1
 8007cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6a1a      	ldr	r2, [r3, #32]
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	43db      	mvns	r3, r3
 8007cde:	401a      	ands	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6a1a      	ldr	r2, [r3, #32]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f003 031f 	and.w	r3, r3, #31
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	621a      	str	r2, [r3, #32]
}
 8007cfa:	bf00      	nop
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
	...

08007d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d101      	bne.n	8007d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e050      	b.n	8007dc2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a1c      	ldr	r2, [pc, #112]	; (8007dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d018      	beq.n	8007d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d6c:	d013      	beq.n	8007d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a18      	ldr	r2, [pc, #96]	; (8007dd4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d00e      	beq.n	8007d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a16      	ldr	r2, [pc, #88]	; (8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d009      	beq.n	8007d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a15      	ldr	r2, [pc, #84]	; (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d004      	beq.n	8007d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a13      	ldr	r2, [pc, #76]	; (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d10c      	bne.n	8007db0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3714      	adds	r7, #20
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	40010000 	.word	0x40010000
 8007dd4:	40000400 	.word	0x40000400
 8007dd8:	40000800 	.word	0x40000800
 8007ddc:	40000c00 	.word	0x40000c00
 8007de0:	40014000 	.word	0x40014000

08007de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e03f      	b.n	8007e9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d106      	bne.n	8007e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7fa fdf2 	bl	8002a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2224      	movs	r2, #36	; 0x24
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68da      	ldr	r2, [r3, #12]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fde9 	bl	8008a28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	691a      	ldr	r2, [r3, #16]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	695a      	ldr	r2, [r3, #20]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68da      	ldr	r2, [r3, #12]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2220      	movs	r2, #32
 8007e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b08a      	sub	sp, #40	; 0x28
 8007eaa:	af02      	add	r7, sp, #8
 8007eac:	60f8      	str	r0, [r7, #12]
 8007eae:	60b9      	str	r1, [r7, #8]
 8007eb0:	603b      	str	r3, [r7, #0]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b20      	cmp	r3, #32
 8007ec4:	d17c      	bne.n	8007fc0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <HAL_UART_Transmit+0x2c>
 8007ecc:	88fb      	ldrh	r3, [r7, #6]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d101      	bne.n	8007ed6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e075      	b.n	8007fc2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d101      	bne.n	8007ee4 <HAL_UART_Transmit+0x3e>
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	e06e      	b.n	8007fc2 <HAL_UART_Transmit+0x11c>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2221      	movs	r2, #33	; 0x21
 8007ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007efa:	f7fa fe93 	bl	8002c24 <HAL_GetTick>
 8007efe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	88fa      	ldrh	r2, [r7, #6]
 8007f04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	88fa      	ldrh	r2, [r7, #6]
 8007f0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f14:	d108      	bne.n	8007f28 <HAL_UART_Transmit+0x82>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d104      	bne.n	8007f28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	61bb      	str	r3, [r7, #24]
 8007f26:	e003      	b.n	8007f30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f38:	e02a      	b.n	8007f90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2200      	movs	r2, #0
 8007f42:	2180      	movs	r1, #128	; 0x80
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 fb29 	bl	800859c <UART_WaitOnFlagUntilTimeout>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e036      	b.n	8007fc2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10b      	bne.n	8007f72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	881b      	ldrh	r3, [r3, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	3302      	adds	r3, #2
 8007f6e:	61bb      	str	r3, [r7, #24]
 8007f70:	e007      	b.n	8007f82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	781a      	ldrb	r2, [r3, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1cf      	bne.n	8007f3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2140      	movs	r1, #64	; 0x40
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f000 faf9 	bl	800859c <UART_WaitOnFlagUntilTimeout>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d001      	beq.n	8007fb4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e006      	b.n	8007fc2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	e000      	b.n	8007fc2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007fc0:	2302      	movs	r3, #2
  }
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3720      	adds	r7, #32
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b084      	sub	sp, #16
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	60f8      	str	r0, [r7, #12]
 8007fd2:	60b9      	str	r1, [r7, #8]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	2b20      	cmp	r3, #32
 8007fe2:	d11d      	bne.n	8008020 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d002      	beq.n	8007ff0 <HAL_UART_Receive_IT+0x26>
 8007fea:	88fb      	ldrh	r3, [r7, #6]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e016      	b.n	8008022 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d101      	bne.n	8008002 <HAL_UART_Receive_IT+0x38>
 8007ffe:	2302      	movs	r3, #2
 8008000:	e00f      	b.n	8008022 <HAL_UART_Receive_IT+0x58>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008010:	88fb      	ldrh	r3, [r7, #6]
 8008012:	461a      	mov	r2, r3
 8008014:	68b9      	ldr	r1, [r7, #8]
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f000 fb2e 	bl	8008678 <UART_Start_Receive_IT>
 800801c:	4603      	mov	r3, r0
 800801e:	e000      	b.n	8008022 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008020:	2302      	movs	r3, #2
  }
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
	...

0800802c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b0ba      	sub	sp, #232	; 0xe8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008052:	2300      	movs	r3, #0
 8008054:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008058:	2300      	movs	r3, #0
 800805a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800805e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008062:	f003 030f 	and.w	r3, r3, #15
 8008066:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800806a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10f      	bne.n	8008092 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b00      	cmp	r3, #0
 800807c:	d009      	beq.n	8008092 <HAL_UART_IRQHandler+0x66>
 800807e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008082:	f003 0320 	and.w	r3, r3, #32
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fc11 	bl	80088b2 <UART_Receive_IT>
      return;
 8008090:	e256      	b.n	8008540 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008092:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008096:	2b00      	cmp	r3, #0
 8008098:	f000 80de 	beq.w	8008258 <HAL_UART_IRQHandler+0x22c>
 800809c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080a0:	f003 0301 	and.w	r3, r3, #1
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d106      	bne.n	80080b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80080a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 80d1 	beq.w	8008258 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80080b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00b      	beq.n	80080da <HAL_UART_IRQHandler+0xae>
 80080c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d005      	beq.n	80080da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d2:	f043 0201 	orr.w	r2, r3, #1
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080de:	f003 0304 	and.w	r3, r3, #4
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00b      	beq.n	80080fe <HAL_UART_IRQHandler+0xd2>
 80080e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d005      	beq.n	80080fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	f043 0202 	orr.w	r2, r3, #2
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00b      	beq.n	8008122 <HAL_UART_IRQHandler+0xf6>
 800810a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	2b00      	cmp	r3, #0
 8008114:	d005      	beq.n	8008122 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811a:	f043 0204 	orr.w	r2, r3, #4
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008126:	f003 0308 	and.w	r3, r3, #8
 800812a:	2b00      	cmp	r3, #0
 800812c:	d011      	beq.n	8008152 <HAL_UART_IRQHandler+0x126>
 800812e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008132:	f003 0320 	and.w	r3, r3, #32
 8008136:	2b00      	cmp	r3, #0
 8008138:	d105      	bne.n	8008146 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800813a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	d005      	beq.n	8008152 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814a:	f043 0208 	orr.w	r2, r3, #8
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 81ed 	beq.w	8008536 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800815c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008160:	f003 0320 	and.w	r3, r3, #32
 8008164:	2b00      	cmp	r3, #0
 8008166:	d008      	beq.n	800817a <HAL_UART_IRQHandler+0x14e>
 8008168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800816c:	f003 0320 	and.w	r3, r3, #32
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fb9c 	bl	80088b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008184:	2b40      	cmp	r3, #64	; 0x40
 8008186:	bf0c      	ite	eq
 8008188:	2301      	moveq	r3, #1
 800818a:	2300      	movne	r3, #0
 800818c:	b2db      	uxtb	r3, r3
 800818e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008196:	f003 0308 	and.w	r3, r3, #8
 800819a:	2b00      	cmp	r3, #0
 800819c:	d103      	bne.n	80081a6 <HAL_UART_IRQHandler+0x17a>
 800819e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d04f      	beq.n	8008246 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 faa4 	bl	80086f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b6:	2b40      	cmp	r3, #64	; 0x40
 80081b8:	d141      	bne.n	800823e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	3314      	adds	r3, #20
 80081c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081c8:	e853 3f00 	ldrex	r3, [r3]
 80081cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80081d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3314      	adds	r3, #20
 80081e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80081e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80081ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80081f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80081f6:	e841 2300 	strex	r3, r2, [r1]
 80081fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80081fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1d9      	bne.n	80081ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820a:	2b00      	cmp	r3, #0
 800820c:	d013      	beq.n	8008236 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008212:	4a7d      	ldr	r2, [pc, #500]	; (8008408 <HAL_UART_IRQHandler+0x3dc>)
 8008214:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821a:	4618      	mov	r0, r3
 800821c:	f7fa fe84 	bl	8002f28 <HAL_DMA_Abort_IT>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d016      	beq.n	8008254 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008230:	4610      	mov	r0, r2
 8008232:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008234:	e00e      	b.n	8008254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f99a 	bl	8008570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800823c:	e00a      	b.n	8008254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f996 	bl	8008570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008244:	e006      	b.n	8008254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f992 	bl	8008570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008252:	e170      	b.n	8008536 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008254:	bf00      	nop
    return;
 8008256:	e16e      	b.n	8008536 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825c:	2b01      	cmp	r3, #1
 800825e:	f040 814a 	bne.w	80084f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008266:	f003 0310 	and.w	r3, r3, #16
 800826a:	2b00      	cmp	r3, #0
 800826c:	f000 8143 	beq.w	80084f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008274:	f003 0310 	and.w	r3, r3, #16
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 813c 	beq.w	80084f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800827e:	2300      	movs	r3, #0
 8008280:	60bb      	str	r3, [r7, #8]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	60bb      	str	r3, [r7, #8]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	60bb      	str	r3, [r7, #8]
 8008292:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800829e:	2b40      	cmp	r3, #64	; 0x40
 80082a0:	f040 80b4 	bne.w	800840c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 8140 	beq.w	800853a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082c2:	429a      	cmp	r2, r3
 80082c4:	f080 8139 	bcs.w	800853a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d4:	69db      	ldr	r3, [r3, #28]
 80082d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082da:	f000 8088 	beq.w	80083ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	330c      	adds	r3, #12
 80082e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80082ec:	e853 3f00 	ldrex	r3, [r3]
 80082f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80082f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	330c      	adds	r3, #12
 8008306:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800830a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800830e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008312:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008316:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800831a:	e841 2300 	strex	r3, r2, [r1]
 800831e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008322:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1d9      	bne.n	80082de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3314      	adds	r3, #20
 8008330:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008334:	e853 3f00 	ldrex	r3, [r3]
 8008338:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800833a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800833c:	f023 0301 	bic.w	r3, r3, #1
 8008340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3314      	adds	r3, #20
 800834a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800834e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008352:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008354:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008356:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800835a:	e841 2300 	strex	r3, r2, [r1]
 800835e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1e1      	bne.n	800832a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	3314      	adds	r3, #20
 800836c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008370:	e853 3f00 	ldrex	r3, [r3]
 8008374:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800837c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3314      	adds	r3, #20
 8008386:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800838a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800838c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008390:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008392:	e841 2300 	strex	r3, r2, [r1]
 8008396:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1e3      	bne.n	8008366 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2220      	movs	r2, #32
 80083a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	330c      	adds	r3, #12
 80083b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083b6:	e853 3f00 	ldrex	r3, [r3]
 80083ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083be:	f023 0310 	bic.w	r3, r3, #16
 80083c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	330c      	adds	r3, #12
 80083cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80083d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80083d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083d8:	e841 2300 	strex	r3, r2, [r1]
 80083dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1e3      	bne.n	80083ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fa fd2d 	bl	8002e48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	4619      	mov	r1, r3
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f8c0 	bl	8008584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008404:	e099      	b.n	800853a <HAL_UART_IRQHandler+0x50e>
 8008406:	bf00      	nop
 8008408:	080087bb 	.word	0x080087bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008414:	b29b      	uxth	r3, r3
 8008416:	1ad3      	subs	r3, r2, r3
 8008418:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008420:	b29b      	uxth	r3, r3
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 808b 	beq.w	800853e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008428:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 8086 	beq.w	800853e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	330c      	adds	r3, #12
 8008438:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843c:	e853 3f00 	ldrex	r3, [r3]
 8008440:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008444:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008448:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	330c      	adds	r3, #12
 8008452:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008456:	647a      	str	r2, [r7, #68]	; 0x44
 8008458:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800845c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800845e:	e841 2300 	strex	r3, r2, [r1]
 8008462:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1e3      	bne.n	8008432 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3314      	adds	r3, #20
 8008470:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	e853 3f00 	ldrex	r3, [r3]
 8008478:	623b      	str	r3, [r7, #32]
   return(result);
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	f023 0301 	bic.w	r3, r3, #1
 8008480:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	3314      	adds	r3, #20
 800848a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800848e:	633a      	str	r2, [r7, #48]	; 0x30
 8008490:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008496:	e841 2300 	strex	r3, r2, [r1]
 800849a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1e3      	bne.n	800846a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2220      	movs	r2, #32
 80084a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	330c      	adds	r3, #12
 80084b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	e853 3f00 	ldrex	r3, [r3]
 80084be:	60fb      	str	r3, [r7, #12]
   return(result);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f023 0310 	bic.w	r3, r3, #16
 80084c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	330c      	adds	r3, #12
 80084d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80084d4:	61fa      	str	r2, [r7, #28]
 80084d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	69b9      	ldr	r1, [r7, #24]
 80084da:	69fa      	ldr	r2, [r7, #28]
 80084dc:	e841 2300 	strex	r3, r2, [r1]
 80084e0:	617b      	str	r3, [r7, #20]
   return(result);
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1e3      	bne.n	80084b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084ec:	4619      	mov	r1, r3
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f848 	bl	8008584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084f4:	e023      	b.n	800853e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80084f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d009      	beq.n	8008516 <HAL_UART_IRQHandler+0x4ea>
 8008502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f967 	bl	80087e2 <UART_Transmit_IT>
    return;
 8008514:	e014      	b.n	8008540 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800851a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00e      	beq.n	8008540 <HAL_UART_IRQHandler+0x514>
 8008522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800852a:	2b00      	cmp	r3, #0
 800852c:	d008      	beq.n	8008540 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f9a7 	bl	8008882 <UART_EndTransmit_IT>
    return;
 8008534:	e004      	b.n	8008540 <HAL_UART_IRQHandler+0x514>
    return;
 8008536:	bf00      	nop
 8008538:	e002      	b.n	8008540 <HAL_UART_IRQHandler+0x514>
      return;
 800853a:	bf00      	nop
 800853c:	e000      	b.n	8008540 <HAL_UART_IRQHandler+0x514>
      return;
 800853e:	bf00      	nop
  }
}
 8008540:	37e8      	adds	r7, #232	; 0xe8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop

08008548 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	460b      	mov	r3, r1
 800858e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b090      	sub	sp, #64	; 0x40
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	603b      	str	r3, [r7, #0]
 80085a8:	4613      	mov	r3, r2
 80085aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085ac:	e050      	b.n	8008650 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085b4:	d04c      	beq.n	8008650 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80085b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d007      	beq.n	80085cc <UART_WaitOnFlagUntilTimeout+0x30>
 80085bc:	f7fa fb32 	bl	8002c24 <HAL_GetTick>
 80085c0:	4602      	mov	r2, r0
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d241      	bcs.n	8008650 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	330c      	adds	r3, #12
 80085d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	e853 3f00 	ldrex	r3, [r3]
 80085da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	330c      	adds	r3, #12
 80085ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085ec:	637a      	str	r2, [r7, #52]	; 0x34
 80085ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085f4:	e841 2300 	strex	r3, r2, [r1]
 80085f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1e5      	bne.n	80085cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3314      	adds	r3, #20
 8008606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	e853 3f00 	ldrex	r3, [r3]
 800860e:	613b      	str	r3, [r7, #16]
   return(result);
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	f023 0301 	bic.w	r3, r3, #1
 8008616:	63bb      	str	r3, [r7, #56]	; 0x38
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3314      	adds	r3, #20
 800861e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008620:	623a      	str	r2, [r7, #32]
 8008622:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008624:	69f9      	ldr	r1, [r7, #28]
 8008626:	6a3a      	ldr	r2, [r7, #32]
 8008628:	e841 2300 	strex	r3, r2, [r1]
 800862c:	61bb      	str	r3, [r7, #24]
   return(result);
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1e5      	bne.n	8008600 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2220      	movs	r2, #32
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2220      	movs	r2, #32
 8008640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e00f      	b.n	8008670 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	4013      	ands	r3, r2
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	429a      	cmp	r2, r3
 800865e:	bf0c      	ite	eq
 8008660:	2301      	moveq	r3, #1
 8008662:	2300      	movne	r3, #0
 8008664:	b2db      	uxtb	r3, r3
 8008666:	461a      	mov	r2, r3
 8008668:	79fb      	ldrb	r3, [r7, #7]
 800866a:	429a      	cmp	r2, r3
 800866c:	d09f      	beq.n	80085ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3740      	adds	r7, #64	; 0x40
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	4613      	mov	r3, r2
 8008684:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	88fa      	ldrh	r2, [r7, #6]
 8008690:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	88fa      	ldrh	r2, [r7, #6]
 8008696:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2222      	movs	r2, #34	; 0x22
 80086a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d007      	beq.n	80086c6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68da      	ldr	r2, [r3, #12]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086c4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	695a      	ldr	r2, [r3, #20]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f042 0201 	orr.w	r2, r2, #1
 80086d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68da      	ldr	r2, [r3, #12]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f042 0220 	orr.w	r2, r2, #32
 80086e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3714      	adds	r7, #20
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b095      	sub	sp, #84	; 0x54
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	330c      	adds	r3, #12
 8008702:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008706:	e853 3f00 	ldrex	r3, [r3]
 800870a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	330c      	adds	r3, #12
 800871a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800871c:	643a      	str	r2, [r7, #64]	; 0x40
 800871e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008720:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008722:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008724:	e841 2300 	strex	r3, r2, [r1]
 8008728:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800872a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e5      	bne.n	80086fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3314      	adds	r3, #20
 8008736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	e853 3f00 	ldrex	r3, [r3]
 800873e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	f023 0301 	bic.w	r3, r3, #1
 8008746:	64bb      	str	r3, [r7, #72]	; 0x48
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3314      	adds	r3, #20
 800874e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008750:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008752:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008758:	e841 2300 	strex	r3, r2, [r1]
 800875c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1e5      	bne.n	8008730 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008768:	2b01      	cmp	r3, #1
 800876a:	d119      	bne.n	80087a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	330c      	adds	r3, #12
 8008772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	e853 3f00 	ldrex	r3, [r3]
 800877a:	60bb      	str	r3, [r7, #8]
   return(result);
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	f023 0310 	bic.w	r3, r3, #16
 8008782:	647b      	str	r3, [r7, #68]	; 0x44
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	330c      	adds	r3, #12
 800878a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800878c:	61ba      	str	r2, [r7, #24]
 800878e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008790:	6979      	ldr	r1, [r7, #20]
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	e841 2300 	strex	r3, r2, [r1]
 8008798:	613b      	str	r3, [r7, #16]
   return(result);
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1e5      	bne.n	800876c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2220      	movs	r2, #32
 80087a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80087ae:	bf00      	nop
 80087b0:	3754      	adds	r7, #84	; 0x54
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b084      	sub	sp, #16
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f7ff fecb 	bl	8008570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087da:	bf00      	nop
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b085      	sub	sp, #20
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b21      	cmp	r3, #33	; 0x21
 80087f4:	d13e      	bne.n	8008874 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087fe:	d114      	bne.n	800882a <UART_Transmit_IT+0x48>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d110      	bne.n	800882a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6a1b      	ldr	r3, [r3, #32]
 800880c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800881c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	1c9a      	adds	r2, r3, #2
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	621a      	str	r2, [r3, #32]
 8008828:	e008      	b.n	800883c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	1c59      	adds	r1, r3, #1
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	6211      	str	r1, [r2, #32]
 8008834:	781a      	ldrb	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008840:	b29b      	uxth	r3, r3
 8008842:	3b01      	subs	r3, #1
 8008844:	b29b      	uxth	r3, r3
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	4619      	mov	r1, r3
 800884a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10f      	bne.n	8008870 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68da      	ldr	r2, [r3, #12]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800885e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68da      	ldr	r2, [r3, #12]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800886e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008870:	2300      	movs	r3, #0
 8008872:	e000      	b.n	8008876 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008874:	2302      	movs	r3, #2
  }
}
 8008876:	4618      	mov	r0, r3
 8008878:	3714      	adds	r7, #20
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b082      	sub	sp, #8
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68da      	ldr	r2, [r3, #12]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008898:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2220      	movs	r2, #32
 800889e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7ff fe50 	bl	8008548 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b08c      	sub	sp, #48	; 0x30
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b22      	cmp	r3, #34	; 0x22
 80088c4:	f040 80ab 	bne.w	8008a1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d0:	d117      	bne.n	8008902 <UART_Receive_IT+0x50>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d113      	bne.n	8008902 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80088da:	2300      	movs	r3, #0
 80088dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fa:	1c9a      	adds	r2, r3, #2
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	629a      	str	r2, [r3, #40]	; 0x28
 8008900:	e026      	b.n	8008950 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008906:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008908:	2300      	movs	r3, #0
 800890a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008914:	d007      	beq.n	8008926 <UART_Receive_IT+0x74>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10a      	bne.n	8008934 <UART_Receive_IT+0x82>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d106      	bne.n	8008934 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	b2da      	uxtb	r2, r3
 800892e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008930:	701a      	strb	r2, [r3, #0]
 8008932:	e008      	b.n	8008946 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	b2db      	uxtb	r3, r3
 800893c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008940:	b2da      	uxtb	r2, r3
 8008942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008944:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894a:	1c5a      	adds	r2, r3, #1
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008954:	b29b      	uxth	r3, r3
 8008956:	3b01      	subs	r3, #1
 8008958:	b29b      	uxth	r3, r3
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	4619      	mov	r1, r3
 800895e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008960:	2b00      	cmp	r3, #0
 8008962:	d15a      	bne.n	8008a1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68da      	ldr	r2, [r3, #12]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f022 0220 	bic.w	r2, r2, #32
 8008972:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68da      	ldr	r2, [r3, #12]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008982:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	695a      	ldr	r2, [r3, #20]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f022 0201 	bic.w	r2, r2, #1
 8008992:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2220      	movs	r2, #32
 8008998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d135      	bne.n	8008a10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	330c      	adds	r3, #12
 80089b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	e853 3f00 	ldrex	r3, [r3]
 80089b8:	613b      	str	r3, [r7, #16]
   return(result);
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	f023 0310 	bic.w	r3, r3, #16
 80089c0:	627b      	str	r3, [r7, #36]	; 0x24
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	330c      	adds	r3, #12
 80089c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ca:	623a      	str	r2, [r7, #32]
 80089cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ce:	69f9      	ldr	r1, [r7, #28]
 80089d0:	6a3a      	ldr	r2, [r7, #32]
 80089d2:	e841 2300 	strex	r3, r2, [r1]
 80089d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1e5      	bne.n	80089aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0310 	and.w	r3, r3, #16
 80089e8:	2b10      	cmp	r3, #16
 80089ea:	d10a      	bne.n	8008a02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089ec:	2300      	movs	r3, #0
 80089ee:	60fb      	str	r3, [r7, #12]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	60fb      	str	r3, [r7, #12]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff fdbb 	bl	8008584 <HAL_UARTEx_RxEventCallback>
 8008a0e:	e002      	b.n	8008a16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7ff fda3 	bl	800855c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	e002      	b.n	8008a20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	e000      	b.n	8008a20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008a1e:	2302      	movs	r3, #2
  }
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3730      	adds	r7, #48	; 0x30
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a2c:	b0c0      	sub	sp, #256	; 0x100
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a44:	68d9      	ldr	r1, [r3, #12]
 8008a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	ea40 0301 	orr.w	r3, r0, r1
 8008a50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a56:	689a      	ldr	r2, [r3, #8]
 8008a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	431a      	orrs	r2, r3
 8008a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	431a      	orrs	r2, r3
 8008a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a6c:	69db      	ldr	r3, [r3, #28]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008a80:	f021 010c 	bic.w	r1, r1, #12
 8008a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a8e:	430b      	orrs	r3, r1
 8008a90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa2:	6999      	ldr	r1, [r3, #24]
 8008aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	ea40 0301 	orr.w	r3, r0, r1
 8008aae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	4b8f      	ldr	r3, [pc, #572]	; (8008cf4 <UART_SetConfig+0x2cc>)
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d005      	beq.n	8008ac8 <UART_SetConfig+0xa0>
 8008abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	4b8d      	ldr	r3, [pc, #564]	; (8008cf8 <UART_SetConfig+0x2d0>)
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d104      	bne.n	8008ad2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ac8:	f7fe faf8 	bl	80070bc <HAL_RCC_GetPCLK2Freq>
 8008acc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008ad0:	e003      	b.n	8008ada <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ad2:	f7fe fadf 	bl	8007094 <HAL_RCC_GetPCLK1Freq>
 8008ad6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ae4:	f040 810c 	bne.w	8008d00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008aec:	2200      	movs	r2, #0
 8008aee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008af2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008af6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008afa:	4622      	mov	r2, r4
 8008afc:	462b      	mov	r3, r5
 8008afe:	1891      	adds	r1, r2, r2
 8008b00:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b02:	415b      	adcs	r3, r3
 8008b04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	eb12 0801 	adds.w	r8, r2, r1
 8008b10:	4629      	mov	r1, r5
 8008b12:	eb43 0901 	adc.w	r9, r3, r1
 8008b16:	f04f 0200 	mov.w	r2, #0
 8008b1a:	f04f 0300 	mov.w	r3, #0
 8008b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b2a:	4690      	mov	r8, r2
 8008b2c:	4699      	mov	r9, r3
 8008b2e:	4623      	mov	r3, r4
 8008b30:	eb18 0303 	adds.w	r3, r8, r3
 8008b34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b38:	462b      	mov	r3, r5
 8008b3a:	eb49 0303 	adc.w	r3, r9, r3
 8008b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008b52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008b56:	460b      	mov	r3, r1
 8008b58:	18db      	adds	r3, r3, r3
 8008b5a:	653b      	str	r3, [r7, #80]	; 0x50
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	eb42 0303 	adc.w	r3, r2, r3
 8008b62:	657b      	str	r3, [r7, #84]	; 0x54
 8008b64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008b68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008b6c:	f7f8 f894 	bl	8000c98 <__aeabi_uldivmod>
 8008b70:	4602      	mov	r2, r0
 8008b72:	460b      	mov	r3, r1
 8008b74:	4b61      	ldr	r3, [pc, #388]	; (8008cfc <UART_SetConfig+0x2d4>)
 8008b76:	fba3 2302 	umull	r2, r3, r3, r2
 8008b7a:	095b      	lsrs	r3, r3, #5
 8008b7c:	011c      	lsls	r4, r3, #4
 8008b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b82:	2200      	movs	r2, #0
 8008b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008b8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008b90:	4642      	mov	r2, r8
 8008b92:	464b      	mov	r3, r9
 8008b94:	1891      	adds	r1, r2, r2
 8008b96:	64b9      	str	r1, [r7, #72]	; 0x48
 8008b98:	415b      	adcs	r3, r3
 8008b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ba0:	4641      	mov	r1, r8
 8008ba2:	eb12 0a01 	adds.w	sl, r2, r1
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	eb43 0b01 	adc.w	fp, r3, r1
 8008bac:	f04f 0200 	mov.w	r2, #0
 8008bb0:	f04f 0300 	mov.w	r3, #0
 8008bb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008bb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008bbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bc0:	4692      	mov	sl, r2
 8008bc2:	469b      	mov	fp, r3
 8008bc4:	4643      	mov	r3, r8
 8008bc6:	eb1a 0303 	adds.w	r3, sl, r3
 8008bca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008bce:	464b      	mov	r3, r9
 8008bd0:	eb4b 0303 	adc.w	r3, fp, r3
 8008bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008be4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008be8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008bec:	460b      	mov	r3, r1
 8008bee:	18db      	adds	r3, r3, r3
 8008bf0:	643b      	str	r3, [r7, #64]	; 0x40
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	eb42 0303 	adc.w	r3, r2, r3
 8008bf8:	647b      	str	r3, [r7, #68]	; 0x44
 8008bfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008bfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008c02:	f7f8 f849 	bl	8000c98 <__aeabi_uldivmod>
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	4b3b      	ldr	r3, [pc, #236]	; (8008cfc <UART_SetConfig+0x2d4>)
 8008c0e:	fba3 2301 	umull	r2, r3, r3, r1
 8008c12:	095b      	lsrs	r3, r3, #5
 8008c14:	2264      	movs	r2, #100	; 0x64
 8008c16:	fb02 f303 	mul.w	r3, r2, r3
 8008c1a:	1acb      	subs	r3, r1, r3
 8008c1c:	00db      	lsls	r3, r3, #3
 8008c1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008c22:	4b36      	ldr	r3, [pc, #216]	; (8008cfc <UART_SetConfig+0x2d4>)
 8008c24:	fba3 2302 	umull	r2, r3, r3, r2
 8008c28:	095b      	lsrs	r3, r3, #5
 8008c2a:	005b      	lsls	r3, r3, #1
 8008c2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c30:	441c      	add	r4, r3
 8008c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c36:	2200      	movs	r2, #0
 8008c38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008c40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008c44:	4642      	mov	r2, r8
 8008c46:	464b      	mov	r3, r9
 8008c48:	1891      	adds	r1, r2, r2
 8008c4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c4c:	415b      	adcs	r3, r3
 8008c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c54:	4641      	mov	r1, r8
 8008c56:	1851      	adds	r1, r2, r1
 8008c58:	6339      	str	r1, [r7, #48]	; 0x30
 8008c5a:	4649      	mov	r1, r9
 8008c5c:	414b      	adcs	r3, r1
 8008c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c60:	f04f 0200 	mov.w	r2, #0
 8008c64:	f04f 0300 	mov.w	r3, #0
 8008c68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008c6c:	4659      	mov	r1, fp
 8008c6e:	00cb      	lsls	r3, r1, #3
 8008c70:	4651      	mov	r1, sl
 8008c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c76:	4651      	mov	r1, sl
 8008c78:	00ca      	lsls	r2, r1, #3
 8008c7a:	4610      	mov	r0, r2
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4603      	mov	r3, r0
 8008c80:	4642      	mov	r2, r8
 8008c82:	189b      	adds	r3, r3, r2
 8008c84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c88:	464b      	mov	r3, r9
 8008c8a:	460a      	mov	r2, r1
 8008c8c:	eb42 0303 	adc.w	r3, r2, r3
 8008c90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ca0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008ca4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008ca8:	460b      	mov	r3, r1
 8008caa:	18db      	adds	r3, r3, r3
 8008cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cae:	4613      	mov	r3, r2
 8008cb0:	eb42 0303 	adc.w	r3, r2, r3
 8008cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008cba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008cbe:	f7f7 ffeb 	bl	8000c98 <__aeabi_uldivmod>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	4b0d      	ldr	r3, [pc, #52]	; (8008cfc <UART_SetConfig+0x2d4>)
 8008cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8008ccc:	095b      	lsrs	r3, r3, #5
 8008cce:	2164      	movs	r1, #100	; 0x64
 8008cd0:	fb01 f303 	mul.w	r3, r1, r3
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	3332      	adds	r3, #50	; 0x32
 8008cda:	4a08      	ldr	r2, [pc, #32]	; (8008cfc <UART_SetConfig+0x2d4>)
 8008cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce0:	095b      	lsrs	r3, r3, #5
 8008ce2:	f003 0207 	and.w	r2, r3, #7
 8008ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4422      	add	r2, r4
 8008cee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008cf0:	e105      	b.n	8008efe <UART_SetConfig+0x4d6>
 8008cf2:	bf00      	nop
 8008cf4:	40011000 	.word	0x40011000
 8008cf8:	40011400 	.word	0x40011400
 8008cfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d04:	2200      	movs	r2, #0
 8008d06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008d12:	4642      	mov	r2, r8
 8008d14:	464b      	mov	r3, r9
 8008d16:	1891      	adds	r1, r2, r2
 8008d18:	6239      	str	r1, [r7, #32]
 8008d1a:	415b      	adcs	r3, r3
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d22:	4641      	mov	r1, r8
 8008d24:	1854      	adds	r4, r2, r1
 8008d26:	4649      	mov	r1, r9
 8008d28:	eb43 0501 	adc.w	r5, r3, r1
 8008d2c:	f04f 0200 	mov.w	r2, #0
 8008d30:	f04f 0300 	mov.w	r3, #0
 8008d34:	00eb      	lsls	r3, r5, #3
 8008d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d3a:	00e2      	lsls	r2, r4, #3
 8008d3c:	4614      	mov	r4, r2
 8008d3e:	461d      	mov	r5, r3
 8008d40:	4643      	mov	r3, r8
 8008d42:	18e3      	adds	r3, r4, r3
 8008d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d48:	464b      	mov	r3, r9
 8008d4a:	eb45 0303 	adc.w	r3, r5, r3
 8008d4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008d62:	f04f 0200 	mov.w	r2, #0
 8008d66:	f04f 0300 	mov.w	r3, #0
 8008d6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008d6e:	4629      	mov	r1, r5
 8008d70:	008b      	lsls	r3, r1, #2
 8008d72:	4621      	mov	r1, r4
 8008d74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d78:	4621      	mov	r1, r4
 8008d7a:	008a      	lsls	r2, r1, #2
 8008d7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008d80:	f7f7 ff8a 	bl	8000c98 <__aeabi_uldivmod>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4b60      	ldr	r3, [pc, #384]	; (8008f0c <UART_SetConfig+0x4e4>)
 8008d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d8e:	095b      	lsrs	r3, r3, #5
 8008d90:	011c      	lsls	r4, r3, #4
 8008d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d96:	2200      	movs	r2, #0
 8008d98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008da0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008da4:	4642      	mov	r2, r8
 8008da6:	464b      	mov	r3, r9
 8008da8:	1891      	adds	r1, r2, r2
 8008daa:	61b9      	str	r1, [r7, #24]
 8008dac:	415b      	adcs	r3, r3
 8008dae:	61fb      	str	r3, [r7, #28]
 8008db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008db4:	4641      	mov	r1, r8
 8008db6:	1851      	adds	r1, r2, r1
 8008db8:	6139      	str	r1, [r7, #16]
 8008dba:	4649      	mov	r1, r9
 8008dbc:	414b      	adcs	r3, r1
 8008dbe:	617b      	str	r3, [r7, #20]
 8008dc0:	f04f 0200 	mov.w	r2, #0
 8008dc4:	f04f 0300 	mov.w	r3, #0
 8008dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008dcc:	4659      	mov	r1, fp
 8008dce:	00cb      	lsls	r3, r1, #3
 8008dd0:	4651      	mov	r1, sl
 8008dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dd6:	4651      	mov	r1, sl
 8008dd8:	00ca      	lsls	r2, r1, #3
 8008dda:	4610      	mov	r0, r2
 8008ddc:	4619      	mov	r1, r3
 8008dde:	4603      	mov	r3, r0
 8008de0:	4642      	mov	r2, r8
 8008de2:	189b      	adds	r3, r3, r2
 8008de4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008de8:	464b      	mov	r3, r9
 8008dea:	460a      	mov	r2, r1
 8008dec:	eb42 0303 	adc.w	r3, r2, r3
 8008df0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8008dfe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008e00:	f04f 0200 	mov.w	r2, #0
 8008e04:	f04f 0300 	mov.w	r3, #0
 8008e08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	008b      	lsls	r3, r1, #2
 8008e10:	4641      	mov	r1, r8
 8008e12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e16:	4641      	mov	r1, r8
 8008e18:	008a      	lsls	r2, r1, #2
 8008e1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008e1e:	f7f7 ff3b 	bl	8000c98 <__aeabi_uldivmod>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4b39      	ldr	r3, [pc, #228]	; (8008f0c <UART_SetConfig+0x4e4>)
 8008e28:	fba3 1302 	umull	r1, r3, r3, r2
 8008e2c:	095b      	lsrs	r3, r3, #5
 8008e2e:	2164      	movs	r1, #100	; 0x64
 8008e30:	fb01 f303 	mul.w	r3, r1, r3
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	011b      	lsls	r3, r3, #4
 8008e38:	3332      	adds	r3, #50	; 0x32
 8008e3a:	4a34      	ldr	r2, [pc, #208]	; (8008f0c <UART_SetConfig+0x4e4>)
 8008e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e40:	095b      	lsrs	r3, r3, #5
 8008e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e46:	441c      	add	r4, r3
 8008e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	673b      	str	r3, [r7, #112]	; 0x70
 8008e50:	677a      	str	r2, [r7, #116]	; 0x74
 8008e52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008e56:	4642      	mov	r2, r8
 8008e58:	464b      	mov	r3, r9
 8008e5a:	1891      	adds	r1, r2, r2
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	415b      	adcs	r3, r3
 8008e60:	60fb      	str	r3, [r7, #12]
 8008e62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e66:	4641      	mov	r1, r8
 8008e68:	1851      	adds	r1, r2, r1
 8008e6a:	6039      	str	r1, [r7, #0]
 8008e6c:	4649      	mov	r1, r9
 8008e6e:	414b      	adcs	r3, r1
 8008e70:	607b      	str	r3, [r7, #4]
 8008e72:	f04f 0200 	mov.w	r2, #0
 8008e76:	f04f 0300 	mov.w	r3, #0
 8008e7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e7e:	4659      	mov	r1, fp
 8008e80:	00cb      	lsls	r3, r1, #3
 8008e82:	4651      	mov	r1, sl
 8008e84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e88:	4651      	mov	r1, sl
 8008e8a:	00ca      	lsls	r2, r1, #3
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	4619      	mov	r1, r3
 8008e90:	4603      	mov	r3, r0
 8008e92:	4642      	mov	r2, r8
 8008e94:	189b      	adds	r3, r3, r2
 8008e96:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e98:	464b      	mov	r3, r9
 8008e9a:	460a      	mov	r2, r1
 8008e9c:	eb42 0303 	adc.w	r3, r2, r3
 8008ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	663b      	str	r3, [r7, #96]	; 0x60
 8008eac:	667a      	str	r2, [r7, #100]	; 0x64
 8008eae:	f04f 0200 	mov.w	r2, #0
 8008eb2:	f04f 0300 	mov.w	r3, #0
 8008eb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008eba:	4649      	mov	r1, r9
 8008ebc:	008b      	lsls	r3, r1, #2
 8008ebe:	4641      	mov	r1, r8
 8008ec0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ec4:	4641      	mov	r1, r8
 8008ec6:	008a      	lsls	r2, r1, #2
 8008ec8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008ecc:	f7f7 fee4 	bl	8000c98 <__aeabi_uldivmod>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	4b0d      	ldr	r3, [pc, #52]	; (8008f0c <UART_SetConfig+0x4e4>)
 8008ed6:	fba3 1302 	umull	r1, r3, r3, r2
 8008eda:	095b      	lsrs	r3, r3, #5
 8008edc:	2164      	movs	r1, #100	; 0x64
 8008ede:	fb01 f303 	mul.w	r3, r1, r3
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	011b      	lsls	r3, r3, #4
 8008ee6:	3332      	adds	r3, #50	; 0x32
 8008ee8:	4a08      	ldr	r2, [pc, #32]	; (8008f0c <UART_SetConfig+0x4e4>)
 8008eea:	fba2 2303 	umull	r2, r3, r2, r3
 8008eee:	095b      	lsrs	r3, r3, #5
 8008ef0:	f003 020f 	and.w	r2, r3, #15
 8008ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4422      	add	r2, r4
 8008efc:	609a      	str	r2, [r3, #8]
}
 8008efe:	bf00      	nop
 8008f00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008f04:	46bd      	mov	sp, r7
 8008f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f0a:	bf00      	nop
 8008f0c:	51eb851f 	.word	0x51eb851f

08008f10 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	4603      	mov	r3, r0
 8008f18:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f22:	2b84      	cmp	r3, #132	; 0x84
 8008f24:	d005      	beq.n	8008f32 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008f26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	3303      	adds	r3, #3
 8008f30:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008f32:	68fb      	ldr	r3, [r7, #12]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008f44:	f000 fc04 	bl	8009750 <vTaskStartScheduler>
  
  return osOK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008f4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f50:	b089      	sub	sp, #36	; 0x24
 8008f52:	af04      	add	r7, sp, #16
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	695b      	ldr	r3, [r3, #20]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d020      	beq.n	8008fa2 <osThreadCreate+0x54>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d01c      	beq.n	8008fa2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685c      	ldr	r4, [r3, #4]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681d      	ldr	r5, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	691e      	ldr	r6, [r3, #16]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7ff ffc8 	bl	8008f10 <makeFreeRtosPriority>
 8008f80:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	695b      	ldr	r3, [r3, #20]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f8a:	9202      	str	r2, [sp, #8]
 8008f8c:	9301      	str	r3, [sp, #4]
 8008f8e:	9100      	str	r1, [sp, #0]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	4632      	mov	r2, r6
 8008f94:	4629      	mov	r1, r5
 8008f96:	4620      	mov	r0, r4
 8008f98:	f000 f8ed 	bl	8009176 <xTaskCreateStatic>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	60fb      	str	r3, [r7, #12]
 8008fa0:	e01c      	b.n	8008fdc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	685c      	ldr	r4, [r3, #4]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008fae:	b29e      	uxth	r6, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7ff ffaa 	bl	8008f10 <makeFreeRtosPriority>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	f107 030c 	add.w	r3, r7, #12
 8008fc2:	9301      	str	r3, [sp, #4]
 8008fc4:	9200      	str	r2, [sp, #0]
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	4632      	mov	r2, r6
 8008fca:	4629      	mov	r1, r5
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f000 f92f 	bl	8009230 <xTaskCreate>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d001      	beq.n	8008fdc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	e000      	b.n	8008fde <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fe6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b084      	sub	sp, #16
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d001      	beq.n	8008ffc <osDelay+0x16>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	e000      	b.n	8008ffe <osDelay+0x18>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	4618      	mov	r0, r3
 8009000:	f000 fb72 	bl	80096e8 <vTaskDelay>
  
  return osOK;
 8009004:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800900e:	b480      	push	{r7}
 8009010:	b083      	sub	sp, #12
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f103 0208 	add.w	r2, r3, #8
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009026:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f103 0208 	add.w	r2, r3, #8
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f103 0208 	add.w	r2, r3, #8
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009042:	bf00      	nop
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800904e:	b480      	push	{r7}
 8009050:	b083      	sub	sp, #12
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800905c:	bf00      	nop
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	689a      	ldr	r2, [r3, #8]
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	683a      	ldr	r2, [r7, #0]
 8009092:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	601a      	str	r2, [r3, #0]
}
 80090a4:	bf00      	nop
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090c6:	d103      	bne.n	80090d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	60fb      	str	r3, [r7, #12]
 80090ce:	e00c      	b.n	80090ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	3308      	adds	r3, #8
 80090d4:	60fb      	str	r3, [r7, #12]
 80090d6:	e002      	b.n	80090de <vListInsert+0x2e>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	60fb      	str	r3, [r7, #12]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d2f6      	bcs.n	80090d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	685a      	ldr	r2, [r3, #4]
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	683a      	ldr	r2, [r7, #0]
 80090f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	683a      	ldr	r2, [r7, #0]
 8009104:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	1c5a      	adds	r2, r3, #1
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	601a      	str	r2, [r3, #0]
}
 8009116:	bf00      	nop
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr

08009122 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009122:	b480      	push	{r7}
 8009124:	b085      	sub	sp, #20
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	6892      	ldr	r2, [r2, #8]
 8009138:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	6852      	ldr	r2, [r2, #4]
 8009142:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	429a      	cmp	r2, r3
 800914c:	d103      	bne.n	8009156 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	689a      	ldr	r2, [r3, #8]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	1e5a      	subs	r2, r3, #1
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
}
 800916a:	4618      	mov	r0, r3
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009176:	b580      	push	{r7, lr}
 8009178:	b08e      	sub	sp, #56	; 0x38
 800917a:	af04      	add	r7, sp, #16
 800917c:	60f8      	str	r0, [r7, #12]
 800917e:	60b9      	str	r1, [r7, #8]
 8009180:	607a      	str	r2, [r7, #4]
 8009182:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10a      	bne.n	80091a0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800918a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800919c:	bf00      	nop
 800919e:	e7fe      	b.n	800919e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80091a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d10a      	bne.n	80091bc <xTaskCreateStatic+0x46>
	__asm volatile
 80091a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091aa:	f383 8811 	msr	BASEPRI, r3
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	61fb      	str	r3, [r7, #28]
}
 80091b8:	bf00      	nop
 80091ba:	e7fe      	b.n	80091ba <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80091bc:	23b4      	movs	r3, #180	; 0xb4
 80091be:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	2bb4      	cmp	r3, #180	; 0xb4
 80091c4:	d00a      	beq.n	80091dc <xTaskCreateStatic+0x66>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	61bb      	str	r3, [r7, #24]
}
 80091d8:	bf00      	nop
 80091da:	e7fe      	b.n	80091da <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80091dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80091de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d01e      	beq.n	8009222 <xTaskCreateStatic+0xac>
 80091e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d01b      	beq.n	8009222 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091f2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f6:	2202      	movs	r2, #2
 80091f8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091fc:	2300      	movs	r3, #0
 80091fe:	9303      	str	r3, [sp, #12]
 8009200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009202:	9302      	str	r3, [sp, #8]
 8009204:	f107 0314 	add.w	r3, r7, #20
 8009208:	9301      	str	r3, [sp, #4]
 800920a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	68b9      	ldr	r1, [r7, #8]
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f000 f851 	bl	80092bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800921a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800921c:	f000 f8ec 	bl	80093f8 <prvAddNewTaskToReadyList>
 8009220:	e001      	b.n	8009226 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009222:	2300      	movs	r3, #0
 8009224:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009226:	697b      	ldr	r3, [r7, #20]
	}
 8009228:	4618      	mov	r0, r3
 800922a:	3728      	adds	r7, #40	; 0x28
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009230:	b580      	push	{r7, lr}
 8009232:	b08c      	sub	sp, #48	; 0x30
 8009234:	af04      	add	r7, sp, #16
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	603b      	str	r3, [r7, #0]
 800923c:	4613      	mov	r3, r2
 800923e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009240:	88fb      	ldrh	r3, [r7, #6]
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4618      	mov	r0, r3
 8009246:	f001 f80f 	bl	800a268 <pvPortMalloc>
 800924a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00e      	beq.n	8009270 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009252:	20b4      	movs	r0, #180	; 0xb4
 8009254:	f001 f808 	bl	800a268 <pvPortMalloc>
 8009258:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d003      	beq.n	8009268 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	631a      	str	r2, [r3, #48]	; 0x30
 8009266:	e005      	b.n	8009274 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009268:	6978      	ldr	r0, [r7, #20]
 800926a:	f001 f8c9 	bl	800a400 <vPortFree>
 800926e:	e001      	b.n	8009274 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009270:	2300      	movs	r3, #0
 8009272:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d017      	beq.n	80092aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009282:	88fa      	ldrh	r2, [r7, #6]
 8009284:	2300      	movs	r3, #0
 8009286:	9303      	str	r3, [sp, #12]
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	9302      	str	r3, [sp, #8]
 800928c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928e:	9301      	str	r3, [sp, #4]
 8009290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009292:	9300      	str	r3, [sp, #0]
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	68b9      	ldr	r1, [r7, #8]
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f000 f80f 	bl	80092bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800929e:	69f8      	ldr	r0, [r7, #28]
 80092a0:	f000 f8aa 	bl	80093f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092a4:	2301      	movs	r3, #1
 80092a6:	61bb      	str	r3, [r7, #24]
 80092a8:	e002      	b.n	80092b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092b0:	69bb      	ldr	r3, [r7, #24]
	}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3720      	adds	r7, #32
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
	...

080092bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b088      	sub	sp, #32
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
 80092c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80092d4:	3b01      	subs	r3, #1
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	f023 0307 	bic.w	r3, r3, #7
 80092e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	f003 0307 	and.w	r3, r3, #7
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d00a      	beq.n	8009304 <prvInitialiseNewTask+0x48>
	__asm volatile
 80092ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f2:	f383 8811 	msr	BASEPRI, r3
 80092f6:	f3bf 8f6f 	isb	sy
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	617b      	str	r3, [r7, #20]
}
 8009300:	bf00      	nop
 8009302:	e7fe      	b.n	8009302 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d01f      	beq.n	800934a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800930a:	2300      	movs	r3, #0
 800930c:	61fb      	str	r3, [r7, #28]
 800930e:	e012      	b.n	8009336 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	4413      	add	r3, r2
 8009316:	7819      	ldrb	r1, [r3, #0]
 8009318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	4413      	add	r3, r2
 800931e:	3334      	adds	r3, #52	; 0x34
 8009320:	460a      	mov	r2, r1
 8009322:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	4413      	add	r3, r2
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d006      	beq.n	800933e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	3301      	adds	r3, #1
 8009334:	61fb      	str	r3, [r7, #28]
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	2b0f      	cmp	r3, #15
 800933a:	d9e9      	bls.n	8009310 <prvInitialiseNewTask+0x54>
 800933c:	e000      	b.n	8009340 <prvInitialiseNewTask+0x84>
			{
				break;
 800933e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009342:	2200      	movs	r2, #0
 8009344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009348:	e003      	b.n	8009352 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	2200      	movs	r2, #0
 800934e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009354:	2b06      	cmp	r3, #6
 8009356:	d901      	bls.n	800935c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009358:	2306      	movs	r3, #6
 800935a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800935c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009360:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009366:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936a:	2200      	movs	r2, #0
 800936c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800936e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009370:	3304      	adds	r3, #4
 8009372:	4618      	mov	r0, r3
 8009374:	f7ff fe6b 	bl	800904e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937a:	3318      	adds	r3, #24
 800937c:	4618      	mov	r0, r3
 800937e:	f7ff fe66 	bl	800904e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009386:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938a:	f1c3 0207 	rsb	r2, r3, #7
 800938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009390:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009396:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939a:	2200      	movs	r2, #0
 800939c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80093a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093aa:	334c      	adds	r3, #76	; 0x4c
 80093ac:	2260      	movs	r2, #96	; 0x60
 80093ae:	2100      	movs	r1, #0
 80093b0:	4618      	mov	r0, r3
 80093b2:	f001 fa78 	bl	800a8a6 <memset>
 80093b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b8:	4a0c      	ldr	r2, [pc, #48]	; (80093ec <prvInitialiseNewTask+0x130>)
 80093ba:	651a      	str	r2, [r3, #80]	; 0x50
 80093bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093be:	4a0c      	ldr	r2, [pc, #48]	; (80093f0 <prvInitialiseNewTask+0x134>)
 80093c0:	655a      	str	r2, [r3, #84]	; 0x54
 80093c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c4:	4a0b      	ldr	r2, [pc, #44]	; (80093f4 <prvInitialiseNewTask+0x138>)
 80093c6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	68f9      	ldr	r1, [r7, #12]
 80093cc:	69b8      	ldr	r0, [r7, #24]
 80093ce:	f000 fd3d 	bl	8009e4c <pxPortInitialiseStack>
 80093d2:	4602      	mov	r2, r0
 80093d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80093d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d002      	beq.n	80093e4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093e4:	bf00      	nop
 80093e6:	3720      	adds	r7, #32
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	0800f298 	.word	0x0800f298
 80093f0:	0800f2b8 	.word	0x0800f2b8
 80093f4:	0800f278 	.word	0x0800f278

080093f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009400:	f000 fe50 	bl	800a0a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009404:	4b2a      	ldr	r3, [pc, #168]	; (80094b0 <prvAddNewTaskToReadyList+0xb8>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	3301      	adds	r3, #1
 800940a:	4a29      	ldr	r2, [pc, #164]	; (80094b0 <prvAddNewTaskToReadyList+0xb8>)
 800940c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800940e:	4b29      	ldr	r3, [pc, #164]	; (80094b4 <prvAddNewTaskToReadyList+0xbc>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d109      	bne.n	800942a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009416:	4a27      	ldr	r2, [pc, #156]	; (80094b4 <prvAddNewTaskToReadyList+0xbc>)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800941c:	4b24      	ldr	r3, [pc, #144]	; (80094b0 <prvAddNewTaskToReadyList+0xb8>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d110      	bne.n	8009446 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009424:	f000 fbea 	bl	8009bfc <prvInitialiseTaskLists>
 8009428:	e00d      	b.n	8009446 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800942a:	4b23      	ldr	r3, [pc, #140]	; (80094b8 <prvAddNewTaskToReadyList+0xc0>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d109      	bne.n	8009446 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009432:	4b20      	ldr	r3, [pc, #128]	; (80094b4 <prvAddNewTaskToReadyList+0xbc>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943c:	429a      	cmp	r2, r3
 800943e:	d802      	bhi.n	8009446 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009440:	4a1c      	ldr	r2, [pc, #112]	; (80094b4 <prvAddNewTaskToReadyList+0xbc>)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009446:	4b1d      	ldr	r3, [pc, #116]	; (80094bc <prvAddNewTaskToReadyList+0xc4>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3301      	adds	r3, #1
 800944c:	4a1b      	ldr	r2, [pc, #108]	; (80094bc <prvAddNewTaskToReadyList+0xc4>)
 800944e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009454:	2201      	movs	r2, #1
 8009456:	409a      	lsls	r2, r3
 8009458:	4b19      	ldr	r3, [pc, #100]	; (80094c0 <prvAddNewTaskToReadyList+0xc8>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4313      	orrs	r3, r2
 800945e:	4a18      	ldr	r2, [pc, #96]	; (80094c0 <prvAddNewTaskToReadyList+0xc8>)
 8009460:	6013      	str	r3, [r2, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009466:	4613      	mov	r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	4413      	add	r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	4a15      	ldr	r2, [pc, #84]	; (80094c4 <prvAddNewTaskToReadyList+0xcc>)
 8009470:	441a      	add	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	3304      	adds	r3, #4
 8009476:	4619      	mov	r1, r3
 8009478:	4610      	mov	r0, r2
 800947a:	f7ff fdf5 	bl	8009068 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800947e:	f000 fe41 	bl	800a104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009482:	4b0d      	ldr	r3, [pc, #52]	; (80094b8 <prvAddNewTaskToReadyList+0xc0>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00e      	beq.n	80094a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800948a:	4b0a      	ldr	r3, [pc, #40]	; (80094b4 <prvAddNewTaskToReadyList+0xbc>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009494:	429a      	cmp	r2, r3
 8009496:	d207      	bcs.n	80094a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009498:	4b0b      	ldr	r3, [pc, #44]	; (80094c8 <prvAddNewTaskToReadyList+0xd0>)
 800949a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	f3bf 8f4f 	dsb	sy
 80094a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094a8:	bf00      	nop
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	20000ca8 	.word	0x20000ca8
 80094b4:	20000ba8 	.word	0x20000ba8
 80094b8:	20000cb4 	.word	0x20000cb4
 80094bc:	20000cc4 	.word	0x20000cc4
 80094c0:	20000cb0 	.word	0x20000cb0
 80094c4:	20000bac 	.word	0x20000bac
 80094c8:	e000ed04 	.word	0xe000ed04

080094cc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80094d4:	f000 fde6 	bl	800a0a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d102      	bne.n	80094e4 <vTaskDelete+0x18>
 80094de:	4b39      	ldr	r3, [pc, #228]	; (80095c4 <vTaskDelete+0xf8>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	e000      	b.n	80094e6 <vTaskDelete+0x1a>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	3304      	adds	r3, #4
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7ff fe18 	bl	8009122 <uxListRemove>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d115      	bne.n	8009524 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094fc:	4932      	ldr	r1, [pc, #200]	; (80095c8 <vTaskDelete+0xfc>)
 80094fe:	4613      	mov	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4413      	add	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	440b      	add	r3, r1
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10a      	bne.n	8009524 <vTaskDelete+0x58>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009512:	2201      	movs	r2, #1
 8009514:	fa02 f303 	lsl.w	r3, r2, r3
 8009518:	43da      	mvns	r2, r3
 800951a:	4b2c      	ldr	r3, [pc, #176]	; (80095cc <vTaskDelete+0x100>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4013      	ands	r3, r2
 8009520:	4a2a      	ldr	r2, [pc, #168]	; (80095cc <vTaskDelete+0x100>)
 8009522:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009528:	2b00      	cmp	r3, #0
 800952a:	d004      	beq.n	8009536 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	3318      	adds	r3, #24
 8009530:	4618      	mov	r0, r3
 8009532:	f7ff fdf6 	bl	8009122 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8009536:	4b26      	ldr	r3, [pc, #152]	; (80095d0 <vTaskDelete+0x104>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3301      	adds	r3, #1
 800953c:	4a24      	ldr	r2, [pc, #144]	; (80095d0 <vTaskDelete+0x104>)
 800953e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009540:	4b20      	ldr	r3, [pc, #128]	; (80095c4 <vTaskDelete+0xf8>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	429a      	cmp	r2, r3
 8009548:	d10b      	bne.n	8009562 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	3304      	adds	r3, #4
 800954e:	4619      	mov	r1, r3
 8009550:	4820      	ldr	r0, [pc, #128]	; (80095d4 <vTaskDelete+0x108>)
 8009552:	f7ff fd89 	bl	8009068 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8009556:	4b20      	ldr	r3, [pc, #128]	; (80095d8 <vTaskDelete+0x10c>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3301      	adds	r3, #1
 800955c:	4a1e      	ldr	r2, [pc, #120]	; (80095d8 <vTaskDelete+0x10c>)
 800955e:	6013      	str	r3, [r2, #0]
 8009560:	e009      	b.n	8009576 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009562:	4b1e      	ldr	r3, [pc, #120]	; (80095dc <vTaskDelete+0x110>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	3b01      	subs	r3, #1
 8009568:	4a1c      	ldr	r2, [pc, #112]	; (80095dc <vTaskDelete+0x110>)
 800956a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f000 fbb3 	bl	8009cd8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009572:	f000 fbe5 	bl	8009d40 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8009576:	f000 fdc5 	bl	800a104 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800957a:	4b19      	ldr	r3, [pc, #100]	; (80095e0 <vTaskDelete+0x114>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d01b      	beq.n	80095ba <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8009582:	4b10      	ldr	r3, [pc, #64]	; (80095c4 <vTaskDelete+0xf8>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	429a      	cmp	r2, r3
 800958a:	d116      	bne.n	80095ba <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800958c:	4b15      	ldr	r3, [pc, #84]	; (80095e4 <vTaskDelete+0x118>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00a      	beq.n	80095aa <vTaskDelete+0xde>
	__asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	60bb      	str	r3, [r7, #8]
}
 80095a6:	bf00      	nop
 80095a8:	e7fe      	b.n	80095a8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80095aa:	4b0f      	ldr	r3, [pc, #60]	; (80095e8 <vTaskDelete+0x11c>)
 80095ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095b0:	601a      	str	r2, [r3, #0]
 80095b2:	f3bf 8f4f 	dsb	sy
 80095b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80095ba:	bf00      	nop
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	20000ba8 	.word	0x20000ba8
 80095c8:	20000bac 	.word	0x20000bac
 80095cc:	20000cb0 	.word	0x20000cb0
 80095d0:	20000cc4 	.word	0x20000cc4
 80095d4:	20000c7c 	.word	0x20000c7c
 80095d8:	20000c90 	.word	0x20000c90
 80095dc:	20000ca8 	.word	0x20000ca8
 80095e0:	20000cb4 	.word	0x20000cb4
 80095e4:	20000cd0 	.word	0x20000cd0
 80095e8:	e000ed04 	.word	0xe000ed04

080095ec <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08a      	sub	sp, #40	; 0x28
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80095f6:	2300      	movs	r3, #0
 80095f8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10a      	bne.n	8009616 <vTaskDelayUntil+0x2a>
	__asm volatile
 8009600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	617b      	str	r3, [r7, #20]
}
 8009612:	bf00      	nop
 8009614:	e7fe      	b.n	8009614 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10a      	bne.n	8009632 <vTaskDelayUntil+0x46>
	__asm volatile
 800961c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	613b      	str	r3, [r7, #16]
}
 800962e:	bf00      	nop
 8009630:	e7fe      	b.n	8009630 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8009632:	4b2a      	ldr	r3, [pc, #168]	; (80096dc <vTaskDelayUntil+0xf0>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00a      	beq.n	8009650 <vTaskDelayUntil+0x64>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	60fb      	str	r3, [r7, #12]
}
 800964c:	bf00      	nop
 800964e:	e7fe      	b.n	800964e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009650:	f000 f8e8 	bl	8009824 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009654:	4b22      	ldr	r3, [pc, #136]	; (80096e0 <vTaskDelayUntil+0xf4>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	4413      	add	r3, r2
 8009662:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	6a3a      	ldr	r2, [r7, #32]
 800966a:	429a      	cmp	r2, r3
 800966c:	d20b      	bcs.n	8009686 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	69fa      	ldr	r2, [r7, #28]
 8009674:	429a      	cmp	r2, r3
 8009676:	d211      	bcs.n	800969c <vTaskDelayUntil+0xb0>
 8009678:	69fa      	ldr	r2, [r7, #28]
 800967a:	6a3b      	ldr	r3, [r7, #32]
 800967c:	429a      	cmp	r2, r3
 800967e:	d90d      	bls.n	800969c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009680:	2301      	movs	r3, #1
 8009682:	627b      	str	r3, [r7, #36]	; 0x24
 8009684:	e00a      	b.n	800969c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	69fa      	ldr	r2, [r7, #28]
 800968c:	429a      	cmp	r2, r3
 800968e:	d303      	bcc.n	8009698 <vTaskDelayUntil+0xac>
 8009690:	69fa      	ldr	r2, [r7, #28]
 8009692:	6a3b      	ldr	r3, [r7, #32]
 8009694:	429a      	cmp	r2, r3
 8009696:	d901      	bls.n	800969c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009698:	2301      	movs	r3, #1
 800969a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	69fa      	ldr	r2, [r7, #28]
 80096a0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80096a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d006      	beq.n	80096b6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80096a8:	69fa      	ldr	r2, [r7, #28]
 80096aa:	6a3b      	ldr	r3, [r7, #32]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	2100      	movs	r1, #0
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 fb65 	bl	8009d80 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80096b6:	f000 f8c3 	bl	8009840 <xTaskResumeAll>
 80096ba:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d107      	bne.n	80096d2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80096c2:	4b08      	ldr	r3, [pc, #32]	; (80096e4 <vTaskDelayUntil+0xf8>)
 80096c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096d2:	bf00      	nop
 80096d4:	3728      	adds	r7, #40	; 0x28
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20000cd0 	.word	0x20000cd0
 80096e0:	20000cac 	.word	0x20000cac
 80096e4:	e000ed04 	.word	0xe000ed04

080096e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80096f0:	2300      	movs	r3, #0
 80096f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d017      	beq.n	800972a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80096fa:	4b13      	ldr	r3, [pc, #76]	; (8009748 <vTaskDelay+0x60>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00a      	beq.n	8009718 <vTaskDelay+0x30>
	__asm volatile
 8009702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	60bb      	str	r3, [r7, #8]
}
 8009714:	bf00      	nop
 8009716:	e7fe      	b.n	8009716 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009718:	f000 f884 	bl	8009824 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800971c:	2100      	movs	r1, #0
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fb2e 	bl	8009d80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009724:	f000 f88c 	bl	8009840 <xTaskResumeAll>
 8009728:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d107      	bne.n	8009740 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009730:	4b06      	ldr	r3, [pc, #24]	; (800974c <vTaskDelay+0x64>)
 8009732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009736:	601a      	str	r2, [r3, #0]
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009740:	bf00      	nop
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	20000cd0 	.word	0x20000cd0
 800974c:	e000ed04 	.word	0xe000ed04

08009750 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b08a      	sub	sp, #40	; 0x28
 8009754:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009756:	2300      	movs	r3, #0
 8009758:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800975a:	2300      	movs	r3, #0
 800975c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800975e:	463a      	mov	r2, r7
 8009760:	1d39      	adds	r1, r7, #4
 8009762:	f107 0308 	add.w	r3, r7, #8
 8009766:	4618      	mov	r0, r3
 8009768:	f7f8 f834 	bl	80017d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	9202      	str	r2, [sp, #8]
 8009774:	9301      	str	r3, [sp, #4]
 8009776:	2300      	movs	r3, #0
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	2300      	movs	r3, #0
 800977c:	460a      	mov	r2, r1
 800977e:	4921      	ldr	r1, [pc, #132]	; (8009804 <vTaskStartScheduler+0xb4>)
 8009780:	4821      	ldr	r0, [pc, #132]	; (8009808 <vTaskStartScheduler+0xb8>)
 8009782:	f7ff fcf8 	bl	8009176 <xTaskCreateStatic>
 8009786:	4603      	mov	r3, r0
 8009788:	4a20      	ldr	r2, [pc, #128]	; (800980c <vTaskStartScheduler+0xbc>)
 800978a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800978c:	4b1f      	ldr	r3, [pc, #124]	; (800980c <vTaskStartScheduler+0xbc>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009794:	2301      	movs	r3, #1
 8009796:	617b      	str	r3, [r7, #20]
 8009798:	e001      	b.n	800979e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800979a:	2300      	movs	r3, #0
 800979c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d11b      	bne.n	80097dc <vTaskStartScheduler+0x8c>
	__asm volatile
 80097a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a8:	f383 8811 	msr	BASEPRI, r3
 80097ac:	f3bf 8f6f 	isb	sy
 80097b0:	f3bf 8f4f 	dsb	sy
 80097b4:	613b      	str	r3, [r7, #16]
}
 80097b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80097b8:	4b15      	ldr	r3, [pc, #84]	; (8009810 <vTaskStartScheduler+0xc0>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	334c      	adds	r3, #76	; 0x4c
 80097be:	4a15      	ldr	r2, [pc, #84]	; (8009814 <vTaskStartScheduler+0xc4>)
 80097c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80097c2:	4b15      	ldr	r3, [pc, #84]	; (8009818 <vTaskStartScheduler+0xc8>)
 80097c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80097ca:	4b14      	ldr	r3, [pc, #80]	; (800981c <vTaskStartScheduler+0xcc>)
 80097cc:	2201      	movs	r2, #1
 80097ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80097d0:	4b13      	ldr	r3, [pc, #76]	; (8009820 <vTaskStartScheduler+0xd0>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80097d6:	f000 fbc3 	bl	8009f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80097da:	e00e      	b.n	80097fa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097e2:	d10a      	bne.n	80097fa <vTaskStartScheduler+0xaa>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	60fb      	str	r3, [r7, #12]
}
 80097f6:	bf00      	nop
 80097f8:	e7fe      	b.n	80097f8 <vTaskStartScheduler+0xa8>
}
 80097fa:	bf00      	nop
 80097fc:	3718      	adds	r7, #24
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	0800f258 	.word	0x0800f258
 8009808:	08009bcd 	.word	0x08009bcd
 800980c:	20000ccc 	.word	0x20000ccc
 8009810:	20000ba8 	.word	0x20000ba8
 8009814:	20000010 	.word	0x20000010
 8009818:	20000cc8 	.word	0x20000cc8
 800981c:	20000cb4 	.word	0x20000cb4
 8009820:	20000cac 	.word	0x20000cac

08009824 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009824:	b480      	push	{r7}
 8009826:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009828:	4b04      	ldr	r3, [pc, #16]	; (800983c <vTaskSuspendAll+0x18>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	3301      	adds	r3, #1
 800982e:	4a03      	ldr	r2, [pc, #12]	; (800983c <vTaskSuspendAll+0x18>)
 8009830:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009832:	bf00      	nop
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr
 800983c:	20000cd0 	.word	0x20000cd0

08009840 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009846:	2300      	movs	r3, #0
 8009848:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800984a:	2300      	movs	r3, #0
 800984c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800984e:	4b41      	ldr	r3, [pc, #260]	; (8009954 <xTaskResumeAll+0x114>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d10a      	bne.n	800986c <xTaskResumeAll+0x2c>
	__asm volatile
 8009856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	603b      	str	r3, [r7, #0]
}
 8009868:	bf00      	nop
 800986a:	e7fe      	b.n	800986a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800986c:	f000 fc1a 	bl	800a0a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009870:	4b38      	ldr	r3, [pc, #224]	; (8009954 <xTaskResumeAll+0x114>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	3b01      	subs	r3, #1
 8009876:	4a37      	ldr	r2, [pc, #220]	; (8009954 <xTaskResumeAll+0x114>)
 8009878:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800987a:	4b36      	ldr	r3, [pc, #216]	; (8009954 <xTaskResumeAll+0x114>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d161      	bne.n	8009946 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009882:	4b35      	ldr	r3, [pc, #212]	; (8009958 <xTaskResumeAll+0x118>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d05d      	beq.n	8009946 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800988a:	e02e      	b.n	80098ea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800988c:	4b33      	ldr	r3, [pc, #204]	; (800995c <xTaskResumeAll+0x11c>)
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	3318      	adds	r3, #24
 8009898:	4618      	mov	r0, r3
 800989a:	f7ff fc42 	bl	8009122 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	3304      	adds	r3, #4
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7ff fc3d 	bl	8009122 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ac:	2201      	movs	r2, #1
 80098ae:	409a      	lsls	r2, r3
 80098b0:	4b2b      	ldr	r3, [pc, #172]	; (8009960 <xTaskResumeAll+0x120>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4313      	orrs	r3, r2
 80098b6:	4a2a      	ldr	r2, [pc, #168]	; (8009960 <xTaskResumeAll+0x120>)
 80098b8:	6013      	str	r3, [r2, #0]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098be:	4613      	mov	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4413      	add	r3, r2
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	4a27      	ldr	r2, [pc, #156]	; (8009964 <xTaskResumeAll+0x124>)
 80098c8:	441a      	add	r2, r3
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3304      	adds	r3, #4
 80098ce:	4619      	mov	r1, r3
 80098d0:	4610      	mov	r0, r2
 80098d2:	f7ff fbc9 	bl	8009068 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098da:	4b23      	ldr	r3, [pc, #140]	; (8009968 <xTaskResumeAll+0x128>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d302      	bcc.n	80098ea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80098e4:	4b21      	ldr	r3, [pc, #132]	; (800996c <xTaskResumeAll+0x12c>)
 80098e6:	2201      	movs	r2, #1
 80098e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098ea:	4b1c      	ldr	r3, [pc, #112]	; (800995c <xTaskResumeAll+0x11c>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1cc      	bne.n	800988c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80098f8:	f000 fa22 	bl	8009d40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80098fc:	4b1c      	ldr	r3, [pc, #112]	; (8009970 <xTaskResumeAll+0x130>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d010      	beq.n	800992a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009908:	f000 f846 	bl	8009998 <xTaskIncrementTick>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d002      	beq.n	8009918 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009912:	4b16      	ldr	r3, [pc, #88]	; (800996c <xTaskResumeAll+0x12c>)
 8009914:	2201      	movs	r2, #1
 8009916:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	3b01      	subs	r3, #1
 800991c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1f1      	bne.n	8009908 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009924:	4b12      	ldr	r3, [pc, #72]	; (8009970 <xTaskResumeAll+0x130>)
 8009926:	2200      	movs	r2, #0
 8009928:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800992a:	4b10      	ldr	r3, [pc, #64]	; (800996c <xTaskResumeAll+0x12c>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d009      	beq.n	8009946 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009932:	2301      	movs	r3, #1
 8009934:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009936:	4b0f      	ldr	r3, [pc, #60]	; (8009974 <xTaskResumeAll+0x134>)
 8009938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800993c:	601a      	str	r2, [r3, #0]
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009946:	f000 fbdd 	bl	800a104 <vPortExitCritical>

	return xAlreadyYielded;
 800994a:	68bb      	ldr	r3, [r7, #8]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	20000cd0 	.word	0x20000cd0
 8009958:	20000ca8 	.word	0x20000ca8
 800995c:	20000c68 	.word	0x20000c68
 8009960:	20000cb0 	.word	0x20000cb0
 8009964:	20000bac 	.word	0x20000bac
 8009968:	20000ba8 	.word	0x20000ba8
 800996c:	20000cbc 	.word	0x20000cbc
 8009970:	20000cb8 	.word	0x20000cb8
 8009974:	e000ed04 	.word	0xe000ed04

08009978 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800997e:	4b05      	ldr	r3, [pc, #20]	; (8009994 <xTaskGetTickCount+0x1c>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009984:	687b      	ldr	r3, [r7, #4]
}
 8009986:	4618      	mov	r0, r3
 8009988:	370c      	adds	r7, #12
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	20000cac 	.word	0x20000cac

08009998 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b086      	sub	sp, #24
 800999c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800999e:	2300      	movs	r3, #0
 80099a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099a2:	4b4e      	ldr	r3, [pc, #312]	; (8009adc <xTaskIncrementTick+0x144>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f040 808e 	bne.w	8009ac8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80099ac:	4b4c      	ldr	r3, [pc, #304]	; (8009ae0 <xTaskIncrementTick+0x148>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3301      	adds	r3, #1
 80099b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80099b4:	4a4a      	ldr	r2, [pc, #296]	; (8009ae0 <xTaskIncrementTick+0x148>)
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d120      	bne.n	8009a02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80099c0:	4b48      	ldr	r3, [pc, #288]	; (8009ae4 <xTaskIncrementTick+0x14c>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00a      	beq.n	80099e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80099ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ce:	f383 8811 	msr	BASEPRI, r3
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	603b      	str	r3, [r7, #0]
}
 80099dc:	bf00      	nop
 80099de:	e7fe      	b.n	80099de <xTaskIncrementTick+0x46>
 80099e0:	4b40      	ldr	r3, [pc, #256]	; (8009ae4 <xTaskIncrementTick+0x14c>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	60fb      	str	r3, [r7, #12]
 80099e6:	4b40      	ldr	r3, [pc, #256]	; (8009ae8 <xTaskIncrementTick+0x150>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a3e      	ldr	r2, [pc, #248]	; (8009ae4 <xTaskIncrementTick+0x14c>)
 80099ec:	6013      	str	r3, [r2, #0]
 80099ee:	4a3e      	ldr	r2, [pc, #248]	; (8009ae8 <xTaskIncrementTick+0x150>)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6013      	str	r3, [r2, #0]
 80099f4:	4b3d      	ldr	r3, [pc, #244]	; (8009aec <xTaskIncrementTick+0x154>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3301      	adds	r3, #1
 80099fa:	4a3c      	ldr	r2, [pc, #240]	; (8009aec <xTaskIncrementTick+0x154>)
 80099fc:	6013      	str	r3, [r2, #0]
 80099fe:	f000 f99f 	bl	8009d40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a02:	4b3b      	ldr	r3, [pc, #236]	; (8009af0 <xTaskIncrementTick+0x158>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	693a      	ldr	r2, [r7, #16]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d348      	bcc.n	8009a9e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a0c:	4b35      	ldr	r3, [pc, #212]	; (8009ae4 <xTaskIncrementTick+0x14c>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d104      	bne.n	8009a20 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a16:	4b36      	ldr	r3, [pc, #216]	; (8009af0 <xTaskIncrementTick+0x158>)
 8009a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a1c:	601a      	str	r2, [r3, #0]
					break;
 8009a1e:	e03e      	b.n	8009a9e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a20:	4b30      	ldr	r3, [pc, #192]	; (8009ae4 <xTaskIncrementTick+0x14c>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d203      	bcs.n	8009a40 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a38:	4a2d      	ldr	r2, [pc, #180]	; (8009af0 <xTaskIncrementTick+0x158>)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009a3e:	e02e      	b.n	8009a9e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	3304      	adds	r3, #4
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7ff fb6c 	bl	8009122 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d004      	beq.n	8009a5c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	3318      	adds	r3, #24
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7ff fb63 	bl	8009122 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a60:	2201      	movs	r2, #1
 8009a62:	409a      	lsls	r2, r3
 8009a64:	4b23      	ldr	r3, [pc, #140]	; (8009af4 <xTaskIncrementTick+0x15c>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	4a22      	ldr	r2, [pc, #136]	; (8009af4 <xTaskIncrementTick+0x15c>)
 8009a6c:	6013      	str	r3, [r2, #0]
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a72:	4613      	mov	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4413      	add	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4a1f      	ldr	r2, [pc, #124]	; (8009af8 <xTaskIncrementTick+0x160>)
 8009a7c:	441a      	add	r2, r3
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	3304      	adds	r3, #4
 8009a82:	4619      	mov	r1, r3
 8009a84:	4610      	mov	r0, r2
 8009a86:	f7ff faef 	bl	8009068 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a8e:	4b1b      	ldr	r3, [pc, #108]	; (8009afc <xTaskIncrementTick+0x164>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d3b9      	bcc.n	8009a0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a9c:	e7b6      	b.n	8009a0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a9e:	4b17      	ldr	r3, [pc, #92]	; (8009afc <xTaskIncrementTick+0x164>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa4:	4914      	ldr	r1, [pc, #80]	; (8009af8 <xTaskIncrementTick+0x160>)
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	440b      	add	r3, r1
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d901      	bls.n	8009aba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009aba:	4b11      	ldr	r3, [pc, #68]	; (8009b00 <xTaskIncrementTick+0x168>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d007      	beq.n	8009ad2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	617b      	str	r3, [r7, #20]
 8009ac6:	e004      	b.n	8009ad2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ac8:	4b0e      	ldr	r3, [pc, #56]	; (8009b04 <xTaskIncrementTick+0x16c>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	3301      	adds	r3, #1
 8009ace:	4a0d      	ldr	r2, [pc, #52]	; (8009b04 <xTaskIncrementTick+0x16c>)
 8009ad0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009ad2:	697b      	ldr	r3, [r7, #20]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3718      	adds	r7, #24
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	20000cd0 	.word	0x20000cd0
 8009ae0:	20000cac 	.word	0x20000cac
 8009ae4:	20000c60 	.word	0x20000c60
 8009ae8:	20000c64 	.word	0x20000c64
 8009aec:	20000cc0 	.word	0x20000cc0
 8009af0:	20000cc8 	.word	0x20000cc8
 8009af4:	20000cb0 	.word	0x20000cb0
 8009af8:	20000bac 	.word	0x20000bac
 8009afc:	20000ba8 	.word	0x20000ba8
 8009b00:	20000cbc 	.word	0x20000cbc
 8009b04:	20000cb8 	.word	0x20000cb8

08009b08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b087      	sub	sp, #28
 8009b0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009b0e:	4b29      	ldr	r3, [pc, #164]	; (8009bb4 <vTaskSwitchContext+0xac>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d003      	beq.n	8009b1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009b16:	4b28      	ldr	r3, [pc, #160]	; (8009bb8 <vTaskSwitchContext+0xb0>)
 8009b18:	2201      	movs	r2, #1
 8009b1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009b1c:	e044      	b.n	8009ba8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009b1e:	4b26      	ldr	r3, [pc, #152]	; (8009bb8 <vTaskSwitchContext+0xb0>)
 8009b20:	2200      	movs	r2, #0
 8009b22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b24:	4b25      	ldr	r3, [pc, #148]	; (8009bbc <vTaskSwitchContext+0xb4>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	fab3 f383 	clz	r3, r3
 8009b30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009b32:	7afb      	ldrb	r3, [r7, #11]
 8009b34:	f1c3 031f 	rsb	r3, r3, #31
 8009b38:	617b      	str	r3, [r7, #20]
 8009b3a:	4921      	ldr	r1, [pc, #132]	; (8009bc0 <vTaskSwitchContext+0xb8>)
 8009b3c:	697a      	ldr	r2, [r7, #20]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	4413      	add	r3, r2
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	440b      	add	r3, r1
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10a      	bne.n	8009b64 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	607b      	str	r3, [r7, #4]
}
 8009b60:	bf00      	nop
 8009b62:	e7fe      	b.n	8009b62 <vTaskSwitchContext+0x5a>
 8009b64:	697a      	ldr	r2, [r7, #20]
 8009b66:	4613      	mov	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	4a14      	ldr	r2, [pc, #80]	; (8009bc0 <vTaskSwitchContext+0xb8>)
 8009b70:	4413      	add	r3, r2
 8009b72:	613b      	str	r3, [r7, #16]
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	685a      	ldr	r2, [r3, #4]
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	605a      	str	r2, [r3, #4]
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	3308      	adds	r3, #8
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d104      	bne.n	8009b94 <vTaskSwitchContext+0x8c>
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	605a      	str	r2, [r3, #4]
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	4a0a      	ldr	r2, [pc, #40]	; (8009bc4 <vTaskSwitchContext+0xbc>)
 8009b9c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b9e:	4b09      	ldr	r3, [pc, #36]	; (8009bc4 <vTaskSwitchContext+0xbc>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	334c      	adds	r3, #76	; 0x4c
 8009ba4:	4a08      	ldr	r2, [pc, #32]	; (8009bc8 <vTaskSwitchContext+0xc0>)
 8009ba6:	6013      	str	r3, [r2, #0]
}
 8009ba8:	bf00      	nop
 8009baa:	371c      	adds	r7, #28
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr
 8009bb4:	20000cd0 	.word	0x20000cd0
 8009bb8:	20000cbc 	.word	0x20000cbc
 8009bbc:	20000cb0 	.word	0x20000cb0
 8009bc0:	20000bac 	.word	0x20000bac
 8009bc4:	20000ba8 	.word	0x20000ba8
 8009bc8:	20000010 	.word	0x20000010

08009bcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009bd4:	f000 f852 	bl	8009c7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009bd8:	4b06      	ldr	r3, [pc, #24]	; (8009bf4 <prvIdleTask+0x28>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d9f9      	bls.n	8009bd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009be0:	4b05      	ldr	r3, [pc, #20]	; (8009bf8 <prvIdleTask+0x2c>)
 8009be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009be6:	601a      	str	r2, [r3, #0]
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009bf0:	e7f0      	b.n	8009bd4 <prvIdleTask+0x8>
 8009bf2:	bf00      	nop
 8009bf4:	20000bac 	.word	0x20000bac
 8009bf8:	e000ed04 	.word	0xe000ed04

08009bfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c02:	2300      	movs	r3, #0
 8009c04:	607b      	str	r3, [r7, #4]
 8009c06:	e00c      	b.n	8009c22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4a12      	ldr	r2, [pc, #72]	; (8009c5c <prvInitialiseTaskLists+0x60>)
 8009c14:	4413      	add	r3, r2
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7ff f9f9 	bl	800900e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	607b      	str	r3, [r7, #4]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2b06      	cmp	r3, #6
 8009c26:	d9ef      	bls.n	8009c08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c28:	480d      	ldr	r0, [pc, #52]	; (8009c60 <prvInitialiseTaskLists+0x64>)
 8009c2a:	f7ff f9f0 	bl	800900e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c2e:	480d      	ldr	r0, [pc, #52]	; (8009c64 <prvInitialiseTaskLists+0x68>)
 8009c30:	f7ff f9ed 	bl	800900e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c34:	480c      	ldr	r0, [pc, #48]	; (8009c68 <prvInitialiseTaskLists+0x6c>)
 8009c36:	f7ff f9ea 	bl	800900e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c3a:	480c      	ldr	r0, [pc, #48]	; (8009c6c <prvInitialiseTaskLists+0x70>)
 8009c3c:	f7ff f9e7 	bl	800900e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c40:	480b      	ldr	r0, [pc, #44]	; (8009c70 <prvInitialiseTaskLists+0x74>)
 8009c42:	f7ff f9e4 	bl	800900e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c46:	4b0b      	ldr	r3, [pc, #44]	; (8009c74 <prvInitialiseTaskLists+0x78>)
 8009c48:	4a05      	ldr	r2, [pc, #20]	; (8009c60 <prvInitialiseTaskLists+0x64>)
 8009c4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c4c:	4b0a      	ldr	r3, [pc, #40]	; (8009c78 <prvInitialiseTaskLists+0x7c>)
 8009c4e:	4a05      	ldr	r2, [pc, #20]	; (8009c64 <prvInitialiseTaskLists+0x68>)
 8009c50:	601a      	str	r2, [r3, #0]
}
 8009c52:	bf00      	nop
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	20000bac 	.word	0x20000bac
 8009c60:	20000c38 	.word	0x20000c38
 8009c64:	20000c4c 	.word	0x20000c4c
 8009c68:	20000c68 	.word	0x20000c68
 8009c6c:	20000c7c 	.word	0x20000c7c
 8009c70:	20000c94 	.word	0x20000c94
 8009c74:	20000c60 	.word	0x20000c60
 8009c78:	20000c64 	.word	0x20000c64

08009c7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c82:	e019      	b.n	8009cb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c84:	f000 fa0e 	bl	800a0a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c88:	4b10      	ldr	r3, [pc, #64]	; (8009ccc <prvCheckTasksWaitingTermination+0x50>)
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	3304      	adds	r3, #4
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7ff fa44 	bl	8009122 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c9a:	4b0d      	ldr	r3, [pc, #52]	; (8009cd0 <prvCheckTasksWaitingTermination+0x54>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	4a0b      	ldr	r2, [pc, #44]	; (8009cd0 <prvCheckTasksWaitingTermination+0x54>)
 8009ca2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ca4:	4b0b      	ldr	r3, [pc, #44]	; (8009cd4 <prvCheckTasksWaitingTermination+0x58>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	4a0a      	ldr	r2, [pc, #40]	; (8009cd4 <prvCheckTasksWaitingTermination+0x58>)
 8009cac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009cae:	f000 fa29 	bl	800a104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f810 	bl	8009cd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cb8:	4b06      	ldr	r3, [pc, #24]	; (8009cd4 <prvCheckTasksWaitingTermination+0x58>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1e1      	bne.n	8009c84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009cc0:	bf00      	nop
 8009cc2:	bf00      	nop
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	20000c7c 	.word	0x20000c7c
 8009cd0:	20000ca8 	.word	0x20000ca8
 8009cd4:	20000c90 	.word	0x20000c90

08009cd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	334c      	adds	r3, #76	; 0x4c
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f001 fb81 	bl	800b3ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d108      	bne.n	8009d06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f000 fb81 	bl	800a400 <vPortFree>
				vPortFree( pxTCB );
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 fb7e 	bl	800a400 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d04:	e018      	b.n	8009d38 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d103      	bne.n	8009d18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fb75 	bl	800a400 <vPortFree>
	}
 8009d16:	e00f      	b.n	8009d38 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d00a      	beq.n	8009d38 <prvDeleteTCB+0x60>
	__asm volatile
 8009d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d26:	f383 8811 	msr	BASEPRI, r3
 8009d2a:	f3bf 8f6f 	isb	sy
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	60fb      	str	r3, [r7, #12]
}
 8009d34:	bf00      	nop
 8009d36:	e7fe      	b.n	8009d36 <prvDeleteTCB+0x5e>
	}
 8009d38:	bf00      	nop
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d46:	4b0c      	ldr	r3, [pc, #48]	; (8009d78 <prvResetNextTaskUnblockTime+0x38>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d104      	bne.n	8009d5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d50:	4b0a      	ldr	r3, [pc, #40]	; (8009d7c <prvResetNextTaskUnblockTime+0x3c>)
 8009d52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d58:	e008      	b.n	8009d6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d5a:	4b07      	ldr	r3, [pc, #28]	; (8009d78 <prvResetNextTaskUnblockTime+0x38>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	4a04      	ldr	r2, [pc, #16]	; (8009d7c <prvResetNextTaskUnblockTime+0x3c>)
 8009d6a:	6013      	str	r3, [r2, #0]
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr
 8009d78:	20000c60 	.word	0x20000c60
 8009d7c:	20000cc8 	.word	0x20000cc8

08009d80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d8a:	4b29      	ldr	r3, [pc, #164]	; (8009e30 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d90:	4b28      	ldr	r3, [pc, #160]	; (8009e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	3304      	adds	r3, #4
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7ff f9c3 	bl	8009122 <uxListRemove>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10b      	bne.n	8009dba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009da2:	4b24      	ldr	r3, [pc, #144]	; (8009e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da8:	2201      	movs	r2, #1
 8009daa:	fa02 f303 	lsl.w	r3, r2, r3
 8009dae:	43da      	mvns	r2, r3
 8009db0:	4b21      	ldr	r3, [pc, #132]	; (8009e38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4013      	ands	r3, r2
 8009db6:	4a20      	ldr	r2, [pc, #128]	; (8009e38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009db8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dc0:	d10a      	bne.n	8009dd8 <prvAddCurrentTaskToDelayedList+0x58>
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d007      	beq.n	8009dd8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dc8:	4b1a      	ldr	r3, [pc, #104]	; (8009e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	3304      	adds	r3, #4
 8009dce:	4619      	mov	r1, r3
 8009dd0:	481a      	ldr	r0, [pc, #104]	; (8009e3c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009dd2:	f7ff f949 	bl	8009068 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009dd6:	e026      	b.n	8009e26 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4413      	add	r3, r2
 8009dde:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009de0:	4b14      	ldr	r3, [pc, #80]	; (8009e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d209      	bcs.n	8009e04 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009df0:	4b13      	ldr	r3, [pc, #76]	; (8009e40 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	4b0f      	ldr	r3, [pc, #60]	; (8009e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	3304      	adds	r3, #4
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	4610      	mov	r0, r2
 8009dfe:	f7ff f957 	bl	80090b0 <vListInsert>
}
 8009e02:	e010      	b.n	8009e26 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e04:	4b0f      	ldr	r3, [pc, #60]	; (8009e44 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	4b0a      	ldr	r3, [pc, #40]	; (8009e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	4619      	mov	r1, r3
 8009e10:	4610      	mov	r0, r2
 8009e12:	f7ff f94d 	bl	80090b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e16:	4b0c      	ldr	r3, [pc, #48]	; (8009e48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d202      	bcs.n	8009e26 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009e20:	4a09      	ldr	r2, [pc, #36]	; (8009e48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	6013      	str	r3, [r2, #0]
}
 8009e26:	bf00      	nop
 8009e28:	3710      	adds	r7, #16
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	20000cac 	.word	0x20000cac
 8009e34:	20000ba8 	.word	0x20000ba8
 8009e38:	20000cb0 	.word	0x20000cb0
 8009e3c:	20000c94 	.word	0x20000c94
 8009e40:	20000c64 	.word	0x20000c64
 8009e44:	20000c60 	.word	0x20000c60
 8009e48:	20000cc8 	.word	0x20000cc8

08009e4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	3b04      	subs	r3, #4
 8009e5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	3b04      	subs	r3, #4
 8009e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	f023 0201 	bic.w	r2, r3, #1
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3b04      	subs	r3, #4
 8009e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e7c:	4a0c      	ldr	r2, [pc, #48]	; (8009eb0 <pxPortInitialiseStack+0x64>)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	3b14      	subs	r3, #20
 8009e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	3b04      	subs	r3, #4
 8009e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f06f 0202 	mvn.w	r2, #2
 8009e9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	3b20      	subs	r3, #32
 8009ea0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3714      	adds	r7, #20
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr
 8009eb0:	08009eb5 	.word	0x08009eb5

08009eb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ebe:	4b12      	ldr	r3, [pc, #72]	; (8009f08 <prvTaskExitError+0x54>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ec6:	d00a      	beq.n	8009ede <prvTaskExitError+0x2a>
	__asm volatile
 8009ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ecc:	f383 8811 	msr	BASEPRI, r3
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	f3bf 8f4f 	dsb	sy
 8009ed8:	60fb      	str	r3, [r7, #12]
}
 8009eda:	bf00      	nop
 8009edc:	e7fe      	b.n	8009edc <prvTaskExitError+0x28>
	__asm volatile
 8009ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	60bb      	str	r3, [r7, #8]
}
 8009ef0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ef2:	bf00      	nop
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d0fc      	beq.n	8009ef4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009efa:	bf00      	nop
 8009efc:	bf00      	nop
 8009efe:	3714      	adds	r7, #20
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr
 8009f08:	2000000c 	.word	0x2000000c
 8009f0c:	00000000 	.word	0x00000000

08009f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f10:	4b07      	ldr	r3, [pc, #28]	; (8009f30 <pxCurrentTCBConst2>)
 8009f12:	6819      	ldr	r1, [r3, #0]
 8009f14:	6808      	ldr	r0, [r1, #0]
 8009f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1a:	f380 8809 	msr	PSP, r0
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f04f 0000 	mov.w	r0, #0
 8009f26:	f380 8811 	msr	BASEPRI, r0
 8009f2a:	4770      	bx	lr
 8009f2c:	f3af 8000 	nop.w

08009f30 <pxCurrentTCBConst2>:
 8009f30:	20000ba8 	.word	0x20000ba8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f34:	bf00      	nop
 8009f36:	bf00      	nop

08009f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f38:	4808      	ldr	r0, [pc, #32]	; (8009f5c <prvPortStartFirstTask+0x24>)
 8009f3a:	6800      	ldr	r0, [r0, #0]
 8009f3c:	6800      	ldr	r0, [r0, #0]
 8009f3e:	f380 8808 	msr	MSP, r0
 8009f42:	f04f 0000 	mov.w	r0, #0
 8009f46:	f380 8814 	msr	CONTROL, r0
 8009f4a:	b662      	cpsie	i
 8009f4c:	b661      	cpsie	f
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	df00      	svc	0
 8009f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f5a:	bf00      	nop
 8009f5c:	e000ed08 	.word	0xe000ed08

08009f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009f66:	4b46      	ldr	r3, [pc, #280]	; (800a080 <xPortStartScheduler+0x120>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a46      	ldr	r2, [pc, #280]	; (800a084 <xPortStartScheduler+0x124>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d10a      	bne.n	8009f86 <xPortStartScheduler+0x26>
	__asm volatile
 8009f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f74:	f383 8811 	msr	BASEPRI, r3
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	613b      	str	r3, [r7, #16]
}
 8009f82:	bf00      	nop
 8009f84:	e7fe      	b.n	8009f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f86:	4b3e      	ldr	r3, [pc, #248]	; (800a080 <xPortStartScheduler+0x120>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a3f      	ldr	r2, [pc, #252]	; (800a088 <xPortStartScheduler+0x128>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d10a      	bne.n	8009fa6 <xPortStartScheduler+0x46>
	__asm volatile
 8009f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f94:	f383 8811 	msr	BASEPRI, r3
 8009f98:	f3bf 8f6f 	isb	sy
 8009f9c:	f3bf 8f4f 	dsb	sy
 8009fa0:	60fb      	str	r3, [r7, #12]
}
 8009fa2:	bf00      	nop
 8009fa4:	e7fe      	b.n	8009fa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009fa6:	4b39      	ldr	r3, [pc, #228]	; (800a08c <xPortStartScheduler+0x12c>)
 8009fa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	22ff      	movs	r2, #255	; 0xff
 8009fb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009fc0:	78fb      	ldrb	r3, [r7, #3]
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009fc8:	b2da      	uxtb	r2, r3
 8009fca:	4b31      	ldr	r3, [pc, #196]	; (800a090 <xPortStartScheduler+0x130>)
 8009fcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009fce:	4b31      	ldr	r3, [pc, #196]	; (800a094 <xPortStartScheduler+0x134>)
 8009fd0:	2207      	movs	r2, #7
 8009fd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fd4:	e009      	b.n	8009fea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009fd6:	4b2f      	ldr	r3, [pc, #188]	; (800a094 <xPortStartScheduler+0x134>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	4a2d      	ldr	r2, [pc, #180]	; (800a094 <xPortStartScheduler+0x134>)
 8009fde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009fe0:	78fb      	ldrb	r3, [r7, #3]
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	005b      	lsls	r3, r3, #1
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fea:	78fb      	ldrb	r3, [r7, #3]
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ff2:	2b80      	cmp	r3, #128	; 0x80
 8009ff4:	d0ef      	beq.n	8009fd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ff6:	4b27      	ldr	r3, [pc, #156]	; (800a094 <xPortStartScheduler+0x134>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f1c3 0307 	rsb	r3, r3, #7
 8009ffe:	2b04      	cmp	r3, #4
 800a000:	d00a      	beq.n	800a018 <xPortStartScheduler+0xb8>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	60bb      	str	r3, [r7, #8]
}
 800a014:	bf00      	nop
 800a016:	e7fe      	b.n	800a016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a018:	4b1e      	ldr	r3, [pc, #120]	; (800a094 <xPortStartScheduler+0x134>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	021b      	lsls	r3, r3, #8
 800a01e:	4a1d      	ldr	r2, [pc, #116]	; (800a094 <xPortStartScheduler+0x134>)
 800a020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a022:	4b1c      	ldr	r3, [pc, #112]	; (800a094 <xPortStartScheduler+0x134>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a02a:	4a1a      	ldr	r2, [pc, #104]	; (800a094 <xPortStartScheduler+0x134>)
 800a02c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	b2da      	uxtb	r2, r3
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a036:	4b18      	ldr	r3, [pc, #96]	; (800a098 <xPortStartScheduler+0x138>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a17      	ldr	r2, [pc, #92]	; (800a098 <xPortStartScheduler+0x138>)
 800a03c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a042:	4b15      	ldr	r3, [pc, #84]	; (800a098 <xPortStartScheduler+0x138>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a14      	ldr	r2, [pc, #80]	; (800a098 <xPortStartScheduler+0x138>)
 800a048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a04c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a04e:	f000 f8dd 	bl	800a20c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a052:	4b12      	ldr	r3, [pc, #72]	; (800a09c <xPortStartScheduler+0x13c>)
 800a054:	2200      	movs	r2, #0
 800a056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a058:	f000 f8fc 	bl	800a254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a05c:	4b10      	ldr	r3, [pc, #64]	; (800a0a0 <xPortStartScheduler+0x140>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a0f      	ldr	r2, [pc, #60]	; (800a0a0 <xPortStartScheduler+0x140>)
 800a062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a068:	f7ff ff66 	bl	8009f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a06c:	f7ff fd4c 	bl	8009b08 <vTaskSwitchContext>
	prvTaskExitError();
 800a070:	f7ff ff20 	bl	8009eb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3718      	adds	r7, #24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	e000ed00 	.word	0xe000ed00
 800a084:	410fc271 	.word	0x410fc271
 800a088:	410fc270 	.word	0x410fc270
 800a08c:	e000e400 	.word	0xe000e400
 800a090:	20000cd4 	.word	0x20000cd4
 800a094:	20000cd8 	.word	0x20000cd8
 800a098:	e000ed20 	.word	0xe000ed20
 800a09c:	2000000c 	.word	0x2000000c
 800a0a0:	e000ef34 	.word	0xe000ef34

0800a0a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
	__asm volatile
 800a0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ae:	f383 8811 	msr	BASEPRI, r3
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	607b      	str	r3, [r7, #4]
}
 800a0bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a0be:	4b0f      	ldr	r3, [pc, #60]	; (800a0fc <vPortEnterCritical+0x58>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	4a0d      	ldr	r2, [pc, #52]	; (800a0fc <vPortEnterCritical+0x58>)
 800a0c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a0c8:	4b0c      	ldr	r3, [pc, #48]	; (800a0fc <vPortEnterCritical+0x58>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d10f      	bne.n	800a0f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a0d0:	4b0b      	ldr	r3, [pc, #44]	; (800a100 <vPortEnterCritical+0x5c>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00a      	beq.n	800a0f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	603b      	str	r3, [r7, #0]
}
 800a0ec:	bf00      	nop
 800a0ee:	e7fe      	b.n	800a0ee <vPortEnterCritical+0x4a>
	}
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	2000000c 	.word	0x2000000c
 800a100:	e000ed04 	.word	0xe000ed04

0800a104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a10a:	4b12      	ldr	r3, [pc, #72]	; (800a154 <vPortExitCritical+0x50>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10a      	bne.n	800a128 <vPortExitCritical+0x24>
	__asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	607b      	str	r3, [r7, #4]
}
 800a124:	bf00      	nop
 800a126:	e7fe      	b.n	800a126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a128:	4b0a      	ldr	r3, [pc, #40]	; (800a154 <vPortExitCritical+0x50>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3b01      	subs	r3, #1
 800a12e:	4a09      	ldr	r2, [pc, #36]	; (800a154 <vPortExitCritical+0x50>)
 800a130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a132:	4b08      	ldr	r3, [pc, #32]	; (800a154 <vPortExitCritical+0x50>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d105      	bne.n	800a146 <vPortExitCritical+0x42>
 800a13a:	2300      	movs	r3, #0
 800a13c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a146:	bf00      	nop
 800a148:	370c      	adds	r7, #12
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	2000000c 	.word	0x2000000c
	...

0800a160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a160:	f3ef 8009 	mrs	r0, PSP
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	4b15      	ldr	r3, [pc, #84]	; (800a1c0 <pxCurrentTCBConst>)
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	f01e 0f10 	tst.w	lr, #16
 800a170:	bf08      	it	eq
 800a172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a17a:	6010      	str	r0, [r2, #0]
 800a17c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a180:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a184:	f380 8811 	msr	BASEPRI, r0
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	f3bf 8f6f 	isb	sy
 800a190:	f7ff fcba 	bl	8009b08 <vTaskSwitchContext>
 800a194:	f04f 0000 	mov.w	r0, #0
 800a198:	f380 8811 	msr	BASEPRI, r0
 800a19c:	bc09      	pop	{r0, r3}
 800a19e:	6819      	ldr	r1, [r3, #0]
 800a1a0:	6808      	ldr	r0, [r1, #0]
 800a1a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a6:	f01e 0f10 	tst.w	lr, #16
 800a1aa:	bf08      	it	eq
 800a1ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a1b0:	f380 8809 	msr	PSP, r0
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	f3af 8000 	nop.w

0800a1c0 <pxCurrentTCBConst>:
 800a1c0:	20000ba8 	.word	0x20000ba8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a1c4:	bf00      	nop
 800a1c6:	bf00      	nop

0800a1c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	607b      	str	r3, [r7, #4]
}
 800a1e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a1e2:	f7ff fbd9 	bl	8009998 <xTaskIncrementTick>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d003      	beq.n	800a1f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1ec:	4b06      	ldr	r3, [pc, #24]	; (800a208 <SysTick_Handler+0x40>)
 800a1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1f2:	601a      	str	r2, [r3, #0]
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	f383 8811 	msr	BASEPRI, r3
}
 800a1fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a200:	bf00      	nop
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	e000ed04 	.word	0xe000ed04

0800a20c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a20c:	b480      	push	{r7}
 800a20e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a210:	4b0b      	ldr	r3, [pc, #44]	; (800a240 <vPortSetupTimerInterrupt+0x34>)
 800a212:	2200      	movs	r2, #0
 800a214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a216:	4b0b      	ldr	r3, [pc, #44]	; (800a244 <vPortSetupTimerInterrupt+0x38>)
 800a218:	2200      	movs	r2, #0
 800a21a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a21c:	4b0a      	ldr	r3, [pc, #40]	; (800a248 <vPortSetupTimerInterrupt+0x3c>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a0a      	ldr	r2, [pc, #40]	; (800a24c <vPortSetupTimerInterrupt+0x40>)
 800a222:	fba2 2303 	umull	r2, r3, r2, r3
 800a226:	099b      	lsrs	r3, r3, #6
 800a228:	4a09      	ldr	r2, [pc, #36]	; (800a250 <vPortSetupTimerInterrupt+0x44>)
 800a22a:	3b01      	subs	r3, #1
 800a22c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a22e:	4b04      	ldr	r3, [pc, #16]	; (800a240 <vPortSetupTimerInterrupt+0x34>)
 800a230:	2207      	movs	r2, #7
 800a232:	601a      	str	r2, [r3, #0]
}
 800a234:	bf00      	nop
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	e000e010 	.word	0xe000e010
 800a244:	e000e018 	.word	0xe000e018
 800a248:	20000000 	.word	0x20000000
 800a24c:	10624dd3 	.word	0x10624dd3
 800a250:	e000e014 	.word	0xe000e014

0800a254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a264 <vPortEnableVFP+0x10>
 800a258:	6801      	ldr	r1, [r0, #0]
 800a25a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a25e:	6001      	str	r1, [r0, #0]
 800a260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a262:	bf00      	nop
 800a264:	e000ed88 	.word	0xe000ed88

0800a268 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b08a      	sub	sp, #40	; 0x28
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a270:	2300      	movs	r3, #0
 800a272:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a274:	f7ff fad6 	bl	8009824 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a278:	4b5b      	ldr	r3, [pc, #364]	; (800a3e8 <pvPortMalloc+0x180>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d101      	bne.n	800a284 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a280:	f000 f920 	bl	800a4c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a284:	4b59      	ldr	r3, [pc, #356]	; (800a3ec <pvPortMalloc+0x184>)
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4013      	ands	r3, r2
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f040 8093 	bne.w	800a3b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d01d      	beq.n	800a2d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a298:	2208      	movs	r2, #8
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4413      	add	r3, r2
 800a29e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f003 0307 	and.w	r3, r3, #7
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d014      	beq.n	800a2d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f023 0307 	bic.w	r3, r3, #7
 800a2b0:	3308      	adds	r3, #8
 800a2b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f003 0307 	and.w	r3, r3, #7
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00a      	beq.n	800a2d4 <pvPortMalloc+0x6c>
	__asm volatile
 800a2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c2:	f383 8811 	msr	BASEPRI, r3
 800a2c6:	f3bf 8f6f 	isb	sy
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	617b      	str	r3, [r7, #20]
}
 800a2d0:	bf00      	nop
 800a2d2:	e7fe      	b.n	800a2d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d06e      	beq.n	800a3b8 <pvPortMalloc+0x150>
 800a2da:	4b45      	ldr	r3, [pc, #276]	; (800a3f0 <pvPortMalloc+0x188>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d869      	bhi.n	800a3b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a2e4:	4b43      	ldr	r3, [pc, #268]	; (800a3f4 <pvPortMalloc+0x18c>)
 800a2e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a2e8:	4b42      	ldr	r3, [pc, #264]	; (800a3f4 <pvPortMalloc+0x18c>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2ee:	e004      	b.n	800a2fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	429a      	cmp	r2, r3
 800a302:	d903      	bls.n	800a30c <pvPortMalloc+0xa4>
 800a304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1f1      	bne.n	800a2f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a30c:	4b36      	ldr	r3, [pc, #216]	; (800a3e8 <pvPortMalloc+0x180>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a312:	429a      	cmp	r2, r3
 800a314:	d050      	beq.n	800a3b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a316:	6a3b      	ldr	r3, [r7, #32]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2208      	movs	r2, #8
 800a31c:	4413      	add	r3, r2
 800a31e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	6a3b      	ldr	r3, [r7, #32]
 800a326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	685a      	ldr	r2, [r3, #4]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	1ad2      	subs	r2, r2, r3
 800a330:	2308      	movs	r3, #8
 800a332:	005b      	lsls	r3, r3, #1
 800a334:	429a      	cmp	r2, r3
 800a336:	d91f      	bls.n	800a378 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4413      	add	r3, r2
 800a33e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	f003 0307 	and.w	r3, r3, #7
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00a      	beq.n	800a360 <pvPortMalloc+0xf8>
	__asm volatile
 800a34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	613b      	str	r3, [r7, #16]
}
 800a35c:	bf00      	nop
 800a35e:	e7fe      	b.n	800a35e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a362:	685a      	ldr	r2, [r3, #4]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	1ad2      	subs	r2, r2, r3
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a372:	69b8      	ldr	r0, [r7, #24]
 800a374:	f000 f908 	bl	800a588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a378:	4b1d      	ldr	r3, [pc, #116]	; (800a3f0 <pvPortMalloc+0x188>)
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	1ad3      	subs	r3, r2, r3
 800a382:	4a1b      	ldr	r2, [pc, #108]	; (800a3f0 <pvPortMalloc+0x188>)
 800a384:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a386:	4b1a      	ldr	r3, [pc, #104]	; (800a3f0 <pvPortMalloc+0x188>)
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	4b1b      	ldr	r3, [pc, #108]	; (800a3f8 <pvPortMalloc+0x190>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d203      	bcs.n	800a39a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a392:	4b17      	ldr	r3, [pc, #92]	; (800a3f0 <pvPortMalloc+0x188>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a18      	ldr	r2, [pc, #96]	; (800a3f8 <pvPortMalloc+0x190>)
 800a398:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39c:	685a      	ldr	r2, [r3, #4]
 800a39e:	4b13      	ldr	r3, [pc, #76]	; (800a3ec <pvPortMalloc+0x184>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	431a      	orrs	r2, r3
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a3ae:	4b13      	ldr	r3, [pc, #76]	; (800a3fc <pvPortMalloc+0x194>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	4a11      	ldr	r2, [pc, #68]	; (800a3fc <pvPortMalloc+0x194>)
 800a3b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a3b8:	f7ff fa42 	bl	8009840 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	f003 0307 	and.w	r3, r3, #7
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00a      	beq.n	800a3dc <pvPortMalloc+0x174>
	__asm volatile
 800a3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ca:	f383 8811 	msr	BASEPRI, r3
 800a3ce:	f3bf 8f6f 	isb	sy
 800a3d2:	f3bf 8f4f 	dsb	sy
 800a3d6:	60fb      	str	r3, [r7, #12]
}
 800a3d8:	bf00      	nop
 800a3da:	e7fe      	b.n	800a3da <pvPortMalloc+0x172>
	return pvReturn;
 800a3dc:	69fb      	ldr	r3, [r7, #28]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3728      	adds	r7, #40	; 0x28
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	200048e4 	.word	0x200048e4
 800a3ec:	200048f8 	.word	0x200048f8
 800a3f0:	200048e8 	.word	0x200048e8
 800a3f4:	200048dc 	.word	0x200048dc
 800a3f8:	200048ec 	.word	0x200048ec
 800a3fc:	200048f0 	.word	0x200048f0

0800a400 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d04d      	beq.n	800a4ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a412:	2308      	movs	r3, #8
 800a414:	425b      	negs	r3, r3
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	4413      	add	r3, r2
 800a41a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	685a      	ldr	r2, [r3, #4]
 800a424:	4b24      	ldr	r3, [pc, #144]	; (800a4b8 <vPortFree+0xb8>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4013      	ands	r3, r2
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10a      	bne.n	800a444 <vPortFree+0x44>
	__asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	60fb      	str	r3, [r7, #12]
}
 800a440:	bf00      	nop
 800a442:	e7fe      	b.n	800a442 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00a      	beq.n	800a462 <vPortFree+0x62>
	__asm volatile
 800a44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a450:	f383 8811 	msr	BASEPRI, r3
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	60bb      	str	r3, [r7, #8]
}
 800a45e:	bf00      	nop
 800a460:	e7fe      	b.n	800a460 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	685a      	ldr	r2, [r3, #4]
 800a466:	4b14      	ldr	r3, [pc, #80]	; (800a4b8 <vPortFree+0xb8>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4013      	ands	r3, r2
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d01e      	beq.n	800a4ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d11a      	bne.n	800a4ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	4b0e      	ldr	r3, [pc, #56]	; (800a4b8 <vPortFree+0xb8>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	43db      	mvns	r3, r3
 800a482:	401a      	ands	r2, r3
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a488:	f7ff f9cc 	bl	8009824 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	685a      	ldr	r2, [r3, #4]
 800a490:	4b0a      	ldr	r3, [pc, #40]	; (800a4bc <vPortFree+0xbc>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4413      	add	r3, r2
 800a496:	4a09      	ldr	r2, [pc, #36]	; (800a4bc <vPortFree+0xbc>)
 800a498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a49a:	6938      	ldr	r0, [r7, #16]
 800a49c:	f000 f874 	bl	800a588 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a4a0:	4b07      	ldr	r3, [pc, #28]	; (800a4c0 <vPortFree+0xc0>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	4a06      	ldr	r2, [pc, #24]	; (800a4c0 <vPortFree+0xc0>)
 800a4a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a4aa:	f7ff f9c9 	bl	8009840 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a4ae:	bf00      	nop
 800a4b0:	3718      	adds	r7, #24
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	200048f8 	.word	0x200048f8
 800a4bc:	200048e8 	.word	0x200048e8
 800a4c0:	200048f4 	.word	0x200048f4

0800a4c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a4ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a4d0:	4b27      	ldr	r3, [pc, #156]	; (800a570 <prvHeapInit+0xac>)
 800a4d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f003 0307 	and.w	r3, r3, #7
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00c      	beq.n	800a4f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3307      	adds	r3, #7
 800a4e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f023 0307 	bic.w	r3, r3, #7
 800a4ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4ec:	68ba      	ldr	r2, [r7, #8]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	1ad3      	subs	r3, r2, r3
 800a4f2:	4a1f      	ldr	r2, [pc, #124]	; (800a570 <prvHeapInit+0xac>)
 800a4f4:	4413      	add	r3, r2
 800a4f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4fc:	4a1d      	ldr	r2, [pc, #116]	; (800a574 <prvHeapInit+0xb0>)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a502:	4b1c      	ldr	r3, [pc, #112]	; (800a574 <prvHeapInit+0xb0>)
 800a504:	2200      	movs	r2, #0
 800a506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	68ba      	ldr	r2, [r7, #8]
 800a50c:	4413      	add	r3, r2
 800a50e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a510:	2208      	movs	r2, #8
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	1a9b      	subs	r3, r3, r2
 800a516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f023 0307 	bic.w	r3, r3, #7
 800a51e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	4a15      	ldr	r2, [pc, #84]	; (800a578 <prvHeapInit+0xb4>)
 800a524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a526:	4b14      	ldr	r3, [pc, #80]	; (800a578 <prvHeapInit+0xb4>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2200      	movs	r2, #0
 800a52c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a52e:	4b12      	ldr	r3, [pc, #72]	; (800a578 <prvHeapInit+0xb4>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2200      	movs	r2, #0
 800a534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	1ad2      	subs	r2, r2, r3
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a544:	4b0c      	ldr	r3, [pc, #48]	; (800a578 <prvHeapInit+0xb4>)
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	4a0a      	ldr	r2, [pc, #40]	; (800a57c <prvHeapInit+0xb8>)
 800a552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	4a09      	ldr	r2, [pc, #36]	; (800a580 <prvHeapInit+0xbc>)
 800a55a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a55c:	4b09      	ldr	r3, [pc, #36]	; (800a584 <prvHeapInit+0xc0>)
 800a55e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a562:	601a      	str	r2, [r3, #0]
}
 800a564:	bf00      	nop
 800a566:	3714      	adds	r7, #20
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr
 800a570:	20000cdc 	.word	0x20000cdc
 800a574:	200048dc 	.word	0x200048dc
 800a578:	200048e4 	.word	0x200048e4
 800a57c:	200048ec 	.word	0x200048ec
 800a580:	200048e8 	.word	0x200048e8
 800a584:	200048f8 	.word	0x200048f8

0800a588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a590:	4b28      	ldr	r3, [pc, #160]	; (800a634 <prvInsertBlockIntoFreeList+0xac>)
 800a592:	60fb      	str	r3, [r7, #12]
 800a594:	e002      	b.n	800a59c <prvInsertBlockIntoFreeList+0x14>
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	60fb      	str	r3, [r7, #12]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d8f7      	bhi.n	800a596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	68ba      	ldr	r2, [r7, #8]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d108      	bne.n	800a5ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	685a      	ldr	r2, [r3, #4]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	441a      	add	r2, r3
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	68ba      	ldr	r2, [r7, #8]
 800a5d4:	441a      	add	r2, r3
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d118      	bne.n	800a610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	4b15      	ldr	r3, [pc, #84]	; (800a638 <prvInsertBlockIntoFreeList+0xb0>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d00d      	beq.n	800a606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	685a      	ldr	r2, [r3, #4]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	441a      	add	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	601a      	str	r2, [r3, #0]
 800a604:	e008      	b.n	800a618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a606:	4b0c      	ldr	r3, [pc, #48]	; (800a638 <prvInsertBlockIntoFreeList+0xb0>)
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	601a      	str	r2, [r3, #0]
 800a60e:	e003      	b.n	800a618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d002      	beq.n	800a626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a626:	bf00      	nop
 800a628:	3714      	adds	r7, #20
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	200048dc 	.word	0x200048dc
 800a638:	200048e4 	.word	0x200048e4

0800a63c <atof>:
 800a63c:	2100      	movs	r1, #0
 800a63e:	f001 bdbd 	b.w	800c1bc <strtod>
	...

0800a644 <__errno>:
 800a644:	4b01      	ldr	r3, [pc, #4]	; (800a64c <__errno+0x8>)
 800a646:	6818      	ldr	r0, [r3, #0]
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	20000010 	.word	0x20000010

0800a650 <std>:
 800a650:	2300      	movs	r3, #0
 800a652:	b510      	push	{r4, lr}
 800a654:	4604      	mov	r4, r0
 800a656:	e9c0 3300 	strd	r3, r3, [r0]
 800a65a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a65e:	6083      	str	r3, [r0, #8]
 800a660:	8181      	strh	r1, [r0, #12]
 800a662:	6643      	str	r3, [r0, #100]	; 0x64
 800a664:	81c2      	strh	r2, [r0, #14]
 800a666:	6183      	str	r3, [r0, #24]
 800a668:	4619      	mov	r1, r3
 800a66a:	2208      	movs	r2, #8
 800a66c:	305c      	adds	r0, #92	; 0x5c
 800a66e:	f000 f91a 	bl	800a8a6 <memset>
 800a672:	4b05      	ldr	r3, [pc, #20]	; (800a688 <std+0x38>)
 800a674:	6263      	str	r3, [r4, #36]	; 0x24
 800a676:	4b05      	ldr	r3, [pc, #20]	; (800a68c <std+0x3c>)
 800a678:	62a3      	str	r3, [r4, #40]	; 0x28
 800a67a:	4b05      	ldr	r3, [pc, #20]	; (800a690 <std+0x40>)
 800a67c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a67e:	4b05      	ldr	r3, [pc, #20]	; (800a694 <std+0x44>)
 800a680:	6224      	str	r4, [r4, #32]
 800a682:	6323      	str	r3, [r4, #48]	; 0x30
 800a684:	bd10      	pop	{r4, pc}
 800a686:	bf00      	nop
 800a688:	0800b4c5 	.word	0x0800b4c5
 800a68c:	0800b4e7 	.word	0x0800b4e7
 800a690:	0800b51f 	.word	0x0800b51f
 800a694:	0800b543 	.word	0x0800b543

0800a698 <_cleanup_r>:
 800a698:	4901      	ldr	r1, [pc, #4]	; (800a6a0 <_cleanup_r+0x8>)
 800a69a:	f000 b8af 	b.w	800a7fc <_fwalk_reent>
 800a69e:	bf00      	nop
 800a6a0:	0800d199 	.word	0x0800d199

0800a6a4 <__sfmoreglue>:
 800a6a4:	b570      	push	{r4, r5, r6, lr}
 800a6a6:	2268      	movs	r2, #104	; 0x68
 800a6a8:	1e4d      	subs	r5, r1, #1
 800a6aa:	4355      	muls	r5, r2
 800a6ac:	460e      	mov	r6, r1
 800a6ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a6b2:	f000 f921 	bl	800a8f8 <_malloc_r>
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	b140      	cbz	r0, 800a6cc <__sfmoreglue+0x28>
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	e9c0 1600 	strd	r1, r6, [r0]
 800a6c0:	300c      	adds	r0, #12
 800a6c2:	60a0      	str	r0, [r4, #8]
 800a6c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a6c8:	f000 f8ed 	bl	800a8a6 <memset>
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	bd70      	pop	{r4, r5, r6, pc}

0800a6d0 <__sfp_lock_acquire>:
 800a6d0:	4801      	ldr	r0, [pc, #4]	; (800a6d8 <__sfp_lock_acquire+0x8>)
 800a6d2:	f000 b8d8 	b.w	800a886 <__retarget_lock_acquire_recursive>
 800a6d6:	bf00      	nop
 800a6d8:	200048fd 	.word	0x200048fd

0800a6dc <__sfp_lock_release>:
 800a6dc:	4801      	ldr	r0, [pc, #4]	; (800a6e4 <__sfp_lock_release+0x8>)
 800a6de:	f000 b8d3 	b.w	800a888 <__retarget_lock_release_recursive>
 800a6e2:	bf00      	nop
 800a6e4:	200048fd 	.word	0x200048fd

0800a6e8 <__sinit_lock_acquire>:
 800a6e8:	4801      	ldr	r0, [pc, #4]	; (800a6f0 <__sinit_lock_acquire+0x8>)
 800a6ea:	f000 b8cc 	b.w	800a886 <__retarget_lock_acquire_recursive>
 800a6ee:	bf00      	nop
 800a6f0:	200048fe 	.word	0x200048fe

0800a6f4 <__sinit_lock_release>:
 800a6f4:	4801      	ldr	r0, [pc, #4]	; (800a6fc <__sinit_lock_release+0x8>)
 800a6f6:	f000 b8c7 	b.w	800a888 <__retarget_lock_release_recursive>
 800a6fa:	bf00      	nop
 800a6fc:	200048fe 	.word	0x200048fe

0800a700 <__sinit>:
 800a700:	b510      	push	{r4, lr}
 800a702:	4604      	mov	r4, r0
 800a704:	f7ff fff0 	bl	800a6e8 <__sinit_lock_acquire>
 800a708:	69a3      	ldr	r3, [r4, #24]
 800a70a:	b11b      	cbz	r3, 800a714 <__sinit+0x14>
 800a70c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a710:	f7ff bff0 	b.w	800a6f4 <__sinit_lock_release>
 800a714:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a718:	6523      	str	r3, [r4, #80]	; 0x50
 800a71a:	4b13      	ldr	r3, [pc, #76]	; (800a768 <__sinit+0x68>)
 800a71c:	4a13      	ldr	r2, [pc, #76]	; (800a76c <__sinit+0x6c>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	62a2      	str	r2, [r4, #40]	; 0x28
 800a722:	42a3      	cmp	r3, r4
 800a724:	bf04      	itt	eq
 800a726:	2301      	moveq	r3, #1
 800a728:	61a3      	streq	r3, [r4, #24]
 800a72a:	4620      	mov	r0, r4
 800a72c:	f000 f820 	bl	800a770 <__sfp>
 800a730:	6060      	str	r0, [r4, #4]
 800a732:	4620      	mov	r0, r4
 800a734:	f000 f81c 	bl	800a770 <__sfp>
 800a738:	60a0      	str	r0, [r4, #8]
 800a73a:	4620      	mov	r0, r4
 800a73c:	f000 f818 	bl	800a770 <__sfp>
 800a740:	2200      	movs	r2, #0
 800a742:	60e0      	str	r0, [r4, #12]
 800a744:	2104      	movs	r1, #4
 800a746:	6860      	ldr	r0, [r4, #4]
 800a748:	f7ff ff82 	bl	800a650 <std>
 800a74c:	68a0      	ldr	r0, [r4, #8]
 800a74e:	2201      	movs	r2, #1
 800a750:	2109      	movs	r1, #9
 800a752:	f7ff ff7d 	bl	800a650 <std>
 800a756:	68e0      	ldr	r0, [r4, #12]
 800a758:	2202      	movs	r2, #2
 800a75a:	2112      	movs	r1, #18
 800a75c:	f7ff ff78 	bl	800a650 <std>
 800a760:	2301      	movs	r3, #1
 800a762:	61a3      	str	r3, [r4, #24]
 800a764:	e7d2      	b.n	800a70c <__sinit+0xc>
 800a766:	bf00      	nop
 800a768:	0800f2d8 	.word	0x0800f2d8
 800a76c:	0800a699 	.word	0x0800a699

0800a770 <__sfp>:
 800a770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a772:	4607      	mov	r7, r0
 800a774:	f7ff ffac 	bl	800a6d0 <__sfp_lock_acquire>
 800a778:	4b1e      	ldr	r3, [pc, #120]	; (800a7f4 <__sfp+0x84>)
 800a77a:	681e      	ldr	r6, [r3, #0]
 800a77c:	69b3      	ldr	r3, [r6, #24]
 800a77e:	b913      	cbnz	r3, 800a786 <__sfp+0x16>
 800a780:	4630      	mov	r0, r6
 800a782:	f7ff ffbd 	bl	800a700 <__sinit>
 800a786:	3648      	adds	r6, #72	; 0x48
 800a788:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a78c:	3b01      	subs	r3, #1
 800a78e:	d503      	bpl.n	800a798 <__sfp+0x28>
 800a790:	6833      	ldr	r3, [r6, #0]
 800a792:	b30b      	cbz	r3, 800a7d8 <__sfp+0x68>
 800a794:	6836      	ldr	r6, [r6, #0]
 800a796:	e7f7      	b.n	800a788 <__sfp+0x18>
 800a798:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a79c:	b9d5      	cbnz	r5, 800a7d4 <__sfp+0x64>
 800a79e:	4b16      	ldr	r3, [pc, #88]	; (800a7f8 <__sfp+0x88>)
 800a7a0:	60e3      	str	r3, [r4, #12]
 800a7a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a7a6:	6665      	str	r5, [r4, #100]	; 0x64
 800a7a8:	f000 f86c 	bl	800a884 <__retarget_lock_init_recursive>
 800a7ac:	f7ff ff96 	bl	800a6dc <__sfp_lock_release>
 800a7b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a7b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a7b8:	6025      	str	r5, [r4, #0]
 800a7ba:	61a5      	str	r5, [r4, #24]
 800a7bc:	2208      	movs	r2, #8
 800a7be:	4629      	mov	r1, r5
 800a7c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a7c4:	f000 f86f 	bl	800a8a6 <memset>
 800a7c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a7cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7d4:	3468      	adds	r4, #104	; 0x68
 800a7d6:	e7d9      	b.n	800a78c <__sfp+0x1c>
 800a7d8:	2104      	movs	r1, #4
 800a7da:	4638      	mov	r0, r7
 800a7dc:	f7ff ff62 	bl	800a6a4 <__sfmoreglue>
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	6030      	str	r0, [r6, #0]
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	d1d5      	bne.n	800a794 <__sfp+0x24>
 800a7e8:	f7ff ff78 	bl	800a6dc <__sfp_lock_release>
 800a7ec:	230c      	movs	r3, #12
 800a7ee:	603b      	str	r3, [r7, #0]
 800a7f0:	e7ee      	b.n	800a7d0 <__sfp+0x60>
 800a7f2:	bf00      	nop
 800a7f4:	0800f2d8 	.word	0x0800f2d8
 800a7f8:	ffff0001 	.word	0xffff0001

0800a7fc <_fwalk_reent>:
 800a7fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a800:	4606      	mov	r6, r0
 800a802:	4688      	mov	r8, r1
 800a804:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a808:	2700      	movs	r7, #0
 800a80a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a80e:	f1b9 0901 	subs.w	r9, r9, #1
 800a812:	d505      	bpl.n	800a820 <_fwalk_reent+0x24>
 800a814:	6824      	ldr	r4, [r4, #0]
 800a816:	2c00      	cmp	r4, #0
 800a818:	d1f7      	bne.n	800a80a <_fwalk_reent+0xe>
 800a81a:	4638      	mov	r0, r7
 800a81c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a820:	89ab      	ldrh	r3, [r5, #12]
 800a822:	2b01      	cmp	r3, #1
 800a824:	d907      	bls.n	800a836 <_fwalk_reent+0x3a>
 800a826:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a82a:	3301      	adds	r3, #1
 800a82c:	d003      	beq.n	800a836 <_fwalk_reent+0x3a>
 800a82e:	4629      	mov	r1, r5
 800a830:	4630      	mov	r0, r6
 800a832:	47c0      	blx	r8
 800a834:	4307      	orrs	r7, r0
 800a836:	3568      	adds	r5, #104	; 0x68
 800a838:	e7e9      	b.n	800a80e <_fwalk_reent+0x12>
	...

0800a83c <__libc_init_array>:
 800a83c:	b570      	push	{r4, r5, r6, lr}
 800a83e:	4d0d      	ldr	r5, [pc, #52]	; (800a874 <__libc_init_array+0x38>)
 800a840:	4c0d      	ldr	r4, [pc, #52]	; (800a878 <__libc_init_array+0x3c>)
 800a842:	1b64      	subs	r4, r4, r5
 800a844:	10a4      	asrs	r4, r4, #2
 800a846:	2600      	movs	r6, #0
 800a848:	42a6      	cmp	r6, r4
 800a84a:	d109      	bne.n	800a860 <__libc_init_array+0x24>
 800a84c:	4d0b      	ldr	r5, [pc, #44]	; (800a87c <__libc_init_array+0x40>)
 800a84e:	4c0c      	ldr	r4, [pc, #48]	; (800a880 <__libc_init_array+0x44>)
 800a850:	f004 faac 	bl	800edac <_init>
 800a854:	1b64      	subs	r4, r4, r5
 800a856:	10a4      	asrs	r4, r4, #2
 800a858:	2600      	movs	r6, #0
 800a85a:	42a6      	cmp	r6, r4
 800a85c:	d105      	bne.n	800a86a <__libc_init_array+0x2e>
 800a85e:	bd70      	pop	{r4, r5, r6, pc}
 800a860:	f855 3b04 	ldr.w	r3, [r5], #4
 800a864:	4798      	blx	r3
 800a866:	3601      	adds	r6, #1
 800a868:	e7ee      	b.n	800a848 <__libc_init_array+0xc>
 800a86a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a86e:	4798      	blx	r3
 800a870:	3601      	adds	r6, #1
 800a872:	e7f2      	b.n	800a85a <__libc_init_array+0x1e>
 800a874:	0800f790 	.word	0x0800f790
 800a878:	0800f790 	.word	0x0800f790
 800a87c:	0800f790 	.word	0x0800f790
 800a880:	0800f794 	.word	0x0800f794

0800a884 <__retarget_lock_init_recursive>:
 800a884:	4770      	bx	lr

0800a886 <__retarget_lock_acquire_recursive>:
 800a886:	4770      	bx	lr

0800a888 <__retarget_lock_release_recursive>:
 800a888:	4770      	bx	lr

0800a88a <memcpy>:
 800a88a:	440a      	add	r2, r1
 800a88c:	4291      	cmp	r1, r2
 800a88e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a892:	d100      	bne.n	800a896 <memcpy+0xc>
 800a894:	4770      	bx	lr
 800a896:	b510      	push	{r4, lr}
 800a898:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a89c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8a0:	4291      	cmp	r1, r2
 800a8a2:	d1f9      	bne.n	800a898 <memcpy+0xe>
 800a8a4:	bd10      	pop	{r4, pc}

0800a8a6 <memset>:
 800a8a6:	4402      	add	r2, r0
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d100      	bne.n	800a8b0 <memset+0xa>
 800a8ae:	4770      	bx	lr
 800a8b0:	f803 1b01 	strb.w	r1, [r3], #1
 800a8b4:	e7f9      	b.n	800a8aa <memset+0x4>
	...

0800a8b8 <sbrk_aligned>:
 800a8b8:	b570      	push	{r4, r5, r6, lr}
 800a8ba:	4e0e      	ldr	r6, [pc, #56]	; (800a8f4 <sbrk_aligned+0x3c>)
 800a8bc:	460c      	mov	r4, r1
 800a8be:	6831      	ldr	r1, [r6, #0]
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	b911      	cbnz	r1, 800a8ca <sbrk_aligned+0x12>
 800a8c4:	f000 fdee 	bl	800b4a4 <_sbrk_r>
 800a8c8:	6030      	str	r0, [r6, #0]
 800a8ca:	4621      	mov	r1, r4
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	f000 fde9 	bl	800b4a4 <_sbrk_r>
 800a8d2:	1c43      	adds	r3, r0, #1
 800a8d4:	d00a      	beq.n	800a8ec <sbrk_aligned+0x34>
 800a8d6:	1cc4      	adds	r4, r0, #3
 800a8d8:	f024 0403 	bic.w	r4, r4, #3
 800a8dc:	42a0      	cmp	r0, r4
 800a8de:	d007      	beq.n	800a8f0 <sbrk_aligned+0x38>
 800a8e0:	1a21      	subs	r1, r4, r0
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	f000 fdde 	bl	800b4a4 <_sbrk_r>
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	d101      	bne.n	800a8f0 <sbrk_aligned+0x38>
 800a8ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	bd70      	pop	{r4, r5, r6, pc}
 800a8f4:	20004904 	.word	0x20004904

0800a8f8 <_malloc_r>:
 800a8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8fc:	1ccd      	adds	r5, r1, #3
 800a8fe:	f025 0503 	bic.w	r5, r5, #3
 800a902:	3508      	adds	r5, #8
 800a904:	2d0c      	cmp	r5, #12
 800a906:	bf38      	it	cc
 800a908:	250c      	movcc	r5, #12
 800a90a:	2d00      	cmp	r5, #0
 800a90c:	4607      	mov	r7, r0
 800a90e:	db01      	blt.n	800a914 <_malloc_r+0x1c>
 800a910:	42a9      	cmp	r1, r5
 800a912:	d905      	bls.n	800a920 <_malloc_r+0x28>
 800a914:	230c      	movs	r3, #12
 800a916:	603b      	str	r3, [r7, #0]
 800a918:	2600      	movs	r6, #0
 800a91a:	4630      	mov	r0, r6
 800a91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a920:	4e2e      	ldr	r6, [pc, #184]	; (800a9dc <_malloc_r+0xe4>)
 800a922:	f003 f87b 	bl	800da1c <__malloc_lock>
 800a926:	6833      	ldr	r3, [r6, #0]
 800a928:	461c      	mov	r4, r3
 800a92a:	bb34      	cbnz	r4, 800a97a <_malloc_r+0x82>
 800a92c:	4629      	mov	r1, r5
 800a92e:	4638      	mov	r0, r7
 800a930:	f7ff ffc2 	bl	800a8b8 <sbrk_aligned>
 800a934:	1c43      	adds	r3, r0, #1
 800a936:	4604      	mov	r4, r0
 800a938:	d14d      	bne.n	800a9d6 <_malloc_r+0xde>
 800a93a:	6834      	ldr	r4, [r6, #0]
 800a93c:	4626      	mov	r6, r4
 800a93e:	2e00      	cmp	r6, #0
 800a940:	d140      	bne.n	800a9c4 <_malloc_r+0xcc>
 800a942:	6823      	ldr	r3, [r4, #0]
 800a944:	4631      	mov	r1, r6
 800a946:	4638      	mov	r0, r7
 800a948:	eb04 0803 	add.w	r8, r4, r3
 800a94c:	f000 fdaa 	bl	800b4a4 <_sbrk_r>
 800a950:	4580      	cmp	r8, r0
 800a952:	d13a      	bne.n	800a9ca <_malloc_r+0xd2>
 800a954:	6821      	ldr	r1, [r4, #0]
 800a956:	3503      	adds	r5, #3
 800a958:	1a6d      	subs	r5, r5, r1
 800a95a:	f025 0503 	bic.w	r5, r5, #3
 800a95e:	3508      	adds	r5, #8
 800a960:	2d0c      	cmp	r5, #12
 800a962:	bf38      	it	cc
 800a964:	250c      	movcc	r5, #12
 800a966:	4629      	mov	r1, r5
 800a968:	4638      	mov	r0, r7
 800a96a:	f7ff ffa5 	bl	800a8b8 <sbrk_aligned>
 800a96e:	3001      	adds	r0, #1
 800a970:	d02b      	beq.n	800a9ca <_malloc_r+0xd2>
 800a972:	6823      	ldr	r3, [r4, #0]
 800a974:	442b      	add	r3, r5
 800a976:	6023      	str	r3, [r4, #0]
 800a978:	e00e      	b.n	800a998 <_malloc_r+0xa0>
 800a97a:	6822      	ldr	r2, [r4, #0]
 800a97c:	1b52      	subs	r2, r2, r5
 800a97e:	d41e      	bmi.n	800a9be <_malloc_r+0xc6>
 800a980:	2a0b      	cmp	r2, #11
 800a982:	d916      	bls.n	800a9b2 <_malloc_r+0xba>
 800a984:	1961      	adds	r1, r4, r5
 800a986:	42a3      	cmp	r3, r4
 800a988:	6025      	str	r5, [r4, #0]
 800a98a:	bf18      	it	ne
 800a98c:	6059      	strne	r1, [r3, #4]
 800a98e:	6863      	ldr	r3, [r4, #4]
 800a990:	bf08      	it	eq
 800a992:	6031      	streq	r1, [r6, #0]
 800a994:	5162      	str	r2, [r4, r5]
 800a996:	604b      	str	r3, [r1, #4]
 800a998:	4638      	mov	r0, r7
 800a99a:	f104 060b 	add.w	r6, r4, #11
 800a99e:	f003 f843 	bl	800da28 <__malloc_unlock>
 800a9a2:	f026 0607 	bic.w	r6, r6, #7
 800a9a6:	1d23      	adds	r3, r4, #4
 800a9a8:	1af2      	subs	r2, r6, r3
 800a9aa:	d0b6      	beq.n	800a91a <_malloc_r+0x22>
 800a9ac:	1b9b      	subs	r3, r3, r6
 800a9ae:	50a3      	str	r3, [r4, r2]
 800a9b0:	e7b3      	b.n	800a91a <_malloc_r+0x22>
 800a9b2:	6862      	ldr	r2, [r4, #4]
 800a9b4:	42a3      	cmp	r3, r4
 800a9b6:	bf0c      	ite	eq
 800a9b8:	6032      	streq	r2, [r6, #0]
 800a9ba:	605a      	strne	r2, [r3, #4]
 800a9bc:	e7ec      	b.n	800a998 <_malloc_r+0xa0>
 800a9be:	4623      	mov	r3, r4
 800a9c0:	6864      	ldr	r4, [r4, #4]
 800a9c2:	e7b2      	b.n	800a92a <_malloc_r+0x32>
 800a9c4:	4634      	mov	r4, r6
 800a9c6:	6876      	ldr	r6, [r6, #4]
 800a9c8:	e7b9      	b.n	800a93e <_malloc_r+0x46>
 800a9ca:	230c      	movs	r3, #12
 800a9cc:	603b      	str	r3, [r7, #0]
 800a9ce:	4638      	mov	r0, r7
 800a9d0:	f003 f82a 	bl	800da28 <__malloc_unlock>
 800a9d4:	e7a1      	b.n	800a91a <_malloc_r+0x22>
 800a9d6:	6025      	str	r5, [r4, #0]
 800a9d8:	e7de      	b.n	800a998 <_malloc_r+0xa0>
 800a9da:	bf00      	nop
 800a9dc:	20004900 	.word	0x20004900

0800a9e0 <__cvt>:
 800a9e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e4:	ec55 4b10 	vmov	r4, r5, d0
 800a9e8:	2d00      	cmp	r5, #0
 800a9ea:	460e      	mov	r6, r1
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	462b      	mov	r3, r5
 800a9f0:	bfbb      	ittet	lt
 800a9f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a9f6:	461d      	movlt	r5, r3
 800a9f8:	2300      	movge	r3, #0
 800a9fa:	232d      	movlt	r3, #45	; 0x2d
 800a9fc:	700b      	strb	r3, [r1, #0]
 800a9fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aa04:	4691      	mov	r9, r2
 800aa06:	f023 0820 	bic.w	r8, r3, #32
 800aa0a:	bfbc      	itt	lt
 800aa0c:	4622      	movlt	r2, r4
 800aa0e:	4614      	movlt	r4, r2
 800aa10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aa14:	d005      	beq.n	800aa22 <__cvt+0x42>
 800aa16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aa1a:	d100      	bne.n	800aa1e <__cvt+0x3e>
 800aa1c:	3601      	adds	r6, #1
 800aa1e:	2102      	movs	r1, #2
 800aa20:	e000      	b.n	800aa24 <__cvt+0x44>
 800aa22:	2103      	movs	r1, #3
 800aa24:	ab03      	add	r3, sp, #12
 800aa26:	9301      	str	r3, [sp, #4]
 800aa28:	ab02      	add	r3, sp, #8
 800aa2a:	9300      	str	r3, [sp, #0]
 800aa2c:	ec45 4b10 	vmov	d0, r4, r5
 800aa30:	4653      	mov	r3, sl
 800aa32:	4632      	mov	r2, r6
 800aa34:	f001 fd3c 	bl	800c4b0 <_dtoa_r>
 800aa38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aa3c:	4607      	mov	r7, r0
 800aa3e:	d102      	bne.n	800aa46 <__cvt+0x66>
 800aa40:	f019 0f01 	tst.w	r9, #1
 800aa44:	d022      	beq.n	800aa8c <__cvt+0xac>
 800aa46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aa4a:	eb07 0906 	add.w	r9, r7, r6
 800aa4e:	d110      	bne.n	800aa72 <__cvt+0x92>
 800aa50:	783b      	ldrb	r3, [r7, #0]
 800aa52:	2b30      	cmp	r3, #48	; 0x30
 800aa54:	d10a      	bne.n	800aa6c <__cvt+0x8c>
 800aa56:	2200      	movs	r2, #0
 800aa58:	2300      	movs	r3, #0
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	f7f6 f83b 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa62:	b918      	cbnz	r0, 800aa6c <__cvt+0x8c>
 800aa64:	f1c6 0601 	rsb	r6, r6, #1
 800aa68:	f8ca 6000 	str.w	r6, [sl]
 800aa6c:	f8da 3000 	ldr.w	r3, [sl]
 800aa70:	4499      	add	r9, r3
 800aa72:	2200      	movs	r2, #0
 800aa74:	2300      	movs	r3, #0
 800aa76:	4620      	mov	r0, r4
 800aa78:	4629      	mov	r1, r5
 800aa7a:	f7f6 f82d 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa7e:	b108      	cbz	r0, 800aa84 <__cvt+0xa4>
 800aa80:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa84:	2230      	movs	r2, #48	; 0x30
 800aa86:	9b03      	ldr	r3, [sp, #12]
 800aa88:	454b      	cmp	r3, r9
 800aa8a:	d307      	bcc.n	800aa9c <__cvt+0xbc>
 800aa8c:	9b03      	ldr	r3, [sp, #12]
 800aa8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa90:	1bdb      	subs	r3, r3, r7
 800aa92:	4638      	mov	r0, r7
 800aa94:	6013      	str	r3, [r2, #0]
 800aa96:	b004      	add	sp, #16
 800aa98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa9c:	1c59      	adds	r1, r3, #1
 800aa9e:	9103      	str	r1, [sp, #12]
 800aaa0:	701a      	strb	r2, [r3, #0]
 800aaa2:	e7f0      	b.n	800aa86 <__cvt+0xa6>

0800aaa4 <__exponent>:
 800aaa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2900      	cmp	r1, #0
 800aaaa:	bfb8      	it	lt
 800aaac:	4249      	neglt	r1, r1
 800aaae:	f803 2b02 	strb.w	r2, [r3], #2
 800aab2:	bfb4      	ite	lt
 800aab4:	222d      	movlt	r2, #45	; 0x2d
 800aab6:	222b      	movge	r2, #43	; 0x2b
 800aab8:	2909      	cmp	r1, #9
 800aaba:	7042      	strb	r2, [r0, #1]
 800aabc:	dd2a      	ble.n	800ab14 <__exponent+0x70>
 800aabe:	f10d 0407 	add.w	r4, sp, #7
 800aac2:	46a4      	mov	ip, r4
 800aac4:	270a      	movs	r7, #10
 800aac6:	46a6      	mov	lr, r4
 800aac8:	460a      	mov	r2, r1
 800aaca:	fb91 f6f7 	sdiv	r6, r1, r7
 800aace:	fb07 1516 	mls	r5, r7, r6, r1
 800aad2:	3530      	adds	r5, #48	; 0x30
 800aad4:	2a63      	cmp	r2, #99	; 0x63
 800aad6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800aada:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800aade:	4631      	mov	r1, r6
 800aae0:	dcf1      	bgt.n	800aac6 <__exponent+0x22>
 800aae2:	3130      	adds	r1, #48	; 0x30
 800aae4:	f1ae 0502 	sub.w	r5, lr, #2
 800aae8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800aaec:	1c44      	adds	r4, r0, #1
 800aaee:	4629      	mov	r1, r5
 800aaf0:	4561      	cmp	r1, ip
 800aaf2:	d30a      	bcc.n	800ab0a <__exponent+0x66>
 800aaf4:	f10d 0209 	add.w	r2, sp, #9
 800aaf8:	eba2 020e 	sub.w	r2, r2, lr
 800aafc:	4565      	cmp	r5, ip
 800aafe:	bf88      	it	hi
 800ab00:	2200      	movhi	r2, #0
 800ab02:	4413      	add	r3, r2
 800ab04:	1a18      	subs	r0, r3, r0
 800ab06:	b003      	add	sp, #12
 800ab08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab0e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ab12:	e7ed      	b.n	800aaf0 <__exponent+0x4c>
 800ab14:	2330      	movs	r3, #48	; 0x30
 800ab16:	3130      	adds	r1, #48	; 0x30
 800ab18:	7083      	strb	r3, [r0, #2]
 800ab1a:	70c1      	strb	r1, [r0, #3]
 800ab1c:	1d03      	adds	r3, r0, #4
 800ab1e:	e7f1      	b.n	800ab04 <__exponent+0x60>

0800ab20 <_printf_float>:
 800ab20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab24:	ed2d 8b02 	vpush	{d8}
 800ab28:	b08d      	sub	sp, #52	; 0x34
 800ab2a:	460c      	mov	r4, r1
 800ab2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ab30:	4616      	mov	r6, r2
 800ab32:	461f      	mov	r7, r3
 800ab34:	4605      	mov	r5, r0
 800ab36:	f002 fedb 	bl	800d8f0 <_localeconv_r>
 800ab3a:	f8d0 a000 	ldr.w	sl, [r0]
 800ab3e:	4650      	mov	r0, sl
 800ab40:	f7f5 fb4e 	bl	80001e0 <strlen>
 800ab44:	2300      	movs	r3, #0
 800ab46:	930a      	str	r3, [sp, #40]	; 0x28
 800ab48:	6823      	ldr	r3, [r4, #0]
 800ab4a:	9305      	str	r3, [sp, #20]
 800ab4c:	f8d8 3000 	ldr.w	r3, [r8]
 800ab50:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ab54:	3307      	adds	r3, #7
 800ab56:	f023 0307 	bic.w	r3, r3, #7
 800ab5a:	f103 0208 	add.w	r2, r3, #8
 800ab5e:	f8c8 2000 	str.w	r2, [r8]
 800ab62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab66:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ab6a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ab6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ab72:	9307      	str	r3, [sp, #28]
 800ab74:	f8cd 8018 	str.w	r8, [sp, #24]
 800ab78:	ee08 0a10 	vmov	s16, r0
 800ab7c:	4b9f      	ldr	r3, [pc, #636]	; (800adfc <_printf_float+0x2dc>)
 800ab7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab86:	f7f5 ffd9 	bl	8000b3c <__aeabi_dcmpun>
 800ab8a:	bb88      	cbnz	r0, 800abf0 <_printf_float+0xd0>
 800ab8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab90:	4b9a      	ldr	r3, [pc, #616]	; (800adfc <_printf_float+0x2dc>)
 800ab92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab96:	f7f5 ffb3 	bl	8000b00 <__aeabi_dcmple>
 800ab9a:	bb48      	cbnz	r0, 800abf0 <_printf_float+0xd0>
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	2300      	movs	r3, #0
 800aba0:	4640      	mov	r0, r8
 800aba2:	4649      	mov	r1, r9
 800aba4:	f7f5 ffa2 	bl	8000aec <__aeabi_dcmplt>
 800aba8:	b110      	cbz	r0, 800abb0 <_printf_float+0x90>
 800abaa:	232d      	movs	r3, #45	; 0x2d
 800abac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abb0:	4b93      	ldr	r3, [pc, #588]	; (800ae00 <_printf_float+0x2e0>)
 800abb2:	4894      	ldr	r0, [pc, #592]	; (800ae04 <_printf_float+0x2e4>)
 800abb4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800abb8:	bf94      	ite	ls
 800abba:	4698      	movls	r8, r3
 800abbc:	4680      	movhi	r8, r0
 800abbe:	2303      	movs	r3, #3
 800abc0:	6123      	str	r3, [r4, #16]
 800abc2:	9b05      	ldr	r3, [sp, #20]
 800abc4:	f023 0204 	bic.w	r2, r3, #4
 800abc8:	6022      	str	r2, [r4, #0]
 800abca:	f04f 0900 	mov.w	r9, #0
 800abce:	9700      	str	r7, [sp, #0]
 800abd0:	4633      	mov	r3, r6
 800abd2:	aa0b      	add	r2, sp, #44	; 0x2c
 800abd4:	4621      	mov	r1, r4
 800abd6:	4628      	mov	r0, r5
 800abd8:	f000 f9d8 	bl	800af8c <_printf_common>
 800abdc:	3001      	adds	r0, #1
 800abde:	f040 8090 	bne.w	800ad02 <_printf_float+0x1e2>
 800abe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abe6:	b00d      	add	sp, #52	; 0x34
 800abe8:	ecbd 8b02 	vpop	{d8}
 800abec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf0:	4642      	mov	r2, r8
 800abf2:	464b      	mov	r3, r9
 800abf4:	4640      	mov	r0, r8
 800abf6:	4649      	mov	r1, r9
 800abf8:	f7f5 ffa0 	bl	8000b3c <__aeabi_dcmpun>
 800abfc:	b140      	cbz	r0, 800ac10 <_printf_float+0xf0>
 800abfe:	464b      	mov	r3, r9
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	bfbc      	itt	lt
 800ac04:	232d      	movlt	r3, #45	; 0x2d
 800ac06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ac0a:	487f      	ldr	r0, [pc, #508]	; (800ae08 <_printf_float+0x2e8>)
 800ac0c:	4b7f      	ldr	r3, [pc, #508]	; (800ae0c <_printf_float+0x2ec>)
 800ac0e:	e7d1      	b.n	800abb4 <_printf_float+0x94>
 800ac10:	6863      	ldr	r3, [r4, #4]
 800ac12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ac16:	9206      	str	r2, [sp, #24]
 800ac18:	1c5a      	adds	r2, r3, #1
 800ac1a:	d13f      	bne.n	800ac9c <_printf_float+0x17c>
 800ac1c:	2306      	movs	r3, #6
 800ac1e:	6063      	str	r3, [r4, #4]
 800ac20:	9b05      	ldr	r3, [sp, #20]
 800ac22:	6861      	ldr	r1, [r4, #4]
 800ac24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ac28:	2300      	movs	r3, #0
 800ac2a:	9303      	str	r3, [sp, #12]
 800ac2c:	ab0a      	add	r3, sp, #40	; 0x28
 800ac2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ac32:	ab09      	add	r3, sp, #36	; 0x24
 800ac34:	ec49 8b10 	vmov	d0, r8, r9
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	6022      	str	r2, [r4, #0]
 800ac3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ac40:	4628      	mov	r0, r5
 800ac42:	f7ff fecd 	bl	800a9e0 <__cvt>
 800ac46:	9b06      	ldr	r3, [sp, #24]
 800ac48:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac4a:	2b47      	cmp	r3, #71	; 0x47
 800ac4c:	4680      	mov	r8, r0
 800ac4e:	d108      	bne.n	800ac62 <_printf_float+0x142>
 800ac50:	1cc8      	adds	r0, r1, #3
 800ac52:	db02      	blt.n	800ac5a <_printf_float+0x13a>
 800ac54:	6863      	ldr	r3, [r4, #4]
 800ac56:	4299      	cmp	r1, r3
 800ac58:	dd41      	ble.n	800acde <_printf_float+0x1be>
 800ac5a:	f1ab 0b02 	sub.w	fp, fp, #2
 800ac5e:	fa5f fb8b 	uxtb.w	fp, fp
 800ac62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ac66:	d820      	bhi.n	800acaa <_printf_float+0x18a>
 800ac68:	3901      	subs	r1, #1
 800ac6a:	465a      	mov	r2, fp
 800ac6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ac70:	9109      	str	r1, [sp, #36]	; 0x24
 800ac72:	f7ff ff17 	bl	800aaa4 <__exponent>
 800ac76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac78:	1813      	adds	r3, r2, r0
 800ac7a:	2a01      	cmp	r2, #1
 800ac7c:	4681      	mov	r9, r0
 800ac7e:	6123      	str	r3, [r4, #16]
 800ac80:	dc02      	bgt.n	800ac88 <_printf_float+0x168>
 800ac82:	6822      	ldr	r2, [r4, #0]
 800ac84:	07d2      	lsls	r2, r2, #31
 800ac86:	d501      	bpl.n	800ac8c <_printf_float+0x16c>
 800ac88:	3301      	adds	r3, #1
 800ac8a:	6123      	str	r3, [r4, #16]
 800ac8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d09c      	beq.n	800abce <_printf_float+0xae>
 800ac94:	232d      	movs	r3, #45	; 0x2d
 800ac96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac9a:	e798      	b.n	800abce <_printf_float+0xae>
 800ac9c:	9a06      	ldr	r2, [sp, #24]
 800ac9e:	2a47      	cmp	r2, #71	; 0x47
 800aca0:	d1be      	bne.n	800ac20 <_printf_float+0x100>
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1bc      	bne.n	800ac20 <_printf_float+0x100>
 800aca6:	2301      	movs	r3, #1
 800aca8:	e7b9      	b.n	800ac1e <_printf_float+0xfe>
 800acaa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800acae:	d118      	bne.n	800ace2 <_printf_float+0x1c2>
 800acb0:	2900      	cmp	r1, #0
 800acb2:	6863      	ldr	r3, [r4, #4]
 800acb4:	dd0b      	ble.n	800acce <_printf_float+0x1ae>
 800acb6:	6121      	str	r1, [r4, #16]
 800acb8:	b913      	cbnz	r3, 800acc0 <_printf_float+0x1a0>
 800acba:	6822      	ldr	r2, [r4, #0]
 800acbc:	07d0      	lsls	r0, r2, #31
 800acbe:	d502      	bpl.n	800acc6 <_printf_float+0x1a6>
 800acc0:	3301      	adds	r3, #1
 800acc2:	440b      	add	r3, r1
 800acc4:	6123      	str	r3, [r4, #16]
 800acc6:	65a1      	str	r1, [r4, #88]	; 0x58
 800acc8:	f04f 0900 	mov.w	r9, #0
 800accc:	e7de      	b.n	800ac8c <_printf_float+0x16c>
 800acce:	b913      	cbnz	r3, 800acd6 <_printf_float+0x1b6>
 800acd0:	6822      	ldr	r2, [r4, #0]
 800acd2:	07d2      	lsls	r2, r2, #31
 800acd4:	d501      	bpl.n	800acda <_printf_float+0x1ba>
 800acd6:	3302      	adds	r3, #2
 800acd8:	e7f4      	b.n	800acc4 <_printf_float+0x1a4>
 800acda:	2301      	movs	r3, #1
 800acdc:	e7f2      	b.n	800acc4 <_printf_float+0x1a4>
 800acde:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ace2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ace4:	4299      	cmp	r1, r3
 800ace6:	db05      	blt.n	800acf4 <_printf_float+0x1d4>
 800ace8:	6823      	ldr	r3, [r4, #0]
 800acea:	6121      	str	r1, [r4, #16]
 800acec:	07d8      	lsls	r0, r3, #31
 800acee:	d5ea      	bpl.n	800acc6 <_printf_float+0x1a6>
 800acf0:	1c4b      	adds	r3, r1, #1
 800acf2:	e7e7      	b.n	800acc4 <_printf_float+0x1a4>
 800acf4:	2900      	cmp	r1, #0
 800acf6:	bfd4      	ite	le
 800acf8:	f1c1 0202 	rsble	r2, r1, #2
 800acfc:	2201      	movgt	r2, #1
 800acfe:	4413      	add	r3, r2
 800ad00:	e7e0      	b.n	800acc4 <_printf_float+0x1a4>
 800ad02:	6823      	ldr	r3, [r4, #0]
 800ad04:	055a      	lsls	r2, r3, #21
 800ad06:	d407      	bmi.n	800ad18 <_printf_float+0x1f8>
 800ad08:	6923      	ldr	r3, [r4, #16]
 800ad0a:	4642      	mov	r2, r8
 800ad0c:	4631      	mov	r1, r6
 800ad0e:	4628      	mov	r0, r5
 800ad10:	47b8      	blx	r7
 800ad12:	3001      	adds	r0, #1
 800ad14:	d12c      	bne.n	800ad70 <_printf_float+0x250>
 800ad16:	e764      	b.n	800abe2 <_printf_float+0xc2>
 800ad18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad1c:	f240 80e0 	bls.w	800aee0 <_printf_float+0x3c0>
 800ad20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad24:	2200      	movs	r2, #0
 800ad26:	2300      	movs	r3, #0
 800ad28:	f7f5 fed6 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d034      	beq.n	800ad9a <_printf_float+0x27a>
 800ad30:	4a37      	ldr	r2, [pc, #220]	; (800ae10 <_printf_float+0x2f0>)
 800ad32:	2301      	movs	r3, #1
 800ad34:	4631      	mov	r1, r6
 800ad36:	4628      	mov	r0, r5
 800ad38:	47b8      	blx	r7
 800ad3a:	3001      	adds	r0, #1
 800ad3c:	f43f af51 	beq.w	800abe2 <_printf_float+0xc2>
 800ad40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad44:	429a      	cmp	r2, r3
 800ad46:	db02      	blt.n	800ad4e <_printf_float+0x22e>
 800ad48:	6823      	ldr	r3, [r4, #0]
 800ad4a:	07d8      	lsls	r0, r3, #31
 800ad4c:	d510      	bpl.n	800ad70 <_printf_float+0x250>
 800ad4e:	ee18 3a10 	vmov	r3, s16
 800ad52:	4652      	mov	r2, sl
 800ad54:	4631      	mov	r1, r6
 800ad56:	4628      	mov	r0, r5
 800ad58:	47b8      	blx	r7
 800ad5a:	3001      	adds	r0, #1
 800ad5c:	f43f af41 	beq.w	800abe2 <_printf_float+0xc2>
 800ad60:	f04f 0800 	mov.w	r8, #0
 800ad64:	f104 091a 	add.w	r9, r4, #26
 800ad68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad6a:	3b01      	subs	r3, #1
 800ad6c:	4543      	cmp	r3, r8
 800ad6e:	dc09      	bgt.n	800ad84 <_printf_float+0x264>
 800ad70:	6823      	ldr	r3, [r4, #0]
 800ad72:	079b      	lsls	r3, r3, #30
 800ad74:	f100 8105 	bmi.w	800af82 <_printf_float+0x462>
 800ad78:	68e0      	ldr	r0, [r4, #12]
 800ad7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad7c:	4298      	cmp	r0, r3
 800ad7e:	bfb8      	it	lt
 800ad80:	4618      	movlt	r0, r3
 800ad82:	e730      	b.n	800abe6 <_printf_float+0xc6>
 800ad84:	2301      	movs	r3, #1
 800ad86:	464a      	mov	r2, r9
 800ad88:	4631      	mov	r1, r6
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	47b8      	blx	r7
 800ad8e:	3001      	adds	r0, #1
 800ad90:	f43f af27 	beq.w	800abe2 <_printf_float+0xc2>
 800ad94:	f108 0801 	add.w	r8, r8, #1
 800ad98:	e7e6      	b.n	800ad68 <_printf_float+0x248>
 800ad9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	dc39      	bgt.n	800ae14 <_printf_float+0x2f4>
 800ada0:	4a1b      	ldr	r2, [pc, #108]	; (800ae10 <_printf_float+0x2f0>)
 800ada2:	2301      	movs	r3, #1
 800ada4:	4631      	mov	r1, r6
 800ada6:	4628      	mov	r0, r5
 800ada8:	47b8      	blx	r7
 800adaa:	3001      	adds	r0, #1
 800adac:	f43f af19 	beq.w	800abe2 <_printf_float+0xc2>
 800adb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adb4:	4313      	orrs	r3, r2
 800adb6:	d102      	bne.n	800adbe <_printf_float+0x29e>
 800adb8:	6823      	ldr	r3, [r4, #0]
 800adba:	07d9      	lsls	r1, r3, #31
 800adbc:	d5d8      	bpl.n	800ad70 <_printf_float+0x250>
 800adbe:	ee18 3a10 	vmov	r3, s16
 800adc2:	4652      	mov	r2, sl
 800adc4:	4631      	mov	r1, r6
 800adc6:	4628      	mov	r0, r5
 800adc8:	47b8      	blx	r7
 800adca:	3001      	adds	r0, #1
 800adcc:	f43f af09 	beq.w	800abe2 <_printf_float+0xc2>
 800add0:	f04f 0900 	mov.w	r9, #0
 800add4:	f104 0a1a 	add.w	sl, r4, #26
 800add8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adda:	425b      	negs	r3, r3
 800addc:	454b      	cmp	r3, r9
 800adde:	dc01      	bgt.n	800ade4 <_printf_float+0x2c4>
 800ade0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ade2:	e792      	b.n	800ad0a <_printf_float+0x1ea>
 800ade4:	2301      	movs	r3, #1
 800ade6:	4652      	mov	r2, sl
 800ade8:	4631      	mov	r1, r6
 800adea:	4628      	mov	r0, r5
 800adec:	47b8      	blx	r7
 800adee:	3001      	adds	r0, #1
 800adf0:	f43f aef7 	beq.w	800abe2 <_printf_float+0xc2>
 800adf4:	f109 0901 	add.w	r9, r9, #1
 800adf8:	e7ee      	b.n	800add8 <_printf_float+0x2b8>
 800adfa:	bf00      	nop
 800adfc:	7fefffff 	.word	0x7fefffff
 800ae00:	0800f2dc 	.word	0x0800f2dc
 800ae04:	0800f2e0 	.word	0x0800f2e0
 800ae08:	0800f2e8 	.word	0x0800f2e8
 800ae0c:	0800f2e4 	.word	0x0800f2e4
 800ae10:	0800f2ec 	.word	0x0800f2ec
 800ae14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	bfa8      	it	ge
 800ae1c:	461a      	movge	r2, r3
 800ae1e:	2a00      	cmp	r2, #0
 800ae20:	4691      	mov	r9, r2
 800ae22:	dc37      	bgt.n	800ae94 <_printf_float+0x374>
 800ae24:	f04f 0b00 	mov.w	fp, #0
 800ae28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae2c:	f104 021a 	add.w	r2, r4, #26
 800ae30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae32:	9305      	str	r3, [sp, #20]
 800ae34:	eba3 0309 	sub.w	r3, r3, r9
 800ae38:	455b      	cmp	r3, fp
 800ae3a:	dc33      	bgt.n	800aea4 <_printf_float+0x384>
 800ae3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae40:	429a      	cmp	r2, r3
 800ae42:	db3b      	blt.n	800aebc <_printf_float+0x39c>
 800ae44:	6823      	ldr	r3, [r4, #0]
 800ae46:	07da      	lsls	r2, r3, #31
 800ae48:	d438      	bmi.n	800aebc <_printf_float+0x39c>
 800ae4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae4c:	9a05      	ldr	r2, [sp, #20]
 800ae4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae50:	1a9a      	subs	r2, r3, r2
 800ae52:	eba3 0901 	sub.w	r9, r3, r1
 800ae56:	4591      	cmp	r9, r2
 800ae58:	bfa8      	it	ge
 800ae5a:	4691      	movge	r9, r2
 800ae5c:	f1b9 0f00 	cmp.w	r9, #0
 800ae60:	dc35      	bgt.n	800aece <_printf_float+0x3ae>
 800ae62:	f04f 0800 	mov.w	r8, #0
 800ae66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae6a:	f104 0a1a 	add.w	sl, r4, #26
 800ae6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae72:	1a9b      	subs	r3, r3, r2
 800ae74:	eba3 0309 	sub.w	r3, r3, r9
 800ae78:	4543      	cmp	r3, r8
 800ae7a:	f77f af79 	ble.w	800ad70 <_printf_float+0x250>
 800ae7e:	2301      	movs	r3, #1
 800ae80:	4652      	mov	r2, sl
 800ae82:	4631      	mov	r1, r6
 800ae84:	4628      	mov	r0, r5
 800ae86:	47b8      	blx	r7
 800ae88:	3001      	adds	r0, #1
 800ae8a:	f43f aeaa 	beq.w	800abe2 <_printf_float+0xc2>
 800ae8e:	f108 0801 	add.w	r8, r8, #1
 800ae92:	e7ec      	b.n	800ae6e <_printf_float+0x34e>
 800ae94:	4613      	mov	r3, r2
 800ae96:	4631      	mov	r1, r6
 800ae98:	4642      	mov	r2, r8
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	47b8      	blx	r7
 800ae9e:	3001      	adds	r0, #1
 800aea0:	d1c0      	bne.n	800ae24 <_printf_float+0x304>
 800aea2:	e69e      	b.n	800abe2 <_printf_float+0xc2>
 800aea4:	2301      	movs	r3, #1
 800aea6:	4631      	mov	r1, r6
 800aea8:	4628      	mov	r0, r5
 800aeaa:	9205      	str	r2, [sp, #20]
 800aeac:	47b8      	blx	r7
 800aeae:	3001      	adds	r0, #1
 800aeb0:	f43f ae97 	beq.w	800abe2 <_printf_float+0xc2>
 800aeb4:	9a05      	ldr	r2, [sp, #20]
 800aeb6:	f10b 0b01 	add.w	fp, fp, #1
 800aeba:	e7b9      	b.n	800ae30 <_printf_float+0x310>
 800aebc:	ee18 3a10 	vmov	r3, s16
 800aec0:	4652      	mov	r2, sl
 800aec2:	4631      	mov	r1, r6
 800aec4:	4628      	mov	r0, r5
 800aec6:	47b8      	blx	r7
 800aec8:	3001      	adds	r0, #1
 800aeca:	d1be      	bne.n	800ae4a <_printf_float+0x32a>
 800aecc:	e689      	b.n	800abe2 <_printf_float+0xc2>
 800aece:	9a05      	ldr	r2, [sp, #20]
 800aed0:	464b      	mov	r3, r9
 800aed2:	4442      	add	r2, r8
 800aed4:	4631      	mov	r1, r6
 800aed6:	4628      	mov	r0, r5
 800aed8:	47b8      	blx	r7
 800aeda:	3001      	adds	r0, #1
 800aedc:	d1c1      	bne.n	800ae62 <_printf_float+0x342>
 800aede:	e680      	b.n	800abe2 <_printf_float+0xc2>
 800aee0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aee2:	2a01      	cmp	r2, #1
 800aee4:	dc01      	bgt.n	800aeea <_printf_float+0x3ca>
 800aee6:	07db      	lsls	r3, r3, #31
 800aee8:	d538      	bpl.n	800af5c <_printf_float+0x43c>
 800aeea:	2301      	movs	r3, #1
 800aeec:	4642      	mov	r2, r8
 800aeee:	4631      	mov	r1, r6
 800aef0:	4628      	mov	r0, r5
 800aef2:	47b8      	blx	r7
 800aef4:	3001      	adds	r0, #1
 800aef6:	f43f ae74 	beq.w	800abe2 <_printf_float+0xc2>
 800aefa:	ee18 3a10 	vmov	r3, s16
 800aefe:	4652      	mov	r2, sl
 800af00:	4631      	mov	r1, r6
 800af02:	4628      	mov	r0, r5
 800af04:	47b8      	blx	r7
 800af06:	3001      	adds	r0, #1
 800af08:	f43f ae6b 	beq.w	800abe2 <_printf_float+0xc2>
 800af0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af10:	2200      	movs	r2, #0
 800af12:	2300      	movs	r3, #0
 800af14:	f7f5 fde0 	bl	8000ad8 <__aeabi_dcmpeq>
 800af18:	b9d8      	cbnz	r0, 800af52 <_printf_float+0x432>
 800af1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af1c:	f108 0201 	add.w	r2, r8, #1
 800af20:	3b01      	subs	r3, #1
 800af22:	4631      	mov	r1, r6
 800af24:	4628      	mov	r0, r5
 800af26:	47b8      	blx	r7
 800af28:	3001      	adds	r0, #1
 800af2a:	d10e      	bne.n	800af4a <_printf_float+0x42a>
 800af2c:	e659      	b.n	800abe2 <_printf_float+0xc2>
 800af2e:	2301      	movs	r3, #1
 800af30:	4652      	mov	r2, sl
 800af32:	4631      	mov	r1, r6
 800af34:	4628      	mov	r0, r5
 800af36:	47b8      	blx	r7
 800af38:	3001      	adds	r0, #1
 800af3a:	f43f ae52 	beq.w	800abe2 <_printf_float+0xc2>
 800af3e:	f108 0801 	add.w	r8, r8, #1
 800af42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af44:	3b01      	subs	r3, #1
 800af46:	4543      	cmp	r3, r8
 800af48:	dcf1      	bgt.n	800af2e <_printf_float+0x40e>
 800af4a:	464b      	mov	r3, r9
 800af4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800af50:	e6dc      	b.n	800ad0c <_printf_float+0x1ec>
 800af52:	f04f 0800 	mov.w	r8, #0
 800af56:	f104 0a1a 	add.w	sl, r4, #26
 800af5a:	e7f2      	b.n	800af42 <_printf_float+0x422>
 800af5c:	2301      	movs	r3, #1
 800af5e:	4642      	mov	r2, r8
 800af60:	e7df      	b.n	800af22 <_printf_float+0x402>
 800af62:	2301      	movs	r3, #1
 800af64:	464a      	mov	r2, r9
 800af66:	4631      	mov	r1, r6
 800af68:	4628      	mov	r0, r5
 800af6a:	47b8      	blx	r7
 800af6c:	3001      	adds	r0, #1
 800af6e:	f43f ae38 	beq.w	800abe2 <_printf_float+0xc2>
 800af72:	f108 0801 	add.w	r8, r8, #1
 800af76:	68e3      	ldr	r3, [r4, #12]
 800af78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af7a:	1a5b      	subs	r3, r3, r1
 800af7c:	4543      	cmp	r3, r8
 800af7e:	dcf0      	bgt.n	800af62 <_printf_float+0x442>
 800af80:	e6fa      	b.n	800ad78 <_printf_float+0x258>
 800af82:	f04f 0800 	mov.w	r8, #0
 800af86:	f104 0919 	add.w	r9, r4, #25
 800af8a:	e7f4      	b.n	800af76 <_printf_float+0x456>

0800af8c <_printf_common>:
 800af8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af90:	4616      	mov	r6, r2
 800af92:	4699      	mov	r9, r3
 800af94:	688a      	ldr	r2, [r1, #8]
 800af96:	690b      	ldr	r3, [r1, #16]
 800af98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af9c:	4293      	cmp	r3, r2
 800af9e:	bfb8      	it	lt
 800afa0:	4613      	movlt	r3, r2
 800afa2:	6033      	str	r3, [r6, #0]
 800afa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afa8:	4607      	mov	r7, r0
 800afaa:	460c      	mov	r4, r1
 800afac:	b10a      	cbz	r2, 800afb2 <_printf_common+0x26>
 800afae:	3301      	adds	r3, #1
 800afb0:	6033      	str	r3, [r6, #0]
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	0699      	lsls	r1, r3, #26
 800afb6:	bf42      	ittt	mi
 800afb8:	6833      	ldrmi	r3, [r6, #0]
 800afba:	3302      	addmi	r3, #2
 800afbc:	6033      	strmi	r3, [r6, #0]
 800afbe:	6825      	ldr	r5, [r4, #0]
 800afc0:	f015 0506 	ands.w	r5, r5, #6
 800afc4:	d106      	bne.n	800afd4 <_printf_common+0x48>
 800afc6:	f104 0a19 	add.w	sl, r4, #25
 800afca:	68e3      	ldr	r3, [r4, #12]
 800afcc:	6832      	ldr	r2, [r6, #0]
 800afce:	1a9b      	subs	r3, r3, r2
 800afd0:	42ab      	cmp	r3, r5
 800afd2:	dc26      	bgt.n	800b022 <_printf_common+0x96>
 800afd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800afd8:	1e13      	subs	r3, r2, #0
 800afda:	6822      	ldr	r2, [r4, #0]
 800afdc:	bf18      	it	ne
 800afde:	2301      	movne	r3, #1
 800afe0:	0692      	lsls	r2, r2, #26
 800afe2:	d42b      	bmi.n	800b03c <_printf_common+0xb0>
 800afe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afe8:	4649      	mov	r1, r9
 800afea:	4638      	mov	r0, r7
 800afec:	47c0      	blx	r8
 800afee:	3001      	adds	r0, #1
 800aff0:	d01e      	beq.n	800b030 <_printf_common+0xa4>
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	68e5      	ldr	r5, [r4, #12]
 800aff6:	6832      	ldr	r2, [r6, #0]
 800aff8:	f003 0306 	and.w	r3, r3, #6
 800affc:	2b04      	cmp	r3, #4
 800affe:	bf08      	it	eq
 800b000:	1aad      	subeq	r5, r5, r2
 800b002:	68a3      	ldr	r3, [r4, #8]
 800b004:	6922      	ldr	r2, [r4, #16]
 800b006:	bf0c      	ite	eq
 800b008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b00c:	2500      	movne	r5, #0
 800b00e:	4293      	cmp	r3, r2
 800b010:	bfc4      	itt	gt
 800b012:	1a9b      	subgt	r3, r3, r2
 800b014:	18ed      	addgt	r5, r5, r3
 800b016:	2600      	movs	r6, #0
 800b018:	341a      	adds	r4, #26
 800b01a:	42b5      	cmp	r5, r6
 800b01c:	d11a      	bne.n	800b054 <_printf_common+0xc8>
 800b01e:	2000      	movs	r0, #0
 800b020:	e008      	b.n	800b034 <_printf_common+0xa8>
 800b022:	2301      	movs	r3, #1
 800b024:	4652      	mov	r2, sl
 800b026:	4649      	mov	r1, r9
 800b028:	4638      	mov	r0, r7
 800b02a:	47c0      	blx	r8
 800b02c:	3001      	adds	r0, #1
 800b02e:	d103      	bne.n	800b038 <_printf_common+0xac>
 800b030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b038:	3501      	adds	r5, #1
 800b03a:	e7c6      	b.n	800afca <_printf_common+0x3e>
 800b03c:	18e1      	adds	r1, r4, r3
 800b03e:	1c5a      	adds	r2, r3, #1
 800b040:	2030      	movs	r0, #48	; 0x30
 800b042:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b046:	4422      	add	r2, r4
 800b048:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b04c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b050:	3302      	adds	r3, #2
 800b052:	e7c7      	b.n	800afe4 <_printf_common+0x58>
 800b054:	2301      	movs	r3, #1
 800b056:	4622      	mov	r2, r4
 800b058:	4649      	mov	r1, r9
 800b05a:	4638      	mov	r0, r7
 800b05c:	47c0      	blx	r8
 800b05e:	3001      	adds	r0, #1
 800b060:	d0e6      	beq.n	800b030 <_printf_common+0xa4>
 800b062:	3601      	adds	r6, #1
 800b064:	e7d9      	b.n	800b01a <_printf_common+0x8e>
	...

0800b068 <_printf_i>:
 800b068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b06c:	7e0f      	ldrb	r7, [r1, #24]
 800b06e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b070:	2f78      	cmp	r7, #120	; 0x78
 800b072:	4691      	mov	r9, r2
 800b074:	4680      	mov	r8, r0
 800b076:	460c      	mov	r4, r1
 800b078:	469a      	mov	sl, r3
 800b07a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b07e:	d807      	bhi.n	800b090 <_printf_i+0x28>
 800b080:	2f62      	cmp	r7, #98	; 0x62
 800b082:	d80a      	bhi.n	800b09a <_printf_i+0x32>
 800b084:	2f00      	cmp	r7, #0
 800b086:	f000 80d8 	beq.w	800b23a <_printf_i+0x1d2>
 800b08a:	2f58      	cmp	r7, #88	; 0x58
 800b08c:	f000 80a3 	beq.w	800b1d6 <_printf_i+0x16e>
 800b090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b094:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b098:	e03a      	b.n	800b110 <_printf_i+0xa8>
 800b09a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b09e:	2b15      	cmp	r3, #21
 800b0a0:	d8f6      	bhi.n	800b090 <_printf_i+0x28>
 800b0a2:	a101      	add	r1, pc, #4	; (adr r1, 800b0a8 <_printf_i+0x40>)
 800b0a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0a8:	0800b101 	.word	0x0800b101
 800b0ac:	0800b115 	.word	0x0800b115
 800b0b0:	0800b091 	.word	0x0800b091
 800b0b4:	0800b091 	.word	0x0800b091
 800b0b8:	0800b091 	.word	0x0800b091
 800b0bc:	0800b091 	.word	0x0800b091
 800b0c0:	0800b115 	.word	0x0800b115
 800b0c4:	0800b091 	.word	0x0800b091
 800b0c8:	0800b091 	.word	0x0800b091
 800b0cc:	0800b091 	.word	0x0800b091
 800b0d0:	0800b091 	.word	0x0800b091
 800b0d4:	0800b221 	.word	0x0800b221
 800b0d8:	0800b145 	.word	0x0800b145
 800b0dc:	0800b203 	.word	0x0800b203
 800b0e0:	0800b091 	.word	0x0800b091
 800b0e4:	0800b091 	.word	0x0800b091
 800b0e8:	0800b243 	.word	0x0800b243
 800b0ec:	0800b091 	.word	0x0800b091
 800b0f0:	0800b145 	.word	0x0800b145
 800b0f4:	0800b091 	.word	0x0800b091
 800b0f8:	0800b091 	.word	0x0800b091
 800b0fc:	0800b20b 	.word	0x0800b20b
 800b100:	682b      	ldr	r3, [r5, #0]
 800b102:	1d1a      	adds	r2, r3, #4
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	602a      	str	r2, [r5, #0]
 800b108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b10c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b110:	2301      	movs	r3, #1
 800b112:	e0a3      	b.n	800b25c <_printf_i+0x1f4>
 800b114:	6820      	ldr	r0, [r4, #0]
 800b116:	6829      	ldr	r1, [r5, #0]
 800b118:	0606      	lsls	r6, r0, #24
 800b11a:	f101 0304 	add.w	r3, r1, #4
 800b11e:	d50a      	bpl.n	800b136 <_printf_i+0xce>
 800b120:	680e      	ldr	r6, [r1, #0]
 800b122:	602b      	str	r3, [r5, #0]
 800b124:	2e00      	cmp	r6, #0
 800b126:	da03      	bge.n	800b130 <_printf_i+0xc8>
 800b128:	232d      	movs	r3, #45	; 0x2d
 800b12a:	4276      	negs	r6, r6
 800b12c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b130:	485e      	ldr	r0, [pc, #376]	; (800b2ac <_printf_i+0x244>)
 800b132:	230a      	movs	r3, #10
 800b134:	e019      	b.n	800b16a <_printf_i+0x102>
 800b136:	680e      	ldr	r6, [r1, #0]
 800b138:	602b      	str	r3, [r5, #0]
 800b13a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b13e:	bf18      	it	ne
 800b140:	b236      	sxthne	r6, r6
 800b142:	e7ef      	b.n	800b124 <_printf_i+0xbc>
 800b144:	682b      	ldr	r3, [r5, #0]
 800b146:	6820      	ldr	r0, [r4, #0]
 800b148:	1d19      	adds	r1, r3, #4
 800b14a:	6029      	str	r1, [r5, #0]
 800b14c:	0601      	lsls	r1, r0, #24
 800b14e:	d501      	bpl.n	800b154 <_printf_i+0xec>
 800b150:	681e      	ldr	r6, [r3, #0]
 800b152:	e002      	b.n	800b15a <_printf_i+0xf2>
 800b154:	0646      	lsls	r6, r0, #25
 800b156:	d5fb      	bpl.n	800b150 <_printf_i+0xe8>
 800b158:	881e      	ldrh	r6, [r3, #0]
 800b15a:	4854      	ldr	r0, [pc, #336]	; (800b2ac <_printf_i+0x244>)
 800b15c:	2f6f      	cmp	r7, #111	; 0x6f
 800b15e:	bf0c      	ite	eq
 800b160:	2308      	moveq	r3, #8
 800b162:	230a      	movne	r3, #10
 800b164:	2100      	movs	r1, #0
 800b166:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b16a:	6865      	ldr	r5, [r4, #4]
 800b16c:	60a5      	str	r5, [r4, #8]
 800b16e:	2d00      	cmp	r5, #0
 800b170:	bfa2      	ittt	ge
 800b172:	6821      	ldrge	r1, [r4, #0]
 800b174:	f021 0104 	bicge.w	r1, r1, #4
 800b178:	6021      	strge	r1, [r4, #0]
 800b17a:	b90e      	cbnz	r6, 800b180 <_printf_i+0x118>
 800b17c:	2d00      	cmp	r5, #0
 800b17e:	d04d      	beq.n	800b21c <_printf_i+0x1b4>
 800b180:	4615      	mov	r5, r2
 800b182:	fbb6 f1f3 	udiv	r1, r6, r3
 800b186:	fb03 6711 	mls	r7, r3, r1, r6
 800b18a:	5dc7      	ldrb	r7, [r0, r7]
 800b18c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b190:	4637      	mov	r7, r6
 800b192:	42bb      	cmp	r3, r7
 800b194:	460e      	mov	r6, r1
 800b196:	d9f4      	bls.n	800b182 <_printf_i+0x11a>
 800b198:	2b08      	cmp	r3, #8
 800b19a:	d10b      	bne.n	800b1b4 <_printf_i+0x14c>
 800b19c:	6823      	ldr	r3, [r4, #0]
 800b19e:	07de      	lsls	r6, r3, #31
 800b1a0:	d508      	bpl.n	800b1b4 <_printf_i+0x14c>
 800b1a2:	6923      	ldr	r3, [r4, #16]
 800b1a4:	6861      	ldr	r1, [r4, #4]
 800b1a6:	4299      	cmp	r1, r3
 800b1a8:	bfde      	ittt	le
 800b1aa:	2330      	movle	r3, #48	; 0x30
 800b1ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b1b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b1b4:	1b52      	subs	r2, r2, r5
 800b1b6:	6122      	str	r2, [r4, #16]
 800b1b8:	f8cd a000 	str.w	sl, [sp]
 800b1bc:	464b      	mov	r3, r9
 800b1be:	aa03      	add	r2, sp, #12
 800b1c0:	4621      	mov	r1, r4
 800b1c2:	4640      	mov	r0, r8
 800b1c4:	f7ff fee2 	bl	800af8c <_printf_common>
 800b1c8:	3001      	adds	r0, #1
 800b1ca:	d14c      	bne.n	800b266 <_printf_i+0x1fe>
 800b1cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1d0:	b004      	add	sp, #16
 800b1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1d6:	4835      	ldr	r0, [pc, #212]	; (800b2ac <_printf_i+0x244>)
 800b1d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b1dc:	6829      	ldr	r1, [r5, #0]
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b1e4:	6029      	str	r1, [r5, #0]
 800b1e6:	061d      	lsls	r5, r3, #24
 800b1e8:	d514      	bpl.n	800b214 <_printf_i+0x1ac>
 800b1ea:	07df      	lsls	r7, r3, #31
 800b1ec:	bf44      	itt	mi
 800b1ee:	f043 0320 	orrmi.w	r3, r3, #32
 800b1f2:	6023      	strmi	r3, [r4, #0]
 800b1f4:	b91e      	cbnz	r6, 800b1fe <_printf_i+0x196>
 800b1f6:	6823      	ldr	r3, [r4, #0]
 800b1f8:	f023 0320 	bic.w	r3, r3, #32
 800b1fc:	6023      	str	r3, [r4, #0]
 800b1fe:	2310      	movs	r3, #16
 800b200:	e7b0      	b.n	800b164 <_printf_i+0xfc>
 800b202:	6823      	ldr	r3, [r4, #0]
 800b204:	f043 0320 	orr.w	r3, r3, #32
 800b208:	6023      	str	r3, [r4, #0]
 800b20a:	2378      	movs	r3, #120	; 0x78
 800b20c:	4828      	ldr	r0, [pc, #160]	; (800b2b0 <_printf_i+0x248>)
 800b20e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b212:	e7e3      	b.n	800b1dc <_printf_i+0x174>
 800b214:	0659      	lsls	r1, r3, #25
 800b216:	bf48      	it	mi
 800b218:	b2b6      	uxthmi	r6, r6
 800b21a:	e7e6      	b.n	800b1ea <_printf_i+0x182>
 800b21c:	4615      	mov	r5, r2
 800b21e:	e7bb      	b.n	800b198 <_printf_i+0x130>
 800b220:	682b      	ldr	r3, [r5, #0]
 800b222:	6826      	ldr	r6, [r4, #0]
 800b224:	6961      	ldr	r1, [r4, #20]
 800b226:	1d18      	adds	r0, r3, #4
 800b228:	6028      	str	r0, [r5, #0]
 800b22a:	0635      	lsls	r5, r6, #24
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	d501      	bpl.n	800b234 <_printf_i+0x1cc>
 800b230:	6019      	str	r1, [r3, #0]
 800b232:	e002      	b.n	800b23a <_printf_i+0x1d2>
 800b234:	0670      	lsls	r0, r6, #25
 800b236:	d5fb      	bpl.n	800b230 <_printf_i+0x1c8>
 800b238:	8019      	strh	r1, [r3, #0]
 800b23a:	2300      	movs	r3, #0
 800b23c:	6123      	str	r3, [r4, #16]
 800b23e:	4615      	mov	r5, r2
 800b240:	e7ba      	b.n	800b1b8 <_printf_i+0x150>
 800b242:	682b      	ldr	r3, [r5, #0]
 800b244:	1d1a      	adds	r2, r3, #4
 800b246:	602a      	str	r2, [r5, #0]
 800b248:	681d      	ldr	r5, [r3, #0]
 800b24a:	6862      	ldr	r2, [r4, #4]
 800b24c:	2100      	movs	r1, #0
 800b24e:	4628      	mov	r0, r5
 800b250:	f7f4 ffce 	bl	80001f0 <memchr>
 800b254:	b108      	cbz	r0, 800b25a <_printf_i+0x1f2>
 800b256:	1b40      	subs	r0, r0, r5
 800b258:	6060      	str	r0, [r4, #4]
 800b25a:	6863      	ldr	r3, [r4, #4]
 800b25c:	6123      	str	r3, [r4, #16]
 800b25e:	2300      	movs	r3, #0
 800b260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b264:	e7a8      	b.n	800b1b8 <_printf_i+0x150>
 800b266:	6923      	ldr	r3, [r4, #16]
 800b268:	462a      	mov	r2, r5
 800b26a:	4649      	mov	r1, r9
 800b26c:	4640      	mov	r0, r8
 800b26e:	47d0      	blx	sl
 800b270:	3001      	adds	r0, #1
 800b272:	d0ab      	beq.n	800b1cc <_printf_i+0x164>
 800b274:	6823      	ldr	r3, [r4, #0]
 800b276:	079b      	lsls	r3, r3, #30
 800b278:	d413      	bmi.n	800b2a2 <_printf_i+0x23a>
 800b27a:	68e0      	ldr	r0, [r4, #12]
 800b27c:	9b03      	ldr	r3, [sp, #12]
 800b27e:	4298      	cmp	r0, r3
 800b280:	bfb8      	it	lt
 800b282:	4618      	movlt	r0, r3
 800b284:	e7a4      	b.n	800b1d0 <_printf_i+0x168>
 800b286:	2301      	movs	r3, #1
 800b288:	4632      	mov	r2, r6
 800b28a:	4649      	mov	r1, r9
 800b28c:	4640      	mov	r0, r8
 800b28e:	47d0      	blx	sl
 800b290:	3001      	adds	r0, #1
 800b292:	d09b      	beq.n	800b1cc <_printf_i+0x164>
 800b294:	3501      	adds	r5, #1
 800b296:	68e3      	ldr	r3, [r4, #12]
 800b298:	9903      	ldr	r1, [sp, #12]
 800b29a:	1a5b      	subs	r3, r3, r1
 800b29c:	42ab      	cmp	r3, r5
 800b29e:	dcf2      	bgt.n	800b286 <_printf_i+0x21e>
 800b2a0:	e7eb      	b.n	800b27a <_printf_i+0x212>
 800b2a2:	2500      	movs	r5, #0
 800b2a4:	f104 0619 	add.w	r6, r4, #25
 800b2a8:	e7f5      	b.n	800b296 <_printf_i+0x22e>
 800b2aa:	bf00      	nop
 800b2ac:	0800f2ee 	.word	0x0800f2ee
 800b2b0:	0800f2ff 	.word	0x0800f2ff

0800b2b4 <iprintf>:
 800b2b4:	b40f      	push	{r0, r1, r2, r3}
 800b2b6:	4b0a      	ldr	r3, [pc, #40]	; (800b2e0 <iprintf+0x2c>)
 800b2b8:	b513      	push	{r0, r1, r4, lr}
 800b2ba:	681c      	ldr	r4, [r3, #0]
 800b2bc:	b124      	cbz	r4, 800b2c8 <iprintf+0x14>
 800b2be:	69a3      	ldr	r3, [r4, #24]
 800b2c0:	b913      	cbnz	r3, 800b2c8 <iprintf+0x14>
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f7ff fa1c 	bl	800a700 <__sinit>
 800b2c8:	ab05      	add	r3, sp, #20
 800b2ca:	9a04      	ldr	r2, [sp, #16]
 800b2cc:	68a1      	ldr	r1, [r4, #8]
 800b2ce:	9301      	str	r3, [sp, #4]
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f003 f8fd 	bl	800e4d0 <_vfiprintf_r>
 800b2d6:	b002      	add	sp, #8
 800b2d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2dc:	b004      	add	sp, #16
 800b2de:	4770      	bx	lr
 800b2e0:	20000010 	.word	0x20000010

0800b2e4 <_puts_r>:
 800b2e4:	b570      	push	{r4, r5, r6, lr}
 800b2e6:	460e      	mov	r6, r1
 800b2e8:	4605      	mov	r5, r0
 800b2ea:	b118      	cbz	r0, 800b2f4 <_puts_r+0x10>
 800b2ec:	6983      	ldr	r3, [r0, #24]
 800b2ee:	b90b      	cbnz	r3, 800b2f4 <_puts_r+0x10>
 800b2f0:	f7ff fa06 	bl	800a700 <__sinit>
 800b2f4:	69ab      	ldr	r3, [r5, #24]
 800b2f6:	68ac      	ldr	r4, [r5, #8]
 800b2f8:	b913      	cbnz	r3, 800b300 <_puts_r+0x1c>
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	f7ff fa00 	bl	800a700 <__sinit>
 800b300:	4b2c      	ldr	r3, [pc, #176]	; (800b3b4 <_puts_r+0xd0>)
 800b302:	429c      	cmp	r4, r3
 800b304:	d120      	bne.n	800b348 <_puts_r+0x64>
 800b306:	686c      	ldr	r4, [r5, #4]
 800b308:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b30a:	07db      	lsls	r3, r3, #31
 800b30c:	d405      	bmi.n	800b31a <_puts_r+0x36>
 800b30e:	89a3      	ldrh	r3, [r4, #12]
 800b310:	0598      	lsls	r0, r3, #22
 800b312:	d402      	bmi.n	800b31a <_puts_r+0x36>
 800b314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b316:	f7ff fab6 	bl	800a886 <__retarget_lock_acquire_recursive>
 800b31a:	89a3      	ldrh	r3, [r4, #12]
 800b31c:	0719      	lsls	r1, r3, #28
 800b31e:	d51d      	bpl.n	800b35c <_puts_r+0x78>
 800b320:	6923      	ldr	r3, [r4, #16]
 800b322:	b1db      	cbz	r3, 800b35c <_puts_r+0x78>
 800b324:	3e01      	subs	r6, #1
 800b326:	68a3      	ldr	r3, [r4, #8]
 800b328:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b32c:	3b01      	subs	r3, #1
 800b32e:	60a3      	str	r3, [r4, #8]
 800b330:	bb39      	cbnz	r1, 800b382 <_puts_r+0x9e>
 800b332:	2b00      	cmp	r3, #0
 800b334:	da38      	bge.n	800b3a8 <_puts_r+0xc4>
 800b336:	4622      	mov	r2, r4
 800b338:	210a      	movs	r1, #10
 800b33a:	4628      	mov	r0, r5
 800b33c:	f000 ff4a 	bl	800c1d4 <__swbuf_r>
 800b340:	3001      	adds	r0, #1
 800b342:	d011      	beq.n	800b368 <_puts_r+0x84>
 800b344:	250a      	movs	r5, #10
 800b346:	e011      	b.n	800b36c <_puts_r+0x88>
 800b348:	4b1b      	ldr	r3, [pc, #108]	; (800b3b8 <_puts_r+0xd4>)
 800b34a:	429c      	cmp	r4, r3
 800b34c:	d101      	bne.n	800b352 <_puts_r+0x6e>
 800b34e:	68ac      	ldr	r4, [r5, #8]
 800b350:	e7da      	b.n	800b308 <_puts_r+0x24>
 800b352:	4b1a      	ldr	r3, [pc, #104]	; (800b3bc <_puts_r+0xd8>)
 800b354:	429c      	cmp	r4, r3
 800b356:	bf08      	it	eq
 800b358:	68ec      	ldreq	r4, [r5, #12]
 800b35a:	e7d5      	b.n	800b308 <_puts_r+0x24>
 800b35c:	4621      	mov	r1, r4
 800b35e:	4628      	mov	r0, r5
 800b360:	f000 ff9c 	bl	800c29c <__swsetup_r>
 800b364:	2800      	cmp	r0, #0
 800b366:	d0dd      	beq.n	800b324 <_puts_r+0x40>
 800b368:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b36c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b36e:	07da      	lsls	r2, r3, #31
 800b370:	d405      	bmi.n	800b37e <_puts_r+0x9a>
 800b372:	89a3      	ldrh	r3, [r4, #12]
 800b374:	059b      	lsls	r3, r3, #22
 800b376:	d402      	bmi.n	800b37e <_puts_r+0x9a>
 800b378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b37a:	f7ff fa85 	bl	800a888 <__retarget_lock_release_recursive>
 800b37e:	4628      	mov	r0, r5
 800b380:	bd70      	pop	{r4, r5, r6, pc}
 800b382:	2b00      	cmp	r3, #0
 800b384:	da04      	bge.n	800b390 <_puts_r+0xac>
 800b386:	69a2      	ldr	r2, [r4, #24]
 800b388:	429a      	cmp	r2, r3
 800b38a:	dc06      	bgt.n	800b39a <_puts_r+0xb6>
 800b38c:	290a      	cmp	r1, #10
 800b38e:	d004      	beq.n	800b39a <_puts_r+0xb6>
 800b390:	6823      	ldr	r3, [r4, #0]
 800b392:	1c5a      	adds	r2, r3, #1
 800b394:	6022      	str	r2, [r4, #0]
 800b396:	7019      	strb	r1, [r3, #0]
 800b398:	e7c5      	b.n	800b326 <_puts_r+0x42>
 800b39a:	4622      	mov	r2, r4
 800b39c:	4628      	mov	r0, r5
 800b39e:	f000 ff19 	bl	800c1d4 <__swbuf_r>
 800b3a2:	3001      	adds	r0, #1
 800b3a4:	d1bf      	bne.n	800b326 <_puts_r+0x42>
 800b3a6:	e7df      	b.n	800b368 <_puts_r+0x84>
 800b3a8:	6823      	ldr	r3, [r4, #0]
 800b3aa:	250a      	movs	r5, #10
 800b3ac:	1c5a      	adds	r2, r3, #1
 800b3ae:	6022      	str	r2, [r4, #0]
 800b3b0:	701d      	strb	r5, [r3, #0]
 800b3b2:	e7db      	b.n	800b36c <_puts_r+0x88>
 800b3b4:	0800f298 	.word	0x0800f298
 800b3b8:	0800f2b8 	.word	0x0800f2b8
 800b3bc:	0800f278 	.word	0x0800f278

0800b3c0 <puts>:
 800b3c0:	4b02      	ldr	r3, [pc, #8]	; (800b3cc <puts+0xc>)
 800b3c2:	4601      	mov	r1, r0
 800b3c4:	6818      	ldr	r0, [r3, #0]
 800b3c6:	f7ff bf8d 	b.w	800b2e4 <_puts_r>
 800b3ca:	bf00      	nop
 800b3cc:	20000010 	.word	0x20000010

0800b3d0 <cleanup_glue>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	460c      	mov	r4, r1
 800b3d4:	6809      	ldr	r1, [r1, #0]
 800b3d6:	4605      	mov	r5, r0
 800b3d8:	b109      	cbz	r1, 800b3de <cleanup_glue+0xe>
 800b3da:	f7ff fff9 	bl	800b3d0 <cleanup_glue>
 800b3de:	4621      	mov	r1, r4
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3e6:	f002 bffd 	b.w	800e3e4 <_free_r>
	...

0800b3ec <_reclaim_reent>:
 800b3ec:	4b2c      	ldr	r3, [pc, #176]	; (800b4a0 <_reclaim_reent+0xb4>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4283      	cmp	r3, r0
 800b3f2:	b570      	push	{r4, r5, r6, lr}
 800b3f4:	4604      	mov	r4, r0
 800b3f6:	d051      	beq.n	800b49c <_reclaim_reent+0xb0>
 800b3f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b3fa:	b143      	cbz	r3, 800b40e <_reclaim_reent+0x22>
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d14a      	bne.n	800b498 <_reclaim_reent+0xac>
 800b402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b404:	6819      	ldr	r1, [r3, #0]
 800b406:	b111      	cbz	r1, 800b40e <_reclaim_reent+0x22>
 800b408:	4620      	mov	r0, r4
 800b40a:	f002 ffeb 	bl	800e3e4 <_free_r>
 800b40e:	6961      	ldr	r1, [r4, #20]
 800b410:	b111      	cbz	r1, 800b418 <_reclaim_reent+0x2c>
 800b412:	4620      	mov	r0, r4
 800b414:	f002 ffe6 	bl	800e3e4 <_free_r>
 800b418:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b41a:	b111      	cbz	r1, 800b422 <_reclaim_reent+0x36>
 800b41c:	4620      	mov	r0, r4
 800b41e:	f002 ffe1 	bl	800e3e4 <_free_r>
 800b422:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b424:	b111      	cbz	r1, 800b42c <_reclaim_reent+0x40>
 800b426:	4620      	mov	r0, r4
 800b428:	f002 ffdc 	bl	800e3e4 <_free_r>
 800b42c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b42e:	b111      	cbz	r1, 800b436 <_reclaim_reent+0x4a>
 800b430:	4620      	mov	r0, r4
 800b432:	f002 ffd7 	bl	800e3e4 <_free_r>
 800b436:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b438:	b111      	cbz	r1, 800b440 <_reclaim_reent+0x54>
 800b43a:	4620      	mov	r0, r4
 800b43c:	f002 ffd2 	bl	800e3e4 <_free_r>
 800b440:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b442:	b111      	cbz	r1, 800b44a <_reclaim_reent+0x5e>
 800b444:	4620      	mov	r0, r4
 800b446:	f002 ffcd 	bl	800e3e4 <_free_r>
 800b44a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b44c:	b111      	cbz	r1, 800b454 <_reclaim_reent+0x68>
 800b44e:	4620      	mov	r0, r4
 800b450:	f002 ffc8 	bl	800e3e4 <_free_r>
 800b454:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b456:	b111      	cbz	r1, 800b45e <_reclaim_reent+0x72>
 800b458:	4620      	mov	r0, r4
 800b45a:	f002 ffc3 	bl	800e3e4 <_free_r>
 800b45e:	69a3      	ldr	r3, [r4, #24]
 800b460:	b1e3      	cbz	r3, 800b49c <_reclaim_reent+0xb0>
 800b462:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b464:	4620      	mov	r0, r4
 800b466:	4798      	blx	r3
 800b468:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b46a:	b1b9      	cbz	r1, 800b49c <_reclaim_reent+0xb0>
 800b46c:	4620      	mov	r0, r4
 800b46e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b472:	f7ff bfad 	b.w	800b3d0 <cleanup_glue>
 800b476:	5949      	ldr	r1, [r1, r5]
 800b478:	b941      	cbnz	r1, 800b48c <_reclaim_reent+0xa0>
 800b47a:	3504      	adds	r5, #4
 800b47c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b47e:	2d80      	cmp	r5, #128	; 0x80
 800b480:	68d9      	ldr	r1, [r3, #12]
 800b482:	d1f8      	bne.n	800b476 <_reclaim_reent+0x8a>
 800b484:	4620      	mov	r0, r4
 800b486:	f002 ffad 	bl	800e3e4 <_free_r>
 800b48a:	e7ba      	b.n	800b402 <_reclaim_reent+0x16>
 800b48c:	680e      	ldr	r6, [r1, #0]
 800b48e:	4620      	mov	r0, r4
 800b490:	f002 ffa8 	bl	800e3e4 <_free_r>
 800b494:	4631      	mov	r1, r6
 800b496:	e7ef      	b.n	800b478 <_reclaim_reent+0x8c>
 800b498:	2500      	movs	r5, #0
 800b49a:	e7ef      	b.n	800b47c <_reclaim_reent+0x90>
 800b49c:	bd70      	pop	{r4, r5, r6, pc}
 800b49e:	bf00      	nop
 800b4a0:	20000010 	.word	0x20000010

0800b4a4 <_sbrk_r>:
 800b4a4:	b538      	push	{r3, r4, r5, lr}
 800b4a6:	4d06      	ldr	r5, [pc, #24]	; (800b4c0 <_sbrk_r+0x1c>)
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	4608      	mov	r0, r1
 800b4ae:	602b      	str	r3, [r5, #0]
 800b4b0:	f7f7 f8c6 	bl	8002640 <_sbrk>
 800b4b4:	1c43      	adds	r3, r0, #1
 800b4b6:	d102      	bne.n	800b4be <_sbrk_r+0x1a>
 800b4b8:	682b      	ldr	r3, [r5, #0]
 800b4ba:	b103      	cbz	r3, 800b4be <_sbrk_r+0x1a>
 800b4bc:	6023      	str	r3, [r4, #0]
 800b4be:	bd38      	pop	{r3, r4, r5, pc}
 800b4c0:	20004908 	.word	0x20004908

0800b4c4 <__sread>:
 800b4c4:	b510      	push	{r4, lr}
 800b4c6:	460c      	mov	r4, r1
 800b4c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4cc:	f003 f930 	bl	800e730 <_read_r>
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	bfab      	itete	ge
 800b4d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b4d6:	89a3      	ldrhlt	r3, [r4, #12]
 800b4d8:	181b      	addge	r3, r3, r0
 800b4da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b4de:	bfac      	ite	ge
 800b4e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b4e2:	81a3      	strhlt	r3, [r4, #12]
 800b4e4:	bd10      	pop	{r4, pc}

0800b4e6 <__swrite>:
 800b4e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ea:	461f      	mov	r7, r3
 800b4ec:	898b      	ldrh	r3, [r1, #12]
 800b4ee:	05db      	lsls	r3, r3, #23
 800b4f0:	4605      	mov	r5, r0
 800b4f2:	460c      	mov	r4, r1
 800b4f4:	4616      	mov	r6, r2
 800b4f6:	d505      	bpl.n	800b504 <__swrite+0x1e>
 800b4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4fc:	2302      	movs	r3, #2
 800b4fe:	2200      	movs	r2, #0
 800b500:	f002 f9fa 	bl	800d8f8 <_lseek_r>
 800b504:	89a3      	ldrh	r3, [r4, #12]
 800b506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b50a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b50e:	81a3      	strh	r3, [r4, #12]
 800b510:	4632      	mov	r2, r6
 800b512:	463b      	mov	r3, r7
 800b514:	4628      	mov	r0, r5
 800b516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b51a:	f000 bead 	b.w	800c278 <_write_r>

0800b51e <__sseek>:
 800b51e:	b510      	push	{r4, lr}
 800b520:	460c      	mov	r4, r1
 800b522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b526:	f002 f9e7 	bl	800d8f8 <_lseek_r>
 800b52a:	1c43      	adds	r3, r0, #1
 800b52c:	89a3      	ldrh	r3, [r4, #12]
 800b52e:	bf15      	itete	ne
 800b530:	6560      	strne	r0, [r4, #84]	; 0x54
 800b532:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b536:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b53a:	81a3      	strheq	r3, [r4, #12]
 800b53c:	bf18      	it	ne
 800b53e:	81a3      	strhne	r3, [r4, #12]
 800b540:	bd10      	pop	{r4, pc}

0800b542 <__sclose>:
 800b542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b546:	f000 bf17 	b.w	800c378 <_close_r>

0800b54a <strncmp>:
 800b54a:	b510      	push	{r4, lr}
 800b54c:	b17a      	cbz	r2, 800b56e <strncmp+0x24>
 800b54e:	4603      	mov	r3, r0
 800b550:	3901      	subs	r1, #1
 800b552:	1884      	adds	r4, r0, r2
 800b554:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b558:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b55c:	4290      	cmp	r0, r2
 800b55e:	d101      	bne.n	800b564 <strncmp+0x1a>
 800b560:	42a3      	cmp	r3, r4
 800b562:	d101      	bne.n	800b568 <strncmp+0x1e>
 800b564:	1a80      	subs	r0, r0, r2
 800b566:	bd10      	pop	{r4, pc}
 800b568:	2800      	cmp	r0, #0
 800b56a:	d1f3      	bne.n	800b554 <strncmp+0xa>
 800b56c:	e7fa      	b.n	800b564 <strncmp+0x1a>
 800b56e:	4610      	mov	r0, r2
 800b570:	e7f9      	b.n	800b566 <strncmp+0x1c>

0800b572 <sulp>:
 800b572:	b570      	push	{r4, r5, r6, lr}
 800b574:	4604      	mov	r4, r0
 800b576:	460d      	mov	r5, r1
 800b578:	ec45 4b10 	vmov	d0, r4, r5
 800b57c:	4616      	mov	r6, r2
 800b57e:	f002 fdcb 	bl	800e118 <__ulp>
 800b582:	ec51 0b10 	vmov	r0, r1, d0
 800b586:	b17e      	cbz	r6, 800b5a8 <sulp+0x36>
 800b588:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b58c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b590:	2b00      	cmp	r3, #0
 800b592:	dd09      	ble.n	800b5a8 <sulp+0x36>
 800b594:	051b      	lsls	r3, r3, #20
 800b596:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b59a:	2400      	movs	r4, #0
 800b59c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b5a0:	4622      	mov	r2, r4
 800b5a2:	462b      	mov	r3, r5
 800b5a4:	f7f5 f830 	bl	8000608 <__aeabi_dmul>
 800b5a8:	bd70      	pop	{r4, r5, r6, pc}
 800b5aa:	0000      	movs	r0, r0
 800b5ac:	0000      	movs	r0, r0
	...

0800b5b0 <_strtod_l>:
 800b5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b4:	ed2d 8b02 	vpush	{d8}
 800b5b8:	b09d      	sub	sp, #116	; 0x74
 800b5ba:	461f      	mov	r7, r3
 800b5bc:	2300      	movs	r3, #0
 800b5be:	9318      	str	r3, [sp, #96]	; 0x60
 800b5c0:	4ba2      	ldr	r3, [pc, #648]	; (800b84c <_strtod_l+0x29c>)
 800b5c2:	9213      	str	r2, [sp, #76]	; 0x4c
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	9305      	str	r3, [sp, #20]
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	4688      	mov	r8, r1
 800b5ce:	f7f4 fe07 	bl	80001e0 <strlen>
 800b5d2:	f04f 0a00 	mov.w	sl, #0
 800b5d6:	4605      	mov	r5, r0
 800b5d8:	f04f 0b00 	mov.w	fp, #0
 800b5dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b5e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b5e2:	781a      	ldrb	r2, [r3, #0]
 800b5e4:	2a2b      	cmp	r2, #43	; 0x2b
 800b5e6:	d04e      	beq.n	800b686 <_strtod_l+0xd6>
 800b5e8:	d83b      	bhi.n	800b662 <_strtod_l+0xb2>
 800b5ea:	2a0d      	cmp	r2, #13
 800b5ec:	d834      	bhi.n	800b658 <_strtod_l+0xa8>
 800b5ee:	2a08      	cmp	r2, #8
 800b5f0:	d834      	bhi.n	800b65c <_strtod_l+0xac>
 800b5f2:	2a00      	cmp	r2, #0
 800b5f4:	d03e      	beq.n	800b674 <_strtod_l+0xc4>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	930a      	str	r3, [sp, #40]	; 0x28
 800b5fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b5fc:	7833      	ldrb	r3, [r6, #0]
 800b5fe:	2b30      	cmp	r3, #48	; 0x30
 800b600:	f040 80b0 	bne.w	800b764 <_strtod_l+0x1b4>
 800b604:	7873      	ldrb	r3, [r6, #1]
 800b606:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b60a:	2b58      	cmp	r3, #88	; 0x58
 800b60c:	d168      	bne.n	800b6e0 <_strtod_l+0x130>
 800b60e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b610:	9301      	str	r3, [sp, #4]
 800b612:	ab18      	add	r3, sp, #96	; 0x60
 800b614:	9702      	str	r7, [sp, #8]
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	4a8d      	ldr	r2, [pc, #564]	; (800b850 <_strtod_l+0x2a0>)
 800b61a:	ab19      	add	r3, sp, #100	; 0x64
 800b61c:	a917      	add	r1, sp, #92	; 0x5c
 800b61e:	4620      	mov	r0, r4
 800b620:	f001 fe5e 	bl	800d2e0 <__gethex>
 800b624:	f010 0707 	ands.w	r7, r0, #7
 800b628:	4605      	mov	r5, r0
 800b62a:	d005      	beq.n	800b638 <_strtod_l+0x88>
 800b62c:	2f06      	cmp	r7, #6
 800b62e:	d12c      	bne.n	800b68a <_strtod_l+0xda>
 800b630:	3601      	adds	r6, #1
 800b632:	2300      	movs	r3, #0
 800b634:	9617      	str	r6, [sp, #92]	; 0x5c
 800b636:	930a      	str	r3, [sp, #40]	; 0x28
 800b638:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	f040 8590 	bne.w	800c160 <_strtod_l+0xbb0>
 800b640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b642:	b1eb      	cbz	r3, 800b680 <_strtod_l+0xd0>
 800b644:	4652      	mov	r2, sl
 800b646:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b64a:	ec43 2b10 	vmov	d0, r2, r3
 800b64e:	b01d      	add	sp, #116	; 0x74
 800b650:	ecbd 8b02 	vpop	{d8}
 800b654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b658:	2a20      	cmp	r2, #32
 800b65a:	d1cc      	bne.n	800b5f6 <_strtod_l+0x46>
 800b65c:	3301      	adds	r3, #1
 800b65e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b660:	e7be      	b.n	800b5e0 <_strtod_l+0x30>
 800b662:	2a2d      	cmp	r2, #45	; 0x2d
 800b664:	d1c7      	bne.n	800b5f6 <_strtod_l+0x46>
 800b666:	2201      	movs	r2, #1
 800b668:	920a      	str	r2, [sp, #40]	; 0x28
 800b66a:	1c5a      	adds	r2, r3, #1
 800b66c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b66e:	785b      	ldrb	r3, [r3, #1]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d1c2      	bne.n	800b5fa <_strtod_l+0x4a>
 800b674:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b676:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f040 856e 	bne.w	800c15c <_strtod_l+0xbac>
 800b680:	4652      	mov	r2, sl
 800b682:	465b      	mov	r3, fp
 800b684:	e7e1      	b.n	800b64a <_strtod_l+0x9a>
 800b686:	2200      	movs	r2, #0
 800b688:	e7ee      	b.n	800b668 <_strtod_l+0xb8>
 800b68a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b68c:	b13a      	cbz	r2, 800b69e <_strtod_l+0xee>
 800b68e:	2135      	movs	r1, #53	; 0x35
 800b690:	a81a      	add	r0, sp, #104	; 0x68
 800b692:	f002 fe4c 	bl	800e32e <__copybits>
 800b696:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b698:	4620      	mov	r0, r4
 800b69a:	f002 fa0b 	bl	800dab4 <_Bfree>
 800b69e:	3f01      	subs	r7, #1
 800b6a0:	2f04      	cmp	r7, #4
 800b6a2:	d806      	bhi.n	800b6b2 <_strtod_l+0x102>
 800b6a4:	e8df f007 	tbb	[pc, r7]
 800b6a8:	1714030a 	.word	0x1714030a
 800b6ac:	0a          	.byte	0x0a
 800b6ad:	00          	.byte	0x00
 800b6ae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b6b2:	0728      	lsls	r0, r5, #28
 800b6b4:	d5c0      	bpl.n	800b638 <_strtod_l+0x88>
 800b6b6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b6ba:	e7bd      	b.n	800b638 <_strtod_l+0x88>
 800b6bc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b6c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b6c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b6c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b6ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b6ce:	e7f0      	b.n	800b6b2 <_strtod_l+0x102>
 800b6d0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b854 <_strtod_l+0x2a4>
 800b6d4:	e7ed      	b.n	800b6b2 <_strtod_l+0x102>
 800b6d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b6da:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b6de:	e7e8      	b.n	800b6b2 <_strtod_l+0x102>
 800b6e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6e2:	1c5a      	adds	r2, r3, #1
 800b6e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b6e6:	785b      	ldrb	r3, [r3, #1]
 800b6e8:	2b30      	cmp	r3, #48	; 0x30
 800b6ea:	d0f9      	beq.n	800b6e0 <_strtod_l+0x130>
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d0a3      	beq.n	800b638 <_strtod_l+0x88>
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	f04f 0900 	mov.w	r9, #0
 800b6f6:	9304      	str	r3, [sp, #16]
 800b6f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6fa:	9308      	str	r3, [sp, #32]
 800b6fc:	f8cd 901c 	str.w	r9, [sp, #28]
 800b700:	464f      	mov	r7, r9
 800b702:	220a      	movs	r2, #10
 800b704:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b706:	7806      	ldrb	r6, [r0, #0]
 800b708:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b70c:	b2d9      	uxtb	r1, r3
 800b70e:	2909      	cmp	r1, #9
 800b710:	d92a      	bls.n	800b768 <_strtod_l+0x1b8>
 800b712:	9905      	ldr	r1, [sp, #20]
 800b714:	462a      	mov	r2, r5
 800b716:	f7ff ff18 	bl	800b54a <strncmp>
 800b71a:	b398      	cbz	r0, 800b784 <_strtod_l+0x1d4>
 800b71c:	2000      	movs	r0, #0
 800b71e:	4632      	mov	r2, r6
 800b720:	463d      	mov	r5, r7
 800b722:	9005      	str	r0, [sp, #20]
 800b724:	4603      	mov	r3, r0
 800b726:	2a65      	cmp	r2, #101	; 0x65
 800b728:	d001      	beq.n	800b72e <_strtod_l+0x17e>
 800b72a:	2a45      	cmp	r2, #69	; 0x45
 800b72c:	d118      	bne.n	800b760 <_strtod_l+0x1b0>
 800b72e:	b91d      	cbnz	r5, 800b738 <_strtod_l+0x188>
 800b730:	9a04      	ldr	r2, [sp, #16]
 800b732:	4302      	orrs	r2, r0
 800b734:	d09e      	beq.n	800b674 <_strtod_l+0xc4>
 800b736:	2500      	movs	r5, #0
 800b738:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b73c:	f108 0201 	add.w	r2, r8, #1
 800b740:	9217      	str	r2, [sp, #92]	; 0x5c
 800b742:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b746:	2a2b      	cmp	r2, #43	; 0x2b
 800b748:	d075      	beq.n	800b836 <_strtod_l+0x286>
 800b74a:	2a2d      	cmp	r2, #45	; 0x2d
 800b74c:	d07b      	beq.n	800b846 <_strtod_l+0x296>
 800b74e:	f04f 0c00 	mov.w	ip, #0
 800b752:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b756:	2909      	cmp	r1, #9
 800b758:	f240 8082 	bls.w	800b860 <_strtod_l+0x2b0>
 800b75c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b760:	2600      	movs	r6, #0
 800b762:	e09d      	b.n	800b8a0 <_strtod_l+0x2f0>
 800b764:	2300      	movs	r3, #0
 800b766:	e7c4      	b.n	800b6f2 <_strtod_l+0x142>
 800b768:	2f08      	cmp	r7, #8
 800b76a:	bfd8      	it	le
 800b76c:	9907      	ldrle	r1, [sp, #28]
 800b76e:	f100 0001 	add.w	r0, r0, #1
 800b772:	bfda      	itte	le
 800b774:	fb02 3301 	mlale	r3, r2, r1, r3
 800b778:	9307      	strle	r3, [sp, #28]
 800b77a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b77e:	3701      	adds	r7, #1
 800b780:	9017      	str	r0, [sp, #92]	; 0x5c
 800b782:	e7bf      	b.n	800b704 <_strtod_l+0x154>
 800b784:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b786:	195a      	adds	r2, r3, r5
 800b788:	9217      	str	r2, [sp, #92]	; 0x5c
 800b78a:	5d5a      	ldrb	r2, [r3, r5]
 800b78c:	2f00      	cmp	r7, #0
 800b78e:	d037      	beq.n	800b800 <_strtod_l+0x250>
 800b790:	9005      	str	r0, [sp, #20]
 800b792:	463d      	mov	r5, r7
 800b794:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b798:	2b09      	cmp	r3, #9
 800b79a:	d912      	bls.n	800b7c2 <_strtod_l+0x212>
 800b79c:	2301      	movs	r3, #1
 800b79e:	e7c2      	b.n	800b726 <_strtod_l+0x176>
 800b7a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7a2:	1c5a      	adds	r2, r3, #1
 800b7a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b7a6:	785a      	ldrb	r2, [r3, #1]
 800b7a8:	3001      	adds	r0, #1
 800b7aa:	2a30      	cmp	r2, #48	; 0x30
 800b7ac:	d0f8      	beq.n	800b7a0 <_strtod_l+0x1f0>
 800b7ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b7b2:	2b08      	cmp	r3, #8
 800b7b4:	f200 84d9 	bhi.w	800c16a <_strtod_l+0xbba>
 800b7b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7ba:	9005      	str	r0, [sp, #20]
 800b7bc:	2000      	movs	r0, #0
 800b7be:	9308      	str	r3, [sp, #32]
 800b7c0:	4605      	mov	r5, r0
 800b7c2:	3a30      	subs	r2, #48	; 0x30
 800b7c4:	f100 0301 	add.w	r3, r0, #1
 800b7c8:	d014      	beq.n	800b7f4 <_strtod_l+0x244>
 800b7ca:	9905      	ldr	r1, [sp, #20]
 800b7cc:	4419      	add	r1, r3
 800b7ce:	9105      	str	r1, [sp, #20]
 800b7d0:	462b      	mov	r3, r5
 800b7d2:	eb00 0e05 	add.w	lr, r0, r5
 800b7d6:	210a      	movs	r1, #10
 800b7d8:	4573      	cmp	r3, lr
 800b7da:	d113      	bne.n	800b804 <_strtod_l+0x254>
 800b7dc:	182b      	adds	r3, r5, r0
 800b7de:	2b08      	cmp	r3, #8
 800b7e0:	f105 0501 	add.w	r5, r5, #1
 800b7e4:	4405      	add	r5, r0
 800b7e6:	dc1c      	bgt.n	800b822 <_strtod_l+0x272>
 800b7e8:	9907      	ldr	r1, [sp, #28]
 800b7ea:	230a      	movs	r3, #10
 800b7ec:	fb03 2301 	mla	r3, r3, r1, r2
 800b7f0:	9307      	str	r3, [sp, #28]
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b7f6:	1c51      	adds	r1, r2, #1
 800b7f8:	9117      	str	r1, [sp, #92]	; 0x5c
 800b7fa:	7852      	ldrb	r2, [r2, #1]
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	e7c9      	b.n	800b794 <_strtod_l+0x1e4>
 800b800:	4638      	mov	r0, r7
 800b802:	e7d2      	b.n	800b7aa <_strtod_l+0x1fa>
 800b804:	2b08      	cmp	r3, #8
 800b806:	dc04      	bgt.n	800b812 <_strtod_l+0x262>
 800b808:	9e07      	ldr	r6, [sp, #28]
 800b80a:	434e      	muls	r6, r1
 800b80c:	9607      	str	r6, [sp, #28]
 800b80e:	3301      	adds	r3, #1
 800b810:	e7e2      	b.n	800b7d8 <_strtod_l+0x228>
 800b812:	f103 0c01 	add.w	ip, r3, #1
 800b816:	f1bc 0f10 	cmp.w	ip, #16
 800b81a:	bfd8      	it	le
 800b81c:	fb01 f909 	mulle.w	r9, r1, r9
 800b820:	e7f5      	b.n	800b80e <_strtod_l+0x25e>
 800b822:	2d10      	cmp	r5, #16
 800b824:	bfdc      	itt	le
 800b826:	230a      	movle	r3, #10
 800b828:	fb03 2909 	mlale	r9, r3, r9, r2
 800b82c:	e7e1      	b.n	800b7f2 <_strtod_l+0x242>
 800b82e:	2300      	movs	r3, #0
 800b830:	9305      	str	r3, [sp, #20]
 800b832:	2301      	movs	r3, #1
 800b834:	e77c      	b.n	800b730 <_strtod_l+0x180>
 800b836:	f04f 0c00 	mov.w	ip, #0
 800b83a:	f108 0202 	add.w	r2, r8, #2
 800b83e:	9217      	str	r2, [sp, #92]	; 0x5c
 800b840:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b844:	e785      	b.n	800b752 <_strtod_l+0x1a2>
 800b846:	f04f 0c01 	mov.w	ip, #1
 800b84a:	e7f6      	b.n	800b83a <_strtod_l+0x28a>
 800b84c:	0800f458 	.word	0x0800f458
 800b850:	0800f310 	.word	0x0800f310
 800b854:	7ff00000 	.word	0x7ff00000
 800b858:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b85a:	1c51      	adds	r1, r2, #1
 800b85c:	9117      	str	r1, [sp, #92]	; 0x5c
 800b85e:	7852      	ldrb	r2, [r2, #1]
 800b860:	2a30      	cmp	r2, #48	; 0x30
 800b862:	d0f9      	beq.n	800b858 <_strtod_l+0x2a8>
 800b864:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b868:	2908      	cmp	r1, #8
 800b86a:	f63f af79 	bhi.w	800b760 <_strtod_l+0x1b0>
 800b86e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b872:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b874:	9206      	str	r2, [sp, #24]
 800b876:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b878:	1c51      	adds	r1, r2, #1
 800b87a:	9117      	str	r1, [sp, #92]	; 0x5c
 800b87c:	7852      	ldrb	r2, [r2, #1]
 800b87e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b882:	2e09      	cmp	r6, #9
 800b884:	d937      	bls.n	800b8f6 <_strtod_l+0x346>
 800b886:	9e06      	ldr	r6, [sp, #24]
 800b888:	1b89      	subs	r1, r1, r6
 800b88a:	2908      	cmp	r1, #8
 800b88c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b890:	dc02      	bgt.n	800b898 <_strtod_l+0x2e8>
 800b892:	4576      	cmp	r6, lr
 800b894:	bfa8      	it	ge
 800b896:	4676      	movge	r6, lr
 800b898:	f1bc 0f00 	cmp.w	ip, #0
 800b89c:	d000      	beq.n	800b8a0 <_strtod_l+0x2f0>
 800b89e:	4276      	negs	r6, r6
 800b8a0:	2d00      	cmp	r5, #0
 800b8a2:	d14d      	bne.n	800b940 <_strtod_l+0x390>
 800b8a4:	9904      	ldr	r1, [sp, #16]
 800b8a6:	4301      	orrs	r1, r0
 800b8a8:	f47f aec6 	bne.w	800b638 <_strtod_l+0x88>
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f47f aee1 	bne.w	800b674 <_strtod_l+0xc4>
 800b8b2:	2a69      	cmp	r2, #105	; 0x69
 800b8b4:	d027      	beq.n	800b906 <_strtod_l+0x356>
 800b8b6:	dc24      	bgt.n	800b902 <_strtod_l+0x352>
 800b8b8:	2a49      	cmp	r2, #73	; 0x49
 800b8ba:	d024      	beq.n	800b906 <_strtod_l+0x356>
 800b8bc:	2a4e      	cmp	r2, #78	; 0x4e
 800b8be:	f47f aed9 	bne.w	800b674 <_strtod_l+0xc4>
 800b8c2:	499f      	ldr	r1, [pc, #636]	; (800bb40 <_strtod_l+0x590>)
 800b8c4:	a817      	add	r0, sp, #92	; 0x5c
 800b8c6:	f001 ff63 	bl	800d790 <__match>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	f43f aed2 	beq.w	800b674 <_strtod_l+0xc4>
 800b8d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	2b28      	cmp	r3, #40	; 0x28
 800b8d6:	d12d      	bne.n	800b934 <_strtod_l+0x384>
 800b8d8:	499a      	ldr	r1, [pc, #616]	; (800bb44 <_strtod_l+0x594>)
 800b8da:	aa1a      	add	r2, sp, #104	; 0x68
 800b8dc:	a817      	add	r0, sp, #92	; 0x5c
 800b8de:	f001 ff6b 	bl	800d7b8 <__hexnan>
 800b8e2:	2805      	cmp	r0, #5
 800b8e4:	d126      	bne.n	800b934 <_strtod_l+0x384>
 800b8e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b8e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b8ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b8f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b8f4:	e6a0      	b.n	800b638 <_strtod_l+0x88>
 800b8f6:	210a      	movs	r1, #10
 800b8f8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b8fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b900:	e7b9      	b.n	800b876 <_strtod_l+0x2c6>
 800b902:	2a6e      	cmp	r2, #110	; 0x6e
 800b904:	e7db      	b.n	800b8be <_strtod_l+0x30e>
 800b906:	4990      	ldr	r1, [pc, #576]	; (800bb48 <_strtod_l+0x598>)
 800b908:	a817      	add	r0, sp, #92	; 0x5c
 800b90a:	f001 ff41 	bl	800d790 <__match>
 800b90e:	2800      	cmp	r0, #0
 800b910:	f43f aeb0 	beq.w	800b674 <_strtod_l+0xc4>
 800b914:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b916:	498d      	ldr	r1, [pc, #564]	; (800bb4c <_strtod_l+0x59c>)
 800b918:	3b01      	subs	r3, #1
 800b91a:	a817      	add	r0, sp, #92	; 0x5c
 800b91c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b91e:	f001 ff37 	bl	800d790 <__match>
 800b922:	b910      	cbnz	r0, 800b92a <_strtod_l+0x37a>
 800b924:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b926:	3301      	adds	r3, #1
 800b928:	9317      	str	r3, [sp, #92]	; 0x5c
 800b92a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800bb5c <_strtod_l+0x5ac>
 800b92e:	f04f 0a00 	mov.w	sl, #0
 800b932:	e681      	b.n	800b638 <_strtod_l+0x88>
 800b934:	4886      	ldr	r0, [pc, #536]	; (800bb50 <_strtod_l+0x5a0>)
 800b936:	f002 ff0f 	bl	800e758 <nan>
 800b93a:	ec5b ab10 	vmov	sl, fp, d0
 800b93e:	e67b      	b.n	800b638 <_strtod_l+0x88>
 800b940:	9b05      	ldr	r3, [sp, #20]
 800b942:	9807      	ldr	r0, [sp, #28]
 800b944:	1af3      	subs	r3, r6, r3
 800b946:	2f00      	cmp	r7, #0
 800b948:	bf08      	it	eq
 800b94a:	462f      	moveq	r7, r5
 800b94c:	2d10      	cmp	r5, #16
 800b94e:	9306      	str	r3, [sp, #24]
 800b950:	46a8      	mov	r8, r5
 800b952:	bfa8      	it	ge
 800b954:	f04f 0810 	movge.w	r8, #16
 800b958:	f7f4 fddc 	bl	8000514 <__aeabi_ui2d>
 800b95c:	2d09      	cmp	r5, #9
 800b95e:	4682      	mov	sl, r0
 800b960:	468b      	mov	fp, r1
 800b962:	dd13      	ble.n	800b98c <_strtod_l+0x3dc>
 800b964:	4b7b      	ldr	r3, [pc, #492]	; (800bb54 <_strtod_l+0x5a4>)
 800b966:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b96a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b96e:	f7f4 fe4b 	bl	8000608 <__aeabi_dmul>
 800b972:	4682      	mov	sl, r0
 800b974:	4648      	mov	r0, r9
 800b976:	468b      	mov	fp, r1
 800b978:	f7f4 fdcc 	bl	8000514 <__aeabi_ui2d>
 800b97c:	4602      	mov	r2, r0
 800b97e:	460b      	mov	r3, r1
 800b980:	4650      	mov	r0, sl
 800b982:	4659      	mov	r1, fp
 800b984:	f7f4 fc8a 	bl	800029c <__adddf3>
 800b988:	4682      	mov	sl, r0
 800b98a:	468b      	mov	fp, r1
 800b98c:	2d0f      	cmp	r5, #15
 800b98e:	dc38      	bgt.n	800ba02 <_strtod_l+0x452>
 800b990:	9b06      	ldr	r3, [sp, #24]
 800b992:	2b00      	cmp	r3, #0
 800b994:	f43f ae50 	beq.w	800b638 <_strtod_l+0x88>
 800b998:	dd24      	ble.n	800b9e4 <_strtod_l+0x434>
 800b99a:	2b16      	cmp	r3, #22
 800b99c:	dc0b      	bgt.n	800b9b6 <_strtod_l+0x406>
 800b99e:	496d      	ldr	r1, [pc, #436]	; (800bb54 <_strtod_l+0x5a4>)
 800b9a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b9a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9a8:	4652      	mov	r2, sl
 800b9aa:	465b      	mov	r3, fp
 800b9ac:	f7f4 fe2c 	bl	8000608 <__aeabi_dmul>
 800b9b0:	4682      	mov	sl, r0
 800b9b2:	468b      	mov	fp, r1
 800b9b4:	e640      	b.n	800b638 <_strtod_l+0x88>
 800b9b6:	9a06      	ldr	r2, [sp, #24]
 800b9b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	db20      	blt.n	800ba02 <_strtod_l+0x452>
 800b9c0:	4c64      	ldr	r4, [pc, #400]	; (800bb54 <_strtod_l+0x5a4>)
 800b9c2:	f1c5 050f 	rsb	r5, r5, #15
 800b9c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b9ca:	4652      	mov	r2, sl
 800b9cc:	465b      	mov	r3, fp
 800b9ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9d2:	f7f4 fe19 	bl	8000608 <__aeabi_dmul>
 800b9d6:	9b06      	ldr	r3, [sp, #24]
 800b9d8:	1b5d      	subs	r5, r3, r5
 800b9da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b9de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b9e2:	e7e3      	b.n	800b9ac <_strtod_l+0x3fc>
 800b9e4:	9b06      	ldr	r3, [sp, #24]
 800b9e6:	3316      	adds	r3, #22
 800b9e8:	db0b      	blt.n	800ba02 <_strtod_l+0x452>
 800b9ea:	9b05      	ldr	r3, [sp, #20]
 800b9ec:	1b9e      	subs	r6, r3, r6
 800b9ee:	4b59      	ldr	r3, [pc, #356]	; (800bb54 <_strtod_l+0x5a4>)
 800b9f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b9f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b9f8:	4650      	mov	r0, sl
 800b9fa:	4659      	mov	r1, fp
 800b9fc:	f7f4 ff2e 	bl	800085c <__aeabi_ddiv>
 800ba00:	e7d6      	b.n	800b9b0 <_strtod_l+0x400>
 800ba02:	9b06      	ldr	r3, [sp, #24]
 800ba04:	eba5 0808 	sub.w	r8, r5, r8
 800ba08:	4498      	add	r8, r3
 800ba0a:	f1b8 0f00 	cmp.w	r8, #0
 800ba0e:	dd74      	ble.n	800bafa <_strtod_l+0x54a>
 800ba10:	f018 030f 	ands.w	r3, r8, #15
 800ba14:	d00a      	beq.n	800ba2c <_strtod_l+0x47c>
 800ba16:	494f      	ldr	r1, [pc, #316]	; (800bb54 <_strtod_l+0x5a4>)
 800ba18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba1c:	4652      	mov	r2, sl
 800ba1e:	465b      	mov	r3, fp
 800ba20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba24:	f7f4 fdf0 	bl	8000608 <__aeabi_dmul>
 800ba28:	4682      	mov	sl, r0
 800ba2a:	468b      	mov	fp, r1
 800ba2c:	f038 080f 	bics.w	r8, r8, #15
 800ba30:	d04f      	beq.n	800bad2 <_strtod_l+0x522>
 800ba32:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ba36:	dd22      	ble.n	800ba7e <_strtod_l+0x4ce>
 800ba38:	2500      	movs	r5, #0
 800ba3a:	462e      	mov	r6, r5
 800ba3c:	9507      	str	r5, [sp, #28]
 800ba3e:	9505      	str	r5, [sp, #20]
 800ba40:	2322      	movs	r3, #34	; 0x22
 800ba42:	f8df b118 	ldr.w	fp, [pc, #280]	; 800bb5c <_strtod_l+0x5ac>
 800ba46:	6023      	str	r3, [r4, #0]
 800ba48:	f04f 0a00 	mov.w	sl, #0
 800ba4c:	9b07      	ldr	r3, [sp, #28]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	f43f adf2 	beq.w	800b638 <_strtod_l+0x88>
 800ba54:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ba56:	4620      	mov	r0, r4
 800ba58:	f002 f82c 	bl	800dab4 <_Bfree>
 800ba5c:	9905      	ldr	r1, [sp, #20]
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f002 f828 	bl	800dab4 <_Bfree>
 800ba64:	4631      	mov	r1, r6
 800ba66:	4620      	mov	r0, r4
 800ba68:	f002 f824 	bl	800dab4 <_Bfree>
 800ba6c:	9907      	ldr	r1, [sp, #28]
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f002 f820 	bl	800dab4 <_Bfree>
 800ba74:	4629      	mov	r1, r5
 800ba76:	4620      	mov	r0, r4
 800ba78:	f002 f81c 	bl	800dab4 <_Bfree>
 800ba7c:	e5dc      	b.n	800b638 <_strtod_l+0x88>
 800ba7e:	4b36      	ldr	r3, [pc, #216]	; (800bb58 <_strtod_l+0x5a8>)
 800ba80:	9304      	str	r3, [sp, #16]
 800ba82:	2300      	movs	r3, #0
 800ba84:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ba88:	4650      	mov	r0, sl
 800ba8a:	4659      	mov	r1, fp
 800ba8c:	4699      	mov	r9, r3
 800ba8e:	f1b8 0f01 	cmp.w	r8, #1
 800ba92:	dc21      	bgt.n	800bad8 <_strtod_l+0x528>
 800ba94:	b10b      	cbz	r3, 800ba9a <_strtod_l+0x4ea>
 800ba96:	4682      	mov	sl, r0
 800ba98:	468b      	mov	fp, r1
 800ba9a:	4b2f      	ldr	r3, [pc, #188]	; (800bb58 <_strtod_l+0x5a8>)
 800ba9c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800baa0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800baa4:	4652      	mov	r2, sl
 800baa6:	465b      	mov	r3, fp
 800baa8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800baac:	f7f4 fdac 	bl	8000608 <__aeabi_dmul>
 800bab0:	4b2a      	ldr	r3, [pc, #168]	; (800bb5c <_strtod_l+0x5ac>)
 800bab2:	460a      	mov	r2, r1
 800bab4:	400b      	ands	r3, r1
 800bab6:	492a      	ldr	r1, [pc, #168]	; (800bb60 <_strtod_l+0x5b0>)
 800bab8:	428b      	cmp	r3, r1
 800baba:	4682      	mov	sl, r0
 800babc:	d8bc      	bhi.n	800ba38 <_strtod_l+0x488>
 800babe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bac2:	428b      	cmp	r3, r1
 800bac4:	bf86      	itte	hi
 800bac6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800bb64 <_strtod_l+0x5b4>
 800baca:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800bace:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bad2:	2300      	movs	r3, #0
 800bad4:	9304      	str	r3, [sp, #16]
 800bad6:	e084      	b.n	800bbe2 <_strtod_l+0x632>
 800bad8:	f018 0f01 	tst.w	r8, #1
 800badc:	d005      	beq.n	800baea <_strtod_l+0x53a>
 800bade:	9b04      	ldr	r3, [sp, #16]
 800bae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae4:	f7f4 fd90 	bl	8000608 <__aeabi_dmul>
 800bae8:	2301      	movs	r3, #1
 800baea:	9a04      	ldr	r2, [sp, #16]
 800baec:	3208      	adds	r2, #8
 800baee:	f109 0901 	add.w	r9, r9, #1
 800baf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800baf6:	9204      	str	r2, [sp, #16]
 800baf8:	e7c9      	b.n	800ba8e <_strtod_l+0x4de>
 800bafa:	d0ea      	beq.n	800bad2 <_strtod_l+0x522>
 800bafc:	f1c8 0800 	rsb	r8, r8, #0
 800bb00:	f018 020f 	ands.w	r2, r8, #15
 800bb04:	d00a      	beq.n	800bb1c <_strtod_l+0x56c>
 800bb06:	4b13      	ldr	r3, [pc, #76]	; (800bb54 <_strtod_l+0x5a4>)
 800bb08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb0c:	4650      	mov	r0, sl
 800bb0e:	4659      	mov	r1, fp
 800bb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb14:	f7f4 fea2 	bl	800085c <__aeabi_ddiv>
 800bb18:	4682      	mov	sl, r0
 800bb1a:	468b      	mov	fp, r1
 800bb1c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bb20:	d0d7      	beq.n	800bad2 <_strtod_l+0x522>
 800bb22:	f1b8 0f1f 	cmp.w	r8, #31
 800bb26:	dd1f      	ble.n	800bb68 <_strtod_l+0x5b8>
 800bb28:	2500      	movs	r5, #0
 800bb2a:	462e      	mov	r6, r5
 800bb2c:	9507      	str	r5, [sp, #28]
 800bb2e:	9505      	str	r5, [sp, #20]
 800bb30:	2322      	movs	r3, #34	; 0x22
 800bb32:	f04f 0a00 	mov.w	sl, #0
 800bb36:	f04f 0b00 	mov.w	fp, #0
 800bb3a:	6023      	str	r3, [r4, #0]
 800bb3c:	e786      	b.n	800ba4c <_strtod_l+0x49c>
 800bb3e:	bf00      	nop
 800bb40:	0800f2e9 	.word	0x0800f2e9
 800bb44:	0800f324 	.word	0x0800f324
 800bb48:	0800f2e1 	.word	0x0800f2e1
 800bb4c:	0800f363 	.word	0x0800f363
 800bb50:	0800f610 	.word	0x0800f610
 800bb54:	0800f4f0 	.word	0x0800f4f0
 800bb58:	0800f4c8 	.word	0x0800f4c8
 800bb5c:	7ff00000 	.word	0x7ff00000
 800bb60:	7ca00000 	.word	0x7ca00000
 800bb64:	7fefffff 	.word	0x7fefffff
 800bb68:	f018 0310 	ands.w	r3, r8, #16
 800bb6c:	bf18      	it	ne
 800bb6e:	236a      	movne	r3, #106	; 0x6a
 800bb70:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800bf20 <_strtod_l+0x970>
 800bb74:	9304      	str	r3, [sp, #16]
 800bb76:	4650      	mov	r0, sl
 800bb78:	4659      	mov	r1, fp
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	f018 0f01 	tst.w	r8, #1
 800bb80:	d004      	beq.n	800bb8c <_strtod_l+0x5dc>
 800bb82:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bb86:	f7f4 fd3f 	bl	8000608 <__aeabi_dmul>
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bb90:	f109 0908 	add.w	r9, r9, #8
 800bb94:	d1f2      	bne.n	800bb7c <_strtod_l+0x5cc>
 800bb96:	b10b      	cbz	r3, 800bb9c <_strtod_l+0x5ec>
 800bb98:	4682      	mov	sl, r0
 800bb9a:	468b      	mov	fp, r1
 800bb9c:	9b04      	ldr	r3, [sp, #16]
 800bb9e:	b1c3      	cbz	r3, 800bbd2 <_strtod_l+0x622>
 800bba0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bba4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	4659      	mov	r1, fp
 800bbac:	dd11      	ble.n	800bbd2 <_strtod_l+0x622>
 800bbae:	2b1f      	cmp	r3, #31
 800bbb0:	f340 8124 	ble.w	800bdfc <_strtod_l+0x84c>
 800bbb4:	2b34      	cmp	r3, #52	; 0x34
 800bbb6:	bfde      	ittt	le
 800bbb8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bbbc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800bbc0:	fa03 f202 	lslle.w	r2, r3, r2
 800bbc4:	f04f 0a00 	mov.w	sl, #0
 800bbc8:	bfcc      	ite	gt
 800bbca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bbce:	ea02 0b01 	andle.w	fp, r2, r1
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	4650      	mov	r0, sl
 800bbd8:	4659      	mov	r1, fp
 800bbda:	f7f4 ff7d 	bl	8000ad8 <__aeabi_dcmpeq>
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	d1a2      	bne.n	800bb28 <_strtod_l+0x578>
 800bbe2:	9b07      	ldr	r3, [sp, #28]
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	9908      	ldr	r1, [sp, #32]
 800bbe8:	462b      	mov	r3, r5
 800bbea:	463a      	mov	r2, r7
 800bbec:	4620      	mov	r0, r4
 800bbee:	f001 ffc9 	bl	800db84 <__s2b>
 800bbf2:	9007      	str	r0, [sp, #28]
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	f43f af1f 	beq.w	800ba38 <_strtod_l+0x488>
 800bbfa:	9b05      	ldr	r3, [sp, #20]
 800bbfc:	1b9e      	subs	r6, r3, r6
 800bbfe:	9b06      	ldr	r3, [sp, #24]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	bfb4      	ite	lt
 800bc04:	4633      	movlt	r3, r6
 800bc06:	2300      	movge	r3, #0
 800bc08:	930c      	str	r3, [sp, #48]	; 0x30
 800bc0a:	9b06      	ldr	r3, [sp, #24]
 800bc0c:	2500      	movs	r5, #0
 800bc0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bc12:	9312      	str	r3, [sp, #72]	; 0x48
 800bc14:	462e      	mov	r6, r5
 800bc16:	9b07      	ldr	r3, [sp, #28]
 800bc18:	4620      	mov	r0, r4
 800bc1a:	6859      	ldr	r1, [r3, #4]
 800bc1c:	f001 ff0a 	bl	800da34 <_Balloc>
 800bc20:	9005      	str	r0, [sp, #20]
 800bc22:	2800      	cmp	r0, #0
 800bc24:	f43f af0c 	beq.w	800ba40 <_strtod_l+0x490>
 800bc28:	9b07      	ldr	r3, [sp, #28]
 800bc2a:	691a      	ldr	r2, [r3, #16]
 800bc2c:	3202      	adds	r2, #2
 800bc2e:	f103 010c 	add.w	r1, r3, #12
 800bc32:	0092      	lsls	r2, r2, #2
 800bc34:	300c      	adds	r0, #12
 800bc36:	f7fe fe28 	bl	800a88a <memcpy>
 800bc3a:	ec4b ab10 	vmov	d0, sl, fp
 800bc3e:	aa1a      	add	r2, sp, #104	; 0x68
 800bc40:	a919      	add	r1, sp, #100	; 0x64
 800bc42:	4620      	mov	r0, r4
 800bc44:	f002 fae4 	bl	800e210 <__d2b>
 800bc48:	ec4b ab18 	vmov	d8, sl, fp
 800bc4c:	9018      	str	r0, [sp, #96]	; 0x60
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	f43f aef6 	beq.w	800ba40 <_strtod_l+0x490>
 800bc54:	2101      	movs	r1, #1
 800bc56:	4620      	mov	r0, r4
 800bc58:	f002 f82e 	bl	800dcb8 <__i2b>
 800bc5c:	4606      	mov	r6, r0
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	f43f aeee 	beq.w	800ba40 <_strtod_l+0x490>
 800bc64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bc66:	9904      	ldr	r1, [sp, #16]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	bfab      	itete	ge
 800bc6c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bc6e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bc70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bc72:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800bc76:	bfac      	ite	ge
 800bc78:	eb03 0902 	addge.w	r9, r3, r2
 800bc7c:	1ad7      	sublt	r7, r2, r3
 800bc7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bc80:	eba3 0801 	sub.w	r8, r3, r1
 800bc84:	4490      	add	r8, r2
 800bc86:	4ba1      	ldr	r3, [pc, #644]	; (800bf0c <_strtod_l+0x95c>)
 800bc88:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bc8c:	4598      	cmp	r8, r3
 800bc8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bc92:	f280 80c7 	bge.w	800be24 <_strtod_l+0x874>
 800bc96:	eba3 0308 	sub.w	r3, r3, r8
 800bc9a:	2b1f      	cmp	r3, #31
 800bc9c:	eba2 0203 	sub.w	r2, r2, r3
 800bca0:	f04f 0101 	mov.w	r1, #1
 800bca4:	f300 80b1 	bgt.w	800be0a <_strtod_l+0x85a>
 800bca8:	fa01 f303 	lsl.w	r3, r1, r3
 800bcac:	930d      	str	r3, [sp, #52]	; 0x34
 800bcae:	2300      	movs	r3, #0
 800bcb0:	9308      	str	r3, [sp, #32]
 800bcb2:	eb09 0802 	add.w	r8, r9, r2
 800bcb6:	9b04      	ldr	r3, [sp, #16]
 800bcb8:	45c1      	cmp	r9, r8
 800bcba:	4417      	add	r7, r2
 800bcbc:	441f      	add	r7, r3
 800bcbe:	464b      	mov	r3, r9
 800bcc0:	bfa8      	it	ge
 800bcc2:	4643      	movge	r3, r8
 800bcc4:	42bb      	cmp	r3, r7
 800bcc6:	bfa8      	it	ge
 800bcc8:	463b      	movge	r3, r7
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	bfc2      	ittt	gt
 800bcce:	eba8 0803 	subgt.w	r8, r8, r3
 800bcd2:	1aff      	subgt	r7, r7, r3
 800bcd4:	eba9 0903 	subgt.w	r9, r9, r3
 800bcd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	dd17      	ble.n	800bd0e <_strtod_l+0x75e>
 800bcde:	4631      	mov	r1, r6
 800bce0:	461a      	mov	r2, r3
 800bce2:	4620      	mov	r0, r4
 800bce4:	f002 f8a8 	bl	800de38 <__pow5mult>
 800bce8:	4606      	mov	r6, r0
 800bcea:	2800      	cmp	r0, #0
 800bcec:	f43f aea8 	beq.w	800ba40 <_strtod_l+0x490>
 800bcf0:	4601      	mov	r1, r0
 800bcf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	f001 fff5 	bl	800dce4 <__multiply>
 800bcfa:	900b      	str	r0, [sp, #44]	; 0x2c
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	f43f ae9f 	beq.w	800ba40 <_strtod_l+0x490>
 800bd02:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd04:	4620      	mov	r0, r4
 800bd06:	f001 fed5 	bl	800dab4 <_Bfree>
 800bd0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd0c:	9318      	str	r3, [sp, #96]	; 0x60
 800bd0e:	f1b8 0f00 	cmp.w	r8, #0
 800bd12:	f300 808c 	bgt.w	800be2e <_strtod_l+0x87e>
 800bd16:	9b06      	ldr	r3, [sp, #24]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	dd08      	ble.n	800bd2e <_strtod_l+0x77e>
 800bd1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd1e:	9905      	ldr	r1, [sp, #20]
 800bd20:	4620      	mov	r0, r4
 800bd22:	f002 f889 	bl	800de38 <__pow5mult>
 800bd26:	9005      	str	r0, [sp, #20]
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	f43f ae89 	beq.w	800ba40 <_strtod_l+0x490>
 800bd2e:	2f00      	cmp	r7, #0
 800bd30:	dd08      	ble.n	800bd44 <_strtod_l+0x794>
 800bd32:	9905      	ldr	r1, [sp, #20]
 800bd34:	463a      	mov	r2, r7
 800bd36:	4620      	mov	r0, r4
 800bd38:	f002 f8d8 	bl	800deec <__lshift>
 800bd3c:	9005      	str	r0, [sp, #20]
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	f43f ae7e 	beq.w	800ba40 <_strtod_l+0x490>
 800bd44:	f1b9 0f00 	cmp.w	r9, #0
 800bd48:	dd08      	ble.n	800bd5c <_strtod_l+0x7ac>
 800bd4a:	4631      	mov	r1, r6
 800bd4c:	464a      	mov	r2, r9
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f002 f8cc 	bl	800deec <__lshift>
 800bd54:	4606      	mov	r6, r0
 800bd56:	2800      	cmp	r0, #0
 800bd58:	f43f ae72 	beq.w	800ba40 <_strtod_l+0x490>
 800bd5c:	9a05      	ldr	r2, [sp, #20]
 800bd5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd60:	4620      	mov	r0, r4
 800bd62:	f002 f94f 	bl	800e004 <__mdiff>
 800bd66:	4605      	mov	r5, r0
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	f43f ae69 	beq.w	800ba40 <_strtod_l+0x490>
 800bd6e:	68c3      	ldr	r3, [r0, #12]
 800bd70:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd72:	2300      	movs	r3, #0
 800bd74:	60c3      	str	r3, [r0, #12]
 800bd76:	4631      	mov	r1, r6
 800bd78:	f002 f928 	bl	800dfcc <__mcmp>
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	da60      	bge.n	800be42 <_strtod_l+0x892>
 800bd80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd82:	ea53 030a 	orrs.w	r3, r3, sl
 800bd86:	f040 8082 	bne.w	800be8e <_strtod_l+0x8de>
 800bd8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d17d      	bne.n	800be8e <_strtod_l+0x8de>
 800bd92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bd96:	0d1b      	lsrs	r3, r3, #20
 800bd98:	051b      	lsls	r3, r3, #20
 800bd9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bd9e:	d976      	bls.n	800be8e <_strtod_l+0x8de>
 800bda0:	696b      	ldr	r3, [r5, #20]
 800bda2:	b913      	cbnz	r3, 800bdaa <_strtod_l+0x7fa>
 800bda4:	692b      	ldr	r3, [r5, #16]
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	dd71      	ble.n	800be8e <_strtod_l+0x8de>
 800bdaa:	4629      	mov	r1, r5
 800bdac:	2201      	movs	r2, #1
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f002 f89c 	bl	800deec <__lshift>
 800bdb4:	4631      	mov	r1, r6
 800bdb6:	4605      	mov	r5, r0
 800bdb8:	f002 f908 	bl	800dfcc <__mcmp>
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	dd66      	ble.n	800be8e <_strtod_l+0x8de>
 800bdc0:	9904      	ldr	r1, [sp, #16]
 800bdc2:	4a53      	ldr	r2, [pc, #332]	; (800bf10 <_strtod_l+0x960>)
 800bdc4:	465b      	mov	r3, fp
 800bdc6:	2900      	cmp	r1, #0
 800bdc8:	f000 8081 	beq.w	800bece <_strtod_l+0x91e>
 800bdcc:	ea02 010b 	and.w	r1, r2, fp
 800bdd0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bdd4:	dc7b      	bgt.n	800bece <_strtod_l+0x91e>
 800bdd6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bdda:	f77f aea9 	ble.w	800bb30 <_strtod_l+0x580>
 800bdde:	4b4d      	ldr	r3, [pc, #308]	; (800bf14 <_strtod_l+0x964>)
 800bde0:	4650      	mov	r0, sl
 800bde2:	4659      	mov	r1, fp
 800bde4:	2200      	movs	r2, #0
 800bde6:	f7f4 fc0f 	bl	8000608 <__aeabi_dmul>
 800bdea:	460b      	mov	r3, r1
 800bdec:	4303      	orrs	r3, r0
 800bdee:	bf08      	it	eq
 800bdf0:	2322      	moveq	r3, #34	; 0x22
 800bdf2:	4682      	mov	sl, r0
 800bdf4:	468b      	mov	fp, r1
 800bdf6:	bf08      	it	eq
 800bdf8:	6023      	streq	r3, [r4, #0]
 800bdfa:	e62b      	b.n	800ba54 <_strtod_l+0x4a4>
 800bdfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be00:	fa02 f303 	lsl.w	r3, r2, r3
 800be04:	ea03 0a0a 	and.w	sl, r3, sl
 800be08:	e6e3      	b.n	800bbd2 <_strtod_l+0x622>
 800be0a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800be0e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800be12:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800be16:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800be1a:	fa01 f308 	lsl.w	r3, r1, r8
 800be1e:	9308      	str	r3, [sp, #32]
 800be20:	910d      	str	r1, [sp, #52]	; 0x34
 800be22:	e746      	b.n	800bcb2 <_strtod_l+0x702>
 800be24:	2300      	movs	r3, #0
 800be26:	9308      	str	r3, [sp, #32]
 800be28:	2301      	movs	r3, #1
 800be2a:	930d      	str	r3, [sp, #52]	; 0x34
 800be2c:	e741      	b.n	800bcb2 <_strtod_l+0x702>
 800be2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800be30:	4642      	mov	r2, r8
 800be32:	4620      	mov	r0, r4
 800be34:	f002 f85a 	bl	800deec <__lshift>
 800be38:	9018      	str	r0, [sp, #96]	; 0x60
 800be3a:	2800      	cmp	r0, #0
 800be3c:	f47f af6b 	bne.w	800bd16 <_strtod_l+0x766>
 800be40:	e5fe      	b.n	800ba40 <_strtod_l+0x490>
 800be42:	465f      	mov	r7, fp
 800be44:	d16e      	bne.n	800bf24 <_strtod_l+0x974>
 800be46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be4c:	b342      	cbz	r2, 800bea0 <_strtod_l+0x8f0>
 800be4e:	4a32      	ldr	r2, [pc, #200]	; (800bf18 <_strtod_l+0x968>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d128      	bne.n	800bea6 <_strtod_l+0x8f6>
 800be54:	9b04      	ldr	r3, [sp, #16]
 800be56:	4651      	mov	r1, sl
 800be58:	b1eb      	cbz	r3, 800be96 <_strtod_l+0x8e6>
 800be5a:	4b2d      	ldr	r3, [pc, #180]	; (800bf10 <_strtod_l+0x960>)
 800be5c:	403b      	ands	r3, r7
 800be5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800be62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be66:	d819      	bhi.n	800be9c <_strtod_l+0x8ec>
 800be68:	0d1b      	lsrs	r3, r3, #20
 800be6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800be6e:	fa02 f303 	lsl.w	r3, r2, r3
 800be72:	4299      	cmp	r1, r3
 800be74:	d117      	bne.n	800bea6 <_strtod_l+0x8f6>
 800be76:	4b29      	ldr	r3, [pc, #164]	; (800bf1c <_strtod_l+0x96c>)
 800be78:	429f      	cmp	r7, r3
 800be7a:	d102      	bne.n	800be82 <_strtod_l+0x8d2>
 800be7c:	3101      	adds	r1, #1
 800be7e:	f43f addf 	beq.w	800ba40 <_strtod_l+0x490>
 800be82:	4b23      	ldr	r3, [pc, #140]	; (800bf10 <_strtod_l+0x960>)
 800be84:	403b      	ands	r3, r7
 800be86:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800be8a:	f04f 0a00 	mov.w	sl, #0
 800be8e:	9b04      	ldr	r3, [sp, #16]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1a4      	bne.n	800bdde <_strtod_l+0x82e>
 800be94:	e5de      	b.n	800ba54 <_strtod_l+0x4a4>
 800be96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be9a:	e7ea      	b.n	800be72 <_strtod_l+0x8c2>
 800be9c:	4613      	mov	r3, r2
 800be9e:	e7e8      	b.n	800be72 <_strtod_l+0x8c2>
 800bea0:	ea53 030a 	orrs.w	r3, r3, sl
 800bea4:	d08c      	beq.n	800bdc0 <_strtod_l+0x810>
 800bea6:	9b08      	ldr	r3, [sp, #32]
 800bea8:	b1db      	cbz	r3, 800bee2 <_strtod_l+0x932>
 800beaa:	423b      	tst	r3, r7
 800beac:	d0ef      	beq.n	800be8e <_strtod_l+0x8de>
 800beae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800beb0:	9a04      	ldr	r2, [sp, #16]
 800beb2:	4650      	mov	r0, sl
 800beb4:	4659      	mov	r1, fp
 800beb6:	b1c3      	cbz	r3, 800beea <_strtod_l+0x93a>
 800beb8:	f7ff fb5b 	bl	800b572 <sulp>
 800bebc:	4602      	mov	r2, r0
 800bebe:	460b      	mov	r3, r1
 800bec0:	ec51 0b18 	vmov	r0, r1, d8
 800bec4:	f7f4 f9ea 	bl	800029c <__adddf3>
 800bec8:	4682      	mov	sl, r0
 800beca:	468b      	mov	fp, r1
 800becc:	e7df      	b.n	800be8e <_strtod_l+0x8de>
 800bece:	4013      	ands	r3, r2
 800bed0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bed4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bed8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bedc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bee0:	e7d5      	b.n	800be8e <_strtod_l+0x8de>
 800bee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bee4:	ea13 0f0a 	tst.w	r3, sl
 800bee8:	e7e0      	b.n	800beac <_strtod_l+0x8fc>
 800beea:	f7ff fb42 	bl	800b572 <sulp>
 800beee:	4602      	mov	r2, r0
 800bef0:	460b      	mov	r3, r1
 800bef2:	ec51 0b18 	vmov	r0, r1, d8
 800bef6:	f7f4 f9cf 	bl	8000298 <__aeabi_dsub>
 800befa:	2200      	movs	r2, #0
 800befc:	2300      	movs	r3, #0
 800befe:	4682      	mov	sl, r0
 800bf00:	468b      	mov	fp, r1
 800bf02:	f7f4 fde9 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf06:	2800      	cmp	r0, #0
 800bf08:	d0c1      	beq.n	800be8e <_strtod_l+0x8de>
 800bf0a:	e611      	b.n	800bb30 <_strtod_l+0x580>
 800bf0c:	fffffc02 	.word	0xfffffc02
 800bf10:	7ff00000 	.word	0x7ff00000
 800bf14:	39500000 	.word	0x39500000
 800bf18:	000fffff 	.word	0x000fffff
 800bf1c:	7fefffff 	.word	0x7fefffff
 800bf20:	0800f338 	.word	0x0800f338
 800bf24:	4631      	mov	r1, r6
 800bf26:	4628      	mov	r0, r5
 800bf28:	f002 f9ce 	bl	800e2c8 <__ratio>
 800bf2c:	ec59 8b10 	vmov	r8, r9, d0
 800bf30:	ee10 0a10 	vmov	r0, s0
 800bf34:	2200      	movs	r2, #0
 800bf36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf3a:	4649      	mov	r1, r9
 800bf3c:	f7f4 fde0 	bl	8000b00 <__aeabi_dcmple>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	d07a      	beq.n	800c03a <_strtod_l+0xa8a>
 800bf44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d04a      	beq.n	800bfe0 <_strtod_l+0xa30>
 800bf4a:	4b95      	ldr	r3, [pc, #596]	; (800c1a0 <_strtod_l+0xbf0>)
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bf52:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c1a0 <_strtod_l+0xbf0>
 800bf56:	f04f 0800 	mov.w	r8, #0
 800bf5a:	4b92      	ldr	r3, [pc, #584]	; (800c1a4 <_strtod_l+0xbf4>)
 800bf5c:	403b      	ands	r3, r7
 800bf5e:	930d      	str	r3, [sp, #52]	; 0x34
 800bf60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf62:	4b91      	ldr	r3, [pc, #580]	; (800c1a8 <_strtod_l+0xbf8>)
 800bf64:	429a      	cmp	r2, r3
 800bf66:	f040 80b0 	bne.w	800c0ca <_strtod_l+0xb1a>
 800bf6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf6e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bf72:	ec4b ab10 	vmov	d0, sl, fp
 800bf76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bf7a:	f002 f8cd 	bl	800e118 <__ulp>
 800bf7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf82:	ec53 2b10 	vmov	r2, r3, d0
 800bf86:	f7f4 fb3f 	bl	8000608 <__aeabi_dmul>
 800bf8a:	4652      	mov	r2, sl
 800bf8c:	465b      	mov	r3, fp
 800bf8e:	f7f4 f985 	bl	800029c <__adddf3>
 800bf92:	460b      	mov	r3, r1
 800bf94:	4983      	ldr	r1, [pc, #524]	; (800c1a4 <_strtod_l+0xbf4>)
 800bf96:	4a85      	ldr	r2, [pc, #532]	; (800c1ac <_strtod_l+0xbfc>)
 800bf98:	4019      	ands	r1, r3
 800bf9a:	4291      	cmp	r1, r2
 800bf9c:	4682      	mov	sl, r0
 800bf9e:	d960      	bls.n	800c062 <_strtod_l+0xab2>
 800bfa0:	ee18 3a90 	vmov	r3, s17
 800bfa4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d104      	bne.n	800bfb6 <_strtod_l+0xa06>
 800bfac:	ee18 3a10 	vmov	r3, s16
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	f43f ad45 	beq.w	800ba40 <_strtod_l+0x490>
 800bfb6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c1b8 <_strtod_l+0xc08>
 800bfba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bfbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f001 fd77 	bl	800dab4 <_Bfree>
 800bfc6:	9905      	ldr	r1, [sp, #20]
 800bfc8:	4620      	mov	r0, r4
 800bfca:	f001 fd73 	bl	800dab4 <_Bfree>
 800bfce:	4631      	mov	r1, r6
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	f001 fd6f 	bl	800dab4 <_Bfree>
 800bfd6:	4629      	mov	r1, r5
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f001 fd6b 	bl	800dab4 <_Bfree>
 800bfde:	e61a      	b.n	800bc16 <_strtod_l+0x666>
 800bfe0:	f1ba 0f00 	cmp.w	sl, #0
 800bfe4:	d11b      	bne.n	800c01e <_strtod_l+0xa6e>
 800bfe6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bfea:	b9f3      	cbnz	r3, 800c02a <_strtod_l+0xa7a>
 800bfec:	4b6c      	ldr	r3, [pc, #432]	; (800c1a0 <_strtod_l+0xbf0>)
 800bfee:	2200      	movs	r2, #0
 800bff0:	4640      	mov	r0, r8
 800bff2:	4649      	mov	r1, r9
 800bff4:	f7f4 fd7a 	bl	8000aec <__aeabi_dcmplt>
 800bff8:	b9d0      	cbnz	r0, 800c030 <_strtod_l+0xa80>
 800bffa:	4640      	mov	r0, r8
 800bffc:	4649      	mov	r1, r9
 800bffe:	4b6c      	ldr	r3, [pc, #432]	; (800c1b0 <_strtod_l+0xc00>)
 800c000:	2200      	movs	r2, #0
 800c002:	f7f4 fb01 	bl	8000608 <__aeabi_dmul>
 800c006:	4680      	mov	r8, r0
 800c008:	4689      	mov	r9, r1
 800c00a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c00e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c012:	9315      	str	r3, [sp, #84]	; 0x54
 800c014:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c018:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c01c:	e79d      	b.n	800bf5a <_strtod_l+0x9aa>
 800c01e:	f1ba 0f01 	cmp.w	sl, #1
 800c022:	d102      	bne.n	800c02a <_strtod_l+0xa7a>
 800c024:	2f00      	cmp	r7, #0
 800c026:	f43f ad83 	beq.w	800bb30 <_strtod_l+0x580>
 800c02a:	4b62      	ldr	r3, [pc, #392]	; (800c1b4 <_strtod_l+0xc04>)
 800c02c:	2200      	movs	r2, #0
 800c02e:	e78e      	b.n	800bf4e <_strtod_l+0x99e>
 800c030:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c1b0 <_strtod_l+0xc00>
 800c034:	f04f 0800 	mov.w	r8, #0
 800c038:	e7e7      	b.n	800c00a <_strtod_l+0xa5a>
 800c03a:	4b5d      	ldr	r3, [pc, #372]	; (800c1b0 <_strtod_l+0xc00>)
 800c03c:	4640      	mov	r0, r8
 800c03e:	4649      	mov	r1, r9
 800c040:	2200      	movs	r2, #0
 800c042:	f7f4 fae1 	bl	8000608 <__aeabi_dmul>
 800c046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c048:	4680      	mov	r8, r0
 800c04a:	4689      	mov	r9, r1
 800c04c:	b933      	cbnz	r3, 800c05c <_strtod_l+0xaac>
 800c04e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c052:	900e      	str	r0, [sp, #56]	; 0x38
 800c054:	930f      	str	r3, [sp, #60]	; 0x3c
 800c056:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c05a:	e7dd      	b.n	800c018 <_strtod_l+0xa68>
 800c05c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c060:	e7f9      	b.n	800c056 <_strtod_l+0xaa6>
 800c062:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c066:	9b04      	ldr	r3, [sp, #16]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d1a8      	bne.n	800bfbe <_strtod_l+0xa0e>
 800c06c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c070:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c072:	0d1b      	lsrs	r3, r3, #20
 800c074:	051b      	lsls	r3, r3, #20
 800c076:	429a      	cmp	r2, r3
 800c078:	d1a1      	bne.n	800bfbe <_strtod_l+0xa0e>
 800c07a:	4640      	mov	r0, r8
 800c07c:	4649      	mov	r1, r9
 800c07e:	f7f4 fe23 	bl	8000cc8 <__aeabi_d2lz>
 800c082:	f7f4 fa93 	bl	80005ac <__aeabi_l2d>
 800c086:	4602      	mov	r2, r0
 800c088:	460b      	mov	r3, r1
 800c08a:	4640      	mov	r0, r8
 800c08c:	4649      	mov	r1, r9
 800c08e:	f7f4 f903 	bl	8000298 <__aeabi_dsub>
 800c092:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c094:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c098:	ea43 030a 	orr.w	r3, r3, sl
 800c09c:	4313      	orrs	r3, r2
 800c09e:	4680      	mov	r8, r0
 800c0a0:	4689      	mov	r9, r1
 800c0a2:	d055      	beq.n	800c150 <_strtod_l+0xba0>
 800c0a4:	a336      	add	r3, pc, #216	; (adr r3, 800c180 <_strtod_l+0xbd0>)
 800c0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0aa:	f7f4 fd1f 	bl	8000aec <__aeabi_dcmplt>
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	f47f acd0 	bne.w	800ba54 <_strtod_l+0x4a4>
 800c0b4:	a334      	add	r3, pc, #208	; (adr r3, 800c188 <_strtod_l+0xbd8>)
 800c0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ba:	4640      	mov	r0, r8
 800c0bc:	4649      	mov	r1, r9
 800c0be:	f7f4 fd33 	bl	8000b28 <__aeabi_dcmpgt>
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	f43f af7b 	beq.w	800bfbe <_strtod_l+0xa0e>
 800c0c8:	e4c4      	b.n	800ba54 <_strtod_l+0x4a4>
 800c0ca:	9b04      	ldr	r3, [sp, #16]
 800c0cc:	b333      	cbz	r3, 800c11c <_strtod_l+0xb6c>
 800c0ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c0d4:	d822      	bhi.n	800c11c <_strtod_l+0xb6c>
 800c0d6:	a32e      	add	r3, pc, #184	; (adr r3, 800c190 <_strtod_l+0xbe0>)
 800c0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0dc:	4640      	mov	r0, r8
 800c0de:	4649      	mov	r1, r9
 800c0e0:	f7f4 fd0e 	bl	8000b00 <__aeabi_dcmple>
 800c0e4:	b1a0      	cbz	r0, 800c110 <_strtod_l+0xb60>
 800c0e6:	4649      	mov	r1, r9
 800c0e8:	4640      	mov	r0, r8
 800c0ea:	f7f4 fd65 	bl	8000bb8 <__aeabi_d2uiz>
 800c0ee:	2801      	cmp	r0, #1
 800c0f0:	bf38      	it	cc
 800c0f2:	2001      	movcc	r0, #1
 800c0f4:	f7f4 fa0e 	bl	8000514 <__aeabi_ui2d>
 800c0f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0fa:	4680      	mov	r8, r0
 800c0fc:	4689      	mov	r9, r1
 800c0fe:	bb23      	cbnz	r3, 800c14a <_strtod_l+0xb9a>
 800c100:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c104:	9010      	str	r0, [sp, #64]	; 0x40
 800c106:	9311      	str	r3, [sp, #68]	; 0x44
 800c108:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c10c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c112:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c114:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c118:	1a9b      	subs	r3, r3, r2
 800c11a:	9309      	str	r3, [sp, #36]	; 0x24
 800c11c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c120:	eeb0 0a48 	vmov.f32	s0, s16
 800c124:	eef0 0a68 	vmov.f32	s1, s17
 800c128:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c12c:	f001 fff4 	bl	800e118 <__ulp>
 800c130:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c134:	ec53 2b10 	vmov	r2, r3, d0
 800c138:	f7f4 fa66 	bl	8000608 <__aeabi_dmul>
 800c13c:	ec53 2b18 	vmov	r2, r3, d8
 800c140:	f7f4 f8ac 	bl	800029c <__adddf3>
 800c144:	4682      	mov	sl, r0
 800c146:	468b      	mov	fp, r1
 800c148:	e78d      	b.n	800c066 <_strtod_l+0xab6>
 800c14a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c14e:	e7db      	b.n	800c108 <_strtod_l+0xb58>
 800c150:	a311      	add	r3, pc, #68	; (adr r3, 800c198 <_strtod_l+0xbe8>)
 800c152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c156:	f7f4 fcc9 	bl	8000aec <__aeabi_dcmplt>
 800c15a:	e7b2      	b.n	800c0c2 <_strtod_l+0xb12>
 800c15c:	2300      	movs	r3, #0
 800c15e:	930a      	str	r3, [sp, #40]	; 0x28
 800c160:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c162:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c164:	6013      	str	r3, [r2, #0]
 800c166:	f7ff ba6b 	b.w	800b640 <_strtod_l+0x90>
 800c16a:	2a65      	cmp	r2, #101	; 0x65
 800c16c:	f43f ab5f 	beq.w	800b82e <_strtod_l+0x27e>
 800c170:	2a45      	cmp	r2, #69	; 0x45
 800c172:	f43f ab5c 	beq.w	800b82e <_strtod_l+0x27e>
 800c176:	2301      	movs	r3, #1
 800c178:	f7ff bb94 	b.w	800b8a4 <_strtod_l+0x2f4>
 800c17c:	f3af 8000 	nop.w
 800c180:	94a03595 	.word	0x94a03595
 800c184:	3fdfffff 	.word	0x3fdfffff
 800c188:	35afe535 	.word	0x35afe535
 800c18c:	3fe00000 	.word	0x3fe00000
 800c190:	ffc00000 	.word	0xffc00000
 800c194:	41dfffff 	.word	0x41dfffff
 800c198:	94a03595 	.word	0x94a03595
 800c19c:	3fcfffff 	.word	0x3fcfffff
 800c1a0:	3ff00000 	.word	0x3ff00000
 800c1a4:	7ff00000 	.word	0x7ff00000
 800c1a8:	7fe00000 	.word	0x7fe00000
 800c1ac:	7c9fffff 	.word	0x7c9fffff
 800c1b0:	3fe00000 	.word	0x3fe00000
 800c1b4:	bff00000 	.word	0xbff00000
 800c1b8:	7fefffff 	.word	0x7fefffff

0800c1bc <strtod>:
 800c1bc:	460a      	mov	r2, r1
 800c1be:	4601      	mov	r1, r0
 800c1c0:	4802      	ldr	r0, [pc, #8]	; (800c1cc <strtod+0x10>)
 800c1c2:	4b03      	ldr	r3, [pc, #12]	; (800c1d0 <strtod+0x14>)
 800c1c4:	6800      	ldr	r0, [r0, #0]
 800c1c6:	f7ff b9f3 	b.w	800b5b0 <_strtod_l>
 800c1ca:	bf00      	nop
 800c1cc:	20000010 	.word	0x20000010
 800c1d0:	20000078 	.word	0x20000078

0800c1d4 <__swbuf_r>:
 800c1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1d6:	460e      	mov	r6, r1
 800c1d8:	4614      	mov	r4, r2
 800c1da:	4605      	mov	r5, r0
 800c1dc:	b118      	cbz	r0, 800c1e6 <__swbuf_r+0x12>
 800c1de:	6983      	ldr	r3, [r0, #24]
 800c1e0:	b90b      	cbnz	r3, 800c1e6 <__swbuf_r+0x12>
 800c1e2:	f7fe fa8d 	bl	800a700 <__sinit>
 800c1e6:	4b21      	ldr	r3, [pc, #132]	; (800c26c <__swbuf_r+0x98>)
 800c1e8:	429c      	cmp	r4, r3
 800c1ea:	d12b      	bne.n	800c244 <__swbuf_r+0x70>
 800c1ec:	686c      	ldr	r4, [r5, #4]
 800c1ee:	69a3      	ldr	r3, [r4, #24]
 800c1f0:	60a3      	str	r3, [r4, #8]
 800c1f2:	89a3      	ldrh	r3, [r4, #12]
 800c1f4:	071a      	lsls	r2, r3, #28
 800c1f6:	d52f      	bpl.n	800c258 <__swbuf_r+0x84>
 800c1f8:	6923      	ldr	r3, [r4, #16]
 800c1fa:	b36b      	cbz	r3, 800c258 <__swbuf_r+0x84>
 800c1fc:	6923      	ldr	r3, [r4, #16]
 800c1fe:	6820      	ldr	r0, [r4, #0]
 800c200:	1ac0      	subs	r0, r0, r3
 800c202:	6963      	ldr	r3, [r4, #20]
 800c204:	b2f6      	uxtb	r6, r6
 800c206:	4283      	cmp	r3, r0
 800c208:	4637      	mov	r7, r6
 800c20a:	dc04      	bgt.n	800c216 <__swbuf_r+0x42>
 800c20c:	4621      	mov	r1, r4
 800c20e:	4628      	mov	r0, r5
 800c210:	f000 ffc2 	bl	800d198 <_fflush_r>
 800c214:	bb30      	cbnz	r0, 800c264 <__swbuf_r+0x90>
 800c216:	68a3      	ldr	r3, [r4, #8]
 800c218:	3b01      	subs	r3, #1
 800c21a:	60a3      	str	r3, [r4, #8]
 800c21c:	6823      	ldr	r3, [r4, #0]
 800c21e:	1c5a      	adds	r2, r3, #1
 800c220:	6022      	str	r2, [r4, #0]
 800c222:	701e      	strb	r6, [r3, #0]
 800c224:	6963      	ldr	r3, [r4, #20]
 800c226:	3001      	adds	r0, #1
 800c228:	4283      	cmp	r3, r0
 800c22a:	d004      	beq.n	800c236 <__swbuf_r+0x62>
 800c22c:	89a3      	ldrh	r3, [r4, #12]
 800c22e:	07db      	lsls	r3, r3, #31
 800c230:	d506      	bpl.n	800c240 <__swbuf_r+0x6c>
 800c232:	2e0a      	cmp	r6, #10
 800c234:	d104      	bne.n	800c240 <__swbuf_r+0x6c>
 800c236:	4621      	mov	r1, r4
 800c238:	4628      	mov	r0, r5
 800c23a:	f000 ffad 	bl	800d198 <_fflush_r>
 800c23e:	b988      	cbnz	r0, 800c264 <__swbuf_r+0x90>
 800c240:	4638      	mov	r0, r7
 800c242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c244:	4b0a      	ldr	r3, [pc, #40]	; (800c270 <__swbuf_r+0x9c>)
 800c246:	429c      	cmp	r4, r3
 800c248:	d101      	bne.n	800c24e <__swbuf_r+0x7a>
 800c24a:	68ac      	ldr	r4, [r5, #8]
 800c24c:	e7cf      	b.n	800c1ee <__swbuf_r+0x1a>
 800c24e:	4b09      	ldr	r3, [pc, #36]	; (800c274 <__swbuf_r+0xa0>)
 800c250:	429c      	cmp	r4, r3
 800c252:	bf08      	it	eq
 800c254:	68ec      	ldreq	r4, [r5, #12]
 800c256:	e7ca      	b.n	800c1ee <__swbuf_r+0x1a>
 800c258:	4621      	mov	r1, r4
 800c25a:	4628      	mov	r0, r5
 800c25c:	f000 f81e 	bl	800c29c <__swsetup_r>
 800c260:	2800      	cmp	r0, #0
 800c262:	d0cb      	beq.n	800c1fc <__swbuf_r+0x28>
 800c264:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c268:	e7ea      	b.n	800c240 <__swbuf_r+0x6c>
 800c26a:	bf00      	nop
 800c26c:	0800f298 	.word	0x0800f298
 800c270:	0800f2b8 	.word	0x0800f2b8
 800c274:	0800f278 	.word	0x0800f278

0800c278 <_write_r>:
 800c278:	b538      	push	{r3, r4, r5, lr}
 800c27a:	4d07      	ldr	r5, [pc, #28]	; (800c298 <_write_r+0x20>)
 800c27c:	4604      	mov	r4, r0
 800c27e:	4608      	mov	r0, r1
 800c280:	4611      	mov	r1, r2
 800c282:	2200      	movs	r2, #0
 800c284:	602a      	str	r2, [r5, #0]
 800c286:	461a      	mov	r2, r3
 800c288:	f7f6 f989 	bl	800259e <_write>
 800c28c:	1c43      	adds	r3, r0, #1
 800c28e:	d102      	bne.n	800c296 <_write_r+0x1e>
 800c290:	682b      	ldr	r3, [r5, #0]
 800c292:	b103      	cbz	r3, 800c296 <_write_r+0x1e>
 800c294:	6023      	str	r3, [r4, #0]
 800c296:	bd38      	pop	{r3, r4, r5, pc}
 800c298:	20004908 	.word	0x20004908

0800c29c <__swsetup_r>:
 800c29c:	4b32      	ldr	r3, [pc, #200]	; (800c368 <__swsetup_r+0xcc>)
 800c29e:	b570      	push	{r4, r5, r6, lr}
 800c2a0:	681d      	ldr	r5, [r3, #0]
 800c2a2:	4606      	mov	r6, r0
 800c2a4:	460c      	mov	r4, r1
 800c2a6:	b125      	cbz	r5, 800c2b2 <__swsetup_r+0x16>
 800c2a8:	69ab      	ldr	r3, [r5, #24]
 800c2aa:	b913      	cbnz	r3, 800c2b2 <__swsetup_r+0x16>
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	f7fe fa27 	bl	800a700 <__sinit>
 800c2b2:	4b2e      	ldr	r3, [pc, #184]	; (800c36c <__swsetup_r+0xd0>)
 800c2b4:	429c      	cmp	r4, r3
 800c2b6:	d10f      	bne.n	800c2d8 <__swsetup_r+0x3c>
 800c2b8:	686c      	ldr	r4, [r5, #4]
 800c2ba:	89a3      	ldrh	r3, [r4, #12]
 800c2bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2c0:	0719      	lsls	r1, r3, #28
 800c2c2:	d42c      	bmi.n	800c31e <__swsetup_r+0x82>
 800c2c4:	06dd      	lsls	r5, r3, #27
 800c2c6:	d411      	bmi.n	800c2ec <__swsetup_r+0x50>
 800c2c8:	2309      	movs	r3, #9
 800c2ca:	6033      	str	r3, [r6, #0]
 800c2cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c2d0:	81a3      	strh	r3, [r4, #12]
 800c2d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2d6:	e03e      	b.n	800c356 <__swsetup_r+0xba>
 800c2d8:	4b25      	ldr	r3, [pc, #148]	; (800c370 <__swsetup_r+0xd4>)
 800c2da:	429c      	cmp	r4, r3
 800c2dc:	d101      	bne.n	800c2e2 <__swsetup_r+0x46>
 800c2de:	68ac      	ldr	r4, [r5, #8]
 800c2e0:	e7eb      	b.n	800c2ba <__swsetup_r+0x1e>
 800c2e2:	4b24      	ldr	r3, [pc, #144]	; (800c374 <__swsetup_r+0xd8>)
 800c2e4:	429c      	cmp	r4, r3
 800c2e6:	bf08      	it	eq
 800c2e8:	68ec      	ldreq	r4, [r5, #12]
 800c2ea:	e7e6      	b.n	800c2ba <__swsetup_r+0x1e>
 800c2ec:	0758      	lsls	r0, r3, #29
 800c2ee:	d512      	bpl.n	800c316 <__swsetup_r+0x7a>
 800c2f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2f2:	b141      	cbz	r1, 800c306 <__swsetup_r+0x6a>
 800c2f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2f8:	4299      	cmp	r1, r3
 800c2fa:	d002      	beq.n	800c302 <__swsetup_r+0x66>
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	f002 f871 	bl	800e3e4 <_free_r>
 800c302:	2300      	movs	r3, #0
 800c304:	6363      	str	r3, [r4, #52]	; 0x34
 800c306:	89a3      	ldrh	r3, [r4, #12]
 800c308:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c30c:	81a3      	strh	r3, [r4, #12]
 800c30e:	2300      	movs	r3, #0
 800c310:	6063      	str	r3, [r4, #4]
 800c312:	6923      	ldr	r3, [r4, #16]
 800c314:	6023      	str	r3, [r4, #0]
 800c316:	89a3      	ldrh	r3, [r4, #12]
 800c318:	f043 0308 	orr.w	r3, r3, #8
 800c31c:	81a3      	strh	r3, [r4, #12]
 800c31e:	6923      	ldr	r3, [r4, #16]
 800c320:	b94b      	cbnz	r3, 800c336 <__swsetup_r+0x9a>
 800c322:	89a3      	ldrh	r3, [r4, #12]
 800c324:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c32c:	d003      	beq.n	800c336 <__swsetup_r+0x9a>
 800c32e:	4621      	mov	r1, r4
 800c330:	4630      	mov	r0, r6
 800c332:	f001 fb19 	bl	800d968 <__smakebuf_r>
 800c336:	89a0      	ldrh	r0, [r4, #12]
 800c338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c33c:	f010 0301 	ands.w	r3, r0, #1
 800c340:	d00a      	beq.n	800c358 <__swsetup_r+0xbc>
 800c342:	2300      	movs	r3, #0
 800c344:	60a3      	str	r3, [r4, #8]
 800c346:	6963      	ldr	r3, [r4, #20]
 800c348:	425b      	negs	r3, r3
 800c34a:	61a3      	str	r3, [r4, #24]
 800c34c:	6923      	ldr	r3, [r4, #16]
 800c34e:	b943      	cbnz	r3, 800c362 <__swsetup_r+0xc6>
 800c350:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c354:	d1ba      	bne.n	800c2cc <__swsetup_r+0x30>
 800c356:	bd70      	pop	{r4, r5, r6, pc}
 800c358:	0781      	lsls	r1, r0, #30
 800c35a:	bf58      	it	pl
 800c35c:	6963      	ldrpl	r3, [r4, #20]
 800c35e:	60a3      	str	r3, [r4, #8]
 800c360:	e7f4      	b.n	800c34c <__swsetup_r+0xb0>
 800c362:	2000      	movs	r0, #0
 800c364:	e7f7      	b.n	800c356 <__swsetup_r+0xba>
 800c366:	bf00      	nop
 800c368:	20000010 	.word	0x20000010
 800c36c:	0800f298 	.word	0x0800f298
 800c370:	0800f2b8 	.word	0x0800f2b8
 800c374:	0800f278 	.word	0x0800f278

0800c378 <_close_r>:
 800c378:	b538      	push	{r3, r4, r5, lr}
 800c37a:	4d06      	ldr	r5, [pc, #24]	; (800c394 <_close_r+0x1c>)
 800c37c:	2300      	movs	r3, #0
 800c37e:	4604      	mov	r4, r0
 800c380:	4608      	mov	r0, r1
 800c382:	602b      	str	r3, [r5, #0]
 800c384:	f7f6 f927 	bl	80025d6 <_close>
 800c388:	1c43      	adds	r3, r0, #1
 800c38a:	d102      	bne.n	800c392 <_close_r+0x1a>
 800c38c:	682b      	ldr	r3, [r5, #0]
 800c38e:	b103      	cbz	r3, 800c392 <_close_r+0x1a>
 800c390:	6023      	str	r3, [r4, #0]
 800c392:	bd38      	pop	{r3, r4, r5, pc}
 800c394:	20004908 	.word	0x20004908

0800c398 <quorem>:
 800c398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c39c:	6903      	ldr	r3, [r0, #16]
 800c39e:	690c      	ldr	r4, [r1, #16]
 800c3a0:	42a3      	cmp	r3, r4
 800c3a2:	4607      	mov	r7, r0
 800c3a4:	f2c0 8081 	blt.w	800c4aa <quorem+0x112>
 800c3a8:	3c01      	subs	r4, #1
 800c3aa:	f101 0814 	add.w	r8, r1, #20
 800c3ae:	f100 0514 	add.w	r5, r0, #20
 800c3b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3b6:	9301      	str	r3, [sp, #4]
 800c3b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c3bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c3c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c3cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800c3d0:	d331      	bcc.n	800c436 <quorem+0x9e>
 800c3d2:	f04f 0e00 	mov.w	lr, #0
 800c3d6:	4640      	mov	r0, r8
 800c3d8:	46ac      	mov	ip, r5
 800c3da:	46f2      	mov	sl, lr
 800c3dc:	f850 2b04 	ldr.w	r2, [r0], #4
 800c3e0:	b293      	uxth	r3, r2
 800c3e2:	fb06 e303 	mla	r3, r6, r3, lr
 800c3e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	ebaa 0303 	sub.w	r3, sl, r3
 800c3f0:	f8dc a000 	ldr.w	sl, [ip]
 800c3f4:	0c12      	lsrs	r2, r2, #16
 800c3f6:	fa13 f38a 	uxtah	r3, r3, sl
 800c3fa:	fb06 e202 	mla	r2, r6, r2, lr
 800c3fe:	9300      	str	r3, [sp, #0]
 800c400:	9b00      	ldr	r3, [sp, #0]
 800c402:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c406:	b292      	uxth	r2, r2
 800c408:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c40c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c410:	f8bd 3000 	ldrh.w	r3, [sp]
 800c414:	4581      	cmp	r9, r0
 800c416:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c41a:	f84c 3b04 	str.w	r3, [ip], #4
 800c41e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c422:	d2db      	bcs.n	800c3dc <quorem+0x44>
 800c424:	f855 300b 	ldr.w	r3, [r5, fp]
 800c428:	b92b      	cbnz	r3, 800c436 <quorem+0x9e>
 800c42a:	9b01      	ldr	r3, [sp, #4]
 800c42c:	3b04      	subs	r3, #4
 800c42e:	429d      	cmp	r5, r3
 800c430:	461a      	mov	r2, r3
 800c432:	d32e      	bcc.n	800c492 <quorem+0xfa>
 800c434:	613c      	str	r4, [r7, #16]
 800c436:	4638      	mov	r0, r7
 800c438:	f001 fdc8 	bl	800dfcc <__mcmp>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	db24      	blt.n	800c48a <quorem+0xf2>
 800c440:	3601      	adds	r6, #1
 800c442:	4628      	mov	r0, r5
 800c444:	f04f 0c00 	mov.w	ip, #0
 800c448:	f858 2b04 	ldr.w	r2, [r8], #4
 800c44c:	f8d0 e000 	ldr.w	lr, [r0]
 800c450:	b293      	uxth	r3, r2
 800c452:	ebac 0303 	sub.w	r3, ip, r3
 800c456:	0c12      	lsrs	r2, r2, #16
 800c458:	fa13 f38e 	uxtah	r3, r3, lr
 800c45c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c460:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c464:	b29b      	uxth	r3, r3
 800c466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c46a:	45c1      	cmp	r9, r8
 800c46c:	f840 3b04 	str.w	r3, [r0], #4
 800c470:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c474:	d2e8      	bcs.n	800c448 <quorem+0xb0>
 800c476:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c47a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c47e:	b922      	cbnz	r2, 800c48a <quorem+0xf2>
 800c480:	3b04      	subs	r3, #4
 800c482:	429d      	cmp	r5, r3
 800c484:	461a      	mov	r2, r3
 800c486:	d30a      	bcc.n	800c49e <quorem+0x106>
 800c488:	613c      	str	r4, [r7, #16]
 800c48a:	4630      	mov	r0, r6
 800c48c:	b003      	add	sp, #12
 800c48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c492:	6812      	ldr	r2, [r2, #0]
 800c494:	3b04      	subs	r3, #4
 800c496:	2a00      	cmp	r2, #0
 800c498:	d1cc      	bne.n	800c434 <quorem+0x9c>
 800c49a:	3c01      	subs	r4, #1
 800c49c:	e7c7      	b.n	800c42e <quorem+0x96>
 800c49e:	6812      	ldr	r2, [r2, #0]
 800c4a0:	3b04      	subs	r3, #4
 800c4a2:	2a00      	cmp	r2, #0
 800c4a4:	d1f0      	bne.n	800c488 <quorem+0xf0>
 800c4a6:	3c01      	subs	r4, #1
 800c4a8:	e7eb      	b.n	800c482 <quorem+0xea>
 800c4aa:	2000      	movs	r0, #0
 800c4ac:	e7ee      	b.n	800c48c <quorem+0xf4>
	...

0800c4b0 <_dtoa_r>:
 800c4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b4:	ed2d 8b04 	vpush	{d8-d9}
 800c4b8:	ec57 6b10 	vmov	r6, r7, d0
 800c4bc:	b093      	sub	sp, #76	; 0x4c
 800c4be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c4c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c4c4:	9106      	str	r1, [sp, #24]
 800c4c6:	ee10 aa10 	vmov	sl, s0
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	9209      	str	r2, [sp, #36]	; 0x24
 800c4ce:	930c      	str	r3, [sp, #48]	; 0x30
 800c4d0:	46bb      	mov	fp, r7
 800c4d2:	b975      	cbnz	r5, 800c4f2 <_dtoa_r+0x42>
 800c4d4:	2010      	movs	r0, #16
 800c4d6:	f001 fa87 	bl	800d9e8 <malloc>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	6260      	str	r0, [r4, #36]	; 0x24
 800c4de:	b920      	cbnz	r0, 800c4ea <_dtoa_r+0x3a>
 800c4e0:	4ba7      	ldr	r3, [pc, #668]	; (800c780 <_dtoa_r+0x2d0>)
 800c4e2:	21ea      	movs	r1, #234	; 0xea
 800c4e4:	48a7      	ldr	r0, [pc, #668]	; (800c784 <_dtoa_r+0x2d4>)
 800c4e6:	f002 f94d 	bl	800e784 <__assert_func>
 800c4ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c4ee:	6005      	str	r5, [r0, #0]
 800c4f0:	60c5      	str	r5, [r0, #12]
 800c4f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4f4:	6819      	ldr	r1, [r3, #0]
 800c4f6:	b151      	cbz	r1, 800c50e <_dtoa_r+0x5e>
 800c4f8:	685a      	ldr	r2, [r3, #4]
 800c4fa:	604a      	str	r2, [r1, #4]
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	4093      	lsls	r3, r2
 800c500:	608b      	str	r3, [r1, #8]
 800c502:	4620      	mov	r0, r4
 800c504:	f001 fad6 	bl	800dab4 <_Bfree>
 800c508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c50a:	2200      	movs	r2, #0
 800c50c:	601a      	str	r2, [r3, #0]
 800c50e:	1e3b      	subs	r3, r7, #0
 800c510:	bfaa      	itet	ge
 800c512:	2300      	movge	r3, #0
 800c514:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c518:	f8c8 3000 	strge.w	r3, [r8]
 800c51c:	4b9a      	ldr	r3, [pc, #616]	; (800c788 <_dtoa_r+0x2d8>)
 800c51e:	bfbc      	itt	lt
 800c520:	2201      	movlt	r2, #1
 800c522:	f8c8 2000 	strlt.w	r2, [r8]
 800c526:	ea33 030b 	bics.w	r3, r3, fp
 800c52a:	d11b      	bne.n	800c564 <_dtoa_r+0xb4>
 800c52c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c52e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c532:	6013      	str	r3, [r2, #0]
 800c534:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c538:	4333      	orrs	r3, r6
 800c53a:	f000 8592 	beq.w	800d062 <_dtoa_r+0xbb2>
 800c53e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c540:	b963      	cbnz	r3, 800c55c <_dtoa_r+0xac>
 800c542:	4b92      	ldr	r3, [pc, #584]	; (800c78c <_dtoa_r+0x2dc>)
 800c544:	e022      	b.n	800c58c <_dtoa_r+0xdc>
 800c546:	4b92      	ldr	r3, [pc, #584]	; (800c790 <_dtoa_r+0x2e0>)
 800c548:	9301      	str	r3, [sp, #4]
 800c54a:	3308      	adds	r3, #8
 800c54c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c54e:	6013      	str	r3, [r2, #0]
 800c550:	9801      	ldr	r0, [sp, #4]
 800c552:	b013      	add	sp, #76	; 0x4c
 800c554:	ecbd 8b04 	vpop	{d8-d9}
 800c558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c55c:	4b8b      	ldr	r3, [pc, #556]	; (800c78c <_dtoa_r+0x2dc>)
 800c55e:	9301      	str	r3, [sp, #4]
 800c560:	3303      	adds	r3, #3
 800c562:	e7f3      	b.n	800c54c <_dtoa_r+0x9c>
 800c564:	2200      	movs	r2, #0
 800c566:	2300      	movs	r3, #0
 800c568:	4650      	mov	r0, sl
 800c56a:	4659      	mov	r1, fp
 800c56c:	f7f4 fab4 	bl	8000ad8 <__aeabi_dcmpeq>
 800c570:	ec4b ab19 	vmov	d9, sl, fp
 800c574:	4680      	mov	r8, r0
 800c576:	b158      	cbz	r0, 800c590 <_dtoa_r+0xe0>
 800c578:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c57a:	2301      	movs	r3, #1
 800c57c:	6013      	str	r3, [r2, #0]
 800c57e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c580:	2b00      	cmp	r3, #0
 800c582:	f000 856b 	beq.w	800d05c <_dtoa_r+0xbac>
 800c586:	4883      	ldr	r0, [pc, #524]	; (800c794 <_dtoa_r+0x2e4>)
 800c588:	6018      	str	r0, [r3, #0]
 800c58a:	1e43      	subs	r3, r0, #1
 800c58c:	9301      	str	r3, [sp, #4]
 800c58e:	e7df      	b.n	800c550 <_dtoa_r+0xa0>
 800c590:	ec4b ab10 	vmov	d0, sl, fp
 800c594:	aa10      	add	r2, sp, #64	; 0x40
 800c596:	a911      	add	r1, sp, #68	; 0x44
 800c598:	4620      	mov	r0, r4
 800c59a:	f001 fe39 	bl	800e210 <__d2b>
 800c59e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c5a2:	ee08 0a10 	vmov	s16, r0
 800c5a6:	2d00      	cmp	r5, #0
 800c5a8:	f000 8084 	beq.w	800c6b4 <_dtoa_r+0x204>
 800c5ac:	ee19 3a90 	vmov	r3, s19
 800c5b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c5b8:	4656      	mov	r6, sl
 800c5ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c5be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c5c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c5c6:	4b74      	ldr	r3, [pc, #464]	; (800c798 <_dtoa_r+0x2e8>)
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	4639      	mov	r1, r7
 800c5ce:	f7f3 fe63 	bl	8000298 <__aeabi_dsub>
 800c5d2:	a365      	add	r3, pc, #404	; (adr r3, 800c768 <_dtoa_r+0x2b8>)
 800c5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d8:	f7f4 f816 	bl	8000608 <__aeabi_dmul>
 800c5dc:	a364      	add	r3, pc, #400	; (adr r3, 800c770 <_dtoa_r+0x2c0>)
 800c5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e2:	f7f3 fe5b 	bl	800029c <__adddf3>
 800c5e6:	4606      	mov	r6, r0
 800c5e8:	4628      	mov	r0, r5
 800c5ea:	460f      	mov	r7, r1
 800c5ec:	f7f3 ffa2 	bl	8000534 <__aeabi_i2d>
 800c5f0:	a361      	add	r3, pc, #388	; (adr r3, 800c778 <_dtoa_r+0x2c8>)
 800c5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f6:	f7f4 f807 	bl	8000608 <__aeabi_dmul>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	4630      	mov	r0, r6
 800c600:	4639      	mov	r1, r7
 800c602:	f7f3 fe4b 	bl	800029c <__adddf3>
 800c606:	4606      	mov	r6, r0
 800c608:	460f      	mov	r7, r1
 800c60a:	f7f4 faad 	bl	8000b68 <__aeabi_d2iz>
 800c60e:	2200      	movs	r2, #0
 800c610:	9000      	str	r0, [sp, #0]
 800c612:	2300      	movs	r3, #0
 800c614:	4630      	mov	r0, r6
 800c616:	4639      	mov	r1, r7
 800c618:	f7f4 fa68 	bl	8000aec <__aeabi_dcmplt>
 800c61c:	b150      	cbz	r0, 800c634 <_dtoa_r+0x184>
 800c61e:	9800      	ldr	r0, [sp, #0]
 800c620:	f7f3 ff88 	bl	8000534 <__aeabi_i2d>
 800c624:	4632      	mov	r2, r6
 800c626:	463b      	mov	r3, r7
 800c628:	f7f4 fa56 	bl	8000ad8 <__aeabi_dcmpeq>
 800c62c:	b910      	cbnz	r0, 800c634 <_dtoa_r+0x184>
 800c62e:	9b00      	ldr	r3, [sp, #0]
 800c630:	3b01      	subs	r3, #1
 800c632:	9300      	str	r3, [sp, #0]
 800c634:	9b00      	ldr	r3, [sp, #0]
 800c636:	2b16      	cmp	r3, #22
 800c638:	d85a      	bhi.n	800c6f0 <_dtoa_r+0x240>
 800c63a:	9a00      	ldr	r2, [sp, #0]
 800c63c:	4b57      	ldr	r3, [pc, #348]	; (800c79c <_dtoa_r+0x2ec>)
 800c63e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c646:	ec51 0b19 	vmov	r0, r1, d9
 800c64a:	f7f4 fa4f 	bl	8000aec <__aeabi_dcmplt>
 800c64e:	2800      	cmp	r0, #0
 800c650:	d050      	beq.n	800c6f4 <_dtoa_r+0x244>
 800c652:	9b00      	ldr	r3, [sp, #0]
 800c654:	3b01      	subs	r3, #1
 800c656:	9300      	str	r3, [sp, #0]
 800c658:	2300      	movs	r3, #0
 800c65a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c65c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c65e:	1b5d      	subs	r5, r3, r5
 800c660:	1e6b      	subs	r3, r5, #1
 800c662:	9305      	str	r3, [sp, #20]
 800c664:	bf45      	ittet	mi
 800c666:	f1c5 0301 	rsbmi	r3, r5, #1
 800c66a:	9304      	strmi	r3, [sp, #16]
 800c66c:	2300      	movpl	r3, #0
 800c66e:	2300      	movmi	r3, #0
 800c670:	bf4c      	ite	mi
 800c672:	9305      	strmi	r3, [sp, #20]
 800c674:	9304      	strpl	r3, [sp, #16]
 800c676:	9b00      	ldr	r3, [sp, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	db3d      	blt.n	800c6f8 <_dtoa_r+0x248>
 800c67c:	9b05      	ldr	r3, [sp, #20]
 800c67e:	9a00      	ldr	r2, [sp, #0]
 800c680:	920a      	str	r2, [sp, #40]	; 0x28
 800c682:	4413      	add	r3, r2
 800c684:	9305      	str	r3, [sp, #20]
 800c686:	2300      	movs	r3, #0
 800c688:	9307      	str	r3, [sp, #28]
 800c68a:	9b06      	ldr	r3, [sp, #24]
 800c68c:	2b09      	cmp	r3, #9
 800c68e:	f200 8089 	bhi.w	800c7a4 <_dtoa_r+0x2f4>
 800c692:	2b05      	cmp	r3, #5
 800c694:	bfc4      	itt	gt
 800c696:	3b04      	subgt	r3, #4
 800c698:	9306      	strgt	r3, [sp, #24]
 800c69a:	9b06      	ldr	r3, [sp, #24]
 800c69c:	f1a3 0302 	sub.w	r3, r3, #2
 800c6a0:	bfcc      	ite	gt
 800c6a2:	2500      	movgt	r5, #0
 800c6a4:	2501      	movle	r5, #1
 800c6a6:	2b03      	cmp	r3, #3
 800c6a8:	f200 8087 	bhi.w	800c7ba <_dtoa_r+0x30a>
 800c6ac:	e8df f003 	tbb	[pc, r3]
 800c6b0:	59383a2d 	.word	0x59383a2d
 800c6b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c6b8:	441d      	add	r5, r3
 800c6ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c6be:	2b20      	cmp	r3, #32
 800c6c0:	bfc1      	itttt	gt
 800c6c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c6c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c6ca:	fa0b f303 	lslgt.w	r3, fp, r3
 800c6ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c6d2:	bfda      	itte	le
 800c6d4:	f1c3 0320 	rsble	r3, r3, #32
 800c6d8:	fa06 f003 	lslle.w	r0, r6, r3
 800c6dc:	4318      	orrgt	r0, r3
 800c6de:	f7f3 ff19 	bl	8000514 <__aeabi_ui2d>
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	4606      	mov	r6, r0
 800c6e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c6ea:	3d01      	subs	r5, #1
 800c6ec:	930e      	str	r3, [sp, #56]	; 0x38
 800c6ee:	e76a      	b.n	800c5c6 <_dtoa_r+0x116>
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	e7b2      	b.n	800c65a <_dtoa_r+0x1aa>
 800c6f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c6f6:	e7b1      	b.n	800c65c <_dtoa_r+0x1ac>
 800c6f8:	9b04      	ldr	r3, [sp, #16]
 800c6fa:	9a00      	ldr	r2, [sp, #0]
 800c6fc:	1a9b      	subs	r3, r3, r2
 800c6fe:	9304      	str	r3, [sp, #16]
 800c700:	4253      	negs	r3, r2
 800c702:	9307      	str	r3, [sp, #28]
 800c704:	2300      	movs	r3, #0
 800c706:	930a      	str	r3, [sp, #40]	; 0x28
 800c708:	e7bf      	b.n	800c68a <_dtoa_r+0x1da>
 800c70a:	2300      	movs	r3, #0
 800c70c:	9308      	str	r3, [sp, #32]
 800c70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c710:	2b00      	cmp	r3, #0
 800c712:	dc55      	bgt.n	800c7c0 <_dtoa_r+0x310>
 800c714:	2301      	movs	r3, #1
 800c716:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c71a:	461a      	mov	r2, r3
 800c71c:	9209      	str	r2, [sp, #36]	; 0x24
 800c71e:	e00c      	b.n	800c73a <_dtoa_r+0x28a>
 800c720:	2301      	movs	r3, #1
 800c722:	e7f3      	b.n	800c70c <_dtoa_r+0x25c>
 800c724:	2300      	movs	r3, #0
 800c726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c728:	9308      	str	r3, [sp, #32]
 800c72a:	9b00      	ldr	r3, [sp, #0]
 800c72c:	4413      	add	r3, r2
 800c72e:	9302      	str	r3, [sp, #8]
 800c730:	3301      	adds	r3, #1
 800c732:	2b01      	cmp	r3, #1
 800c734:	9303      	str	r3, [sp, #12]
 800c736:	bfb8      	it	lt
 800c738:	2301      	movlt	r3, #1
 800c73a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c73c:	2200      	movs	r2, #0
 800c73e:	6042      	str	r2, [r0, #4]
 800c740:	2204      	movs	r2, #4
 800c742:	f102 0614 	add.w	r6, r2, #20
 800c746:	429e      	cmp	r6, r3
 800c748:	6841      	ldr	r1, [r0, #4]
 800c74a:	d93d      	bls.n	800c7c8 <_dtoa_r+0x318>
 800c74c:	4620      	mov	r0, r4
 800c74e:	f001 f971 	bl	800da34 <_Balloc>
 800c752:	9001      	str	r0, [sp, #4]
 800c754:	2800      	cmp	r0, #0
 800c756:	d13b      	bne.n	800c7d0 <_dtoa_r+0x320>
 800c758:	4b11      	ldr	r3, [pc, #68]	; (800c7a0 <_dtoa_r+0x2f0>)
 800c75a:	4602      	mov	r2, r0
 800c75c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c760:	e6c0      	b.n	800c4e4 <_dtoa_r+0x34>
 800c762:	2301      	movs	r3, #1
 800c764:	e7df      	b.n	800c726 <_dtoa_r+0x276>
 800c766:	bf00      	nop
 800c768:	636f4361 	.word	0x636f4361
 800c76c:	3fd287a7 	.word	0x3fd287a7
 800c770:	8b60c8b3 	.word	0x8b60c8b3
 800c774:	3fc68a28 	.word	0x3fc68a28
 800c778:	509f79fb 	.word	0x509f79fb
 800c77c:	3fd34413 	.word	0x3fd34413
 800c780:	0800f36d 	.word	0x0800f36d
 800c784:	0800f384 	.word	0x0800f384
 800c788:	7ff00000 	.word	0x7ff00000
 800c78c:	0800f369 	.word	0x0800f369
 800c790:	0800f360 	.word	0x0800f360
 800c794:	0800f2ed 	.word	0x0800f2ed
 800c798:	3ff80000 	.word	0x3ff80000
 800c79c:	0800f4f0 	.word	0x0800f4f0
 800c7a0:	0800f3df 	.word	0x0800f3df
 800c7a4:	2501      	movs	r5, #1
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	9306      	str	r3, [sp, #24]
 800c7aa:	9508      	str	r5, [sp, #32]
 800c7ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	2312      	movs	r3, #18
 800c7b8:	e7b0      	b.n	800c71c <_dtoa_r+0x26c>
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	9308      	str	r3, [sp, #32]
 800c7be:	e7f5      	b.n	800c7ac <_dtoa_r+0x2fc>
 800c7c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c7c6:	e7b8      	b.n	800c73a <_dtoa_r+0x28a>
 800c7c8:	3101      	adds	r1, #1
 800c7ca:	6041      	str	r1, [r0, #4]
 800c7cc:	0052      	lsls	r2, r2, #1
 800c7ce:	e7b8      	b.n	800c742 <_dtoa_r+0x292>
 800c7d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7d2:	9a01      	ldr	r2, [sp, #4]
 800c7d4:	601a      	str	r2, [r3, #0]
 800c7d6:	9b03      	ldr	r3, [sp, #12]
 800c7d8:	2b0e      	cmp	r3, #14
 800c7da:	f200 809d 	bhi.w	800c918 <_dtoa_r+0x468>
 800c7de:	2d00      	cmp	r5, #0
 800c7e0:	f000 809a 	beq.w	800c918 <_dtoa_r+0x468>
 800c7e4:	9b00      	ldr	r3, [sp, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	dd32      	ble.n	800c850 <_dtoa_r+0x3a0>
 800c7ea:	4ab7      	ldr	r2, [pc, #732]	; (800cac8 <_dtoa_r+0x618>)
 800c7ec:	f003 030f 	and.w	r3, r3, #15
 800c7f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c7f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7f8:	9b00      	ldr	r3, [sp, #0]
 800c7fa:	05d8      	lsls	r0, r3, #23
 800c7fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c800:	d516      	bpl.n	800c830 <_dtoa_r+0x380>
 800c802:	4bb2      	ldr	r3, [pc, #712]	; (800cacc <_dtoa_r+0x61c>)
 800c804:	ec51 0b19 	vmov	r0, r1, d9
 800c808:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c80c:	f7f4 f826 	bl	800085c <__aeabi_ddiv>
 800c810:	f007 070f 	and.w	r7, r7, #15
 800c814:	4682      	mov	sl, r0
 800c816:	468b      	mov	fp, r1
 800c818:	2503      	movs	r5, #3
 800c81a:	4eac      	ldr	r6, [pc, #688]	; (800cacc <_dtoa_r+0x61c>)
 800c81c:	b957      	cbnz	r7, 800c834 <_dtoa_r+0x384>
 800c81e:	4642      	mov	r2, r8
 800c820:	464b      	mov	r3, r9
 800c822:	4650      	mov	r0, sl
 800c824:	4659      	mov	r1, fp
 800c826:	f7f4 f819 	bl	800085c <__aeabi_ddiv>
 800c82a:	4682      	mov	sl, r0
 800c82c:	468b      	mov	fp, r1
 800c82e:	e028      	b.n	800c882 <_dtoa_r+0x3d2>
 800c830:	2502      	movs	r5, #2
 800c832:	e7f2      	b.n	800c81a <_dtoa_r+0x36a>
 800c834:	07f9      	lsls	r1, r7, #31
 800c836:	d508      	bpl.n	800c84a <_dtoa_r+0x39a>
 800c838:	4640      	mov	r0, r8
 800c83a:	4649      	mov	r1, r9
 800c83c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c840:	f7f3 fee2 	bl	8000608 <__aeabi_dmul>
 800c844:	3501      	adds	r5, #1
 800c846:	4680      	mov	r8, r0
 800c848:	4689      	mov	r9, r1
 800c84a:	107f      	asrs	r7, r7, #1
 800c84c:	3608      	adds	r6, #8
 800c84e:	e7e5      	b.n	800c81c <_dtoa_r+0x36c>
 800c850:	f000 809b 	beq.w	800c98a <_dtoa_r+0x4da>
 800c854:	9b00      	ldr	r3, [sp, #0]
 800c856:	4f9d      	ldr	r7, [pc, #628]	; (800cacc <_dtoa_r+0x61c>)
 800c858:	425e      	negs	r6, r3
 800c85a:	4b9b      	ldr	r3, [pc, #620]	; (800cac8 <_dtoa_r+0x618>)
 800c85c:	f006 020f 	and.w	r2, r6, #15
 800c860:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c868:	ec51 0b19 	vmov	r0, r1, d9
 800c86c:	f7f3 fecc 	bl	8000608 <__aeabi_dmul>
 800c870:	1136      	asrs	r6, r6, #4
 800c872:	4682      	mov	sl, r0
 800c874:	468b      	mov	fp, r1
 800c876:	2300      	movs	r3, #0
 800c878:	2502      	movs	r5, #2
 800c87a:	2e00      	cmp	r6, #0
 800c87c:	d17a      	bne.n	800c974 <_dtoa_r+0x4c4>
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d1d3      	bne.n	800c82a <_dtoa_r+0x37a>
 800c882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c884:	2b00      	cmp	r3, #0
 800c886:	f000 8082 	beq.w	800c98e <_dtoa_r+0x4de>
 800c88a:	4b91      	ldr	r3, [pc, #580]	; (800cad0 <_dtoa_r+0x620>)
 800c88c:	2200      	movs	r2, #0
 800c88e:	4650      	mov	r0, sl
 800c890:	4659      	mov	r1, fp
 800c892:	f7f4 f92b 	bl	8000aec <__aeabi_dcmplt>
 800c896:	2800      	cmp	r0, #0
 800c898:	d079      	beq.n	800c98e <_dtoa_r+0x4de>
 800c89a:	9b03      	ldr	r3, [sp, #12]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d076      	beq.n	800c98e <_dtoa_r+0x4de>
 800c8a0:	9b02      	ldr	r3, [sp, #8]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	dd36      	ble.n	800c914 <_dtoa_r+0x464>
 800c8a6:	9b00      	ldr	r3, [sp, #0]
 800c8a8:	4650      	mov	r0, sl
 800c8aa:	4659      	mov	r1, fp
 800c8ac:	1e5f      	subs	r7, r3, #1
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	4b88      	ldr	r3, [pc, #544]	; (800cad4 <_dtoa_r+0x624>)
 800c8b2:	f7f3 fea9 	bl	8000608 <__aeabi_dmul>
 800c8b6:	9e02      	ldr	r6, [sp, #8]
 800c8b8:	4682      	mov	sl, r0
 800c8ba:	468b      	mov	fp, r1
 800c8bc:	3501      	adds	r5, #1
 800c8be:	4628      	mov	r0, r5
 800c8c0:	f7f3 fe38 	bl	8000534 <__aeabi_i2d>
 800c8c4:	4652      	mov	r2, sl
 800c8c6:	465b      	mov	r3, fp
 800c8c8:	f7f3 fe9e 	bl	8000608 <__aeabi_dmul>
 800c8cc:	4b82      	ldr	r3, [pc, #520]	; (800cad8 <_dtoa_r+0x628>)
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	f7f3 fce4 	bl	800029c <__adddf3>
 800c8d4:	46d0      	mov	r8, sl
 800c8d6:	46d9      	mov	r9, fp
 800c8d8:	4682      	mov	sl, r0
 800c8da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c8de:	2e00      	cmp	r6, #0
 800c8e0:	d158      	bne.n	800c994 <_dtoa_r+0x4e4>
 800c8e2:	4b7e      	ldr	r3, [pc, #504]	; (800cadc <_dtoa_r+0x62c>)
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	4640      	mov	r0, r8
 800c8e8:	4649      	mov	r1, r9
 800c8ea:	f7f3 fcd5 	bl	8000298 <__aeabi_dsub>
 800c8ee:	4652      	mov	r2, sl
 800c8f0:	465b      	mov	r3, fp
 800c8f2:	4680      	mov	r8, r0
 800c8f4:	4689      	mov	r9, r1
 800c8f6:	f7f4 f917 	bl	8000b28 <__aeabi_dcmpgt>
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	f040 8295 	bne.w	800ce2a <_dtoa_r+0x97a>
 800c900:	4652      	mov	r2, sl
 800c902:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c906:	4640      	mov	r0, r8
 800c908:	4649      	mov	r1, r9
 800c90a:	f7f4 f8ef 	bl	8000aec <__aeabi_dcmplt>
 800c90e:	2800      	cmp	r0, #0
 800c910:	f040 8289 	bne.w	800ce26 <_dtoa_r+0x976>
 800c914:	ec5b ab19 	vmov	sl, fp, d9
 800c918:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	f2c0 8148 	blt.w	800cbb0 <_dtoa_r+0x700>
 800c920:	9a00      	ldr	r2, [sp, #0]
 800c922:	2a0e      	cmp	r2, #14
 800c924:	f300 8144 	bgt.w	800cbb0 <_dtoa_r+0x700>
 800c928:	4b67      	ldr	r3, [pc, #412]	; (800cac8 <_dtoa_r+0x618>)
 800c92a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c92e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c934:	2b00      	cmp	r3, #0
 800c936:	f280 80d5 	bge.w	800cae4 <_dtoa_r+0x634>
 800c93a:	9b03      	ldr	r3, [sp, #12]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	f300 80d1 	bgt.w	800cae4 <_dtoa_r+0x634>
 800c942:	f040 826f 	bne.w	800ce24 <_dtoa_r+0x974>
 800c946:	4b65      	ldr	r3, [pc, #404]	; (800cadc <_dtoa_r+0x62c>)
 800c948:	2200      	movs	r2, #0
 800c94a:	4640      	mov	r0, r8
 800c94c:	4649      	mov	r1, r9
 800c94e:	f7f3 fe5b 	bl	8000608 <__aeabi_dmul>
 800c952:	4652      	mov	r2, sl
 800c954:	465b      	mov	r3, fp
 800c956:	f7f4 f8dd 	bl	8000b14 <__aeabi_dcmpge>
 800c95a:	9e03      	ldr	r6, [sp, #12]
 800c95c:	4637      	mov	r7, r6
 800c95e:	2800      	cmp	r0, #0
 800c960:	f040 8245 	bne.w	800cdee <_dtoa_r+0x93e>
 800c964:	9d01      	ldr	r5, [sp, #4]
 800c966:	2331      	movs	r3, #49	; 0x31
 800c968:	f805 3b01 	strb.w	r3, [r5], #1
 800c96c:	9b00      	ldr	r3, [sp, #0]
 800c96e:	3301      	adds	r3, #1
 800c970:	9300      	str	r3, [sp, #0]
 800c972:	e240      	b.n	800cdf6 <_dtoa_r+0x946>
 800c974:	07f2      	lsls	r2, r6, #31
 800c976:	d505      	bpl.n	800c984 <_dtoa_r+0x4d4>
 800c978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c97c:	f7f3 fe44 	bl	8000608 <__aeabi_dmul>
 800c980:	3501      	adds	r5, #1
 800c982:	2301      	movs	r3, #1
 800c984:	1076      	asrs	r6, r6, #1
 800c986:	3708      	adds	r7, #8
 800c988:	e777      	b.n	800c87a <_dtoa_r+0x3ca>
 800c98a:	2502      	movs	r5, #2
 800c98c:	e779      	b.n	800c882 <_dtoa_r+0x3d2>
 800c98e:	9f00      	ldr	r7, [sp, #0]
 800c990:	9e03      	ldr	r6, [sp, #12]
 800c992:	e794      	b.n	800c8be <_dtoa_r+0x40e>
 800c994:	9901      	ldr	r1, [sp, #4]
 800c996:	4b4c      	ldr	r3, [pc, #304]	; (800cac8 <_dtoa_r+0x618>)
 800c998:	4431      	add	r1, r6
 800c99a:	910d      	str	r1, [sp, #52]	; 0x34
 800c99c:	9908      	ldr	r1, [sp, #32]
 800c99e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c9a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c9a6:	2900      	cmp	r1, #0
 800c9a8:	d043      	beq.n	800ca32 <_dtoa_r+0x582>
 800c9aa:	494d      	ldr	r1, [pc, #308]	; (800cae0 <_dtoa_r+0x630>)
 800c9ac:	2000      	movs	r0, #0
 800c9ae:	f7f3 ff55 	bl	800085c <__aeabi_ddiv>
 800c9b2:	4652      	mov	r2, sl
 800c9b4:	465b      	mov	r3, fp
 800c9b6:	f7f3 fc6f 	bl	8000298 <__aeabi_dsub>
 800c9ba:	9d01      	ldr	r5, [sp, #4]
 800c9bc:	4682      	mov	sl, r0
 800c9be:	468b      	mov	fp, r1
 800c9c0:	4649      	mov	r1, r9
 800c9c2:	4640      	mov	r0, r8
 800c9c4:	f7f4 f8d0 	bl	8000b68 <__aeabi_d2iz>
 800c9c8:	4606      	mov	r6, r0
 800c9ca:	f7f3 fdb3 	bl	8000534 <__aeabi_i2d>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	4640      	mov	r0, r8
 800c9d4:	4649      	mov	r1, r9
 800c9d6:	f7f3 fc5f 	bl	8000298 <__aeabi_dsub>
 800c9da:	3630      	adds	r6, #48	; 0x30
 800c9dc:	f805 6b01 	strb.w	r6, [r5], #1
 800c9e0:	4652      	mov	r2, sl
 800c9e2:	465b      	mov	r3, fp
 800c9e4:	4680      	mov	r8, r0
 800c9e6:	4689      	mov	r9, r1
 800c9e8:	f7f4 f880 	bl	8000aec <__aeabi_dcmplt>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	d163      	bne.n	800cab8 <_dtoa_r+0x608>
 800c9f0:	4642      	mov	r2, r8
 800c9f2:	464b      	mov	r3, r9
 800c9f4:	4936      	ldr	r1, [pc, #216]	; (800cad0 <_dtoa_r+0x620>)
 800c9f6:	2000      	movs	r0, #0
 800c9f8:	f7f3 fc4e 	bl	8000298 <__aeabi_dsub>
 800c9fc:	4652      	mov	r2, sl
 800c9fe:	465b      	mov	r3, fp
 800ca00:	f7f4 f874 	bl	8000aec <__aeabi_dcmplt>
 800ca04:	2800      	cmp	r0, #0
 800ca06:	f040 80b5 	bne.w	800cb74 <_dtoa_r+0x6c4>
 800ca0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca0c:	429d      	cmp	r5, r3
 800ca0e:	d081      	beq.n	800c914 <_dtoa_r+0x464>
 800ca10:	4b30      	ldr	r3, [pc, #192]	; (800cad4 <_dtoa_r+0x624>)
 800ca12:	2200      	movs	r2, #0
 800ca14:	4650      	mov	r0, sl
 800ca16:	4659      	mov	r1, fp
 800ca18:	f7f3 fdf6 	bl	8000608 <__aeabi_dmul>
 800ca1c:	4b2d      	ldr	r3, [pc, #180]	; (800cad4 <_dtoa_r+0x624>)
 800ca1e:	4682      	mov	sl, r0
 800ca20:	468b      	mov	fp, r1
 800ca22:	4640      	mov	r0, r8
 800ca24:	4649      	mov	r1, r9
 800ca26:	2200      	movs	r2, #0
 800ca28:	f7f3 fdee 	bl	8000608 <__aeabi_dmul>
 800ca2c:	4680      	mov	r8, r0
 800ca2e:	4689      	mov	r9, r1
 800ca30:	e7c6      	b.n	800c9c0 <_dtoa_r+0x510>
 800ca32:	4650      	mov	r0, sl
 800ca34:	4659      	mov	r1, fp
 800ca36:	f7f3 fde7 	bl	8000608 <__aeabi_dmul>
 800ca3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca3c:	9d01      	ldr	r5, [sp, #4]
 800ca3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca40:	4682      	mov	sl, r0
 800ca42:	468b      	mov	fp, r1
 800ca44:	4649      	mov	r1, r9
 800ca46:	4640      	mov	r0, r8
 800ca48:	f7f4 f88e 	bl	8000b68 <__aeabi_d2iz>
 800ca4c:	4606      	mov	r6, r0
 800ca4e:	f7f3 fd71 	bl	8000534 <__aeabi_i2d>
 800ca52:	3630      	adds	r6, #48	; 0x30
 800ca54:	4602      	mov	r2, r0
 800ca56:	460b      	mov	r3, r1
 800ca58:	4640      	mov	r0, r8
 800ca5a:	4649      	mov	r1, r9
 800ca5c:	f7f3 fc1c 	bl	8000298 <__aeabi_dsub>
 800ca60:	f805 6b01 	strb.w	r6, [r5], #1
 800ca64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca66:	429d      	cmp	r5, r3
 800ca68:	4680      	mov	r8, r0
 800ca6a:	4689      	mov	r9, r1
 800ca6c:	f04f 0200 	mov.w	r2, #0
 800ca70:	d124      	bne.n	800cabc <_dtoa_r+0x60c>
 800ca72:	4b1b      	ldr	r3, [pc, #108]	; (800cae0 <_dtoa_r+0x630>)
 800ca74:	4650      	mov	r0, sl
 800ca76:	4659      	mov	r1, fp
 800ca78:	f7f3 fc10 	bl	800029c <__adddf3>
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	460b      	mov	r3, r1
 800ca80:	4640      	mov	r0, r8
 800ca82:	4649      	mov	r1, r9
 800ca84:	f7f4 f850 	bl	8000b28 <__aeabi_dcmpgt>
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	d173      	bne.n	800cb74 <_dtoa_r+0x6c4>
 800ca8c:	4652      	mov	r2, sl
 800ca8e:	465b      	mov	r3, fp
 800ca90:	4913      	ldr	r1, [pc, #76]	; (800cae0 <_dtoa_r+0x630>)
 800ca92:	2000      	movs	r0, #0
 800ca94:	f7f3 fc00 	bl	8000298 <__aeabi_dsub>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	460b      	mov	r3, r1
 800ca9c:	4640      	mov	r0, r8
 800ca9e:	4649      	mov	r1, r9
 800caa0:	f7f4 f824 	bl	8000aec <__aeabi_dcmplt>
 800caa4:	2800      	cmp	r0, #0
 800caa6:	f43f af35 	beq.w	800c914 <_dtoa_r+0x464>
 800caaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800caac:	1e6b      	subs	r3, r5, #1
 800caae:	930f      	str	r3, [sp, #60]	; 0x3c
 800cab0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cab4:	2b30      	cmp	r3, #48	; 0x30
 800cab6:	d0f8      	beq.n	800caaa <_dtoa_r+0x5fa>
 800cab8:	9700      	str	r7, [sp, #0]
 800caba:	e049      	b.n	800cb50 <_dtoa_r+0x6a0>
 800cabc:	4b05      	ldr	r3, [pc, #20]	; (800cad4 <_dtoa_r+0x624>)
 800cabe:	f7f3 fda3 	bl	8000608 <__aeabi_dmul>
 800cac2:	4680      	mov	r8, r0
 800cac4:	4689      	mov	r9, r1
 800cac6:	e7bd      	b.n	800ca44 <_dtoa_r+0x594>
 800cac8:	0800f4f0 	.word	0x0800f4f0
 800cacc:	0800f4c8 	.word	0x0800f4c8
 800cad0:	3ff00000 	.word	0x3ff00000
 800cad4:	40240000 	.word	0x40240000
 800cad8:	401c0000 	.word	0x401c0000
 800cadc:	40140000 	.word	0x40140000
 800cae0:	3fe00000 	.word	0x3fe00000
 800cae4:	9d01      	ldr	r5, [sp, #4]
 800cae6:	4656      	mov	r6, sl
 800cae8:	465f      	mov	r7, fp
 800caea:	4642      	mov	r2, r8
 800caec:	464b      	mov	r3, r9
 800caee:	4630      	mov	r0, r6
 800caf0:	4639      	mov	r1, r7
 800caf2:	f7f3 feb3 	bl	800085c <__aeabi_ddiv>
 800caf6:	f7f4 f837 	bl	8000b68 <__aeabi_d2iz>
 800cafa:	4682      	mov	sl, r0
 800cafc:	f7f3 fd1a 	bl	8000534 <__aeabi_i2d>
 800cb00:	4642      	mov	r2, r8
 800cb02:	464b      	mov	r3, r9
 800cb04:	f7f3 fd80 	bl	8000608 <__aeabi_dmul>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	4630      	mov	r0, r6
 800cb0e:	4639      	mov	r1, r7
 800cb10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cb14:	f7f3 fbc0 	bl	8000298 <__aeabi_dsub>
 800cb18:	f805 6b01 	strb.w	r6, [r5], #1
 800cb1c:	9e01      	ldr	r6, [sp, #4]
 800cb1e:	9f03      	ldr	r7, [sp, #12]
 800cb20:	1bae      	subs	r6, r5, r6
 800cb22:	42b7      	cmp	r7, r6
 800cb24:	4602      	mov	r2, r0
 800cb26:	460b      	mov	r3, r1
 800cb28:	d135      	bne.n	800cb96 <_dtoa_r+0x6e6>
 800cb2a:	f7f3 fbb7 	bl	800029c <__adddf3>
 800cb2e:	4642      	mov	r2, r8
 800cb30:	464b      	mov	r3, r9
 800cb32:	4606      	mov	r6, r0
 800cb34:	460f      	mov	r7, r1
 800cb36:	f7f3 fff7 	bl	8000b28 <__aeabi_dcmpgt>
 800cb3a:	b9d0      	cbnz	r0, 800cb72 <_dtoa_r+0x6c2>
 800cb3c:	4642      	mov	r2, r8
 800cb3e:	464b      	mov	r3, r9
 800cb40:	4630      	mov	r0, r6
 800cb42:	4639      	mov	r1, r7
 800cb44:	f7f3 ffc8 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb48:	b110      	cbz	r0, 800cb50 <_dtoa_r+0x6a0>
 800cb4a:	f01a 0f01 	tst.w	sl, #1
 800cb4e:	d110      	bne.n	800cb72 <_dtoa_r+0x6c2>
 800cb50:	4620      	mov	r0, r4
 800cb52:	ee18 1a10 	vmov	r1, s16
 800cb56:	f000 ffad 	bl	800dab4 <_Bfree>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	9800      	ldr	r0, [sp, #0]
 800cb5e:	702b      	strb	r3, [r5, #0]
 800cb60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb62:	3001      	adds	r0, #1
 800cb64:	6018      	str	r0, [r3, #0]
 800cb66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f43f acf1 	beq.w	800c550 <_dtoa_r+0xa0>
 800cb6e:	601d      	str	r5, [r3, #0]
 800cb70:	e4ee      	b.n	800c550 <_dtoa_r+0xa0>
 800cb72:	9f00      	ldr	r7, [sp, #0]
 800cb74:	462b      	mov	r3, r5
 800cb76:	461d      	mov	r5, r3
 800cb78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb7c:	2a39      	cmp	r2, #57	; 0x39
 800cb7e:	d106      	bne.n	800cb8e <_dtoa_r+0x6de>
 800cb80:	9a01      	ldr	r2, [sp, #4]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d1f7      	bne.n	800cb76 <_dtoa_r+0x6c6>
 800cb86:	9901      	ldr	r1, [sp, #4]
 800cb88:	2230      	movs	r2, #48	; 0x30
 800cb8a:	3701      	adds	r7, #1
 800cb8c:	700a      	strb	r2, [r1, #0]
 800cb8e:	781a      	ldrb	r2, [r3, #0]
 800cb90:	3201      	adds	r2, #1
 800cb92:	701a      	strb	r2, [r3, #0]
 800cb94:	e790      	b.n	800cab8 <_dtoa_r+0x608>
 800cb96:	4ba6      	ldr	r3, [pc, #664]	; (800ce30 <_dtoa_r+0x980>)
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f7f3 fd35 	bl	8000608 <__aeabi_dmul>
 800cb9e:	2200      	movs	r2, #0
 800cba0:	2300      	movs	r3, #0
 800cba2:	4606      	mov	r6, r0
 800cba4:	460f      	mov	r7, r1
 800cba6:	f7f3 ff97 	bl	8000ad8 <__aeabi_dcmpeq>
 800cbaa:	2800      	cmp	r0, #0
 800cbac:	d09d      	beq.n	800caea <_dtoa_r+0x63a>
 800cbae:	e7cf      	b.n	800cb50 <_dtoa_r+0x6a0>
 800cbb0:	9a08      	ldr	r2, [sp, #32]
 800cbb2:	2a00      	cmp	r2, #0
 800cbb4:	f000 80d7 	beq.w	800cd66 <_dtoa_r+0x8b6>
 800cbb8:	9a06      	ldr	r2, [sp, #24]
 800cbba:	2a01      	cmp	r2, #1
 800cbbc:	f300 80ba 	bgt.w	800cd34 <_dtoa_r+0x884>
 800cbc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbc2:	2a00      	cmp	r2, #0
 800cbc4:	f000 80b2 	beq.w	800cd2c <_dtoa_r+0x87c>
 800cbc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cbcc:	9e07      	ldr	r6, [sp, #28]
 800cbce:	9d04      	ldr	r5, [sp, #16]
 800cbd0:	9a04      	ldr	r2, [sp, #16]
 800cbd2:	441a      	add	r2, r3
 800cbd4:	9204      	str	r2, [sp, #16]
 800cbd6:	9a05      	ldr	r2, [sp, #20]
 800cbd8:	2101      	movs	r1, #1
 800cbda:	441a      	add	r2, r3
 800cbdc:	4620      	mov	r0, r4
 800cbde:	9205      	str	r2, [sp, #20]
 800cbe0:	f001 f86a 	bl	800dcb8 <__i2b>
 800cbe4:	4607      	mov	r7, r0
 800cbe6:	2d00      	cmp	r5, #0
 800cbe8:	dd0c      	ble.n	800cc04 <_dtoa_r+0x754>
 800cbea:	9b05      	ldr	r3, [sp, #20]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	dd09      	ble.n	800cc04 <_dtoa_r+0x754>
 800cbf0:	42ab      	cmp	r3, r5
 800cbf2:	9a04      	ldr	r2, [sp, #16]
 800cbf4:	bfa8      	it	ge
 800cbf6:	462b      	movge	r3, r5
 800cbf8:	1ad2      	subs	r2, r2, r3
 800cbfa:	9204      	str	r2, [sp, #16]
 800cbfc:	9a05      	ldr	r2, [sp, #20]
 800cbfe:	1aed      	subs	r5, r5, r3
 800cc00:	1ad3      	subs	r3, r2, r3
 800cc02:	9305      	str	r3, [sp, #20]
 800cc04:	9b07      	ldr	r3, [sp, #28]
 800cc06:	b31b      	cbz	r3, 800cc50 <_dtoa_r+0x7a0>
 800cc08:	9b08      	ldr	r3, [sp, #32]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	f000 80af 	beq.w	800cd6e <_dtoa_r+0x8be>
 800cc10:	2e00      	cmp	r6, #0
 800cc12:	dd13      	ble.n	800cc3c <_dtoa_r+0x78c>
 800cc14:	4639      	mov	r1, r7
 800cc16:	4632      	mov	r2, r6
 800cc18:	4620      	mov	r0, r4
 800cc1a:	f001 f90d 	bl	800de38 <__pow5mult>
 800cc1e:	ee18 2a10 	vmov	r2, s16
 800cc22:	4601      	mov	r1, r0
 800cc24:	4607      	mov	r7, r0
 800cc26:	4620      	mov	r0, r4
 800cc28:	f001 f85c 	bl	800dce4 <__multiply>
 800cc2c:	ee18 1a10 	vmov	r1, s16
 800cc30:	4680      	mov	r8, r0
 800cc32:	4620      	mov	r0, r4
 800cc34:	f000 ff3e 	bl	800dab4 <_Bfree>
 800cc38:	ee08 8a10 	vmov	s16, r8
 800cc3c:	9b07      	ldr	r3, [sp, #28]
 800cc3e:	1b9a      	subs	r2, r3, r6
 800cc40:	d006      	beq.n	800cc50 <_dtoa_r+0x7a0>
 800cc42:	ee18 1a10 	vmov	r1, s16
 800cc46:	4620      	mov	r0, r4
 800cc48:	f001 f8f6 	bl	800de38 <__pow5mult>
 800cc4c:	ee08 0a10 	vmov	s16, r0
 800cc50:	2101      	movs	r1, #1
 800cc52:	4620      	mov	r0, r4
 800cc54:	f001 f830 	bl	800dcb8 <__i2b>
 800cc58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	4606      	mov	r6, r0
 800cc5e:	f340 8088 	ble.w	800cd72 <_dtoa_r+0x8c2>
 800cc62:	461a      	mov	r2, r3
 800cc64:	4601      	mov	r1, r0
 800cc66:	4620      	mov	r0, r4
 800cc68:	f001 f8e6 	bl	800de38 <__pow5mult>
 800cc6c:	9b06      	ldr	r3, [sp, #24]
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	4606      	mov	r6, r0
 800cc72:	f340 8081 	ble.w	800cd78 <_dtoa_r+0x8c8>
 800cc76:	f04f 0800 	mov.w	r8, #0
 800cc7a:	6933      	ldr	r3, [r6, #16]
 800cc7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cc80:	6918      	ldr	r0, [r3, #16]
 800cc82:	f000 ffc9 	bl	800dc18 <__hi0bits>
 800cc86:	f1c0 0020 	rsb	r0, r0, #32
 800cc8a:	9b05      	ldr	r3, [sp, #20]
 800cc8c:	4418      	add	r0, r3
 800cc8e:	f010 001f 	ands.w	r0, r0, #31
 800cc92:	f000 8092 	beq.w	800cdba <_dtoa_r+0x90a>
 800cc96:	f1c0 0320 	rsb	r3, r0, #32
 800cc9a:	2b04      	cmp	r3, #4
 800cc9c:	f340 808a 	ble.w	800cdb4 <_dtoa_r+0x904>
 800cca0:	f1c0 001c 	rsb	r0, r0, #28
 800cca4:	9b04      	ldr	r3, [sp, #16]
 800cca6:	4403      	add	r3, r0
 800cca8:	9304      	str	r3, [sp, #16]
 800ccaa:	9b05      	ldr	r3, [sp, #20]
 800ccac:	4403      	add	r3, r0
 800ccae:	4405      	add	r5, r0
 800ccb0:	9305      	str	r3, [sp, #20]
 800ccb2:	9b04      	ldr	r3, [sp, #16]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	dd07      	ble.n	800ccc8 <_dtoa_r+0x818>
 800ccb8:	ee18 1a10 	vmov	r1, s16
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	f001 f914 	bl	800deec <__lshift>
 800ccc4:	ee08 0a10 	vmov	s16, r0
 800ccc8:	9b05      	ldr	r3, [sp, #20]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	dd05      	ble.n	800ccda <_dtoa_r+0x82a>
 800ccce:	4631      	mov	r1, r6
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	4620      	mov	r0, r4
 800ccd4:	f001 f90a 	bl	800deec <__lshift>
 800ccd8:	4606      	mov	r6, r0
 800ccda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d06e      	beq.n	800cdbe <_dtoa_r+0x90e>
 800cce0:	ee18 0a10 	vmov	r0, s16
 800cce4:	4631      	mov	r1, r6
 800cce6:	f001 f971 	bl	800dfcc <__mcmp>
 800ccea:	2800      	cmp	r0, #0
 800ccec:	da67      	bge.n	800cdbe <_dtoa_r+0x90e>
 800ccee:	9b00      	ldr	r3, [sp, #0]
 800ccf0:	3b01      	subs	r3, #1
 800ccf2:	ee18 1a10 	vmov	r1, s16
 800ccf6:	9300      	str	r3, [sp, #0]
 800ccf8:	220a      	movs	r2, #10
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	f000 fefb 	bl	800daf8 <__multadd>
 800cd02:	9b08      	ldr	r3, [sp, #32]
 800cd04:	ee08 0a10 	vmov	s16, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f000 81b1 	beq.w	800d070 <_dtoa_r+0xbc0>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	4639      	mov	r1, r7
 800cd12:	220a      	movs	r2, #10
 800cd14:	4620      	mov	r0, r4
 800cd16:	f000 feef 	bl	800daf8 <__multadd>
 800cd1a:	9b02      	ldr	r3, [sp, #8]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	4607      	mov	r7, r0
 800cd20:	f300 808e 	bgt.w	800ce40 <_dtoa_r+0x990>
 800cd24:	9b06      	ldr	r3, [sp, #24]
 800cd26:	2b02      	cmp	r3, #2
 800cd28:	dc51      	bgt.n	800cdce <_dtoa_r+0x91e>
 800cd2a:	e089      	b.n	800ce40 <_dtoa_r+0x990>
 800cd2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cd32:	e74b      	b.n	800cbcc <_dtoa_r+0x71c>
 800cd34:	9b03      	ldr	r3, [sp, #12]
 800cd36:	1e5e      	subs	r6, r3, #1
 800cd38:	9b07      	ldr	r3, [sp, #28]
 800cd3a:	42b3      	cmp	r3, r6
 800cd3c:	bfbf      	itttt	lt
 800cd3e:	9b07      	ldrlt	r3, [sp, #28]
 800cd40:	9607      	strlt	r6, [sp, #28]
 800cd42:	1af2      	sublt	r2, r6, r3
 800cd44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cd46:	bfb6      	itet	lt
 800cd48:	189b      	addlt	r3, r3, r2
 800cd4a:	1b9e      	subge	r6, r3, r6
 800cd4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cd4e:	9b03      	ldr	r3, [sp, #12]
 800cd50:	bfb8      	it	lt
 800cd52:	2600      	movlt	r6, #0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	bfb7      	itett	lt
 800cd58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cd5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cd60:	1a9d      	sublt	r5, r3, r2
 800cd62:	2300      	movlt	r3, #0
 800cd64:	e734      	b.n	800cbd0 <_dtoa_r+0x720>
 800cd66:	9e07      	ldr	r6, [sp, #28]
 800cd68:	9d04      	ldr	r5, [sp, #16]
 800cd6a:	9f08      	ldr	r7, [sp, #32]
 800cd6c:	e73b      	b.n	800cbe6 <_dtoa_r+0x736>
 800cd6e:	9a07      	ldr	r2, [sp, #28]
 800cd70:	e767      	b.n	800cc42 <_dtoa_r+0x792>
 800cd72:	9b06      	ldr	r3, [sp, #24]
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	dc18      	bgt.n	800cdaa <_dtoa_r+0x8fa>
 800cd78:	f1ba 0f00 	cmp.w	sl, #0
 800cd7c:	d115      	bne.n	800cdaa <_dtoa_r+0x8fa>
 800cd7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd82:	b993      	cbnz	r3, 800cdaa <_dtoa_r+0x8fa>
 800cd84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cd88:	0d1b      	lsrs	r3, r3, #20
 800cd8a:	051b      	lsls	r3, r3, #20
 800cd8c:	b183      	cbz	r3, 800cdb0 <_dtoa_r+0x900>
 800cd8e:	9b04      	ldr	r3, [sp, #16]
 800cd90:	3301      	adds	r3, #1
 800cd92:	9304      	str	r3, [sp, #16]
 800cd94:	9b05      	ldr	r3, [sp, #20]
 800cd96:	3301      	adds	r3, #1
 800cd98:	9305      	str	r3, [sp, #20]
 800cd9a:	f04f 0801 	mov.w	r8, #1
 800cd9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f47f af6a 	bne.w	800cc7a <_dtoa_r+0x7ca>
 800cda6:	2001      	movs	r0, #1
 800cda8:	e76f      	b.n	800cc8a <_dtoa_r+0x7da>
 800cdaa:	f04f 0800 	mov.w	r8, #0
 800cdae:	e7f6      	b.n	800cd9e <_dtoa_r+0x8ee>
 800cdb0:	4698      	mov	r8, r3
 800cdb2:	e7f4      	b.n	800cd9e <_dtoa_r+0x8ee>
 800cdb4:	f43f af7d 	beq.w	800ccb2 <_dtoa_r+0x802>
 800cdb8:	4618      	mov	r0, r3
 800cdba:	301c      	adds	r0, #28
 800cdbc:	e772      	b.n	800cca4 <_dtoa_r+0x7f4>
 800cdbe:	9b03      	ldr	r3, [sp, #12]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	dc37      	bgt.n	800ce34 <_dtoa_r+0x984>
 800cdc4:	9b06      	ldr	r3, [sp, #24]
 800cdc6:	2b02      	cmp	r3, #2
 800cdc8:	dd34      	ble.n	800ce34 <_dtoa_r+0x984>
 800cdca:	9b03      	ldr	r3, [sp, #12]
 800cdcc:	9302      	str	r3, [sp, #8]
 800cdce:	9b02      	ldr	r3, [sp, #8]
 800cdd0:	b96b      	cbnz	r3, 800cdee <_dtoa_r+0x93e>
 800cdd2:	4631      	mov	r1, r6
 800cdd4:	2205      	movs	r2, #5
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	f000 fe8e 	bl	800daf8 <__multadd>
 800cddc:	4601      	mov	r1, r0
 800cdde:	4606      	mov	r6, r0
 800cde0:	ee18 0a10 	vmov	r0, s16
 800cde4:	f001 f8f2 	bl	800dfcc <__mcmp>
 800cde8:	2800      	cmp	r0, #0
 800cdea:	f73f adbb 	bgt.w	800c964 <_dtoa_r+0x4b4>
 800cdee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdf0:	9d01      	ldr	r5, [sp, #4]
 800cdf2:	43db      	mvns	r3, r3
 800cdf4:	9300      	str	r3, [sp, #0]
 800cdf6:	f04f 0800 	mov.w	r8, #0
 800cdfa:	4631      	mov	r1, r6
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f000 fe59 	bl	800dab4 <_Bfree>
 800ce02:	2f00      	cmp	r7, #0
 800ce04:	f43f aea4 	beq.w	800cb50 <_dtoa_r+0x6a0>
 800ce08:	f1b8 0f00 	cmp.w	r8, #0
 800ce0c:	d005      	beq.n	800ce1a <_dtoa_r+0x96a>
 800ce0e:	45b8      	cmp	r8, r7
 800ce10:	d003      	beq.n	800ce1a <_dtoa_r+0x96a>
 800ce12:	4641      	mov	r1, r8
 800ce14:	4620      	mov	r0, r4
 800ce16:	f000 fe4d 	bl	800dab4 <_Bfree>
 800ce1a:	4639      	mov	r1, r7
 800ce1c:	4620      	mov	r0, r4
 800ce1e:	f000 fe49 	bl	800dab4 <_Bfree>
 800ce22:	e695      	b.n	800cb50 <_dtoa_r+0x6a0>
 800ce24:	2600      	movs	r6, #0
 800ce26:	4637      	mov	r7, r6
 800ce28:	e7e1      	b.n	800cdee <_dtoa_r+0x93e>
 800ce2a:	9700      	str	r7, [sp, #0]
 800ce2c:	4637      	mov	r7, r6
 800ce2e:	e599      	b.n	800c964 <_dtoa_r+0x4b4>
 800ce30:	40240000 	.word	0x40240000
 800ce34:	9b08      	ldr	r3, [sp, #32]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	f000 80ca 	beq.w	800cfd0 <_dtoa_r+0xb20>
 800ce3c:	9b03      	ldr	r3, [sp, #12]
 800ce3e:	9302      	str	r3, [sp, #8]
 800ce40:	2d00      	cmp	r5, #0
 800ce42:	dd05      	ble.n	800ce50 <_dtoa_r+0x9a0>
 800ce44:	4639      	mov	r1, r7
 800ce46:	462a      	mov	r2, r5
 800ce48:	4620      	mov	r0, r4
 800ce4a:	f001 f84f 	bl	800deec <__lshift>
 800ce4e:	4607      	mov	r7, r0
 800ce50:	f1b8 0f00 	cmp.w	r8, #0
 800ce54:	d05b      	beq.n	800cf0e <_dtoa_r+0xa5e>
 800ce56:	6879      	ldr	r1, [r7, #4]
 800ce58:	4620      	mov	r0, r4
 800ce5a:	f000 fdeb 	bl	800da34 <_Balloc>
 800ce5e:	4605      	mov	r5, r0
 800ce60:	b928      	cbnz	r0, 800ce6e <_dtoa_r+0x9be>
 800ce62:	4b87      	ldr	r3, [pc, #540]	; (800d080 <_dtoa_r+0xbd0>)
 800ce64:	4602      	mov	r2, r0
 800ce66:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ce6a:	f7ff bb3b 	b.w	800c4e4 <_dtoa_r+0x34>
 800ce6e:	693a      	ldr	r2, [r7, #16]
 800ce70:	3202      	adds	r2, #2
 800ce72:	0092      	lsls	r2, r2, #2
 800ce74:	f107 010c 	add.w	r1, r7, #12
 800ce78:	300c      	adds	r0, #12
 800ce7a:	f7fd fd06 	bl	800a88a <memcpy>
 800ce7e:	2201      	movs	r2, #1
 800ce80:	4629      	mov	r1, r5
 800ce82:	4620      	mov	r0, r4
 800ce84:	f001 f832 	bl	800deec <__lshift>
 800ce88:	9b01      	ldr	r3, [sp, #4]
 800ce8a:	f103 0901 	add.w	r9, r3, #1
 800ce8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ce92:	4413      	add	r3, r2
 800ce94:	9305      	str	r3, [sp, #20]
 800ce96:	f00a 0301 	and.w	r3, sl, #1
 800ce9a:	46b8      	mov	r8, r7
 800ce9c:	9304      	str	r3, [sp, #16]
 800ce9e:	4607      	mov	r7, r0
 800cea0:	4631      	mov	r1, r6
 800cea2:	ee18 0a10 	vmov	r0, s16
 800cea6:	f7ff fa77 	bl	800c398 <quorem>
 800ceaa:	4641      	mov	r1, r8
 800ceac:	9002      	str	r0, [sp, #8]
 800ceae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ceb2:	ee18 0a10 	vmov	r0, s16
 800ceb6:	f001 f889 	bl	800dfcc <__mcmp>
 800ceba:	463a      	mov	r2, r7
 800cebc:	9003      	str	r0, [sp, #12]
 800cebe:	4631      	mov	r1, r6
 800cec0:	4620      	mov	r0, r4
 800cec2:	f001 f89f 	bl	800e004 <__mdiff>
 800cec6:	68c2      	ldr	r2, [r0, #12]
 800cec8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800cecc:	4605      	mov	r5, r0
 800cece:	bb02      	cbnz	r2, 800cf12 <_dtoa_r+0xa62>
 800ced0:	4601      	mov	r1, r0
 800ced2:	ee18 0a10 	vmov	r0, s16
 800ced6:	f001 f879 	bl	800dfcc <__mcmp>
 800ceda:	4602      	mov	r2, r0
 800cedc:	4629      	mov	r1, r5
 800cede:	4620      	mov	r0, r4
 800cee0:	9207      	str	r2, [sp, #28]
 800cee2:	f000 fde7 	bl	800dab4 <_Bfree>
 800cee6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ceea:	ea43 0102 	orr.w	r1, r3, r2
 800ceee:	9b04      	ldr	r3, [sp, #16]
 800cef0:	430b      	orrs	r3, r1
 800cef2:	464d      	mov	r5, r9
 800cef4:	d10f      	bne.n	800cf16 <_dtoa_r+0xa66>
 800cef6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cefa:	d02a      	beq.n	800cf52 <_dtoa_r+0xaa2>
 800cefc:	9b03      	ldr	r3, [sp, #12]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	dd02      	ble.n	800cf08 <_dtoa_r+0xa58>
 800cf02:	9b02      	ldr	r3, [sp, #8]
 800cf04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cf08:	f88b a000 	strb.w	sl, [fp]
 800cf0c:	e775      	b.n	800cdfa <_dtoa_r+0x94a>
 800cf0e:	4638      	mov	r0, r7
 800cf10:	e7ba      	b.n	800ce88 <_dtoa_r+0x9d8>
 800cf12:	2201      	movs	r2, #1
 800cf14:	e7e2      	b.n	800cedc <_dtoa_r+0xa2c>
 800cf16:	9b03      	ldr	r3, [sp, #12]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	db04      	blt.n	800cf26 <_dtoa_r+0xa76>
 800cf1c:	9906      	ldr	r1, [sp, #24]
 800cf1e:	430b      	orrs	r3, r1
 800cf20:	9904      	ldr	r1, [sp, #16]
 800cf22:	430b      	orrs	r3, r1
 800cf24:	d122      	bne.n	800cf6c <_dtoa_r+0xabc>
 800cf26:	2a00      	cmp	r2, #0
 800cf28:	ddee      	ble.n	800cf08 <_dtoa_r+0xa58>
 800cf2a:	ee18 1a10 	vmov	r1, s16
 800cf2e:	2201      	movs	r2, #1
 800cf30:	4620      	mov	r0, r4
 800cf32:	f000 ffdb 	bl	800deec <__lshift>
 800cf36:	4631      	mov	r1, r6
 800cf38:	ee08 0a10 	vmov	s16, r0
 800cf3c:	f001 f846 	bl	800dfcc <__mcmp>
 800cf40:	2800      	cmp	r0, #0
 800cf42:	dc03      	bgt.n	800cf4c <_dtoa_r+0xa9c>
 800cf44:	d1e0      	bne.n	800cf08 <_dtoa_r+0xa58>
 800cf46:	f01a 0f01 	tst.w	sl, #1
 800cf4a:	d0dd      	beq.n	800cf08 <_dtoa_r+0xa58>
 800cf4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cf50:	d1d7      	bne.n	800cf02 <_dtoa_r+0xa52>
 800cf52:	2339      	movs	r3, #57	; 0x39
 800cf54:	f88b 3000 	strb.w	r3, [fp]
 800cf58:	462b      	mov	r3, r5
 800cf5a:	461d      	mov	r5, r3
 800cf5c:	3b01      	subs	r3, #1
 800cf5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cf62:	2a39      	cmp	r2, #57	; 0x39
 800cf64:	d071      	beq.n	800d04a <_dtoa_r+0xb9a>
 800cf66:	3201      	adds	r2, #1
 800cf68:	701a      	strb	r2, [r3, #0]
 800cf6a:	e746      	b.n	800cdfa <_dtoa_r+0x94a>
 800cf6c:	2a00      	cmp	r2, #0
 800cf6e:	dd07      	ble.n	800cf80 <_dtoa_r+0xad0>
 800cf70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cf74:	d0ed      	beq.n	800cf52 <_dtoa_r+0xaa2>
 800cf76:	f10a 0301 	add.w	r3, sl, #1
 800cf7a:	f88b 3000 	strb.w	r3, [fp]
 800cf7e:	e73c      	b.n	800cdfa <_dtoa_r+0x94a>
 800cf80:	9b05      	ldr	r3, [sp, #20]
 800cf82:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cf86:	4599      	cmp	r9, r3
 800cf88:	d047      	beq.n	800d01a <_dtoa_r+0xb6a>
 800cf8a:	ee18 1a10 	vmov	r1, s16
 800cf8e:	2300      	movs	r3, #0
 800cf90:	220a      	movs	r2, #10
 800cf92:	4620      	mov	r0, r4
 800cf94:	f000 fdb0 	bl	800daf8 <__multadd>
 800cf98:	45b8      	cmp	r8, r7
 800cf9a:	ee08 0a10 	vmov	s16, r0
 800cf9e:	f04f 0300 	mov.w	r3, #0
 800cfa2:	f04f 020a 	mov.w	r2, #10
 800cfa6:	4641      	mov	r1, r8
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	d106      	bne.n	800cfba <_dtoa_r+0xb0a>
 800cfac:	f000 fda4 	bl	800daf8 <__multadd>
 800cfb0:	4680      	mov	r8, r0
 800cfb2:	4607      	mov	r7, r0
 800cfb4:	f109 0901 	add.w	r9, r9, #1
 800cfb8:	e772      	b.n	800cea0 <_dtoa_r+0x9f0>
 800cfba:	f000 fd9d 	bl	800daf8 <__multadd>
 800cfbe:	4639      	mov	r1, r7
 800cfc0:	4680      	mov	r8, r0
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	220a      	movs	r2, #10
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f000 fd96 	bl	800daf8 <__multadd>
 800cfcc:	4607      	mov	r7, r0
 800cfce:	e7f1      	b.n	800cfb4 <_dtoa_r+0xb04>
 800cfd0:	9b03      	ldr	r3, [sp, #12]
 800cfd2:	9302      	str	r3, [sp, #8]
 800cfd4:	9d01      	ldr	r5, [sp, #4]
 800cfd6:	ee18 0a10 	vmov	r0, s16
 800cfda:	4631      	mov	r1, r6
 800cfdc:	f7ff f9dc 	bl	800c398 <quorem>
 800cfe0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cfe4:	9b01      	ldr	r3, [sp, #4]
 800cfe6:	f805 ab01 	strb.w	sl, [r5], #1
 800cfea:	1aea      	subs	r2, r5, r3
 800cfec:	9b02      	ldr	r3, [sp, #8]
 800cfee:	4293      	cmp	r3, r2
 800cff0:	dd09      	ble.n	800d006 <_dtoa_r+0xb56>
 800cff2:	ee18 1a10 	vmov	r1, s16
 800cff6:	2300      	movs	r3, #0
 800cff8:	220a      	movs	r2, #10
 800cffa:	4620      	mov	r0, r4
 800cffc:	f000 fd7c 	bl	800daf8 <__multadd>
 800d000:	ee08 0a10 	vmov	s16, r0
 800d004:	e7e7      	b.n	800cfd6 <_dtoa_r+0xb26>
 800d006:	9b02      	ldr	r3, [sp, #8]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	bfc8      	it	gt
 800d00c:	461d      	movgt	r5, r3
 800d00e:	9b01      	ldr	r3, [sp, #4]
 800d010:	bfd8      	it	le
 800d012:	2501      	movle	r5, #1
 800d014:	441d      	add	r5, r3
 800d016:	f04f 0800 	mov.w	r8, #0
 800d01a:	ee18 1a10 	vmov	r1, s16
 800d01e:	2201      	movs	r2, #1
 800d020:	4620      	mov	r0, r4
 800d022:	f000 ff63 	bl	800deec <__lshift>
 800d026:	4631      	mov	r1, r6
 800d028:	ee08 0a10 	vmov	s16, r0
 800d02c:	f000 ffce 	bl	800dfcc <__mcmp>
 800d030:	2800      	cmp	r0, #0
 800d032:	dc91      	bgt.n	800cf58 <_dtoa_r+0xaa8>
 800d034:	d102      	bne.n	800d03c <_dtoa_r+0xb8c>
 800d036:	f01a 0f01 	tst.w	sl, #1
 800d03a:	d18d      	bne.n	800cf58 <_dtoa_r+0xaa8>
 800d03c:	462b      	mov	r3, r5
 800d03e:	461d      	mov	r5, r3
 800d040:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d044:	2a30      	cmp	r2, #48	; 0x30
 800d046:	d0fa      	beq.n	800d03e <_dtoa_r+0xb8e>
 800d048:	e6d7      	b.n	800cdfa <_dtoa_r+0x94a>
 800d04a:	9a01      	ldr	r2, [sp, #4]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d184      	bne.n	800cf5a <_dtoa_r+0xaaa>
 800d050:	9b00      	ldr	r3, [sp, #0]
 800d052:	3301      	adds	r3, #1
 800d054:	9300      	str	r3, [sp, #0]
 800d056:	2331      	movs	r3, #49	; 0x31
 800d058:	7013      	strb	r3, [r2, #0]
 800d05a:	e6ce      	b.n	800cdfa <_dtoa_r+0x94a>
 800d05c:	4b09      	ldr	r3, [pc, #36]	; (800d084 <_dtoa_r+0xbd4>)
 800d05e:	f7ff ba95 	b.w	800c58c <_dtoa_r+0xdc>
 800d062:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d064:	2b00      	cmp	r3, #0
 800d066:	f47f aa6e 	bne.w	800c546 <_dtoa_r+0x96>
 800d06a:	4b07      	ldr	r3, [pc, #28]	; (800d088 <_dtoa_r+0xbd8>)
 800d06c:	f7ff ba8e 	b.w	800c58c <_dtoa_r+0xdc>
 800d070:	9b02      	ldr	r3, [sp, #8]
 800d072:	2b00      	cmp	r3, #0
 800d074:	dcae      	bgt.n	800cfd4 <_dtoa_r+0xb24>
 800d076:	9b06      	ldr	r3, [sp, #24]
 800d078:	2b02      	cmp	r3, #2
 800d07a:	f73f aea8 	bgt.w	800cdce <_dtoa_r+0x91e>
 800d07e:	e7a9      	b.n	800cfd4 <_dtoa_r+0xb24>
 800d080:	0800f3df 	.word	0x0800f3df
 800d084:	0800f2ec 	.word	0x0800f2ec
 800d088:	0800f360 	.word	0x0800f360

0800d08c <__sflush_r>:
 800d08c:	898a      	ldrh	r2, [r1, #12]
 800d08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d092:	4605      	mov	r5, r0
 800d094:	0710      	lsls	r0, r2, #28
 800d096:	460c      	mov	r4, r1
 800d098:	d458      	bmi.n	800d14c <__sflush_r+0xc0>
 800d09a:	684b      	ldr	r3, [r1, #4]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	dc05      	bgt.n	800d0ac <__sflush_r+0x20>
 800d0a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	dc02      	bgt.n	800d0ac <__sflush_r+0x20>
 800d0a6:	2000      	movs	r0, #0
 800d0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0ae:	2e00      	cmp	r6, #0
 800d0b0:	d0f9      	beq.n	800d0a6 <__sflush_r+0x1a>
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d0b8:	682f      	ldr	r7, [r5, #0]
 800d0ba:	602b      	str	r3, [r5, #0]
 800d0bc:	d032      	beq.n	800d124 <__sflush_r+0x98>
 800d0be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0c0:	89a3      	ldrh	r3, [r4, #12]
 800d0c2:	075a      	lsls	r2, r3, #29
 800d0c4:	d505      	bpl.n	800d0d2 <__sflush_r+0x46>
 800d0c6:	6863      	ldr	r3, [r4, #4]
 800d0c8:	1ac0      	subs	r0, r0, r3
 800d0ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0cc:	b10b      	cbz	r3, 800d0d2 <__sflush_r+0x46>
 800d0ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0d0:	1ac0      	subs	r0, r0, r3
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0d8:	6a21      	ldr	r1, [r4, #32]
 800d0da:	4628      	mov	r0, r5
 800d0dc:	47b0      	blx	r6
 800d0de:	1c43      	adds	r3, r0, #1
 800d0e0:	89a3      	ldrh	r3, [r4, #12]
 800d0e2:	d106      	bne.n	800d0f2 <__sflush_r+0x66>
 800d0e4:	6829      	ldr	r1, [r5, #0]
 800d0e6:	291d      	cmp	r1, #29
 800d0e8:	d82c      	bhi.n	800d144 <__sflush_r+0xb8>
 800d0ea:	4a2a      	ldr	r2, [pc, #168]	; (800d194 <__sflush_r+0x108>)
 800d0ec:	40ca      	lsrs	r2, r1
 800d0ee:	07d6      	lsls	r6, r2, #31
 800d0f0:	d528      	bpl.n	800d144 <__sflush_r+0xb8>
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	6062      	str	r2, [r4, #4]
 800d0f6:	04d9      	lsls	r1, r3, #19
 800d0f8:	6922      	ldr	r2, [r4, #16]
 800d0fa:	6022      	str	r2, [r4, #0]
 800d0fc:	d504      	bpl.n	800d108 <__sflush_r+0x7c>
 800d0fe:	1c42      	adds	r2, r0, #1
 800d100:	d101      	bne.n	800d106 <__sflush_r+0x7a>
 800d102:	682b      	ldr	r3, [r5, #0]
 800d104:	b903      	cbnz	r3, 800d108 <__sflush_r+0x7c>
 800d106:	6560      	str	r0, [r4, #84]	; 0x54
 800d108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d10a:	602f      	str	r7, [r5, #0]
 800d10c:	2900      	cmp	r1, #0
 800d10e:	d0ca      	beq.n	800d0a6 <__sflush_r+0x1a>
 800d110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d114:	4299      	cmp	r1, r3
 800d116:	d002      	beq.n	800d11e <__sflush_r+0x92>
 800d118:	4628      	mov	r0, r5
 800d11a:	f001 f963 	bl	800e3e4 <_free_r>
 800d11e:	2000      	movs	r0, #0
 800d120:	6360      	str	r0, [r4, #52]	; 0x34
 800d122:	e7c1      	b.n	800d0a8 <__sflush_r+0x1c>
 800d124:	6a21      	ldr	r1, [r4, #32]
 800d126:	2301      	movs	r3, #1
 800d128:	4628      	mov	r0, r5
 800d12a:	47b0      	blx	r6
 800d12c:	1c41      	adds	r1, r0, #1
 800d12e:	d1c7      	bne.n	800d0c0 <__sflush_r+0x34>
 800d130:	682b      	ldr	r3, [r5, #0]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d0c4      	beq.n	800d0c0 <__sflush_r+0x34>
 800d136:	2b1d      	cmp	r3, #29
 800d138:	d001      	beq.n	800d13e <__sflush_r+0xb2>
 800d13a:	2b16      	cmp	r3, #22
 800d13c:	d101      	bne.n	800d142 <__sflush_r+0xb6>
 800d13e:	602f      	str	r7, [r5, #0]
 800d140:	e7b1      	b.n	800d0a6 <__sflush_r+0x1a>
 800d142:	89a3      	ldrh	r3, [r4, #12]
 800d144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d148:	81a3      	strh	r3, [r4, #12]
 800d14a:	e7ad      	b.n	800d0a8 <__sflush_r+0x1c>
 800d14c:	690f      	ldr	r7, [r1, #16]
 800d14e:	2f00      	cmp	r7, #0
 800d150:	d0a9      	beq.n	800d0a6 <__sflush_r+0x1a>
 800d152:	0793      	lsls	r3, r2, #30
 800d154:	680e      	ldr	r6, [r1, #0]
 800d156:	bf08      	it	eq
 800d158:	694b      	ldreq	r3, [r1, #20]
 800d15a:	600f      	str	r7, [r1, #0]
 800d15c:	bf18      	it	ne
 800d15e:	2300      	movne	r3, #0
 800d160:	eba6 0807 	sub.w	r8, r6, r7
 800d164:	608b      	str	r3, [r1, #8]
 800d166:	f1b8 0f00 	cmp.w	r8, #0
 800d16a:	dd9c      	ble.n	800d0a6 <__sflush_r+0x1a>
 800d16c:	6a21      	ldr	r1, [r4, #32]
 800d16e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d170:	4643      	mov	r3, r8
 800d172:	463a      	mov	r2, r7
 800d174:	4628      	mov	r0, r5
 800d176:	47b0      	blx	r6
 800d178:	2800      	cmp	r0, #0
 800d17a:	dc06      	bgt.n	800d18a <__sflush_r+0xfe>
 800d17c:	89a3      	ldrh	r3, [r4, #12]
 800d17e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d182:	81a3      	strh	r3, [r4, #12]
 800d184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d188:	e78e      	b.n	800d0a8 <__sflush_r+0x1c>
 800d18a:	4407      	add	r7, r0
 800d18c:	eba8 0800 	sub.w	r8, r8, r0
 800d190:	e7e9      	b.n	800d166 <__sflush_r+0xda>
 800d192:	bf00      	nop
 800d194:	20400001 	.word	0x20400001

0800d198 <_fflush_r>:
 800d198:	b538      	push	{r3, r4, r5, lr}
 800d19a:	690b      	ldr	r3, [r1, #16]
 800d19c:	4605      	mov	r5, r0
 800d19e:	460c      	mov	r4, r1
 800d1a0:	b913      	cbnz	r3, 800d1a8 <_fflush_r+0x10>
 800d1a2:	2500      	movs	r5, #0
 800d1a4:	4628      	mov	r0, r5
 800d1a6:	bd38      	pop	{r3, r4, r5, pc}
 800d1a8:	b118      	cbz	r0, 800d1b2 <_fflush_r+0x1a>
 800d1aa:	6983      	ldr	r3, [r0, #24]
 800d1ac:	b90b      	cbnz	r3, 800d1b2 <_fflush_r+0x1a>
 800d1ae:	f7fd faa7 	bl	800a700 <__sinit>
 800d1b2:	4b14      	ldr	r3, [pc, #80]	; (800d204 <_fflush_r+0x6c>)
 800d1b4:	429c      	cmp	r4, r3
 800d1b6:	d11b      	bne.n	800d1f0 <_fflush_r+0x58>
 800d1b8:	686c      	ldr	r4, [r5, #4]
 800d1ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d0ef      	beq.n	800d1a2 <_fflush_r+0xa>
 800d1c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1c4:	07d0      	lsls	r0, r2, #31
 800d1c6:	d404      	bmi.n	800d1d2 <_fflush_r+0x3a>
 800d1c8:	0599      	lsls	r1, r3, #22
 800d1ca:	d402      	bmi.n	800d1d2 <_fflush_r+0x3a>
 800d1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1ce:	f7fd fb5a 	bl	800a886 <__retarget_lock_acquire_recursive>
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	4621      	mov	r1, r4
 800d1d6:	f7ff ff59 	bl	800d08c <__sflush_r>
 800d1da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1dc:	07da      	lsls	r2, r3, #31
 800d1de:	4605      	mov	r5, r0
 800d1e0:	d4e0      	bmi.n	800d1a4 <_fflush_r+0xc>
 800d1e2:	89a3      	ldrh	r3, [r4, #12]
 800d1e4:	059b      	lsls	r3, r3, #22
 800d1e6:	d4dd      	bmi.n	800d1a4 <_fflush_r+0xc>
 800d1e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1ea:	f7fd fb4d 	bl	800a888 <__retarget_lock_release_recursive>
 800d1ee:	e7d9      	b.n	800d1a4 <_fflush_r+0xc>
 800d1f0:	4b05      	ldr	r3, [pc, #20]	; (800d208 <_fflush_r+0x70>)
 800d1f2:	429c      	cmp	r4, r3
 800d1f4:	d101      	bne.n	800d1fa <_fflush_r+0x62>
 800d1f6:	68ac      	ldr	r4, [r5, #8]
 800d1f8:	e7df      	b.n	800d1ba <_fflush_r+0x22>
 800d1fa:	4b04      	ldr	r3, [pc, #16]	; (800d20c <_fflush_r+0x74>)
 800d1fc:	429c      	cmp	r4, r3
 800d1fe:	bf08      	it	eq
 800d200:	68ec      	ldreq	r4, [r5, #12]
 800d202:	e7da      	b.n	800d1ba <_fflush_r+0x22>
 800d204:	0800f298 	.word	0x0800f298
 800d208:	0800f2b8 	.word	0x0800f2b8
 800d20c:	0800f278 	.word	0x0800f278

0800d210 <rshift>:
 800d210:	6903      	ldr	r3, [r0, #16]
 800d212:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d216:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d21a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d21e:	f100 0414 	add.w	r4, r0, #20
 800d222:	dd45      	ble.n	800d2b0 <rshift+0xa0>
 800d224:	f011 011f 	ands.w	r1, r1, #31
 800d228:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d22c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d230:	d10c      	bne.n	800d24c <rshift+0x3c>
 800d232:	f100 0710 	add.w	r7, r0, #16
 800d236:	4629      	mov	r1, r5
 800d238:	42b1      	cmp	r1, r6
 800d23a:	d334      	bcc.n	800d2a6 <rshift+0x96>
 800d23c:	1a9b      	subs	r3, r3, r2
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	1eea      	subs	r2, r5, #3
 800d242:	4296      	cmp	r6, r2
 800d244:	bf38      	it	cc
 800d246:	2300      	movcc	r3, #0
 800d248:	4423      	add	r3, r4
 800d24a:	e015      	b.n	800d278 <rshift+0x68>
 800d24c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d250:	f1c1 0820 	rsb	r8, r1, #32
 800d254:	40cf      	lsrs	r7, r1
 800d256:	f105 0e04 	add.w	lr, r5, #4
 800d25a:	46a1      	mov	r9, r4
 800d25c:	4576      	cmp	r6, lr
 800d25e:	46f4      	mov	ip, lr
 800d260:	d815      	bhi.n	800d28e <rshift+0x7e>
 800d262:	1a9a      	subs	r2, r3, r2
 800d264:	0092      	lsls	r2, r2, #2
 800d266:	3a04      	subs	r2, #4
 800d268:	3501      	adds	r5, #1
 800d26a:	42ae      	cmp	r6, r5
 800d26c:	bf38      	it	cc
 800d26e:	2200      	movcc	r2, #0
 800d270:	18a3      	adds	r3, r4, r2
 800d272:	50a7      	str	r7, [r4, r2]
 800d274:	b107      	cbz	r7, 800d278 <rshift+0x68>
 800d276:	3304      	adds	r3, #4
 800d278:	1b1a      	subs	r2, r3, r4
 800d27a:	42a3      	cmp	r3, r4
 800d27c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d280:	bf08      	it	eq
 800d282:	2300      	moveq	r3, #0
 800d284:	6102      	str	r2, [r0, #16]
 800d286:	bf08      	it	eq
 800d288:	6143      	streq	r3, [r0, #20]
 800d28a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d28e:	f8dc c000 	ldr.w	ip, [ip]
 800d292:	fa0c fc08 	lsl.w	ip, ip, r8
 800d296:	ea4c 0707 	orr.w	r7, ip, r7
 800d29a:	f849 7b04 	str.w	r7, [r9], #4
 800d29e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d2a2:	40cf      	lsrs	r7, r1
 800d2a4:	e7da      	b.n	800d25c <rshift+0x4c>
 800d2a6:	f851 cb04 	ldr.w	ip, [r1], #4
 800d2aa:	f847 cf04 	str.w	ip, [r7, #4]!
 800d2ae:	e7c3      	b.n	800d238 <rshift+0x28>
 800d2b0:	4623      	mov	r3, r4
 800d2b2:	e7e1      	b.n	800d278 <rshift+0x68>

0800d2b4 <__hexdig_fun>:
 800d2b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d2b8:	2b09      	cmp	r3, #9
 800d2ba:	d802      	bhi.n	800d2c2 <__hexdig_fun+0xe>
 800d2bc:	3820      	subs	r0, #32
 800d2be:	b2c0      	uxtb	r0, r0
 800d2c0:	4770      	bx	lr
 800d2c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d2c6:	2b05      	cmp	r3, #5
 800d2c8:	d801      	bhi.n	800d2ce <__hexdig_fun+0x1a>
 800d2ca:	3847      	subs	r0, #71	; 0x47
 800d2cc:	e7f7      	b.n	800d2be <__hexdig_fun+0xa>
 800d2ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d2d2:	2b05      	cmp	r3, #5
 800d2d4:	d801      	bhi.n	800d2da <__hexdig_fun+0x26>
 800d2d6:	3827      	subs	r0, #39	; 0x27
 800d2d8:	e7f1      	b.n	800d2be <__hexdig_fun+0xa>
 800d2da:	2000      	movs	r0, #0
 800d2dc:	4770      	bx	lr
	...

0800d2e0 <__gethex>:
 800d2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e4:	ed2d 8b02 	vpush	{d8}
 800d2e8:	b089      	sub	sp, #36	; 0x24
 800d2ea:	ee08 0a10 	vmov	s16, r0
 800d2ee:	9304      	str	r3, [sp, #16]
 800d2f0:	4bb4      	ldr	r3, [pc, #720]	; (800d5c4 <__gethex+0x2e4>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	9301      	str	r3, [sp, #4]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	468b      	mov	fp, r1
 800d2fa:	4690      	mov	r8, r2
 800d2fc:	f7f2 ff70 	bl	80001e0 <strlen>
 800d300:	9b01      	ldr	r3, [sp, #4]
 800d302:	f8db 2000 	ldr.w	r2, [fp]
 800d306:	4403      	add	r3, r0
 800d308:	4682      	mov	sl, r0
 800d30a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d30e:	9305      	str	r3, [sp, #20]
 800d310:	1c93      	adds	r3, r2, #2
 800d312:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d316:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d31a:	32fe      	adds	r2, #254	; 0xfe
 800d31c:	18d1      	adds	r1, r2, r3
 800d31e:	461f      	mov	r7, r3
 800d320:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d324:	9100      	str	r1, [sp, #0]
 800d326:	2830      	cmp	r0, #48	; 0x30
 800d328:	d0f8      	beq.n	800d31c <__gethex+0x3c>
 800d32a:	f7ff ffc3 	bl	800d2b4 <__hexdig_fun>
 800d32e:	4604      	mov	r4, r0
 800d330:	2800      	cmp	r0, #0
 800d332:	d13a      	bne.n	800d3aa <__gethex+0xca>
 800d334:	9901      	ldr	r1, [sp, #4]
 800d336:	4652      	mov	r2, sl
 800d338:	4638      	mov	r0, r7
 800d33a:	f7fe f906 	bl	800b54a <strncmp>
 800d33e:	4605      	mov	r5, r0
 800d340:	2800      	cmp	r0, #0
 800d342:	d168      	bne.n	800d416 <__gethex+0x136>
 800d344:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d348:	eb07 060a 	add.w	r6, r7, sl
 800d34c:	f7ff ffb2 	bl	800d2b4 <__hexdig_fun>
 800d350:	2800      	cmp	r0, #0
 800d352:	d062      	beq.n	800d41a <__gethex+0x13a>
 800d354:	4633      	mov	r3, r6
 800d356:	7818      	ldrb	r0, [r3, #0]
 800d358:	2830      	cmp	r0, #48	; 0x30
 800d35a:	461f      	mov	r7, r3
 800d35c:	f103 0301 	add.w	r3, r3, #1
 800d360:	d0f9      	beq.n	800d356 <__gethex+0x76>
 800d362:	f7ff ffa7 	bl	800d2b4 <__hexdig_fun>
 800d366:	2301      	movs	r3, #1
 800d368:	fab0 f480 	clz	r4, r0
 800d36c:	0964      	lsrs	r4, r4, #5
 800d36e:	4635      	mov	r5, r6
 800d370:	9300      	str	r3, [sp, #0]
 800d372:	463a      	mov	r2, r7
 800d374:	4616      	mov	r6, r2
 800d376:	3201      	adds	r2, #1
 800d378:	7830      	ldrb	r0, [r6, #0]
 800d37a:	f7ff ff9b 	bl	800d2b4 <__hexdig_fun>
 800d37e:	2800      	cmp	r0, #0
 800d380:	d1f8      	bne.n	800d374 <__gethex+0x94>
 800d382:	9901      	ldr	r1, [sp, #4]
 800d384:	4652      	mov	r2, sl
 800d386:	4630      	mov	r0, r6
 800d388:	f7fe f8df 	bl	800b54a <strncmp>
 800d38c:	b980      	cbnz	r0, 800d3b0 <__gethex+0xd0>
 800d38e:	b94d      	cbnz	r5, 800d3a4 <__gethex+0xc4>
 800d390:	eb06 050a 	add.w	r5, r6, sl
 800d394:	462a      	mov	r2, r5
 800d396:	4616      	mov	r6, r2
 800d398:	3201      	adds	r2, #1
 800d39a:	7830      	ldrb	r0, [r6, #0]
 800d39c:	f7ff ff8a 	bl	800d2b4 <__hexdig_fun>
 800d3a0:	2800      	cmp	r0, #0
 800d3a2:	d1f8      	bne.n	800d396 <__gethex+0xb6>
 800d3a4:	1bad      	subs	r5, r5, r6
 800d3a6:	00ad      	lsls	r5, r5, #2
 800d3a8:	e004      	b.n	800d3b4 <__gethex+0xd4>
 800d3aa:	2400      	movs	r4, #0
 800d3ac:	4625      	mov	r5, r4
 800d3ae:	e7e0      	b.n	800d372 <__gethex+0x92>
 800d3b0:	2d00      	cmp	r5, #0
 800d3b2:	d1f7      	bne.n	800d3a4 <__gethex+0xc4>
 800d3b4:	7833      	ldrb	r3, [r6, #0]
 800d3b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d3ba:	2b50      	cmp	r3, #80	; 0x50
 800d3bc:	d13b      	bne.n	800d436 <__gethex+0x156>
 800d3be:	7873      	ldrb	r3, [r6, #1]
 800d3c0:	2b2b      	cmp	r3, #43	; 0x2b
 800d3c2:	d02c      	beq.n	800d41e <__gethex+0x13e>
 800d3c4:	2b2d      	cmp	r3, #45	; 0x2d
 800d3c6:	d02e      	beq.n	800d426 <__gethex+0x146>
 800d3c8:	1c71      	adds	r1, r6, #1
 800d3ca:	f04f 0900 	mov.w	r9, #0
 800d3ce:	7808      	ldrb	r0, [r1, #0]
 800d3d0:	f7ff ff70 	bl	800d2b4 <__hexdig_fun>
 800d3d4:	1e43      	subs	r3, r0, #1
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	2b18      	cmp	r3, #24
 800d3da:	d82c      	bhi.n	800d436 <__gethex+0x156>
 800d3dc:	f1a0 0210 	sub.w	r2, r0, #16
 800d3e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d3e4:	f7ff ff66 	bl	800d2b4 <__hexdig_fun>
 800d3e8:	1e43      	subs	r3, r0, #1
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	2b18      	cmp	r3, #24
 800d3ee:	d91d      	bls.n	800d42c <__gethex+0x14c>
 800d3f0:	f1b9 0f00 	cmp.w	r9, #0
 800d3f4:	d000      	beq.n	800d3f8 <__gethex+0x118>
 800d3f6:	4252      	negs	r2, r2
 800d3f8:	4415      	add	r5, r2
 800d3fa:	f8cb 1000 	str.w	r1, [fp]
 800d3fe:	b1e4      	cbz	r4, 800d43a <__gethex+0x15a>
 800d400:	9b00      	ldr	r3, [sp, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	bf14      	ite	ne
 800d406:	2700      	movne	r7, #0
 800d408:	2706      	moveq	r7, #6
 800d40a:	4638      	mov	r0, r7
 800d40c:	b009      	add	sp, #36	; 0x24
 800d40e:	ecbd 8b02 	vpop	{d8}
 800d412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d416:	463e      	mov	r6, r7
 800d418:	4625      	mov	r5, r4
 800d41a:	2401      	movs	r4, #1
 800d41c:	e7ca      	b.n	800d3b4 <__gethex+0xd4>
 800d41e:	f04f 0900 	mov.w	r9, #0
 800d422:	1cb1      	adds	r1, r6, #2
 800d424:	e7d3      	b.n	800d3ce <__gethex+0xee>
 800d426:	f04f 0901 	mov.w	r9, #1
 800d42a:	e7fa      	b.n	800d422 <__gethex+0x142>
 800d42c:	230a      	movs	r3, #10
 800d42e:	fb03 0202 	mla	r2, r3, r2, r0
 800d432:	3a10      	subs	r2, #16
 800d434:	e7d4      	b.n	800d3e0 <__gethex+0x100>
 800d436:	4631      	mov	r1, r6
 800d438:	e7df      	b.n	800d3fa <__gethex+0x11a>
 800d43a:	1bf3      	subs	r3, r6, r7
 800d43c:	3b01      	subs	r3, #1
 800d43e:	4621      	mov	r1, r4
 800d440:	2b07      	cmp	r3, #7
 800d442:	dc0b      	bgt.n	800d45c <__gethex+0x17c>
 800d444:	ee18 0a10 	vmov	r0, s16
 800d448:	f000 faf4 	bl	800da34 <_Balloc>
 800d44c:	4604      	mov	r4, r0
 800d44e:	b940      	cbnz	r0, 800d462 <__gethex+0x182>
 800d450:	4b5d      	ldr	r3, [pc, #372]	; (800d5c8 <__gethex+0x2e8>)
 800d452:	4602      	mov	r2, r0
 800d454:	21de      	movs	r1, #222	; 0xde
 800d456:	485d      	ldr	r0, [pc, #372]	; (800d5cc <__gethex+0x2ec>)
 800d458:	f001 f994 	bl	800e784 <__assert_func>
 800d45c:	3101      	adds	r1, #1
 800d45e:	105b      	asrs	r3, r3, #1
 800d460:	e7ee      	b.n	800d440 <__gethex+0x160>
 800d462:	f100 0914 	add.w	r9, r0, #20
 800d466:	f04f 0b00 	mov.w	fp, #0
 800d46a:	f1ca 0301 	rsb	r3, sl, #1
 800d46e:	f8cd 9008 	str.w	r9, [sp, #8]
 800d472:	f8cd b000 	str.w	fp, [sp]
 800d476:	9306      	str	r3, [sp, #24]
 800d478:	42b7      	cmp	r7, r6
 800d47a:	d340      	bcc.n	800d4fe <__gethex+0x21e>
 800d47c:	9802      	ldr	r0, [sp, #8]
 800d47e:	9b00      	ldr	r3, [sp, #0]
 800d480:	f840 3b04 	str.w	r3, [r0], #4
 800d484:	eba0 0009 	sub.w	r0, r0, r9
 800d488:	1080      	asrs	r0, r0, #2
 800d48a:	0146      	lsls	r6, r0, #5
 800d48c:	6120      	str	r0, [r4, #16]
 800d48e:	4618      	mov	r0, r3
 800d490:	f000 fbc2 	bl	800dc18 <__hi0bits>
 800d494:	1a30      	subs	r0, r6, r0
 800d496:	f8d8 6000 	ldr.w	r6, [r8]
 800d49a:	42b0      	cmp	r0, r6
 800d49c:	dd63      	ble.n	800d566 <__gethex+0x286>
 800d49e:	1b87      	subs	r7, r0, r6
 800d4a0:	4639      	mov	r1, r7
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	f000 ff66 	bl	800e374 <__any_on>
 800d4a8:	4682      	mov	sl, r0
 800d4aa:	b1a8      	cbz	r0, 800d4d8 <__gethex+0x1f8>
 800d4ac:	1e7b      	subs	r3, r7, #1
 800d4ae:	1159      	asrs	r1, r3, #5
 800d4b0:	f003 021f 	and.w	r2, r3, #31
 800d4b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d4b8:	f04f 0a01 	mov.w	sl, #1
 800d4bc:	fa0a f202 	lsl.w	r2, sl, r2
 800d4c0:	420a      	tst	r2, r1
 800d4c2:	d009      	beq.n	800d4d8 <__gethex+0x1f8>
 800d4c4:	4553      	cmp	r3, sl
 800d4c6:	dd05      	ble.n	800d4d4 <__gethex+0x1f4>
 800d4c8:	1eb9      	subs	r1, r7, #2
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	f000 ff52 	bl	800e374 <__any_on>
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	d145      	bne.n	800d560 <__gethex+0x280>
 800d4d4:	f04f 0a02 	mov.w	sl, #2
 800d4d8:	4639      	mov	r1, r7
 800d4da:	4620      	mov	r0, r4
 800d4dc:	f7ff fe98 	bl	800d210 <rshift>
 800d4e0:	443d      	add	r5, r7
 800d4e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d4e6:	42ab      	cmp	r3, r5
 800d4e8:	da4c      	bge.n	800d584 <__gethex+0x2a4>
 800d4ea:	ee18 0a10 	vmov	r0, s16
 800d4ee:	4621      	mov	r1, r4
 800d4f0:	f000 fae0 	bl	800dab4 <_Bfree>
 800d4f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	6013      	str	r3, [r2, #0]
 800d4fa:	27a3      	movs	r7, #163	; 0xa3
 800d4fc:	e785      	b.n	800d40a <__gethex+0x12a>
 800d4fe:	1e73      	subs	r3, r6, #1
 800d500:	9a05      	ldr	r2, [sp, #20]
 800d502:	9303      	str	r3, [sp, #12]
 800d504:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d508:	4293      	cmp	r3, r2
 800d50a:	d019      	beq.n	800d540 <__gethex+0x260>
 800d50c:	f1bb 0f20 	cmp.w	fp, #32
 800d510:	d107      	bne.n	800d522 <__gethex+0x242>
 800d512:	9b02      	ldr	r3, [sp, #8]
 800d514:	9a00      	ldr	r2, [sp, #0]
 800d516:	f843 2b04 	str.w	r2, [r3], #4
 800d51a:	9302      	str	r3, [sp, #8]
 800d51c:	2300      	movs	r3, #0
 800d51e:	9300      	str	r3, [sp, #0]
 800d520:	469b      	mov	fp, r3
 800d522:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d526:	f7ff fec5 	bl	800d2b4 <__hexdig_fun>
 800d52a:	9b00      	ldr	r3, [sp, #0]
 800d52c:	f000 000f 	and.w	r0, r0, #15
 800d530:	fa00 f00b 	lsl.w	r0, r0, fp
 800d534:	4303      	orrs	r3, r0
 800d536:	9300      	str	r3, [sp, #0]
 800d538:	f10b 0b04 	add.w	fp, fp, #4
 800d53c:	9b03      	ldr	r3, [sp, #12]
 800d53e:	e00d      	b.n	800d55c <__gethex+0x27c>
 800d540:	9b03      	ldr	r3, [sp, #12]
 800d542:	9a06      	ldr	r2, [sp, #24]
 800d544:	4413      	add	r3, r2
 800d546:	42bb      	cmp	r3, r7
 800d548:	d3e0      	bcc.n	800d50c <__gethex+0x22c>
 800d54a:	4618      	mov	r0, r3
 800d54c:	9901      	ldr	r1, [sp, #4]
 800d54e:	9307      	str	r3, [sp, #28]
 800d550:	4652      	mov	r2, sl
 800d552:	f7fd fffa 	bl	800b54a <strncmp>
 800d556:	9b07      	ldr	r3, [sp, #28]
 800d558:	2800      	cmp	r0, #0
 800d55a:	d1d7      	bne.n	800d50c <__gethex+0x22c>
 800d55c:	461e      	mov	r6, r3
 800d55e:	e78b      	b.n	800d478 <__gethex+0x198>
 800d560:	f04f 0a03 	mov.w	sl, #3
 800d564:	e7b8      	b.n	800d4d8 <__gethex+0x1f8>
 800d566:	da0a      	bge.n	800d57e <__gethex+0x29e>
 800d568:	1a37      	subs	r7, r6, r0
 800d56a:	4621      	mov	r1, r4
 800d56c:	ee18 0a10 	vmov	r0, s16
 800d570:	463a      	mov	r2, r7
 800d572:	f000 fcbb 	bl	800deec <__lshift>
 800d576:	1bed      	subs	r5, r5, r7
 800d578:	4604      	mov	r4, r0
 800d57a:	f100 0914 	add.w	r9, r0, #20
 800d57e:	f04f 0a00 	mov.w	sl, #0
 800d582:	e7ae      	b.n	800d4e2 <__gethex+0x202>
 800d584:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d588:	42a8      	cmp	r0, r5
 800d58a:	dd72      	ble.n	800d672 <__gethex+0x392>
 800d58c:	1b45      	subs	r5, r0, r5
 800d58e:	42ae      	cmp	r6, r5
 800d590:	dc36      	bgt.n	800d600 <__gethex+0x320>
 800d592:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d596:	2b02      	cmp	r3, #2
 800d598:	d02a      	beq.n	800d5f0 <__gethex+0x310>
 800d59a:	2b03      	cmp	r3, #3
 800d59c:	d02c      	beq.n	800d5f8 <__gethex+0x318>
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d11c      	bne.n	800d5dc <__gethex+0x2fc>
 800d5a2:	42ae      	cmp	r6, r5
 800d5a4:	d11a      	bne.n	800d5dc <__gethex+0x2fc>
 800d5a6:	2e01      	cmp	r6, #1
 800d5a8:	d112      	bne.n	800d5d0 <__gethex+0x2f0>
 800d5aa:	9a04      	ldr	r2, [sp, #16]
 800d5ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d5b0:	6013      	str	r3, [r2, #0]
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	6123      	str	r3, [r4, #16]
 800d5b6:	f8c9 3000 	str.w	r3, [r9]
 800d5ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d5bc:	2762      	movs	r7, #98	; 0x62
 800d5be:	601c      	str	r4, [r3, #0]
 800d5c0:	e723      	b.n	800d40a <__gethex+0x12a>
 800d5c2:	bf00      	nop
 800d5c4:	0800f458 	.word	0x0800f458
 800d5c8:	0800f3df 	.word	0x0800f3df
 800d5cc:	0800f3f0 	.word	0x0800f3f0
 800d5d0:	1e71      	subs	r1, r6, #1
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	f000 fece 	bl	800e374 <__any_on>
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	d1e6      	bne.n	800d5aa <__gethex+0x2ca>
 800d5dc:	ee18 0a10 	vmov	r0, s16
 800d5e0:	4621      	mov	r1, r4
 800d5e2:	f000 fa67 	bl	800dab4 <_Bfree>
 800d5e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	6013      	str	r3, [r2, #0]
 800d5ec:	2750      	movs	r7, #80	; 0x50
 800d5ee:	e70c      	b.n	800d40a <__gethex+0x12a>
 800d5f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d1f2      	bne.n	800d5dc <__gethex+0x2fc>
 800d5f6:	e7d8      	b.n	800d5aa <__gethex+0x2ca>
 800d5f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d1d5      	bne.n	800d5aa <__gethex+0x2ca>
 800d5fe:	e7ed      	b.n	800d5dc <__gethex+0x2fc>
 800d600:	1e6f      	subs	r7, r5, #1
 800d602:	f1ba 0f00 	cmp.w	sl, #0
 800d606:	d131      	bne.n	800d66c <__gethex+0x38c>
 800d608:	b127      	cbz	r7, 800d614 <__gethex+0x334>
 800d60a:	4639      	mov	r1, r7
 800d60c:	4620      	mov	r0, r4
 800d60e:	f000 feb1 	bl	800e374 <__any_on>
 800d612:	4682      	mov	sl, r0
 800d614:	117b      	asrs	r3, r7, #5
 800d616:	2101      	movs	r1, #1
 800d618:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d61c:	f007 071f 	and.w	r7, r7, #31
 800d620:	fa01 f707 	lsl.w	r7, r1, r7
 800d624:	421f      	tst	r7, r3
 800d626:	4629      	mov	r1, r5
 800d628:	4620      	mov	r0, r4
 800d62a:	bf18      	it	ne
 800d62c:	f04a 0a02 	orrne.w	sl, sl, #2
 800d630:	1b76      	subs	r6, r6, r5
 800d632:	f7ff fded 	bl	800d210 <rshift>
 800d636:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d63a:	2702      	movs	r7, #2
 800d63c:	f1ba 0f00 	cmp.w	sl, #0
 800d640:	d048      	beq.n	800d6d4 <__gethex+0x3f4>
 800d642:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d646:	2b02      	cmp	r3, #2
 800d648:	d015      	beq.n	800d676 <__gethex+0x396>
 800d64a:	2b03      	cmp	r3, #3
 800d64c:	d017      	beq.n	800d67e <__gethex+0x39e>
 800d64e:	2b01      	cmp	r3, #1
 800d650:	d109      	bne.n	800d666 <__gethex+0x386>
 800d652:	f01a 0f02 	tst.w	sl, #2
 800d656:	d006      	beq.n	800d666 <__gethex+0x386>
 800d658:	f8d9 0000 	ldr.w	r0, [r9]
 800d65c:	ea4a 0a00 	orr.w	sl, sl, r0
 800d660:	f01a 0f01 	tst.w	sl, #1
 800d664:	d10e      	bne.n	800d684 <__gethex+0x3a4>
 800d666:	f047 0710 	orr.w	r7, r7, #16
 800d66a:	e033      	b.n	800d6d4 <__gethex+0x3f4>
 800d66c:	f04f 0a01 	mov.w	sl, #1
 800d670:	e7d0      	b.n	800d614 <__gethex+0x334>
 800d672:	2701      	movs	r7, #1
 800d674:	e7e2      	b.n	800d63c <__gethex+0x35c>
 800d676:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d678:	f1c3 0301 	rsb	r3, r3, #1
 800d67c:	9315      	str	r3, [sp, #84]	; 0x54
 800d67e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d680:	2b00      	cmp	r3, #0
 800d682:	d0f0      	beq.n	800d666 <__gethex+0x386>
 800d684:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d688:	f104 0314 	add.w	r3, r4, #20
 800d68c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d690:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d694:	f04f 0c00 	mov.w	ip, #0
 800d698:	4618      	mov	r0, r3
 800d69a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d69e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800d6a2:	d01c      	beq.n	800d6de <__gethex+0x3fe>
 800d6a4:	3201      	adds	r2, #1
 800d6a6:	6002      	str	r2, [r0, #0]
 800d6a8:	2f02      	cmp	r7, #2
 800d6aa:	f104 0314 	add.w	r3, r4, #20
 800d6ae:	d13f      	bne.n	800d730 <__gethex+0x450>
 800d6b0:	f8d8 2000 	ldr.w	r2, [r8]
 800d6b4:	3a01      	subs	r2, #1
 800d6b6:	42b2      	cmp	r2, r6
 800d6b8:	d10a      	bne.n	800d6d0 <__gethex+0x3f0>
 800d6ba:	1171      	asrs	r1, r6, #5
 800d6bc:	2201      	movs	r2, #1
 800d6be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d6c2:	f006 061f 	and.w	r6, r6, #31
 800d6c6:	fa02 f606 	lsl.w	r6, r2, r6
 800d6ca:	421e      	tst	r6, r3
 800d6cc:	bf18      	it	ne
 800d6ce:	4617      	movne	r7, r2
 800d6d0:	f047 0720 	orr.w	r7, r7, #32
 800d6d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d6d6:	601c      	str	r4, [r3, #0]
 800d6d8:	9b04      	ldr	r3, [sp, #16]
 800d6da:	601d      	str	r5, [r3, #0]
 800d6dc:	e695      	b.n	800d40a <__gethex+0x12a>
 800d6de:	4299      	cmp	r1, r3
 800d6e0:	f843 cc04 	str.w	ip, [r3, #-4]
 800d6e4:	d8d8      	bhi.n	800d698 <__gethex+0x3b8>
 800d6e6:	68a3      	ldr	r3, [r4, #8]
 800d6e8:	459b      	cmp	fp, r3
 800d6ea:	db19      	blt.n	800d720 <__gethex+0x440>
 800d6ec:	6861      	ldr	r1, [r4, #4]
 800d6ee:	ee18 0a10 	vmov	r0, s16
 800d6f2:	3101      	adds	r1, #1
 800d6f4:	f000 f99e 	bl	800da34 <_Balloc>
 800d6f8:	4681      	mov	r9, r0
 800d6fa:	b918      	cbnz	r0, 800d704 <__gethex+0x424>
 800d6fc:	4b1a      	ldr	r3, [pc, #104]	; (800d768 <__gethex+0x488>)
 800d6fe:	4602      	mov	r2, r0
 800d700:	2184      	movs	r1, #132	; 0x84
 800d702:	e6a8      	b.n	800d456 <__gethex+0x176>
 800d704:	6922      	ldr	r2, [r4, #16]
 800d706:	3202      	adds	r2, #2
 800d708:	f104 010c 	add.w	r1, r4, #12
 800d70c:	0092      	lsls	r2, r2, #2
 800d70e:	300c      	adds	r0, #12
 800d710:	f7fd f8bb 	bl	800a88a <memcpy>
 800d714:	4621      	mov	r1, r4
 800d716:	ee18 0a10 	vmov	r0, s16
 800d71a:	f000 f9cb 	bl	800dab4 <_Bfree>
 800d71e:	464c      	mov	r4, r9
 800d720:	6923      	ldr	r3, [r4, #16]
 800d722:	1c5a      	adds	r2, r3, #1
 800d724:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d728:	6122      	str	r2, [r4, #16]
 800d72a:	2201      	movs	r2, #1
 800d72c:	615a      	str	r2, [r3, #20]
 800d72e:	e7bb      	b.n	800d6a8 <__gethex+0x3c8>
 800d730:	6922      	ldr	r2, [r4, #16]
 800d732:	455a      	cmp	r2, fp
 800d734:	dd0b      	ble.n	800d74e <__gethex+0x46e>
 800d736:	2101      	movs	r1, #1
 800d738:	4620      	mov	r0, r4
 800d73a:	f7ff fd69 	bl	800d210 <rshift>
 800d73e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d742:	3501      	adds	r5, #1
 800d744:	42ab      	cmp	r3, r5
 800d746:	f6ff aed0 	blt.w	800d4ea <__gethex+0x20a>
 800d74a:	2701      	movs	r7, #1
 800d74c:	e7c0      	b.n	800d6d0 <__gethex+0x3f0>
 800d74e:	f016 061f 	ands.w	r6, r6, #31
 800d752:	d0fa      	beq.n	800d74a <__gethex+0x46a>
 800d754:	4453      	add	r3, sl
 800d756:	f1c6 0620 	rsb	r6, r6, #32
 800d75a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d75e:	f000 fa5b 	bl	800dc18 <__hi0bits>
 800d762:	42b0      	cmp	r0, r6
 800d764:	dbe7      	blt.n	800d736 <__gethex+0x456>
 800d766:	e7f0      	b.n	800d74a <__gethex+0x46a>
 800d768:	0800f3df 	.word	0x0800f3df

0800d76c <L_shift>:
 800d76c:	f1c2 0208 	rsb	r2, r2, #8
 800d770:	0092      	lsls	r2, r2, #2
 800d772:	b570      	push	{r4, r5, r6, lr}
 800d774:	f1c2 0620 	rsb	r6, r2, #32
 800d778:	6843      	ldr	r3, [r0, #4]
 800d77a:	6804      	ldr	r4, [r0, #0]
 800d77c:	fa03 f506 	lsl.w	r5, r3, r6
 800d780:	432c      	orrs	r4, r5
 800d782:	40d3      	lsrs	r3, r2
 800d784:	6004      	str	r4, [r0, #0]
 800d786:	f840 3f04 	str.w	r3, [r0, #4]!
 800d78a:	4288      	cmp	r0, r1
 800d78c:	d3f4      	bcc.n	800d778 <L_shift+0xc>
 800d78e:	bd70      	pop	{r4, r5, r6, pc}

0800d790 <__match>:
 800d790:	b530      	push	{r4, r5, lr}
 800d792:	6803      	ldr	r3, [r0, #0]
 800d794:	3301      	adds	r3, #1
 800d796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d79a:	b914      	cbnz	r4, 800d7a2 <__match+0x12>
 800d79c:	6003      	str	r3, [r0, #0]
 800d79e:	2001      	movs	r0, #1
 800d7a0:	bd30      	pop	{r4, r5, pc}
 800d7a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d7aa:	2d19      	cmp	r5, #25
 800d7ac:	bf98      	it	ls
 800d7ae:	3220      	addls	r2, #32
 800d7b0:	42a2      	cmp	r2, r4
 800d7b2:	d0f0      	beq.n	800d796 <__match+0x6>
 800d7b4:	2000      	movs	r0, #0
 800d7b6:	e7f3      	b.n	800d7a0 <__match+0x10>

0800d7b8 <__hexnan>:
 800d7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7bc:	680b      	ldr	r3, [r1, #0]
 800d7be:	115e      	asrs	r6, r3, #5
 800d7c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d7c4:	f013 031f 	ands.w	r3, r3, #31
 800d7c8:	b087      	sub	sp, #28
 800d7ca:	bf18      	it	ne
 800d7cc:	3604      	addne	r6, #4
 800d7ce:	2500      	movs	r5, #0
 800d7d0:	1f37      	subs	r7, r6, #4
 800d7d2:	4690      	mov	r8, r2
 800d7d4:	6802      	ldr	r2, [r0, #0]
 800d7d6:	9301      	str	r3, [sp, #4]
 800d7d8:	4682      	mov	sl, r0
 800d7da:	f846 5c04 	str.w	r5, [r6, #-4]
 800d7de:	46b9      	mov	r9, r7
 800d7e0:	463c      	mov	r4, r7
 800d7e2:	9502      	str	r5, [sp, #8]
 800d7e4:	46ab      	mov	fp, r5
 800d7e6:	7851      	ldrb	r1, [r2, #1]
 800d7e8:	1c53      	adds	r3, r2, #1
 800d7ea:	9303      	str	r3, [sp, #12]
 800d7ec:	b341      	cbz	r1, 800d840 <__hexnan+0x88>
 800d7ee:	4608      	mov	r0, r1
 800d7f0:	9205      	str	r2, [sp, #20]
 800d7f2:	9104      	str	r1, [sp, #16]
 800d7f4:	f7ff fd5e 	bl	800d2b4 <__hexdig_fun>
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	d14f      	bne.n	800d89c <__hexnan+0xe4>
 800d7fc:	9904      	ldr	r1, [sp, #16]
 800d7fe:	9a05      	ldr	r2, [sp, #20]
 800d800:	2920      	cmp	r1, #32
 800d802:	d818      	bhi.n	800d836 <__hexnan+0x7e>
 800d804:	9b02      	ldr	r3, [sp, #8]
 800d806:	459b      	cmp	fp, r3
 800d808:	dd13      	ble.n	800d832 <__hexnan+0x7a>
 800d80a:	454c      	cmp	r4, r9
 800d80c:	d206      	bcs.n	800d81c <__hexnan+0x64>
 800d80e:	2d07      	cmp	r5, #7
 800d810:	dc04      	bgt.n	800d81c <__hexnan+0x64>
 800d812:	462a      	mov	r2, r5
 800d814:	4649      	mov	r1, r9
 800d816:	4620      	mov	r0, r4
 800d818:	f7ff ffa8 	bl	800d76c <L_shift>
 800d81c:	4544      	cmp	r4, r8
 800d81e:	d950      	bls.n	800d8c2 <__hexnan+0x10a>
 800d820:	2300      	movs	r3, #0
 800d822:	f1a4 0904 	sub.w	r9, r4, #4
 800d826:	f844 3c04 	str.w	r3, [r4, #-4]
 800d82a:	f8cd b008 	str.w	fp, [sp, #8]
 800d82e:	464c      	mov	r4, r9
 800d830:	461d      	mov	r5, r3
 800d832:	9a03      	ldr	r2, [sp, #12]
 800d834:	e7d7      	b.n	800d7e6 <__hexnan+0x2e>
 800d836:	2929      	cmp	r1, #41	; 0x29
 800d838:	d156      	bne.n	800d8e8 <__hexnan+0x130>
 800d83a:	3202      	adds	r2, #2
 800d83c:	f8ca 2000 	str.w	r2, [sl]
 800d840:	f1bb 0f00 	cmp.w	fp, #0
 800d844:	d050      	beq.n	800d8e8 <__hexnan+0x130>
 800d846:	454c      	cmp	r4, r9
 800d848:	d206      	bcs.n	800d858 <__hexnan+0xa0>
 800d84a:	2d07      	cmp	r5, #7
 800d84c:	dc04      	bgt.n	800d858 <__hexnan+0xa0>
 800d84e:	462a      	mov	r2, r5
 800d850:	4649      	mov	r1, r9
 800d852:	4620      	mov	r0, r4
 800d854:	f7ff ff8a 	bl	800d76c <L_shift>
 800d858:	4544      	cmp	r4, r8
 800d85a:	d934      	bls.n	800d8c6 <__hexnan+0x10e>
 800d85c:	f1a8 0204 	sub.w	r2, r8, #4
 800d860:	4623      	mov	r3, r4
 800d862:	f853 1b04 	ldr.w	r1, [r3], #4
 800d866:	f842 1f04 	str.w	r1, [r2, #4]!
 800d86a:	429f      	cmp	r7, r3
 800d86c:	d2f9      	bcs.n	800d862 <__hexnan+0xaa>
 800d86e:	1b3b      	subs	r3, r7, r4
 800d870:	f023 0303 	bic.w	r3, r3, #3
 800d874:	3304      	adds	r3, #4
 800d876:	3401      	adds	r4, #1
 800d878:	3e03      	subs	r6, #3
 800d87a:	42b4      	cmp	r4, r6
 800d87c:	bf88      	it	hi
 800d87e:	2304      	movhi	r3, #4
 800d880:	4443      	add	r3, r8
 800d882:	2200      	movs	r2, #0
 800d884:	f843 2b04 	str.w	r2, [r3], #4
 800d888:	429f      	cmp	r7, r3
 800d88a:	d2fb      	bcs.n	800d884 <__hexnan+0xcc>
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	b91b      	cbnz	r3, 800d898 <__hexnan+0xe0>
 800d890:	4547      	cmp	r7, r8
 800d892:	d127      	bne.n	800d8e4 <__hexnan+0x12c>
 800d894:	2301      	movs	r3, #1
 800d896:	603b      	str	r3, [r7, #0]
 800d898:	2005      	movs	r0, #5
 800d89a:	e026      	b.n	800d8ea <__hexnan+0x132>
 800d89c:	3501      	adds	r5, #1
 800d89e:	2d08      	cmp	r5, #8
 800d8a0:	f10b 0b01 	add.w	fp, fp, #1
 800d8a4:	dd06      	ble.n	800d8b4 <__hexnan+0xfc>
 800d8a6:	4544      	cmp	r4, r8
 800d8a8:	d9c3      	bls.n	800d832 <__hexnan+0x7a>
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	f844 3c04 	str.w	r3, [r4, #-4]
 800d8b0:	2501      	movs	r5, #1
 800d8b2:	3c04      	subs	r4, #4
 800d8b4:	6822      	ldr	r2, [r4, #0]
 800d8b6:	f000 000f 	and.w	r0, r0, #15
 800d8ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d8be:	6022      	str	r2, [r4, #0]
 800d8c0:	e7b7      	b.n	800d832 <__hexnan+0x7a>
 800d8c2:	2508      	movs	r5, #8
 800d8c4:	e7b5      	b.n	800d832 <__hexnan+0x7a>
 800d8c6:	9b01      	ldr	r3, [sp, #4]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d0df      	beq.n	800d88c <__hexnan+0xd4>
 800d8cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d8d0:	f1c3 0320 	rsb	r3, r3, #32
 800d8d4:	fa22 f303 	lsr.w	r3, r2, r3
 800d8d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d8dc:	401a      	ands	r2, r3
 800d8de:	f846 2c04 	str.w	r2, [r6, #-4]
 800d8e2:	e7d3      	b.n	800d88c <__hexnan+0xd4>
 800d8e4:	3f04      	subs	r7, #4
 800d8e6:	e7d1      	b.n	800d88c <__hexnan+0xd4>
 800d8e8:	2004      	movs	r0, #4
 800d8ea:	b007      	add	sp, #28
 800d8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d8f0 <_localeconv_r>:
 800d8f0:	4800      	ldr	r0, [pc, #0]	; (800d8f4 <_localeconv_r+0x4>)
 800d8f2:	4770      	bx	lr
 800d8f4:	20000168 	.word	0x20000168

0800d8f8 <_lseek_r>:
 800d8f8:	b538      	push	{r3, r4, r5, lr}
 800d8fa:	4d07      	ldr	r5, [pc, #28]	; (800d918 <_lseek_r+0x20>)
 800d8fc:	4604      	mov	r4, r0
 800d8fe:	4608      	mov	r0, r1
 800d900:	4611      	mov	r1, r2
 800d902:	2200      	movs	r2, #0
 800d904:	602a      	str	r2, [r5, #0]
 800d906:	461a      	mov	r2, r3
 800d908:	f7f4 fe8c 	bl	8002624 <_lseek>
 800d90c:	1c43      	adds	r3, r0, #1
 800d90e:	d102      	bne.n	800d916 <_lseek_r+0x1e>
 800d910:	682b      	ldr	r3, [r5, #0]
 800d912:	b103      	cbz	r3, 800d916 <_lseek_r+0x1e>
 800d914:	6023      	str	r3, [r4, #0]
 800d916:	bd38      	pop	{r3, r4, r5, pc}
 800d918:	20004908 	.word	0x20004908

0800d91c <__swhatbuf_r>:
 800d91c:	b570      	push	{r4, r5, r6, lr}
 800d91e:	460e      	mov	r6, r1
 800d920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d924:	2900      	cmp	r1, #0
 800d926:	b096      	sub	sp, #88	; 0x58
 800d928:	4614      	mov	r4, r2
 800d92a:	461d      	mov	r5, r3
 800d92c:	da08      	bge.n	800d940 <__swhatbuf_r+0x24>
 800d92e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d932:	2200      	movs	r2, #0
 800d934:	602a      	str	r2, [r5, #0]
 800d936:	061a      	lsls	r2, r3, #24
 800d938:	d410      	bmi.n	800d95c <__swhatbuf_r+0x40>
 800d93a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d93e:	e00e      	b.n	800d95e <__swhatbuf_r+0x42>
 800d940:	466a      	mov	r2, sp
 800d942:	f000 ff4f 	bl	800e7e4 <_fstat_r>
 800d946:	2800      	cmp	r0, #0
 800d948:	dbf1      	blt.n	800d92e <__swhatbuf_r+0x12>
 800d94a:	9a01      	ldr	r2, [sp, #4]
 800d94c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d950:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d954:	425a      	negs	r2, r3
 800d956:	415a      	adcs	r2, r3
 800d958:	602a      	str	r2, [r5, #0]
 800d95a:	e7ee      	b.n	800d93a <__swhatbuf_r+0x1e>
 800d95c:	2340      	movs	r3, #64	; 0x40
 800d95e:	2000      	movs	r0, #0
 800d960:	6023      	str	r3, [r4, #0]
 800d962:	b016      	add	sp, #88	; 0x58
 800d964:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d968 <__smakebuf_r>:
 800d968:	898b      	ldrh	r3, [r1, #12]
 800d96a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d96c:	079d      	lsls	r5, r3, #30
 800d96e:	4606      	mov	r6, r0
 800d970:	460c      	mov	r4, r1
 800d972:	d507      	bpl.n	800d984 <__smakebuf_r+0x1c>
 800d974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d978:	6023      	str	r3, [r4, #0]
 800d97a:	6123      	str	r3, [r4, #16]
 800d97c:	2301      	movs	r3, #1
 800d97e:	6163      	str	r3, [r4, #20]
 800d980:	b002      	add	sp, #8
 800d982:	bd70      	pop	{r4, r5, r6, pc}
 800d984:	ab01      	add	r3, sp, #4
 800d986:	466a      	mov	r2, sp
 800d988:	f7ff ffc8 	bl	800d91c <__swhatbuf_r>
 800d98c:	9900      	ldr	r1, [sp, #0]
 800d98e:	4605      	mov	r5, r0
 800d990:	4630      	mov	r0, r6
 800d992:	f7fc ffb1 	bl	800a8f8 <_malloc_r>
 800d996:	b948      	cbnz	r0, 800d9ac <__smakebuf_r+0x44>
 800d998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d99c:	059a      	lsls	r2, r3, #22
 800d99e:	d4ef      	bmi.n	800d980 <__smakebuf_r+0x18>
 800d9a0:	f023 0303 	bic.w	r3, r3, #3
 800d9a4:	f043 0302 	orr.w	r3, r3, #2
 800d9a8:	81a3      	strh	r3, [r4, #12]
 800d9aa:	e7e3      	b.n	800d974 <__smakebuf_r+0xc>
 800d9ac:	4b0d      	ldr	r3, [pc, #52]	; (800d9e4 <__smakebuf_r+0x7c>)
 800d9ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9b0:	89a3      	ldrh	r3, [r4, #12]
 800d9b2:	6020      	str	r0, [r4, #0]
 800d9b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9b8:	81a3      	strh	r3, [r4, #12]
 800d9ba:	9b00      	ldr	r3, [sp, #0]
 800d9bc:	6163      	str	r3, [r4, #20]
 800d9be:	9b01      	ldr	r3, [sp, #4]
 800d9c0:	6120      	str	r0, [r4, #16]
 800d9c2:	b15b      	cbz	r3, 800d9dc <__smakebuf_r+0x74>
 800d9c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	f000 ff1d 	bl	800e808 <_isatty_r>
 800d9ce:	b128      	cbz	r0, 800d9dc <__smakebuf_r+0x74>
 800d9d0:	89a3      	ldrh	r3, [r4, #12]
 800d9d2:	f023 0303 	bic.w	r3, r3, #3
 800d9d6:	f043 0301 	orr.w	r3, r3, #1
 800d9da:	81a3      	strh	r3, [r4, #12]
 800d9dc:	89a0      	ldrh	r0, [r4, #12]
 800d9de:	4305      	orrs	r5, r0
 800d9e0:	81a5      	strh	r5, [r4, #12]
 800d9e2:	e7cd      	b.n	800d980 <__smakebuf_r+0x18>
 800d9e4:	0800a699 	.word	0x0800a699

0800d9e8 <malloc>:
 800d9e8:	4b02      	ldr	r3, [pc, #8]	; (800d9f4 <malloc+0xc>)
 800d9ea:	4601      	mov	r1, r0
 800d9ec:	6818      	ldr	r0, [r3, #0]
 800d9ee:	f7fc bf83 	b.w	800a8f8 <_malloc_r>
 800d9f2:	bf00      	nop
 800d9f4:	20000010 	.word	0x20000010

0800d9f8 <__ascii_mbtowc>:
 800d9f8:	b082      	sub	sp, #8
 800d9fa:	b901      	cbnz	r1, 800d9fe <__ascii_mbtowc+0x6>
 800d9fc:	a901      	add	r1, sp, #4
 800d9fe:	b142      	cbz	r2, 800da12 <__ascii_mbtowc+0x1a>
 800da00:	b14b      	cbz	r3, 800da16 <__ascii_mbtowc+0x1e>
 800da02:	7813      	ldrb	r3, [r2, #0]
 800da04:	600b      	str	r3, [r1, #0]
 800da06:	7812      	ldrb	r2, [r2, #0]
 800da08:	1e10      	subs	r0, r2, #0
 800da0a:	bf18      	it	ne
 800da0c:	2001      	movne	r0, #1
 800da0e:	b002      	add	sp, #8
 800da10:	4770      	bx	lr
 800da12:	4610      	mov	r0, r2
 800da14:	e7fb      	b.n	800da0e <__ascii_mbtowc+0x16>
 800da16:	f06f 0001 	mvn.w	r0, #1
 800da1a:	e7f8      	b.n	800da0e <__ascii_mbtowc+0x16>

0800da1c <__malloc_lock>:
 800da1c:	4801      	ldr	r0, [pc, #4]	; (800da24 <__malloc_lock+0x8>)
 800da1e:	f7fc bf32 	b.w	800a886 <__retarget_lock_acquire_recursive>
 800da22:	bf00      	nop
 800da24:	200048fc 	.word	0x200048fc

0800da28 <__malloc_unlock>:
 800da28:	4801      	ldr	r0, [pc, #4]	; (800da30 <__malloc_unlock+0x8>)
 800da2a:	f7fc bf2d 	b.w	800a888 <__retarget_lock_release_recursive>
 800da2e:	bf00      	nop
 800da30:	200048fc 	.word	0x200048fc

0800da34 <_Balloc>:
 800da34:	b570      	push	{r4, r5, r6, lr}
 800da36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800da38:	4604      	mov	r4, r0
 800da3a:	460d      	mov	r5, r1
 800da3c:	b976      	cbnz	r6, 800da5c <_Balloc+0x28>
 800da3e:	2010      	movs	r0, #16
 800da40:	f7ff ffd2 	bl	800d9e8 <malloc>
 800da44:	4602      	mov	r2, r0
 800da46:	6260      	str	r0, [r4, #36]	; 0x24
 800da48:	b920      	cbnz	r0, 800da54 <_Balloc+0x20>
 800da4a:	4b18      	ldr	r3, [pc, #96]	; (800daac <_Balloc+0x78>)
 800da4c:	4818      	ldr	r0, [pc, #96]	; (800dab0 <_Balloc+0x7c>)
 800da4e:	2166      	movs	r1, #102	; 0x66
 800da50:	f000 fe98 	bl	800e784 <__assert_func>
 800da54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da58:	6006      	str	r6, [r0, #0]
 800da5a:	60c6      	str	r6, [r0, #12]
 800da5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800da5e:	68f3      	ldr	r3, [r6, #12]
 800da60:	b183      	cbz	r3, 800da84 <_Balloc+0x50>
 800da62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da64:	68db      	ldr	r3, [r3, #12]
 800da66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800da6a:	b9b8      	cbnz	r0, 800da9c <_Balloc+0x68>
 800da6c:	2101      	movs	r1, #1
 800da6e:	fa01 f605 	lsl.w	r6, r1, r5
 800da72:	1d72      	adds	r2, r6, #5
 800da74:	0092      	lsls	r2, r2, #2
 800da76:	4620      	mov	r0, r4
 800da78:	f000 fc9d 	bl	800e3b6 <_calloc_r>
 800da7c:	b160      	cbz	r0, 800da98 <_Balloc+0x64>
 800da7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da82:	e00e      	b.n	800daa2 <_Balloc+0x6e>
 800da84:	2221      	movs	r2, #33	; 0x21
 800da86:	2104      	movs	r1, #4
 800da88:	4620      	mov	r0, r4
 800da8a:	f000 fc94 	bl	800e3b6 <_calloc_r>
 800da8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da90:	60f0      	str	r0, [r6, #12]
 800da92:	68db      	ldr	r3, [r3, #12]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d1e4      	bne.n	800da62 <_Balloc+0x2e>
 800da98:	2000      	movs	r0, #0
 800da9a:	bd70      	pop	{r4, r5, r6, pc}
 800da9c:	6802      	ldr	r2, [r0, #0]
 800da9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800daa2:	2300      	movs	r3, #0
 800daa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800daa8:	e7f7      	b.n	800da9a <_Balloc+0x66>
 800daaa:	bf00      	nop
 800daac:	0800f36d 	.word	0x0800f36d
 800dab0:	0800f46c 	.word	0x0800f46c

0800dab4 <_Bfree>:
 800dab4:	b570      	push	{r4, r5, r6, lr}
 800dab6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dab8:	4605      	mov	r5, r0
 800daba:	460c      	mov	r4, r1
 800dabc:	b976      	cbnz	r6, 800dadc <_Bfree+0x28>
 800dabe:	2010      	movs	r0, #16
 800dac0:	f7ff ff92 	bl	800d9e8 <malloc>
 800dac4:	4602      	mov	r2, r0
 800dac6:	6268      	str	r0, [r5, #36]	; 0x24
 800dac8:	b920      	cbnz	r0, 800dad4 <_Bfree+0x20>
 800daca:	4b09      	ldr	r3, [pc, #36]	; (800daf0 <_Bfree+0x3c>)
 800dacc:	4809      	ldr	r0, [pc, #36]	; (800daf4 <_Bfree+0x40>)
 800dace:	218a      	movs	r1, #138	; 0x8a
 800dad0:	f000 fe58 	bl	800e784 <__assert_func>
 800dad4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dad8:	6006      	str	r6, [r0, #0]
 800dada:	60c6      	str	r6, [r0, #12]
 800dadc:	b13c      	cbz	r4, 800daee <_Bfree+0x3a>
 800dade:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dae0:	6862      	ldr	r2, [r4, #4]
 800dae2:	68db      	ldr	r3, [r3, #12]
 800dae4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dae8:	6021      	str	r1, [r4, #0]
 800daea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800daee:	bd70      	pop	{r4, r5, r6, pc}
 800daf0:	0800f36d 	.word	0x0800f36d
 800daf4:	0800f46c 	.word	0x0800f46c

0800daf8 <__multadd>:
 800daf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dafc:	690d      	ldr	r5, [r1, #16]
 800dafe:	4607      	mov	r7, r0
 800db00:	460c      	mov	r4, r1
 800db02:	461e      	mov	r6, r3
 800db04:	f101 0c14 	add.w	ip, r1, #20
 800db08:	2000      	movs	r0, #0
 800db0a:	f8dc 3000 	ldr.w	r3, [ip]
 800db0e:	b299      	uxth	r1, r3
 800db10:	fb02 6101 	mla	r1, r2, r1, r6
 800db14:	0c1e      	lsrs	r6, r3, #16
 800db16:	0c0b      	lsrs	r3, r1, #16
 800db18:	fb02 3306 	mla	r3, r2, r6, r3
 800db1c:	b289      	uxth	r1, r1
 800db1e:	3001      	adds	r0, #1
 800db20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800db24:	4285      	cmp	r5, r0
 800db26:	f84c 1b04 	str.w	r1, [ip], #4
 800db2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800db2e:	dcec      	bgt.n	800db0a <__multadd+0x12>
 800db30:	b30e      	cbz	r6, 800db76 <__multadd+0x7e>
 800db32:	68a3      	ldr	r3, [r4, #8]
 800db34:	42ab      	cmp	r3, r5
 800db36:	dc19      	bgt.n	800db6c <__multadd+0x74>
 800db38:	6861      	ldr	r1, [r4, #4]
 800db3a:	4638      	mov	r0, r7
 800db3c:	3101      	adds	r1, #1
 800db3e:	f7ff ff79 	bl	800da34 <_Balloc>
 800db42:	4680      	mov	r8, r0
 800db44:	b928      	cbnz	r0, 800db52 <__multadd+0x5a>
 800db46:	4602      	mov	r2, r0
 800db48:	4b0c      	ldr	r3, [pc, #48]	; (800db7c <__multadd+0x84>)
 800db4a:	480d      	ldr	r0, [pc, #52]	; (800db80 <__multadd+0x88>)
 800db4c:	21b5      	movs	r1, #181	; 0xb5
 800db4e:	f000 fe19 	bl	800e784 <__assert_func>
 800db52:	6922      	ldr	r2, [r4, #16]
 800db54:	3202      	adds	r2, #2
 800db56:	f104 010c 	add.w	r1, r4, #12
 800db5a:	0092      	lsls	r2, r2, #2
 800db5c:	300c      	adds	r0, #12
 800db5e:	f7fc fe94 	bl	800a88a <memcpy>
 800db62:	4621      	mov	r1, r4
 800db64:	4638      	mov	r0, r7
 800db66:	f7ff ffa5 	bl	800dab4 <_Bfree>
 800db6a:	4644      	mov	r4, r8
 800db6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800db70:	3501      	adds	r5, #1
 800db72:	615e      	str	r6, [r3, #20]
 800db74:	6125      	str	r5, [r4, #16]
 800db76:	4620      	mov	r0, r4
 800db78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db7c:	0800f3df 	.word	0x0800f3df
 800db80:	0800f46c 	.word	0x0800f46c

0800db84 <__s2b>:
 800db84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db88:	460c      	mov	r4, r1
 800db8a:	4615      	mov	r5, r2
 800db8c:	461f      	mov	r7, r3
 800db8e:	2209      	movs	r2, #9
 800db90:	3308      	adds	r3, #8
 800db92:	4606      	mov	r6, r0
 800db94:	fb93 f3f2 	sdiv	r3, r3, r2
 800db98:	2100      	movs	r1, #0
 800db9a:	2201      	movs	r2, #1
 800db9c:	429a      	cmp	r2, r3
 800db9e:	db09      	blt.n	800dbb4 <__s2b+0x30>
 800dba0:	4630      	mov	r0, r6
 800dba2:	f7ff ff47 	bl	800da34 <_Balloc>
 800dba6:	b940      	cbnz	r0, 800dbba <__s2b+0x36>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	4b19      	ldr	r3, [pc, #100]	; (800dc10 <__s2b+0x8c>)
 800dbac:	4819      	ldr	r0, [pc, #100]	; (800dc14 <__s2b+0x90>)
 800dbae:	21ce      	movs	r1, #206	; 0xce
 800dbb0:	f000 fde8 	bl	800e784 <__assert_func>
 800dbb4:	0052      	lsls	r2, r2, #1
 800dbb6:	3101      	adds	r1, #1
 800dbb8:	e7f0      	b.n	800db9c <__s2b+0x18>
 800dbba:	9b08      	ldr	r3, [sp, #32]
 800dbbc:	6143      	str	r3, [r0, #20]
 800dbbe:	2d09      	cmp	r5, #9
 800dbc0:	f04f 0301 	mov.w	r3, #1
 800dbc4:	6103      	str	r3, [r0, #16]
 800dbc6:	dd16      	ble.n	800dbf6 <__s2b+0x72>
 800dbc8:	f104 0909 	add.w	r9, r4, #9
 800dbcc:	46c8      	mov	r8, r9
 800dbce:	442c      	add	r4, r5
 800dbd0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dbd4:	4601      	mov	r1, r0
 800dbd6:	3b30      	subs	r3, #48	; 0x30
 800dbd8:	220a      	movs	r2, #10
 800dbda:	4630      	mov	r0, r6
 800dbdc:	f7ff ff8c 	bl	800daf8 <__multadd>
 800dbe0:	45a0      	cmp	r8, r4
 800dbe2:	d1f5      	bne.n	800dbd0 <__s2b+0x4c>
 800dbe4:	f1a5 0408 	sub.w	r4, r5, #8
 800dbe8:	444c      	add	r4, r9
 800dbea:	1b2d      	subs	r5, r5, r4
 800dbec:	1963      	adds	r3, r4, r5
 800dbee:	42bb      	cmp	r3, r7
 800dbf0:	db04      	blt.n	800dbfc <__s2b+0x78>
 800dbf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbf6:	340a      	adds	r4, #10
 800dbf8:	2509      	movs	r5, #9
 800dbfa:	e7f6      	b.n	800dbea <__s2b+0x66>
 800dbfc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dc00:	4601      	mov	r1, r0
 800dc02:	3b30      	subs	r3, #48	; 0x30
 800dc04:	220a      	movs	r2, #10
 800dc06:	4630      	mov	r0, r6
 800dc08:	f7ff ff76 	bl	800daf8 <__multadd>
 800dc0c:	e7ee      	b.n	800dbec <__s2b+0x68>
 800dc0e:	bf00      	nop
 800dc10:	0800f3df 	.word	0x0800f3df
 800dc14:	0800f46c 	.word	0x0800f46c

0800dc18 <__hi0bits>:
 800dc18:	0c03      	lsrs	r3, r0, #16
 800dc1a:	041b      	lsls	r3, r3, #16
 800dc1c:	b9d3      	cbnz	r3, 800dc54 <__hi0bits+0x3c>
 800dc1e:	0400      	lsls	r0, r0, #16
 800dc20:	2310      	movs	r3, #16
 800dc22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dc26:	bf04      	itt	eq
 800dc28:	0200      	lsleq	r0, r0, #8
 800dc2a:	3308      	addeq	r3, #8
 800dc2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dc30:	bf04      	itt	eq
 800dc32:	0100      	lsleq	r0, r0, #4
 800dc34:	3304      	addeq	r3, #4
 800dc36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dc3a:	bf04      	itt	eq
 800dc3c:	0080      	lsleq	r0, r0, #2
 800dc3e:	3302      	addeq	r3, #2
 800dc40:	2800      	cmp	r0, #0
 800dc42:	db05      	blt.n	800dc50 <__hi0bits+0x38>
 800dc44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dc48:	f103 0301 	add.w	r3, r3, #1
 800dc4c:	bf08      	it	eq
 800dc4e:	2320      	moveq	r3, #32
 800dc50:	4618      	mov	r0, r3
 800dc52:	4770      	bx	lr
 800dc54:	2300      	movs	r3, #0
 800dc56:	e7e4      	b.n	800dc22 <__hi0bits+0xa>

0800dc58 <__lo0bits>:
 800dc58:	6803      	ldr	r3, [r0, #0]
 800dc5a:	f013 0207 	ands.w	r2, r3, #7
 800dc5e:	4601      	mov	r1, r0
 800dc60:	d00b      	beq.n	800dc7a <__lo0bits+0x22>
 800dc62:	07da      	lsls	r2, r3, #31
 800dc64:	d423      	bmi.n	800dcae <__lo0bits+0x56>
 800dc66:	0798      	lsls	r0, r3, #30
 800dc68:	bf49      	itett	mi
 800dc6a:	085b      	lsrmi	r3, r3, #1
 800dc6c:	089b      	lsrpl	r3, r3, #2
 800dc6e:	2001      	movmi	r0, #1
 800dc70:	600b      	strmi	r3, [r1, #0]
 800dc72:	bf5c      	itt	pl
 800dc74:	600b      	strpl	r3, [r1, #0]
 800dc76:	2002      	movpl	r0, #2
 800dc78:	4770      	bx	lr
 800dc7a:	b298      	uxth	r0, r3
 800dc7c:	b9a8      	cbnz	r0, 800dcaa <__lo0bits+0x52>
 800dc7e:	0c1b      	lsrs	r3, r3, #16
 800dc80:	2010      	movs	r0, #16
 800dc82:	b2da      	uxtb	r2, r3
 800dc84:	b90a      	cbnz	r2, 800dc8a <__lo0bits+0x32>
 800dc86:	3008      	adds	r0, #8
 800dc88:	0a1b      	lsrs	r3, r3, #8
 800dc8a:	071a      	lsls	r2, r3, #28
 800dc8c:	bf04      	itt	eq
 800dc8e:	091b      	lsreq	r3, r3, #4
 800dc90:	3004      	addeq	r0, #4
 800dc92:	079a      	lsls	r2, r3, #30
 800dc94:	bf04      	itt	eq
 800dc96:	089b      	lsreq	r3, r3, #2
 800dc98:	3002      	addeq	r0, #2
 800dc9a:	07da      	lsls	r2, r3, #31
 800dc9c:	d403      	bmi.n	800dca6 <__lo0bits+0x4e>
 800dc9e:	085b      	lsrs	r3, r3, #1
 800dca0:	f100 0001 	add.w	r0, r0, #1
 800dca4:	d005      	beq.n	800dcb2 <__lo0bits+0x5a>
 800dca6:	600b      	str	r3, [r1, #0]
 800dca8:	4770      	bx	lr
 800dcaa:	4610      	mov	r0, r2
 800dcac:	e7e9      	b.n	800dc82 <__lo0bits+0x2a>
 800dcae:	2000      	movs	r0, #0
 800dcb0:	4770      	bx	lr
 800dcb2:	2020      	movs	r0, #32
 800dcb4:	4770      	bx	lr
	...

0800dcb8 <__i2b>:
 800dcb8:	b510      	push	{r4, lr}
 800dcba:	460c      	mov	r4, r1
 800dcbc:	2101      	movs	r1, #1
 800dcbe:	f7ff feb9 	bl	800da34 <_Balloc>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	b928      	cbnz	r0, 800dcd2 <__i2b+0x1a>
 800dcc6:	4b05      	ldr	r3, [pc, #20]	; (800dcdc <__i2b+0x24>)
 800dcc8:	4805      	ldr	r0, [pc, #20]	; (800dce0 <__i2b+0x28>)
 800dcca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dcce:	f000 fd59 	bl	800e784 <__assert_func>
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	6144      	str	r4, [r0, #20]
 800dcd6:	6103      	str	r3, [r0, #16]
 800dcd8:	bd10      	pop	{r4, pc}
 800dcda:	bf00      	nop
 800dcdc:	0800f3df 	.word	0x0800f3df
 800dce0:	0800f46c 	.word	0x0800f46c

0800dce4 <__multiply>:
 800dce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce8:	4691      	mov	r9, r2
 800dcea:	690a      	ldr	r2, [r1, #16]
 800dcec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	bfb8      	it	lt
 800dcf4:	460b      	movlt	r3, r1
 800dcf6:	460c      	mov	r4, r1
 800dcf8:	bfbc      	itt	lt
 800dcfa:	464c      	movlt	r4, r9
 800dcfc:	4699      	movlt	r9, r3
 800dcfe:	6927      	ldr	r7, [r4, #16]
 800dd00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dd04:	68a3      	ldr	r3, [r4, #8]
 800dd06:	6861      	ldr	r1, [r4, #4]
 800dd08:	eb07 060a 	add.w	r6, r7, sl
 800dd0c:	42b3      	cmp	r3, r6
 800dd0e:	b085      	sub	sp, #20
 800dd10:	bfb8      	it	lt
 800dd12:	3101      	addlt	r1, #1
 800dd14:	f7ff fe8e 	bl	800da34 <_Balloc>
 800dd18:	b930      	cbnz	r0, 800dd28 <__multiply+0x44>
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	4b44      	ldr	r3, [pc, #272]	; (800de30 <__multiply+0x14c>)
 800dd1e:	4845      	ldr	r0, [pc, #276]	; (800de34 <__multiply+0x150>)
 800dd20:	f240 115d 	movw	r1, #349	; 0x15d
 800dd24:	f000 fd2e 	bl	800e784 <__assert_func>
 800dd28:	f100 0514 	add.w	r5, r0, #20
 800dd2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dd30:	462b      	mov	r3, r5
 800dd32:	2200      	movs	r2, #0
 800dd34:	4543      	cmp	r3, r8
 800dd36:	d321      	bcc.n	800dd7c <__multiply+0x98>
 800dd38:	f104 0314 	add.w	r3, r4, #20
 800dd3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dd40:	f109 0314 	add.w	r3, r9, #20
 800dd44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dd48:	9202      	str	r2, [sp, #8]
 800dd4a:	1b3a      	subs	r2, r7, r4
 800dd4c:	3a15      	subs	r2, #21
 800dd4e:	f022 0203 	bic.w	r2, r2, #3
 800dd52:	3204      	adds	r2, #4
 800dd54:	f104 0115 	add.w	r1, r4, #21
 800dd58:	428f      	cmp	r7, r1
 800dd5a:	bf38      	it	cc
 800dd5c:	2204      	movcc	r2, #4
 800dd5e:	9201      	str	r2, [sp, #4]
 800dd60:	9a02      	ldr	r2, [sp, #8]
 800dd62:	9303      	str	r3, [sp, #12]
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d80c      	bhi.n	800dd82 <__multiply+0x9e>
 800dd68:	2e00      	cmp	r6, #0
 800dd6a:	dd03      	ble.n	800dd74 <__multiply+0x90>
 800dd6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d05a      	beq.n	800de2a <__multiply+0x146>
 800dd74:	6106      	str	r6, [r0, #16]
 800dd76:	b005      	add	sp, #20
 800dd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd7c:	f843 2b04 	str.w	r2, [r3], #4
 800dd80:	e7d8      	b.n	800dd34 <__multiply+0x50>
 800dd82:	f8b3 a000 	ldrh.w	sl, [r3]
 800dd86:	f1ba 0f00 	cmp.w	sl, #0
 800dd8a:	d024      	beq.n	800ddd6 <__multiply+0xf2>
 800dd8c:	f104 0e14 	add.w	lr, r4, #20
 800dd90:	46a9      	mov	r9, r5
 800dd92:	f04f 0c00 	mov.w	ip, #0
 800dd96:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dd9a:	f8d9 1000 	ldr.w	r1, [r9]
 800dd9e:	fa1f fb82 	uxth.w	fp, r2
 800dda2:	b289      	uxth	r1, r1
 800dda4:	fb0a 110b 	mla	r1, sl, fp, r1
 800dda8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ddac:	f8d9 2000 	ldr.w	r2, [r9]
 800ddb0:	4461      	add	r1, ip
 800ddb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ddb6:	fb0a c20b 	mla	r2, sl, fp, ip
 800ddba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ddbe:	b289      	uxth	r1, r1
 800ddc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ddc4:	4577      	cmp	r7, lr
 800ddc6:	f849 1b04 	str.w	r1, [r9], #4
 800ddca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ddce:	d8e2      	bhi.n	800dd96 <__multiply+0xb2>
 800ddd0:	9a01      	ldr	r2, [sp, #4]
 800ddd2:	f845 c002 	str.w	ip, [r5, r2]
 800ddd6:	9a03      	ldr	r2, [sp, #12]
 800ddd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dddc:	3304      	adds	r3, #4
 800ddde:	f1b9 0f00 	cmp.w	r9, #0
 800dde2:	d020      	beq.n	800de26 <__multiply+0x142>
 800dde4:	6829      	ldr	r1, [r5, #0]
 800dde6:	f104 0c14 	add.w	ip, r4, #20
 800ddea:	46ae      	mov	lr, r5
 800ddec:	f04f 0a00 	mov.w	sl, #0
 800ddf0:	f8bc b000 	ldrh.w	fp, [ip]
 800ddf4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ddf8:	fb09 220b 	mla	r2, r9, fp, r2
 800ddfc:	4492      	add	sl, r2
 800ddfe:	b289      	uxth	r1, r1
 800de00:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800de04:	f84e 1b04 	str.w	r1, [lr], #4
 800de08:	f85c 2b04 	ldr.w	r2, [ip], #4
 800de0c:	f8be 1000 	ldrh.w	r1, [lr]
 800de10:	0c12      	lsrs	r2, r2, #16
 800de12:	fb09 1102 	mla	r1, r9, r2, r1
 800de16:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800de1a:	4567      	cmp	r7, ip
 800de1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800de20:	d8e6      	bhi.n	800ddf0 <__multiply+0x10c>
 800de22:	9a01      	ldr	r2, [sp, #4]
 800de24:	50a9      	str	r1, [r5, r2]
 800de26:	3504      	adds	r5, #4
 800de28:	e79a      	b.n	800dd60 <__multiply+0x7c>
 800de2a:	3e01      	subs	r6, #1
 800de2c:	e79c      	b.n	800dd68 <__multiply+0x84>
 800de2e:	bf00      	nop
 800de30:	0800f3df 	.word	0x0800f3df
 800de34:	0800f46c 	.word	0x0800f46c

0800de38 <__pow5mult>:
 800de38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de3c:	4615      	mov	r5, r2
 800de3e:	f012 0203 	ands.w	r2, r2, #3
 800de42:	4606      	mov	r6, r0
 800de44:	460f      	mov	r7, r1
 800de46:	d007      	beq.n	800de58 <__pow5mult+0x20>
 800de48:	4c25      	ldr	r4, [pc, #148]	; (800dee0 <__pow5mult+0xa8>)
 800de4a:	3a01      	subs	r2, #1
 800de4c:	2300      	movs	r3, #0
 800de4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800de52:	f7ff fe51 	bl	800daf8 <__multadd>
 800de56:	4607      	mov	r7, r0
 800de58:	10ad      	asrs	r5, r5, #2
 800de5a:	d03d      	beq.n	800ded8 <__pow5mult+0xa0>
 800de5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800de5e:	b97c      	cbnz	r4, 800de80 <__pow5mult+0x48>
 800de60:	2010      	movs	r0, #16
 800de62:	f7ff fdc1 	bl	800d9e8 <malloc>
 800de66:	4602      	mov	r2, r0
 800de68:	6270      	str	r0, [r6, #36]	; 0x24
 800de6a:	b928      	cbnz	r0, 800de78 <__pow5mult+0x40>
 800de6c:	4b1d      	ldr	r3, [pc, #116]	; (800dee4 <__pow5mult+0xac>)
 800de6e:	481e      	ldr	r0, [pc, #120]	; (800dee8 <__pow5mult+0xb0>)
 800de70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800de74:	f000 fc86 	bl	800e784 <__assert_func>
 800de78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de7c:	6004      	str	r4, [r0, #0]
 800de7e:	60c4      	str	r4, [r0, #12]
 800de80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800de84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800de88:	b94c      	cbnz	r4, 800de9e <__pow5mult+0x66>
 800de8a:	f240 2171 	movw	r1, #625	; 0x271
 800de8e:	4630      	mov	r0, r6
 800de90:	f7ff ff12 	bl	800dcb8 <__i2b>
 800de94:	2300      	movs	r3, #0
 800de96:	f8c8 0008 	str.w	r0, [r8, #8]
 800de9a:	4604      	mov	r4, r0
 800de9c:	6003      	str	r3, [r0, #0]
 800de9e:	f04f 0900 	mov.w	r9, #0
 800dea2:	07eb      	lsls	r3, r5, #31
 800dea4:	d50a      	bpl.n	800debc <__pow5mult+0x84>
 800dea6:	4639      	mov	r1, r7
 800dea8:	4622      	mov	r2, r4
 800deaa:	4630      	mov	r0, r6
 800deac:	f7ff ff1a 	bl	800dce4 <__multiply>
 800deb0:	4639      	mov	r1, r7
 800deb2:	4680      	mov	r8, r0
 800deb4:	4630      	mov	r0, r6
 800deb6:	f7ff fdfd 	bl	800dab4 <_Bfree>
 800deba:	4647      	mov	r7, r8
 800debc:	106d      	asrs	r5, r5, #1
 800debe:	d00b      	beq.n	800ded8 <__pow5mult+0xa0>
 800dec0:	6820      	ldr	r0, [r4, #0]
 800dec2:	b938      	cbnz	r0, 800ded4 <__pow5mult+0x9c>
 800dec4:	4622      	mov	r2, r4
 800dec6:	4621      	mov	r1, r4
 800dec8:	4630      	mov	r0, r6
 800deca:	f7ff ff0b 	bl	800dce4 <__multiply>
 800dece:	6020      	str	r0, [r4, #0]
 800ded0:	f8c0 9000 	str.w	r9, [r0]
 800ded4:	4604      	mov	r4, r0
 800ded6:	e7e4      	b.n	800dea2 <__pow5mult+0x6a>
 800ded8:	4638      	mov	r0, r7
 800deda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dede:	bf00      	nop
 800dee0:	0800f5b8 	.word	0x0800f5b8
 800dee4:	0800f36d 	.word	0x0800f36d
 800dee8:	0800f46c 	.word	0x0800f46c

0800deec <__lshift>:
 800deec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800def0:	460c      	mov	r4, r1
 800def2:	6849      	ldr	r1, [r1, #4]
 800def4:	6923      	ldr	r3, [r4, #16]
 800def6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800defa:	68a3      	ldr	r3, [r4, #8]
 800defc:	4607      	mov	r7, r0
 800defe:	4691      	mov	r9, r2
 800df00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df04:	f108 0601 	add.w	r6, r8, #1
 800df08:	42b3      	cmp	r3, r6
 800df0a:	db0b      	blt.n	800df24 <__lshift+0x38>
 800df0c:	4638      	mov	r0, r7
 800df0e:	f7ff fd91 	bl	800da34 <_Balloc>
 800df12:	4605      	mov	r5, r0
 800df14:	b948      	cbnz	r0, 800df2a <__lshift+0x3e>
 800df16:	4602      	mov	r2, r0
 800df18:	4b2a      	ldr	r3, [pc, #168]	; (800dfc4 <__lshift+0xd8>)
 800df1a:	482b      	ldr	r0, [pc, #172]	; (800dfc8 <__lshift+0xdc>)
 800df1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800df20:	f000 fc30 	bl	800e784 <__assert_func>
 800df24:	3101      	adds	r1, #1
 800df26:	005b      	lsls	r3, r3, #1
 800df28:	e7ee      	b.n	800df08 <__lshift+0x1c>
 800df2a:	2300      	movs	r3, #0
 800df2c:	f100 0114 	add.w	r1, r0, #20
 800df30:	f100 0210 	add.w	r2, r0, #16
 800df34:	4618      	mov	r0, r3
 800df36:	4553      	cmp	r3, sl
 800df38:	db37      	blt.n	800dfaa <__lshift+0xbe>
 800df3a:	6920      	ldr	r0, [r4, #16]
 800df3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800df40:	f104 0314 	add.w	r3, r4, #20
 800df44:	f019 091f 	ands.w	r9, r9, #31
 800df48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800df4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800df50:	d02f      	beq.n	800dfb2 <__lshift+0xc6>
 800df52:	f1c9 0e20 	rsb	lr, r9, #32
 800df56:	468a      	mov	sl, r1
 800df58:	f04f 0c00 	mov.w	ip, #0
 800df5c:	681a      	ldr	r2, [r3, #0]
 800df5e:	fa02 f209 	lsl.w	r2, r2, r9
 800df62:	ea42 020c 	orr.w	r2, r2, ip
 800df66:	f84a 2b04 	str.w	r2, [sl], #4
 800df6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800df6e:	4298      	cmp	r0, r3
 800df70:	fa22 fc0e 	lsr.w	ip, r2, lr
 800df74:	d8f2      	bhi.n	800df5c <__lshift+0x70>
 800df76:	1b03      	subs	r3, r0, r4
 800df78:	3b15      	subs	r3, #21
 800df7a:	f023 0303 	bic.w	r3, r3, #3
 800df7e:	3304      	adds	r3, #4
 800df80:	f104 0215 	add.w	r2, r4, #21
 800df84:	4290      	cmp	r0, r2
 800df86:	bf38      	it	cc
 800df88:	2304      	movcc	r3, #4
 800df8a:	f841 c003 	str.w	ip, [r1, r3]
 800df8e:	f1bc 0f00 	cmp.w	ip, #0
 800df92:	d001      	beq.n	800df98 <__lshift+0xac>
 800df94:	f108 0602 	add.w	r6, r8, #2
 800df98:	3e01      	subs	r6, #1
 800df9a:	4638      	mov	r0, r7
 800df9c:	612e      	str	r6, [r5, #16]
 800df9e:	4621      	mov	r1, r4
 800dfa0:	f7ff fd88 	bl	800dab4 <_Bfree>
 800dfa4:	4628      	mov	r0, r5
 800dfa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800dfae:	3301      	adds	r3, #1
 800dfb0:	e7c1      	b.n	800df36 <__lshift+0x4a>
 800dfb2:	3904      	subs	r1, #4
 800dfb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800dfbc:	4298      	cmp	r0, r3
 800dfbe:	d8f9      	bhi.n	800dfb4 <__lshift+0xc8>
 800dfc0:	e7ea      	b.n	800df98 <__lshift+0xac>
 800dfc2:	bf00      	nop
 800dfc4:	0800f3df 	.word	0x0800f3df
 800dfc8:	0800f46c 	.word	0x0800f46c

0800dfcc <__mcmp>:
 800dfcc:	b530      	push	{r4, r5, lr}
 800dfce:	6902      	ldr	r2, [r0, #16]
 800dfd0:	690c      	ldr	r4, [r1, #16]
 800dfd2:	1b12      	subs	r2, r2, r4
 800dfd4:	d10e      	bne.n	800dff4 <__mcmp+0x28>
 800dfd6:	f100 0314 	add.w	r3, r0, #20
 800dfda:	3114      	adds	r1, #20
 800dfdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dfe0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dfe4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dfe8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dfec:	42a5      	cmp	r5, r4
 800dfee:	d003      	beq.n	800dff8 <__mcmp+0x2c>
 800dff0:	d305      	bcc.n	800dffe <__mcmp+0x32>
 800dff2:	2201      	movs	r2, #1
 800dff4:	4610      	mov	r0, r2
 800dff6:	bd30      	pop	{r4, r5, pc}
 800dff8:	4283      	cmp	r3, r0
 800dffa:	d3f3      	bcc.n	800dfe4 <__mcmp+0x18>
 800dffc:	e7fa      	b.n	800dff4 <__mcmp+0x28>
 800dffe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e002:	e7f7      	b.n	800dff4 <__mcmp+0x28>

0800e004 <__mdiff>:
 800e004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e008:	460c      	mov	r4, r1
 800e00a:	4606      	mov	r6, r0
 800e00c:	4611      	mov	r1, r2
 800e00e:	4620      	mov	r0, r4
 800e010:	4690      	mov	r8, r2
 800e012:	f7ff ffdb 	bl	800dfcc <__mcmp>
 800e016:	1e05      	subs	r5, r0, #0
 800e018:	d110      	bne.n	800e03c <__mdiff+0x38>
 800e01a:	4629      	mov	r1, r5
 800e01c:	4630      	mov	r0, r6
 800e01e:	f7ff fd09 	bl	800da34 <_Balloc>
 800e022:	b930      	cbnz	r0, 800e032 <__mdiff+0x2e>
 800e024:	4b3a      	ldr	r3, [pc, #232]	; (800e110 <__mdiff+0x10c>)
 800e026:	4602      	mov	r2, r0
 800e028:	f240 2132 	movw	r1, #562	; 0x232
 800e02c:	4839      	ldr	r0, [pc, #228]	; (800e114 <__mdiff+0x110>)
 800e02e:	f000 fba9 	bl	800e784 <__assert_func>
 800e032:	2301      	movs	r3, #1
 800e034:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e03c:	bfa4      	itt	ge
 800e03e:	4643      	movge	r3, r8
 800e040:	46a0      	movge	r8, r4
 800e042:	4630      	mov	r0, r6
 800e044:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e048:	bfa6      	itte	ge
 800e04a:	461c      	movge	r4, r3
 800e04c:	2500      	movge	r5, #0
 800e04e:	2501      	movlt	r5, #1
 800e050:	f7ff fcf0 	bl	800da34 <_Balloc>
 800e054:	b920      	cbnz	r0, 800e060 <__mdiff+0x5c>
 800e056:	4b2e      	ldr	r3, [pc, #184]	; (800e110 <__mdiff+0x10c>)
 800e058:	4602      	mov	r2, r0
 800e05a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e05e:	e7e5      	b.n	800e02c <__mdiff+0x28>
 800e060:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e064:	6926      	ldr	r6, [r4, #16]
 800e066:	60c5      	str	r5, [r0, #12]
 800e068:	f104 0914 	add.w	r9, r4, #20
 800e06c:	f108 0514 	add.w	r5, r8, #20
 800e070:	f100 0e14 	add.w	lr, r0, #20
 800e074:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e078:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e07c:	f108 0210 	add.w	r2, r8, #16
 800e080:	46f2      	mov	sl, lr
 800e082:	2100      	movs	r1, #0
 800e084:	f859 3b04 	ldr.w	r3, [r9], #4
 800e088:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e08c:	fa1f f883 	uxth.w	r8, r3
 800e090:	fa11 f18b 	uxtah	r1, r1, fp
 800e094:	0c1b      	lsrs	r3, r3, #16
 800e096:	eba1 0808 	sub.w	r8, r1, r8
 800e09a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e09e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e0a2:	fa1f f888 	uxth.w	r8, r8
 800e0a6:	1419      	asrs	r1, r3, #16
 800e0a8:	454e      	cmp	r6, r9
 800e0aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e0ae:	f84a 3b04 	str.w	r3, [sl], #4
 800e0b2:	d8e7      	bhi.n	800e084 <__mdiff+0x80>
 800e0b4:	1b33      	subs	r3, r6, r4
 800e0b6:	3b15      	subs	r3, #21
 800e0b8:	f023 0303 	bic.w	r3, r3, #3
 800e0bc:	3304      	adds	r3, #4
 800e0be:	3415      	adds	r4, #21
 800e0c0:	42a6      	cmp	r6, r4
 800e0c2:	bf38      	it	cc
 800e0c4:	2304      	movcc	r3, #4
 800e0c6:	441d      	add	r5, r3
 800e0c8:	4473      	add	r3, lr
 800e0ca:	469e      	mov	lr, r3
 800e0cc:	462e      	mov	r6, r5
 800e0ce:	4566      	cmp	r6, ip
 800e0d0:	d30e      	bcc.n	800e0f0 <__mdiff+0xec>
 800e0d2:	f10c 0203 	add.w	r2, ip, #3
 800e0d6:	1b52      	subs	r2, r2, r5
 800e0d8:	f022 0203 	bic.w	r2, r2, #3
 800e0dc:	3d03      	subs	r5, #3
 800e0de:	45ac      	cmp	ip, r5
 800e0e0:	bf38      	it	cc
 800e0e2:	2200      	movcc	r2, #0
 800e0e4:	441a      	add	r2, r3
 800e0e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e0ea:	b17b      	cbz	r3, 800e10c <__mdiff+0x108>
 800e0ec:	6107      	str	r7, [r0, #16]
 800e0ee:	e7a3      	b.n	800e038 <__mdiff+0x34>
 800e0f0:	f856 8b04 	ldr.w	r8, [r6], #4
 800e0f4:	fa11 f288 	uxtah	r2, r1, r8
 800e0f8:	1414      	asrs	r4, r2, #16
 800e0fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e0fe:	b292      	uxth	r2, r2
 800e100:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e104:	f84e 2b04 	str.w	r2, [lr], #4
 800e108:	1421      	asrs	r1, r4, #16
 800e10a:	e7e0      	b.n	800e0ce <__mdiff+0xca>
 800e10c:	3f01      	subs	r7, #1
 800e10e:	e7ea      	b.n	800e0e6 <__mdiff+0xe2>
 800e110:	0800f3df 	.word	0x0800f3df
 800e114:	0800f46c 	.word	0x0800f46c

0800e118 <__ulp>:
 800e118:	b082      	sub	sp, #8
 800e11a:	ed8d 0b00 	vstr	d0, [sp]
 800e11e:	9b01      	ldr	r3, [sp, #4]
 800e120:	4912      	ldr	r1, [pc, #72]	; (800e16c <__ulp+0x54>)
 800e122:	4019      	ands	r1, r3
 800e124:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e128:	2900      	cmp	r1, #0
 800e12a:	dd05      	ble.n	800e138 <__ulp+0x20>
 800e12c:	2200      	movs	r2, #0
 800e12e:	460b      	mov	r3, r1
 800e130:	ec43 2b10 	vmov	d0, r2, r3
 800e134:	b002      	add	sp, #8
 800e136:	4770      	bx	lr
 800e138:	4249      	negs	r1, r1
 800e13a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e13e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e142:	f04f 0200 	mov.w	r2, #0
 800e146:	f04f 0300 	mov.w	r3, #0
 800e14a:	da04      	bge.n	800e156 <__ulp+0x3e>
 800e14c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e150:	fa41 f300 	asr.w	r3, r1, r0
 800e154:	e7ec      	b.n	800e130 <__ulp+0x18>
 800e156:	f1a0 0114 	sub.w	r1, r0, #20
 800e15a:	291e      	cmp	r1, #30
 800e15c:	bfda      	itte	le
 800e15e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e162:	fa20 f101 	lsrle.w	r1, r0, r1
 800e166:	2101      	movgt	r1, #1
 800e168:	460a      	mov	r2, r1
 800e16a:	e7e1      	b.n	800e130 <__ulp+0x18>
 800e16c:	7ff00000 	.word	0x7ff00000

0800e170 <__b2d>:
 800e170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e172:	6905      	ldr	r5, [r0, #16]
 800e174:	f100 0714 	add.w	r7, r0, #20
 800e178:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e17c:	1f2e      	subs	r6, r5, #4
 800e17e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e182:	4620      	mov	r0, r4
 800e184:	f7ff fd48 	bl	800dc18 <__hi0bits>
 800e188:	f1c0 0320 	rsb	r3, r0, #32
 800e18c:	280a      	cmp	r0, #10
 800e18e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e20c <__b2d+0x9c>
 800e192:	600b      	str	r3, [r1, #0]
 800e194:	dc14      	bgt.n	800e1c0 <__b2d+0x50>
 800e196:	f1c0 0e0b 	rsb	lr, r0, #11
 800e19a:	fa24 f10e 	lsr.w	r1, r4, lr
 800e19e:	42b7      	cmp	r7, r6
 800e1a0:	ea41 030c 	orr.w	r3, r1, ip
 800e1a4:	bf34      	ite	cc
 800e1a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e1aa:	2100      	movcs	r1, #0
 800e1ac:	3015      	adds	r0, #21
 800e1ae:	fa04 f000 	lsl.w	r0, r4, r0
 800e1b2:	fa21 f10e 	lsr.w	r1, r1, lr
 800e1b6:	ea40 0201 	orr.w	r2, r0, r1
 800e1ba:	ec43 2b10 	vmov	d0, r2, r3
 800e1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1c0:	42b7      	cmp	r7, r6
 800e1c2:	bf3a      	itte	cc
 800e1c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e1c8:	f1a5 0608 	subcc.w	r6, r5, #8
 800e1cc:	2100      	movcs	r1, #0
 800e1ce:	380b      	subs	r0, #11
 800e1d0:	d017      	beq.n	800e202 <__b2d+0x92>
 800e1d2:	f1c0 0c20 	rsb	ip, r0, #32
 800e1d6:	fa04 f500 	lsl.w	r5, r4, r0
 800e1da:	42be      	cmp	r6, r7
 800e1dc:	fa21 f40c 	lsr.w	r4, r1, ip
 800e1e0:	ea45 0504 	orr.w	r5, r5, r4
 800e1e4:	bf8c      	ite	hi
 800e1e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e1ea:	2400      	movls	r4, #0
 800e1ec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e1f0:	fa01 f000 	lsl.w	r0, r1, r0
 800e1f4:	fa24 f40c 	lsr.w	r4, r4, ip
 800e1f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e1fc:	ea40 0204 	orr.w	r2, r0, r4
 800e200:	e7db      	b.n	800e1ba <__b2d+0x4a>
 800e202:	ea44 030c 	orr.w	r3, r4, ip
 800e206:	460a      	mov	r2, r1
 800e208:	e7d7      	b.n	800e1ba <__b2d+0x4a>
 800e20a:	bf00      	nop
 800e20c:	3ff00000 	.word	0x3ff00000

0800e210 <__d2b>:
 800e210:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e214:	4689      	mov	r9, r1
 800e216:	2101      	movs	r1, #1
 800e218:	ec57 6b10 	vmov	r6, r7, d0
 800e21c:	4690      	mov	r8, r2
 800e21e:	f7ff fc09 	bl	800da34 <_Balloc>
 800e222:	4604      	mov	r4, r0
 800e224:	b930      	cbnz	r0, 800e234 <__d2b+0x24>
 800e226:	4602      	mov	r2, r0
 800e228:	4b25      	ldr	r3, [pc, #148]	; (800e2c0 <__d2b+0xb0>)
 800e22a:	4826      	ldr	r0, [pc, #152]	; (800e2c4 <__d2b+0xb4>)
 800e22c:	f240 310a 	movw	r1, #778	; 0x30a
 800e230:	f000 faa8 	bl	800e784 <__assert_func>
 800e234:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e238:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e23c:	bb35      	cbnz	r5, 800e28c <__d2b+0x7c>
 800e23e:	2e00      	cmp	r6, #0
 800e240:	9301      	str	r3, [sp, #4]
 800e242:	d028      	beq.n	800e296 <__d2b+0x86>
 800e244:	4668      	mov	r0, sp
 800e246:	9600      	str	r6, [sp, #0]
 800e248:	f7ff fd06 	bl	800dc58 <__lo0bits>
 800e24c:	9900      	ldr	r1, [sp, #0]
 800e24e:	b300      	cbz	r0, 800e292 <__d2b+0x82>
 800e250:	9a01      	ldr	r2, [sp, #4]
 800e252:	f1c0 0320 	rsb	r3, r0, #32
 800e256:	fa02 f303 	lsl.w	r3, r2, r3
 800e25a:	430b      	orrs	r3, r1
 800e25c:	40c2      	lsrs	r2, r0
 800e25e:	6163      	str	r3, [r4, #20]
 800e260:	9201      	str	r2, [sp, #4]
 800e262:	9b01      	ldr	r3, [sp, #4]
 800e264:	61a3      	str	r3, [r4, #24]
 800e266:	2b00      	cmp	r3, #0
 800e268:	bf14      	ite	ne
 800e26a:	2202      	movne	r2, #2
 800e26c:	2201      	moveq	r2, #1
 800e26e:	6122      	str	r2, [r4, #16]
 800e270:	b1d5      	cbz	r5, 800e2a8 <__d2b+0x98>
 800e272:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e276:	4405      	add	r5, r0
 800e278:	f8c9 5000 	str.w	r5, [r9]
 800e27c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e280:	f8c8 0000 	str.w	r0, [r8]
 800e284:	4620      	mov	r0, r4
 800e286:	b003      	add	sp, #12
 800e288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e28c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e290:	e7d5      	b.n	800e23e <__d2b+0x2e>
 800e292:	6161      	str	r1, [r4, #20]
 800e294:	e7e5      	b.n	800e262 <__d2b+0x52>
 800e296:	a801      	add	r0, sp, #4
 800e298:	f7ff fcde 	bl	800dc58 <__lo0bits>
 800e29c:	9b01      	ldr	r3, [sp, #4]
 800e29e:	6163      	str	r3, [r4, #20]
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	6122      	str	r2, [r4, #16]
 800e2a4:	3020      	adds	r0, #32
 800e2a6:	e7e3      	b.n	800e270 <__d2b+0x60>
 800e2a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e2ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e2b0:	f8c9 0000 	str.w	r0, [r9]
 800e2b4:	6918      	ldr	r0, [r3, #16]
 800e2b6:	f7ff fcaf 	bl	800dc18 <__hi0bits>
 800e2ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e2be:	e7df      	b.n	800e280 <__d2b+0x70>
 800e2c0:	0800f3df 	.word	0x0800f3df
 800e2c4:	0800f46c 	.word	0x0800f46c

0800e2c8 <__ratio>:
 800e2c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2cc:	4688      	mov	r8, r1
 800e2ce:	4669      	mov	r1, sp
 800e2d0:	4681      	mov	r9, r0
 800e2d2:	f7ff ff4d 	bl	800e170 <__b2d>
 800e2d6:	a901      	add	r1, sp, #4
 800e2d8:	4640      	mov	r0, r8
 800e2da:	ec55 4b10 	vmov	r4, r5, d0
 800e2de:	f7ff ff47 	bl	800e170 <__b2d>
 800e2e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e2e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e2ea:	eba3 0c02 	sub.w	ip, r3, r2
 800e2ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e2f2:	1a9b      	subs	r3, r3, r2
 800e2f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e2f8:	ec51 0b10 	vmov	r0, r1, d0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	bfd6      	itet	le
 800e300:	460a      	movle	r2, r1
 800e302:	462a      	movgt	r2, r5
 800e304:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e308:	468b      	mov	fp, r1
 800e30a:	462f      	mov	r7, r5
 800e30c:	bfd4      	ite	le
 800e30e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e312:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e316:	4620      	mov	r0, r4
 800e318:	ee10 2a10 	vmov	r2, s0
 800e31c:	465b      	mov	r3, fp
 800e31e:	4639      	mov	r1, r7
 800e320:	f7f2 fa9c 	bl	800085c <__aeabi_ddiv>
 800e324:	ec41 0b10 	vmov	d0, r0, r1
 800e328:	b003      	add	sp, #12
 800e32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e32e <__copybits>:
 800e32e:	3901      	subs	r1, #1
 800e330:	b570      	push	{r4, r5, r6, lr}
 800e332:	1149      	asrs	r1, r1, #5
 800e334:	6914      	ldr	r4, [r2, #16]
 800e336:	3101      	adds	r1, #1
 800e338:	f102 0314 	add.w	r3, r2, #20
 800e33c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e340:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e344:	1f05      	subs	r5, r0, #4
 800e346:	42a3      	cmp	r3, r4
 800e348:	d30c      	bcc.n	800e364 <__copybits+0x36>
 800e34a:	1aa3      	subs	r3, r4, r2
 800e34c:	3b11      	subs	r3, #17
 800e34e:	f023 0303 	bic.w	r3, r3, #3
 800e352:	3211      	adds	r2, #17
 800e354:	42a2      	cmp	r2, r4
 800e356:	bf88      	it	hi
 800e358:	2300      	movhi	r3, #0
 800e35a:	4418      	add	r0, r3
 800e35c:	2300      	movs	r3, #0
 800e35e:	4288      	cmp	r0, r1
 800e360:	d305      	bcc.n	800e36e <__copybits+0x40>
 800e362:	bd70      	pop	{r4, r5, r6, pc}
 800e364:	f853 6b04 	ldr.w	r6, [r3], #4
 800e368:	f845 6f04 	str.w	r6, [r5, #4]!
 800e36c:	e7eb      	b.n	800e346 <__copybits+0x18>
 800e36e:	f840 3b04 	str.w	r3, [r0], #4
 800e372:	e7f4      	b.n	800e35e <__copybits+0x30>

0800e374 <__any_on>:
 800e374:	f100 0214 	add.w	r2, r0, #20
 800e378:	6900      	ldr	r0, [r0, #16]
 800e37a:	114b      	asrs	r3, r1, #5
 800e37c:	4298      	cmp	r0, r3
 800e37e:	b510      	push	{r4, lr}
 800e380:	db11      	blt.n	800e3a6 <__any_on+0x32>
 800e382:	dd0a      	ble.n	800e39a <__any_on+0x26>
 800e384:	f011 011f 	ands.w	r1, r1, #31
 800e388:	d007      	beq.n	800e39a <__any_on+0x26>
 800e38a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e38e:	fa24 f001 	lsr.w	r0, r4, r1
 800e392:	fa00 f101 	lsl.w	r1, r0, r1
 800e396:	428c      	cmp	r4, r1
 800e398:	d10b      	bne.n	800e3b2 <__any_on+0x3e>
 800e39a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d803      	bhi.n	800e3aa <__any_on+0x36>
 800e3a2:	2000      	movs	r0, #0
 800e3a4:	bd10      	pop	{r4, pc}
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	e7f7      	b.n	800e39a <__any_on+0x26>
 800e3aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e3ae:	2900      	cmp	r1, #0
 800e3b0:	d0f5      	beq.n	800e39e <__any_on+0x2a>
 800e3b2:	2001      	movs	r0, #1
 800e3b4:	e7f6      	b.n	800e3a4 <__any_on+0x30>

0800e3b6 <_calloc_r>:
 800e3b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3b8:	fba1 2402 	umull	r2, r4, r1, r2
 800e3bc:	b94c      	cbnz	r4, 800e3d2 <_calloc_r+0x1c>
 800e3be:	4611      	mov	r1, r2
 800e3c0:	9201      	str	r2, [sp, #4]
 800e3c2:	f7fc fa99 	bl	800a8f8 <_malloc_r>
 800e3c6:	9a01      	ldr	r2, [sp, #4]
 800e3c8:	4605      	mov	r5, r0
 800e3ca:	b930      	cbnz	r0, 800e3da <_calloc_r+0x24>
 800e3cc:	4628      	mov	r0, r5
 800e3ce:	b003      	add	sp, #12
 800e3d0:	bd30      	pop	{r4, r5, pc}
 800e3d2:	220c      	movs	r2, #12
 800e3d4:	6002      	str	r2, [r0, #0]
 800e3d6:	2500      	movs	r5, #0
 800e3d8:	e7f8      	b.n	800e3cc <_calloc_r+0x16>
 800e3da:	4621      	mov	r1, r4
 800e3dc:	f7fc fa63 	bl	800a8a6 <memset>
 800e3e0:	e7f4      	b.n	800e3cc <_calloc_r+0x16>
	...

0800e3e4 <_free_r>:
 800e3e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3e6:	2900      	cmp	r1, #0
 800e3e8:	d044      	beq.n	800e474 <_free_r+0x90>
 800e3ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3ee:	9001      	str	r0, [sp, #4]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	f1a1 0404 	sub.w	r4, r1, #4
 800e3f6:	bfb8      	it	lt
 800e3f8:	18e4      	addlt	r4, r4, r3
 800e3fa:	f7ff fb0f 	bl	800da1c <__malloc_lock>
 800e3fe:	4a1e      	ldr	r2, [pc, #120]	; (800e478 <_free_r+0x94>)
 800e400:	9801      	ldr	r0, [sp, #4]
 800e402:	6813      	ldr	r3, [r2, #0]
 800e404:	b933      	cbnz	r3, 800e414 <_free_r+0x30>
 800e406:	6063      	str	r3, [r4, #4]
 800e408:	6014      	str	r4, [r2, #0]
 800e40a:	b003      	add	sp, #12
 800e40c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e410:	f7ff bb0a 	b.w	800da28 <__malloc_unlock>
 800e414:	42a3      	cmp	r3, r4
 800e416:	d908      	bls.n	800e42a <_free_r+0x46>
 800e418:	6825      	ldr	r5, [r4, #0]
 800e41a:	1961      	adds	r1, r4, r5
 800e41c:	428b      	cmp	r3, r1
 800e41e:	bf01      	itttt	eq
 800e420:	6819      	ldreq	r1, [r3, #0]
 800e422:	685b      	ldreq	r3, [r3, #4]
 800e424:	1949      	addeq	r1, r1, r5
 800e426:	6021      	streq	r1, [r4, #0]
 800e428:	e7ed      	b.n	800e406 <_free_r+0x22>
 800e42a:	461a      	mov	r2, r3
 800e42c:	685b      	ldr	r3, [r3, #4]
 800e42e:	b10b      	cbz	r3, 800e434 <_free_r+0x50>
 800e430:	42a3      	cmp	r3, r4
 800e432:	d9fa      	bls.n	800e42a <_free_r+0x46>
 800e434:	6811      	ldr	r1, [r2, #0]
 800e436:	1855      	adds	r5, r2, r1
 800e438:	42a5      	cmp	r5, r4
 800e43a:	d10b      	bne.n	800e454 <_free_r+0x70>
 800e43c:	6824      	ldr	r4, [r4, #0]
 800e43e:	4421      	add	r1, r4
 800e440:	1854      	adds	r4, r2, r1
 800e442:	42a3      	cmp	r3, r4
 800e444:	6011      	str	r1, [r2, #0]
 800e446:	d1e0      	bne.n	800e40a <_free_r+0x26>
 800e448:	681c      	ldr	r4, [r3, #0]
 800e44a:	685b      	ldr	r3, [r3, #4]
 800e44c:	6053      	str	r3, [r2, #4]
 800e44e:	4421      	add	r1, r4
 800e450:	6011      	str	r1, [r2, #0]
 800e452:	e7da      	b.n	800e40a <_free_r+0x26>
 800e454:	d902      	bls.n	800e45c <_free_r+0x78>
 800e456:	230c      	movs	r3, #12
 800e458:	6003      	str	r3, [r0, #0]
 800e45a:	e7d6      	b.n	800e40a <_free_r+0x26>
 800e45c:	6825      	ldr	r5, [r4, #0]
 800e45e:	1961      	adds	r1, r4, r5
 800e460:	428b      	cmp	r3, r1
 800e462:	bf04      	itt	eq
 800e464:	6819      	ldreq	r1, [r3, #0]
 800e466:	685b      	ldreq	r3, [r3, #4]
 800e468:	6063      	str	r3, [r4, #4]
 800e46a:	bf04      	itt	eq
 800e46c:	1949      	addeq	r1, r1, r5
 800e46e:	6021      	streq	r1, [r4, #0]
 800e470:	6054      	str	r4, [r2, #4]
 800e472:	e7ca      	b.n	800e40a <_free_r+0x26>
 800e474:	b003      	add	sp, #12
 800e476:	bd30      	pop	{r4, r5, pc}
 800e478:	20004900 	.word	0x20004900

0800e47c <__sfputc_r>:
 800e47c:	6893      	ldr	r3, [r2, #8]
 800e47e:	3b01      	subs	r3, #1
 800e480:	2b00      	cmp	r3, #0
 800e482:	b410      	push	{r4}
 800e484:	6093      	str	r3, [r2, #8]
 800e486:	da08      	bge.n	800e49a <__sfputc_r+0x1e>
 800e488:	6994      	ldr	r4, [r2, #24]
 800e48a:	42a3      	cmp	r3, r4
 800e48c:	db01      	blt.n	800e492 <__sfputc_r+0x16>
 800e48e:	290a      	cmp	r1, #10
 800e490:	d103      	bne.n	800e49a <__sfputc_r+0x1e>
 800e492:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e496:	f7fd be9d 	b.w	800c1d4 <__swbuf_r>
 800e49a:	6813      	ldr	r3, [r2, #0]
 800e49c:	1c58      	adds	r0, r3, #1
 800e49e:	6010      	str	r0, [r2, #0]
 800e4a0:	7019      	strb	r1, [r3, #0]
 800e4a2:	4608      	mov	r0, r1
 800e4a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4a8:	4770      	bx	lr

0800e4aa <__sfputs_r>:
 800e4aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ac:	4606      	mov	r6, r0
 800e4ae:	460f      	mov	r7, r1
 800e4b0:	4614      	mov	r4, r2
 800e4b2:	18d5      	adds	r5, r2, r3
 800e4b4:	42ac      	cmp	r4, r5
 800e4b6:	d101      	bne.n	800e4bc <__sfputs_r+0x12>
 800e4b8:	2000      	movs	r0, #0
 800e4ba:	e007      	b.n	800e4cc <__sfputs_r+0x22>
 800e4bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4c0:	463a      	mov	r2, r7
 800e4c2:	4630      	mov	r0, r6
 800e4c4:	f7ff ffda 	bl	800e47c <__sfputc_r>
 800e4c8:	1c43      	adds	r3, r0, #1
 800e4ca:	d1f3      	bne.n	800e4b4 <__sfputs_r+0xa>
 800e4cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e4d0 <_vfiprintf_r>:
 800e4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d4:	460d      	mov	r5, r1
 800e4d6:	b09d      	sub	sp, #116	; 0x74
 800e4d8:	4614      	mov	r4, r2
 800e4da:	4698      	mov	r8, r3
 800e4dc:	4606      	mov	r6, r0
 800e4de:	b118      	cbz	r0, 800e4e8 <_vfiprintf_r+0x18>
 800e4e0:	6983      	ldr	r3, [r0, #24]
 800e4e2:	b90b      	cbnz	r3, 800e4e8 <_vfiprintf_r+0x18>
 800e4e4:	f7fc f90c 	bl	800a700 <__sinit>
 800e4e8:	4b89      	ldr	r3, [pc, #548]	; (800e710 <_vfiprintf_r+0x240>)
 800e4ea:	429d      	cmp	r5, r3
 800e4ec:	d11b      	bne.n	800e526 <_vfiprintf_r+0x56>
 800e4ee:	6875      	ldr	r5, [r6, #4]
 800e4f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e4f2:	07d9      	lsls	r1, r3, #31
 800e4f4:	d405      	bmi.n	800e502 <_vfiprintf_r+0x32>
 800e4f6:	89ab      	ldrh	r3, [r5, #12]
 800e4f8:	059a      	lsls	r2, r3, #22
 800e4fa:	d402      	bmi.n	800e502 <_vfiprintf_r+0x32>
 800e4fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e4fe:	f7fc f9c2 	bl	800a886 <__retarget_lock_acquire_recursive>
 800e502:	89ab      	ldrh	r3, [r5, #12]
 800e504:	071b      	lsls	r3, r3, #28
 800e506:	d501      	bpl.n	800e50c <_vfiprintf_r+0x3c>
 800e508:	692b      	ldr	r3, [r5, #16]
 800e50a:	b9eb      	cbnz	r3, 800e548 <_vfiprintf_r+0x78>
 800e50c:	4629      	mov	r1, r5
 800e50e:	4630      	mov	r0, r6
 800e510:	f7fd fec4 	bl	800c29c <__swsetup_r>
 800e514:	b1c0      	cbz	r0, 800e548 <_vfiprintf_r+0x78>
 800e516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e518:	07dc      	lsls	r4, r3, #31
 800e51a:	d50e      	bpl.n	800e53a <_vfiprintf_r+0x6a>
 800e51c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e520:	b01d      	add	sp, #116	; 0x74
 800e522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e526:	4b7b      	ldr	r3, [pc, #492]	; (800e714 <_vfiprintf_r+0x244>)
 800e528:	429d      	cmp	r5, r3
 800e52a:	d101      	bne.n	800e530 <_vfiprintf_r+0x60>
 800e52c:	68b5      	ldr	r5, [r6, #8]
 800e52e:	e7df      	b.n	800e4f0 <_vfiprintf_r+0x20>
 800e530:	4b79      	ldr	r3, [pc, #484]	; (800e718 <_vfiprintf_r+0x248>)
 800e532:	429d      	cmp	r5, r3
 800e534:	bf08      	it	eq
 800e536:	68f5      	ldreq	r5, [r6, #12]
 800e538:	e7da      	b.n	800e4f0 <_vfiprintf_r+0x20>
 800e53a:	89ab      	ldrh	r3, [r5, #12]
 800e53c:	0598      	lsls	r0, r3, #22
 800e53e:	d4ed      	bmi.n	800e51c <_vfiprintf_r+0x4c>
 800e540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e542:	f7fc f9a1 	bl	800a888 <__retarget_lock_release_recursive>
 800e546:	e7e9      	b.n	800e51c <_vfiprintf_r+0x4c>
 800e548:	2300      	movs	r3, #0
 800e54a:	9309      	str	r3, [sp, #36]	; 0x24
 800e54c:	2320      	movs	r3, #32
 800e54e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e552:	f8cd 800c 	str.w	r8, [sp, #12]
 800e556:	2330      	movs	r3, #48	; 0x30
 800e558:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e71c <_vfiprintf_r+0x24c>
 800e55c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e560:	f04f 0901 	mov.w	r9, #1
 800e564:	4623      	mov	r3, r4
 800e566:	469a      	mov	sl, r3
 800e568:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e56c:	b10a      	cbz	r2, 800e572 <_vfiprintf_r+0xa2>
 800e56e:	2a25      	cmp	r2, #37	; 0x25
 800e570:	d1f9      	bne.n	800e566 <_vfiprintf_r+0x96>
 800e572:	ebba 0b04 	subs.w	fp, sl, r4
 800e576:	d00b      	beq.n	800e590 <_vfiprintf_r+0xc0>
 800e578:	465b      	mov	r3, fp
 800e57a:	4622      	mov	r2, r4
 800e57c:	4629      	mov	r1, r5
 800e57e:	4630      	mov	r0, r6
 800e580:	f7ff ff93 	bl	800e4aa <__sfputs_r>
 800e584:	3001      	adds	r0, #1
 800e586:	f000 80aa 	beq.w	800e6de <_vfiprintf_r+0x20e>
 800e58a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e58c:	445a      	add	r2, fp
 800e58e:	9209      	str	r2, [sp, #36]	; 0x24
 800e590:	f89a 3000 	ldrb.w	r3, [sl]
 800e594:	2b00      	cmp	r3, #0
 800e596:	f000 80a2 	beq.w	800e6de <_vfiprintf_r+0x20e>
 800e59a:	2300      	movs	r3, #0
 800e59c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e5a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5a4:	f10a 0a01 	add.w	sl, sl, #1
 800e5a8:	9304      	str	r3, [sp, #16]
 800e5aa:	9307      	str	r3, [sp, #28]
 800e5ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5b0:	931a      	str	r3, [sp, #104]	; 0x68
 800e5b2:	4654      	mov	r4, sl
 800e5b4:	2205      	movs	r2, #5
 800e5b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5ba:	4858      	ldr	r0, [pc, #352]	; (800e71c <_vfiprintf_r+0x24c>)
 800e5bc:	f7f1 fe18 	bl	80001f0 <memchr>
 800e5c0:	9a04      	ldr	r2, [sp, #16]
 800e5c2:	b9d8      	cbnz	r0, 800e5fc <_vfiprintf_r+0x12c>
 800e5c4:	06d1      	lsls	r1, r2, #27
 800e5c6:	bf44      	itt	mi
 800e5c8:	2320      	movmi	r3, #32
 800e5ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5ce:	0713      	lsls	r3, r2, #28
 800e5d0:	bf44      	itt	mi
 800e5d2:	232b      	movmi	r3, #43	; 0x2b
 800e5d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5d8:	f89a 3000 	ldrb.w	r3, [sl]
 800e5dc:	2b2a      	cmp	r3, #42	; 0x2a
 800e5de:	d015      	beq.n	800e60c <_vfiprintf_r+0x13c>
 800e5e0:	9a07      	ldr	r2, [sp, #28]
 800e5e2:	4654      	mov	r4, sl
 800e5e4:	2000      	movs	r0, #0
 800e5e6:	f04f 0c0a 	mov.w	ip, #10
 800e5ea:	4621      	mov	r1, r4
 800e5ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5f0:	3b30      	subs	r3, #48	; 0x30
 800e5f2:	2b09      	cmp	r3, #9
 800e5f4:	d94e      	bls.n	800e694 <_vfiprintf_r+0x1c4>
 800e5f6:	b1b0      	cbz	r0, 800e626 <_vfiprintf_r+0x156>
 800e5f8:	9207      	str	r2, [sp, #28]
 800e5fa:	e014      	b.n	800e626 <_vfiprintf_r+0x156>
 800e5fc:	eba0 0308 	sub.w	r3, r0, r8
 800e600:	fa09 f303 	lsl.w	r3, r9, r3
 800e604:	4313      	orrs	r3, r2
 800e606:	9304      	str	r3, [sp, #16]
 800e608:	46a2      	mov	sl, r4
 800e60a:	e7d2      	b.n	800e5b2 <_vfiprintf_r+0xe2>
 800e60c:	9b03      	ldr	r3, [sp, #12]
 800e60e:	1d19      	adds	r1, r3, #4
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	9103      	str	r1, [sp, #12]
 800e614:	2b00      	cmp	r3, #0
 800e616:	bfbb      	ittet	lt
 800e618:	425b      	neglt	r3, r3
 800e61a:	f042 0202 	orrlt.w	r2, r2, #2
 800e61e:	9307      	strge	r3, [sp, #28]
 800e620:	9307      	strlt	r3, [sp, #28]
 800e622:	bfb8      	it	lt
 800e624:	9204      	strlt	r2, [sp, #16]
 800e626:	7823      	ldrb	r3, [r4, #0]
 800e628:	2b2e      	cmp	r3, #46	; 0x2e
 800e62a:	d10c      	bne.n	800e646 <_vfiprintf_r+0x176>
 800e62c:	7863      	ldrb	r3, [r4, #1]
 800e62e:	2b2a      	cmp	r3, #42	; 0x2a
 800e630:	d135      	bne.n	800e69e <_vfiprintf_r+0x1ce>
 800e632:	9b03      	ldr	r3, [sp, #12]
 800e634:	1d1a      	adds	r2, r3, #4
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	9203      	str	r2, [sp, #12]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	bfb8      	it	lt
 800e63e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e642:	3402      	adds	r4, #2
 800e644:	9305      	str	r3, [sp, #20]
 800e646:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e72c <_vfiprintf_r+0x25c>
 800e64a:	7821      	ldrb	r1, [r4, #0]
 800e64c:	2203      	movs	r2, #3
 800e64e:	4650      	mov	r0, sl
 800e650:	f7f1 fdce 	bl	80001f0 <memchr>
 800e654:	b140      	cbz	r0, 800e668 <_vfiprintf_r+0x198>
 800e656:	2340      	movs	r3, #64	; 0x40
 800e658:	eba0 000a 	sub.w	r0, r0, sl
 800e65c:	fa03 f000 	lsl.w	r0, r3, r0
 800e660:	9b04      	ldr	r3, [sp, #16]
 800e662:	4303      	orrs	r3, r0
 800e664:	3401      	adds	r4, #1
 800e666:	9304      	str	r3, [sp, #16]
 800e668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e66c:	482c      	ldr	r0, [pc, #176]	; (800e720 <_vfiprintf_r+0x250>)
 800e66e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e672:	2206      	movs	r2, #6
 800e674:	f7f1 fdbc 	bl	80001f0 <memchr>
 800e678:	2800      	cmp	r0, #0
 800e67a:	d03f      	beq.n	800e6fc <_vfiprintf_r+0x22c>
 800e67c:	4b29      	ldr	r3, [pc, #164]	; (800e724 <_vfiprintf_r+0x254>)
 800e67e:	bb1b      	cbnz	r3, 800e6c8 <_vfiprintf_r+0x1f8>
 800e680:	9b03      	ldr	r3, [sp, #12]
 800e682:	3307      	adds	r3, #7
 800e684:	f023 0307 	bic.w	r3, r3, #7
 800e688:	3308      	adds	r3, #8
 800e68a:	9303      	str	r3, [sp, #12]
 800e68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e68e:	443b      	add	r3, r7
 800e690:	9309      	str	r3, [sp, #36]	; 0x24
 800e692:	e767      	b.n	800e564 <_vfiprintf_r+0x94>
 800e694:	fb0c 3202 	mla	r2, ip, r2, r3
 800e698:	460c      	mov	r4, r1
 800e69a:	2001      	movs	r0, #1
 800e69c:	e7a5      	b.n	800e5ea <_vfiprintf_r+0x11a>
 800e69e:	2300      	movs	r3, #0
 800e6a0:	3401      	adds	r4, #1
 800e6a2:	9305      	str	r3, [sp, #20]
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	f04f 0c0a 	mov.w	ip, #10
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6b0:	3a30      	subs	r2, #48	; 0x30
 800e6b2:	2a09      	cmp	r2, #9
 800e6b4:	d903      	bls.n	800e6be <_vfiprintf_r+0x1ee>
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d0c5      	beq.n	800e646 <_vfiprintf_r+0x176>
 800e6ba:	9105      	str	r1, [sp, #20]
 800e6bc:	e7c3      	b.n	800e646 <_vfiprintf_r+0x176>
 800e6be:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	e7f0      	b.n	800e6aa <_vfiprintf_r+0x1da>
 800e6c8:	ab03      	add	r3, sp, #12
 800e6ca:	9300      	str	r3, [sp, #0]
 800e6cc:	462a      	mov	r2, r5
 800e6ce:	4b16      	ldr	r3, [pc, #88]	; (800e728 <_vfiprintf_r+0x258>)
 800e6d0:	a904      	add	r1, sp, #16
 800e6d2:	4630      	mov	r0, r6
 800e6d4:	f7fc fa24 	bl	800ab20 <_printf_float>
 800e6d8:	4607      	mov	r7, r0
 800e6da:	1c78      	adds	r0, r7, #1
 800e6dc:	d1d6      	bne.n	800e68c <_vfiprintf_r+0x1bc>
 800e6de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6e0:	07d9      	lsls	r1, r3, #31
 800e6e2:	d405      	bmi.n	800e6f0 <_vfiprintf_r+0x220>
 800e6e4:	89ab      	ldrh	r3, [r5, #12]
 800e6e6:	059a      	lsls	r2, r3, #22
 800e6e8:	d402      	bmi.n	800e6f0 <_vfiprintf_r+0x220>
 800e6ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6ec:	f7fc f8cc 	bl	800a888 <__retarget_lock_release_recursive>
 800e6f0:	89ab      	ldrh	r3, [r5, #12]
 800e6f2:	065b      	lsls	r3, r3, #25
 800e6f4:	f53f af12 	bmi.w	800e51c <_vfiprintf_r+0x4c>
 800e6f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6fa:	e711      	b.n	800e520 <_vfiprintf_r+0x50>
 800e6fc:	ab03      	add	r3, sp, #12
 800e6fe:	9300      	str	r3, [sp, #0]
 800e700:	462a      	mov	r2, r5
 800e702:	4b09      	ldr	r3, [pc, #36]	; (800e728 <_vfiprintf_r+0x258>)
 800e704:	a904      	add	r1, sp, #16
 800e706:	4630      	mov	r0, r6
 800e708:	f7fc fcae 	bl	800b068 <_printf_i>
 800e70c:	e7e4      	b.n	800e6d8 <_vfiprintf_r+0x208>
 800e70e:	bf00      	nop
 800e710:	0800f298 	.word	0x0800f298
 800e714:	0800f2b8 	.word	0x0800f2b8
 800e718:	0800f278 	.word	0x0800f278
 800e71c:	0800f5c4 	.word	0x0800f5c4
 800e720:	0800f5ce 	.word	0x0800f5ce
 800e724:	0800ab21 	.word	0x0800ab21
 800e728:	0800e4ab 	.word	0x0800e4ab
 800e72c:	0800f5ca 	.word	0x0800f5ca

0800e730 <_read_r>:
 800e730:	b538      	push	{r3, r4, r5, lr}
 800e732:	4d07      	ldr	r5, [pc, #28]	; (800e750 <_read_r+0x20>)
 800e734:	4604      	mov	r4, r0
 800e736:	4608      	mov	r0, r1
 800e738:	4611      	mov	r1, r2
 800e73a:	2200      	movs	r2, #0
 800e73c:	602a      	str	r2, [r5, #0]
 800e73e:	461a      	mov	r2, r3
 800e740:	f7f3 ff10 	bl	8002564 <_read>
 800e744:	1c43      	adds	r3, r0, #1
 800e746:	d102      	bne.n	800e74e <_read_r+0x1e>
 800e748:	682b      	ldr	r3, [r5, #0]
 800e74a:	b103      	cbz	r3, 800e74e <_read_r+0x1e>
 800e74c:	6023      	str	r3, [r4, #0]
 800e74e:	bd38      	pop	{r3, r4, r5, pc}
 800e750:	20004908 	.word	0x20004908
 800e754:	00000000 	.word	0x00000000

0800e758 <nan>:
 800e758:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e760 <nan+0x8>
 800e75c:	4770      	bx	lr
 800e75e:	bf00      	nop
 800e760:	00000000 	.word	0x00000000
 800e764:	7ff80000 	.word	0x7ff80000

0800e768 <__ascii_wctomb>:
 800e768:	b149      	cbz	r1, 800e77e <__ascii_wctomb+0x16>
 800e76a:	2aff      	cmp	r2, #255	; 0xff
 800e76c:	bf85      	ittet	hi
 800e76e:	238a      	movhi	r3, #138	; 0x8a
 800e770:	6003      	strhi	r3, [r0, #0]
 800e772:	700a      	strbls	r2, [r1, #0]
 800e774:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e778:	bf98      	it	ls
 800e77a:	2001      	movls	r0, #1
 800e77c:	4770      	bx	lr
 800e77e:	4608      	mov	r0, r1
 800e780:	4770      	bx	lr
	...

0800e784 <__assert_func>:
 800e784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e786:	4614      	mov	r4, r2
 800e788:	461a      	mov	r2, r3
 800e78a:	4b09      	ldr	r3, [pc, #36]	; (800e7b0 <__assert_func+0x2c>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	4605      	mov	r5, r0
 800e790:	68d8      	ldr	r0, [r3, #12]
 800e792:	b14c      	cbz	r4, 800e7a8 <__assert_func+0x24>
 800e794:	4b07      	ldr	r3, [pc, #28]	; (800e7b4 <__assert_func+0x30>)
 800e796:	9100      	str	r1, [sp, #0]
 800e798:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e79c:	4906      	ldr	r1, [pc, #24]	; (800e7b8 <__assert_func+0x34>)
 800e79e:	462b      	mov	r3, r5
 800e7a0:	f000 f80e 	bl	800e7c0 <fiprintf>
 800e7a4:	f000 f840 	bl	800e828 <abort>
 800e7a8:	4b04      	ldr	r3, [pc, #16]	; (800e7bc <__assert_func+0x38>)
 800e7aa:	461c      	mov	r4, r3
 800e7ac:	e7f3      	b.n	800e796 <__assert_func+0x12>
 800e7ae:	bf00      	nop
 800e7b0:	20000010 	.word	0x20000010
 800e7b4:	0800f5d5 	.word	0x0800f5d5
 800e7b8:	0800f5e2 	.word	0x0800f5e2
 800e7bc:	0800f610 	.word	0x0800f610

0800e7c0 <fiprintf>:
 800e7c0:	b40e      	push	{r1, r2, r3}
 800e7c2:	b503      	push	{r0, r1, lr}
 800e7c4:	4601      	mov	r1, r0
 800e7c6:	ab03      	add	r3, sp, #12
 800e7c8:	4805      	ldr	r0, [pc, #20]	; (800e7e0 <fiprintf+0x20>)
 800e7ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7ce:	6800      	ldr	r0, [r0, #0]
 800e7d0:	9301      	str	r3, [sp, #4]
 800e7d2:	f7ff fe7d 	bl	800e4d0 <_vfiprintf_r>
 800e7d6:	b002      	add	sp, #8
 800e7d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7dc:	b003      	add	sp, #12
 800e7de:	4770      	bx	lr
 800e7e0:	20000010 	.word	0x20000010

0800e7e4 <_fstat_r>:
 800e7e4:	b538      	push	{r3, r4, r5, lr}
 800e7e6:	4d07      	ldr	r5, [pc, #28]	; (800e804 <_fstat_r+0x20>)
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	4604      	mov	r4, r0
 800e7ec:	4608      	mov	r0, r1
 800e7ee:	4611      	mov	r1, r2
 800e7f0:	602b      	str	r3, [r5, #0]
 800e7f2:	f7f3 fefc 	bl	80025ee <_fstat>
 800e7f6:	1c43      	adds	r3, r0, #1
 800e7f8:	d102      	bne.n	800e800 <_fstat_r+0x1c>
 800e7fa:	682b      	ldr	r3, [r5, #0]
 800e7fc:	b103      	cbz	r3, 800e800 <_fstat_r+0x1c>
 800e7fe:	6023      	str	r3, [r4, #0]
 800e800:	bd38      	pop	{r3, r4, r5, pc}
 800e802:	bf00      	nop
 800e804:	20004908 	.word	0x20004908

0800e808 <_isatty_r>:
 800e808:	b538      	push	{r3, r4, r5, lr}
 800e80a:	4d06      	ldr	r5, [pc, #24]	; (800e824 <_isatty_r+0x1c>)
 800e80c:	2300      	movs	r3, #0
 800e80e:	4604      	mov	r4, r0
 800e810:	4608      	mov	r0, r1
 800e812:	602b      	str	r3, [r5, #0]
 800e814:	f7f3 fefb 	bl	800260e <_isatty>
 800e818:	1c43      	adds	r3, r0, #1
 800e81a:	d102      	bne.n	800e822 <_isatty_r+0x1a>
 800e81c:	682b      	ldr	r3, [r5, #0]
 800e81e:	b103      	cbz	r3, 800e822 <_isatty_r+0x1a>
 800e820:	6023      	str	r3, [r4, #0]
 800e822:	bd38      	pop	{r3, r4, r5, pc}
 800e824:	20004908 	.word	0x20004908

0800e828 <abort>:
 800e828:	b508      	push	{r3, lr}
 800e82a:	2006      	movs	r0, #6
 800e82c:	f000 f82c 	bl	800e888 <raise>
 800e830:	2001      	movs	r0, #1
 800e832:	f7f3 fe8d 	bl	8002550 <_exit>

0800e836 <_raise_r>:
 800e836:	291f      	cmp	r1, #31
 800e838:	b538      	push	{r3, r4, r5, lr}
 800e83a:	4604      	mov	r4, r0
 800e83c:	460d      	mov	r5, r1
 800e83e:	d904      	bls.n	800e84a <_raise_r+0x14>
 800e840:	2316      	movs	r3, #22
 800e842:	6003      	str	r3, [r0, #0]
 800e844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e848:	bd38      	pop	{r3, r4, r5, pc}
 800e84a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e84c:	b112      	cbz	r2, 800e854 <_raise_r+0x1e>
 800e84e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e852:	b94b      	cbnz	r3, 800e868 <_raise_r+0x32>
 800e854:	4620      	mov	r0, r4
 800e856:	f000 f831 	bl	800e8bc <_getpid_r>
 800e85a:	462a      	mov	r2, r5
 800e85c:	4601      	mov	r1, r0
 800e85e:	4620      	mov	r0, r4
 800e860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e864:	f000 b818 	b.w	800e898 <_kill_r>
 800e868:	2b01      	cmp	r3, #1
 800e86a:	d00a      	beq.n	800e882 <_raise_r+0x4c>
 800e86c:	1c59      	adds	r1, r3, #1
 800e86e:	d103      	bne.n	800e878 <_raise_r+0x42>
 800e870:	2316      	movs	r3, #22
 800e872:	6003      	str	r3, [r0, #0]
 800e874:	2001      	movs	r0, #1
 800e876:	e7e7      	b.n	800e848 <_raise_r+0x12>
 800e878:	2400      	movs	r4, #0
 800e87a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e87e:	4628      	mov	r0, r5
 800e880:	4798      	blx	r3
 800e882:	2000      	movs	r0, #0
 800e884:	e7e0      	b.n	800e848 <_raise_r+0x12>
	...

0800e888 <raise>:
 800e888:	4b02      	ldr	r3, [pc, #8]	; (800e894 <raise+0xc>)
 800e88a:	4601      	mov	r1, r0
 800e88c:	6818      	ldr	r0, [r3, #0]
 800e88e:	f7ff bfd2 	b.w	800e836 <_raise_r>
 800e892:	bf00      	nop
 800e894:	20000010 	.word	0x20000010

0800e898 <_kill_r>:
 800e898:	b538      	push	{r3, r4, r5, lr}
 800e89a:	4d07      	ldr	r5, [pc, #28]	; (800e8b8 <_kill_r+0x20>)
 800e89c:	2300      	movs	r3, #0
 800e89e:	4604      	mov	r4, r0
 800e8a0:	4608      	mov	r0, r1
 800e8a2:	4611      	mov	r1, r2
 800e8a4:	602b      	str	r3, [r5, #0]
 800e8a6:	f7f3 fe43 	bl	8002530 <_kill>
 800e8aa:	1c43      	adds	r3, r0, #1
 800e8ac:	d102      	bne.n	800e8b4 <_kill_r+0x1c>
 800e8ae:	682b      	ldr	r3, [r5, #0]
 800e8b0:	b103      	cbz	r3, 800e8b4 <_kill_r+0x1c>
 800e8b2:	6023      	str	r3, [r4, #0]
 800e8b4:	bd38      	pop	{r3, r4, r5, pc}
 800e8b6:	bf00      	nop
 800e8b8:	20004908 	.word	0x20004908

0800e8bc <_getpid_r>:
 800e8bc:	f7f3 be30 	b.w	8002520 <_getpid>

0800e8c0 <atan>:
 800e8c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8c4:	ec55 4b10 	vmov	r4, r5, d0
 800e8c8:	4bc3      	ldr	r3, [pc, #780]	; (800ebd8 <atan+0x318>)
 800e8ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e8ce:	429e      	cmp	r6, r3
 800e8d0:	46ab      	mov	fp, r5
 800e8d2:	dd18      	ble.n	800e906 <atan+0x46>
 800e8d4:	4bc1      	ldr	r3, [pc, #772]	; (800ebdc <atan+0x31c>)
 800e8d6:	429e      	cmp	r6, r3
 800e8d8:	dc01      	bgt.n	800e8de <atan+0x1e>
 800e8da:	d109      	bne.n	800e8f0 <atan+0x30>
 800e8dc:	b144      	cbz	r4, 800e8f0 <atan+0x30>
 800e8de:	4622      	mov	r2, r4
 800e8e0:	462b      	mov	r3, r5
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	4629      	mov	r1, r5
 800e8e6:	f7f1 fcd9 	bl	800029c <__adddf3>
 800e8ea:	4604      	mov	r4, r0
 800e8ec:	460d      	mov	r5, r1
 800e8ee:	e006      	b.n	800e8fe <atan+0x3e>
 800e8f0:	f1bb 0f00 	cmp.w	fp, #0
 800e8f4:	f300 8131 	bgt.w	800eb5a <atan+0x29a>
 800e8f8:	a59b      	add	r5, pc, #620	; (adr r5, 800eb68 <atan+0x2a8>)
 800e8fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e8fe:	ec45 4b10 	vmov	d0, r4, r5
 800e902:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e906:	4bb6      	ldr	r3, [pc, #728]	; (800ebe0 <atan+0x320>)
 800e908:	429e      	cmp	r6, r3
 800e90a:	dc14      	bgt.n	800e936 <atan+0x76>
 800e90c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e910:	429e      	cmp	r6, r3
 800e912:	dc0d      	bgt.n	800e930 <atan+0x70>
 800e914:	a396      	add	r3, pc, #600	; (adr r3, 800eb70 <atan+0x2b0>)
 800e916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e91a:	ee10 0a10 	vmov	r0, s0
 800e91e:	4629      	mov	r1, r5
 800e920:	f7f1 fcbc 	bl	800029c <__adddf3>
 800e924:	4baf      	ldr	r3, [pc, #700]	; (800ebe4 <atan+0x324>)
 800e926:	2200      	movs	r2, #0
 800e928:	f7f2 f8fe 	bl	8000b28 <__aeabi_dcmpgt>
 800e92c:	2800      	cmp	r0, #0
 800e92e:	d1e6      	bne.n	800e8fe <atan+0x3e>
 800e930:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e934:	e02b      	b.n	800e98e <atan+0xce>
 800e936:	f000 f963 	bl	800ec00 <fabs>
 800e93a:	4bab      	ldr	r3, [pc, #684]	; (800ebe8 <atan+0x328>)
 800e93c:	429e      	cmp	r6, r3
 800e93e:	ec55 4b10 	vmov	r4, r5, d0
 800e942:	f300 80bf 	bgt.w	800eac4 <atan+0x204>
 800e946:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e94a:	429e      	cmp	r6, r3
 800e94c:	f300 80a0 	bgt.w	800ea90 <atan+0x1d0>
 800e950:	ee10 2a10 	vmov	r2, s0
 800e954:	ee10 0a10 	vmov	r0, s0
 800e958:	462b      	mov	r3, r5
 800e95a:	4629      	mov	r1, r5
 800e95c:	f7f1 fc9e 	bl	800029c <__adddf3>
 800e960:	4ba0      	ldr	r3, [pc, #640]	; (800ebe4 <atan+0x324>)
 800e962:	2200      	movs	r2, #0
 800e964:	f7f1 fc98 	bl	8000298 <__aeabi_dsub>
 800e968:	2200      	movs	r2, #0
 800e96a:	4606      	mov	r6, r0
 800e96c:	460f      	mov	r7, r1
 800e96e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e972:	4620      	mov	r0, r4
 800e974:	4629      	mov	r1, r5
 800e976:	f7f1 fc91 	bl	800029c <__adddf3>
 800e97a:	4602      	mov	r2, r0
 800e97c:	460b      	mov	r3, r1
 800e97e:	4630      	mov	r0, r6
 800e980:	4639      	mov	r1, r7
 800e982:	f7f1 ff6b 	bl	800085c <__aeabi_ddiv>
 800e986:	f04f 0a00 	mov.w	sl, #0
 800e98a:	4604      	mov	r4, r0
 800e98c:	460d      	mov	r5, r1
 800e98e:	4622      	mov	r2, r4
 800e990:	462b      	mov	r3, r5
 800e992:	4620      	mov	r0, r4
 800e994:	4629      	mov	r1, r5
 800e996:	f7f1 fe37 	bl	8000608 <__aeabi_dmul>
 800e99a:	4602      	mov	r2, r0
 800e99c:	460b      	mov	r3, r1
 800e99e:	4680      	mov	r8, r0
 800e9a0:	4689      	mov	r9, r1
 800e9a2:	f7f1 fe31 	bl	8000608 <__aeabi_dmul>
 800e9a6:	a374      	add	r3, pc, #464	; (adr r3, 800eb78 <atan+0x2b8>)
 800e9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ac:	4606      	mov	r6, r0
 800e9ae:	460f      	mov	r7, r1
 800e9b0:	f7f1 fe2a 	bl	8000608 <__aeabi_dmul>
 800e9b4:	a372      	add	r3, pc, #456	; (adr r3, 800eb80 <atan+0x2c0>)
 800e9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ba:	f7f1 fc6f 	bl	800029c <__adddf3>
 800e9be:	4632      	mov	r2, r6
 800e9c0:	463b      	mov	r3, r7
 800e9c2:	f7f1 fe21 	bl	8000608 <__aeabi_dmul>
 800e9c6:	a370      	add	r3, pc, #448	; (adr r3, 800eb88 <atan+0x2c8>)
 800e9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9cc:	f7f1 fc66 	bl	800029c <__adddf3>
 800e9d0:	4632      	mov	r2, r6
 800e9d2:	463b      	mov	r3, r7
 800e9d4:	f7f1 fe18 	bl	8000608 <__aeabi_dmul>
 800e9d8:	a36d      	add	r3, pc, #436	; (adr r3, 800eb90 <atan+0x2d0>)
 800e9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9de:	f7f1 fc5d 	bl	800029c <__adddf3>
 800e9e2:	4632      	mov	r2, r6
 800e9e4:	463b      	mov	r3, r7
 800e9e6:	f7f1 fe0f 	bl	8000608 <__aeabi_dmul>
 800e9ea:	a36b      	add	r3, pc, #428	; (adr r3, 800eb98 <atan+0x2d8>)
 800e9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f0:	f7f1 fc54 	bl	800029c <__adddf3>
 800e9f4:	4632      	mov	r2, r6
 800e9f6:	463b      	mov	r3, r7
 800e9f8:	f7f1 fe06 	bl	8000608 <__aeabi_dmul>
 800e9fc:	a368      	add	r3, pc, #416	; (adr r3, 800eba0 <atan+0x2e0>)
 800e9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea02:	f7f1 fc4b 	bl	800029c <__adddf3>
 800ea06:	4642      	mov	r2, r8
 800ea08:	464b      	mov	r3, r9
 800ea0a:	f7f1 fdfd 	bl	8000608 <__aeabi_dmul>
 800ea0e:	a366      	add	r3, pc, #408	; (adr r3, 800eba8 <atan+0x2e8>)
 800ea10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea14:	4680      	mov	r8, r0
 800ea16:	4689      	mov	r9, r1
 800ea18:	4630      	mov	r0, r6
 800ea1a:	4639      	mov	r1, r7
 800ea1c:	f7f1 fdf4 	bl	8000608 <__aeabi_dmul>
 800ea20:	a363      	add	r3, pc, #396	; (adr r3, 800ebb0 <atan+0x2f0>)
 800ea22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea26:	f7f1 fc37 	bl	8000298 <__aeabi_dsub>
 800ea2a:	4632      	mov	r2, r6
 800ea2c:	463b      	mov	r3, r7
 800ea2e:	f7f1 fdeb 	bl	8000608 <__aeabi_dmul>
 800ea32:	a361      	add	r3, pc, #388	; (adr r3, 800ebb8 <atan+0x2f8>)
 800ea34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea38:	f7f1 fc2e 	bl	8000298 <__aeabi_dsub>
 800ea3c:	4632      	mov	r2, r6
 800ea3e:	463b      	mov	r3, r7
 800ea40:	f7f1 fde2 	bl	8000608 <__aeabi_dmul>
 800ea44:	a35e      	add	r3, pc, #376	; (adr r3, 800ebc0 <atan+0x300>)
 800ea46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4a:	f7f1 fc25 	bl	8000298 <__aeabi_dsub>
 800ea4e:	4632      	mov	r2, r6
 800ea50:	463b      	mov	r3, r7
 800ea52:	f7f1 fdd9 	bl	8000608 <__aeabi_dmul>
 800ea56:	a35c      	add	r3, pc, #368	; (adr r3, 800ebc8 <atan+0x308>)
 800ea58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5c:	f7f1 fc1c 	bl	8000298 <__aeabi_dsub>
 800ea60:	4632      	mov	r2, r6
 800ea62:	463b      	mov	r3, r7
 800ea64:	f7f1 fdd0 	bl	8000608 <__aeabi_dmul>
 800ea68:	4602      	mov	r2, r0
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	4640      	mov	r0, r8
 800ea6e:	4649      	mov	r1, r9
 800ea70:	f7f1 fc14 	bl	800029c <__adddf3>
 800ea74:	4622      	mov	r2, r4
 800ea76:	462b      	mov	r3, r5
 800ea78:	f7f1 fdc6 	bl	8000608 <__aeabi_dmul>
 800ea7c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800ea80:	4602      	mov	r2, r0
 800ea82:	460b      	mov	r3, r1
 800ea84:	d14b      	bne.n	800eb1e <atan+0x25e>
 800ea86:	4620      	mov	r0, r4
 800ea88:	4629      	mov	r1, r5
 800ea8a:	f7f1 fc05 	bl	8000298 <__aeabi_dsub>
 800ea8e:	e72c      	b.n	800e8ea <atan+0x2a>
 800ea90:	ee10 0a10 	vmov	r0, s0
 800ea94:	4b53      	ldr	r3, [pc, #332]	; (800ebe4 <atan+0x324>)
 800ea96:	2200      	movs	r2, #0
 800ea98:	4629      	mov	r1, r5
 800ea9a:	f7f1 fbfd 	bl	8000298 <__aeabi_dsub>
 800ea9e:	4b51      	ldr	r3, [pc, #324]	; (800ebe4 <atan+0x324>)
 800eaa0:	4606      	mov	r6, r0
 800eaa2:	460f      	mov	r7, r1
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	4620      	mov	r0, r4
 800eaa8:	4629      	mov	r1, r5
 800eaaa:	f7f1 fbf7 	bl	800029c <__adddf3>
 800eaae:	4602      	mov	r2, r0
 800eab0:	460b      	mov	r3, r1
 800eab2:	4630      	mov	r0, r6
 800eab4:	4639      	mov	r1, r7
 800eab6:	f7f1 fed1 	bl	800085c <__aeabi_ddiv>
 800eaba:	f04f 0a01 	mov.w	sl, #1
 800eabe:	4604      	mov	r4, r0
 800eac0:	460d      	mov	r5, r1
 800eac2:	e764      	b.n	800e98e <atan+0xce>
 800eac4:	4b49      	ldr	r3, [pc, #292]	; (800ebec <atan+0x32c>)
 800eac6:	429e      	cmp	r6, r3
 800eac8:	da1d      	bge.n	800eb06 <atan+0x246>
 800eaca:	ee10 0a10 	vmov	r0, s0
 800eace:	4b48      	ldr	r3, [pc, #288]	; (800ebf0 <atan+0x330>)
 800ead0:	2200      	movs	r2, #0
 800ead2:	4629      	mov	r1, r5
 800ead4:	f7f1 fbe0 	bl	8000298 <__aeabi_dsub>
 800ead8:	4b45      	ldr	r3, [pc, #276]	; (800ebf0 <atan+0x330>)
 800eada:	4606      	mov	r6, r0
 800eadc:	460f      	mov	r7, r1
 800eade:	2200      	movs	r2, #0
 800eae0:	4620      	mov	r0, r4
 800eae2:	4629      	mov	r1, r5
 800eae4:	f7f1 fd90 	bl	8000608 <__aeabi_dmul>
 800eae8:	4b3e      	ldr	r3, [pc, #248]	; (800ebe4 <atan+0x324>)
 800eaea:	2200      	movs	r2, #0
 800eaec:	f7f1 fbd6 	bl	800029c <__adddf3>
 800eaf0:	4602      	mov	r2, r0
 800eaf2:	460b      	mov	r3, r1
 800eaf4:	4630      	mov	r0, r6
 800eaf6:	4639      	mov	r1, r7
 800eaf8:	f7f1 feb0 	bl	800085c <__aeabi_ddiv>
 800eafc:	f04f 0a02 	mov.w	sl, #2
 800eb00:	4604      	mov	r4, r0
 800eb02:	460d      	mov	r5, r1
 800eb04:	e743      	b.n	800e98e <atan+0xce>
 800eb06:	462b      	mov	r3, r5
 800eb08:	ee10 2a10 	vmov	r2, s0
 800eb0c:	4939      	ldr	r1, [pc, #228]	; (800ebf4 <atan+0x334>)
 800eb0e:	2000      	movs	r0, #0
 800eb10:	f7f1 fea4 	bl	800085c <__aeabi_ddiv>
 800eb14:	f04f 0a03 	mov.w	sl, #3
 800eb18:	4604      	mov	r4, r0
 800eb1a:	460d      	mov	r5, r1
 800eb1c:	e737      	b.n	800e98e <atan+0xce>
 800eb1e:	4b36      	ldr	r3, [pc, #216]	; (800ebf8 <atan+0x338>)
 800eb20:	4e36      	ldr	r6, [pc, #216]	; (800ebfc <atan+0x33c>)
 800eb22:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800eb26:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800eb2a:	e9da 2300 	ldrd	r2, r3, [sl]
 800eb2e:	f7f1 fbb3 	bl	8000298 <__aeabi_dsub>
 800eb32:	4622      	mov	r2, r4
 800eb34:	462b      	mov	r3, r5
 800eb36:	f7f1 fbaf 	bl	8000298 <__aeabi_dsub>
 800eb3a:	4602      	mov	r2, r0
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800eb42:	f7f1 fba9 	bl	8000298 <__aeabi_dsub>
 800eb46:	f1bb 0f00 	cmp.w	fp, #0
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	460d      	mov	r5, r1
 800eb4e:	f6bf aed6 	bge.w	800e8fe <atan+0x3e>
 800eb52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb56:	461d      	mov	r5, r3
 800eb58:	e6d1      	b.n	800e8fe <atan+0x3e>
 800eb5a:	a51d      	add	r5, pc, #116	; (adr r5, 800ebd0 <atan+0x310>)
 800eb5c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800eb60:	e6cd      	b.n	800e8fe <atan+0x3e>
 800eb62:	bf00      	nop
 800eb64:	f3af 8000 	nop.w
 800eb68:	54442d18 	.word	0x54442d18
 800eb6c:	bff921fb 	.word	0xbff921fb
 800eb70:	8800759c 	.word	0x8800759c
 800eb74:	7e37e43c 	.word	0x7e37e43c
 800eb78:	e322da11 	.word	0xe322da11
 800eb7c:	3f90ad3a 	.word	0x3f90ad3a
 800eb80:	24760deb 	.word	0x24760deb
 800eb84:	3fa97b4b 	.word	0x3fa97b4b
 800eb88:	a0d03d51 	.word	0xa0d03d51
 800eb8c:	3fb10d66 	.word	0x3fb10d66
 800eb90:	c54c206e 	.word	0xc54c206e
 800eb94:	3fb745cd 	.word	0x3fb745cd
 800eb98:	920083ff 	.word	0x920083ff
 800eb9c:	3fc24924 	.word	0x3fc24924
 800eba0:	5555550d 	.word	0x5555550d
 800eba4:	3fd55555 	.word	0x3fd55555
 800eba8:	2c6a6c2f 	.word	0x2c6a6c2f
 800ebac:	bfa2b444 	.word	0xbfa2b444
 800ebb0:	52defd9a 	.word	0x52defd9a
 800ebb4:	3fadde2d 	.word	0x3fadde2d
 800ebb8:	af749a6d 	.word	0xaf749a6d
 800ebbc:	3fb3b0f2 	.word	0x3fb3b0f2
 800ebc0:	fe231671 	.word	0xfe231671
 800ebc4:	3fbc71c6 	.word	0x3fbc71c6
 800ebc8:	9998ebc4 	.word	0x9998ebc4
 800ebcc:	3fc99999 	.word	0x3fc99999
 800ebd0:	54442d18 	.word	0x54442d18
 800ebd4:	3ff921fb 	.word	0x3ff921fb
 800ebd8:	440fffff 	.word	0x440fffff
 800ebdc:	7ff00000 	.word	0x7ff00000
 800ebe0:	3fdbffff 	.word	0x3fdbffff
 800ebe4:	3ff00000 	.word	0x3ff00000
 800ebe8:	3ff2ffff 	.word	0x3ff2ffff
 800ebec:	40038000 	.word	0x40038000
 800ebf0:	3ff80000 	.word	0x3ff80000
 800ebf4:	bff00000 	.word	0xbff00000
 800ebf8:	0800f738 	.word	0x0800f738
 800ebfc:	0800f718 	.word	0x0800f718

0800ec00 <fabs>:
 800ec00:	ec51 0b10 	vmov	r0, r1, d0
 800ec04:	ee10 2a10 	vmov	r2, s0
 800ec08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ec0c:	ec43 2b10 	vmov	d0, r2, r3
 800ec10:	4770      	bx	lr

0800ec12 <atan2>:
 800ec12:	f000 b801 	b.w	800ec18 <__ieee754_atan2>
	...

0800ec18 <__ieee754_atan2>:
 800ec18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec1c:	ec57 6b11 	vmov	r6, r7, d1
 800ec20:	4273      	negs	r3, r6
 800ec22:	f8df e184 	ldr.w	lr, [pc, #388]	; 800eda8 <__ieee754_atan2+0x190>
 800ec26:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ec2a:	4333      	orrs	r3, r6
 800ec2c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ec30:	4573      	cmp	r3, lr
 800ec32:	ec51 0b10 	vmov	r0, r1, d0
 800ec36:	ee11 8a10 	vmov	r8, s2
 800ec3a:	d80a      	bhi.n	800ec52 <__ieee754_atan2+0x3a>
 800ec3c:	4244      	negs	r4, r0
 800ec3e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ec42:	4304      	orrs	r4, r0
 800ec44:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ec48:	4574      	cmp	r4, lr
 800ec4a:	ee10 9a10 	vmov	r9, s0
 800ec4e:	468c      	mov	ip, r1
 800ec50:	d907      	bls.n	800ec62 <__ieee754_atan2+0x4a>
 800ec52:	4632      	mov	r2, r6
 800ec54:	463b      	mov	r3, r7
 800ec56:	f7f1 fb21 	bl	800029c <__adddf3>
 800ec5a:	ec41 0b10 	vmov	d0, r0, r1
 800ec5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec62:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ec66:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ec6a:	4334      	orrs	r4, r6
 800ec6c:	d103      	bne.n	800ec76 <__ieee754_atan2+0x5e>
 800ec6e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec72:	f7ff be25 	b.w	800e8c0 <atan>
 800ec76:	17bc      	asrs	r4, r7, #30
 800ec78:	f004 0402 	and.w	r4, r4, #2
 800ec7c:	ea53 0909 	orrs.w	r9, r3, r9
 800ec80:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ec84:	d107      	bne.n	800ec96 <__ieee754_atan2+0x7e>
 800ec86:	2c02      	cmp	r4, #2
 800ec88:	d060      	beq.n	800ed4c <__ieee754_atan2+0x134>
 800ec8a:	2c03      	cmp	r4, #3
 800ec8c:	d1e5      	bne.n	800ec5a <__ieee754_atan2+0x42>
 800ec8e:	a142      	add	r1, pc, #264	; (adr r1, 800ed98 <__ieee754_atan2+0x180>)
 800ec90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec94:	e7e1      	b.n	800ec5a <__ieee754_atan2+0x42>
 800ec96:	ea52 0808 	orrs.w	r8, r2, r8
 800ec9a:	d106      	bne.n	800ecaa <__ieee754_atan2+0x92>
 800ec9c:	f1bc 0f00 	cmp.w	ip, #0
 800eca0:	da5f      	bge.n	800ed62 <__ieee754_atan2+0x14a>
 800eca2:	a13f      	add	r1, pc, #252	; (adr r1, 800eda0 <__ieee754_atan2+0x188>)
 800eca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eca8:	e7d7      	b.n	800ec5a <__ieee754_atan2+0x42>
 800ecaa:	4572      	cmp	r2, lr
 800ecac:	d10f      	bne.n	800ecce <__ieee754_atan2+0xb6>
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ecb4:	d107      	bne.n	800ecc6 <__ieee754_atan2+0xae>
 800ecb6:	2c02      	cmp	r4, #2
 800ecb8:	d84c      	bhi.n	800ed54 <__ieee754_atan2+0x13c>
 800ecba:	4b35      	ldr	r3, [pc, #212]	; (800ed90 <__ieee754_atan2+0x178>)
 800ecbc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ecc0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ecc4:	e7c9      	b.n	800ec5a <__ieee754_atan2+0x42>
 800ecc6:	2c02      	cmp	r4, #2
 800ecc8:	d848      	bhi.n	800ed5c <__ieee754_atan2+0x144>
 800ecca:	4b32      	ldr	r3, [pc, #200]	; (800ed94 <__ieee754_atan2+0x17c>)
 800eccc:	e7f6      	b.n	800ecbc <__ieee754_atan2+0xa4>
 800ecce:	4573      	cmp	r3, lr
 800ecd0:	d0e4      	beq.n	800ec9c <__ieee754_atan2+0x84>
 800ecd2:	1a9b      	subs	r3, r3, r2
 800ecd4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ecd8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ecdc:	da1e      	bge.n	800ed1c <__ieee754_atan2+0x104>
 800ecde:	2f00      	cmp	r7, #0
 800ece0:	da01      	bge.n	800ece6 <__ieee754_atan2+0xce>
 800ece2:	323c      	adds	r2, #60	; 0x3c
 800ece4:	db1e      	blt.n	800ed24 <__ieee754_atan2+0x10c>
 800ece6:	4632      	mov	r2, r6
 800ece8:	463b      	mov	r3, r7
 800ecea:	f7f1 fdb7 	bl	800085c <__aeabi_ddiv>
 800ecee:	ec41 0b10 	vmov	d0, r0, r1
 800ecf2:	f7ff ff85 	bl	800ec00 <fabs>
 800ecf6:	f7ff fde3 	bl	800e8c0 <atan>
 800ecfa:	ec51 0b10 	vmov	r0, r1, d0
 800ecfe:	2c01      	cmp	r4, #1
 800ed00:	d013      	beq.n	800ed2a <__ieee754_atan2+0x112>
 800ed02:	2c02      	cmp	r4, #2
 800ed04:	d015      	beq.n	800ed32 <__ieee754_atan2+0x11a>
 800ed06:	2c00      	cmp	r4, #0
 800ed08:	d0a7      	beq.n	800ec5a <__ieee754_atan2+0x42>
 800ed0a:	a319      	add	r3, pc, #100	; (adr r3, 800ed70 <__ieee754_atan2+0x158>)
 800ed0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed10:	f7f1 fac2 	bl	8000298 <__aeabi_dsub>
 800ed14:	a318      	add	r3, pc, #96	; (adr r3, 800ed78 <__ieee754_atan2+0x160>)
 800ed16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed1a:	e014      	b.n	800ed46 <__ieee754_atan2+0x12e>
 800ed1c:	a118      	add	r1, pc, #96	; (adr r1, 800ed80 <__ieee754_atan2+0x168>)
 800ed1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed22:	e7ec      	b.n	800ecfe <__ieee754_atan2+0xe6>
 800ed24:	2000      	movs	r0, #0
 800ed26:	2100      	movs	r1, #0
 800ed28:	e7e9      	b.n	800ecfe <__ieee754_atan2+0xe6>
 800ed2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed2e:	4619      	mov	r1, r3
 800ed30:	e793      	b.n	800ec5a <__ieee754_atan2+0x42>
 800ed32:	a30f      	add	r3, pc, #60	; (adr r3, 800ed70 <__ieee754_atan2+0x158>)
 800ed34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed38:	f7f1 faae 	bl	8000298 <__aeabi_dsub>
 800ed3c:	4602      	mov	r2, r0
 800ed3e:	460b      	mov	r3, r1
 800ed40:	a10d      	add	r1, pc, #52	; (adr r1, 800ed78 <__ieee754_atan2+0x160>)
 800ed42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed46:	f7f1 faa7 	bl	8000298 <__aeabi_dsub>
 800ed4a:	e786      	b.n	800ec5a <__ieee754_atan2+0x42>
 800ed4c:	a10a      	add	r1, pc, #40	; (adr r1, 800ed78 <__ieee754_atan2+0x160>)
 800ed4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed52:	e782      	b.n	800ec5a <__ieee754_atan2+0x42>
 800ed54:	a10c      	add	r1, pc, #48	; (adr r1, 800ed88 <__ieee754_atan2+0x170>)
 800ed56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed5a:	e77e      	b.n	800ec5a <__ieee754_atan2+0x42>
 800ed5c:	2000      	movs	r0, #0
 800ed5e:	2100      	movs	r1, #0
 800ed60:	e77b      	b.n	800ec5a <__ieee754_atan2+0x42>
 800ed62:	a107      	add	r1, pc, #28	; (adr r1, 800ed80 <__ieee754_atan2+0x168>)
 800ed64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed68:	e777      	b.n	800ec5a <__ieee754_atan2+0x42>
 800ed6a:	bf00      	nop
 800ed6c:	f3af 8000 	nop.w
 800ed70:	33145c07 	.word	0x33145c07
 800ed74:	3ca1a626 	.word	0x3ca1a626
 800ed78:	54442d18 	.word	0x54442d18
 800ed7c:	400921fb 	.word	0x400921fb
 800ed80:	54442d18 	.word	0x54442d18
 800ed84:	3ff921fb 	.word	0x3ff921fb
 800ed88:	54442d18 	.word	0x54442d18
 800ed8c:	3fe921fb 	.word	0x3fe921fb
 800ed90:	0800f758 	.word	0x0800f758
 800ed94:	0800f770 	.word	0x0800f770
 800ed98:	54442d18 	.word	0x54442d18
 800ed9c:	c00921fb 	.word	0xc00921fb
 800eda0:	54442d18 	.word	0x54442d18
 800eda4:	bff921fb 	.word	0xbff921fb
 800eda8:	7ff00000 	.word	0x7ff00000

0800edac <_init>:
 800edac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edae:	bf00      	nop
 800edb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edb2:	bc08      	pop	{r3}
 800edb4:	469e      	mov	lr, r3
 800edb6:	4770      	bx	lr

0800edb8 <_fini>:
 800edb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edba:	bf00      	nop
 800edbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edbe:	bc08      	pop	{r3}
 800edc0:	469e      	mov	lr, r3
 800edc2:	4770      	bx	lr
