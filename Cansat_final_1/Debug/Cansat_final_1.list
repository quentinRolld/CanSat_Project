
Cansat_final_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000918  0800db78  0800db78  0001db78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e490  0800e490  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e490  0800e490  0001e490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e498  0800e498  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e498  0800e498  0001e498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e49c  0800e49c  0001e49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e4a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004720  200001e8  0800e684  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004908  0800e684  00024908  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf56  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042d8  00000000  00000000  0003d16a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  00041448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a8  00000000  00000000  00042ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be86  00000000  00000000  00043f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e30f  00000000  00000000  0005fdde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c760  00000000  00000000  0007e0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011a84d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006efc  00000000  00000000  0011a8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800db5c 	.word	0x0800db5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800db5c 	.word	0x0800db5c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c30:	f000 b9aa 	b.w	8000f88 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f83c 	bl	8000cb8 <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__aeabi_d2lz>:
 8000c4c:	b538      	push	{r3, r4, r5, lr}
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2300      	movs	r3, #0
 8000c52:	4604      	mov	r4, r0
 8000c54:	460d      	mov	r5, r1
 8000c56:	f7ff ff49 	bl	8000aec <__aeabi_dcmplt>
 8000c5a:	b928      	cbnz	r0, 8000c68 <__aeabi_d2lz+0x1c>
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	4629      	mov	r1, r5
 8000c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c64:	f000 b80a 	b.w	8000c7c <__aeabi_d2ulz>
 8000c68:	4620      	mov	r0, r4
 8000c6a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c6e:	f000 f805 	bl	8000c7c <__aeabi_d2ulz>
 8000c72:	4240      	negs	r0, r0
 8000c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c78:	bd38      	pop	{r3, r4, r5, pc}
 8000c7a:	bf00      	nop

08000c7c <__aeabi_d2ulz>:
 8000c7c:	b5d0      	push	{r4, r6, r7, lr}
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__aeabi_d2ulz+0x34>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	4606      	mov	r6, r0
 8000c84:	460f      	mov	r7, r1
 8000c86:	f7ff fcbf 	bl	8000608 <__aeabi_dmul>
 8000c8a:	f7ff ff57 	bl	8000b3c <__aeabi_d2uiz>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	f7ff fc40 	bl	8000514 <__aeabi_ui2d>
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <__aeabi_d2ulz+0x38>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f7ff fcb6 	bl	8000608 <__aeabi_dmul>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	4639      	mov	r1, r7
 8000ca4:	f7ff faf8 	bl	8000298 <__aeabi_dsub>
 8000ca8:	f7ff ff48 	bl	8000b3c <__aeabi_d2uiz>
 8000cac:	4621      	mov	r1, r4
 8000cae:	bdd0      	pop	{r4, r6, r7, pc}
 8000cb0:	3df00000 	.word	0x3df00000
 8000cb4:	41f00000 	.word	0x41f00000

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <Task_lancement_Cansat>:
extern TaskHandle_t pxeCompass;
/****************************/



void Task_lancement_Cansat(){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af02      	add	r7, sp, #8

	for(;;){

		xTaskCreate(Task_Mesure_M, "mesure champ magnetique", 500, NULL, osPriorityHigh, &pxMesure_M);
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <Task_lancement_Cansat+0x3c>)
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	2302      	movs	r3, #2
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fa0:	490a      	ldr	r1, [pc, #40]	; (8000fcc <Task_lancement_Cansat+0x40>)
 8000fa2:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <Task_lancement_Cansat+0x44>)
 8000fa4:	f008 f856 	bl	8009054 <xTaskCreate>
		//xTaskCreate(Task_Mesure_AetG, "mesure acceleration lineaire et angulaire", 500, NULL, osPriorityAboveNormal, pxCreatedTask);
		xTaskCreate(Task_eCompass, "eCompass", 500, NULL, osPriorityAboveNormal, &pxeCompass);
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <Task_lancement_Cansat+0x48>)
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	2301      	movs	r3, #1
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fb6:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <Task_lancement_Cansat+0x4c>)
 8000fb8:	4808      	ldr	r0, [pc, #32]	; (8000fdc <Task_lancement_Cansat+0x50>)
 8000fba:	f008 f84b 	bl	8009054 <xTaskCreate>

		vTaskDelete(NULL);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f008 f996 	bl	80092f0 <vTaskDelete>
		xTaskCreate(Task_Mesure_M, "mesure champ magnetique", 500, NULL, osPriorityHigh, &pxMesure_M);
 8000fc4:	e7e5      	b.n	8000f92 <Task_lancement_Cansat+0x6>
 8000fc6:	bf00      	nop
 8000fc8:	20000210 	.word	0x20000210
 8000fcc:	0800db78 	.word	0x0800db78
 8000fd0:	08000fe1 	.word	0x08000fe1
 8000fd4:	20000214 	.word	0x20000214
 8000fd8:	0800db90 	.word	0x0800db90
 8000fdc:	08001071 	.word	0x08001071

08000fe0 <Task_Mesure_M>:
	}
}


void Task_Mesure_M(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0

	TickType_t xLastWakeTime;
		const TickType_t xFrequency = 200;
 8000fe6:	23c8      	movs	r3, #200	; 0xc8
 8000fe8:	607b      	str	r3, [r7, #4]

		// Initialise the xLastWakeTime variable with the current time.
		xLastWakeTime = xTaskGetTickCount();
 8000fea:	f008 fbd7 	bl	800979c <xTaskGetTickCount>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	603b      	str	r3, [r7, #0]

	for(;;){

		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f008 fa0a 	bl	8009410 <vTaskDelayUntil>
		printf("mesure champ magnetique \r\n");
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <Task_Mesure_M+0x30>)
 8000ffe:	f009 fda5 	bl	800ab4c <puts>
		Measure_M(&hi2c1, pDataCansat.IMU.MagnetometerData.mag_raw, pDataCansat.IMU.MagnetometerData.offset, pDataCansat.IMU.MagnetometerData.coeff);
 8001002:	4b04      	ldr	r3, [pc, #16]	; (8001014 <Task_Mesure_M+0x34>)
 8001004:	4a04      	ldr	r2, [pc, #16]	; (8001018 <Task_Mesure_M+0x38>)
 8001006:	4905      	ldr	r1, [pc, #20]	; (800101c <Task_Mesure_M+0x3c>)
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <Task_Mesure_M+0x40>)
 800100a:	f000 f97d 	bl	8001308 <Measure_M>
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800100e:	e7f0      	b.n	8000ff2 <Task_Mesure_M+0x12>
 8001010:	0800db9c 	.word	0x0800db9c
 8001014:	200009f8 	.word	0x200009f8
 8001018:	200009e0 	.word	0x200009e0
 800101c:	200009c8 	.word	0x200009c8
 8001020:	20000914 	.word	0x20000914

08001024 <Task_GPS_data_reading>:
}

/* On démarre cette tâche dès la mise sous tension du Cansat car le GPS met un peu de temps à se lancer
 * Par la suite, elle tourne en tâche de fond toutes les secondes.
 */
void Task_GPS_data_reading(){
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b0af      	sub	sp, #188	; 0xbc
 8001028:	af2e      	add	r7, sp, #184	; 0xb8

	HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_gps_rx, 1);
 800102a:	2201      	movs	r2, #1
 800102c:	490c      	ldr	r1, [pc, #48]	; (8001060 <Task_GPS_data_reading+0x3c>)
 800102e:	480d      	ldr	r0, [pc, #52]	; (8001064 <Task_GPS_data_reading+0x40>)
 8001030:	f006 fedd 	bl	8007dee <HAL_UART_Receive_IT>

	for(;;){

		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001034:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001038:	2001      	movs	r0, #1
 800103a:	f008 fdb3 	bl	8009ba4 <ulTaskNotifyTake>

		GPS_data_reading(pDataCansat);
 800103e:	4c0a      	ldr	r4, [pc, #40]	; (8001068 <Task_GPS_data_reading+0x44>)
 8001040:	4668      	mov	r0, sp
 8001042:	f104 0310 	add.w	r3, r4, #16
 8001046:	22b8      	movs	r2, #184	; 0xb8
 8001048:	4619      	mov	r1, r3
 800104a:	f009 fc4e 	bl	800a8ea <memcpy>
 800104e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001052:	f000 fc8f 	bl	8001974 <GPS_data_reading>
		printf("GPS read ***************** \r\n");
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <Task_GPS_data_reading+0x48>)
 8001058:	f009 fd78 	bl	800ab4c <puts>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800105c:	e7ea      	b.n	8001034 <Task_GPS_data_reading+0x10>
 800105e:	bf00      	nop
 8001060:	20000a34 	.word	0x20000a34
 8001064:	20000b18 	.word	0x20000b18
 8001068:	20000968 	.word	0x20000968
 800106c:	0800dbb8 	.word	0x0800dbb8

08001070 <Task_eCompass>:
	}
}



void Task_eCompass(){
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b0b5      	sub	sp, #212	; 0xd4
 8001074:	af2e      	add	r7, sp, #184	; 0xb8

	float Cansat_theta = 0;
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
	double Delta_theta = 0;
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9c7 2302 	strd	r2, r3, [r7, #8]

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000;
 8001088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108c:	607b      	str	r3, [r7, #4]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 800108e:	f008 fb85 	bl	800979c <xTaskGetTickCount>
 8001092:	4603      	mov	r3, r0
 8001094:	603b      	str	r3, [r7, #0]

	for(;;){

		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8001096:	463b      	mov	r3, r7
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	4618      	mov	r0, r3
 800109c:	f008 f9b8 	bl	8009410 <vTaskDelayUntil>
		// ---> Messure accéléro
		// ---> calcul

		//3. Conversion du champ magnétique en degré

		Cansat_theta = magnetic_field_to_degree(pDataCansat.IMU.MagnetometerData.mag_raw);
 80010a0:	4814      	ldr	r0, [pc, #80]	; (80010f4 <Task_eCompass+0x84>)
 80010a2:	f000 fac9 	bl	8001638 <magnetic_field_to_degree>
 80010a6:	ed87 0a05 	vstr	s0, [r7, #20]
		pDataCansat.IMU.MagnetometerData.degree_angle = Cansat_theta;
 80010aa:	6978      	ldr	r0, [r7, #20]
 80010ac:	f7ff fa54 	bl	8000558 <__aeabi_f2d>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4910      	ldr	r1, [pc, #64]	; (80010f8 <Task_eCompass+0x88>)
 80010b6:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0

		printf("Cansat theta computed * * * * * * * * * \r\n");
 80010ba:	4810      	ldr	r0, [pc, #64]	; (80010fc <Task_eCompass+0x8c>)
 80010bc:	f009 fd46 	bl	800ab4c <puts>

		//4. Calcul du Delta theta

		Delta_theta = Delta_theta_calculation(pDataCansat);
 80010c0:	4c0d      	ldr	r4, [pc, #52]	; (80010f8 <Task_eCompass+0x88>)
 80010c2:	4668      	mov	r0, sp
 80010c4:	f104 0310 	add.w	r3, r4, #16
 80010c8:	22b8      	movs	r2, #184	; 0xb8
 80010ca:	4619      	mov	r1, r3
 80010cc:	f009 fc0d 	bl	800a8ea <memcpy>
 80010d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010d4:	f000 fb12 	bl	80016fc <Delta_theta_calculation>
 80010d8:	ed87 0b02 	vstr	d0, [r7, #8]

		printf("Delta theta computed * * * * * * * * * * \r\n");
 80010dc:	4808      	ldr	r0, [pc, #32]	; (8001100 <Task_eCompass+0x90>)
 80010de:	f009 fd35 	bl	800ab4c <puts>

		//5. Rotation des servos en conséquence

		choice_direction_intensity(Delta_theta);
 80010e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010e6:	f7ff fd29 	bl	8000b3c <__aeabi_d2uiz>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 f88b 	bl	8002208 <choice_direction_intensity>
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 80010f2:	e7d0      	b.n	8001096 <Task_eCompass+0x26>
 80010f4:	200009c8 	.word	0x200009c8
 80010f8:	20000968 	.word	0x20000968
 80010fc:	0800dbd8 	.word	0x0800dbd8
 8001100:	0800dc04 	.word	0x0800dc04

08001104 <Init>:
	 * et elle configure ce dernier pour qu'il réalise des mesures en continu.
	 * @param p_hi2c1 Pointeur vers une structure I2C qui contient l'information de configuration pour un i2c particulier
	 * @retval None
	 */
void Init(I2C_HandleTypeDef* p_hi2c1)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af04      	add	r7, sp, #16
 800110a:	6078      	str	r0, [r7, #4]

	uint8_t buff[6];
	buff[0] = 0x80;
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD,  PWR_MGMT_1,  1, &buff[0], 1, 10);
 8001110:	230a      	movs	r3, #10
 8001112:	9302      	str	r3, [sp, #8]
 8001114:	2301      	movs	r3, #1
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2301      	movs	r3, #1
 8001120:	226b      	movs	r2, #107	; 0x6b
 8001122:	21d0      	movs	r1, #208	; 0xd0
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f002 fd59 	bl	8003bdc <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800112a:	2064      	movs	r0, #100	; 0x64
 800112c:	f001 fd6e 	bl	8002c0c <HAL_Delay>
	buff[0] = 0x1;
 8001130:	2301      	movs	r3, #1
 8001132:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD, PWR_MGMT_1,  1, &buff[0], 1, 10);
 8001134:	230a      	movs	r3, #10
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	2301      	movs	r3, #1
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2301      	movs	r3, #1
 8001144:	226b      	movs	r2, #107	; 0x6b
 8001146:	21d0      	movs	r1, #208	; 0xd0
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f002 fd47 	bl	8003bdc <HAL_I2C_Mem_Write>


	/********* changement de la sensibilité de l'accélérometre  00=2g 01=4g 10=8g 11=16g *********/
	HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD,  ACCEL_CONFIG,  1, &buff[0], 1, 10);
 800114e:	230a      	movs	r3, #10
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2301      	movs	r3, #1
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	221c      	movs	r2, #28
 8001160:	21d0      	movs	r1, #208	; 0xd0
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f002 fe34 	bl	8003dd0 <HAL_I2C_Mem_Read>

	//Pour mettre 00
	buff[0] =(buff[0] & (0b11100111)) ;
 8001168:	7a3b      	ldrb	r3, [r7, #8]
 800116a:	f023 0318 	bic.w	r3, r3, #24
 800116e:	b2db      	uxtb	r3, r3
 8001170:	723b      	strb	r3, [r7, #8]
	//buff[0] =(buff[0] & (0b11110111)) ;
	//buff[0] =(buff[0] | (0b00010000)) ;
	//Pour mettre 11
	//buff[0] =(buff[0] | (0b00011000)) ;

	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD,  ACCEL_CONFIG,  1, &buff[0], 1, 10);
 8001172:	230a      	movs	r3, #10
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	2301      	movs	r3, #1
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	221c      	movs	r2, #28
 8001184:	21d0      	movs	r1, #208	; 0xd0
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f002 fd28 	bl	8003bdc <HAL_I2C_Mem_Write>


	buff[0]=0x2; // Bypass pour activer le magnétomètre
 800118c:	2302      	movs	r3, #2
 800118e:	723b      	strb	r3, [r7, #8]
		  if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,INT_PIN_CFG,1,&buff[0],1,10)!=HAL_OK){
 8001190:	230a      	movs	r3, #10
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	2301      	movs	r3, #1
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	2237      	movs	r2, #55	; 0x37
 80011a2:	21d0      	movs	r1, #208	; 0xd0
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f002 fd19 	bl	8003bdc <HAL_I2C_Mem_Write>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d004      	beq.n	80011ba <Init+0xb6>
			  printf("probleme activation magnetometre --> fct Init \r\n");
 80011b0:	4851      	ldr	r0, [pc, #324]	; (80012f8 <Init+0x1f4>)
 80011b2:	f009 fccb 	bl	800ab4c <puts>
		  	  Error_Handler();
 80011b6:	f000 ff7f 	bl	80020b8 <Error_Handler>
		  }
	buff[0]=0x16; // configuration mesure en continu du magnétomètre
 80011ba:	2316      	movs	r3, #22
 80011bc:	723b      	strb	r3, [r7, #8]
		 	  if(HAL_I2C_Mem_Write(p_hi2c1,MAGNETO_ADD,AK8963_CNTL,1,&buff[0],1,10)!=HAL_OK){
 80011be:	230a      	movs	r3, #10
 80011c0:	9302      	str	r3, [sp, #8]
 80011c2:	2301      	movs	r3, #1
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2301      	movs	r3, #1
 80011ce:	220a      	movs	r2, #10
 80011d0:	2118      	movs	r1, #24
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f002 fd02 	bl	8003bdc <HAL_I2C_Mem_Write>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d004      	beq.n	80011e8 <Init+0xe4>
		 		  printf("probleme configuration mesure magnetometre --> fct Init \r\n");
 80011de:	4847      	ldr	r0, [pc, #284]	; (80012fc <Init+0x1f8>)
 80011e0:	f009 fcb4 	bl	800ab4c <puts>
		 	  	  Error_Handler();
 80011e4:	f000 ff68 	bl	80020b8 <Error_Handler>

		 	  }

	/********** Réglage de la bande passante **********/

	buff[0]=0x3;
 80011e8:	2303      	movs	r3, #3
 80011ea:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,CONFIG,1,&buff[0],1,10)!=HAL_OK){
 80011ec:	230a      	movs	r3, #10
 80011ee:	9302      	str	r3, [sp, #8]
 80011f0:	2301      	movs	r3, #1
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2301      	movs	r3, #1
 80011fc:	221a      	movs	r2, #26
 80011fe:	21d0      	movs	r1, #208	; 0xd0
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f002 fceb 	bl	8003bdc <HAL_I2C_Mem_Write>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d004      	beq.n	8001216 <Init+0x112>
		printf("probleme bande passante --> fct Init \r\n");
 800120c:	483c      	ldr	r0, [pc, #240]	; (8001300 <Init+0x1fc>)
 800120e:	f009 fc9d 	bl	800ab4c <puts>
		Error_Handler();
 8001212:	f000 ff51 	bl	80020b8 <Error_Handler>
			Error_Handler();
		}
*/

	// bande passante à 250Hz : FCHOICE = 11 => FCHOICE_b = 00, DLPF_CFG = 000
		HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD,  GYRO_CONFIG,  1, &buff[0], 1, 10);
 8001216:	230a      	movs	r3, #10
 8001218:	9302      	str	r3, [sp, #8]
 800121a:	2301      	movs	r3, #1
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	f107 0308 	add.w	r3, r7, #8
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2301      	movs	r3, #1
 8001226:	221b      	movs	r2, #27
 8001228:	21d0      	movs	r1, #208	; 0xd0
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f002 fdd0 	bl	8003dd0 <HAL_I2C_Mem_Read>
		//Pour mettre 00 dans FCHOICE_b
		buff[0] =(buff[0] & (0b11111100)) ;
 8001230:	7a3b      	ldrb	r3, [r7, #8]
 8001232:	f023 0303 	bic.w	r3, r3, #3
 8001236:	b2db      	uxtb	r3, r3
 8001238:	723b      	strb	r3, [r7, #8]
		if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,GYRO_CONFIG,1,&buff[0],1,10)!=HAL_OK){
 800123a:	230a      	movs	r3, #10
 800123c:	9302      	str	r3, [sp, #8]
 800123e:	2301      	movs	r3, #1
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2301      	movs	r3, #1
 800124a:	221b      	movs	r2, #27
 800124c:	21d0      	movs	r1, #208	; 0xd0
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f002 fcc4 	bl	8003bdc <HAL_I2C_Mem_Write>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <Init+0x15a>
				Error_Handler(); }
 800125a:	f000 ff2d 	bl	80020b8 <Error_Handler>
		//Pour mettre 000 dans DLPF_CFG
		HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD, CONFIG,  1, &buff[0], 1, 10);
 800125e:	230a      	movs	r3, #10
 8001260:	9302      	str	r3, [sp, #8]
 8001262:	2301      	movs	r3, #1
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	221a      	movs	r2, #26
 8001270:	21d0      	movs	r1, #208	; 0xd0
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f002 fdac 	bl	8003dd0 <HAL_I2C_Mem_Read>
		buff[0] =(buff[0] & (0b11111000)) ;
 8001278:	7a3b      	ldrb	r3, [r7, #8]
 800127a:	f023 0307 	bic.w	r3, r3, #7
 800127e:	b2db      	uxtb	r3, r3
 8001280:	723b      	strb	r3, [r7, #8]
		if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,CONFIG,1,&buff[0],1,10)!=HAL_OK){
 8001282:	230a      	movs	r3, #10
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	2301      	movs	r3, #1
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2301      	movs	r3, #1
 8001292:	221a      	movs	r2, #26
 8001294:	21d0      	movs	r1, #208	; 0xd0
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f002 fca0 	bl	8003bdc <HAL_I2C_Mem_Write>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <Init+0x1a2>
				Error_Handler();
 80012a2:	f000 ff09 	bl	80020b8 <Error_Handler>
		}
*/

	/*********** Réglage de la fréquence d'échantillonnage **********/

	buff[0]=0xFF;
 80012a6:	23ff      	movs	r3, #255	; 0xff
 80012a8:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,SMPLRT_DIV,1,&buff[0],1,10)!=HAL_OK){
 80012aa:	230a      	movs	r3, #10
 80012ac:	9302      	str	r3, [sp, #8]
 80012ae:	2301      	movs	r3, #1
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2301      	movs	r3, #1
 80012ba:	2219      	movs	r2, #25
 80012bc:	21d0      	movs	r1, #208	; 0xd0
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f002 fc8c 	bl	8003bdc <HAL_I2C_Mem_Write>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d004      	beq.n	80012d4 <Init+0x1d0>
		printf("probleme reglage frequence echantillonnage --> Init \r\n");
 80012ca:	480e      	ldr	r0, [pc, #56]	; (8001304 <Init+0x200>)
 80012cc:	f009 fc3e 	bl	800ab4c <puts>
		Error_Handler();
 80012d0:	f000 fef2 	bl	80020b8 <Error_Handler>
	}
	HAL_I2C_Mem_Read(p_hi2c1,MPU_ADD,LP_ACCEL_ODR,1,&buff[0],1,10);
 80012d4:	230a      	movs	r3, #10
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	2301      	movs	r3, #1
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2301      	movs	r3, #1
 80012e4:	221e      	movs	r2, #30
 80012e6:	21d0      	movs	r1, #208	; 0xd0
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f002 fd71 	bl	8003dd0 <HAL_I2C_Mem_Read>
	// a faire : changer la valeur de DLPF_CFG à 2 par exemple et voir en mode debug si la valeur des 4 derniers bits de LP_ACCEL_ODR est à 4.

}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	0800dc30 	.word	0x0800dc30
 80012fc:	0800dc60 	.word	0x0800dc60
 8001300:	0800dc9c 	.word	0x0800dc9c
 8001304:	0800dcc4 	.word	0x0800dcc4

08001308 <Measure_M>:
	 * @param hi2cx Pointeur vers une structure I2C qui contient l'information de configuration pour un i2c particulier
	 * @param tableau_donnee_utiles Pointeur vers une zone mémoire de type double contenant l’information de champ magnétique
	 * @retval None
	 */

void Measure_M(I2C_HandleTypeDef* p_hi2c1,double* mag, double* offset, double* coeff){
 8001308:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800130c:	b090      	sub	sp, #64	; 0x40
 800130e:	af04      	add	r7, sp, #16
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	603b      	str	r3, [r7, #0]
		uint8_t buffer[6];
		uint8_t asa[3];
		uint8_t drdy[1];


		HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_ST1,1,drdy,1,20);
 8001318:	2314      	movs	r3, #20
 800131a:	9302      	str	r3, [sp, #8]
 800131c:	2301      	movs	r3, #1
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2301      	movs	r3, #1
 8001328:	2202      	movs	r2, #2
 800132a:	2118      	movs	r1, #24
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f002 fd4f 	bl	8003dd0 <HAL_I2C_Mem_Read>
		drdy[0]=((drdy[0])&(00000001));
 8001332:	7d3b      	ldrb	r3, [r7, #20]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	b2db      	uxtb	r3, r3
 800133a:	753b      	strb	r3, [r7, #20]
		if(drdy[0]==1){
 800133c:	7d3b      	ldrb	r3, [r7, #20]
 800133e:	2b01      	cmp	r3, #1
 8001340:	f040 8165 	bne.w	800160e <Measure_M+0x306>

			if((HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_XOUT_L,1,buffer,7,20)==HAL_OK)
 8001344:	2314      	movs	r3, #20
 8001346:	9302      	str	r3, [sp, #8]
 8001348:	2307      	movs	r3, #7
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2301      	movs	r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	2118      	movs	r1, #24
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f002 fd39 	bl	8003dd0 <HAL_I2C_Mem_Read>
 800135e:	4603      	mov	r3, r0
					&(HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_ASAX,1,asa,3,20)==HAL_OK)){
 8001360:	2b00      	cmp	r3, #0
 8001362:	bf0c      	ite	eq
 8001364:	2301      	moveq	r3, #1
 8001366:	2300      	movne	r3, #0
 8001368:	b2dc      	uxtb	r4, r3
 800136a:	2314      	movs	r3, #20
 800136c:	9302      	str	r3, [sp, #8]
 800136e:	2303      	movs	r3, #3
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	f107 0318 	add.w	r3, r7, #24
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2301      	movs	r3, #1
 800137a:	2210      	movs	r2, #16
 800137c:	2118      	movs	r1, #24
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f002 fd26 	bl	8003dd0 <HAL_I2C_Mem_Read>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	bf0c      	ite	eq
 800138a:	2301      	moveq	r3, #1
 800138c:	2300      	movne	r3, #0
 800138e:	b2db      	uxtb	r3, r3
 8001390:	4023      	ands	r3, r4
 8001392:	b2db      	uxtb	r3, r3
			if((HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_XOUT_L,1,buffer,7,20)==HAL_OK)
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 813a 	beq.w	800160e <Measure_M+0x306>


						x = (uint16_t)((buffer[1]<<8)+ buffer[0]);
 800139a:	7f7b      	ldrb	r3, [r7, #29]
 800139c:	b29b      	uxth	r3, r3
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	7f3b      	ldrb	r3, [r7, #28]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	4413      	add	r3, r2
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
						y = (uint16_t)((buffer[3]<<8)+ buffer[2]);
 80013ac:	7ffb      	ldrb	r3, [r7, #31]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	7fbb      	ldrb	r3, [r7, #30]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	4413      	add	r3, r2
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
						z = (uint16_t)((buffer[5]<<8)+ buffer[4]);
 80013be:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4413      	add	r3, r2
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	857b      	strh	r3, [r7, #42]	; 0x2a
						asax=asa[0];
 80013d4:	7e3b      	ldrb	r3, [r7, #24]
 80013d6:	853b      	strh	r3, [r7, #40]	; 0x28
						asay=asa[1];
 80013d8:	7e7b      	ldrb	r3, [r7, #25]
 80013da:	84fb      	strh	r3, [r7, #38]	; 0x26
						asaz=asa[2];
 80013dc:	7ebb      	ldrb	r3, [r7, #26]
 80013de:	84bb      	strh	r3, [r7, #36]	; 0x24
						mag[0] = (x*((((asax-128)*0.5)/128)+1)*4912)/32760;
 80013e0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f8a5 	bl	8000534 <__aeabi_i2d>
 80013ea:	4604      	mov	r4, r0
 80013ec:	460d      	mov	r5, r1
 80013ee:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80013f2:	3b80      	subs	r3, #128	; 0x80
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f89d 	bl	8000534 <__aeabi_i2d>
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	4b8a      	ldr	r3, [pc, #552]	; (8001628 <Measure_M+0x320>)
 8001400:	f7ff f902 	bl	8000608 <__aeabi_dmul>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	4b86      	ldr	r3, [pc, #536]	; (800162c <Measure_M+0x324>)
 8001412:	f7ff fa23 	bl	800085c <__aeabi_ddiv>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	4b83      	ldr	r3, [pc, #524]	; (8001630 <Measure_M+0x328>)
 8001424:	f7fe ff3a 	bl	800029c <__adddf3>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4620      	mov	r0, r4
 800142e:	4629      	mov	r1, r5
 8001430:	f7ff f8ea 	bl	8000608 <__aeabi_dmul>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	a376      	add	r3, pc, #472	; (adr r3, 8001618 <Measure_M+0x310>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7ff f8e1 	bl	8000608 <__aeabi_dmul>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	a374      	add	r3, pc, #464	; (adr r3, 8001620 <Measure_M+0x318>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7ff fa02 	bl	800085c <__aeabi_ddiv>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	e9c1 2300 	strd	r2, r3, [r1]
						mag[1] = (y*((((asay-128)*0.5)/128)+1)*4912)/32760;
 8001462:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f864 	bl	8000534 <__aeabi_i2d>
 800146c:	4604      	mov	r4, r0
 800146e:	460d      	mov	r5, r1
 8001470:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001474:	3b80      	subs	r3, #128	; 0x80
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f85c 	bl	8000534 <__aeabi_i2d>
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	4b69      	ldr	r3, [pc, #420]	; (8001628 <Measure_M+0x320>)
 8001482:	f7ff f8c1 	bl	8000608 <__aeabi_dmul>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b66      	ldr	r3, [pc, #408]	; (800162c <Measure_M+0x324>)
 8001494:	f7ff f9e2 	bl	800085c <__aeabi_ddiv>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	4b62      	ldr	r3, [pc, #392]	; (8001630 <Measure_M+0x328>)
 80014a6:	f7fe fef9 	bl	800029c <__adddf3>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4620      	mov	r0, r4
 80014b0:	4629      	mov	r1, r5
 80014b2:	f7ff f8a9 	bl	8000608 <__aeabi_dmul>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	a356      	add	r3, pc, #344	; (adr r3, 8001618 <Measure_M+0x310>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8a0 	bl	8000608 <__aeabi_dmul>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f103 0408 	add.w	r4, r3, #8
 80014d6:	a352      	add	r3, pc, #328	; (adr r3, 8001620 <Measure_M+0x318>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7ff f9be 	bl	800085c <__aeabi_ddiv>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	e9c4 2300 	strd	r2, r3, [r4]
						mag[2] = (z*((((asaz-128)*0.5)/128)+1)*4912)/32760;
 80014e8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f821 	bl	8000534 <__aeabi_i2d>
 80014f2:	4604      	mov	r4, r0
 80014f4:	460d      	mov	r5, r1
 80014f6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80014fa:	3b80      	subs	r3, #128	; 0x80
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f819 	bl	8000534 <__aeabi_i2d>
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4b48      	ldr	r3, [pc, #288]	; (8001628 <Measure_M+0x320>)
 8001508:	f7ff f87e 	bl	8000608 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	4b44      	ldr	r3, [pc, #272]	; (800162c <Measure_M+0x324>)
 800151a:	f7ff f99f 	bl	800085c <__aeabi_ddiv>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	4b41      	ldr	r3, [pc, #260]	; (8001630 <Measure_M+0x328>)
 800152c:	f7fe feb6 	bl	800029c <__adddf3>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7ff f866 	bl	8000608 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	a334      	add	r3, pc, #208	; (adr r3, 8001618 <Measure_M+0x310>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	f7ff f85d 	bl	8000608 <__aeabi_dmul>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	f103 0410 	add.w	r4, r3, #16
 800155c:	a330      	add	r3, pc, #192	; (adr r3, 8001620 <Measure_M+0x318>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7ff f97b 	bl	800085c <__aeabi_ddiv>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	e9c4 2300 	strd	r2, r3, [r4]

						// calibration

						mag[0] = (mag[0]-offset[0])*coeff[0];
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7fe fe8d 	bl	8000298 <__aeabi_dsub>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	f7ff f83c 	bl	8000608 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	e9c1 2300 	strd	r2, r3, [r1]
						mag[1] = (mag[1]-offset[1])*coeff[1];
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	3308      	adds	r3, #8
 800159e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3308      	adds	r3, #8
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7fe fe75 	bl	8000298 <__aeabi_dsub>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4690      	mov	r8, r2
 80015b4:	4699      	mov	r9, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	3308      	adds	r3, #8
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	68b9      	ldr	r1, [r7, #8]
 80015c0:	f101 0408 	add.w	r4, r1, #8
 80015c4:	4640      	mov	r0, r8
 80015c6:	4649      	mov	r1, r9
 80015c8:	f7ff f81e 	bl	8000608 <__aeabi_dmul>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	e9c4 2300 	strd	r2, r3, [r4]
						mag[2] = (mag[2]-offset[2])*coeff[2];
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	3310      	adds	r3, #16
 80015d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3310      	adds	r3, #16
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7fe fe58 	bl	8000298 <__aeabi_dsub>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4690      	mov	r8, r2
 80015ee:	4699      	mov	r9, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	3310      	adds	r3, #16
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	f101 0410 	add.w	r4, r1, #16
 80015fe:	4640      	mov	r0, r8
 8001600:	4649      	mov	r1, r9
 8001602:	f7ff f801 	bl	8000608 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	e9c4 2300 	strd	r2, r3, [r4]
						mag[1] = (mag[1]*coeff[1])-offset[1];
						mag[2] = (mag[2]*coeff[2])-offset[2];
					*/
			}
		}
}
 800160e:	bf00      	nop
 8001610:	3730      	adds	r7, #48	; 0x30
 8001612:	46bd      	mov	sp, r7
 8001614:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001618:	00000000 	.word	0x00000000
 800161c:	40b33000 	.word	0x40b33000
 8001620:	00000000 	.word	0x00000000
 8001624:	40dffe00 	.word	0x40dffe00
 8001628:	3fe00000 	.word	0x3fe00000
 800162c:	40600000 	.word	0x40600000
 8001630:	3ff00000 	.word	0x3ff00000
 8001634:	00000000 	.word	0x00000000

08001638 <magnetic_field_to_degree>:
#include <math.h>



float magnetic_field_to_degree(double* mag_calibrated)
{
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	float heading = atan2(-mag_calibrated[1], mag_calibrated[0]); // atan2(y,x)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3308      	adds	r3, #8
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	4614      	mov	r4, r2
 800164a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	ed93 7b00 	vldr	d7, [r3]
 8001654:	eeb0 1a47 	vmov.f32	s2, s14
 8001658:	eef0 1a67 	vmov.f32	s3, s15
 800165c:	ec45 4b10 	vmov	d0, r4, r5
 8001660:	f00c f9af 	bl	800d9c2 <atan2>
 8001664:	ec53 2b10 	vmov	r2, r3, d0
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff fa86 	bl	8000b7c <__aeabi_d2f>
 8001670:	4603      	mov	r3, r0
 8001672:	613b      	str	r3, [r7, #16]


	  //float declinationAngle = 0.22; // Angle de déclinaison magnétique pour Paris
	  float declinationAngle = 0.21; // Angle de déclinaison magnétique pour Barcelone
 8001674:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <magnetic_field_to_degree+0xb8>)
 8001676:	60fb      	str	r3, [r7, #12]
	  heading += declinationAngle;   // site pour connaitre la déclinaison : https://www.ngdc.noaa.gov/geomag/calculators/magcalc
 8001678:	ed97 7a04 	vldr	s14, [r7, #16]
 800167c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001684:	edc7 7a04 	vstr	s15, [r7, #16]


	  float headingDegrees = heading * 180 / M_PI; // Conversion en degrés
 8001688:	edd7 7a04 	vldr	s15, [r7, #16]
 800168c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80016f4 <magnetic_field_to_degree+0xbc>
 8001690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001694:	ee17 0a90 	vmov	r0, s15
 8001698:	f7fe ff5e 	bl	8000558 <__aeabi_f2d>
 800169c:	a312      	add	r3, pc, #72	; (adr r3, 80016e8 <magnetic_field_to_degree+0xb0>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7ff f8db 	bl	800085c <__aeabi_ddiv>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff fa65 	bl	8000b7c <__aeabi_d2f>
 80016b2:	4603      	mov	r3, r0
 80016b4:	617b      	str	r3, [r7, #20]

	  if(headingDegrees<=0){
 80016b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c2:	d807      	bhi.n	80016d4 <magnetic_field_to_degree+0x9c>
			  headingDegrees+=360;
 80016c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016c8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80016f8 <magnetic_field_to_degree+0xc0>
 80016cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016d0:	edc7 7a05 	vstr	s15, [r7, #20]
		  }



	  return headingDegrees;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	ee07 3a90 	vmov	s15, r3
}
 80016da:	eeb0 0a67 	vmov.f32	s0, s15
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bdb0      	pop	{r4, r5, r7, pc}
 80016e4:	f3af 8000 	nop.w
 80016e8:	54442d18 	.word	0x54442d18
 80016ec:	400921fb 	.word	0x400921fb
 80016f0:	3e570a3d 	.word	0x3e570a3d
 80016f4:	43340000 	.word	0x43340000
 80016f8:	43b40000 	.word	0x43b40000

080016fc <Delta_theta_calculation>:

double Delta_theta_calculation(TypeDataCansat DataCansat){
 80016fc:	b084      	sub	sp, #16
 80016fe:	b580      	push	{r7, lr}
 8001700:	b088      	sub	sp, #32
 8001702:	af00      	add	r7, sp, #0
 8001704:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001708:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	double theta_target = 0;
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double latitude_vector = DataCansat.GPS.latitude_Target - DataCansat.GPS.latitude_Cansat;
 8001718:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800171c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001720:	f7fe fdba 	bl	8000298 <__aeabi_dsub>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double longitude_vector = DataCansat.GPS.longitude_Target - DataCansat.GPS.longitude_Cansat;
 800172c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001730:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001734:	f7fe fdb0 	bl	8000298 <__aeabi_dsub>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	theta_target = 360 - atan(longitude_vector/latitude_vector);
 8001740:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001744:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001748:	f7ff f888 	bl	800085c <__aeabi_ddiv>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	ec43 2b17 	vmov	d7, r2, r3
 8001754:	eeb0 0a47 	vmov.f32	s0, s14
 8001758:	eef0 0a67 	vmov.f32	s1, s15
 800175c:	f00b ff88 	bl	800d670 <atan>
 8001760:	ec53 2b10 	vmov	r2, r3, d0
 8001764:	f04f 0000 	mov.w	r0, #0
 8001768:	490f      	ldr	r1, [pc, #60]	; (80017a8 <Delta_theta_calculation+0xac>)
 800176a:	f7fe fd95 	bl	8000298 <__aeabi_dsub>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double Delta_theta = theta_target - DataCansat.IMU.MagnetometerData.degree_angle;
 8001776:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800177a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800177e:	f7fe fd8b 	bl	8000298 <__aeabi_dsub>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	e9c7 2300 	strd	r2, r3, [r7]

	return Delta_theta;
 800178a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800178e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001792:	eeb0 0a47 	vmov.f32	s0, s14
 8001796:	eef0 0a67 	vmov.f32	s1, s15
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017a2:	b004      	add	sp, #16
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40768000 	.word	0x40768000

080017ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80017bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	4a06      	ldr	r2, [pc, #24]	; (80017dc <vApplicationGetIdleTaskMemory+0x30>)
 80017c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	2000021c 	.word	0x2000021c
 80017dc:	200002d0 	.word	0x200002d0

080017e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_FREERTOS_Init+0x5c>)
 80017e8:	1d3c      	adds	r4, r7, #4
 80017ea:	461d      	mov	r5, r3
 80017ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f007 fab8 	bl	8008d72 <osThreadCreate>
 8001802:	4603      	mov	r3, r0
 8001804:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <MX_FREERTOS_Init+0x60>)
 8001806:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

xTaskCreate(Task_Drop_detection, "Drop detection", 500, NULL, osPriorityAboveNormal, &pxDrop_detection);
 8001808:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <MX_FREERTOS_Init+0x64>)
 800180a:	9301      	str	r3, [sp, #4]
 800180c:	2301      	movs	r3, #1
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2300      	movs	r3, #0
 8001812:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001816:	490c      	ldr	r1, [pc, #48]	; (8001848 <MX_FREERTOS_Init+0x68>)
 8001818:	480c      	ldr	r0, [pc, #48]	; (800184c <MX_FREERTOS_Init+0x6c>)
 800181a:	f007 fc1b 	bl	8009054 <xTaskCreate>

xTaskCreate(Task_GPS_data_reading, "Lecture des donnees GPS", 500, NULL, osPriorityHigh, &pxGPS_Handler);
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MX_FREERTOS_Init+0x70>)
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	2302      	movs	r3, #2
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2300      	movs	r3, #0
 8001828:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800182c:	4909      	ldr	r1, [pc, #36]	; (8001854 <MX_FREERTOS_Init+0x74>)
 800182e:	480a      	ldr	r0, [pc, #40]	; (8001858 <MX_FREERTOS_Init+0x78>)
 8001830:	f007 fc10 	bl	8009054 <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

}
 8001834:	bf00      	nop
 8001836:	3720      	adds	r7, #32
 8001838:	46bd      	mov	sp, r7
 800183a:	bdb0      	pop	{r4, r5, r7, pc}
 800183c:	0800dd7c 	.word	0x0800dd7c
 8001840:	20000218 	.word	0x20000218
 8001844:	20000208 	.word	0x20000208
 8001848:	0800dd54 	.word	0x0800dd54
 800184c:	080020c5 	.word	0x080020c5
 8001850:	20000204 	.word	0x20000204
 8001854:	0800dd64 	.word	0x0800dd64
 8001858:	08001025 	.word	0x08001025

0800185c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001864:	2001      	movs	r0, #1
 8001866:	f007 fad0 	bl	8008e0a <osDelay>
 800186a:	e7fb      	b.n	8001864 <StartDefaultTask+0x8>

0800186c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b38      	ldr	r3, [pc, #224]	; (8001968 <MX_GPIO_Init+0xfc>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a37      	ldr	r2, [pc, #220]	; (8001968 <MX_GPIO_Init+0xfc>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b35      	ldr	r3, [pc, #212]	; (8001968 <MX_GPIO_Init+0xfc>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b31      	ldr	r3, [pc, #196]	; (8001968 <MX_GPIO_Init+0xfc>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a30      	ldr	r2, [pc, #192]	; (8001968 <MX_GPIO_Init+0xfc>)
 80018a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b2e      	ldr	r3, [pc, #184]	; (8001968 <MX_GPIO_Init+0xfc>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	4b2a      	ldr	r3, [pc, #168]	; (8001968 <MX_GPIO_Init+0xfc>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a29      	ldr	r2, [pc, #164]	; (8001968 <MX_GPIO_Init+0xfc>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b27      	ldr	r3, [pc, #156]	; (8001968 <MX_GPIO_Init+0xfc>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	4b23      	ldr	r3, [pc, #140]	; (8001968 <MX_GPIO_Init+0xfc>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a22      	ldr	r2, [pc, #136]	; (8001968 <MX_GPIO_Init+0xfc>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <MX_GPIO_Init+0xfc>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2120      	movs	r1, #32
 80018f6:	481d      	ldr	r0, [pc, #116]	; (800196c <MX_GPIO_Init+0x100>)
 80018f8:	f001 fcca 	bl	8003290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001902:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	4817      	ldr	r0, [pc, #92]	; (8001970 <MX_GPIO_Init+0x104>)
 8001914:	f001 fb20 	bl	8002f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001918:	2320      	movs	r3, #32
 800191a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191c:	2301      	movs	r3, #1
 800191e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	480f      	ldr	r0, [pc, #60]	; (800196c <MX_GPIO_Init+0x100>)
 8001930:	f001 fb12 	bl	8002f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193a:	2300      	movs	r3, #0
 800193c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4808      	ldr	r0, [pc, #32]	; (800196c <MX_GPIO_Init+0x100>)
 800194a:	f001 fb05 	bl	8002f58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2105      	movs	r1, #5
 8001952:	2028      	movs	r0, #40	; 0x28
 8001954:	f001 fa36 	bl	8002dc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001958:	2028      	movs	r0, #40	; 0x28
 800195a:	f001 fa4f 	bl	8002dfc <HAL_NVIC_EnableIRQ>

}
 800195e:	bf00      	nop
 8001960:	3728      	adds	r7, #40	; 0x28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800
 800196c:	40020000 	.word	0x40020000
 8001970:	40020800 	.word	0x40020800

08001974 <GPS_data_reading>:





void GPS_data_reading(TypeDataCansat pData){
 8001974:	b084      	sub	sp, #16
 8001976:	b580      	push	{r7, lr}
 8001978:	b08e      	sub	sp, #56	; 0x38
 800197a:	af00      	add	r7, sp, #0
 800197c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8001980:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int i = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	637b      	str	r3, [r7, #52]	; 0x34
	int n = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	633b      	str	r3, [r7, #48]	; 0x30

		while(n<6){
 800198c:	e12d      	b.n	8001bea <GPS_data_reading+0x276>

	  		if(data_rdy == 1){
 800198e:	4b9d      	ldr	r3, [pc, #628]	; (8001c04 <GPS_data_reading+0x290>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b01      	cmp	r3, #1
 8001994:	f040 80eb 	bne.w	8001b6e <GPS_data_reading+0x1fa>
	  				for(int j = 0; j<=47;j++){
 8001998:	2300      	movs	r3, #0
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800199c:	e00b      	b.n	80019b6 <GPS_data_reading+0x42>
	  					position[j] = coordonnees[j+18]; //position[] comprend la latitude et la longitude telles que sur la trame reçue
 800199e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a0:	3312      	adds	r3, #18
 80019a2:	4a99      	ldr	r2, [pc, #612]	; (8001c08 <GPS_data_reading+0x294>)
 80019a4:	5cd1      	ldrb	r1, [r2, r3]
 80019a6:	4a99      	ldr	r2, [pc, #612]	; (8001c0c <GPS_data_reading+0x298>)
 80019a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019aa:	4413      	add	r3, r2
 80019ac:	460a      	mov	r2, r1
 80019ae:	701a      	strb	r2, [r3, #0]
	  				for(int j = 0; j<=47;j++){
 80019b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b2:	3301      	adds	r3, #1
 80019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b8:	2b2f      	cmp	r3, #47	; 0x2f
 80019ba:	ddf0      	ble.n	800199e <GPS_data_reading+0x2a>
	  					//En effet, les coordonnes sont d'abord de cette forme : "$GNGGA,121933.000,4902.36627,N,00204.31287,E,1,05,13.3,0.0,M,0.0,M,,*4D"
	  					//On sélectionne donc la partie qui est après l'identifieur et l'heure mais avant le ",E,".
	  				}

	  				for(int k = 0; k<=9;k++){
 80019bc:	2300      	movs	r3, #0
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
 80019c0:	e00b      	b.n	80019da <GPS_data_reading+0x66>
	  					latitude_data[k] = position[k+1]; //latitude non convertie
 80019c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c4:	3301      	adds	r3, #1
 80019c6:	4a91      	ldr	r2, [pc, #580]	; (8001c0c <GPS_data_reading+0x298>)
 80019c8:	5cd1      	ldrb	r1, [r2, r3]
 80019ca:	4a91      	ldr	r2, [pc, #580]	; (8001c10 <GPS_data_reading+0x29c>)
 80019cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ce:	4413      	add	r3, r2
 80019d0:	460a      	mov	r2, r1
 80019d2:	701a      	strb	r2, [r3, #0]
	  				for(int k = 0; k<=9;k++){
 80019d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d6:	3301      	adds	r3, #1
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019dc:	2b09      	cmp	r3, #9
 80019de:	ddf0      	ble.n	80019c2 <GPS_data_reading+0x4e>
	  				}
	  				for(int l = 0; l<=10;l++){
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
 80019e4:	e00b      	b.n	80019fe <GPS_data_reading+0x8a>
	  					longitude_data[l] = position[l+14]; //longitude non convertie
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	330e      	adds	r3, #14
 80019ea:	4a88      	ldr	r2, [pc, #544]	; (8001c0c <GPS_data_reading+0x298>)
 80019ec:	5cd1      	ldrb	r1, [r2, r3]
 80019ee:	4a89      	ldr	r2, [pc, #548]	; (8001c14 <GPS_data_reading+0x2a0>)
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	4413      	add	r3, r2
 80019f4:	460a      	mov	r2, r1
 80019f6:	701a      	strb	r2, [r3, #0]
	  				for(int l = 0; l<=10;l++){
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	3301      	adds	r3, #1
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	2b0a      	cmp	r3, #10
 8001a02:	ddf0      	ble.n	80019e6 <GPS_data_reading+0x72>
	  				}
	  				for(int h = 0; h<=4; h++){
 8001a04:	2300      	movs	r3, #0
 8001a06:	623b      	str	r3, [r7, #32]
 8001a08:	e00b      	b.n	8001a22 <GPS_data_reading+0xae>
	  					altitude_data[h] = position[h+37]; //altitude non convertie
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	3325      	adds	r3, #37	; 0x25
 8001a0e:	4a7f      	ldr	r2, [pc, #508]	; (8001c0c <GPS_data_reading+0x298>)
 8001a10:	5cd1      	ldrb	r1, [r2, r3]
 8001a12:	4a81      	ldr	r2, [pc, #516]	; (8001c18 <GPS_data_reading+0x2a4>)
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	4413      	add	r3, r2
 8001a18:	460a      	mov	r2, r1
 8001a1a:	701a      	strb	r2, [r3, #0]
	  				for(int h = 0; h<=4; h++){
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	623b      	str	r3, [r7, #32]
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	ddf0      	ble.n	8001a0a <GPS_data_reading+0x96>
	  				}

	  				lat2[0] = latitude_data[0];
 8001a28:	4b79      	ldr	r3, [pc, #484]	; (8001c10 <GPS_data_reading+0x29c>)
 8001a2a:	781a      	ldrb	r2, [r3, #0]
 8001a2c:	4b7b      	ldr	r3, [pc, #492]	; (8001c1c <GPS_data_reading+0x2a8>)
 8001a2e:	701a      	strb	r2, [r3, #0]
	  				lat2[1] = latitude_data[1]; //lat2 -> les deux digits avant la virgue du degré de la lat.
 8001a30:	4b77      	ldr	r3, [pc, #476]	; (8001c10 <GPS_data_reading+0x29c>)
 8001a32:	785a      	ldrb	r2, [r3, #1]
 8001a34:	4b79      	ldr	r3, [pc, #484]	; (8001c1c <GPS_data_reading+0x2a8>)
 8001a36:	705a      	strb	r2, [r3, #1]

	  				for(int m = 0; m<=6;m++){
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	e00b      	b.n	8001a56 <GPS_data_reading+0xe2>
	  					lat7[m] = latitude_data[m+2]; //lat 7 -> ce qui reste après la virgule de la lat.
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3302      	adds	r3, #2
 8001a42:	4a73      	ldr	r2, [pc, #460]	; (8001c10 <GPS_data_reading+0x29c>)
 8001a44:	5cd1      	ldrb	r1, [r2, r3]
 8001a46:	4a76      	ldr	r2, [pc, #472]	; (8001c20 <GPS_data_reading+0x2ac>)
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	460a      	mov	r2, r1
 8001a4e:	701a      	strb	r2, [r3, #0]
	  				for(int m = 0; m<=6;m++){
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	3301      	adds	r3, #1
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	2b06      	cmp	r3, #6
 8001a5a:	ddf0      	ble.n	8001a3e <GPS_data_reading+0xca>
	  				}

	  				long3[0] = longitude_data[0];
 8001a5c:	4b6d      	ldr	r3, [pc, #436]	; (8001c14 <GPS_data_reading+0x2a0>)
 8001a5e:	781a      	ldrb	r2, [r3, #0]
 8001a60:	4b70      	ldr	r3, [pc, #448]	; (8001c24 <GPS_data_reading+0x2b0>)
 8001a62:	701a      	strb	r2, [r3, #0]
	  				long3[1] = longitude_data[1];
 8001a64:	4b6b      	ldr	r3, [pc, #428]	; (8001c14 <GPS_data_reading+0x2a0>)
 8001a66:	785a      	ldrb	r2, [r3, #1]
 8001a68:	4b6e      	ldr	r3, [pc, #440]	; (8001c24 <GPS_data_reading+0x2b0>)
 8001a6a:	705a      	strb	r2, [r3, #1]
	  				long3[2] = longitude_data[2]; //long3 -> les trois digits avant la virgule du degré de la long.
 8001a6c:	4b69      	ldr	r3, [pc, #420]	; (8001c14 <GPS_data_reading+0x2a0>)
 8001a6e:	789a      	ldrb	r2, [r3, #2]
 8001a70:	4b6c      	ldr	r3, [pc, #432]	; (8001c24 <GPS_data_reading+0x2b0>)
 8001a72:	709a      	strb	r2, [r3, #2]

	  				for(int n = 0; n<=6;n++){
 8001a74:	2300      	movs	r3, #0
 8001a76:	61bb      	str	r3, [r7, #24]
 8001a78:	e00b      	b.n	8001a92 <GPS_data_reading+0x11e>
	  					long7[n] = longitude_data[n+3]; //long7 -> ce qui reste après la virgule de la long.
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	3303      	adds	r3, #3
 8001a7e:	4a65      	ldr	r2, [pc, #404]	; (8001c14 <GPS_data_reading+0x2a0>)
 8001a80:	5cd1      	ldrb	r1, [r2, r3]
 8001a82:	4a69      	ldr	r2, [pc, #420]	; (8001c28 <GPS_data_reading+0x2b4>)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	4413      	add	r3, r2
 8001a88:	460a      	mov	r2, r1
 8001a8a:	701a      	strb	r2, [r3, #0]
	  				for(int n = 0; n<=6;n++){
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	2b06      	cmp	r3, #6
 8001a96:	ddf0      	ble.n	8001a7a <GPS_data_reading+0x106>
	  				}

	  				float deg_lat = atof(lat2);
 8001a98:	4860      	ldr	r0, [pc, #384]	; (8001c1c <GPS_data_reading+0x2a8>)
 8001a9a:	f008 fdff 	bl	800a69c <atof>
 8001a9e:	ec53 2b10 	vmov	r2, r3, d0
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7ff f869 	bl	8000b7c <__aeabi_d2f>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	613b      	str	r3, [r7, #16]
	  				float reste_lat = atof(lat7); //conversion du char[lat] en float[lat]
 8001aae:	485c      	ldr	r0, [pc, #368]	; (8001c20 <GPS_data_reading+0x2ac>)
 8001ab0:	f008 fdf4 	bl	800a69c <atof>
 8001ab4:	ec53 2b10 	vmov	r2, r3, d0
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f7ff f85e 	bl	8000b7c <__aeabi_d2f>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	60fb      	str	r3, [r7, #12]

	  				float deg_long = atof(long3);
 8001ac4:	4857      	ldr	r0, [pc, #348]	; (8001c24 <GPS_data_reading+0x2b0>)
 8001ac6:	f008 fde9 	bl	800a69c <atof>
 8001aca:	ec53 2b10 	vmov	r2, r3, d0
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f7ff f853 	bl	8000b7c <__aeabi_d2f>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	60bb      	str	r3, [r7, #8]
	  				float reste_long = atof(long7); //conversion du char[long] en float[long]
 8001ada:	4853      	ldr	r0, [pc, #332]	; (8001c28 <GPS_data_reading+0x2b4>)
 8001adc:	f008 fdde 	bl	800a69c <atof>
 8001ae0:	ec53 2b10 	vmov	r2, r3, d0
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f7ff f848 	bl	8000b7c <__aeabi_d2f>
 8001aec:	4603      	mov	r3, r0
 8001aee:	607b      	str	r3, [r7, #4]

	  				pData.GPS.latitude_Cansat = deg_lat + (reste_lat/60); //latitude convertie
 8001af0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001af4:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001c2c <GPS_data_reading+0x2b8>
 8001af8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001afc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b04:	ee17 0a90 	vmov	r0, s15
 8001b08:	f7fe fd26 	bl	8000558 <__aeabi_f2d>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  				pData.GPS.longitude_Cansat = deg_long + (reste_long/60); //longitude convertie
 8001b14:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b18:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001c2c <GPS_data_reading+0x2b8>
 8001b1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b20:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b28:	ee17 0a90 	vmov	r0, s15
 8001b2c:	f7fe fd14 	bl	8000558 <__aeabi_f2d>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	  				pData.GPS.altitude_Cansat = atof(altitude_data); // altitude convertie
 8001b38:	4837      	ldr	r0, [pc, #220]	; (8001c18 <GPS_data_reading+0x2a4>)
 8001b3a:	f008 fdaf 	bl	800a69c <atof>
 8001b3e:	eeb0 7a40 	vmov.f32	s14, s0
 8001b42:	eef0 7a60 	vmov.f32	s15, s1
 8001b46:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

	  				//nombre de satellites
	  				for(int k = 0; k<2;k++){
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	e00b      	b.n	8001b68 <GPS_data_reading+0x1f4>
	  				satellites[k] = coordonnees[k+45]; //satellites[] indique le nombre de satellites captés
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	332d      	adds	r3, #45	; 0x2d
 8001b54:	4a2c      	ldr	r2, [pc, #176]	; (8001c08 <GPS_data_reading+0x294>)
 8001b56:	5cd1      	ldrb	r1, [r2, r3]
 8001b58:	4a35      	ldr	r2, [pc, #212]	; (8001c30 <GPS_data_reading+0x2bc>)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	460a      	mov	r2, r1
 8001b60:	701a      	strb	r2, [r3, #0]
	  				for(int k = 0; k<2;k++){
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3301      	adds	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	ddf0      	ble.n	8001b50 <GPS_data_reading+0x1dc>
	  				}
	  		}
	  		if(uart_gps_rx[0]==10){
 8001b6e:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <GPS_data_reading+0x2c0>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b0a      	cmp	r3, #10
 8001b74:	d036      	beq.n	8001be4 <GPS_data_reading+0x270>
	  			//HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY); //Arrangement de la trame
	  		}
	  		else{
	  			uart_pc_tx[0]=uart_gps_rx[0];
 8001b76:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <GPS_data_reading+0x2c0>)
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <GPS_data_reading+0x2c4>)
 8001b7c:	701a      	strb	r2, [r3, #0]
	  			//HAL_UART_Transmit(&huart2, uart_pc_tx, 1, HAL_MAX_DELAY);
	  			coordonnees[i] = uart_pc_tx[0]; //On copie ce qui passe dans l'UART dans un tableau coordonnees[i].
 8001b7e:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <GPS_data_reading+0x2c4>)
 8001b80:	7819      	ldrb	r1, [r3, #0]
 8001b82:	4a21      	ldr	r2, [pc, #132]	; (8001c08 <GPS_data_reading+0x294>)
 8001b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b86:	4413      	add	r3, r2
 8001b88:	460a      	mov	r2, r1
 8001b8a:	701a      	strb	r2, [r3, #0]
	  			if(i >= 4){
 8001b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	dd25      	ble.n	8001bde <GPS_data_reading+0x26a>
	  				if(strncmp("OK*35",&coordonnees[i-4],5) == 0){
 8001b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b94:	3b04      	subs	r3, #4
 8001b96:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <GPS_data_reading+0x294>)
 8001b98:	4413      	add	r3, r2
 8001b9a:	2205      	movs	r2, #5
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4827      	ldr	r0, [pc, #156]	; (8001c3c <GPS_data_reading+0x2c8>)
 8001ba0:	f009 f899 	bl	800acd6 <strncmp>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10d      	bne.n	8001bc6 <GPS_data_reading+0x252>
	  						i = 0; //Si on trouve "OK", on réinitialise i à 0 pour synchroniser notre trame.
 8001baa:	2300      	movs	r3, #0
 8001bac:	637b      	str	r3, [r7, #52]	; 0x34
	  						if(first_data == 1){
 8001bae:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <GPS_data_reading+0x2cc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d103      	bne.n	8001bbe <GPS_data_reading+0x24a>
	  							data_rdy = 1; //Si la trame est initialisée, le premier caractère du tableau voulu est prêt.
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <GPS_data_reading+0x290>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	e012      	b.n	8001be4 <GPS_data_reading+0x270>
	  						}
	  						else first_data = 1; //Permet d'enregistrer le tableau désiré.
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <GPS_data_reading+0x2cc>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	e00e      	b.n	8001be4 <GPS_data_reading+0x270>
	  					}
	  				else{
	  						if(i == GPS_TRAME_SIZE-1){
 8001bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d102      	bne.n	8001bd6 <GPS_data_reading+0x262>
	  							i = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8001bd4:	e006      	b.n	8001be4 <GPS_data_reading+0x270>
	  						}
	  						else{
	  							i++;
 8001bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd8:	3301      	adds	r3, #1
 8001bda:	637b      	str	r3, [r7, #52]	; 0x34
 8001bdc:	e002      	b.n	8001be4 <GPS_data_reading+0x270>
	  					}

	  				}
	  			}
	  			else i++;
 8001bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be0:	3301      	adds	r3, #1
 8001be2:	637b      	str	r3, [r7, #52]	; 0x34

	  		}
	  n++ ;
 8001be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be6:	3301      	adds	r3, #1
 8001be8:	633b      	str	r3, [r7, #48]	; 0x30
		while(n<6){
 8001bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	f77f aece 	ble.w	800198e <GPS_data_reading+0x1a>
	}

}
 8001bf2:	bf00      	nop
 8001bf4:	bf00      	nop
 8001bf6:	3738      	adds	r7, #56	; 0x38
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bfe:	b004      	add	sp, #16
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000910 	.word	0x20000910
 8001c08:	200004d0 	.word	0x200004d0
 8001c0c:	200008d8 	.word	0x200008d8
 8001c10:	200008c4 	.word	0x200008c4
 8001c14:	200008b8 	.word	0x200008b8
 8001c18:	200008d0 	.word	0x200008d0
 8001c1c:	200008f0 	.word	0x200008f0
 8001c20:	200008f4 	.word	0x200008f4
 8001c24:	200008fc 	.word	0x200008fc
 8001c28:	20000900 	.word	0x20000900
 8001c2c:	42700000 	.word	0x42700000
 8001c30:	20000908 	.word	0x20000908
 8001c34:	20000a34 	.word	0x20000a34
 8001c38:	20000a38 	.word	0x20000a38
 8001c3c:	0800dd98 	.word	0x0800dd98
 8001c40:	2000090c 	.word	0x2000090c

08001c44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <MX_I2C1_Init+0x50>)
 8001c4a:	4a13      	ldr	r2, [pc, #76]	; (8001c98 <MX_I2C1_Init+0x54>)
 8001c4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_I2C1_Init+0x50>)
 8001c50:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <MX_I2C1_Init+0x58>)
 8001c52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <MX_I2C1_Init+0x50>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <MX_I2C1_Init+0x50>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <MX_I2C1_Init+0x50>)
 8001c62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c68:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <MX_I2C1_Init+0x50>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <MX_I2C1_Init+0x50>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c74:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <MX_I2C1_Init+0x50>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <MX_I2C1_Init+0x50>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c80:	4804      	ldr	r0, [pc, #16]	; (8001c94 <MX_I2C1_Init+0x50>)
 8001c82:	f001 fb43 	bl	800330c <HAL_I2C_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c8c:	f000 fa14 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000914 	.word	0x20000914
 8001c98:	40005400 	.word	0x40005400
 8001c9c:	000186a0 	.word	0x000186a0

08001ca0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a21      	ldr	r2, [pc, #132]	; (8001d44 <HAL_I2C_MspInit+0xa4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d13c      	bne.n	8001d3c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_I2C_MspInit+0xa8>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a1f      	ldr	r2, [pc, #124]	; (8001d48 <HAL_I2C_MspInit+0xa8>)
 8001ccc:	f043 0302 	orr.w	r3, r3, #2
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_I2C_MspInit+0xa8>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001cde:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce4:	2312      	movs	r3, #18
 8001ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cec:	2303      	movs	r3, #3
 8001cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4814      	ldr	r0, [pc, #80]	; (8001d4c <HAL_I2C_MspInit+0xac>)
 8001cfc:	f001 f92c 	bl	8002f58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <HAL_I2C_MspInit+0xa8>)
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	4a0f      	ldr	r2, [pc, #60]	; (8001d48 <HAL_I2C_MspInit+0xa8>)
 8001d0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d10:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_I2C_MspInit+0xa8>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2105      	movs	r1, #5
 8001d20:	201f      	movs	r0, #31
 8001d22:	f001 f84f 	bl	8002dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d26:	201f      	movs	r0, #31
 8001d28:	f001 f868 	bl	8002dfc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2105      	movs	r1, #5
 8001d30:	2020      	movs	r0, #32
 8001d32:	f001 f847 	bl	8002dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001d36:	2020      	movs	r0, #32
 8001d38:	f001 f860 	bl	8002dfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3728      	adds	r7, #40	; 0x28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40005400 	.word	0x40005400
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020400 	.word	0x40020400

08001d50 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001d58:	1d39      	adds	r1, r7, #4
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d5e:	2201      	movs	r2, #1
 8001d60:	4803      	ldr	r0, [pc, #12]	; (8001d70 <__io_putchar+0x20>)
 8001d62:	f005 ffb2 	bl	8007cca <HAL_UART_Transmit>
return ch;
 8001d66:	687b      	ldr	r3, [r7, #4]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000b5c 	.word	0x20000b5c
 8001d74:	00000000 	.word	0x00000000

08001d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001d7e:	af02      	add	r7, sp, #8
	  *            entrée des données GPS de la cible
	  ***********************************************************/

	  //Position GPS cible : 43°13'18.7"N 0°03'10.0"W  --> données telles que décrites dans le règlement 2023

	  pDataCansat.GPS.latitude_Target = 43.2218611;
 8001d80:	4983      	ldr	r1, [pc, #524]	; (8001f90 <main+0x218>)
 8001d82:	a37f      	add	r3, pc, #508	; (adr r3, 8001f80 <main+0x208>)
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	e9c1 2308 	strd	r2, r3, [r1, #32]
	  pDataCansat.GPS.longitude_Target = -0.05277777777777778;
 8001d8c:	4980      	ldr	r1, [pc, #512]	; (8001f90 <main+0x218>)
 8001d8e:	a37e      	add	r3, pc, #504	; (adr r3, 8001f88 <main+0x210>)
 8001d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d94:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d98:	f000 fef6 	bl	8002b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d9c:	f000 f910 	bl	8001fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001da0:	f7ff fd64 	bl	800186c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001da4:	f000 fdf8 	bl	8002998 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001da8:	f7ff ff4c 	bl	8001c44 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001dac:	f000 fcdc 	bl	8002768 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001db0:	f000 fdc8 	bl	8002944 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001db4:	f000 fc74 	bl	80026a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("------------------------\r\n");
 8001db8:	4876      	ldr	r0, [pc, #472]	; (8001f94 <main+0x21c>)
 8001dba:	f008 fec7 	bl	800ab4c <puts>
  printf("------------------------\r\n");
 8001dbe:	4875      	ldr	r0, [pc, #468]	; (8001f94 <main+0x21c>)
 8001dc0:	f008 fec4 	bl	800ab4c <puts>
  printf("------------------------\r\n");
 8001dc4:	4873      	ldr	r0, [pc, #460]	; (8001f94 <main+0x21c>)
 8001dc6:	f008 fec1 	bl	800ab4c <puts>
  printf("------------------------\r\n");
 8001dca:	4872      	ldr	r0, [pc, #456]	; (8001f94 <main+0x21c>)
 8001dcc:	f008 febe 	bl	800ab4c <puts>
  printf("initialisation du CanSat\r\n");
 8001dd0:	4871      	ldr	r0, [pc, #452]	; (8001f98 <main+0x220>)
 8001dd2:	f008 febb 	bl	800ab4c <puts>
  printf("------------------------\r\n");
 8001dd6:	486f      	ldr	r0, [pc, #444]	; (8001f94 <main+0x21c>)
 8001dd8:	f008 feb8 	bl	800ab4c <puts>
  printf("------------------------\r\n");
 8001ddc:	486d      	ldr	r0, [pc, #436]	; (8001f94 <main+0x21c>)
 8001dde:	f008 feb5 	bl	800ab4c <puts>
  printf("------------------------\r\n");
 8001de2:	486c      	ldr	r0, [pc, #432]	; (8001f94 <main+0x21c>)
 8001de4:	f008 feb2 	bl	800ab4c <puts>
  printf("------------------------\r\n");
 8001de8:	486a      	ldr	r0, [pc, #424]	; (8001f94 <main+0x21c>)
 8001dea:	f008 feaf 	bl	800ab4c <puts>

    int x=0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    int i=0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
    int Devices[100]={0};
 8001dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001e02:	4618      	mov	r0, r3
 8001e04:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001e08:	461a      	mov	r2, r3
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	f008 fd7b 	bl	800a906 <memset>

   uint8_t pData[100] = {0};
 8001e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2260      	movs	r2, #96	; 0x60
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f008 fd6f 	bl	800a906 <memset>
   /**********                           *********
    * ******** INIT MPU-9250 (IMU_10DOF) *********
    * ********                           *********
    */

   printf("initialisation de l'IMU \r\n \r\n");
 8001e28:	485c      	ldr	r0, [pc, #368]	; (8001f9c <main+0x224>)
 8001e2a:	f008 fe8f 	bl	800ab4c <puts>

   // Initialisation du capteur MPU-9250

   Init(&hi2c1);
 8001e2e:	485c      	ldr	r0, [pc, #368]	; (8001fa0 <main+0x228>)
 8001e30:	f7ff f968 	bl	8001104 <Init>

   // vérification identité capteur MPU-9250

   pData[0]= WHO_AM_I_MPU9250;
 8001e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e3c:	2275      	movs	r2, #117	; 0x75
 8001e3e:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Master_Transmit(&hi2c1, MPU_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001e40:	1d3a      	adds	r2, r7, #4
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	2301      	movs	r3, #1
 8001e4a:	21d0      	movs	r1, #208	; 0xd0
 8001e4c:	4854      	ldr	r0, [pc, #336]	; (8001fa0 <main+0x228>)
 8001e4e:	f001 fba1 	bl	8003594 <HAL_I2C_Master_Transmit>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <main+0xe6>
    {
  	  printf("il y a une erreur avec I2C Master Transmit \r\n");
 8001e58:	4852      	ldr	r0, [pc, #328]	; (8001fa4 <main+0x22c>)
 8001e5a:	f008 fe77 	bl	800ab4c <puts>
    }
    if(HAL_I2C_Master_Receive(&hi2c1, MPU_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001e5e:	1d3a      	adds	r2, r7, #4
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	2301      	movs	r3, #1
 8001e68:	21d0      	movs	r1, #208	; 0xd0
 8001e6a:	484d      	ldr	r0, [pc, #308]	; (8001fa0 <main+0x228>)
 8001e6c:	f001 fc90 	bl	8003790 <HAL_I2C_Master_Receive>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <main+0x104>
    {
  	  printf("il y a une erreur avec I2C Master Receive \r\n");
 8001e76:	484c      	ldr	r0, [pc, #304]	; (8001fa8 <main+0x230>)
 8001e78:	f008 fe68 	bl	800ab4c <puts>
    }


    printf(" L'identifiant du capteur est : %x \r\n", pData[0]);
 8001e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	4619      	mov	r1, r3
 8001e88:	4848      	ldr	r0, [pc, #288]	; (8001fac <main+0x234>)
 8001e8a:	f008 fdd9 	bl	800aa40 <iprintf>
    if((pData[0] =! 0x71))
 8001e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
    {
  	  printf("ce n'est pas le bon capteur \r\n");
    }
    else
  	  printf("MPU-9250 identified \r\n");
 8001e9a:	4845      	ldr	r0, [pc, #276]	; (8001fb0 <main+0x238>)
 8001e9c:	f008 fe56 	bl	800ab4c <puts>

    // vérification identité AK8963C (magnétomètre)

    pData[0]= WHO_AM_I_AK8963;
 8001ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
      if(HAL_I2C_Master_Transmit(&hi2c1, MAGNETO_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001eac:	1d3a      	adds	r2, r7, #4
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	2118      	movs	r1, #24
 8001eb8:	4839      	ldr	r0, [pc, #228]	; (8001fa0 <main+0x228>)
 8001eba:	f001 fb6b 	bl	8003594 <HAL_I2C_Master_Transmit>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <main+0x152>
      {
    	  printf("il y a une erreur avec I2C Master Transmit \r\n");
 8001ec4:	4837      	ldr	r0, [pc, #220]	; (8001fa4 <main+0x22c>)
 8001ec6:	f008 fe41 	bl	800ab4c <puts>
      }
      if(HAL_I2C_Master_Receive(&hi2c1, MAGNETO_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001eca:	1d3a      	adds	r2, r7, #4
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	2118      	movs	r1, #24
 8001ed6:	4832      	ldr	r0, [pc, #200]	; (8001fa0 <main+0x228>)
 8001ed8:	f001 fc5a 	bl	8003790 <HAL_I2C_Master_Receive>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <main+0x170>
      {
    	  printf("il y a une erreur avec I2C Master Receive \r\n");
 8001ee2:	4831      	ldr	r0, [pc, #196]	; (8001fa8 <main+0x230>)
 8001ee4:	f008 fe32 	bl	800ab4c <puts>
      }


      printf(" L'identifiant du magnétomètre est : %x \r\n", pData[0]);
 8001ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	482f      	ldr	r0, [pc, #188]	; (8001fb4 <main+0x23c>)
 8001ef6:	f008 fda3 	bl	800aa40 <iprintf>
      if((pData[0] =! 0x48))
 8001efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
      {
    	  printf("ce n'est pas le bon capteur \r\n  ****** \r\n ****** \r\n ****** \r\n");
      }
      else
    	  printf("AK8963C identified \r\n  ****** \r\n ****** \r\n ****** \r\n");
 8001f06:	482c      	ldr	r0, [pc, #176]	; (8001fb8 <main+0x240>)
 8001f08:	f008 fe20 	bl	800ab4c <puts>



  // check les périphériques i2c disponibles

    for (i=0;i<256;i++){
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8001f12:	e02a      	b.n	8001f6a <main+0x1f2>
         	  if(HAL_I2C_IsDeviceReady(&hi2c1, i, 4, 20)==HAL_OK){
 8001f14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f18:	b299      	uxth	r1, r3
 8001f1a:	2314      	movs	r3, #20
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	4820      	ldr	r0, [pc, #128]	; (8001fa0 <main+0x228>)
 8001f20:	f002 f97c 	bl	800421c <HAL_I2C_IsDeviceReady>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d11a      	bne.n	8001f60 <main+0x1e8>
         		  Devices[x]=i;
 8001f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001f32:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8001f36:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8001f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
         		  printf("%d \r\n",Devices[x]);
 8001f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f42:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001f46:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8001f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	481a      	ldr	r0, [pc, #104]	; (8001fbc <main+0x244>)
 8001f52:	f008 fd75 	bl	800aa40 <iprintf>
         		  x=x+1;
 8001f56:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    for (i=0;i<256;i++){
 8001f60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f64:	3301      	adds	r3, #1
 8001f66:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8001f6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f6e:	2bff      	cmp	r3, #255	; 0xff
 8001f70:	ddd0      	ble.n	8001f14 <main+0x19c>

  //vTaskStartScheduler();
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001f72:	f7ff fc35 	bl	80017e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f76:	f006 fef5 	bl	8008d64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f7a:	e7fe      	b.n	8001f7a <main+0x202>
 8001f7c:	f3af 8000 	nop.w
 8001f80:	f1cc6096 	.word	0xf1cc6096
 8001f84:	40459c65 	.word	0x40459c65
 8001f88:	5b05b05b 	.word	0x5b05b05b
 8001f8c:	bfab05b0 	.word	0xbfab05b0
 8001f90:	20000968 	.word	0x20000968
 8001f94:	0800dda0 	.word	0x0800dda0
 8001f98:	0800ddbc 	.word	0x0800ddbc
 8001f9c:	0800ddd8 	.word	0x0800ddd8
 8001fa0:	20000914 	.word	0x20000914
 8001fa4:	0800ddf8 	.word	0x0800ddf8
 8001fa8:	0800de28 	.word	0x0800de28
 8001fac:	0800de54 	.word	0x0800de54
 8001fb0:	0800de7c 	.word	0x0800de7c
 8001fb4:	0800de94 	.word	0x0800de94
 8001fb8:	0800dec4 	.word	0x0800dec4
 8001fbc:	0800def8 	.word	0x0800def8

08001fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b094      	sub	sp, #80	; 0x50
 8001fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fc6:	f107 0320 	add.w	r3, r7, #32
 8001fca:	2230      	movs	r2, #48	; 0x30
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f008 fc99 	bl	800a906 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	4b28      	ldr	r3, [pc, #160]	; (800208c <SystemClock_Config+0xcc>)
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	4a27      	ldr	r2, [pc, #156]	; (800208c <SystemClock_Config+0xcc>)
 8001fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <SystemClock_Config+0xcc>)
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002000:	2300      	movs	r3, #0
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	4b22      	ldr	r3, [pc, #136]	; (8002090 <SystemClock_Config+0xd0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a21      	ldr	r2, [pc, #132]	; (8002090 <SystemClock_Config+0xd0>)
 800200a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <SystemClock_Config+0xd0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800201c:	2302      	movs	r3, #2
 800201e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002020:	2301      	movs	r3, #1
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002024:	2310      	movs	r3, #16
 8002026:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002028:	2302      	movs	r3, #2
 800202a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800202c:	2300      	movs	r3, #0
 800202e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002030:	2310      	movs	r3, #16
 8002032:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002034:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002038:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800203a:	2304      	movs	r3, #4
 800203c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800203e:	2304      	movs	r3, #4
 8002040:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002042:	f107 0320 	add.w	r3, r7, #32
 8002046:	4618      	mov	r0, r3
 8002048:	f004 fb9c 	bl	8006784 <HAL_RCC_OscConfig>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002052:	f000 f831 	bl	80020b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002056:	230f      	movs	r3, #15
 8002058:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800205a:	2302      	movs	r3, #2
 800205c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002066:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800206c:	f107 030c 	add.w	r3, r7, #12
 8002070:	2102      	movs	r1, #2
 8002072:	4618      	mov	r0, r3
 8002074:	f004 fdfe 	bl	8006c74 <HAL_RCC_ClockConfig>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800207e:	f000 f81b 	bl	80020b8 <Error_Handler>
  }
}
 8002082:	bf00      	nop
 8002084:	3750      	adds	r7, #80	; 0x50
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800
 8002090:	40007000 	.word	0x40007000

08002094 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020a6:	f000 fd91 	bl	8002bcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40010000 	.word	0x40010000

080020b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020bc:	b672      	cpsid	i
}
 80020be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <Error_Handler+0x8>
	...

080020c4 <Task_Drop_detection>:
	 * @param Drop_flag Drapeau qui permet d'indiquer que le Cansat a été largué
	 * @retval None
	 */

void Task_Drop_detection(void * pvParameters)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	6078      	str	r0, [r7, #4]
	uint16_t gpio_value = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	82fb      	strh	r3, [r7, #22]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500;
 80020d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020d4:	613b      	str	r3, [r7, #16]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80020d6:	f007 fb61 	bl	800979c <xTaskGetTickCount>
 80020da:	4603      	mov	r3, r0
 80020dc:	60fb      	str	r3, [r7, #12]

	for(;;)
	{

		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 80020de:	f107 030c 	add.w	r3, r7, #12
 80020e2:	6939      	ldr	r1, [r7, #16]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f007 f993 	bl	8009410 <vTaskDelayUntil>

		gpio_value = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);  // prend la valeur 1 lorsque pas d'obstacles
 80020ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020ee:	4811      	ldr	r0, [pc, #68]	; (8002134 <Task_Drop_detection+0x70>)
 80020f0:	f001 f8b6 	bl	8003260 <HAL_GPIO_ReadPin>
 80020f4:	4603      	mov	r3, r0
 80020f6:	82fb      	strh	r3, [r7, #22]
															// prend la valeur 0 lorsque detection d'un obstacle
		printf("valeur du capteur IR : %d \r\n", gpio_value);
 80020f8:	8afb      	ldrh	r3, [r7, #22]
 80020fa:	4619      	mov	r1, r3
 80020fc:	480e      	ldr	r0, [pc, #56]	; (8002138 <Task_Drop_detection+0x74>)
 80020fe:	f008 fc9f 	bl	800aa40 <iprintf>

		if(gpio_value == 1)
 8002102:	8afb      	ldrh	r3, [r7, #22]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d1ea      	bne.n	80020de <Task_Drop_detection+0x1a>
		{
			Drop_flag = 1;
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <Task_Drop_detection+0x78>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]
			printf("largage effectue \r\n");
 800210e:	480c      	ldr	r0, [pc, #48]	; (8002140 <Task_Drop_detection+0x7c>)
 8002110:	f008 fd1c 	bl	800ab4c <puts>
			xTaskCreate(Task_lancement_Cansat, "Lancement du Cansat", 500, NULL, osPriorityHigh, &pxLancement_Cansat);
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <Task_Drop_detection+0x80>)
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	2302      	movs	r3, #2
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2300      	movs	r3, #0
 800211e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002122:	4909      	ldr	r1, [pc, #36]	; (8002148 <Task_Drop_detection+0x84>)
 8002124:	4809      	ldr	r0, [pc, #36]	; (800214c <Task_Drop_detection+0x88>)
 8002126:	f006 ff95 	bl	8009054 <xTaskCreate>
			vTaskDelete(NULL);
 800212a:	2000      	movs	r0, #0
 800212c:	f007 f8e0 	bl	80092f0 <vTaskDelete>
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8002130:	e7d5      	b.n	80020de <Task_Drop_detection+0x1a>
 8002132:	bf00      	nop
 8002134:	40020000 	.word	0x40020000
 8002138:	0800df00 	.word	0x0800df00
 800213c:	20000a30 	.word	0x20000a30
 8002140:	0800df20 	.word	0x0800df20
 8002144:	2000020c 	.word	0x2000020c
 8002148:	0800df34 	.word	0x0800df34
 800214c:	08000f8d 	.word	0x08000f8d

08002150 <servoSetPositionLeft>:
 	 * @brief Positionnement du servo gauche
 	 * @Note Cette fonction permet de placer le servo comme on le souhaite avec 4 positions différentes
	 * @param int position : 0,1,2 ou 3
	 * @retval None
	 */
void servoSetPositionLeft (int position){
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	if (position == 0){
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d104      	bne.n	8002168 <servoSetPositionLeft+0x18>
		TIM2->CCR1 = POSITION_0_LEFT;
 800215e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002162:	2250      	movs	r2, #80	; 0x50
 8002164:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR1 = POSITION_3_LEFT;
	}
	else {
		printf("Vous ne devez mettre en entree que 0,1,2 ou 3 \r\n");
	}
}
 8002166:	e01a      	b.n	800219e <servoSetPositionLeft+0x4e>
	else if (position == 1){
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d104      	bne.n	8002178 <servoSetPositionLeft+0x28>
			TIM2->CCR1 = POSITION_1_LEFT;
 800216e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002172:	226e      	movs	r2, #110	; 0x6e
 8002174:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002176:	e012      	b.n	800219e <servoSetPositionLeft+0x4e>
	else if (position == 2){
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d104      	bne.n	8002188 <servoSetPositionLeft+0x38>
			TIM2->CCR1 = POSITION_2_LEFT;
 800217e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002182:	22aa      	movs	r2, #170	; 0xaa
 8002184:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002186:	e00a      	b.n	800219e <servoSetPositionLeft+0x4e>
	else if (position == 3){
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b03      	cmp	r3, #3
 800218c:	d104      	bne.n	8002198 <servoSetPositionLeft+0x48>
			TIM2->CCR1 = POSITION_3_LEFT;
 800218e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002192:	22fa      	movs	r2, #250	; 0xfa
 8002194:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002196:	e002      	b.n	800219e <servoSetPositionLeft+0x4e>
		printf("Vous ne devez mettre en entree que 0,1,2 ou 3 \r\n");
 8002198:	4803      	ldr	r0, [pc, #12]	; (80021a8 <servoSetPositionLeft+0x58>)
 800219a:	f008 fcd7 	bl	800ab4c <puts>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	0800df48 	.word	0x0800df48

080021ac <servoSetPositionRight>:
 	 * @brief Positionnement du servo droit
 	 * @Note Cette fonction permet de placer le servo comme on le souhaite avec 4 positions différentes
	 * @param int position : 0,1,2 ou 3
	 * @retval None
	 */
void servoSetPositionRight (int position){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	if (position == 0){
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d104      	bne.n	80021c4 <servoSetPositionRight+0x18>
		TIM2->CCR2 = POSITION_0_RIGHT;
 80021ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021be:	22dc      	movs	r2, #220	; 0xdc
 80021c0:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR2 = POSITION_3_RIGHT;
	}
	else {
		printf("Vous ne devez mettre en entree 0,1,2 ou 3 \r\n");
	}
}
 80021c2:	e01a      	b.n	80021fa <servoSetPositionRight+0x4e>
	else if (position == 1){
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d104      	bne.n	80021d4 <servoSetPositionRight+0x28>
			TIM2->CCR2 = POSITION_1_RIGHT;
 80021ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021ce:	22be      	movs	r2, #190	; 0xbe
 80021d0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80021d2:	e012      	b.n	80021fa <servoSetPositionRight+0x4e>
	else if (position == 2){
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d104      	bne.n	80021e4 <servoSetPositionRight+0x38>
			TIM2->CCR2 = POSITION_2_RIGHT;
 80021da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021de:	2282      	movs	r2, #130	; 0x82
 80021e0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80021e2:	e00a      	b.n	80021fa <servoSetPositionRight+0x4e>
	else if (position == 3){
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d104      	bne.n	80021f4 <servoSetPositionRight+0x48>
			TIM2->CCR2 = POSITION_3_RIGHT;
 80021ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021ee:	223c      	movs	r2, #60	; 0x3c
 80021f0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80021f2:	e002      	b.n	80021fa <servoSetPositionRight+0x4e>
		printf("Vous ne devez mettre en entree 0,1,2 ou 3 \r\n");
 80021f4:	4803      	ldr	r0, [pc, #12]	; (8002204 <servoSetPositionRight+0x58>)
 80021f6:	f008 fca9 	bl	800ab4c <puts>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	0800df78 	.word	0x0800df78

08002208 <choice_direction_intensity>:
 	 * @Note Cette fonction permet de choisir la direction dans laquelle le cansat doit aller ainsi que son intensité grâce à une différence d'angle
	 * @param int delta_teta : difference d'angle comprise entre 0 et 360 degrés
	 * @retval None
	 */

void choice_direction_intensity(unsigned int delta_teta){
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	if ((delta_teta<epsilon) || (delta_teta>360-epsilon)){
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b04      	cmp	r3, #4
 8002214:	d903      	bls.n	800221e <choice_direction_intensity+0x16>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 800221c:	d306      	bcc.n	800222c <choice_direction_intensity+0x24>
		servoSetPositionLeft(0);
 800221e:	2000      	movs	r0, #0
 8002220:	f7ff ff96 	bl	8002150 <servoSetPositionLeft>
		servoSetPositionRight(0);
 8002224:	2000      	movs	r0, #0
 8002226:	f7ff ffc1 	bl	80021ac <servoSetPositionRight>
	}
	else {
		printf("cas non traité \r\n");
	}

}
 800222a:	e040      	b.n	80022ae <choice_direction_intensity+0xa6>
	else if (delta_teta<teta_low){
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b1d      	cmp	r3, #29
 8002230:	d806      	bhi.n	8002240 <choice_direction_intensity+0x38>
		servoSetPositionLeft(0);
 8002232:	2000      	movs	r0, #0
 8002234:	f7ff ff8c 	bl	8002150 <servoSetPositionLeft>
		servoSetPositionRight(1);
 8002238:	2001      	movs	r0, #1
 800223a:	f7ff ffb7 	bl	80021ac <servoSetPositionRight>
}
 800223e:	e036      	b.n	80022ae <choice_direction_intensity+0xa6>
	else if (delta_teta>360-teta_low){
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8002246:	d906      	bls.n	8002256 <choice_direction_intensity+0x4e>
		servoSetPositionLeft(1);
 8002248:	2001      	movs	r0, #1
 800224a:	f7ff ff81 	bl	8002150 <servoSetPositionLeft>
		servoSetPositionRight(0);
 800224e:	2000      	movs	r0, #0
 8002250:	f7ff ffac 	bl	80021ac <servoSetPositionRight>
}
 8002254:	e02b      	b.n	80022ae <choice_direction_intensity+0xa6>
	else if (delta_teta<teta_high){
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b63      	cmp	r3, #99	; 0x63
 800225a:	d806      	bhi.n	800226a <choice_direction_intensity+0x62>
		servoSetPositionLeft(0);
 800225c:	2000      	movs	r0, #0
 800225e:	f7ff ff77 	bl	8002150 <servoSetPositionLeft>
		servoSetPositionRight(2);
 8002262:	2002      	movs	r0, #2
 8002264:	f7ff ffa2 	bl	80021ac <servoSetPositionRight>
}
 8002268:	e021      	b.n	80022ae <choice_direction_intensity+0xa6>
	else if (delta_teta>360-teta_high){
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002270:	d906      	bls.n	8002280 <choice_direction_intensity+0x78>
		servoSetPositionLeft(2);
 8002272:	2002      	movs	r0, #2
 8002274:	f7ff ff6c 	bl	8002150 <servoSetPositionLeft>
		servoSetPositionRight(0);
 8002278:	2000      	movs	r0, #0
 800227a:	f7ff ff97 	bl	80021ac <servoSetPositionRight>
}
 800227e:	e016      	b.n	80022ae <choice_direction_intensity+0xa6>
	else if (delta_teta<=180){
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2bb4      	cmp	r3, #180	; 0xb4
 8002284:	d806      	bhi.n	8002294 <choice_direction_intensity+0x8c>
		servoSetPositionLeft(0);
 8002286:	2000      	movs	r0, #0
 8002288:	f7ff ff62 	bl	8002150 <servoSetPositionLeft>
		servoSetPositionRight(3);
 800228c:	2003      	movs	r0, #3
 800228e:	f7ff ff8d 	bl	80021ac <servoSetPositionRight>
}
 8002292:	e00c      	b.n	80022ae <choice_direction_intensity+0xa6>
	else if (delta_teta>180){
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2bb4      	cmp	r3, #180	; 0xb4
 8002298:	d906      	bls.n	80022a8 <choice_direction_intensity+0xa0>
		servoSetPositionLeft(3);
 800229a:	2003      	movs	r0, #3
 800229c:	f7ff ff58 	bl	8002150 <servoSetPositionLeft>
		servoSetPositionRight(0);
 80022a0:	2000      	movs	r0, #0
 80022a2:	f7ff ff83 	bl	80021ac <servoSetPositionRight>
}
 80022a6:	e002      	b.n	80022ae <choice_direction_intensity+0xa6>
		printf("cas non traité \r\n");
 80022a8:	4803      	ldr	r0, [pc, #12]	; (80022b8 <choice_direction_intensity+0xb0>)
 80022aa:	f008 fc4f 	bl	800ab4c <puts>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	0800dfa4 	.word	0x0800dfa4

080022bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_MspInit+0x54>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	4a11      	ldr	r2, [pc, #68]	; (8002310 <HAL_MspInit+0x54>)
 80022cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d0:	6453      	str	r3, [r2, #68]	; 0x44
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_MspInit+0x54>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	603b      	str	r3, [r7, #0]
 80022e2:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HAL_MspInit+0x54>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <HAL_MspInit+0x54>)
 80022e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ec:	6413      	str	r3, [r2, #64]	; 0x40
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <HAL_MspInit+0x54>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	210f      	movs	r1, #15
 80022fe:	f06f 0001 	mvn.w	r0, #1
 8002302:	f000 fd5f 	bl	8002dc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800

08002314 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08c      	sub	sp, #48	; 0x30
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002324:	2300      	movs	r3, #0
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <HAL_InitTick+0xd0>)
 800232a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232c:	4a2d      	ldr	r2, [pc, #180]	; (80023e4 <HAL_InitTick+0xd0>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6453      	str	r3, [r2, #68]	; 0x44
 8002334:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <HAL_InitTick+0xd0>)
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002340:	f107 020c 	add.w	r2, r7, #12
 8002344:	f107 0310 	add.w	r3, r7, #16
 8002348:	4611      	mov	r1, r2
 800234a:	4618      	mov	r0, r3
 800234c:	f004 feb2 	bl	80070b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002350:	f004 fe9c 	bl	800708c <HAL_RCC_GetPCLK2Freq>
 8002354:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	4a23      	ldr	r2, [pc, #140]	; (80023e8 <HAL_InitTick+0xd4>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	0c9b      	lsrs	r3, r3, #18
 8002360:	3b01      	subs	r3, #1
 8002362:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002364:	4b21      	ldr	r3, [pc, #132]	; (80023ec <HAL_InitTick+0xd8>)
 8002366:	4a22      	ldr	r2, [pc, #136]	; (80023f0 <HAL_InitTick+0xdc>)
 8002368:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800236a:	4b20      	ldr	r3, [pc, #128]	; (80023ec <HAL_InitTick+0xd8>)
 800236c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002370:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002372:	4a1e      	ldr	r2, [pc, #120]	; (80023ec <HAL_InitTick+0xd8>)
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002378:	4b1c      	ldr	r3, [pc, #112]	; (80023ec <HAL_InitTick+0xd8>)
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237e:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <HAL_InitTick+0xd8>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002384:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_InitTick+0xd8>)
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800238a:	4818      	ldr	r0, [pc, #96]	; (80023ec <HAL_InitTick+0xd8>)
 800238c:	f004 fec4 	bl	8007118 <HAL_TIM_Base_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002396:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800239a:	2b00      	cmp	r3, #0
 800239c:	d11b      	bne.n	80023d6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800239e:	4813      	ldr	r0, [pc, #76]	; (80023ec <HAL_InitTick+0xd8>)
 80023a0:	f004 ff14 	bl	80071cc <HAL_TIM_Base_Start_IT>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80023aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d111      	bne.n	80023d6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023b2:	2019      	movs	r0, #25
 80023b4:	f000 fd22 	bl	8002dfc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b0f      	cmp	r3, #15
 80023bc:	d808      	bhi.n	80023d0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80023be:	2200      	movs	r2, #0
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	2019      	movs	r0, #25
 80023c4:	f000 fcfe 	bl	8002dc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023c8:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <HAL_InitTick+0xe0>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e002      	b.n	80023d6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80023d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3730      	adds	r7, #48	; 0x30
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
 80023e8:	431bde83 	.word	0x431bde83
 80023ec:	20000a3c 	.word	0x20000a3c
 80023f0:	40010000 	.word	0x40010000
 80023f4:	20000004 	.word	0x20000004

080023f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023fc:	e7fe      	b.n	80023fc <NMI_Handler+0x4>

080023fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002402:	e7fe      	b.n	8002402 <HardFault_Handler+0x4>

08002404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002408:	e7fe      	b.n	8002408 <MemManage_Handler+0x4>

0800240a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800240e:	e7fe      	b.n	800240e <BusFault_Handler+0x4>

08002410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002414:	e7fe      	b.n	8002414 <UsageFault_Handler+0x4>

08002416 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800242a:	f004 ff80 	bl	800732e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000a3c 	.word	0x20000a3c

08002438 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <I2C1_EV_IRQHandler+0x10>)
 800243e:	f002 f81b 	bl	8004478 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000914 	.word	0x20000914

0800244c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <I2C1_ER_IRQHandler+0x10>)
 8002452:	f002 f982 	bl	800475a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000914 	.word	0x20000914

08002460 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	BaseType_t higher_priority_task_woken = pdFALSE;
 8002466:	2300      	movs	r3, #0
 8002468:	607b      	str	r3, [r7, #4]

	vTaskNotifyGiveFromISR(pxGPS_Handler,&higher_priority_task_woken);
 800246a:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <USART1_IRQHandler+0x48>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	1d3a      	adds	r2, r7, #4
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f007 fbe2 	bl	8009c3c <vTaskNotifyGiveFromISR>

	HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_gps_rx, 1);
 8002478:	2201      	movs	r2, #1
 800247a:	490c      	ldr	r1, [pc, #48]	; (80024ac <USART1_IRQHandler+0x4c>)
 800247c:	480c      	ldr	r0, [pc, #48]	; (80024b0 <USART1_IRQHandler+0x50>)
 800247e:	f005 fcb6 	bl	8007dee <HAL_UART_Receive_IT>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002482:	480b      	ldr	r0, [pc, #44]	; (80024b0 <USART1_IRQHandler+0x50>)
 8002484:	f005 fce4 	bl	8007e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  portYIELD_FROM_ISR(higher_priority_task_woken);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <USART1_IRQHandler+0x3e>
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <USART1_IRQHandler+0x54>)
 8002490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	f3bf 8f4f 	dsb	sy
 800249a:	f3bf 8f6f 	isb	sy

  /* USER CODE END USART1_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000204 	.word	0x20000204
 80024ac:	20000a34 	.word	0x20000a34
 80024b0:	20000b18 	.word	0x20000b18
 80024b4:	e000ed04 	.word	0xe000ed04

080024b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80024be:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024c2:	f000 feff 	bl	80032c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  xTaskCreate(Task_Drop_detection, "Drop detection task", 500, NULL, osPriorityAboveNormal, &pxDrop_detection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <EXTI15_10_IRQHandler+0x2c>)
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	2301      	movs	r3, #1
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	2300      	movs	r3, #0
 80024d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80024d4:	4904      	ldr	r1, [pc, #16]	; (80024e8 <EXTI15_10_IRQHandler+0x30>)
 80024d6:	4805      	ldr	r0, [pc, #20]	; (80024ec <EXTI15_10_IRQHandler+0x34>)
 80024d8:	f006 fdbc 	bl	8009054 <xTaskCreate>

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000208 	.word	0x20000208
 80024e8:	0800dfb8 	.word	0x0800dfb8
 80024ec:	080020c5 	.word	0x080020c5

080024f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
	return 1;
 80024f4:	2301      	movs	r3, #1
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <_kill>:

int _kill(int pid, int sig)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800250a:	f008 f8cb 	bl	800a6a4 <__errno>
 800250e:	4603      	mov	r3, r0
 8002510:	2216      	movs	r2, #22
 8002512:	601a      	str	r2, [r3, #0]
	return -1;
 8002514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <_exit>:

void _exit (int status)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002528:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ffe7 	bl	8002500 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002532:	e7fe      	b.n	8002532 <_exit+0x12>

08002534 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	e00a      	b.n	800255c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002546:	f3af 8000 	nop.w
 800254a:	4601      	mov	r1, r0
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	60ba      	str	r2, [r7, #8]
 8002552:	b2ca      	uxtb	r2, r1
 8002554:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	3301      	adds	r3, #1
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	429a      	cmp	r2, r3
 8002562:	dbf0      	blt.n	8002546 <_read+0x12>
	}

return len;
 8002564:	687b      	ldr	r3, [r7, #4]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	e009      	b.n	8002594 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	60ba      	str	r2, [r7, #8]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff fbe1 	bl	8001d50 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3301      	adds	r3, #1
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	429a      	cmp	r2, r3
 800259a:	dbf1      	blt.n	8002580 <_write+0x12>
	}
	return len;
 800259c:	687b      	ldr	r3, [r7, #4]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <_close>:

int _close(int file)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
	return -1;
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ce:	605a      	str	r2, [r3, #4]
	return 0;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <_isatty>:

int _isatty(int file)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
	return 1;
 80025e6:	2301      	movs	r3, #1
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
	return 0;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002618:	4a14      	ldr	r2, [pc, #80]	; (800266c <_sbrk+0x5c>)
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <_sbrk+0x60>)
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <_sbrk+0x64>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d102      	bne.n	8002632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <_sbrk+0x64>)
 800262e:	4a12      	ldr	r2, [pc, #72]	; (8002678 <_sbrk+0x68>)
 8002630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <_sbrk+0x64>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	429a      	cmp	r2, r3
 800263e:	d207      	bcs.n	8002650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002640:	f008 f830 	bl	800a6a4 <__errno>
 8002644:	4603      	mov	r3, r0
 8002646:	220c      	movs	r2, #12
 8002648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800264a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800264e:	e009      	b.n	8002664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <_sbrk+0x64>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002656:	4b07      	ldr	r3, [pc, #28]	; (8002674 <_sbrk+0x64>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4413      	add	r3, r2
 800265e:	4a05      	ldr	r2, [pc, #20]	; (8002674 <_sbrk+0x64>)
 8002660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002662:	68fb      	ldr	r3, [r7, #12]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20020000 	.word	0x20020000
 8002670:	00000400 	.word	0x00000400
 8002674:	20000a84 	.word	0x20000a84
 8002678:	20004908 	.word	0x20004908

0800267c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <SystemInit+0x20>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002686:	4a05      	ldr	r2, [pc, #20]	; (800269c <SystemInit+0x20>)
 8002688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800268c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a6:	f107 0320 	add.w	r3, r7, #32
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	609a      	str	r2, [r3, #8]
 80026ba:	60da      	str	r2, [r3, #12]
 80026bc:	611a      	str	r2, [r3, #16]
 80026be:	615a      	str	r2, [r3, #20]
 80026c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026c2:	4b28      	ldr	r3, [pc, #160]	; (8002764 <MX_TIM2_Init+0xc4>)
 80026c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80026ca:	4b26      	ldr	r3, [pc, #152]	; (8002764 <MX_TIM2_Init+0xc4>)
 80026cc:	2253      	movs	r2, #83	; 0x53
 80026ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d0:	4b24      	ldr	r3, [pc, #144]	; (8002764 <MX_TIM2_Init+0xc4>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80026d6:	4b23      	ldr	r3, [pc, #140]	; (8002764 <MX_TIM2_Init+0xc4>)
 80026d8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80026dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026de:	4b21      	ldr	r3, [pc, #132]	; (8002764 <MX_TIM2_Init+0xc4>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e4:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <MX_TIM2_Init+0xc4>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80026ea:	481e      	ldr	r0, [pc, #120]	; (8002764 <MX_TIM2_Init+0xc4>)
 80026ec:	f004 fdd0 	bl	8007290 <HAL_TIM_PWM_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80026f6:	f7ff fcdf 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026fe:	2300      	movs	r3, #0
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002702:	f107 0320 	add.w	r3, r7, #32
 8002706:	4619      	mov	r1, r3
 8002708:	4816      	ldr	r0, [pc, #88]	; (8002764 <MX_TIM2_Init+0xc4>)
 800270a:	f005 fa0f 	bl	8007b2c <HAL_TIMEx_MasterConfigSynchronization>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002714:	f7ff fcd0 	bl	80020b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002718:	2360      	movs	r3, #96	; 0x60
 800271a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	2200      	movs	r2, #0
 800272c:	4619      	mov	r1, r3
 800272e:	480d      	ldr	r0, [pc, #52]	; (8002764 <MX_TIM2_Init+0xc4>)
 8002730:	f004 ff06 	bl	8007540 <HAL_TIM_PWM_ConfigChannel>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800273a:	f7ff fcbd 	bl	80020b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	2204      	movs	r2, #4
 8002742:	4619      	mov	r1, r3
 8002744:	4807      	ldr	r0, [pc, #28]	; (8002764 <MX_TIM2_Init+0xc4>)
 8002746:	f004 fefb 	bl	8007540 <HAL_TIM_PWM_ConfigChannel>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002750:	f7ff fcb2 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002754:	4803      	ldr	r0, [pc, #12]	; (8002764 <MX_TIM2_Init+0xc4>)
 8002756:	f000 f897 	bl	8002888 <HAL_TIM_MspPostInit>

}
 800275a:	bf00      	nop
 800275c:	3728      	adds	r7, #40	; 0x28
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000a88 	.word	0x20000a88

08002768 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	; 0x28
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800276e:	f107 0320 	add.w	r3, r7, #32
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002778:	1d3b      	adds	r3, r7, #4
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	60da      	str	r2, [r3, #12]
 8002784:	611a      	str	r2, [r3, #16]
 8002786:	615a      	str	r2, [r3, #20]
 8002788:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800278a:	4b22      	ldr	r3, [pc, #136]	; (8002814 <MX_TIM3_Init+0xac>)
 800278c:	4a22      	ldr	r2, [pc, #136]	; (8002818 <MX_TIM3_Init+0xb0>)
 800278e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002790:	4b20      	ldr	r3, [pc, #128]	; (8002814 <MX_TIM3_Init+0xac>)
 8002792:	2253      	movs	r2, #83	; 0x53
 8002794:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002796:	4b1f      	ldr	r3, [pc, #124]	; (8002814 <MX_TIM3_Init+0xac>)
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800279c:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <MX_TIM3_Init+0xac>)
 800279e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80027a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a4:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <MX_TIM3_Init+0xac>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027aa:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <MX_TIM3_Init+0xac>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027b0:	4818      	ldr	r0, [pc, #96]	; (8002814 <MX_TIM3_Init+0xac>)
 80027b2:	f004 fd6d 	bl	8007290 <HAL_TIM_PWM_Init>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80027bc:	f7ff fc7c 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c0:	2300      	movs	r3, #0
 80027c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027c8:	f107 0320 	add.w	r3, r7, #32
 80027cc:	4619      	mov	r1, r3
 80027ce:	4811      	ldr	r0, [pc, #68]	; (8002814 <MX_TIM3_Init+0xac>)
 80027d0:	f005 f9ac 	bl	8007b2c <HAL_TIMEx_MasterConfigSynchronization>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80027da:	f7ff fc6d 	bl	80020b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027de:	2360      	movs	r3, #96	; 0x60
 80027e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027ee:	1d3b      	adds	r3, r7, #4
 80027f0:	2200      	movs	r2, #0
 80027f2:	4619      	mov	r1, r3
 80027f4:	4807      	ldr	r0, [pc, #28]	; (8002814 <MX_TIM3_Init+0xac>)
 80027f6:	f004 fea3 	bl	8007540 <HAL_TIM_PWM_ConfigChannel>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002800:	f7ff fc5a 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002804:	4803      	ldr	r0, [pc, #12]	; (8002814 <MX_TIM3_Init+0xac>)
 8002806:	f000 f83f 	bl	8002888 <HAL_TIM_MspPostInit>

}
 800280a:	bf00      	nop
 800280c:	3728      	adds	r7, #40	; 0x28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000ad0 	.word	0x20000ad0
 8002818:	40000400 	.word	0x40000400

0800281c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282c:	d10e      	bne.n	800284c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <HAL_TIM_PWM_MspInit+0x64>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	4a12      	ldr	r2, [pc, #72]	; (8002880 <HAL_TIM_PWM_MspInit+0x64>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6413      	str	r3, [r2, #64]	; 0x40
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <HAL_TIM_PWM_MspInit+0x64>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800284a:	e012      	b.n	8002872 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0c      	ldr	r2, [pc, #48]	; (8002884 <HAL_TIM_PWM_MspInit+0x68>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d10d      	bne.n	8002872 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	4b09      	ldr	r3, [pc, #36]	; (8002880 <HAL_TIM_PWM_MspInit+0x64>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a08      	ldr	r2, [pc, #32]	; (8002880 <HAL_TIM_PWM_MspInit+0x64>)
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_TIM_PWM_MspInit+0x64>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800
 8002884:	40000400 	.word	0x40000400

08002888 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	; 0x28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 0314 	add.w	r3, r7, #20
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a8:	d11e      	bne.n	80028e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	4b22      	ldr	r3, [pc, #136]	; (8002938 <HAL_TIM_MspPostInit+0xb0>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a21      	ldr	r2, [pc, #132]	; (8002938 <HAL_TIM_MspPostInit+0xb0>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <HAL_TIM_MspPostInit+0xb0>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028c6:	2303      	movs	r3, #3
 80028c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	2300      	movs	r3, #0
 80028d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028d6:	2301      	movs	r3, #1
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028da:	f107 0314 	add.w	r3, r7, #20
 80028de:	4619      	mov	r1, r3
 80028e0:	4816      	ldr	r0, [pc, #88]	; (800293c <HAL_TIM_MspPostInit+0xb4>)
 80028e2:	f000 fb39 	bl	8002f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028e6:	e022      	b.n	800292e <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM3)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a14      	ldr	r2, [pc, #80]	; (8002940 <HAL_TIM_MspPostInit+0xb8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d11d      	bne.n	800292e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <HAL_TIM_MspPostInit+0xb0>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a0f      	ldr	r2, [pc, #60]	; (8002938 <HAL_TIM_MspPostInit+0xb0>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <HAL_TIM_MspPostInit+0xb0>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800290e:	2340      	movs	r3, #64	; 0x40
 8002910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2300      	movs	r3, #0
 800291c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800291e:	2302      	movs	r3, #2
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	4619      	mov	r1, r3
 8002928:	4804      	ldr	r0, [pc, #16]	; (800293c <HAL_TIM_MspPostInit+0xb4>)
 800292a:	f000 fb15 	bl	8002f58 <HAL_GPIO_Init>
}
 800292e:	bf00      	nop
 8002930:	3728      	adds	r7, #40	; 0x28
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800
 800293c:	40020000 	.word	0x40020000
 8002940:	40000400 	.word	0x40000400

08002944 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002948:	4b11      	ldr	r3, [pc, #68]	; (8002990 <MX_USART1_UART_Init+0x4c>)
 800294a:	4a12      	ldr	r2, [pc, #72]	; (8002994 <MX_USART1_UART_Init+0x50>)
 800294c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800294e:	4b10      	ldr	r3, [pc, #64]	; (8002990 <MX_USART1_UART_Init+0x4c>)
 8002950:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002956:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <MX_USART1_UART_Init+0x4c>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <MX_USART1_UART_Init+0x4c>)
 800295e:	2200      	movs	r2, #0
 8002960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002962:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <MX_USART1_UART_Init+0x4c>)
 8002964:	2200      	movs	r2, #0
 8002966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <MX_USART1_UART_Init+0x4c>)
 800296a:	220c      	movs	r2, #12
 800296c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <MX_USART1_UART_Init+0x4c>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <MX_USART1_UART_Init+0x4c>)
 8002976:	2200      	movs	r2, #0
 8002978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800297a:	4805      	ldr	r0, [pc, #20]	; (8002990 <MX_USART1_UART_Init+0x4c>)
 800297c:	f005 f958 	bl	8007c30 <HAL_UART_Init>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002986:	f7ff fb97 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000b18 	.word	0x20000b18
 8002994:	40011000 	.word	0x40011000

08002998 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800299c:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <MX_USART2_UART_Init+0x4c>)
 800299e:	4a12      	ldr	r2, [pc, #72]	; (80029e8 <MX_USART2_UART_Init+0x50>)
 80029a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <MX_USART2_UART_Init+0x4c>)
 80029a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <MX_USART2_UART_Init+0x4c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <MX_USART2_UART_Init+0x4c>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <MX_USART2_UART_Init+0x4c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <MX_USART2_UART_Init+0x4c>)
 80029be:	220c      	movs	r2, #12
 80029c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029c2:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <MX_USART2_UART_Init+0x4c>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <MX_USART2_UART_Init+0x4c>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029ce:	4805      	ldr	r0, [pc, #20]	; (80029e4 <MX_USART2_UART_Init+0x4c>)
 80029d0:	f005 f92e 	bl	8007c30 <HAL_UART_Init>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029da:	f7ff fb6d 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000b5c 	.word	0x20000b5c
 80029e8:	40004400 	.word	0x40004400

080029ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08c      	sub	sp, #48	; 0x30
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 031c 	add.w	r3, r7, #28
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a45      	ldr	r2, [pc, #276]	; (8002b20 <HAL_UART_MspInit+0x134>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d153      	bne.n	8002ab6 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	4b44      	ldr	r3, [pc, #272]	; (8002b24 <HAL_UART_MspInit+0x138>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	4a43      	ldr	r2, [pc, #268]	; (8002b24 <HAL_UART_MspInit+0x138>)
 8002a18:	f043 0310 	orr.w	r3, r3, #16
 8002a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1e:	4b41      	ldr	r3, [pc, #260]	; (8002b24 <HAL_UART_MspInit+0x138>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	f003 0310 	and.w	r3, r3, #16
 8002a26:	61bb      	str	r3, [r7, #24]
 8002a28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	4b3d      	ldr	r3, [pc, #244]	; (8002b24 <HAL_UART_MspInit+0x138>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	4a3c      	ldr	r2, [pc, #240]	; (8002b24 <HAL_UART_MspInit+0x138>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3a:	4b3a      	ldr	r3, [pc, #232]	; (8002b24 <HAL_UART_MspInit+0x138>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	4b36      	ldr	r3, [pc, #216]	; (8002b24 <HAL_UART_MspInit+0x138>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a35      	ldr	r2, [pc, #212]	; (8002b24 <HAL_UART_MspInit+0x138>)
 8002a50:	f043 0302 	orr.w	r3, r3, #2
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b33      	ldr	r3, [pc, #204]	; (8002b24 <HAL_UART_MspInit+0x138>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a70:	2303      	movs	r3, #3
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a74:	2307      	movs	r3, #7
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a78:	f107 031c 	add.w	r3, r7, #28
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	482a      	ldr	r0, [pc, #168]	; (8002b28 <HAL_UART_MspInit+0x13c>)
 8002a80:	f000 fa6a 	bl	8002f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a90:	2303      	movs	r3, #3
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a94:	2307      	movs	r3, #7
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a98:	f107 031c 	add.w	r3, r7, #28
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4823      	ldr	r0, [pc, #140]	; (8002b2c <HAL_UART_MspInit+0x140>)
 8002aa0:	f000 fa5a 	bl	8002f58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2105      	movs	r1, #5
 8002aa8:	2025      	movs	r0, #37	; 0x25
 8002aaa:	f000 f98b 	bl	8002dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002aae:	2025      	movs	r0, #37	; 0x25
 8002ab0:	f000 f9a4 	bl	8002dfc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ab4:	e030      	b.n	8002b18 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART2)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1d      	ldr	r2, [pc, #116]	; (8002b30 <HAL_UART_MspInit+0x144>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d12b      	bne.n	8002b18 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <HAL_UART_MspInit+0x138>)
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <HAL_UART_MspInit+0x138>)
 8002aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ace:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad0:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <HAL_UART_MspInit+0x138>)
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002adc:	2300      	movs	r3, #0
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <HAL_UART_MspInit+0x138>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	4a0f      	ldr	r2, [pc, #60]	; (8002b24 <HAL_UART_MspInit+0x138>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6313      	str	r3, [r2, #48]	; 0x30
 8002aec:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <HAL_UART_MspInit+0x138>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002af8:	230c      	movs	r3, #12
 8002afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afc:	2302      	movs	r3, #2
 8002afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b04:	2303      	movs	r3, #3
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b08:	2307      	movs	r3, #7
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0c:	f107 031c 	add.w	r3, r7, #28
 8002b10:	4619      	mov	r1, r3
 8002b12:	4805      	ldr	r0, [pc, #20]	; (8002b28 <HAL_UART_MspInit+0x13c>)
 8002b14:	f000 fa20 	bl	8002f58 <HAL_GPIO_Init>
}
 8002b18:	bf00      	nop
 8002b1a:	3730      	adds	r7, #48	; 0x30
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40011000 	.word	0x40011000
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40020000 	.word	0x40020000
 8002b2c:	40020400 	.word	0x40020400
 8002b30:	40004400 	.word	0x40004400

08002b34 <Reset_Handler>:
 8002b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b6c <LoopFillZerobss+0x12>
 8002b38:	480d      	ldr	r0, [pc, #52]	; (8002b70 <LoopFillZerobss+0x16>)
 8002b3a:	490e      	ldr	r1, [pc, #56]	; (8002b74 <LoopFillZerobss+0x1a>)
 8002b3c:	4a0e      	ldr	r2, [pc, #56]	; (8002b78 <LoopFillZerobss+0x1e>)
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e002      	b.n	8002b48 <LoopCopyDataInit>

08002b42 <CopyDataInit>:
 8002b42:	58d4      	ldr	r4, [r2, r3]
 8002b44:	50c4      	str	r4, [r0, r3]
 8002b46:	3304      	adds	r3, #4

08002b48 <LoopCopyDataInit>:
 8002b48:	18c4      	adds	r4, r0, r3
 8002b4a:	428c      	cmp	r4, r1
 8002b4c:	d3f9      	bcc.n	8002b42 <CopyDataInit>
 8002b4e:	4a0b      	ldr	r2, [pc, #44]	; (8002b7c <LoopFillZerobss+0x22>)
 8002b50:	4c0b      	ldr	r4, [pc, #44]	; (8002b80 <LoopFillZerobss+0x26>)
 8002b52:	2300      	movs	r3, #0
 8002b54:	e001      	b.n	8002b5a <LoopFillZerobss>

08002b56 <FillZerobss>:
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	3204      	adds	r2, #4

08002b5a <LoopFillZerobss>:
 8002b5a:	42a2      	cmp	r2, r4
 8002b5c:	d3fb      	bcc.n	8002b56 <FillZerobss>
 8002b5e:	f7ff fd8d 	bl	800267c <SystemInit>
 8002b62:	f007 fe9b 	bl	800a89c <__libc_init_array>
 8002b66:	f7ff f907 	bl	8001d78 <main>
 8002b6a:	4770      	bx	lr
 8002b6c:	20020000 	.word	0x20020000
 8002b70:	20000000 	.word	0x20000000
 8002b74:	200001e4 	.word	0x200001e4
 8002b78:	0800e4a0 	.word	0x0800e4a0
 8002b7c:	200001e8 	.word	0x200001e8
 8002b80:	20004908 	.word	0x20004908

08002b84 <ADC_IRQHandler>:
 8002b84:	e7fe      	b.n	8002b84 <ADC_IRQHandler>
	...

08002b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b8c:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <HAL_Init+0x40>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0d      	ldr	r2, [pc, #52]	; (8002bc8 <HAL_Init+0x40>)
 8002b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <HAL_Init+0x40>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <HAL_Init+0x40>)
 8002b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ba4:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <HAL_Init+0x40>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a07      	ldr	r2, [pc, #28]	; (8002bc8 <HAL_Init+0x40>)
 8002baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	f000 f8fc 	bl	8002dae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bb6:	200f      	movs	r0, #15
 8002bb8:	f7ff fbac 	bl	8002314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bbc:	f7ff fb7e 	bl	80022bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023c00 	.word	0x40023c00

08002bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_IncTick+0x20>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_IncTick+0x24>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4413      	add	r3, r2
 8002bdc:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <HAL_IncTick+0x24>)
 8002bde:	6013      	str	r3, [r2, #0]
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20000008 	.word	0x20000008
 8002bf0:	20000ba0 	.word	0x20000ba0

08002bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <HAL_GetTick+0x14>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000ba0 	.word	0x20000ba0

08002c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c14:	f7ff ffee 	bl	8002bf4 <HAL_GetTick>
 8002c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c24:	d005      	beq.n	8002c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c26:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <HAL_Delay+0x44>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4413      	add	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c32:	bf00      	nop
 8002c34:	f7ff ffde 	bl	8002bf4 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d8f7      	bhi.n	8002c34 <HAL_Delay+0x28>
  {
  }
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000008 	.word	0x20000008

08002c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c64:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <__NVIC_SetPriorityGrouping+0x44>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c70:	4013      	ands	r3, r2
 8002c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c86:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <__NVIC_SetPriorityGrouping+0x44>)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	60d3      	str	r3, [r2, #12]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca0:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	0a1b      	lsrs	r3, r3, #8
 8002ca6:	f003 0307 	and.w	r3, r3, #7
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	db0b      	blt.n	8002ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	f003 021f 	and.w	r2, r3, #31
 8002cd0:	4907      	ldr	r1, [pc, #28]	; (8002cf0 <__NVIC_EnableIRQ+0x38>)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	2001      	movs	r0, #1
 8002cda:	fa00 f202 	lsl.w	r2, r0, r2
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000e100 	.word	0xe000e100

08002cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	6039      	str	r1, [r7, #0]
 8002cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	db0a      	blt.n	8002d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	490c      	ldr	r1, [pc, #48]	; (8002d40 <__NVIC_SetPriority+0x4c>)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	0112      	lsls	r2, r2, #4
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	440b      	add	r3, r1
 8002d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d1c:	e00a      	b.n	8002d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	4908      	ldr	r1, [pc, #32]	; (8002d44 <__NVIC_SetPriority+0x50>)
 8002d24:	79fb      	ldrb	r3, [r7, #7]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	3b04      	subs	r3, #4
 8002d2c:	0112      	lsls	r2, r2, #4
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	440b      	add	r3, r1
 8002d32:	761a      	strb	r2, [r3, #24]
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000e100 	.word	0xe000e100
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	; 0x24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f1c3 0307 	rsb	r3, r3, #7
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	bf28      	it	cs
 8002d66:	2304      	movcs	r3, #4
 8002d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	2b06      	cmp	r3, #6
 8002d70:	d902      	bls.n	8002d78 <NVIC_EncodePriority+0x30>
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3b03      	subs	r3, #3
 8002d76:	e000      	b.n	8002d7a <NVIC_EncodePriority+0x32>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43da      	mvns	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9a:	43d9      	mvns	r1, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da0:	4313      	orrs	r3, r2
         );
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3724      	adds	r7, #36	; 0x24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff ff4c 	bl	8002c54 <__NVIC_SetPriorityGrouping>
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dd6:	f7ff ff61 	bl	8002c9c <__NVIC_GetPriorityGrouping>
 8002dda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	6978      	ldr	r0, [r7, #20]
 8002de2:	f7ff ffb1 	bl	8002d48 <NVIC_EncodePriority>
 8002de6:	4602      	mov	r2, r0
 8002de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff ff80 	bl	8002cf4 <__NVIC_SetPriority>
}
 8002df4:	bf00      	nop
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ff54 	bl	8002cb8 <__NVIC_EnableIRQ>
}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e26:	f7ff fee5 	bl	8002bf4 <HAL_GetTick>
 8002e2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d008      	beq.n	8002e4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2280      	movs	r2, #128	; 0x80
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e052      	b.n	8002ef0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0216 	bic.w	r2, r2, #22
 8002e58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d103      	bne.n	8002e7a <HAL_DMA_Abort+0x62>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0208 	bic.w	r2, r2, #8
 8002e88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0201 	bic.w	r2, r2, #1
 8002e98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e9a:	e013      	b.n	8002ec4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e9c:	f7ff feaa 	bl	8002bf4 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b05      	cmp	r3, #5
 8002ea8:	d90c      	bls.n	8002ec4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2220      	movs	r2, #32
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e015      	b.n	8002ef0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1e4      	bne.n	8002e9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed6:	223f      	movs	r2, #63	; 0x3f
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d004      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2280      	movs	r2, #128	; 0x80
 8002f10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e00c      	b.n	8002f30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2205      	movs	r2, #5
 8002f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0201 	bic.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f4a:	b2db      	uxtb	r3, r3
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b089      	sub	sp, #36	; 0x24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	e159      	b.n	8003228 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f74:	2201      	movs	r2, #1
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	f040 8148 	bne.w	8003222 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d005      	beq.n	8002faa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d130      	bne.n	800300c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 0201 	and.w	r2, r3, #1
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b03      	cmp	r3, #3
 8003016:	d017      	beq.n	8003048 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	2203      	movs	r2, #3
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d123      	bne.n	800309c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	08da      	lsrs	r2, r3, #3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3208      	adds	r2, #8
 800305c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003060:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	220f      	movs	r2, #15
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	08da      	lsrs	r2, r3, #3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3208      	adds	r2, #8
 8003096:	69b9      	ldr	r1, [r7, #24]
 8003098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	2203      	movs	r2, #3
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0203 	and.w	r2, r3, #3
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80a2 	beq.w	8003222 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	4b57      	ldr	r3, [pc, #348]	; (8003240 <HAL_GPIO_Init+0x2e8>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	4a56      	ldr	r2, [pc, #344]	; (8003240 <HAL_GPIO_Init+0x2e8>)
 80030e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ec:	6453      	str	r3, [r2, #68]	; 0x44
 80030ee:	4b54      	ldr	r3, [pc, #336]	; (8003240 <HAL_GPIO_Init+0x2e8>)
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030fa:	4a52      	ldr	r2, [pc, #328]	; (8003244 <HAL_GPIO_Init+0x2ec>)
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	089b      	lsrs	r3, r3, #2
 8003100:	3302      	adds	r3, #2
 8003102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	220f      	movs	r2, #15
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a49      	ldr	r2, [pc, #292]	; (8003248 <HAL_GPIO_Init+0x2f0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d019      	beq.n	800315a <HAL_GPIO_Init+0x202>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a48      	ldr	r2, [pc, #288]	; (800324c <HAL_GPIO_Init+0x2f4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d013      	beq.n	8003156 <HAL_GPIO_Init+0x1fe>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a47      	ldr	r2, [pc, #284]	; (8003250 <HAL_GPIO_Init+0x2f8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00d      	beq.n	8003152 <HAL_GPIO_Init+0x1fa>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a46      	ldr	r2, [pc, #280]	; (8003254 <HAL_GPIO_Init+0x2fc>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d007      	beq.n	800314e <HAL_GPIO_Init+0x1f6>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a45      	ldr	r2, [pc, #276]	; (8003258 <HAL_GPIO_Init+0x300>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d101      	bne.n	800314a <HAL_GPIO_Init+0x1f2>
 8003146:	2304      	movs	r3, #4
 8003148:	e008      	b.n	800315c <HAL_GPIO_Init+0x204>
 800314a:	2307      	movs	r3, #7
 800314c:	e006      	b.n	800315c <HAL_GPIO_Init+0x204>
 800314e:	2303      	movs	r3, #3
 8003150:	e004      	b.n	800315c <HAL_GPIO_Init+0x204>
 8003152:	2302      	movs	r3, #2
 8003154:	e002      	b.n	800315c <HAL_GPIO_Init+0x204>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <HAL_GPIO_Init+0x204>
 800315a:	2300      	movs	r3, #0
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	f002 0203 	and.w	r2, r2, #3
 8003162:	0092      	lsls	r2, r2, #2
 8003164:	4093      	lsls	r3, r2
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800316c:	4935      	ldr	r1, [pc, #212]	; (8003244 <HAL_GPIO_Init+0x2ec>)
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	089b      	lsrs	r3, r3, #2
 8003172:	3302      	adds	r3, #2
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800317a:	4b38      	ldr	r3, [pc, #224]	; (800325c <HAL_GPIO_Init+0x304>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800319e:	4a2f      	ldr	r2, [pc, #188]	; (800325c <HAL_GPIO_Init+0x304>)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031a4:	4b2d      	ldr	r3, [pc, #180]	; (800325c <HAL_GPIO_Init+0x304>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031c8:	4a24      	ldr	r2, [pc, #144]	; (800325c <HAL_GPIO_Init+0x304>)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ce:	4b23      	ldr	r3, [pc, #140]	; (800325c <HAL_GPIO_Init+0x304>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031f2:	4a1a      	ldr	r2, [pc, #104]	; (800325c <HAL_GPIO_Init+0x304>)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031f8:	4b18      	ldr	r3, [pc, #96]	; (800325c <HAL_GPIO_Init+0x304>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800321c:	4a0f      	ldr	r2, [pc, #60]	; (800325c <HAL_GPIO_Init+0x304>)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3301      	adds	r3, #1
 8003226:	61fb      	str	r3, [r7, #28]
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	2b0f      	cmp	r3, #15
 800322c:	f67f aea2 	bls.w	8002f74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	3724      	adds	r7, #36	; 0x24
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800
 8003244:	40013800 	.word	0x40013800
 8003248:	40020000 	.word	0x40020000
 800324c:	40020400 	.word	0x40020400
 8003250:	40020800 	.word	0x40020800
 8003254:	40020c00 	.word	0x40020c00
 8003258:	40021000 	.word	0x40021000
 800325c:	40013c00 	.word	0x40013c00

08003260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	887b      	ldrh	r3, [r7, #2]
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003278:	2301      	movs	r3, #1
 800327a:	73fb      	strb	r3, [r7, #15]
 800327c:	e001      	b.n	8003282 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003282:	7bfb      	ldrb	r3, [r7, #15]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	807b      	strh	r3, [r7, #2]
 800329c:	4613      	mov	r3, r2
 800329e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032a0:	787b      	ldrb	r3, [r7, #1]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032a6:	887a      	ldrh	r2, [r7, #2]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032ac:	e003      	b.n	80032b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ae:	887b      	ldrh	r3, [r7, #2]
 80032b0:	041a      	lsls	r2, r3, #16
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	619a      	str	r2, [r3, #24]
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032ce:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d006      	beq.n	80032e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032da:	4a05      	ldr	r2, [pc, #20]	; (80032f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 f806 	bl	80032f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40013c00 	.word	0x40013c00

080032f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e12b      	b.n	8003576 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fe fcb4 	bl	8001ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2224      	movs	r2, #36	; 0x24
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800336e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003370:	f003 fe78 	bl	8007064 <HAL_RCC_GetPCLK1Freq>
 8003374:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4a81      	ldr	r2, [pc, #516]	; (8003580 <HAL_I2C_Init+0x274>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d807      	bhi.n	8003390 <HAL_I2C_Init+0x84>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4a80      	ldr	r2, [pc, #512]	; (8003584 <HAL_I2C_Init+0x278>)
 8003384:	4293      	cmp	r3, r2
 8003386:	bf94      	ite	ls
 8003388:	2301      	movls	r3, #1
 800338a:	2300      	movhi	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	e006      	b.n	800339e <HAL_I2C_Init+0x92>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4a7d      	ldr	r2, [pc, #500]	; (8003588 <HAL_I2C_Init+0x27c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	bf94      	ite	ls
 8003398:	2301      	movls	r3, #1
 800339a:	2300      	movhi	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e0e7      	b.n	8003576 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4a78      	ldr	r2, [pc, #480]	; (800358c <HAL_I2C_Init+0x280>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	0c9b      	lsrs	r3, r3, #18
 80033b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	4a6a      	ldr	r2, [pc, #424]	; (8003580 <HAL_I2C_Init+0x274>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d802      	bhi.n	80033e0 <HAL_I2C_Init+0xd4>
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	3301      	adds	r3, #1
 80033de:	e009      	b.n	80033f4 <HAL_I2C_Init+0xe8>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	4a69      	ldr	r2, [pc, #420]	; (8003590 <HAL_I2C_Init+0x284>)
 80033ec:	fba2 2303 	umull	r2, r3, r2, r3
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	3301      	adds	r3, #1
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	430b      	orrs	r3, r1
 80033fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003406:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	495c      	ldr	r1, [pc, #368]	; (8003580 <HAL_I2C_Init+0x274>)
 8003410:	428b      	cmp	r3, r1
 8003412:	d819      	bhi.n	8003448 <HAL_I2C_Init+0x13c>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1e59      	subs	r1, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003422:	1c59      	adds	r1, r3, #1
 8003424:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003428:	400b      	ands	r3, r1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_I2C_Init+0x138>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1e59      	subs	r1, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	fbb1 f3f3 	udiv	r3, r1, r3
 800343c:	3301      	adds	r3, #1
 800343e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003442:	e051      	b.n	80034e8 <HAL_I2C_Init+0x1dc>
 8003444:	2304      	movs	r3, #4
 8003446:	e04f      	b.n	80034e8 <HAL_I2C_Init+0x1dc>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d111      	bne.n	8003474 <HAL_I2C_Init+0x168>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1e58      	subs	r0, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	440b      	add	r3, r1
 800345e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003462:	3301      	adds	r3, #1
 8003464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003468:	2b00      	cmp	r3, #0
 800346a:	bf0c      	ite	eq
 800346c:	2301      	moveq	r3, #1
 800346e:	2300      	movne	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	e012      	b.n	800349a <HAL_I2C_Init+0x18e>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1e58      	subs	r0, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	0099      	lsls	r1, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	fbb0 f3f3 	udiv	r3, r0, r3
 800348a:	3301      	adds	r3, #1
 800348c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003490:	2b00      	cmp	r3, #0
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_I2C_Init+0x196>
 800349e:	2301      	movs	r3, #1
 80034a0:	e022      	b.n	80034e8 <HAL_I2C_Init+0x1dc>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10e      	bne.n	80034c8 <HAL_I2C_Init+0x1bc>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1e58      	subs	r0, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6859      	ldr	r1, [r3, #4]
 80034b2:	460b      	mov	r3, r1
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	440b      	add	r3, r1
 80034b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80034bc:	3301      	adds	r3, #1
 80034be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c6:	e00f      	b.n	80034e8 <HAL_I2C_Init+0x1dc>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1e58      	subs	r0, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	0099      	lsls	r1, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	fbb0 f3f3 	udiv	r3, r0, r3
 80034de:	3301      	adds	r3, #1
 80034e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	6809      	ldr	r1, [r1, #0]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003516:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6911      	ldr	r1, [r2, #16]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	68d2      	ldr	r2, [r2, #12]
 8003522:	4311      	orrs	r1, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	430b      	orrs	r3, r1
 800352a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695a      	ldr	r2, [r3, #20]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	000186a0 	.word	0x000186a0
 8003584:	001e847f 	.word	0x001e847f
 8003588:	003d08ff 	.word	0x003d08ff
 800358c:	431bde83 	.word	0x431bde83
 8003590:	10624dd3 	.word	0x10624dd3

08003594 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	461a      	mov	r2, r3
 80035a0:	460b      	mov	r3, r1
 80035a2:	817b      	strh	r3, [r7, #10]
 80035a4:	4613      	mov	r3, r2
 80035a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035a8:	f7ff fb24 	bl	8002bf4 <HAL_GetTick>
 80035ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	f040 80e0 	bne.w	800377c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	2319      	movs	r3, #25
 80035c2:	2201      	movs	r2, #1
 80035c4:	4970      	ldr	r1, [pc, #448]	; (8003788 <HAL_I2C_Master_Transmit+0x1f4>)
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f002 feb2 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
 80035d4:	e0d3      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_I2C_Master_Transmit+0x50>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e0cc      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ea>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d007      	beq.n	800360a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f042 0201 	orr.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003618:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2221      	movs	r2, #33	; 0x21
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2210      	movs	r2, #16
 8003626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	893a      	ldrh	r2, [r7, #8]
 800363a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a50      	ldr	r2, [pc, #320]	; (800378c <HAL_I2C_Master_Transmit+0x1f8>)
 800364a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800364c:	8979      	ldrh	r1, [r7, #10]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	6a3a      	ldr	r2, [r7, #32]
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f002 faf6 	bl	8005c44 <I2C_MasterRequestWrite>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e08d      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003662:	2300      	movs	r3, #0
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003678:	e066      	b.n	8003748 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	6a39      	ldr	r1, [r7, #32]
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f002 ff2c 	bl	80064dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00d      	beq.n	80036a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	2b04      	cmp	r3, #4
 8003690:	d107      	bne.n	80036a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e06b      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	781a      	ldrb	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d11b      	bne.n	800371c <HAL_I2C_Master_Transmit+0x188>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d017      	beq.n	800371c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	781a      	ldrb	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	6a39      	ldr	r1, [r7, #32]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f002 ff1c 	bl	800655e <I2C_WaitOnBTFFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00d      	beq.n	8003748 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	2b04      	cmp	r3, #4
 8003732:	d107      	bne.n	8003744 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003742:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e01a      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374c:	2b00      	cmp	r3, #0
 800374e:	d194      	bne.n	800367a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	e000      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800377c:	2302      	movs	r3, #2
  }
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	00100002 	.word	0x00100002
 800378c:	ffff0000 	.word	0xffff0000

08003790 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08c      	sub	sp, #48	; 0x30
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	461a      	mov	r2, r3
 800379c:	460b      	mov	r3, r1
 800379e:	817b      	strh	r3, [r7, #10]
 80037a0:	4613      	mov	r3, r2
 80037a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037a4:	f7ff fa26 	bl	8002bf4 <HAL_GetTick>
 80037a8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	f040 820b 	bne.w	8003bce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	2319      	movs	r3, #25
 80037be:	2201      	movs	r2, #1
 80037c0:	497c      	ldr	r1, [pc, #496]	; (80039b4 <HAL_I2C_Master_Receive+0x224>)
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f002 fdb4 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80037ce:	2302      	movs	r3, #2
 80037d0:	e1fe      	b.n	8003bd0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_I2C_Master_Receive+0x50>
 80037dc:	2302      	movs	r3, #2
 80037de:	e1f7      	b.n	8003bd0 <HAL_I2C_Master_Receive+0x440>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d007      	beq.n	8003806 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0201 	orr.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003814:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2222      	movs	r2, #34	; 0x22
 800381a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2210      	movs	r2, #16
 8003822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	893a      	ldrh	r2, [r7, #8]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4a5c      	ldr	r2, [pc, #368]	; (80039b8 <HAL_I2C_Master_Receive+0x228>)
 8003846:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003848:	8979      	ldrh	r1, [r7, #10]
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f002 fa7a 	bl	8005d48 <I2C_MasterRequestRead>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e1b8      	b.n	8003bd0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003862:	2b00      	cmp	r3, #0
 8003864:	d113      	bne.n	800388e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003866:	2300      	movs	r3, #0
 8003868:	623b      	str	r3, [r7, #32]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	623b      	str	r3, [r7, #32]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	623b      	str	r3, [r7, #32]
 800387a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e18c      	b.n	8003ba8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003892:	2b01      	cmp	r3, #1
 8003894:	d11b      	bne.n	80038ce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	e16c      	b.n	8003ba8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d11b      	bne.n	800390e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f6:	2300      	movs	r3, #0
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	e14c      	b.n	8003ba8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800391c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003934:	e138      	b.n	8003ba8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393a:	2b03      	cmp	r3, #3
 800393c:	f200 80f1 	bhi.w	8003b22 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003944:	2b01      	cmp	r3, #1
 8003946:	d123      	bne.n	8003990 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f002 fe79 	bl	8006644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e139      	b.n	8003bd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800398e:	e10b      	b.n	8003ba8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003994:	2b02      	cmp	r3, #2
 8003996:	d14e      	bne.n	8003a36 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	2200      	movs	r2, #0
 80039a0:	4906      	ldr	r1, [pc, #24]	; (80039bc <HAL_I2C_Master_Receive+0x22c>)
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f002 fcc4 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d008      	beq.n	80039c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e10e      	b.n	8003bd0 <HAL_I2C_Master_Receive+0x440>
 80039b2:	bf00      	nop
 80039b4:	00100002 	.word	0x00100002
 80039b8:	ffff0000 	.word	0xffff0000
 80039bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a34:	e0b8      	b.n	8003ba8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	4966      	ldr	r1, [pc, #408]	; (8003bd8 <HAL_I2C_Master_Receive+0x448>)
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f002 fc75 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0bf      	b.n	8003bd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	2200      	movs	r2, #0
 8003a9a:	494f      	ldr	r1, [pc, #316]	; (8003bd8 <HAL_I2C_Master_Receive+0x448>)
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f002 fc47 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e091      	b.n	8003bd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b20:	e042      	b.n	8003ba8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f002 fd8c 	bl	8006644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e04c      	b.n	8003bd0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d118      	bne.n	8003ba8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f47f aec2 	bne.w	8003936 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e000      	b.n	8003bd0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003bce:	2302      	movs	r3, #2
  }
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3728      	adds	r7, #40	; 0x28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	00010004 	.word	0x00010004

08003bdc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	4608      	mov	r0, r1
 8003be6:	4611      	mov	r1, r2
 8003be8:	461a      	mov	r2, r3
 8003bea:	4603      	mov	r3, r0
 8003bec:	817b      	strh	r3, [r7, #10]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	813b      	strh	r3, [r7, #8]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bf6:	f7fe fffd 	bl	8002bf4 <HAL_GetTick>
 8003bfa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	f040 80d9 	bne.w	8003dbc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	2319      	movs	r3, #25
 8003c10:	2201      	movs	r2, #1
 8003c12:	496d      	ldr	r1, [pc, #436]	; (8003dc8 <HAL_I2C_Mem_Write+0x1ec>)
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f002 fb8b 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c20:	2302      	movs	r3, #2
 8003c22:	e0cc      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_I2C_Mem_Write+0x56>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e0c5      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d007      	beq.n	8003c58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2221      	movs	r2, #33	; 0x21
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2240      	movs	r2, #64	; 0x40
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a3a      	ldr	r2, [r7, #32]
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a4d      	ldr	r2, [pc, #308]	; (8003dcc <HAL_I2C_Mem_Write+0x1f0>)
 8003c98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c9a:	88f8      	ldrh	r0, [r7, #6]
 8003c9c:	893a      	ldrh	r2, [r7, #8]
 8003c9e:	8979      	ldrh	r1, [r7, #10]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	9301      	str	r3, [sp, #4]
 8003ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	4603      	mov	r3, r0
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f002 f91a 	bl	8005ee4 <I2C_RequestMemoryWrite>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d052      	beq.n	8003d5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e081      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f002 fc0c 	bl	80064dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d107      	bne.n	8003ce2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e06b      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	781a      	ldrb	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d11b      	bne.n	8003d5c <HAL_I2C_Mem_Write+0x180>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d017      	beq.n	8003d5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	781a      	ldrb	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1aa      	bne.n	8003cba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f002 fbf8 	bl	800655e <I2C_WaitOnBTFFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00d      	beq.n	8003d90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d107      	bne.n	8003d8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e016      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	00100002 	.word	0x00100002
 8003dcc:	ffff0000 	.word	0xffff0000

08003dd0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08c      	sub	sp, #48	; 0x30
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	4608      	mov	r0, r1
 8003dda:	4611      	mov	r1, r2
 8003ddc:	461a      	mov	r2, r3
 8003dde:	4603      	mov	r3, r0
 8003de0:	817b      	strh	r3, [r7, #10]
 8003de2:	460b      	mov	r3, r1
 8003de4:	813b      	strh	r3, [r7, #8]
 8003de6:	4613      	mov	r3, r2
 8003de8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dea:	f7fe ff03 	bl	8002bf4 <HAL_GetTick>
 8003dee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b20      	cmp	r3, #32
 8003dfa:	f040 8208 	bne.w	800420e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	2319      	movs	r3, #25
 8003e04:	2201      	movs	r2, #1
 8003e06:	497b      	ldr	r1, [pc, #492]	; (8003ff4 <HAL_I2C_Mem_Read+0x224>)
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f002 fa91 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003e14:	2302      	movs	r3, #2
 8003e16:	e1fb      	b.n	8004210 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_I2C_Mem_Read+0x56>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e1f4      	b.n	8004210 <HAL_I2C_Mem_Read+0x440>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d007      	beq.n	8003e4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2222      	movs	r2, #34	; 0x22
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2240      	movs	r2, #64	; 0x40
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4a5b      	ldr	r2, [pc, #364]	; (8003ff8 <HAL_I2C_Mem_Read+0x228>)
 8003e8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e8e:	88f8      	ldrh	r0, [r7, #6]
 8003e90:	893a      	ldrh	r2, [r7, #8]
 8003e92:	8979      	ldrh	r1, [r7, #10]
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	9301      	str	r3, [sp, #4]
 8003e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f002 f8b6 	bl	8006010 <I2C_RequestMemoryRead>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e1b0      	b.n	8004210 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d113      	bne.n	8003ede <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	623b      	str	r3, [r7, #32]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	623b      	str	r3, [r7, #32]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	623b      	str	r3, [r7, #32]
 8003eca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	e184      	b.n	80041e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d11b      	bne.n	8003f1e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	e164      	b.n	80041e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d11b      	bne.n	8003f5e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f46:	2300      	movs	r3, #0
 8003f48:	61bb      	str	r3, [r7, #24]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	e144      	b.n	80041e8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f74:	e138      	b.n	80041e8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	f200 80f1 	bhi.w	8004162 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d123      	bne.n	8003fd0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f002 fb59 	bl	8006644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e139      	b.n	8004210 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fce:	e10b      	b.n	80041e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d14e      	bne.n	8004076 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fde:	2200      	movs	r2, #0
 8003fe0:	4906      	ldr	r1, [pc, #24]	; (8003ffc <HAL_I2C_Mem_Read+0x22c>)
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f002 f9a4 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e10e      	b.n	8004210 <HAL_I2C_Mem_Read+0x440>
 8003ff2:	bf00      	nop
 8003ff4:	00100002 	.word	0x00100002
 8003ff8:	ffff0000 	.word	0xffff0000
 8003ffc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800400e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	3b01      	subs	r3, #1
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004074:	e0b8      	b.n	80041e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407c:	2200      	movs	r2, #0
 800407e:	4966      	ldr	r1, [pc, #408]	; (8004218 <HAL_I2C_Mem_Read+0x448>)
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f002 f955 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e0bf      	b.n	8004210 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800409e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	2200      	movs	r2, #0
 80040da:	494f      	ldr	r1, [pc, #316]	; (8004218 <HAL_I2C_Mem_Read+0x448>)
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f002 f927 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e091      	b.n	8004210 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004160:	e042      	b.n	80041e8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004164:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f002 fa6c 	bl	8006644 <I2C_WaitOnRXNEFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e04c      	b.n	8004210 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d118      	bne.n	80041e8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041de:	b29b      	uxth	r3, r3
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f47f aec2 	bne.w	8003f76 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	e000      	b.n	8004210 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800420e:	2302      	movs	r3, #2
  }
}
 8004210:	4618      	mov	r0, r3
 8004212:	3728      	adds	r7, #40	; 0x28
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	00010004 	.word	0x00010004

0800421c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	; 0x28
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	607a      	str	r2, [r7, #4]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	460b      	mov	r3, r1
 800422a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800422c:	f7fe fce2 	bl	8002bf4 <HAL_GetTick>
 8004230:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b20      	cmp	r3, #32
 8004240:	f040 8111 	bne.w	8004466 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	2319      	movs	r3, #25
 800424a:	2201      	movs	r2, #1
 800424c:	4988      	ldr	r1, [pc, #544]	; (8004470 <HAL_I2C_IsDeviceReady+0x254>)
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f002 f86e 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800425a:	2302      	movs	r3, #2
 800425c:	e104      	b.n	8004468 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_I2C_IsDeviceReady+0x50>
 8004268:	2302      	movs	r3, #2
 800426a:	e0fd      	b.n	8004468 <HAL_I2C_IsDeviceReady+0x24c>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b01      	cmp	r3, #1
 8004280:	d007      	beq.n	8004292 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0201 	orr.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2224      	movs	r2, #36	; 0x24
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4a70      	ldr	r2, [pc, #448]	; (8004474 <HAL_I2C_IsDeviceReady+0x258>)
 80042b4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042c4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f002 f82c 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00d      	beq.n	80042fa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ec:	d103      	bne.n	80042f6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e0b6      	b.n	8004468 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042fa:	897b      	ldrh	r3, [r7, #10]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	461a      	mov	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004308:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800430a:	f7fe fc73 	bl	8002bf4 <HAL_GetTick>
 800430e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b02      	cmp	r3, #2
 800431c:	bf0c      	ite	eq
 800431e:	2301      	moveq	r3, #1
 8004320:	2300      	movne	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004334:	bf0c      	ite	eq
 8004336:	2301      	moveq	r3, #1
 8004338:	2300      	movne	r3, #0
 800433a:	b2db      	uxtb	r3, r3
 800433c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800433e:	e025      	b.n	800438c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004340:	f7fe fc58 	bl	8002bf4 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d302      	bcc.n	8004356 <HAL_I2C_IsDeviceReady+0x13a>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d103      	bne.n	800435e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	22a0      	movs	r2, #160	; 0xa0
 800435a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b02      	cmp	r3, #2
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800437e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004382:	bf0c      	ite	eq
 8004384:	2301      	moveq	r3, #1
 8004386:	2300      	movne	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2ba0      	cmp	r3, #160	; 0xa0
 8004396:	d005      	beq.n	80043a4 <HAL_I2C_IsDeviceReady+0x188>
 8004398:	7dfb      	ldrb	r3, [r7, #23]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d102      	bne.n	80043a4 <HAL_I2C_IsDeviceReady+0x188>
 800439e:	7dbb      	ldrb	r3, [r7, #22]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0cd      	beq.n	8004340 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d129      	bne.n	800440e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ca:	2300      	movs	r3, #0
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	2319      	movs	r3, #25
 80043e6:	2201      	movs	r2, #1
 80043e8:	4921      	ldr	r1, [pc, #132]	; (8004470 <HAL_I2C_IsDeviceReady+0x254>)
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f001 ffa0 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e036      	b.n	8004468 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	e02c      	b.n	8004468 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800441c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004426:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	2319      	movs	r3, #25
 800442e:	2201      	movs	r2, #1
 8004430:	490f      	ldr	r1, [pc, #60]	; (8004470 <HAL_I2C_IsDeviceReady+0x254>)
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f001 ff7c 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e012      	b.n	8004468 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	3301      	adds	r3, #1
 8004446:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	429a      	cmp	r2, r3
 800444e:	f4ff af32 	bcc.w	80042b6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004466:	2302      	movs	r3, #2
  }
}
 8004468:	4618      	mov	r0, r3
 800446a:	3720      	adds	r7, #32
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	00100002 	.word	0x00100002
 8004474:	ffff0000 	.word	0xffff0000

08004478 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004498:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	2b10      	cmp	r3, #16
 80044a6:	d003      	beq.n	80044b0 <HAL_I2C_EV_IRQHandler+0x38>
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	2b40      	cmp	r3, #64	; 0x40
 80044ac:	f040 80c1 	bne.w	8004632 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10d      	bne.n	80044e6 <HAL_I2C_EV_IRQHandler+0x6e>
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80044d0:	d003      	beq.n	80044da <HAL_I2C_EV_IRQHandler+0x62>
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80044d8:	d101      	bne.n	80044de <HAL_I2C_EV_IRQHandler+0x66>
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <HAL_I2C_EV_IRQHandler+0x68>
 80044de:	2300      	movs	r3, #0
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	f000 8132 	beq.w	800474a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00c      	beq.n	800450a <HAL_I2C_EV_IRQHandler+0x92>
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	0a5b      	lsrs	r3, r3, #9
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d006      	beq.n	800450a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f002 f926 	bl	800674e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fd83 	bl	800500e <I2C_Master_SB>
 8004508:	e092      	b.n	8004630 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	08db      	lsrs	r3, r3, #3
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d009      	beq.n	800452a <HAL_I2C_EV_IRQHandler+0xb2>
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	0a5b      	lsrs	r3, r3, #9
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fdf9 	bl	800511a <I2C_Master_ADD10>
 8004528:	e082      	b.n	8004630 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	085b      	lsrs	r3, r3, #1
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <HAL_I2C_EV_IRQHandler+0xd2>
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	0a5b      	lsrs	r3, r3, #9
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fe13 	bl	800516e <I2C_Master_ADDR>
 8004548:	e072      	b.n	8004630 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d03b      	beq.n	80045ce <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004564:	f000 80f3 	beq.w	800474e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	09db      	lsrs	r3, r3, #7
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00f      	beq.n	8004594 <HAL_I2C_EV_IRQHandler+0x11c>
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	0a9b      	lsrs	r3, r3, #10
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d009      	beq.n	8004594 <HAL_I2C_EV_IRQHandler+0x11c>
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	089b      	lsrs	r3, r3, #2
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d103      	bne.n	8004594 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f9f3 	bl	8004978 <I2C_MasterTransmit_TXE>
 8004592:	e04d      	b.n	8004630 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	089b      	lsrs	r3, r3, #2
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80d6 	beq.w	800474e <HAL_I2C_EV_IRQHandler+0x2d6>
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	0a5b      	lsrs	r3, r3, #9
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 80cf 	beq.w	800474e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80045b0:	7bbb      	ldrb	r3, [r7, #14]
 80045b2:	2b21      	cmp	r3, #33	; 0x21
 80045b4:	d103      	bne.n	80045be <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fa7a 	bl	8004ab0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045bc:	e0c7      	b.n	800474e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80045be:	7bfb      	ldrb	r3, [r7, #15]
 80045c0:	2b40      	cmp	r3, #64	; 0x40
 80045c2:	f040 80c4 	bne.w	800474e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 fae8 	bl	8004b9c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045cc:	e0bf      	b.n	800474e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045dc:	f000 80b7 	beq.w	800474e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	099b      	lsrs	r3, r3, #6
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00f      	beq.n	800460c <HAL_I2C_EV_IRQHandler+0x194>
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	0a9b      	lsrs	r3, r3, #10
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d009      	beq.n	800460c <HAL_I2C_EV_IRQHandler+0x194>
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	089b      	lsrs	r3, r3, #2
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d103      	bne.n	800460c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 fb5d 	bl	8004cc4 <I2C_MasterReceive_RXNE>
 800460a:	e011      	b.n	8004630 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	089b      	lsrs	r3, r3, #2
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 809a 	beq.w	800474e <HAL_I2C_EV_IRQHandler+0x2d6>
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	0a5b      	lsrs	r3, r3, #9
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 8093 	beq.w	800474e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fc06 	bl	8004e3a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800462e:	e08e      	b.n	800474e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004630:	e08d      	b.n	800474e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	d004      	beq.n	8004644 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	e007      	b.n	8004654 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	085b      	lsrs	r3, r3, #1
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d012      	beq.n	8004686 <HAL_I2C_EV_IRQHandler+0x20e>
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	0a5b      	lsrs	r3, r3, #9
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00c      	beq.n	8004686 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800467c:	69b9      	ldr	r1, [r7, #24]
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 ffc4 	bl	800560c <I2C_Slave_ADDR>
 8004684:	e066      	b.n	8004754 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	091b      	lsrs	r3, r3, #4
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d009      	beq.n	80046a6 <HAL_I2C_EV_IRQHandler+0x22e>
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	0a5b      	lsrs	r3, r3, #9
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fffe 	bl	80056a0 <I2C_Slave_STOPF>
 80046a4:	e056      	b.n	8004754 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046a6:	7bbb      	ldrb	r3, [r7, #14]
 80046a8:	2b21      	cmp	r3, #33	; 0x21
 80046aa:	d002      	beq.n	80046b2 <HAL_I2C_EV_IRQHandler+0x23a>
 80046ac:	7bbb      	ldrb	r3, [r7, #14]
 80046ae:	2b29      	cmp	r3, #41	; 0x29
 80046b0:	d125      	bne.n	80046fe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	09db      	lsrs	r3, r3, #7
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00f      	beq.n	80046de <HAL_I2C_EV_IRQHandler+0x266>
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	0a9b      	lsrs	r3, r3, #10
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d009      	beq.n	80046de <HAL_I2C_EV_IRQHandler+0x266>
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	089b      	lsrs	r3, r3, #2
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d103      	bne.n	80046de <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 feda 	bl	8005490 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046dc:	e039      	b.n	8004752 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	089b      	lsrs	r3, r3, #2
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d033      	beq.n	8004752 <HAL_I2C_EV_IRQHandler+0x2da>
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	0a5b      	lsrs	r3, r3, #9
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d02d      	beq.n	8004752 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 ff07 	bl	800550a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046fc:	e029      	b.n	8004752 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	099b      	lsrs	r3, r3, #6
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00f      	beq.n	800472a <HAL_I2C_EV_IRQHandler+0x2b2>
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	0a9b      	lsrs	r3, r3, #10
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d009      	beq.n	800472a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	089b      	lsrs	r3, r3, #2
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d103      	bne.n	800472a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 ff12 	bl	800554c <I2C_SlaveReceive_RXNE>
 8004728:	e014      	b.n	8004754 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	089b      	lsrs	r3, r3, #2
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00e      	beq.n	8004754 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	0a5b      	lsrs	r3, r3, #9
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d008      	beq.n	8004754 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 ff40 	bl	80055c8 <I2C_SlaveReceive_BTF>
 8004748:	e004      	b.n	8004754 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800474a:	bf00      	nop
 800474c:	e002      	b.n	8004754 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800474e:	bf00      	nop
 8004750:	e000      	b.n	8004754 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004752:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004754:	3720      	adds	r7, #32
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b08a      	sub	sp, #40	; 0x28
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004772:	2300      	movs	r3, #0
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800477c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	0a1b      	lsrs	r3, r3, #8
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00e      	beq.n	80047a8 <HAL_I2C_ER_IRQHandler+0x4e>
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	0a1b      	lsrs	r3, r3, #8
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d008      	beq.n	80047a8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80047a6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	0a5b      	lsrs	r3, r3, #9
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00e      	beq.n	80047d2 <HAL_I2C_ER_IRQHandler+0x78>
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	0a1b      	lsrs	r3, r3, #8
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d008      	beq.n	80047d2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	f043 0302 	orr.w	r3, r3, #2
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80047d0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	0a9b      	lsrs	r3, r3, #10
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d03f      	beq.n	800485e <HAL_I2C_ER_IRQHandler+0x104>
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	0a1b      	lsrs	r3, r3, #8
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d039      	beq.n	800485e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80047ea:	7efb      	ldrb	r3, [r7, #27]
 80047ec:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004804:	7ebb      	ldrb	r3, [r7, #26]
 8004806:	2b20      	cmp	r3, #32
 8004808:	d112      	bne.n	8004830 <HAL_I2C_ER_IRQHandler+0xd6>
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10f      	bne.n	8004830 <HAL_I2C_ER_IRQHandler+0xd6>
 8004810:	7cfb      	ldrb	r3, [r7, #19]
 8004812:	2b21      	cmp	r3, #33	; 0x21
 8004814:	d008      	beq.n	8004828 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004816:	7cfb      	ldrb	r3, [r7, #19]
 8004818:	2b29      	cmp	r3, #41	; 0x29
 800481a:	d005      	beq.n	8004828 <HAL_I2C_ER_IRQHandler+0xce>
 800481c:	7cfb      	ldrb	r3, [r7, #19]
 800481e:	2b28      	cmp	r3, #40	; 0x28
 8004820:	d106      	bne.n	8004830 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b21      	cmp	r3, #33	; 0x21
 8004826:	d103      	bne.n	8004830 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f001 f869 	bl	8005900 <I2C_Slave_AF>
 800482e:	e016      	b.n	800485e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004838:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	f043 0304 	orr.w	r3, r3, #4
 8004840:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004842:	7efb      	ldrb	r3, [r7, #27]
 8004844:	2b10      	cmp	r3, #16
 8004846:	d002      	beq.n	800484e <HAL_I2C_ER_IRQHandler+0xf4>
 8004848:	7efb      	ldrb	r3, [r7, #27]
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d107      	bne.n	800485e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800485c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	0adb      	lsrs	r3, r3, #11
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00e      	beq.n	8004888 <HAL_I2C_ER_IRQHandler+0x12e>
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	0a1b      	lsrs	r3, r3, #8
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	f043 0308 	orr.w	r3, r3, #8
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004886:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	2b00      	cmp	r3, #0
 800488c:	d008      	beq.n	80048a0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f001 f8a0 	bl	80059e0 <I2C_ITError>
  }
}
 80048a0:	bf00      	nop
 80048a2:	3728      	adds	r7, #40	; 0x28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	70fb      	strb	r3, [r7, #3]
 8004904:	4613      	mov	r3, r2
 8004906:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004986:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800498e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499a:	2b00      	cmp	r3, #0
 800499c:	d150      	bne.n	8004a40 <I2C_MasterTransmit_TXE+0xc8>
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	2b21      	cmp	r3, #33	; 0x21
 80049a2:	d14d      	bne.n	8004a40 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d01d      	beq.n	80049e6 <I2C_MasterTransmit_TXE+0x6e>
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d01a      	beq.n	80049e6 <I2C_MasterTransmit_TXE+0x6e>
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049b6:	d016      	beq.n	80049e6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049c6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2211      	movs	r2, #17
 80049cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff ff62 	bl	80048a8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049e4:	e060      	b.n	8004aa8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049f4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a04:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d107      	bne.n	8004a30 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff ff7d 	bl	8004928 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a2e:	e03b      	b.n	8004aa8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff ff35 	bl	80048a8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a3e:	e033      	b.n	8004aa8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
 8004a42:	2b21      	cmp	r3, #33	; 0x21
 8004a44:	d005      	beq.n	8004a52 <I2C_MasterTransmit_TXE+0xda>
 8004a46:	7bbb      	ldrb	r3, [r7, #14]
 8004a48:	2b40      	cmp	r3, #64	; 0x40
 8004a4a:	d12d      	bne.n	8004aa8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	2b22      	cmp	r3, #34	; 0x22
 8004a50:	d12a      	bne.n	8004aa8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d108      	bne.n	8004a6e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a6a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004a6c:	e01c      	b.n	8004aa8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b40      	cmp	r3, #64	; 0x40
 8004a78:	d103      	bne.n	8004a82 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f88e 	bl	8004b9c <I2C_MemoryTransmit_TXE_BTF>
}
 8004a80:	e012      	b.n	8004aa8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	781a      	ldrb	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004aa6:	e7ff      	b.n	8004aa8 <I2C_MasterTransmit_TXE+0x130>
 8004aa8:	bf00      	nop
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b21      	cmp	r3, #33	; 0x21
 8004ac8:	d164      	bne.n	8004b94 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d012      	beq.n	8004afa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	781a      	ldrb	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004af8:	e04c      	b.n	8004b94 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d01d      	beq.n	8004b3c <I2C_MasterTransmit_BTF+0x8c>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d01a      	beq.n	8004b3c <I2C_MasterTransmit_BTF+0x8c>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b0c:	d016      	beq.n	8004b3c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b1c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2211      	movs	r2, #17
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff feb7 	bl	80048a8 <HAL_I2C_MasterTxCpltCallback>
}
 8004b3a:	e02b      	b.n	8004b94 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b4a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b5a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b40      	cmp	r3, #64	; 0x40
 8004b74:	d107      	bne.n	8004b86 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff fed2 	bl	8004928 <HAL_I2C_MemTxCpltCallback>
}
 8004b84:	e006      	b.n	8004b94 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff fe8a 	bl	80048a8 <HAL_I2C_MasterTxCpltCallback>
}
 8004b94:	bf00      	nop
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004baa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d11d      	bne.n	8004bf0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d10b      	bne.n	8004bd4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bcc:	1c9a      	adds	r2, r3, #2
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004bd2:	e073      	b.n	8004cbc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	121b      	asrs	r3, r3, #8
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004bee:	e065      	b.n	8004cbc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d10b      	bne.n	8004c10 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c0e:	e055      	b.n	8004cbc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d151      	bne.n	8004cbc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
 8004c1a:	2b22      	cmp	r3, #34	; 0x22
 8004c1c:	d10d      	bne.n	8004c3a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c2c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c38:	e040      	b.n	8004cbc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d015      	beq.n	8004c70 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
 8004c46:	2b21      	cmp	r3, #33	; 0x21
 8004c48:	d112      	bne.n	8004c70 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	781a      	ldrb	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3b01      	subs	r3, #1
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c6e:	e025      	b.n	8004cbc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d120      	bne.n	8004cbc <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
 8004c7c:	2b21      	cmp	r3, #33	; 0x21
 8004c7e:	d11d      	bne.n	8004cbc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c8e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c9e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff fe36 	bl	8004928 <HAL_I2C_MemTxCpltCallback>
}
 8004cbc:	bf00      	nop
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b22      	cmp	r3, #34	; 0x22
 8004cd6:	f040 80ac 	bne.w	8004e32 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	d921      	bls.n	8004d2c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691a      	ldr	r2, [r3, #16]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	f040 808c 	bne.w	8004e32 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d28:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004d2a:	e082      	b.n	8004e32 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d075      	beq.n	8004e20 <I2C_MasterReceive_RXNE+0x15c>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d002      	beq.n	8004d40 <I2C_MasterReceive_RXNE+0x7c>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d16f      	bne.n	8004e20 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f001 fc4d 	bl	80065e0 <I2C_WaitOnSTOPRequestThroughIT>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d142      	bne.n	8004dd2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d6a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b40      	cmp	r3, #64	; 0x40
 8004da4:	d10a      	bne.n	8004dbc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff fdc1 	bl	800493c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004dba:	e03a      	b.n	8004e32 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2212      	movs	r2, #18
 8004dc8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff fd76 	bl	80048bc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004dd0:	e02f      	b.n	8004e32 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004de0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7ff fd99 	bl	8004950 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e1e:	e008      	b.n	8004e32 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e2e:	605a      	str	r2, [r3, #4]
}
 8004e30:	e7ff      	b.n	8004e32 <I2C_MasterReceive_RXNE+0x16e>
 8004e32:	bf00      	nop
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d11b      	bne.n	8004e8a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e60:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004e88:	e0bd      	b.n	8005006 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d129      	bne.n	8004ee8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d00a      	beq.n	8004ec0 <I2C_MasterReceive_BTF+0x86>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d007      	beq.n	8004ec0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ebe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ee6:	e08e      	b.n	8005006 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d176      	bne.n	8004fe0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d002      	beq.n	8004efe <I2C_MasterReceive_BTF+0xc4>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b10      	cmp	r3, #16
 8004efc:	d108      	bne.n	8004f10 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	e019      	b.n	8004f44 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d002      	beq.n	8004f1c <I2C_MasterReceive_BTF+0xe2>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d108      	bne.n	8004f2e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	e00a      	b.n	8004f44 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d007      	beq.n	8004f44 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f42:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f9e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b40      	cmp	r3, #64	; 0x40
 8004fb2:	d10a      	bne.n	8004fca <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff fcba 	bl	800493c <HAL_I2C_MemRxCpltCallback>
}
 8004fc8:	e01d      	b.n	8005006 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2212      	movs	r2, #18
 8004fd6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff fc6f 	bl	80048bc <HAL_I2C_MasterRxCpltCallback>
}
 8004fde:	e012      	b.n	8005006 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691a      	ldr	r2, [r3, #16]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29a      	uxth	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005006:	bf00      	nop
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b40      	cmp	r3, #64	; 0x40
 8005020:	d117      	bne.n	8005052 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502e:	b2db      	uxtb	r3, r3
 8005030:	461a      	mov	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800503a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800503c:	e067      	b.n	800510e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005042:	b2db      	uxtb	r3, r3
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	b2da      	uxtb	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	611a      	str	r2, [r3, #16]
}
 8005050:	e05d      	b.n	800510e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800505a:	d133      	bne.n	80050c4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b21      	cmp	r3, #33	; 0x21
 8005066:	d109      	bne.n	800507c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506c:	b2db      	uxtb	r3, r3
 800506e:	461a      	mov	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005078:	611a      	str	r2, [r3, #16]
 800507a:	e008      	b.n	800508e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005080:	b2db      	uxtb	r3, r3
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	b2da      	uxtb	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005092:	2b00      	cmp	r3, #0
 8005094:	d004      	beq.n	80050a0 <I2C_Master_SB+0x92>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509c:	2b00      	cmp	r3, #0
 800509e:	d108      	bne.n	80050b2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d032      	beq.n	800510e <I2C_Master_SB+0x100>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d02d      	beq.n	800510e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050c0:	605a      	str	r2, [r3, #4]
}
 80050c2:	e024      	b.n	800510e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10e      	bne.n	80050ea <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	11db      	asrs	r3, r3, #7
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	f003 0306 	and.w	r3, r3, #6
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	f063 030f 	orn	r3, r3, #15
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	611a      	str	r2, [r3, #16]
}
 80050e8:	e011      	b.n	800510e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d10d      	bne.n	800510e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	11db      	asrs	r3, r3, #7
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	f003 0306 	and.w	r3, r3, #6
 8005100:	b2db      	uxtb	r3, r3
 8005102:	f063 030e 	orn	r3, r3, #14
 8005106:	b2da      	uxtb	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	611a      	str	r2, [r3, #16]
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	b2da      	uxtb	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005132:	2b00      	cmp	r3, #0
 8005134:	d004      	beq.n	8005140 <I2C_Master_ADD10+0x26>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513c:	2b00      	cmp	r3, #0
 800513e:	d108      	bne.n	8005152 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00c      	beq.n	8005162 <I2C_Master_ADD10+0x48>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005160:	605a      	str	r2, [r3, #4]
  }
}
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800516e:	b480      	push	{r7}
 8005170:	b091      	sub	sp, #68	; 0x44
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800517c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005184:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b22      	cmp	r3, #34	; 0x22
 8005196:	f040 8169 	bne.w	800546c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10f      	bne.n	80051c2 <I2C_Master_ADDR+0x54>
 80051a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80051a6:	2b40      	cmp	r3, #64	; 0x40
 80051a8:	d10b      	bne.n	80051c2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051aa:	2300      	movs	r3, #0
 80051ac:	633b      	str	r3, [r7, #48]	; 0x30
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	633b      	str	r3, [r7, #48]	; 0x30
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	633b      	str	r3, [r7, #48]	; 0x30
 80051be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c0:	e160      	b.n	8005484 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d11d      	bne.n	8005206 <I2C_Master_ADDR+0x98>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051d2:	d118      	bne.n	8005206 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d4:	2300      	movs	r3, #0
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051f8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	651a      	str	r2, [r3, #80]	; 0x50
 8005204:	e13e      	b.n	8005484 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d113      	bne.n	8005238 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005210:	2300      	movs	r3, #0
 8005212:	62bb      	str	r3, [r7, #40]	; 0x28
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	62bb      	str	r3, [r7, #40]	; 0x28
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	62bb      	str	r3, [r7, #40]	; 0x28
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	e115      	b.n	8005464 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	f040 808a 	bne.w	8005358 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005246:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800524a:	d137      	bne.n	80052bc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800526a:	d113      	bne.n	8005294 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800527a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800527c:	2300      	movs	r3, #0
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	e0e7      	b.n	8005464 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005294:	2300      	movs	r3, #0
 8005296:	623b      	str	r3, [r7, #32]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	623b      	str	r3, [r7, #32]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	623b      	str	r3, [r7, #32]
 80052a8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	e0d3      	b.n	8005464 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80052bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d02e      	beq.n	8005320 <I2C_Master_ADDR+0x1b2>
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c4:	2b20      	cmp	r3, #32
 80052c6:	d02b      	beq.n	8005320 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80052c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ca:	2b12      	cmp	r3, #18
 80052cc:	d102      	bne.n	80052d4 <I2C_Master_ADDR+0x166>
 80052ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d125      	bne.n	8005320 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d00e      	beq.n	80052f8 <I2C_Master_ADDR+0x18a>
 80052da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d00b      	beq.n	80052f8 <I2C_Master_ADDR+0x18a>
 80052e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d008      	beq.n	80052f8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	e007      	b.n	8005308 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005306:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005308:	2300      	movs	r3, #0
 800530a:	61fb      	str	r3, [r7, #28]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	61fb      	str	r3, [r7, #28]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	61fb      	str	r3, [r7, #28]
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	e0a1      	b.n	8005464 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005330:	2300      	movs	r3, #0
 8005332:	61bb      	str	r3, [r7, #24]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	61bb      	str	r3, [r7, #24]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	61bb      	str	r3, [r7, #24]
 8005344:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e085      	b.n	8005464 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535c:	b29b      	uxth	r3, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d14d      	bne.n	80053fe <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	2b04      	cmp	r3, #4
 8005366:	d016      	beq.n	8005396 <I2C_Master_ADDR+0x228>
 8005368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536a:	2b02      	cmp	r3, #2
 800536c:	d013      	beq.n	8005396 <I2C_Master_ADDR+0x228>
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	2b10      	cmp	r3, #16
 8005372:	d010      	beq.n	8005396 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005382:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	e007      	b.n	80053a6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053a4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b4:	d117      	bne.n	80053e6 <I2C_Master_ADDR+0x278>
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053bc:	d00b      	beq.n	80053d6 <I2C_Master_ADDR+0x268>
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d008      	beq.n	80053d6 <I2C_Master_ADDR+0x268>
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d005      	beq.n	80053d6 <I2C_Master_ADDR+0x268>
 80053ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	d002      	beq.n	80053d6 <I2C_Master_ADDR+0x268>
 80053d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d2:	2b20      	cmp	r3, #32
 80053d4:	d107      	bne.n	80053e6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e6:	2300      	movs	r3, #0
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	e032      	b.n	8005464 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800540c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800541c:	d117      	bne.n	800544e <I2C_Master_ADDR+0x2e0>
 800541e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005420:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005424:	d00b      	beq.n	800543e <I2C_Master_ADDR+0x2d0>
 8005426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005428:	2b01      	cmp	r3, #1
 800542a:	d008      	beq.n	800543e <I2C_Master_ADDR+0x2d0>
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	2b08      	cmp	r3, #8
 8005430:	d005      	beq.n	800543e <I2C_Master_ADDR+0x2d0>
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	2b10      	cmp	r3, #16
 8005436:	d002      	beq.n	800543e <I2C_Master_ADDR+0x2d0>
 8005438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543a:	2b20      	cmp	r3, #32
 800543c:	d107      	bne.n	800544e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800544c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800544e:	2300      	movs	r3, #0
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	613b      	str	r3, [r7, #16]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800546a:	e00b      	b.n	8005484 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	68fb      	ldr	r3, [r7, #12]
}
 8005482:	e7ff      	b.n	8005484 <I2C_Master_ADDR+0x316>
 8005484:	bf00      	nop
 8005486:	3744      	adds	r7, #68	; 0x44
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d02b      	beq.n	8005502 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	781a      	ldrb	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d114      	bne.n	8005502 <I2C_SlaveTransmit_TXE+0x72>
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	2b29      	cmp	r3, #41	; 0x29
 80054dc:	d111      	bne.n	8005502 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2221      	movs	r2, #33	; 0x21
 80054f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2228      	movs	r2, #40	; 0x28
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff f9e7 	bl	80048d0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005502:	bf00      	nop
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005516:	b29b      	uxth	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	d011      	beq.n	8005540 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	781a      	ldrb	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005536:	b29b      	uxth	r3, r3
 8005538:	3b01      	subs	r3, #1
 800553a:	b29a      	uxth	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d02c      	beq.n	80055c0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	1c5a      	adds	r2, r3, #1
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005582:	b29b      	uxth	r3, r3
 8005584:	3b01      	subs	r3, #1
 8005586:	b29a      	uxth	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d114      	bne.n	80055c0 <I2C_SlaveReceive_RXNE+0x74>
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	2b2a      	cmp	r3, #42	; 0x2a
 800559a:	d111      	bne.n	80055c0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055aa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2222      	movs	r2, #34	; 0x22
 80055b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2228      	movs	r2, #40	; 0x28
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff f992 	bl	80048e4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055c0:	bf00      	nop
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d012      	beq.n	8005600 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	b2d2      	uxtb	r2, r2
 80055e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005616:	2300      	movs	r3, #0
 8005618:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005620:	b2db      	uxtb	r3, r3
 8005622:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005626:	2b28      	cmp	r3, #40	; 0x28
 8005628:	d127      	bne.n	800567a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005638:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	089b      	lsrs	r3, r3, #2
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005646:	2301      	movs	r3, #1
 8005648:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	09db      	lsrs	r3, r3, #7
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	81bb      	strh	r3, [r7, #12]
 800565c:	e002      	b.n	8005664 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800566c:	89ba      	ldrh	r2, [r7, #12]
 800566e:	7bfb      	ldrb	r3, [r7, #15]
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff f940 	bl	80048f8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005678:	e00e      	b.n	8005698 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800567a:	2300      	movs	r3, #0
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	60bb      	str	r3, [r7, #8]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005698:	bf00      	nop
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056be:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80056c0:	2300      	movs	r3, #0
 80056c2:	60bb      	str	r3, [r7, #8]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	60bb      	str	r3, [r7, #8]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 0201 	orr.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056fc:	d172      	bne.n	80057e4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	2b22      	cmp	r3, #34	; 0x22
 8005702:	d002      	beq.n	800570a <I2C_Slave_STOPF+0x6a>
 8005704:	7bfb      	ldrb	r3, [r7, #15]
 8005706:	2b2a      	cmp	r3, #42	; 0x2a
 8005708:	d135      	bne.n	8005776 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	b29a      	uxth	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571c:	b29b      	uxth	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d005      	beq.n	800572e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	f043 0204 	orr.w	r2, r3, #4
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800573c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	4618      	mov	r0, r3
 8005744:	f7fd fbfa 	bl	8002f3c <HAL_DMA_GetState>
 8005748:	4603      	mov	r3, r0
 800574a:	2b01      	cmp	r3, #1
 800574c:	d049      	beq.n	80057e2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	4a69      	ldr	r2, [pc, #420]	; (80058f8 <I2C_Slave_STOPF+0x258>)
 8005754:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575a:	4618      	mov	r0, r3
 800575c:	f7fd fbcc 	bl	8002ef8 <HAL_DMA_Abort_IT>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d03d      	beq.n	80057e2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005770:	4610      	mov	r0, r2
 8005772:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005774:	e035      	b.n	80057e2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	b29a      	uxth	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005788:	b29b      	uxth	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d005      	beq.n	800579a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	f043 0204 	orr.w	r2, r3, #4
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7fd fbc4 	bl	8002f3c <HAL_DMA_GetState>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d014      	beq.n	80057e4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057be:	4a4e      	ldr	r2, [pc, #312]	; (80058f8 <I2C_Slave_STOPF+0x258>)
 80057c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fd fb96 	bl	8002ef8 <HAL_DMA_Abort_IT>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d008      	beq.n	80057e4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057dc:	4610      	mov	r0, r2
 80057de:	4798      	blx	r3
 80057e0:	e000      	b.n	80057e4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057e2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d03e      	beq.n	800586c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	f003 0304 	and.w	r3, r3, #4
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	d112      	bne.n	8005822 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691a      	ldr	r2, [r3, #16]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582c:	2b40      	cmp	r3, #64	; 0x40
 800582e:	d112      	bne.n	8005856 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584c:	b29b      	uxth	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585a:	b29b      	uxth	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	f043 0204 	orr.w	r2, r3, #4
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f8b3 	bl	80059e0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800587a:	e039      	b.n	80058f0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	2b2a      	cmp	r3, #42	; 0x2a
 8005880:	d109      	bne.n	8005896 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2228      	movs	r2, #40	; 0x28
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff f827 	bl	80048e4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b28      	cmp	r3, #40	; 0x28
 80058a0:	d111      	bne.n	80058c6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a15      	ldr	r2, [pc, #84]	; (80058fc <I2C_Slave_STOPF+0x25c>)
 80058a6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7ff f828 	bl	8004914 <HAL_I2C_ListenCpltCallback>
}
 80058c4:	e014      	b.n	80058f0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	2b22      	cmp	r3, #34	; 0x22
 80058cc:	d002      	beq.n	80058d4 <I2C_Slave_STOPF+0x234>
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	2b22      	cmp	r3, #34	; 0x22
 80058d2:	d10d      	bne.n	80058f0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fe fffa 	bl	80048e4 <HAL_I2C_SlaveRxCpltCallback>
}
 80058f0:	bf00      	nop
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	080061e1 	.word	0x080061e1
 80058fc:	ffff0000 	.word	0xffff0000

08005900 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2b08      	cmp	r3, #8
 800591a:	d002      	beq.n	8005922 <I2C_Slave_AF+0x22>
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b20      	cmp	r3, #32
 8005920:	d129      	bne.n	8005976 <I2C_Slave_AF+0x76>
 8005922:	7bfb      	ldrb	r3, [r7, #15]
 8005924:	2b28      	cmp	r3, #40	; 0x28
 8005926:	d126      	bne.n	8005976 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a2c      	ldr	r2, [pc, #176]	; (80059dc <I2C_Slave_AF+0xdc>)
 800592c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800593c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005946:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005956:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fe ffd0 	bl	8004914 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005974:	e02e      	b.n	80059d4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	2b21      	cmp	r3, #33	; 0x21
 800597a:	d126      	bne.n	80059ca <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a17      	ldr	r2, [pc, #92]	; (80059dc <I2C_Slave_AF+0xdc>)
 8005980:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2221      	movs	r2, #33	; 0x21
 8005986:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059a6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059b0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7fe ff84 	bl	80048d0 <HAL_I2C_SlaveTxCpltCallback>
}
 80059c8:	e004      	b.n	80059d4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059d2:	615a      	str	r2, [r3, #20]
}
 80059d4:	bf00      	nop
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	ffff0000 	.word	0xffff0000

080059e0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80059f8:	7bbb      	ldrb	r3, [r7, #14]
 80059fa:	2b10      	cmp	r3, #16
 80059fc:	d002      	beq.n	8005a04 <I2C_ITError+0x24>
 80059fe:	7bbb      	ldrb	r3, [r7, #14]
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	d10a      	bne.n	8005a1a <I2C_ITError+0x3a>
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
 8005a06:	2b22      	cmp	r3, #34	; 0x22
 8005a08:	d107      	bne.n	8005a1a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a18:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a20:	2b28      	cmp	r3, #40	; 0x28
 8005a22:	d107      	bne.n	8005a34 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2228      	movs	r2, #40	; 0x28
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a32:	e015      	b.n	8005a60 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a42:	d00a      	beq.n	8005a5a <I2C_ITError+0x7a>
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
 8005a46:	2b60      	cmp	r3, #96	; 0x60
 8005a48:	d007      	beq.n	8005a5a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a6e:	d162      	bne.n	8005b36 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a7e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d020      	beq.n	8005ad0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a92:	4a6a      	ldr	r2, [pc, #424]	; (8005c3c <I2C_ITError+0x25c>)
 8005a94:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fd fa2c 	bl	8002ef8 <HAL_DMA_Abort_IT>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 8089 	beq.w	8005bba <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0201 	bic.w	r2, r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005aca:	4610      	mov	r0, r2
 8005acc:	4798      	blx	r3
 8005ace:	e074      	b.n	8005bba <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	4a59      	ldr	r2, [pc, #356]	; (8005c3c <I2C_ITError+0x25c>)
 8005ad6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fd fa0b 	bl	8002ef8 <HAL_DMA_Abort_IT>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d068      	beq.n	8005bba <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af2:	2b40      	cmp	r3, #64	; 0x40
 8005af4:	d10b      	bne.n	8005b0e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	691a      	ldr	r2, [r3, #16]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0201 	bic.w	r2, r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b30:	4610      	mov	r0, r2
 8005b32:	4798      	blx	r3
 8005b34:	e041      	b.n	8005bba <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b60      	cmp	r3, #96	; 0x60
 8005b40:	d125      	bne.n	8005b8e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5a:	2b40      	cmp	r3, #64	; 0x40
 8005b5c:	d10b      	bne.n	8005b76 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0201 	bic.w	r2, r2, #1
 8005b84:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fe feec 	bl	8004964 <HAL_I2C_AbortCpltCallback>
 8005b8c:	e015      	b.n	8005bba <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b98:	2b40      	cmp	r3, #64	; 0x40
 8005b9a:	d10b      	bne.n	8005bb4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	691a      	ldr	r2, [r3, #16]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7fe fecb 	bl	8004950 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10e      	bne.n	8005be8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d109      	bne.n	8005be8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d104      	bne.n	8005be8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d007      	beq.n	8005bf8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bf6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d113      	bne.n	8005c34 <I2C_ITError+0x254>
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	2b28      	cmp	r3, #40	; 0x28
 8005c10:	d110      	bne.n	8005c34 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a0a      	ldr	r2, [pc, #40]	; (8005c40 <I2C_ITError+0x260>)
 8005c16:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7fe fe70 	bl	8004914 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c34:	bf00      	nop
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	080061e1 	.word	0x080061e1
 8005c40:	ffff0000 	.word	0xffff0000

08005c44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	607a      	str	r2, [r7, #4]
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	460b      	mov	r3, r1
 8005c52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d006      	beq.n	8005c6e <I2C_MasterRequestWrite+0x2a>
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d003      	beq.n	8005c6e <I2C_MasterRequestWrite+0x2a>
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c6c:	d108      	bne.n	8005c80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	e00b      	b.n	8005c98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c84:	2b12      	cmp	r3, #18
 8005c86:	d107      	bne.n	8005c98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 fb43 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00d      	beq.n	8005ccc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cbe:	d103      	bne.n	8005cc8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e035      	b.n	8005d38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cd4:	d108      	bne.n	8005ce8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cd6:	897b      	ldrh	r3, [r7, #10]
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	461a      	mov	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ce4:	611a      	str	r2, [r3, #16]
 8005ce6:	e01b      	b.n	8005d20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ce8:	897b      	ldrh	r3, [r7, #10]
 8005cea:	11db      	asrs	r3, r3, #7
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	f003 0306 	and.w	r3, r3, #6
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	f063 030f 	orn	r3, r3, #15
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	490e      	ldr	r1, [pc, #56]	; (8005d40 <I2C_MasterRequestWrite+0xfc>)
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 fb69 	bl	80063de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e010      	b.n	8005d38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d16:	897b      	ldrh	r3, [r7, #10]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	4907      	ldr	r1, [pc, #28]	; (8005d44 <I2C_MasterRequestWrite+0x100>)
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 fb59 	bl	80063de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e000      	b.n	8005d38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	00010008 	.word	0x00010008
 8005d44:	00010002 	.word	0x00010002

08005d48 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af02      	add	r7, sp, #8
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	607a      	str	r2, [r7, #4]
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	460b      	mov	r3, r1
 8005d56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d6c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d006      	beq.n	8005d82 <I2C_MasterRequestRead+0x3a>
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d003      	beq.n	8005d82 <I2C_MasterRequestRead+0x3a>
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d80:	d108      	bne.n	8005d94 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	e00b      	b.n	8005dac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d98:	2b11      	cmp	r3, #17
 8005d9a:	d107      	bne.n	8005dac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005daa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 fab9 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00d      	beq.n	8005de0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dd2:	d103      	bne.n	8005ddc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e079      	b.n	8005ed4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005de8:	d108      	bne.n	8005dfc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005dea:	897b      	ldrh	r3, [r7, #10]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	f043 0301 	orr.w	r3, r3, #1
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	611a      	str	r2, [r3, #16]
 8005dfa:	e05f      	b.n	8005ebc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005dfc:	897b      	ldrh	r3, [r7, #10]
 8005dfe:	11db      	asrs	r3, r3, #7
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	f003 0306 	and.w	r3, r3, #6
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	f063 030f 	orn	r3, r3, #15
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	4930      	ldr	r1, [pc, #192]	; (8005edc <I2C_MasterRequestRead+0x194>)
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 fadf 	bl	80063de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e054      	b.n	8005ed4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e2a:	897b      	ldrh	r3, [r7, #10]
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	4929      	ldr	r1, [pc, #164]	; (8005ee0 <I2C_MasterRequestRead+0x198>)
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 facf 	bl	80063de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e044      	b.n	8005ed4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	613b      	str	r3, [r7, #16]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	613b      	str	r3, [r7, #16]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	613b      	str	r3, [r7, #16]
 8005e5e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e6e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fa57 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00d      	beq.n	8005ea4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e96:	d103      	bne.n	8005ea0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e9e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e017      	b.n	8005ed4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005ea4:	897b      	ldrh	r3, [r7, #10]
 8005ea6:	11db      	asrs	r3, r3, #7
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	f003 0306 	and.w	r3, r3, #6
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	f063 030e 	orn	r3, r3, #14
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	4907      	ldr	r1, [pc, #28]	; (8005ee0 <I2C_MasterRequestRead+0x198>)
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 fa8b 	bl	80063de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e000      	b.n	8005ed4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	00010008 	.word	0x00010008
 8005ee0:	00010002 	.word	0x00010002

08005ee4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b088      	sub	sp, #32
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	4608      	mov	r0, r1
 8005eee:	4611      	mov	r1, r2
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	817b      	strh	r3, [r7, #10]
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	813b      	strh	r3, [r7, #8]
 8005efa:	4613      	mov	r3, r2
 8005efc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 fa08 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00d      	beq.n	8005f42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f34:	d103      	bne.n	8005f3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e05f      	b.n	8006002 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f42:	897b      	ldrh	r3, [r7, #10]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	461a      	mov	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	6a3a      	ldr	r2, [r7, #32]
 8005f56:	492d      	ldr	r1, [pc, #180]	; (800600c <I2C_RequestMemoryWrite+0x128>)
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 fa40 	bl	80063de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e04c      	b.n	8006002 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f68:	2300      	movs	r3, #0
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f80:	6a39      	ldr	r1, [r7, #32]
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 faaa 	bl	80064dc <I2C_WaitOnTXEFlagUntilTimeout>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00d      	beq.n	8005faa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d107      	bne.n	8005fa6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e02b      	b.n	8006002 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005faa:	88fb      	ldrh	r3, [r7, #6]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d105      	bne.n	8005fbc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fb0:	893b      	ldrh	r3, [r7, #8]
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	611a      	str	r2, [r3, #16]
 8005fba:	e021      	b.n	8006000 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fbc:	893b      	ldrh	r3, [r7, #8]
 8005fbe:	0a1b      	lsrs	r3, r3, #8
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fcc:	6a39      	ldr	r1, [r7, #32]
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 fa84 	bl	80064dc <I2C_WaitOnTXEFlagUntilTimeout>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00d      	beq.n	8005ff6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d107      	bne.n	8005ff2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ff0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e005      	b.n	8006002 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ff6:	893b      	ldrh	r3, [r7, #8]
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	00010002 	.word	0x00010002

08006010 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af02      	add	r7, sp, #8
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	4608      	mov	r0, r1
 800601a:	4611      	mov	r1, r2
 800601c:	461a      	mov	r2, r3
 800601e:	4603      	mov	r3, r0
 8006020:	817b      	strh	r3, [r7, #10]
 8006022:	460b      	mov	r3, r1
 8006024:	813b      	strh	r3, [r7, #8]
 8006026:	4613      	mov	r3, r2
 8006028:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006038:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006048:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	2200      	movs	r2, #0
 8006052:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 f96a 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00d      	beq.n	800607e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006070:	d103      	bne.n	800607a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006078:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e0aa      	b.n	80061d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800607e:	897b      	ldrh	r3, [r7, #10]
 8006080:	b2db      	uxtb	r3, r3
 8006082:	461a      	mov	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800608c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	6a3a      	ldr	r2, [r7, #32]
 8006092:	4952      	ldr	r1, [pc, #328]	; (80061dc <I2C_RequestMemoryRead+0x1cc>)
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 f9a2 	bl	80063de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e097      	b.n	80061d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060a4:	2300      	movs	r3, #0
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	617b      	str	r3, [r7, #20]
 80060b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060bc:	6a39      	ldr	r1, [r7, #32]
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 fa0c 	bl	80064dc <I2C_WaitOnTXEFlagUntilTimeout>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00d      	beq.n	80060e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d107      	bne.n	80060e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e076      	b.n	80061d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060e6:	88fb      	ldrh	r3, [r7, #6]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d105      	bne.n	80060f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060ec:	893b      	ldrh	r3, [r7, #8]
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	611a      	str	r2, [r3, #16]
 80060f6:	e021      	b.n	800613c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80060f8:	893b      	ldrh	r3, [r7, #8]
 80060fa:	0a1b      	lsrs	r3, r3, #8
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006108:	6a39      	ldr	r1, [r7, #32]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 f9e6 	bl	80064dc <I2C_WaitOnTXEFlagUntilTimeout>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00d      	beq.n	8006132 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	2b04      	cmp	r3, #4
 800611c:	d107      	bne.n	800612e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800612c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e050      	b.n	80061d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006132:	893b      	ldrh	r3, [r7, #8]
 8006134:	b2da      	uxtb	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800613c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800613e:	6a39      	ldr	r1, [r7, #32]
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 f9cb 	bl	80064dc <I2C_WaitOnTXEFlagUntilTimeout>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00d      	beq.n	8006168 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006150:	2b04      	cmp	r3, #4
 8006152:	d107      	bne.n	8006164 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006162:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e035      	b.n	80061d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006176:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	2200      	movs	r2, #0
 8006180:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 f8d3 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00d      	beq.n	80061ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800619a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800619e:	d103      	bne.n	80061a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e013      	b.n	80061d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80061ac:	897b      	ldrh	r3, [r7, #10]
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	f043 0301 	orr.w	r3, r3, #1
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	6a3a      	ldr	r2, [r7, #32]
 80061c0:	4906      	ldr	r1, [pc, #24]	; (80061dc <I2C_RequestMemoryRead+0x1cc>)
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 f90b 	bl	80063de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e000      	b.n	80061d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	00010002 	.word	0x00010002

080061e0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80061fa:	4b4b      	ldr	r3, [pc, #300]	; (8006328 <I2C_DMAAbort+0x148>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	08db      	lsrs	r3, r3, #3
 8006200:	4a4a      	ldr	r2, [pc, #296]	; (800632c <I2C_DMAAbort+0x14c>)
 8006202:	fba2 2303 	umull	r2, r3, r2, r3
 8006206:	0a1a      	lsrs	r2, r3, #8
 8006208:	4613      	mov	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	00da      	lsls	r2, r3, #3
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d106      	bne.n	8006228 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	f043 0220 	orr.w	r2, r3, #32
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006226:	e00a      	b.n	800623e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	3b01      	subs	r3, #1
 800622c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800623c:	d0ea      	beq.n	8006214 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624a:	2200      	movs	r2, #0
 800624c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625a:	2200      	movs	r2, #0
 800625c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800626c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2200      	movs	r2, #0
 8006272:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006280:	2200      	movs	r2, #0
 8006282:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006290:	2200      	movs	r2, #0
 8006292:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 0201 	bic.w	r2, r2, #1
 80062a2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b60      	cmp	r3, #96	; 0x60
 80062ae:	d10e      	bne.n	80062ce <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	2220      	movs	r2, #32
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	2200      	movs	r2, #0
 80062c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80062c6:	6978      	ldr	r0, [r7, #20]
 80062c8:	f7fe fb4c 	bl	8004964 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80062cc:	e027      	b.n	800631e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062ce:	7cfb      	ldrb	r3, [r7, #19]
 80062d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062d4:	2b28      	cmp	r3, #40	; 0x28
 80062d6:	d117      	bne.n	8006308 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0201 	orr.w	r2, r2, #1
 80062e6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	2200      	movs	r2, #0
 80062fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2228      	movs	r2, #40	; 0x28
 8006302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006306:	e007      	b.n	8006318 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006318:	6978      	ldr	r0, [r7, #20]
 800631a:	f7fe fb19 	bl	8004950 <HAL_I2C_ErrorCallback>
}
 800631e:	bf00      	nop
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20000000 	.word	0x20000000
 800632c:	14f8b589 	.word	0x14f8b589

08006330 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	603b      	str	r3, [r7, #0]
 800633c:	4613      	mov	r3, r2
 800633e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006340:	e025      	b.n	800638e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006348:	d021      	beq.n	800638e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800634a:	f7fc fc53 	bl	8002bf4 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	429a      	cmp	r2, r3
 8006358:	d302      	bcc.n	8006360 <I2C_WaitOnFlagUntilTimeout+0x30>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d116      	bne.n	800638e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2220      	movs	r2, #32
 800636a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	f043 0220 	orr.w	r2, r3, #32
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e023      	b.n	80063d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	0c1b      	lsrs	r3, r3, #16
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b01      	cmp	r3, #1
 8006396:	d10d      	bne.n	80063b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	43da      	mvns	r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4013      	ands	r3, r2
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bf0c      	ite	eq
 80063aa:	2301      	moveq	r3, #1
 80063ac:	2300      	movne	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	461a      	mov	r2, r3
 80063b2:	e00c      	b.n	80063ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	43da      	mvns	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4013      	ands	r3, r2
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	bf0c      	ite	eq
 80063c6:	2301      	moveq	r3, #1
 80063c8:	2300      	movne	r3, #0
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	461a      	mov	r2, r3
 80063ce:	79fb      	ldrb	r3, [r7, #7]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d0b6      	beq.n	8006342 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b084      	sub	sp, #16
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	60f8      	str	r0, [r7, #12]
 80063e6:	60b9      	str	r1, [r7, #8]
 80063e8:	607a      	str	r2, [r7, #4]
 80063ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063ec:	e051      	b.n	8006492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063fc:	d123      	bne.n	8006446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800640c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006416:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2220      	movs	r2, #32
 8006422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	f043 0204 	orr.w	r2, r3, #4
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e046      	b.n	80064d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800644c:	d021      	beq.n	8006492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644e:	f7fc fbd1 	bl	8002bf4 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	429a      	cmp	r2, r3
 800645c:	d302      	bcc.n	8006464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d116      	bne.n	8006492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2220      	movs	r2, #32
 800646e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	f043 0220 	orr.w	r2, r3, #32
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e020      	b.n	80064d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	0c1b      	lsrs	r3, r3, #16
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b01      	cmp	r3, #1
 800649a:	d10c      	bne.n	80064b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	43da      	mvns	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	4013      	ands	r3, r2
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	bf14      	ite	ne
 80064ae:	2301      	movne	r3, #1
 80064b0:	2300      	moveq	r3, #0
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	e00b      	b.n	80064ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	43da      	mvns	r2, r3
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	4013      	ands	r3, r2
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	bf14      	ite	ne
 80064c8:	2301      	movne	r3, #1
 80064ca:	2300      	moveq	r3, #0
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d18d      	bne.n	80063ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064e8:	e02d      	b.n	8006546 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 f900 	bl	80066f0 <I2C_IsAcknowledgeFailed>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e02d      	b.n	8006556 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006500:	d021      	beq.n	8006546 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006502:	f7fc fb77 	bl	8002bf4 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	429a      	cmp	r2, r3
 8006510:	d302      	bcc.n	8006518 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d116      	bne.n	8006546 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2220      	movs	r2, #32
 8006522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f043 0220 	orr.w	r2, r3, #32
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e007      	b.n	8006556 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006550:	2b80      	cmp	r3, #128	; 0x80
 8006552:	d1ca      	bne.n	80064ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	60f8      	str	r0, [r7, #12]
 8006566:	60b9      	str	r1, [r7, #8]
 8006568:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800656a:	e02d      	b.n	80065c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 f8bf 	bl	80066f0 <I2C_IsAcknowledgeFailed>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e02d      	b.n	80065d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006582:	d021      	beq.n	80065c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006584:	f7fc fb36 	bl	8002bf4 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	429a      	cmp	r2, r3
 8006592:	d302      	bcc.n	800659a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d116      	bne.n	80065c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b4:	f043 0220 	orr.w	r2, r3, #32
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e007      	b.n	80065d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	f003 0304 	and.w	r3, r3, #4
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d1ca      	bne.n	800656c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80065ec:	4b13      	ldr	r3, [pc, #76]	; (800663c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	08db      	lsrs	r3, r3, #3
 80065f2:	4a13      	ldr	r2, [pc, #76]	; (8006640 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80065f4:	fba2 2303 	umull	r2, r3, r2, r3
 80065f8:	0a1a      	lsrs	r2, r3, #8
 80065fa:	4613      	mov	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3b01      	subs	r3, #1
 8006606:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d107      	bne.n	800661e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	f043 0220 	orr.w	r2, r3, #32
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e008      	b.n	8006630 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800662c:	d0e9      	beq.n	8006602 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	20000000 	.word	0x20000000
 8006640:	14f8b589 	.word	0x14f8b589

08006644 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006650:	e042      	b.n	80066d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	f003 0310 	and.w	r3, r3, #16
 800665c:	2b10      	cmp	r3, #16
 800665e:	d119      	bne.n	8006694 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f06f 0210 	mvn.w	r2, #16
 8006668:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2220      	movs	r2, #32
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e029      	b.n	80066e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006694:	f7fc faae 	bl	8002bf4 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d302      	bcc.n	80066aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d116      	bne.n	80066d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c4:	f043 0220 	orr.w	r2, r3, #32
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e007      	b.n	80066e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e2:	2b40      	cmp	r3, #64	; 0x40
 80066e4:	d1b5      	bne.n	8006652 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006706:	d11b      	bne.n	8006740 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006710:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2220      	movs	r2, #32
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672c:	f043 0204 	orr.w	r2, r3, #4
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e000      	b.n	8006742 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800675e:	d103      	bne.n	8006768 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006766:	e007      	b.n	8006778 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006770:	d102      	bne.n	8006778 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2208      	movs	r2, #8
 8006776:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e267      	b.n	8006c66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d075      	beq.n	800688e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067a2:	4b88      	ldr	r3, [pc, #544]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f003 030c 	and.w	r3, r3, #12
 80067aa:	2b04      	cmp	r3, #4
 80067ac:	d00c      	beq.n	80067c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067ae:	4b85      	ldr	r3, [pc, #532]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067b6:	2b08      	cmp	r3, #8
 80067b8:	d112      	bne.n	80067e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067ba:	4b82      	ldr	r3, [pc, #520]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067c6:	d10b      	bne.n	80067e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c8:	4b7e      	ldr	r3, [pc, #504]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d05b      	beq.n	800688c <HAL_RCC_OscConfig+0x108>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d157      	bne.n	800688c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e242      	b.n	8006c66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e8:	d106      	bne.n	80067f8 <HAL_RCC_OscConfig+0x74>
 80067ea:	4b76      	ldr	r3, [pc, #472]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a75      	ldr	r2, [pc, #468]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 80067f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067f4:	6013      	str	r3, [r2, #0]
 80067f6:	e01d      	b.n	8006834 <HAL_RCC_OscConfig+0xb0>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006800:	d10c      	bne.n	800681c <HAL_RCC_OscConfig+0x98>
 8006802:	4b70      	ldr	r3, [pc, #448]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a6f      	ldr	r2, [pc, #444]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 8006808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800680c:	6013      	str	r3, [r2, #0]
 800680e:	4b6d      	ldr	r3, [pc, #436]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a6c      	ldr	r2, [pc, #432]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 8006814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006818:	6013      	str	r3, [r2, #0]
 800681a:	e00b      	b.n	8006834 <HAL_RCC_OscConfig+0xb0>
 800681c:	4b69      	ldr	r3, [pc, #420]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a68      	ldr	r2, [pc, #416]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 8006822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	4b66      	ldr	r3, [pc, #408]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a65      	ldr	r2, [pc, #404]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 800682e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d013      	beq.n	8006864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800683c:	f7fc f9da 	bl	8002bf4 <HAL_GetTick>
 8006840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006844:	f7fc f9d6 	bl	8002bf4 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b64      	cmp	r3, #100	; 0x64
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e207      	b.n	8006c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006856:	4b5b      	ldr	r3, [pc, #364]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d0f0      	beq.n	8006844 <HAL_RCC_OscConfig+0xc0>
 8006862:	e014      	b.n	800688e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006864:	f7fc f9c6 	bl	8002bf4 <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800686c:	f7fc f9c2 	bl	8002bf4 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b64      	cmp	r3, #100	; 0x64
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e1f3      	b.n	8006c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800687e:	4b51      	ldr	r3, [pc, #324]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1f0      	bne.n	800686c <HAL_RCC_OscConfig+0xe8>
 800688a:	e000      	b.n	800688e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800688c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d063      	beq.n	8006962 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800689a:	4b4a      	ldr	r3, [pc, #296]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f003 030c 	and.w	r3, r3, #12
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00b      	beq.n	80068be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068a6:	4b47      	ldr	r3, [pc, #284]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068ae:	2b08      	cmp	r3, #8
 80068b0:	d11c      	bne.n	80068ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068b2:	4b44      	ldr	r3, [pc, #272]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d116      	bne.n	80068ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068be:	4b41      	ldr	r3, [pc, #260]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d005      	beq.n	80068d6 <HAL_RCC_OscConfig+0x152>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d001      	beq.n	80068d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e1c7      	b.n	8006c66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068d6:	4b3b      	ldr	r3, [pc, #236]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	4937      	ldr	r1, [pc, #220]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068ea:	e03a      	b.n	8006962 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d020      	beq.n	8006936 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068f4:	4b34      	ldr	r3, [pc, #208]	; (80069c8 <HAL_RCC_OscConfig+0x244>)
 80068f6:	2201      	movs	r2, #1
 80068f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068fa:	f7fc f97b 	bl	8002bf4 <HAL_GetTick>
 80068fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006900:	e008      	b.n	8006914 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006902:	f7fc f977 	bl	8002bf4 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	2b02      	cmp	r3, #2
 800690e:	d901      	bls.n	8006914 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e1a8      	b.n	8006c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006914:	4b2b      	ldr	r3, [pc, #172]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d0f0      	beq.n	8006902 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006920:	4b28      	ldr	r3, [pc, #160]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	00db      	lsls	r3, r3, #3
 800692e:	4925      	ldr	r1, [pc, #148]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 8006930:	4313      	orrs	r3, r2
 8006932:	600b      	str	r3, [r1, #0]
 8006934:	e015      	b.n	8006962 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006936:	4b24      	ldr	r3, [pc, #144]	; (80069c8 <HAL_RCC_OscConfig+0x244>)
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800693c:	f7fc f95a 	bl	8002bf4 <HAL_GetTick>
 8006940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006942:	e008      	b.n	8006956 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006944:	f7fc f956 	bl	8002bf4 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b02      	cmp	r3, #2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e187      	b.n	8006c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006956:	4b1b      	ldr	r3, [pc, #108]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0302 	and.w	r3, r3, #2
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1f0      	bne.n	8006944 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0308 	and.w	r3, r3, #8
 800696a:	2b00      	cmp	r3, #0
 800696c:	d036      	beq.n	80069dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d016      	beq.n	80069a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006976:	4b15      	ldr	r3, [pc, #84]	; (80069cc <HAL_RCC_OscConfig+0x248>)
 8006978:	2201      	movs	r2, #1
 800697a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800697c:	f7fc f93a 	bl	8002bf4 <HAL_GetTick>
 8006980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006982:	e008      	b.n	8006996 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006984:	f7fc f936 	bl	8002bf4 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b02      	cmp	r3, #2
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e167      	b.n	8006c66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006996:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <HAL_RCC_OscConfig+0x240>)
 8006998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d0f0      	beq.n	8006984 <HAL_RCC_OscConfig+0x200>
 80069a2:	e01b      	b.n	80069dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069a4:	4b09      	ldr	r3, [pc, #36]	; (80069cc <HAL_RCC_OscConfig+0x248>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069aa:	f7fc f923 	bl	8002bf4 <HAL_GetTick>
 80069ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069b0:	e00e      	b.n	80069d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069b2:	f7fc f91f 	bl	8002bf4 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d907      	bls.n	80069d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e150      	b.n	8006c66 <HAL_RCC_OscConfig+0x4e2>
 80069c4:	40023800 	.word	0x40023800
 80069c8:	42470000 	.word	0x42470000
 80069cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069d0:	4b88      	ldr	r3, [pc, #544]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 80069d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1ea      	bne.n	80069b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0304 	and.w	r3, r3, #4
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 8097 	beq.w	8006b18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069ea:	2300      	movs	r3, #0
 80069ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069ee:	4b81      	ldr	r3, [pc, #516]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 80069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10f      	bne.n	8006a1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069fa:	2300      	movs	r3, #0
 80069fc:	60bb      	str	r3, [r7, #8]
 80069fe:	4b7d      	ldr	r3, [pc, #500]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	4a7c      	ldr	r2, [pc, #496]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a08:	6413      	str	r3, [r2, #64]	; 0x40
 8006a0a:	4b7a      	ldr	r3, [pc, #488]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a12:	60bb      	str	r3, [r7, #8]
 8006a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a16:	2301      	movs	r3, #1
 8006a18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a1a:	4b77      	ldr	r3, [pc, #476]	; (8006bf8 <HAL_RCC_OscConfig+0x474>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d118      	bne.n	8006a58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a26:	4b74      	ldr	r3, [pc, #464]	; (8006bf8 <HAL_RCC_OscConfig+0x474>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a73      	ldr	r2, [pc, #460]	; (8006bf8 <HAL_RCC_OscConfig+0x474>)
 8006a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a32:	f7fc f8df 	bl	8002bf4 <HAL_GetTick>
 8006a36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a38:	e008      	b.n	8006a4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a3a:	f7fc f8db 	bl	8002bf4 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d901      	bls.n	8006a4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e10c      	b.n	8006c66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a4c:	4b6a      	ldr	r3, [pc, #424]	; (8006bf8 <HAL_RCC_OscConfig+0x474>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0f0      	beq.n	8006a3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d106      	bne.n	8006a6e <HAL_RCC_OscConfig+0x2ea>
 8006a60:	4b64      	ldr	r3, [pc, #400]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a64:	4a63      	ldr	r2, [pc, #396]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006a66:	f043 0301 	orr.w	r3, r3, #1
 8006a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a6c:	e01c      	b.n	8006aa8 <HAL_RCC_OscConfig+0x324>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	2b05      	cmp	r3, #5
 8006a74:	d10c      	bne.n	8006a90 <HAL_RCC_OscConfig+0x30c>
 8006a76:	4b5f      	ldr	r3, [pc, #380]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7a:	4a5e      	ldr	r2, [pc, #376]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006a7c:	f043 0304 	orr.w	r3, r3, #4
 8006a80:	6713      	str	r3, [r2, #112]	; 0x70
 8006a82:	4b5c      	ldr	r3, [pc, #368]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a86:	4a5b      	ldr	r2, [pc, #364]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006a88:	f043 0301 	orr.w	r3, r3, #1
 8006a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a8e:	e00b      	b.n	8006aa8 <HAL_RCC_OscConfig+0x324>
 8006a90:	4b58      	ldr	r3, [pc, #352]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a94:	4a57      	ldr	r2, [pc, #348]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006a96:	f023 0301 	bic.w	r3, r3, #1
 8006a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a9c:	4b55      	ldr	r3, [pc, #340]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa0:	4a54      	ldr	r2, [pc, #336]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006aa2:	f023 0304 	bic.w	r3, r3, #4
 8006aa6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d015      	beq.n	8006adc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ab0:	f7fc f8a0 	bl	8002bf4 <HAL_GetTick>
 8006ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ab6:	e00a      	b.n	8006ace <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ab8:	f7fc f89c 	bl	8002bf4 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e0cb      	b.n	8006c66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ace:	4b49      	ldr	r3, [pc, #292]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d0ee      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x334>
 8006ada:	e014      	b.n	8006b06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006adc:	f7fc f88a 	bl	8002bf4 <HAL_GetTick>
 8006ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ae2:	e00a      	b.n	8006afa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ae4:	f7fc f886 	bl	8002bf4 <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d901      	bls.n	8006afa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e0b5      	b.n	8006c66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006afa:	4b3e      	ldr	r3, [pc, #248]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1ee      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b06:	7dfb      	ldrb	r3, [r7, #23]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d105      	bne.n	8006b18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b0c:	4b39      	ldr	r3, [pc, #228]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b10:	4a38      	ldr	r2, [pc, #224]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 80a1 	beq.w	8006c64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b22:	4b34      	ldr	r3, [pc, #208]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f003 030c 	and.w	r3, r3, #12
 8006b2a:	2b08      	cmp	r3, #8
 8006b2c:	d05c      	beq.n	8006be8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d141      	bne.n	8006bba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b36:	4b31      	ldr	r3, [pc, #196]	; (8006bfc <HAL_RCC_OscConfig+0x478>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b3c:	f7fc f85a 	bl	8002bf4 <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b44:	f7fc f856 	bl	8002bf4 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e087      	b.n	8006c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b56:	4b27      	ldr	r3, [pc, #156]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1f0      	bne.n	8006b44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	69da      	ldr	r2, [r3, #28]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b70:	019b      	lsls	r3, r3, #6
 8006b72:	431a      	orrs	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b78:	085b      	lsrs	r3, r3, #1
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	041b      	lsls	r3, r3, #16
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b84:	061b      	lsls	r3, r3, #24
 8006b86:	491b      	ldr	r1, [pc, #108]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b8c:	4b1b      	ldr	r3, [pc, #108]	; (8006bfc <HAL_RCC_OscConfig+0x478>)
 8006b8e:	2201      	movs	r2, #1
 8006b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b92:	f7fc f82f 	bl	8002bf4 <HAL_GetTick>
 8006b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b98:	e008      	b.n	8006bac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b9a:	f7fc f82b 	bl	8002bf4 <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d901      	bls.n	8006bac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e05c      	b.n	8006c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bac:	4b11      	ldr	r3, [pc, #68]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d0f0      	beq.n	8006b9a <HAL_RCC_OscConfig+0x416>
 8006bb8:	e054      	b.n	8006c64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bba:	4b10      	ldr	r3, [pc, #64]	; (8006bfc <HAL_RCC_OscConfig+0x478>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc0:	f7fc f818 	bl	8002bf4 <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bc6:	e008      	b.n	8006bda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bc8:	f7fc f814 	bl	8002bf4 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e045      	b.n	8006c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bda:	4b06      	ldr	r3, [pc, #24]	; (8006bf4 <HAL_RCC_OscConfig+0x470>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1f0      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x444>
 8006be6:	e03d      	b.n	8006c64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d107      	bne.n	8006c00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e038      	b.n	8006c66 <HAL_RCC_OscConfig+0x4e2>
 8006bf4:	40023800 	.word	0x40023800
 8006bf8:	40007000 	.word	0x40007000
 8006bfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c00:	4b1b      	ldr	r3, [pc, #108]	; (8006c70 <HAL_RCC_OscConfig+0x4ec>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d028      	beq.n	8006c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d121      	bne.n	8006c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d11a      	bne.n	8006c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c30:	4013      	ands	r3, r2
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d111      	bne.n	8006c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c46:	085b      	lsrs	r3, r3, #1
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d107      	bne.n	8006c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d001      	beq.n	8006c64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e000      	b.n	8006c66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	40023800 	.word	0x40023800

08006c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d101      	bne.n	8006c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e0cc      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c88:	4b68      	ldr	r3, [pc, #416]	; (8006e2c <HAL_RCC_ClockConfig+0x1b8>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0307 	and.w	r3, r3, #7
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d90c      	bls.n	8006cb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c96:	4b65      	ldr	r3, [pc, #404]	; (8006e2c <HAL_RCC_ClockConfig+0x1b8>)
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c9e:	4b63      	ldr	r3, [pc, #396]	; (8006e2c <HAL_RCC_ClockConfig+0x1b8>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0307 	and.w	r3, r3, #7
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d001      	beq.n	8006cb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e0b8      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d020      	beq.n	8006cfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d005      	beq.n	8006cd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cc8:	4b59      	ldr	r3, [pc, #356]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	4a58      	ldr	r2, [pc, #352]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006cce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006cd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0308 	and.w	r3, r3, #8
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d005      	beq.n	8006cec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ce0:	4b53      	ldr	r3, [pc, #332]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	4a52      	ldr	r2, [pc, #328]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006cea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cec:	4b50      	ldr	r3, [pc, #320]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	494d      	ldr	r1, [pc, #308]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d044      	beq.n	8006d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d107      	bne.n	8006d22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d12:	4b47      	ldr	r3, [pc, #284]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d119      	bne.n	8006d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e07f      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d003      	beq.n	8006d32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d107      	bne.n	8006d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d32:	4b3f      	ldr	r3, [pc, #252]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d109      	bne.n	8006d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e06f      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d42:	4b3b      	ldr	r3, [pc, #236]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e067      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d52:	4b37      	ldr	r3, [pc, #220]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f023 0203 	bic.w	r2, r3, #3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	4934      	ldr	r1, [pc, #208]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d64:	f7fb ff46 	bl	8002bf4 <HAL_GetTick>
 8006d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d6a:	e00a      	b.n	8006d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d6c:	f7fb ff42 	bl	8002bf4 <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e04f      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d82:	4b2b      	ldr	r3, [pc, #172]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f003 020c 	and.w	r2, r3, #12
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d1eb      	bne.n	8006d6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d94:	4b25      	ldr	r3, [pc, #148]	; (8006e2c <HAL_RCC_ClockConfig+0x1b8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d20c      	bcs.n	8006dbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006da2:	4b22      	ldr	r3, [pc, #136]	; (8006e2c <HAL_RCC_ClockConfig+0x1b8>)
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006daa:	4b20      	ldr	r3, [pc, #128]	; (8006e2c <HAL_RCC_ClockConfig+0x1b8>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0307 	and.w	r3, r3, #7
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d001      	beq.n	8006dbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e032      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0304 	and.w	r3, r3, #4
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d008      	beq.n	8006dda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dc8:	4b19      	ldr	r3, [pc, #100]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	4916      	ldr	r1, [pc, #88]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0308 	and.w	r3, r3, #8
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d009      	beq.n	8006dfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006de6:	4b12      	ldr	r3, [pc, #72]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	490e      	ldr	r1, [pc, #56]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006dfa:	f000 f821 	bl	8006e40 <HAL_RCC_GetSysClockFreq>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	4b0b      	ldr	r3, [pc, #44]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	091b      	lsrs	r3, r3, #4
 8006e06:	f003 030f 	and.w	r3, r3, #15
 8006e0a:	490a      	ldr	r1, [pc, #40]	; (8006e34 <HAL_RCC_ClockConfig+0x1c0>)
 8006e0c:	5ccb      	ldrb	r3, [r1, r3]
 8006e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e12:	4a09      	ldr	r2, [pc, #36]	; (8006e38 <HAL_RCC_ClockConfig+0x1c4>)
 8006e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e16:	4b09      	ldr	r3, [pc, #36]	; (8006e3c <HAL_RCC_ClockConfig+0x1c8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fb fa7a 	bl	8002314 <HAL_InitTick>

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	40023c00 	.word	0x40023c00
 8006e30:	40023800 	.word	0x40023800
 8006e34:	0800dfd4 	.word	0x0800dfd4
 8006e38:	20000000 	.word	0x20000000
 8006e3c:	20000004 	.word	0x20000004

08006e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e44:	b094      	sub	sp, #80	; 0x50
 8006e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e50:	2300      	movs	r3, #0
 8006e52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e58:	4b79      	ldr	r3, [pc, #484]	; (8007040 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f003 030c 	and.w	r3, r3, #12
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d00d      	beq.n	8006e80 <HAL_RCC_GetSysClockFreq+0x40>
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	f200 80e1 	bhi.w	800702c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d002      	beq.n	8006e74 <HAL_RCC_GetSysClockFreq+0x34>
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d003      	beq.n	8006e7a <HAL_RCC_GetSysClockFreq+0x3a>
 8006e72:	e0db      	b.n	800702c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e74:	4b73      	ldr	r3, [pc, #460]	; (8007044 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006e78:	e0db      	b.n	8007032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e7a:	4b73      	ldr	r3, [pc, #460]	; (8007048 <HAL_RCC_GetSysClockFreq+0x208>)
 8006e7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e7e:	e0d8      	b.n	8007032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e80:	4b6f      	ldr	r3, [pc, #444]	; (8007040 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e8a:	4b6d      	ldr	r3, [pc, #436]	; (8007040 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d063      	beq.n	8006f5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e96:	4b6a      	ldr	r3, [pc, #424]	; (8007040 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	099b      	lsrs	r3, r3, #6
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ea0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8006eaa:	2300      	movs	r3, #0
 8006eac:	637b      	str	r3, [r7, #52]	; 0x34
 8006eae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006eb2:	4622      	mov	r2, r4
 8006eb4:	462b      	mov	r3, r5
 8006eb6:	f04f 0000 	mov.w	r0, #0
 8006eba:	f04f 0100 	mov.w	r1, #0
 8006ebe:	0159      	lsls	r1, r3, #5
 8006ec0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ec4:	0150      	lsls	r0, r2, #5
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4621      	mov	r1, r4
 8006ecc:	1a51      	subs	r1, r2, r1
 8006ece:	6139      	str	r1, [r7, #16]
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	eb63 0301 	sbc.w	r3, r3, r1
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	f04f 0200 	mov.w	r2, #0
 8006edc:	f04f 0300 	mov.w	r3, #0
 8006ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ee4:	4659      	mov	r1, fp
 8006ee6:	018b      	lsls	r3, r1, #6
 8006ee8:	4651      	mov	r1, sl
 8006eea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006eee:	4651      	mov	r1, sl
 8006ef0:	018a      	lsls	r2, r1, #6
 8006ef2:	4651      	mov	r1, sl
 8006ef4:	ebb2 0801 	subs.w	r8, r2, r1
 8006ef8:	4659      	mov	r1, fp
 8006efa:	eb63 0901 	sbc.w	r9, r3, r1
 8006efe:	f04f 0200 	mov.w	r2, #0
 8006f02:	f04f 0300 	mov.w	r3, #0
 8006f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f12:	4690      	mov	r8, r2
 8006f14:	4699      	mov	r9, r3
 8006f16:	4623      	mov	r3, r4
 8006f18:	eb18 0303 	adds.w	r3, r8, r3
 8006f1c:	60bb      	str	r3, [r7, #8]
 8006f1e:	462b      	mov	r3, r5
 8006f20:	eb49 0303 	adc.w	r3, r9, r3
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	f04f 0200 	mov.w	r2, #0
 8006f2a:	f04f 0300 	mov.w	r3, #0
 8006f2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f32:	4629      	mov	r1, r5
 8006f34:	024b      	lsls	r3, r1, #9
 8006f36:	4621      	mov	r1, r4
 8006f38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	024a      	lsls	r2, r1, #9
 8006f40:	4610      	mov	r0, r2
 8006f42:	4619      	mov	r1, r3
 8006f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f46:	2200      	movs	r2, #0
 8006f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f50:	f7f9 fe64 	bl	8000c1c <__aeabi_uldivmod>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4613      	mov	r3, r2
 8006f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f5c:	e058      	b.n	8007010 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f5e:	4b38      	ldr	r3, [pc, #224]	; (8007040 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	099b      	lsrs	r3, r3, #6
 8006f64:	2200      	movs	r2, #0
 8006f66:	4618      	mov	r0, r3
 8006f68:	4611      	mov	r1, r2
 8006f6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f6e:	623b      	str	r3, [r7, #32]
 8006f70:	2300      	movs	r3, #0
 8006f72:	627b      	str	r3, [r7, #36]	; 0x24
 8006f74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f78:	4642      	mov	r2, r8
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	f04f 0000 	mov.w	r0, #0
 8006f80:	f04f 0100 	mov.w	r1, #0
 8006f84:	0159      	lsls	r1, r3, #5
 8006f86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f8a:	0150      	lsls	r0, r2, #5
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4641      	mov	r1, r8
 8006f92:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f96:	4649      	mov	r1, r9
 8006f98:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006fa8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006fac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006fb0:	ebb2 040a 	subs.w	r4, r2, sl
 8006fb4:	eb63 050b 	sbc.w	r5, r3, fp
 8006fb8:	f04f 0200 	mov.w	r2, #0
 8006fbc:	f04f 0300 	mov.w	r3, #0
 8006fc0:	00eb      	lsls	r3, r5, #3
 8006fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fc6:	00e2      	lsls	r2, r4, #3
 8006fc8:	4614      	mov	r4, r2
 8006fca:	461d      	mov	r5, r3
 8006fcc:	4643      	mov	r3, r8
 8006fce:	18e3      	adds	r3, r4, r3
 8006fd0:	603b      	str	r3, [r7, #0]
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	eb45 0303 	adc.w	r3, r5, r3
 8006fd8:	607b      	str	r3, [r7, #4]
 8006fda:	f04f 0200 	mov.w	r2, #0
 8006fde:	f04f 0300 	mov.w	r3, #0
 8006fe2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	028b      	lsls	r3, r1, #10
 8006fea:	4621      	mov	r1, r4
 8006fec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	028a      	lsls	r2, r1, #10
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	61bb      	str	r3, [r7, #24]
 8006ffe:	61fa      	str	r2, [r7, #28]
 8007000:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007004:	f7f9 fe0a 	bl	8000c1c <__aeabi_uldivmod>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	4613      	mov	r3, r2
 800700e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007010:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <HAL_RCC_GetSysClockFreq+0x200>)
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	0c1b      	lsrs	r3, r3, #16
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	3301      	adds	r3, #1
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007020:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007024:	fbb2 f3f3 	udiv	r3, r2, r3
 8007028:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800702a:	e002      	b.n	8007032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800702c:	4b05      	ldr	r3, [pc, #20]	; (8007044 <HAL_RCC_GetSysClockFreq+0x204>)
 800702e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007034:	4618      	mov	r0, r3
 8007036:	3750      	adds	r7, #80	; 0x50
 8007038:	46bd      	mov	sp, r7
 800703a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800703e:	bf00      	nop
 8007040:	40023800 	.word	0x40023800
 8007044:	00f42400 	.word	0x00f42400
 8007048:	007a1200 	.word	0x007a1200

0800704c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800704c:	b480      	push	{r7}
 800704e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007050:	4b03      	ldr	r3, [pc, #12]	; (8007060 <HAL_RCC_GetHCLKFreq+0x14>)
 8007052:	681b      	ldr	r3, [r3, #0]
}
 8007054:	4618      	mov	r0, r3
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	20000000 	.word	0x20000000

08007064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007068:	f7ff fff0 	bl	800704c <HAL_RCC_GetHCLKFreq>
 800706c:	4602      	mov	r2, r0
 800706e:	4b05      	ldr	r3, [pc, #20]	; (8007084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	0a9b      	lsrs	r3, r3, #10
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	4903      	ldr	r1, [pc, #12]	; (8007088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800707a:	5ccb      	ldrb	r3, [r1, r3]
 800707c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007080:	4618      	mov	r0, r3
 8007082:	bd80      	pop	{r7, pc}
 8007084:	40023800 	.word	0x40023800
 8007088:	0800dfe4 	.word	0x0800dfe4

0800708c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007090:	f7ff ffdc 	bl	800704c <HAL_RCC_GetHCLKFreq>
 8007094:	4602      	mov	r2, r0
 8007096:	4b05      	ldr	r3, [pc, #20]	; (80070ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	0b5b      	lsrs	r3, r3, #13
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	4903      	ldr	r1, [pc, #12]	; (80070b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070a2:	5ccb      	ldrb	r3, [r1, r3]
 80070a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	40023800 	.word	0x40023800
 80070b0:	0800dfe4 	.word	0x0800dfe4

080070b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	220f      	movs	r2, #15
 80070c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80070c4:	4b12      	ldr	r3, [pc, #72]	; (8007110 <HAL_RCC_GetClockConfig+0x5c>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f003 0203 	and.w	r2, r3, #3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80070d0:	4b0f      	ldr	r3, [pc, #60]	; (8007110 <HAL_RCC_GetClockConfig+0x5c>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80070dc:	4b0c      	ldr	r3, [pc, #48]	; (8007110 <HAL_RCC_GetClockConfig+0x5c>)
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80070e8:	4b09      	ldr	r3, [pc, #36]	; (8007110 <HAL_RCC_GetClockConfig+0x5c>)
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	08db      	lsrs	r3, r3, #3
 80070ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80070f6:	4b07      	ldr	r3, [pc, #28]	; (8007114 <HAL_RCC_GetClockConfig+0x60>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0207 	and.w	r2, r3, #7
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	601a      	str	r2, [r3, #0]
}
 8007102:	bf00      	nop
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	40023800 	.word	0x40023800
 8007114:	40023c00 	.word	0x40023c00

08007118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e041      	b.n	80071ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b00      	cmp	r3, #0
 8007134:	d106      	bne.n	8007144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f839 	bl	80071b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3304      	adds	r3, #4
 8007154:	4619      	mov	r1, r3
 8007156:	4610      	mov	r0, r2
 8007158:	f000 fadc 	bl	8007714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80071be:	bf00      	nop
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
	...

080071cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d001      	beq.n	80071e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e044      	b.n	800726e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2202      	movs	r2, #2
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68da      	ldr	r2, [r3, #12]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f042 0201 	orr.w	r2, r2, #1
 80071fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a1e      	ldr	r2, [pc, #120]	; (800727c <HAL_TIM_Base_Start_IT+0xb0>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d018      	beq.n	8007238 <HAL_TIM_Base_Start_IT+0x6c>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800720e:	d013      	beq.n	8007238 <HAL_TIM_Base_Start_IT+0x6c>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a1a      	ldr	r2, [pc, #104]	; (8007280 <HAL_TIM_Base_Start_IT+0xb4>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d00e      	beq.n	8007238 <HAL_TIM_Base_Start_IT+0x6c>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a19      	ldr	r2, [pc, #100]	; (8007284 <HAL_TIM_Base_Start_IT+0xb8>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d009      	beq.n	8007238 <HAL_TIM_Base_Start_IT+0x6c>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a17      	ldr	r2, [pc, #92]	; (8007288 <HAL_TIM_Base_Start_IT+0xbc>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d004      	beq.n	8007238 <HAL_TIM_Base_Start_IT+0x6c>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a16      	ldr	r2, [pc, #88]	; (800728c <HAL_TIM_Base_Start_IT+0xc0>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d111      	bne.n	800725c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f003 0307 	and.w	r3, r3, #7
 8007242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2b06      	cmp	r3, #6
 8007248:	d010      	beq.n	800726c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f042 0201 	orr.w	r2, r2, #1
 8007258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800725a:	e007      	b.n	800726c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f042 0201 	orr.w	r2, r2, #1
 800726a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3714      	adds	r7, #20
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	40010000 	.word	0x40010000
 8007280:	40000400 	.word	0x40000400
 8007284:	40000800 	.word	0x40000800
 8007288:	40000c00 	.word	0x40000c00
 800728c:	40014000 	.word	0x40014000

08007290 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e041      	b.n	8007326 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d106      	bne.n	80072bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7fb fab0 	bl	800281c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3304      	adds	r3, #4
 80072cc:	4619      	mov	r1, r3
 80072ce:	4610      	mov	r0, r2
 80072d0:	f000 fa20 	bl	8007714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b082      	sub	sp, #8
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b02      	cmp	r3, #2
 8007342:	d122      	bne.n	800738a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b02      	cmp	r3, #2
 8007350:	d11b      	bne.n	800738a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f06f 0202 	mvn.w	r2, #2
 800735a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	f003 0303 	and.w	r3, r3, #3
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f9b1 	bl	80076d8 <HAL_TIM_IC_CaptureCallback>
 8007376:	e005      	b.n	8007384 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f9a3 	bl	80076c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f9b4 	bl	80076ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	f003 0304 	and.w	r3, r3, #4
 8007394:	2b04      	cmp	r3, #4
 8007396:	d122      	bne.n	80073de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f003 0304 	and.w	r3, r3, #4
 80073a2:	2b04      	cmp	r3, #4
 80073a4:	d11b      	bne.n	80073de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f06f 0204 	mvn.w	r2, #4
 80073ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d003      	beq.n	80073cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f987 	bl	80076d8 <HAL_TIM_IC_CaptureCallback>
 80073ca:	e005      	b.n	80073d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f979 	bl	80076c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f98a 	bl	80076ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	f003 0308 	and.w	r3, r3, #8
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d122      	bne.n	8007432 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f003 0308 	and.w	r3, r3, #8
 80073f6:	2b08      	cmp	r3, #8
 80073f8:	d11b      	bne.n	8007432 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f06f 0208 	mvn.w	r2, #8
 8007402:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2204      	movs	r2, #4
 8007408:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	f003 0303 	and.w	r3, r3, #3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d003      	beq.n	8007420 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f95d 	bl	80076d8 <HAL_TIM_IC_CaptureCallback>
 800741e:	e005      	b.n	800742c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f94f 	bl	80076c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f960 	bl	80076ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	f003 0310 	and.w	r3, r3, #16
 800743c:	2b10      	cmp	r3, #16
 800743e:	d122      	bne.n	8007486 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f003 0310 	and.w	r3, r3, #16
 800744a:	2b10      	cmp	r3, #16
 800744c:	d11b      	bne.n	8007486 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f06f 0210 	mvn.w	r2, #16
 8007456:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2208      	movs	r2, #8
 800745c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	69db      	ldr	r3, [r3, #28]
 8007464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007468:	2b00      	cmp	r3, #0
 800746a:	d003      	beq.n	8007474 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f933 	bl	80076d8 <HAL_TIM_IC_CaptureCallback>
 8007472:	e005      	b.n	8007480 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f925 	bl	80076c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f936 	bl	80076ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b01      	cmp	r3, #1
 8007492:	d10e      	bne.n	80074b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d107      	bne.n	80074b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f06f 0201 	mvn.w	r2, #1
 80074aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7fa fdf1 	bl	8002094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074bc:	2b80      	cmp	r3, #128	; 0x80
 80074be:	d10e      	bne.n	80074de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ca:	2b80      	cmp	r3, #128	; 0x80
 80074cc:	d107      	bne.n	80074de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fb9f 	bl	8007c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e8:	2b40      	cmp	r3, #64	; 0x40
 80074ea:	d10e      	bne.n	800750a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f6:	2b40      	cmp	r3, #64	; 0x40
 80074f8:	d107      	bne.n	800750a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f8fb 	bl	8007700 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	f003 0320 	and.w	r3, r3, #32
 8007514:	2b20      	cmp	r3, #32
 8007516:	d10e      	bne.n	8007536 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	f003 0320 	and.w	r3, r3, #32
 8007522:	2b20      	cmp	r3, #32
 8007524:	d107      	bne.n	8007536 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f06f 0220 	mvn.w	r2, #32
 800752e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fb69 	bl	8007c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007536:	bf00      	nop
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
	...

08007540 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007556:	2b01      	cmp	r3, #1
 8007558:	d101      	bne.n	800755e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800755a:	2302      	movs	r3, #2
 800755c:	e0ae      	b.n	80076bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2b0c      	cmp	r3, #12
 800756a:	f200 809f 	bhi.w	80076ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800756e:	a201      	add	r2, pc, #4	; (adr r2, 8007574 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007574:	080075a9 	.word	0x080075a9
 8007578:	080076ad 	.word	0x080076ad
 800757c:	080076ad 	.word	0x080076ad
 8007580:	080076ad 	.word	0x080076ad
 8007584:	080075e9 	.word	0x080075e9
 8007588:	080076ad 	.word	0x080076ad
 800758c:	080076ad 	.word	0x080076ad
 8007590:	080076ad 	.word	0x080076ad
 8007594:	0800762b 	.word	0x0800762b
 8007598:	080076ad 	.word	0x080076ad
 800759c:	080076ad 	.word	0x080076ad
 80075a0:	080076ad 	.word	0x080076ad
 80075a4:	0800766b 	.word	0x0800766b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68b9      	ldr	r1, [r7, #8]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 f930 	bl	8007814 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699a      	ldr	r2, [r3, #24]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f042 0208 	orr.w	r2, r2, #8
 80075c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	699a      	ldr	r2, [r3, #24]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 0204 	bic.w	r2, r2, #4
 80075d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6999      	ldr	r1, [r3, #24]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	691a      	ldr	r2, [r3, #16]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	619a      	str	r2, [r3, #24]
      break;
 80075e6:	e064      	b.n	80076b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68b9      	ldr	r1, [r7, #8]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 f976 	bl	80078e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	699a      	ldr	r2, [r3, #24]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	699a      	ldr	r2, [r3, #24]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6999      	ldr	r1, [r3, #24]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	021a      	lsls	r2, r3, #8
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	430a      	orrs	r2, r1
 8007626:	619a      	str	r2, [r3, #24]
      break;
 8007628:	e043      	b.n	80076b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68b9      	ldr	r1, [r7, #8]
 8007630:	4618      	mov	r0, r3
 8007632:	f000 f9c1 	bl	80079b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	69da      	ldr	r2, [r3, #28]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f042 0208 	orr.w	r2, r2, #8
 8007644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	69da      	ldr	r2, [r3, #28]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0204 	bic.w	r2, r2, #4
 8007654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	69d9      	ldr	r1, [r3, #28]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	691a      	ldr	r2, [r3, #16]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	430a      	orrs	r2, r1
 8007666:	61da      	str	r2, [r3, #28]
      break;
 8007668:	e023      	b.n	80076b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68b9      	ldr	r1, [r7, #8]
 8007670:	4618      	mov	r0, r3
 8007672:	f000 fa0b 	bl	8007a8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69da      	ldr	r2, [r3, #28]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	69da      	ldr	r2, [r3, #28]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	69d9      	ldr	r1, [r3, #28]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	021a      	lsls	r2, r3, #8
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	61da      	str	r2, [r3, #28]
      break;
 80076aa:	e002      	b.n	80076b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	75fb      	strb	r3, [r7, #23]
      break;
 80076b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a34      	ldr	r2, [pc, #208]	; (80077f8 <TIM_Base_SetConfig+0xe4>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d00f      	beq.n	800774c <TIM_Base_SetConfig+0x38>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007732:	d00b      	beq.n	800774c <TIM_Base_SetConfig+0x38>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a31      	ldr	r2, [pc, #196]	; (80077fc <TIM_Base_SetConfig+0xe8>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d007      	beq.n	800774c <TIM_Base_SetConfig+0x38>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a30      	ldr	r2, [pc, #192]	; (8007800 <TIM_Base_SetConfig+0xec>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d003      	beq.n	800774c <TIM_Base_SetConfig+0x38>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a2f      	ldr	r2, [pc, #188]	; (8007804 <TIM_Base_SetConfig+0xf0>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d108      	bne.n	800775e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	4313      	orrs	r3, r2
 800775c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a25      	ldr	r2, [pc, #148]	; (80077f8 <TIM_Base_SetConfig+0xe4>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d01b      	beq.n	800779e <TIM_Base_SetConfig+0x8a>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800776c:	d017      	beq.n	800779e <TIM_Base_SetConfig+0x8a>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a22      	ldr	r2, [pc, #136]	; (80077fc <TIM_Base_SetConfig+0xe8>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d013      	beq.n	800779e <TIM_Base_SetConfig+0x8a>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a21      	ldr	r2, [pc, #132]	; (8007800 <TIM_Base_SetConfig+0xec>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d00f      	beq.n	800779e <TIM_Base_SetConfig+0x8a>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a20      	ldr	r2, [pc, #128]	; (8007804 <TIM_Base_SetConfig+0xf0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d00b      	beq.n	800779e <TIM_Base_SetConfig+0x8a>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a1f      	ldr	r2, [pc, #124]	; (8007808 <TIM_Base_SetConfig+0xf4>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d007      	beq.n	800779e <TIM_Base_SetConfig+0x8a>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a1e      	ldr	r2, [pc, #120]	; (800780c <TIM_Base_SetConfig+0xf8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d003      	beq.n	800779e <TIM_Base_SetConfig+0x8a>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a1d      	ldr	r2, [pc, #116]	; (8007810 <TIM_Base_SetConfig+0xfc>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d108      	bne.n	80077b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a08      	ldr	r2, [pc, #32]	; (80077f8 <TIM_Base_SetConfig+0xe4>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d103      	bne.n	80077e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	691a      	ldr	r2, [r3, #16]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	615a      	str	r2, [r3, #20]
}
 80077ea:	bf00      	nop
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	40010000 	.word	0x40010000
 80077fc:	40000400 	.word	0x40000400
 8007800:	40000800 	.word	0x40000800
 8007804:	40000c00 	.word	0x40000c00
 8007808:	40014000 	.word	0x40014000
 800780c:	40014400 	.word	0x40014400
 8007810:	40014800 	.word	0x40014800

08007814 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	f023 0201 	bic.w	r2, r3, #1
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0303 	bic.w	r3, r3, #3
 800784a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	4313      	orrs	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f023 0302 	bic.w	r3, r3, #2
 800785c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4313      	orrs	r3, r2
 8007866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a1c      	ldr	r2, [pc, #112]	; (80078dc <TIM_OC1_SetConfig+0xc8>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d10c      	bne.n	800788a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	f023 0308 	bic.w	r3, r3, #8
 8007876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	4313      	orrs	r3, r2
 8007880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f023 0304 	bic.w	r3, r3, #4
 8007888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a13      	ldr	r2, [pc, #76]	; (80078dc <TIM_OC1_SetConfig+0xc8>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d111      	bne.n	80078b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	621a      	str	r2, [r3, #32]
}
 80078d0:	bf00      	nop
 80078d2:	371c      	adds	r7, #28
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	40010000 	.word	0x40010000

080078e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	f023 0210 	bic.w	r2, r3, #16
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800790e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	021b      	lsls	r3, r3, #8
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	4313      	orrs	r3, r2
 8007922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	f023 0320 	bic.w	r3, r3, #32
 800792a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	011b      	lsls	r3, r3, #4
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	4313      	orrs	r3, r2
 8007936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a1e      	ldr	r2, [pc, #120]	; (80079b4 <TIM_OC2_SetConfig+0xd4>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d10d      	bne.n	800795c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	011b      	lsls	r3, r3, #4
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	4313      	orrs	r3, r2
 8007952:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800795a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a15      	ldr	r2, [pc, #84]	; (80079b4 <TIM_OC2_SetConfig+0xd4>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d113      	bne.n	800798c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800796a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007972:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	695b      	ldr	r3, [r3, #20]
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	4313      	orrs	r3, r2
 800797e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	4313      	orrs	r3, r2
 800798a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	621a      	str	r2, [r3, #32]
}
 80079a6:	bf00      	nop
 80079a8:	371c      	adds	r7, #28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	40010000 	.word	0x40010000

080079b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	69db      	ldr	r3, [r3, #28]
 80079de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f023 0303 	bic.w	r3, r3, #3
 80079ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	021b      	lsls	r3, r3, #8
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a1d      	ldr	r2, [pc, #116]	; (8007a88 <TIM_OC3_SetConfig+0xd0>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d10d      	bne.n	8007a32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	021b      	lsls	r3, r3, #8
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a14      	ldr	r2, [pc, #80]	; (8007a88 <TIM_OC3_SetConfig+0xd0>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d113      	bne.n	8007a62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	011b      	lsls	r3, r3, #4
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	011b      	lsls	r3, r3, #4
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	621a      	str	r2, [r3, #32]
}
 8007a7c:	bf00      	nop
 8007a7e:	371c      	adds	r7, #28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	40010000 	.word	0x40010000

08007a8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	021b      	lsls	r3, r3, #8
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	031b      	lsls	r3, r3, #12
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a10      	ldr	r2, [pc, #64]	; (8007b28 <TIM_OC4_SetConfig+0x9c>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d109      	bne.n	8007b00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007af2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	019b      	lsls	r3, r3, #6
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	621a      	str	r2, [r3, #32]
}
 8007b1a:	bf00      	nop
 8007b1c:	371c      	adds	r7, #28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	40010000 	.word	0x40010000

08007b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d101      	bne.n	8007b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b40:	2302      	movs	r3, #2
 8007b42:	e050      	b.n	8007be6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a1c      	ldr	r2, [pc, #112]	; (8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d018      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b90:	d013      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a18      	ldr	r2, [pc, #96]	; (8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d00e      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a16      	ldr	r2, [pc, #88]	; (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d009      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a15      	ldr	r2, [pc, #84]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d004      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a13      	ldr	r2, [pc, #76]	; (8007c04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d10c      	bne.n	8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	40010000 	.word	0x40010000
 8007bf8:	40000400 	.word	0x40000400
 8007bfc:	40000800 	.word	0x40000800
 8007c00:	40000c00 	.word	0x40000c00
 8007c04:	40014000 	.word	0x40014000

08007c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e03f      	b.n	8007cc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d106      	bne.n	8007c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7fa fec8 	bl	80029ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2224      	movs	r2, #36	; 0x24
 8007c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68da      	ldr	r2, [r3, #12]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fde9 	bl	800884c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	691a      	ldr	r2, [r3, #16]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	695a      	ldr	r2, [r3, #20]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b08a      	sub	sp, #40	; 0x28
 8007cce:	af02      	add	r7, sp, #8
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	603b      	str	r3, [r7, #0]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b20      	cmp	r3, #32
 8007ce8:	d17c      	bne.n	8007de4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d002      	beq.n	8007cf6 <HAL_UART_Transmit+0x2c>
 8007cf0:	88fb      	ldrh	r3, [r7, #6]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e075      	b.n	8007de6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d101      	bne.n	8007d08 <HAL_UART_Transmit+0x3e>
 8007d04:	2302      	movs	r3, #2
 8007d06:	e06e      	b.n	8007de6 <HAL_UART_Transmit+0x11c>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2221      	movs	r2, #33	; 0x21
 8007d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d1e:	f7fa ff69 	bl	8002bf4 <HAL_GetTick>
 8007d22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	88fa      	ldrh	r2, [r7, #6]
 8007d28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	88fa      	ldrh	r2, [r7, #6]
 8007d2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d38:	d108      	bne.n	8007d4c <HAL_UART_Transmit+0x82>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d104      	bne.n	8007d4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007d42:	2300      	movs	r3, #0
 8007d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	61bb      	str	r3, [r7, #24]
 8007d4a:	e003      	b.n	8007d54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d50:	2300      	movs	r3, #0
 8007d52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007d5c:	e02a      	b.n	8007db4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	2200      	movs	r2, #0
 8007d66:	2180      	movs	r1, #128	; 0x80
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 fb29 	bl	80083c0 <UART_WaitOnFlagUntilTimeout>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007d74:	2303      	movs	r3, #3
 8007d76:	e036      	b.n	8007de6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10b      	bne.n	8007d96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	881b      	ldrh	r3, [r3, #0]
 8007d82:	461a      	mov	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	3302      	adds	r3, #2
 8007d92:	61bb      	str	r3, [r7, #24]
 8007d94:	e007      	b.n	8007da6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	781a      	ldrb	r2, [r3, #0]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	3301      	adds	r3, #1
 8007da4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	3b01      	subs	r3, #1
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1cf      	bne.n	8007d5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	2140      	movs	r1, #64	; 0x40
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 faf9 	bl	80083c0 <UART_WaitOnFlagUntilTimeout>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e006      	b.n	8007de6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	e000      	b.n	8007de6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007de4:	2302      	movs	r3, #2
  }
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3720      	adds	r7, #32
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b084      	sub	sp, #16
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	60f8      	str	r0, [r7, #12]
 8007df6:	60b9      	str	r1, [r7, #8]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b20      	cmp	r3, #32
 8007e06:	d11d      	bne.n	8007e44 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <HAL_UART_Receive_IT+0x26>
 8007e0e:	88fb      	ldrh	r3, [r7, #6]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e016      	b.n	8007e46 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d101      	bne.n	8007e26 <HAL_UART_Receive_IT+0x38>
 8007e22:	2302      	movs	r3, #2
 8007e24:	e00f      	b.n	8007e46 <HAL_UART_Receive_IT+0x58>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e34:	88fb      	ldrh	r3, [r7, #6]
 8007e36:	461a      	mov	r2, r3
 8007e38:	68b9      	ldr	r1, [r7, #8]
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 fb2e 	bl	800849c <UART_Start_Receive_IT>
 8007e40:	4603      	mov	r3, r0
 8007e42:	e000      	b.n	8007e46 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007e44:	2302      	movs	r3, #2
  }
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b0ba      	sub	sp, #232	; 0xe8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007e76:	2300      	movs	r3, #0
 8007e78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e86:	f003 030f 	and.w	r3, r3, #15
 8007e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007e8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10f      	bne.n	8007eb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e9a:	f003 0320 	and.w	r3, r3, #32
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d009      	beq.n	8007eb6 <HAL_UART_IRQHandler+0x66>
 8007ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fc11 	bl	80086d6 <UART_Receive_IT>
      return;
 8007eb4:	e256      	b.n	8008364 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 80de 	beq.w	800807c <HAL_UART_IRQHandler+0x22c>
 8007ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d106      	bne.n	8007eda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 80d1 	beq.w	800807c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00b      	beq.n	8007efe <HAL_UART_IRQHandler+0xae>
 8007ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d005      	beq.n	8007efe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef6:	f043 0201 	orr.w	r2, r3, #1
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f02:	f003 0304 	and.w	r3, r3, #4
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00b      	beq.n	8007f22 <HAL_UART_IRQHandler+0xd2>
 8007f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d005      	beq.n	8007f22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	f043 0202 	orr.w	r2, r3, #2
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00b      	beq.n	8007f46 <HAL_UART_IRQHandler+0xf6>
 8007f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d005      	beq.n	8007f46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3e:	f043 0204 	orr.w	r2, r3, #4
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f4a:	f003 0308 	and.w	r3, r3, #8
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d011      	beq.n	8007f76 <HAL_UART_IRQHandler+0x126>
 8007f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f56:	f003 0320 	and.w	r3, r3, #32
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d105      	bne.n	8007f6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d005      	beq.n	8007f76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6e:	f043 0208 	orr.w	r2, r3, #8
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f000 81ed 	beq.w	800835a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f84:	f003 0320 	and.w	r3, r3, #32
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d008      	beq.n	8007f9e <HAL_UART_IRQHandler+0x14e>
 8007f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f90:	f003 0320 	and.w	r3, r3, #32
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fb9c 	bl	80086d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	695b      	ldr	r3, [r3, #20]
 8007fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa8:	2b40      	cmp	r3, #64	; 0x40
 8007faa:	bf0c      	ite	eq
 8007fac:	2301      	moveq	r3, #1
 8007fae:	2300      	movne	r3, #0
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fba:	f003 0308 	and.w	r3, r3, #8
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d103      	bne.n	8007fca <HAL_UART_IRQHandler+0x17a>
 8007fc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d04f      	beq.n	800806a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 faa4 	bl	8008518 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fda:	2b40      	cmp	r3, #64	; 0x40
 8007fdc:	d141      	bne.n	8008062 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3314      	adds	r3, #20
 8007fe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fec:	e853 3f00 	ldrex	r3, [r3]
 8007ff0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	3314      	adds	r3, #20
 8008006:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800800a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800800e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008012:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008016:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800801a:	e841 2300 	strex	r3, r2, [r1]
 800801e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1d9      	bne.n	8007fde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802e:	2b00      	cmp	r3, #0
 8008030:	d013      	beq.n	800805a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008036:	4a7d      	ldr	r2, [pc, #500]	; (800822c <HAL_UART_IRQHandler+0x3dc>)
 8008038:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803e:	4618      	mov	r0, r3
 8008040:	f7fa ff5a 	bl	8002ef8 <HAL_DMA_Abort_IT>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d016      	beq.n	8008078 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008054:	4610      	mov	r0, r2
 8008056:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008058:	e00e      	b.n	8008078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f99a 	bl	8008394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008060:	e00a      	b.n	8008078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f996 	bl	8008394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008068:	e006      	b.n	8008078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f992 	bl	8008394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008076:	e170      	b.n	800835a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008078:	bf00      	nop
    return;
 800807a:	e16e      	b.n	800835a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008080:	2b01      	cmp	r3, #1
 8008082:	f040 814a 	bne.w	800831a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800808a:	f003 0310 	and.w	r3, r3, #16
 800808e:	2b00      	cmp	r3, #0
 8008090:	f000 8143 	beq.w	800831a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008098:	f003 0310 	and.w	r3, r3, #16
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 813c 	beq.w	800831a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080a2:	2300      	movs	r3, #0
 80080a4:	60bb      	str	r3, [r7, #8]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	60bb      	str	r3, [r7, #8]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	60bb      	str	r3, [r7, #8]
 80080b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c2:	2b40      	cmp	r3, #64	; 0x40
 80080c4:	f040 80b4 	bne.w	8008230 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80080d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 8140 	beq.w	800835e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080e6:	429a      	cmp	r2, r3
 80080e8:	f080 8139 	bcs.w	800835e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080fe:	f000 8088 	beq.w	8008212 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	330c      	adds	r3, #12
 8008108:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008110:	e853 3f00 	ldrex	r3, [r3]
 8008114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800811c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	330c      	adds	r3, #12
 800812a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800812e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800813a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800813e:	e841 2300 	strex	r3, r2, [r1]
 8008142:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008146:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1d9      	bne.n	8008102 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3314      	adds	r3, #20
 8008154:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008158:	e853 3f00 	ldrex	r3, [r3]
 800815c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800815e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008160:	f023 0301 	bic.w	r3, r3, #1
 8008164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	3314      	adds	r3, #20
 800816e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008172:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008176:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800817a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800817e:	e841 2300 	strex	r3, r2, [r1]
 8008182:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1e1      	bne.n	800814e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	3314      	adds	r3, #20
 8008190:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008194:	e853 3f00 	ldrex	r3, [r3]
 8008198:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800819a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800819c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3314      	adds	r3, #20
 80081aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80081ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80081b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80081b6:	e841 2300 	strex	r3, r2, [r1]
 80081ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80081bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1e3      	bne.n	800818a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2220      	movs	r2, #32
 80081c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	330c      	adds	r3, #12
 80081d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081da:	e853 3f00 	ldrex	r3, [r3]
 80081de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80081e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081e2:	f023 0310 	bic.w	r3, r3, #16
 80081e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	330c      	adds	r3, #12
 80081f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80081f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80081f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081fc:	e841 2300 	strex	r3, r2, [r1]
 8008200:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1e3      	bne.n	80081d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820c:	4618      	mov	r0, r3
 800820e:	f7fa fe03 	bl	8002e18 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800821a:	b29b      	uxth	r3, r3
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	b29b      	uxth	r3, r3
 8008220:	4619      	mov	r1, r3
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f8c0 	bl	80083a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008228:	e099      	b.n	800835e <HAL_UART_IRQHandler+0x50e>
 800822a:	bf00      	nop
 800822c:	080085df 	.word	0x080085df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008238:	b29b      	uxth	r3, r3
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008244:	b29b      	uxth	r3, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	f000 808b 	beq.w	8008362 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800824c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 8086 	beq.w	8008362 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	330c      	adds	r3, #12
 800825c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008260:	e853 3f00 	ldrex	r3, [r3]
 8008264:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008268:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800826c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	330c      	adds	r3, #12
 8008276:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800827a:	647a      	str	r2, [r7, #68]	; 0x44
 800827c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008280:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008282:	e841 2300 	strex	r3, r2, [r1]
 8008286:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1e3      	bne.n	8008256 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3314      	adds	r3, #20
 8008294:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008298:	e853 3f00 	ldrex	r3, [r3]
 800829c:	623b      	str	r3, [r7, #32]
   return(result);
 800829e:	6a3b      	ldr	r3, [r7, #32]
 80082a0:	f023 0301 	bic.w	r3, r3, #1
 80082a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	3314      	adds	r3, #20
 80082ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80082b2:	633a      	str	r2, [r7, #48]	; 0x30
 80082b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ba:	e841 2300 	strex	r3, r2, [r1]
 80082be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e3      	bne.n	800828e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2220      	movs	r2, #32
 80082ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	330c      	adds	r3, #12
 80082da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	e853 3f00 	ldrex	r3, [r3]
 80082e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f023 0310 	bic.w	r3, r3, #16
 80082ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	330c      	adds	r3, #12
 80082f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80082f8:	61fa      	str	r2, [r7, #28]
 80082fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fc:	69b9      	ldr	r1, [r7, #24]
 80082fe:	69fa      	ldr	r2, [r7, #28]
 8008300:	e841 2300 	strex	r3, r2, [r1]
 8008304:	617b      	str	r3, [r7, #20]
   return(result);
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1e3      	bne.n	80082d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800830c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f848 	bl	80083a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008318:	e023      	b.n	8008362 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800831a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800831e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008322:	2b00      	cmp	r3, #0
 8008324:	d009      	beq.n	800833a <HAL_UART_IRQHandler+0x4ea>
 8008326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800832a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f967 	bl	8008606 <UART_Transmit_IT>
    return;
 8008338:	e014      	b.n	8008364 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800833a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800833e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00e      	beq.n	8008364 <HAL_UART_IRQHandler+0x514>
 8008346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800834a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800834e:	2b00      	cmp	r3, #0
 8008350:	d008      	beq.n	8008364 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f9a7 	bl	80086a6 <UART_EndTransmit_IT>
    return;
 8008358:	e004      	b.n	8008364 <HAL_UART_IRQHandler+0x514>
    return;
 800835a:	bf00      	nop
 800835c:	e002      	b.n	8008364 <HAL_UART_IRQHandler+0x514>
      return;
 800835e:	bf00      	nop
 8008360:	e000      	b.n	8008364 <HAL_UART_IRQHandler+0x514>
      return;
 8008362:	bf00      	nop
  }
}
 8008364:	37e8      	adds	r7, #232	; 0xe8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop

0800836c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083b4:	bf00      	nop
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b090      	sub	sp, #64	; 0x40
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	603b      	str	r3, [r7, #0]
 80083cc:	4613      	mov	r3, r2
 80083ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083d0:	e050      	b.n	8008474 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083d8:	d04c      	beq.n	8008474 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80083da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d007      	beq.n	80083f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80083e0:	f7fa fc08 	bl	8002bf4 <HAL_GetTick>
 80083e4:	4602      	mov	r2, r0
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d241      	bcs.n	8008474 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	330c      	adds	r3, #12
 80083f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fa:	e853 3f00 	ldrex	r3, [r3]
 80083fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	330c      	adds	r3, #12
 800840e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008410:	637a      	str	r2, [r7, #52]	; 0x34
 8008412:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008414:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008418:	e841 2300 	strex	r3, r2, [r1]
 800841c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800841e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1e5      	bne.n	80083f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3314      	adds	r3, #20
 800842a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	e853 3f00 	ldrex	r3, [r3]
 8008432:	613b      	str	r3, [r7, #16]
   return(result);
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	f023 0301 	bic.w	r3, r3, #1
 800843a:	63bb      	str	r3, [r7, #56]	; 0x38
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3314      	adds	r3, #20
 8008442:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008444:	623a      	str	r2, [r7, #32]
 8008446:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008448:	69f9      	ldr	r1, [r7, #28]
 800844a:	6a3a      	ldr	r2, [r7, #32]
 800844c:	e841 2300 	strex	r3, r2, [r1]
 8008450:	61bb      	str	r3, [r7, #24]
   return(result);
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1e5      	bne.n	8008424 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2220      	movs	r2, #32
 800845c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2220      	movs	r2, #32
 8008464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008470:	2303      	movs	r3, #3
 8008472:	e00f      	b.n	8008494 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	4013      	ands	r3, r2
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	429a      	cmp	r2, r3
 8008482:	bf0c      	ite	eq
 8008484:	2301      	moveq	r3, #1
 8008486:	2300      	movne	r3, #0
 8008488:	b2db      	uxtb	r3, r3
 800848a:	461a      	mov	r2, r3
 800848c:	79fb      	ldrb	r3, [r7, #7]
 800848e:	429a      	cmp	r2, r3
 8008490:	d09f      	beq.n	80083d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3740      	adds	r7, #64	; 0x40
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	4613      	mov	r3, r2
 80084a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	88fa      	ldrh	r2, [r7, #6]
 80084b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	88fa      	ldrh	r2, [r7, #6]
 80084ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2222      	movs	r2, #34	; 0x22
 80084c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d007      	beq.n	80084ea <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68da      	ldr	r2, [r3, #12]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	695a      	ldr	r2, [r3, #20]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f042 0201 	orr.w	r2, r2, #1
 80084f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68da      	ldr	r2, [r3, #12]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f042 0220 	orr.w	r2, r2, #32
 8008508:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008518:	b480      	push	{r7}
 800851a:	b095      	sub	sp, #84	; 0x54
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	330c      	adds	r3, #12
 8008526:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800852a:	e853 3f00 	ldrex	r3, [r3]
 800852e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	330c      	adds	r3, #12
 800853e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008540:	643a      	str	r2, [r7, #64]	; 0x40
 8008542:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008546:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008548:	e841 2300 	strex	r3, r2, [r1]
 800854c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800854e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1e5      	bne.n	8008520 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3314      	adds	r3, #20
 800855a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855c:	6a3b      	ldr	r3, [r7, #32]
 800855e:	e853 3f00 	ldrex	r3, [r3]
 8008562:	61fb      	str	r3, [r7, #28]
   return(result);
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	f023 0301 	bic.w	r3, r3, #1
 800856a:	64bb      	str	r3, [r7, #72]	; 0x48
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	3314      	adds	r3, #20
 8008572:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008574:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008576:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008578:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800857a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800857c:	e841 2300 	strex	r3, r2, [r1]
 8008580:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e5      	bne.n	8008554 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858c:	2b01      	cmp	r3, #1
 800858e:	d119      	bne.n	80085c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	330c      	adds	r3, #12
 8008596:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	e853 3f00 	ldrex	r3, [r3]
 800859e:	60bb      	str	r3, [r7, #8]
   return(result);
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	f023 0310 	bic.w	r3, r3, #16
 80085a6:	647b      	str	r3, [r7, #68]	; 0x44
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	330c      	adds	r3, #12
 80085ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085b0:	61ba      	str	r2, [r7, #24]
 80085b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b4:	6979      	ldr	r1, [r7, #20]
 80085b6:	69ba      	ldr	r2, [r7, #24]
 80085b8:	e841 2300 	strex	r3, r2, [r1]
 80085bc:	613b      	str	r3, [r7, #16]
   return(result);
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1e5      	bne.n	8008590 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2220      	movs	r2, #32
 80085c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80085d2:	bf00      	nop
 80085d4:	3754      	adds	r7, #84	; 0x54
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f7ff fecb 	bl	8008394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085fe:	bf00      	nop
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008606:	b480      	push	{r7}
 8008608:	b085      	sub	sp, #20
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b21      	cmp	r3, #33	; 0x21
 8008618:	d13e      	bne.n	8008698 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008622:	d114      	bne.n	800864e <UART_Transmit_IT+0x48>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d110      	bne.n	800864e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a1b      	ldr	r3, [r3, #32]
 8008630:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	881b      	ldrh	r3, [r3, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008640:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a1b      	ldr	r3, [r3, #32]
 8008646:	1c9a      	adds	r2, r3, #2
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	621a      	str	r2, [r3, #32]
 800864c:	e008      	b.n	8008660 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	1c59      	adds	r1, r3, #1
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	6211      	str	r1, [r2, #32]
 8008658:	781a      	ldrb	r2, [r3, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008664:	b29b      	uxth	r3, r3
 8008666:	3b01      	subs	r3, #1
 8008668:	b29b      	uxth	r3, r3
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	4619      	mov	r1, r3
 800866e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10f      	bne.n	8008694 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68da      	ldr	r2, [r3, #12]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008682:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68da      	ldr	r2, [r3, #12]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008692:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	e000      	b.n	800869a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008698:	2302      	movs	r3, #2
  }
}
 800869a:	4618      	mov	r0, r3
 800869c:	3714      	adds	r7, #20
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b082      	sub	sp, #8
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68da      	ldr	r2, [r3, #12]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2220      	movs	r2, #32
 80086c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7ff fe50 	bl	800836c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b08c      	sub	sp, #48	; 0x30
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b22      	cmp	r3, #34	; 0x22
 80086e8:	f040 80ab 	bne.w	8008842 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086f4:	d117      	bne.n	8008726 <UART_Receive_IT+0x50>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d113      	bne.n	8008726 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80086fe:	2300      	movs	r3, #0
 8008700:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008706:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	b29b      	uxth	r3, r3
 8008710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008714:	b29a      	uxth	r2, r3
 8008716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008718:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871e:	1c9a      	adds	r2, r3, #2
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	629a      	str	r2, [r3, #40]	; 0x28
 8008724:	e026      	b.n	8008774 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800872c:	2300      	movs	r3, #0
 800872e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008738:	d007      	beq.n	800874a <UART_Receive_IT+0x74>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10a      	bne.n	8008758 <UART_Receive_IT+0x82>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d106      	bne.n	8008758 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	b2da      	uxtb	r2, r3
 8008752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008754:	701a      	strb	r2, [r3, #0]
 8008756:	e008      	b.n	800876a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	b2db      	uxtb	r3, r3
 8008760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008764:	b2da      	uxtb	r2, r3
 8008766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008768:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876e:	1c5a      	adds	r2, r3, #1
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008778:	b29b      	uxth	r3, r3
 800877a:	3b01      	subs	r3, #1
 800877c:	b29b      	uxth	r3, r3
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	4619      	mov	r1, r3
 8008782:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008784:	2b00      	cmp	r3, #0
 8008786:	d15a      	bne.n	800883e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68da      	ldr	r2, [r3, #12]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f022 0220 	bic.w	r2, r2, #32
 8008796:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68da      	ldr	r2, [r3, #12]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	695a      	ldr	r2, [r3, #20]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f022 0201 	bic.w	r2, r2, #1
 80087b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2220      	movs	r2, #32
 80087bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d135      	bne.n	8008834 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	330c      	adds	r3, #12
 80087d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	613b      	str	r3, [r7, #16]
   return(result);
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	f023 0310 	bic.w	r3, r3, #16
 80087e4:	627b      	str	r3, [r7, #36]	; 0x24
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	330c      	adds	r3, #12
 80087ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ee:	623a      	str	r2, [r7, #32]
 80087f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f2:	69f9      	ldr	r1, [r7, #28]
 80087f4:	6a3a      	ldr	r2, [r7, #32]
 80087f6:	e841 2300 	strex	r3, r2, [r1]
 80087fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1e5      	bne.n	80087ce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0310 	and.w	r3, r3, #16
 800880c:	2b10      	cmp	r3, #16
 800880e:	d10a      	bne.n	8008826 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008810:	2300      	movs	r3, #0
 8008812:	60fb      	str	r3, [r7, #12]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	60fb      	str	r3, [r7, #12]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff fdbb 	bl	80083a8 <HAL_UARTEx_RxEventCallback>
 8008832:	e002      	b.n	800883a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f7ff fda3 	bl	8008380 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	e002      	b.n	8008844 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	e000      	b.n	8008844 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008842:	2302      	movs	r3, #2
  }
}
 8008844:	4618      	mov	r0, r3
 8008846:	3730      	adds	r7, #48	; 0x30
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800884c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008850:	b0c0      	sub	sp, #256	; 0x100
 8008852:	af00      	add	r7, sp, #0
 8008854:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008868:	68d9      	ldr	r1, [r3, #12]
 800886a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	ea40 0301 	orr.w	r3, r0, r1
 8008874:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800887a:	689a      	ldr	r2, [r3, #8]
 800887c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	431a      	orrs	r2, r3
 8008884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	431a      	orrs	r2, r3
 800888c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008890:	69db      	ldr	r3, [r3, #28]
 8008892:	4313      	orrs	r3, r2
 8008894:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80088a4:	f021 010c 	bic.w	r1, r1, #12
 80088a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80088b2:	430b      	orrs	r3, r1
 80088b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	695b      	ldr	r3, [r3, #20]
 80088be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80088c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088c6:	6999      	ldr	r1, [r3, #24]
 80088c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	ea40 0301 	orr.w	r3, r0, r1
 80088d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80088d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	4b8f      	ldr	r3, [pc, #572]	; (8008b18 <UART_SetConfig+0x2cc>)
 80088dc:	429a      	cmp	r2, r3
 80088de:	d005      	beq.n	80088ec <UART_SetConfig+0xa0>
 80088e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	4b8d      	ldr	r3, [pc, #564]	; (8008b1c <UART_SetConfig+0x2d0>)
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d104      	bne.n	80088f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80088ec:	f7fe fbce 	bl	800708c <HAL_RCC_GetPCLK2Freq>
 80088f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80088f4:	e003      	b.n	80088fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80088f6:	f7fe fbb5 	bl	8007064 <HAL_RCC_GetPCLK1Freq>
 80088fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008902:	69db      	ldr	r3, [r3, #28]
 8008904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008908:	f040 810c 	bne.w	8008b24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800890c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008910:	2200      	movs	r2, #0
 8008912:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008916:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800891a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800891e:	4622      	mov	r2, r4
 8008920:	462b      	mov	r3, r5
 8008922:	1891      	adds	r1, r2, r2
 8008924:	65b9      	str	r1, [r7, #88]	; 0x58
 8008926:	415b      	adcs	r3, r3
 8008928:	65fb      	str	r3, [r7, #92]	; 0x5c
 800892a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800892e:	4621      	mov	r1, r4
 8008930:	eb12 0801 	adds.w	r8, r2, r1
 8008934:	4629      	mov	r1, r5
 8008936:	eb43 0901 	adc.w	r9, r3, r1
 800893a:	f04f 0200 	mov.w	r2, #0
 800893e:	f04f 0300 	mov.w	r3, #0
 8008942:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008946:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800894a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800894e:	4690      	mov	r8, r2
 8008950:	4699      	mov	r9, r3
 8008952:	4623      	mov	r3, r4
 8008954:	eb18 0303 	adds.w	r3, r8, r3
 8008958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800895c:	462b      	mov	r3, r5
 800895e:	eb49 0303 	adc.w	r3, r9, r3
 8008962:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008972:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008976:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800897a:	460b      	mov	r3, r1
 800897c:	18db      	adds	r3, r3, r3
 800897e:	653b      	str	r3, [r7, #80]	; 0x50
 8008980:	4613      	mov	r3, r2
 8008982:	eb42 0303 	adc.w	r3, r2, r3
 8008986:	657b      	str	r3, [r7, #84]	; 0x54
 8008988:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800898c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008990:	f7f8 f944 	bl	8000c1c <__aeabi_uldivmod>
 8008994:	4602      	mov	r2, r0
 8008996:	460b      	mov	r3, r1
 8008998:	4b61      	ldr	r3, [pc, #388]	; (8008b20 <UART_SetConfig+0x2d4>)
 800899a:	fba3 2302 	umull	r2, r3, r3, r2
 800899e:	095b      	lsrs	r3, r3, #5
 80089a0:	011c      	lsls	r4, r3, #4
 80089a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089a6:	2200      	movs	r2, #0
 80089a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80089ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80089b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80089b4:	4642      	mov	r2, r8
 80089b6:	464b      	mov	r3, r9
 80089b8:	1891      	adds	r1, r2, r2
 80089ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80089bc:	415b      	adcs	r3, r3
 80089be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80089c4:	4641      	mov	r1, r8
 80089c6:	eb12 0a01 	adds.w	sl, r2, r1
 80089ca:	4649      	mov	r1, r9
 80089cc:	eb43 0b01 	adc.w	fp, r3, r1
 80089d0:	f04f 0200 	mov.w	r2, #0
 80089d4:	f04f 0300 	mov.w	r3, #0
 80089d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80089dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80089e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089e4:	4692      	mov	sl, r2
 80089e6:	469b      	mov	fp, r3
 80089e8:	4643      	mov	r3, r8
 80089ea:	eb1a 0303 	adds.w	r3, sl, r3
 80089ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089f2:	464b      	mov	r3, r9
 80089f4:	eb4b 0303 	adc.w	r3, fp, r3
 80089f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80089fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008a0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008a10:	460b      	mov	r3, r1
 8008a12:	18db      	adds	r3, r3, r3
 8008a14:	643b      	str	r3, [r7, #64]	; 0x40
 8008a16:	4613      	mov	r3, r2
 8008a18:	eb42 0303 	adc.w	r3, r2, r3
 8008a1c:	647b      	str	r3, [r7, #68]	; 0x44
 8008a1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008a26:	f7f8 f8f9 	bl	8000c1c <__aeabi_uldivmod>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	4611      	mov	r1, r2
 8008a30:	4b3b      	ldr	r3, [pc, #236]	; (8008b20 <UART_SetConfig+0x2d4>)
 8008a32:	fba3 2301 	umull	r2, r3, r3, r1
 8008a36:	095b      	lsrs	r3, r3, #5
 8008a38:	2264      	movs	r2, #100	; 0x64
 8008a3a:	fb02 f303 	mul.w	r3, r2, r3
 8008a3e:	1acb      	subs	r3, r1, r3
 8008a40:	00db      	lsls	r3, r3, #3
 8008a42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008a46:	4b36      	ldr	r3, [pc, #216]	; (8008b20 <UART_SetConfig+0x2d4>)
 8008a48:	fba3 2302 	umull	r2, r3, r3, r2
 8008a4c:	095b      	lsrs	r3, r3, #5
 8008a4e:	005b      	lsls	r3, r3, #1
 8008a50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a54:	441c      	add	r4, r3
 8008a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008a64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008a68:	4642      	mov	r2, r8
 8008a6a:	464b      	mov	r3, r9
 8008a6c:	1891      	adds	r1, r2, r2
 8008a6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008a70:	415b      	adcs	r3, r3
 8008a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008a78:	4641      	mov	r1, r8
 8008a7a:	1851      	adds	r1, r2, r1
 8008a7c:	6339      	str	r1, [r7, #48]	; 0x30
 8008a7e:	4649      	mov	r1, r9
 8008a80:	414b      	adcs	r3, r1
 8008a82:	637b      	str	r3, [r7, #52]	; 0x34
 8008a84:	f04f 0200 	mov.w	r2, #0
 8008a88:	f04f 0300 	mov.w	r3, #0
 8008a8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008a90:	4659      	mov	r1, fp
 8008a92:	00cb      	lsls	r3, r1, #3
 8008a94:	4651      	mov	r1, sl
 8008a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a9a:	4651      	mov	r1, sl
 8008a9c:	00ca      	lsls	r2, r1, #3
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	4642      	mov	r2, r8
 8008aa6:	189b      	adds	r3, r3, r2
 8008aa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008aac:	464b      	mov	r3, r9
 8008aae:	460a      	mov	r2, r1
 8008ab0:	eb42 0303 	adc.w	r3, r2, r3
 8008ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ac4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008ac8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008acc:	460b      	mov	r3, r1
 8008ace:	18db      	adds	r3, r3, r3
 8008ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	eb42 0303 	adc.w	r3, r2, r3
 8008ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ada:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ade:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008ae2:	f7f8 f89b 	bl	8000c1c <__aeabi_uldivmod>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4b0d      	ldr	r3, [pc, #52]	; (8008b20 <UART_SetConfig+0x2d4>)
 8008aec:	fba3 1302 	umull	r1, r3, r3, r2
 8008af0:	095b      	lsrs	r3, r3, #5
 8008af2:	2164      	movs	r1, #100	; 0x64
 8008af4:	fb01 f303 	mul.w	r3, r1, r3
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	00db      	lsls	r3, r3, #3
 8008afc:	3332      	adds	r3, #50	; 0x32
 8008afe:	4a08      	ldr	r2, [pc, #32]	; (8008b20 <UART_SetConfig+0x2d4>)
 8008b00:	fba2 2303 	umull	r2, r3, r2, r3
 8008b04:	095b      	lsrs	r3, r3, #5
 8008b06:	f003 0207 	and.w	r2, r3, #7
 8008b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4422      	add	r2, r4
 8008b12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b14:	e105      	b.n	8008d22 <UART_SetConfig+0x4d6>
 8008b16:	bf00      	nop
 8008b18:	40011000 	.word	0x40011000
 8008b1c:	40011400 	.word	0x40011400
 8008b20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008b2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008b32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008b36:	4642      	mov	r2, r8
 8008b38:	464b      	mov	r3, r9
 8008b3a:	1891      	adds	r1, r2, r2
 8008b3c:	6239      	str	r1, [r7, #32]
 8008b3e:	415b      	adcs	r3, r3
 8008b40:	627b      	str	r3, [r7, #36]	; 0x24
 8008b42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b46:	4641      	mov	r1, r8
 8008b48:	1854      	adds	r4, r2, r1
 8008b4a:	4649      	mov	r1, r9
 8008b4c:	eb43 0501 	adc.w	r5, r3, r1
 8008b50:	f04f 0200 	mov.w	r2, #0
 8008b54:	f04f 0300 	mov.w	r3, #0
 8008b58:	00eb      	lsls	r3, r5, #3
 8008b5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b5e:	00e2      	lsls	r2, r4, #3
 8008b60:	4614      	mov	r4, r2
 8008b62:	461d      	mov	r5, r3
 8008b64:	4643      	mov	r3, r8
 8008b66:	18e3      	adds	r3, r4, r3
 8008b68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b6c:	464b      	mov	r3, r9
 8008b6e:	eb45 0303 	adc.w	r3, r5, r3
 8008b72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008b86:	f04f 0200 	mov.w	r2, #0
 8008b8a:	f04f 0300 	mov.w	r3, #0
 8008b8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008b92:	4629      	mov	r1, r5
 8008b94:	008b      	lsls	r3, r1, #2
 8008b96:	4621      	mov	r1, r4
 8008b98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	008a      	lsls	r2, r1, #2
 8008ba0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008ba4:	f7f8 f83a 	bl	8000c1c <__aeabi_uldivmod>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	4b60      	ldr	r3, [pc, #384]	; (8008d30 <UART_SetConfig+0x4e4>)
 8008bae:	fba3 2302 	umull	r2, r3, r3, r2
 8008bb2:	095b      	lsrs	r3, r3, #5
 8008bb4:	011c      	lsls	r4, r3, #4
 8008bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008bc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008bc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008bc8:	4642      	mov	r2, r8
 8008bca:	464b      	mov	r3, r9
 8008bcc:	1891      	adds	r1, r2, r2
 8008bce:	61b9      	str	r1, [r7, #24]
 8008bd0:	415b      	adcs	r3, r3
 8008bd2:	61fb      	str	r3, [r7, #28]
 8008bd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008bd8:	4641      	mov	r1, r8
 8008bda:	1851      	adds	r1, r2, r1
 8008bdc:	6139      	str	r1, [r7, #16]
 8008bde:	4649      	mov	r1, r9
 8008be0:	414b      	adcs	r3, r1
 8008be2:	617b      	str	r3, [r7, #20]
 8008be4:	f04f 0200 	mov.w	r2, #0
 8008be8:	f04f 0300 	mov.w	r3, #0
 8008bec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008bf0:	4659      	mov	r1, fp
 8008bf2:	00cb      	lsls	r3, r1, #3
 8008bf4:	4651      	mov	r1, sl
 8008bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bfa:	4651      	mov	r1, sl
 8008bfc:	00ca      	lsls	r2, r1, #3
 8008bfe:	4610      	mov	r0, r2
 8008c00:	4619      	mov	r1, r3
 8008c02:	4603      	mov	r3, r0
 8008c04:	4642      	mov	r2, r8
 8008c06:	189b      	adds	r3, r3, r2
 8008c08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c0c:	464b      	mov	r3, r9
 8008c0e:	460a      	mov	r2, r1
 8008c10:	eb42 0303 	adc.w	r3, r2, r3
 8008c14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008c24:	f04f 0200 	mov.w	r2, #0
 8008c28:	f04f 0300 	mov.w	r3, #0
 8008c2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008c30:	4649      	mov	r1, r9
 8008c32:	008b      	lsls	r3, r1, #2
 8008c34:	4641      	mov	r1, r8
 8008c36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c3a:	4641      	mov	r1, r8
 8008c3c:	008a      	lsls	r2, r1, #2
 8008c3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008c42:	f7f7 ffeb 	bl	8000c1c <__aeabi_uldivmod>
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4b39      	ldr	r3, [pc, #228]	; (8008d30 <UART_SetConfig+0x4e4>)
 8008c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8008c50:	095b      	lsrs	r3, r3, #5
 8008c52:	2164      	movs	r1, #100	; 0x64
 8008c54:	fb01 f303 	mul.w	r3, r1, r3
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	011b      	lsls	r3, r3, #4
 8008c5c:	3332      	adds	r3, #50	; 0x32
 8008c5e:	4a34      	ldr	r2, [pc, #208]	; (8008d30 <UART_SetConfig+0x4e4>)
 8008c60:	fba2 2303 	umull	r2, r3, r2, r3
 8008c64:	095b      	lsrs	r3, r3, #5
 8008c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c6a:	441c      	add	r4, r3
 8008c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c70:	2200      	movs	r2, #0
 8008c72:	673b      	str	r3, [r7, #112]	; 0x70
 8008c74:	677a      	str	r2, [r7, #116]	; 0x74
 8008c76:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008c7a:	4642      	mov	r2, r8
 8008c7c:	464b      	mov	r3, r9
 8008c7e:	1891      	adds	r1, r2, r2
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	415b      	adcs	r3, r3
 8008c84:	60fb      	str	r3, [r7, #12]
 8008c86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c8a:	4641      	mov	r1, r8
 8008c8c:	1851      	adds	r1, r2, r1
 8008c8e:	6039      	str	r1, [r7, #0]
 8008c90:	4649      	mov	r1, r9
 8008c92:	414b      	adcs	r3, r1
 8008c94:	607b      	str	r3, [r7, #4]
 8008c96:	f04f 0200 	mov.w	r2, #0
 8008c9a:	f04f 0300 	mov.w	r3, #0
 8008c9e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ca2:	4659      	mov	r1, fp
 8008ca4:	00cb      	lsls	r3, r1, #3
 8008ca6:	4651      	mov	r1, sl
 8008ca8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cac:	4651      	mov	r1, sl
 8008cae:	00ca      	lsls	r2, r1, #3
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	4642      	mov	r2, r8
 8008cb8:	189b      	adds	r3, r3, r2
 8008cba:	66bb      	str	r3, [r7, #104]	; 0x68
 8008cbc:	464b      	mov	r3, r9
 8008cbe:	460a      	mov	r2, r1
 8008cc0:	eb42 0303 	adc.w	r3, r2, r3
 8008cc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	663b      	str	r3, [r7, #96]	; 0x60
 8008cd0:	667a      	str	r2, [r7, #100]	; 0x64
 8008cd2:	f04f 0200 	mov.w	r2, #0
 8008cd6:	f04f 0300 	mov.w	r3, #0
 8008cda:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008cde:	4649      	mov	r1, r9
 8008ce0:	008b      	lsls	r3, r1, #2
 8008ce2:	4641      	mov	r1, r8
 8008ce4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ce8:	4641      	mov	r1, r8
 8008cea:	008a      	lsls	r2, r1, #2
 8008cec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008cf0:	f7f7 ff94 	bl	8000c1c <__aeabi_uldivmod>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4b0d      	ldr	r3, [pc, #52]	; (8008d30 <UART_SetConfig+0x4e4>)
 8008cfa:	fba3 1302 	umull	r1, r3, r3, r2
 8008cfe:	095b      	lsrs	r3, r3, #5
 8008d00:	2164      	movs	r1, #100	; 0x64
 8008d02:	fb01 f303 	mul.w	r3, r1, r3
 8008d06:	1ad3      	subs	r3, r2, r3
 8008d08:	011b      	lsls	r3, r3, #4
 8008d0a:	3332      	adds	r3, #50	; 0x32
 8008d0c:	4a08      	ldr	r2, [pc, #32]	; (8008d30 <UART_SetConfig+0x4e4>)
 8008d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d12:	095b      	lsrs	r3, r3, #5
 8008d14:	f003 020f 	and.w	r2, r3, #15
 8008d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4422      	add	r2, r4
 8008d20:	609a      	str	r2, [r3, #8]
}
 8008d22:	bf00      	nop
 8008d24:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d2e:	bf00      	nop
 8008d30:	51eb851f 	.word	0x51eb851f

08008d34 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d46:	2b84      	cmp	r3, #132	; 0x84
 8008d48:	d005      	beq.n	8008d56 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008d4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	4413      	add	r3, r2
 8008d52:	3303      	adds	r3, #3
 8008d54:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008d56:	68fb      	ldr	r3, [r7, #12]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3714      	adds	r7, #20
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008d68:	f000 fc04 	bl	8009574 <vTaskStartScheduler>
  
  return osOK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008d72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d74:	b089      	sub	sp, #36	; 0x24
 8008d76:	af04      	add	r7, sp, #16
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	695b      	ldr	r3, [r3, #20]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d020      	beq.n	8008dc6 <osThreadCreate+0x54>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d01c      	beq.n	8008dc6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685c      	ldr	r4, [r3, #4]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681d      	ldr	r5, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	691e      	ldr	r6, [r3, #16]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7ff ffc8 	bl	8008d34 <makeFreeRtosPriority>
 8008da4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	695b      	ldr	r3, [r3, #20]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008dae:	9202      	str	r2, [sp, #8]
 8008db0:	9301      	str	r3, [sp, #4]
 8008db2:	9100      	str	r1, [sp, #0]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	4632      	mov	r2, r6
 8008db8:	4629      	mov	r1, r5
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 f8ed 	bl	8008f9a <xTaskCreateStatic>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	60fb      	str	r3, [r7, #12]
 8008dc4:	e01c      	b.n	8008e00 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685c      	ldr	r4, [r3, #4]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008dd2:	b29e      	uxth	r6, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7ff ffaa 	bl	8008d34 <makeFreeRtosPriority>
 8008de0:	4602      	mov	r2, r0
 8008de2:	f107 030c 	add.w	r3, r7, #12
 8008de6:	9301      	str	r3, [sp, #4]
 8008de8:	9200      	str	r2, [sp, #0]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	4632      	mov	r2, r6
 8008dee:	4629      	mov	r1, r5
 8008df0:	4620      	mov	r0, r4
 8008df2:	f000 f92f 	bl	8009054 <xTaskCreate>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d001      	beq.n	8008e00 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	e000      	b.n	8008e02 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008e00:	68fb      	ldr	r3, [r7, #12]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e0a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b084      	sub	sp, #16
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <osDelay+0x16>
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	e000      	b.n	8008e22 <osDelay+0x18>
 8008e20:	2301      	movs	r3, #1
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 fb72 	bl	800950c <vTaskDelay>
  
  return osOK;
 8008e28:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e32:	b480      	push	{r7}
 8008e34:	b083      	sub	sp, #12
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f103 0208 	add.w	r2, r3, #8
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e4a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f103 0208 	add.w	r2, r3, #8
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f103 0208 	add.w	r2, r3, #8
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008e66:	bf00      	nop
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008e72:	b480      	push	{r7}
 8008e74:	b083      	sub	sp, #12
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	689a      	ldr	r2, [r3, #8]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	683a      	ldr	r2, [r7, #0]
 8008eb6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	1c5a      	adds	r2, r3, #1
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	601a      	str	r2, [r3, #0]
}
 8008ec8:	bf00      	nop
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eea:	d103      	bne.n	8008ef4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	e00c      	b.n	8008f0e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	3308      	adds	r3, #8
 8008ef8:	60fb      	str	r3, [r7, #12]
 8008efa:	e002      	b.n	8008f02 <vListInsert+0x2e>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	60fb      	str	r3, [r7, #12]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d2f6      	bcs.n	8008efc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	1c5a      	adds	r2, r3, #1
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	601a      	str	r2, [r3, #0]
}
 8008f3a:	bf00      	nop
 8008f3c:	3714      	adds	r7, #20
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008f46:	b480      	push	{r7}
 8008f48:	b085      	sub	sp, #20
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	6892      	ldr	r2, [r2, #8]
 8008f5c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	6852      	ldr	r2, [r2, #4]
 8008f66:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d103      	bne.n	8008f7a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	689a      	ldr	r2, [r3, #8]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	1e5a      	subs	r2, r3, #1
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3714      	adds	r7, #20
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr

08008f9a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b08e      	sub	sp, #56	; 0x38
 8008f9e:	af04      	add	r7, sp, #16
 8008fa0:	60f8      	str	r0, [r7, #12]
 8008fa2:	60b9      	str	r1, [r7, #8]
 8008fa4:	607a      	str	r2, [r7, #4]
 8008fa6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d10a      	bne.n	8008fc4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb2:	f383 8811 	msr	BASEPRI, r3
 8008fb6:	f3bf 8f6f 	isb	sy
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008fc0:	bf00      	nop
 8008fc2:	e7fe      	b.n	8008fc2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10a      	bne.n	8008fe0 <xTaskCreateStatic+0x46>
	__asm volatile
 8008fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	61fb      	str	r3, [r7, #28]
}
 8008fdc:	bf00      	nop
 8008fde:	e7fe      	b.n	8008fde <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008fe0:	23b4      	movs	r3, #180	; 0xb4
 8008fe2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	2bb4      	cmp	r3, #180	; 0xb4
 8008fe8:	d00a      	beq.n	8009000 <xTaskCreateStatic+0x66>
	__asm volatile
 8008fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fee:	f383 8811 	msr	BASEPRI, r3
 8008ff2:	f3bf 8f6f 	isb	sy
 8008ff6:	f3bf 8f4f 	dsb	sy
 8008ffa:	61bb      	str	r3, [r7, #24]
}
 8008ffc:	bf00      	nop
 8008ffe:	e7fe      	b.n	8008ffe <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009000:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009004:	2b00      	cmp	r3, #0
 8009006:	d01e      	beq.n	8009046 <xTaskCreateStatic+0xac>
 8009008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800900a:	2b00      	cmp	r3, #0
 800900c:	d01b      	beq.n	8009046 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800900e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009010:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009016:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901a:	2202      	movs	r2, #2
 800901c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009020:	2300      	movs	r3, #0
 8009022:	9303      	str	r3, [sp, #12]
 8009024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009026:	9302      	str	r3, [sp, #8]
 8009028:	f107 0314 	add.w	r3, r7, #20
 800902c:	9301      	str	r3, [sp, #4]
 800902e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	68b9      	ldr	r1, [r7, #8]
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f000 f851 	bl	80090e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800903e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009040:	f000 f8ec 	bl	800921c <prvAddNewTaskToReadyList>
 8009044:	e001      	b.n	800904a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009046:	2300      	movs	r3, #0
 8009048:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800904a:	697b      	ldr	r3, [r7, #20]
	}
 800904c:	4618      	mov	r0, r3
 800904e:	3728      	adds	r7, #40	; 0x28
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009054:	b580      	push	{r7, lr}
 8009056:	b08c      	sub	sp, #48	; 0x30
 8009058:	af04      	add	r7, sp, #16
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	603b      	str	r3, [r7, #0]
 8009060:	4613      	mov	r3, r2
 8009062:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009064:	88fb      	ldrh	r3, [r7, #6]
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	4618      	mov	r0, r3
 800906a:	f001 f92d 	bl	800a2c8 <pvPortMalloc>
 800906e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00e      	beq.n	8009094 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009076:	20b4      	movs	r0, #180	; 0xb4
 8009078:	f001 f926 	bl	800a2c8 <pvPortMalloc>
 800907c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d003      	beq.n	800908c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	697a      	ldr	r2, [r7, #20]
 8009088:	631a      	str	r2, [r3, #48]	; 0x30
 800908a:	e005      	b.n	8009098 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800908c:	6978      	ldr	r0, [r7, #20]
 800908e:	f001 f9e7 	bl	800a460 <vPortFree>
 8009092:	e001      	b.n	8009098 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009094:	2300      	movs	r3, #0
 8009096:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d017      	beq.n	80090ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80090a6:	88fa      	ldrh	r2, [r7, #6]
 80090a8:	2300      	movs	r3, #0
 80090aa:	9303      	str	r3, [sp, #12]
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	9302      	str	r3, [sp, #8]
 80090b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b2:	9301      	str	r3, [sp, #4]
 80090b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	68b9      	ldr	r1, [r7, #8]
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f000 f80f 	bl	80090e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090c2:	69f8      	ldr	r0, [r7, #28]
 80090c4:	f000 f8aa 	bl	800921c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80090c8:	2301      	movs	r3, #1
 80090ca:	61bb      	str	r3, [r7, #24]
 80090cc:	e002      	b.n	80090d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80090ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80090d4:	69bb      	ldr	r3, [r7, #24]
	}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3720      	adds	r7, #32
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b088      	sub	sp, #32
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
 80090ec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80090ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80090f8:	3b01      	subs	r3, #1
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	f023 0307 	bic.w	r3, r3, #7
 8009106:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	f003 0307 	and.w	r3, r3, #7
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00a      	beq.n	8009128 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009116:	f383 8811 	msr	BASEPRI, r3
 800911a:	f3bf 8f6f 	isb	sy
 800911e:	f3bf 8f4f 	dsb	sy
 8009122:	617b      	str	r3, [r7, #20]
}
 8009124:	bf00      	nop
 8009126:	e7fe      	b.n	8009126 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d01f      	beq.n	800916e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800912e:	2300      	movs	r3, #0
 8009130:	61fb      	str	r3, [r7, #28]
 8009132:	e012      	b.n	800915a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	4413      	add	r3, r2
 800913a:	7819      	ldrb	r1, [r3, #0]
 800913c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	4413      	add	r3, r2
 8009142:	3334      	adds	r3, #52	; 0x34
 8009144:	460a      	mov	r2, r1
 8009146:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	4413      	add	r3, r2
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d006      	beq.n	8009162 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	3301      	adds	r3, #1
 8009158:	61fb      	str	r3, [r7, #28]
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	2b0f      	cmp	r3, #15
 800915e:	d9e9      	bls.n	8009134 <prvInitialiseNewTask+0x54>
 8009160:	e000      	b.n	8009164 <prvInitialiseNewTask+0x84>
			{
				break;
 8009162:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009166:	2200      	movs	r2, #0
 8009168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800916c:	e003      	b.n	8009176 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800916e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009170:	2200      	movs	r2, #0
 8009172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009178:	2b06      	cmp	r3, #6
 800917a:	d901      	bls.n	8009180 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800917c:	2306      	movs	r3, #6
 800917e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009184:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800918a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800918c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918e:	2200      	movs	r2, #0
 8009190:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009194:	3304      	adds	r3, #4
 8009196:	4618      	mov	r0, r3
 8009198:	f7ff fe6b 	bl	8008e72 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800919c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919e:	3318      	adds	r3, #24
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7ff fe66 	bl	8008e72 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80091a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ae:	f1c3 0207 	rsb	r2, r3, #7
 80091b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80091b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80091bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091be:	2200      	movs	r2, #0
 80091c0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80091cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ce:	334c      	adds	r3, #76	; 0x4c
 80091d0:	2260      	movs	r2, #96	; 0x60
 80091d2:	2100      	movs	r1, #0
 80091d4:	4618      	mov	r0, r3
 80091d6:	f001 fb96 	bl	800a906 <memset>
 80091da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091dc:	4a0c      	ldr	r2, [pc, #48]	; (8009210 <prvInitialiseNewTask+0x130>)
 80091de:	651a      	str	r2, [r3, #80]	; 0x50
 80091e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e2:	4a0c      	ldr	r2, [pc, #48]	; (8009214 <prvInitialiseNewTask+0x134>)
 80091e4:	655a      	str	r2, [r3, #84]	; 0x54
 80091e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e8:	4a0b      	ldr	r2, [pc, #44]	; (8009218 <prvInitialiseNewTask+0x138>)
 80091ea:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	68f9      	ldr	r1, [r7, #12]
 80091f0:	69b8      	ldr	r0, [r7, #24]
 80091f2:	f000 fe1d 	bl	8009e30 <pxPortInitialiseStack>
 80091f6:	4602      	mov	r2, r0
 80091f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80091fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d002      	beq.n	8009208 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009206:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009208:	bf00      	nop
 800920a:	3720      	adds	r7, #32
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	0800e00c 	.word	0x0800e00c
 8009214:	0800e02c 	.word	0x0800e02c
 8009218:	0800dfec 	.word	0x0800dfec

0800921c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009224:	f000 ff2e 	bl	800a084 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009228:	4b2a      	ldr	r3, [pc, #168]	; (80092d4 <prvAddNewTaskToReadyList+0xb8>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3301      	adds	r3, #1
 800922e:	4a29      	ldr	r2, [pc, #164]	; (80092d4 <prvAddNewTaskToReadyList+0xb8>)
 8009230:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009232:	4b29      	ldr	r3, [pc, #164]	; (80092d8 <prvAddNewTaskToReadyList+0xbc>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d109      	bne.n	800924e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800923a:	4a27      	ldr	r2, [pc, #156]	; (80092d8 <prvAddNewTaskToReadyList+0xbc>)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009240:	4b24      	ldr	r3, [pc, #144]	; (80092d4 <prvAddNewTaskToReadyList+0xb8>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d110      	bne.n	800926a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009248:	f000 fbea 	bl	8009a20 <prvInitialiseTaskLists>
 800924c:	e00d      	b.n	800926a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800924e:	4b23      	ldr	r3, [pc, #140]	; (80092dc <prvAddNewTaskToReadyList+0xc0>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d109      	bne.n	800926a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009256:	4b20      	ldr	r3, [pc, #128]	; (80092d8 <prvAddNewTaskToReadyList+0xbc>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009260:	429a      	cmp	r2, r3
 8009262:	d802      	bhi.n	800926a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009264:	4a1c      	ldr	r2, [pc, #112]	; (80092d8 <prvAddNewTaskToReadyList+0xbc>)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800926a:	4b1d      	ldr	r3, [pc, #116]	; (80092e0 <prvAddNewTaskToReadyList+0xc4>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	3301      	adds	r3, #1
 8009270:	4a1b      	ldr	r2, [pc, #108]	; (80092e0 <prvAddNewTaskToReadyList+0xc4>)
 8009272:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009278:	2201      	movs	r2, #1
 800927a:	409a      	lsls	r2, r3
 800927c:	4b19      	ldr	r3, [pc, #100]	; (80092e4 <prvAddNewTaskToReadyList+0xc8>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4313      	orrs	r3, r2
 8009282:	4a18      	ldr	r2, [pc, #96]	; (80092e4 <prvAddNewTaskToReadyList+0xc8>)
 8009284:	6013      	str	r3, [r2, #0]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800928a:	4613      	mov	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4a15      	ldr	r2, [pc, #84]	; (80092e8 <prvAddNewTaskToReadyList+0xcc>)
 8009294:	441a      	add	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	3304      	adds	r3, #4
 800929a:	4619      	mov	r1, r3
 800929c:	4610      	mov	r0, r2
 800929e:	f7ff fdf5 	bl	8008e8c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80092a2:	f000 ff1f 	bl	800a0e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80092a6:	4b0d      	ldr	r3, [pc, #52]	; (80092dc <prvAddNewTaskToReadyList+0xc0>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00e      	beq.n	80092cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80092ae:	4b0a      	ldr	r3, [pc, #40]	; (80092d8 <prvAddNewTaskToReadyList+0xbc>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d207      	bcs.n	80092cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80092bc:	4b0b      	ldr	r3, [pc, #44]	; (80092ec <prvAddNewTaskToReadyList+0xd0>)
 80092be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092cc:	bf00      	nop
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	20000ca4 	.word	0x20000ca4
 80092d8:	20000ba4 	.word	0x20000ba4
 80092dc:	20000cb0 	.word	0x20000cb0
 80092e0:	20000cc0 	.word	0x20000cc0
 80092e4:	20000cac 	.word	0x20000cac
 80092e8:	20000ba8 	.word	0x20000ba8
 80092ec:	e000ed04 	.word	0xe000ed04

080092f0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80092f8:	f000 fec4 	bl	800a084 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d102      	bne.n	8009308 <vTaskDelete+0x18>
 8009302:	4b39      	ldr	r3, [pc, #228]	; (80093e8 <vTaskDelete+0xf8>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	e000      	b.n	800930a <vTaskDelete+0x1a>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	3304      	adds	r3, #4
 8009310:	4618      	mov	r0, r3
 8009312:	f7ff fe18 	bl	8008f46 <uxListRemove>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d115      	bne.n	8009348 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009320:	4932      	ldr	r1, [pc, #200]	; (80093ec <vTaskDelete+0xfc>)
 8009322:	4613      	mov	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4413      	add	r3, r2
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	440b      	add	r3, r1
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10a      	bne.n	8009348 <vTaskDelete+0x58>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009336:	2201      	movs	r2, #1
 8009338:	fa02 f303 	lsl.w	r3, r2, r3
 800933c:	43da      	mvns	r2, r3
 800933e:	4b2c      	ldr	r3, [pc, #176]	; (80093f0 <vTaskDelete+0x100>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4013      	ands	r3, r2
 8009344:	4a2a      	ldr	r2, [pc, #168]	; (80093f0 <vTaskDelete+0x100>)
 8009346:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934c:	2b00      	cmp	r3, #0
 800934e:	d004      	beq.n	800935a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	3318      	adds	r3, #24
 8009354:	4618      	mov	r0, r3
 8009356:	f7ff fdf6 	bl	8008f46 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800935a:	4b26      	ldr	r3, [pc, #152]	; (80093f4 <vTaskDelete+0x104>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3301      	adds	r3, #1
 8009360:	4a24      	ldr	r2, [pc, #144]	; (80093f4 <vTaskDelete+0x104>)
 8009362:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009364:	4b20      	ldr	r3, [pc, #128]	; (80093e8 <vTaskDelete+0xf8>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	429a      	cmp	r2, r3
 800936c:	d10b      	bne.n	8009386 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	3304      	adds	r3, #4
 8009372:	4619      	mov	r1, r3
 8009374:	4820      	ldr	r0, [pc, #128]	; (80093f8 <vTaskDelete+0x108>)
 8009376:	f7ff fd89 	bl	8008e8c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800937a:	4b20      	ldr	r3, [pc, #128]	; (80093fc <vTaskDelete+0x10c>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	3301      	adds	r3, #1
 8009380:	4a1e      	ldr	r2, [pc, #120]	; (80093fc <vTaskDelete+0x10c>)
 8009382:	6013      	str	r3, [r2, #0]
 8009384:	e009      	b.n	800939a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009386:	4b1e      	ldr	r3, [pc, #120]	; (8009400 <vTaskDelete+0x110>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	3b01      	subs	r3, #1
 800938c:	4a1c      	ldr	r2, [pc, #112]	; (8009400 <vTaskDelete+0x110>)
 800938e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f000 fbb3 	bl	8009afc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009396:	f000 fbe5 	bl	8009b64 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800939a:	f000 fea3 	bl	800a0e4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800939e:	4b19      	ldr	r3, [pc, #100]	; (8009404 <vTaskDelete+0x114>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d01b      	beq.n	80093de <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80093a6:	4b10      	ldr	r3, [pc, #64]	; (80093e8 <vTaskDelete+0xf8>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d116      	bne.n	80093de <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80093b0:	4b15      	ldr	r3, [pc, #84]	; (8009408 <vTaskDelete+0x118>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00a      	beq.n	80093ce <vTaskDelete+0xde>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	60bb      	str	r3, [r7, #8]
}
 80093ca:	bf00      	nop
 80093cc:	e7fe      	b.n	80093cc <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80093ce:	4b0f      	ldr	r3, [pc, #60]	; (800940c <vTaskDelete+0x11c>)
 80093d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80093de:	bf00      	nop
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20000ba4 	.word	0x20000ba4
 80093ec:	20000ba8 	.word	0x20000ba8
 80093f0:	20000cac 	.word	0x20000cac
 80093f4:	20000cc0 	.word	0x20000cc0
 80093f8:	20000c78 	.word	0x20000c78
 80093fc:	20000c8c 	.word	0x20000c8c
 8009400:	20000ca4 	.word	0x20000ca4
 8009404:	20000cb0 	.word	0x20000cb0
 8009408:	20000ccc 	.word	0x20000ccc
 800940c:	e000ed04 	.word	0xe000ed04

08009410 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009410:	b580      	push	{r7, lr}
 8009412:	b08a      	sub	sp, #40	; 0x28
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800941a:	2300      	movs	r3, #0
 800941c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10a      	bne.n	800943a <vTaskDelayUntil+0x2a>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	617b      	str	r3, [r7, #20]
}
 8009436:	bf00      	nop
 8009438:	e7fe      	b.n	8009438 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10a      	bne.n	8009456 <vTaskDelayUntil+0x46>
	__asm volatile
 8009440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	613b      	str	r3, [r7, #16]
}
 8009452:	bf00      	nop
 8009454:	e7fe      	b.n	8009454 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8009456:	4b2a      	ldr	r3, [pc, #168]	; (8009500 <vTaskDelayUntil+0xf0>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00a      	beq.n	8009474 <vTaskDelayUntil+0x64>
	__asm volatile
 800945e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009462:	f383 8811 	msr	BASEPRI, r3
 8009466:	f3bf 8f6f 	isb	sy
 800946a:	f3bf 8f4f 	dsb	sy
 800946e:	60fb      	str	r3, [r7, #12]
}
 8009470:	bf00      	nop
 8009472:	e7fe      	b.n	8009472 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009474:	f000 f8e8 	bl	8009648 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009478:	4b22      	ldr	r3, [pc, #136]	; (8009504 <vTaskDelayUntil+0xf4>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	4413      	add	r3, r2
 8009486:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6a3a      	ldr	r2, [r7, #32]
 800948e:	429a      	cmp	r2, r3
 8009490:	d20b      	bcs.n	80094aa <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	69fa      	ldr	r2, [r7, #28]
 8009498:	429a      	cmp	r2, r3
 800949a:	d211      	bcs.n	80094c0 <vTaskDelayUntil+0xb0>
 800949c:	69fa      	ldr	r2, [r7, #28]
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d90d      	bls.n	80094c0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80094a4:	2301      	movs	r3, #1
 80094a6:	627b      	str	r3, [r7, #36]	; 0x24
 80094a8:	e00a      	b.n	80094c0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	69fa      	ldr	r2, [r7, #28]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d303      	bcc.n	80094bc <vTaskDelayUntil+0xac>
 80094b4:	69fa      	ldr	r2, [r7, #28]
 80094b6:	6a3b      	ldr	r3, [r7, #32]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d901      	bls.n	80094c0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80094bc:	2301      	movs	r3, #1
 80094be:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	69fa      	ldr	r2, [r7, #28]
 80094c4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80094c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d006      	beq.n	80094da <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80094cc:	69fa      	ldr	r2, [r7, #28]
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	2100      	movs	r1, #0
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 fc45 	bl	8009d64 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80094da:	f000 f8c3 	bl	8009664 <xTaskResumeAll>
 80094de:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d107      	bne.n	80094f6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80094e6:	4b08      	ldr	r3, [pc, #32]	; (8009508 <vTaskDelayUntil+0xf8>)
 80094e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ec:	601a      	str	r2, [r3, #0]
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094f6:	bf00      	nop
 80094f8:	3728      	adds	r7, #40	; 0x28
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	20000ccc 	.word	0x20000ccc
 8009504:	20000ca8 	.word	0x20000ca8
 8009508:	e000ed04 	.word	0xe000ed04

0800950c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009514:	2300      	movs	r3, #0
 8009516:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d017      	beq.n	800954e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800951e:	4b13      	ldr	r3, [pc, #76]	; (800956c <vTaskDelay+0x60>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00a      	beq.n	800953c <vTaskDelay+0x30>
	__asm volatile
 8009526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	60bb      	str	r3, [r7, #8]
}
 8009538:	bf00      	nop
 800953a:	e7fe      	b.n	800953a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800953c:	f000 f884 	bl	8009648 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009540:	2100      	movs	r1, #0
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fc0e 	bl	8009d64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009548:	f000 f88c 	bl	8009664 <xTaskResumeAll>
 800954c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d107      	bne.n	8009564 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009554:	4b06      	ldr	r3, [pc, #24]	; (8009570 <vTaskDelay+0x64>)
 8009556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800955a:	601a      	str	r2, [r3, #0]
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009564:	bf00      	nop
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	20000ccc 	.word	0x20000ccc
 8009570:	e000ed04 	.word	0xe000ed04

08009574 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b08a      	sub	sp, #40	; 0x28
 8009578:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800957a:	2300      	movs	r3, #0
 800957c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800957e:	2300      	movs	r3, #0
 8009580:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009582:	463a      	mov	r2, r7
 8009584:	1d39      	adds	r1, r7, #4
 8009586:	f107 0308 	add.w	r3, r7, #8
 800958a:	4618      	mov	r0, r3
 800958c:	f7f8 f90e 	bl	80017ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009590:	6839      	ldr	r1, [r7, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	9202      	str	r2, [sp, #8]
 8009598:	9301      	str	r3, [sp, #4]
 800959a:	2300      	movs	r3, #0
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	2300      	movs	r3, #0
 80095a0:	460a      	mov	r2, r1
 80095a2:	4921      	ldr	r1, [pc, #132]	; (8009628 <vTaskStartScheduler+0xb4>)
 80095a4:	4821      	ldr	r0, [pc, #132]	; (800962c <vTaskStartScheduler+0xb8>)
 80095a6:	f7ff fcf8 	bl	8008f9a <xTaskCreateStatic>
 80095aa:	4603      	mov	r3, r0
 80095ac:	4a20      	ldr	r2, [pc, #128]	; (8009630 <vTaskStartScheduler+0xbc>)
 80095ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80095b0:	4b1f      	ldr	r3, [pc, #124]	; (8009630 <vTaskStartScheduler+0xbc>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80095b8:	2301      	movs	r3, #1
 80095ba:	617b      	str	r3, [r7, #20]
 80095bc:	e001      	b.n	80095c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80095be:	2300      	movs	r3, #0
 80095c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d11b      	bne.n	8009600 <vTaskStartScheduler+0x8c>
	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	613b      	str	r3, [r7, #16]
}
 80095da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80095dc:	4b15      	ldr	r3, [pc, #84]	; (8009634 <vTaskStartScheduler+0xc0>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	334c      	adds	r3, #76	; 0x4c
 80095e2:	4a15      	ldr	r2, [pc, #84]	; (8009638 <vTaskStartScheduler+0xc4>)
 80095e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095e6:	4b15      	ldr	r3, [pc, #84]	; (800963c <vTaskStartScheduler+0xc8>)
 80095e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095ee:	4b14      	ldr	r3, [pc, #80]	; (8009640 <vTaskStartScheduler+0xcc>)
 80095f0:	2201      	movs	r2, #1
 80095f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80095f4:	4b13      	ldr	r3, [pc, #76]	; (8009644 <vTaskStartScheduler+0xd0>)
 80095f6:	2200      	movs	r2, #0
 80095f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095fa:	f000 fca1 	bl	8009f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095fe:	e00e      	b.n	800961e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009606:	d10a      	bne.n	800961e <vTaskStartScheduler+0xaa>
	__asm volatile
 8009608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960c:	f383 8811 	msr	BASEPRI, r3
 8009610:	f3bf 8f6f 	isb	sy
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	60fb      	str	r3, [r7, #12]
}
 800961a:	bf00      	nop
 800961c:	e7fe      	b.n	800961c <vTaskStartScheduler+0xa8>
}
 800961e:	bf00      	nop
 8009620:	3718      	adds	r7, #24
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	0800dfcc 	.word	0x0800dfcc
 800962c:	080099f1 	.word	0x080099f1
 8009630:	20000cc8 	.word	0x20000cc8
 8009634:	20000ba4 	.word	0x20000ba4
 8009638:	20000010 	.word	0x20000010
 800963c:	20000cc4 	.word	0x20000cc4
 8009640:	20000cb0 	.word	0x20000cb0
 8009644:	20000ca8 	.word	0x20000ca8

08009648 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009648:	b480      	push	{r7}
 800964a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800964c:	4b04      	ldr	r3, [pc, #16]	; (8009660 <vTaskSuspendAll+0x18>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3301      	adds	r3, #1
 8009652:	4a03      	ldr	r2, [pc, #12]	; (8009660 <vTaskSuspendAll+0x18>)
 8009654:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009656:	bf00      	nop
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr
 8009660:	20000ccc 	.word	0x20000ccc

08009664 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800966a:	2300      	movs	r3, #0
 800966c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800966e:	2300      	movs	r3, #0
 8009670:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009672:	4b41      	ldr	r3, [pc, #260]	; (8009778 <xTaskResumeAll+0x114>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d10a      	bne.n	8009690 <xTaskResumeAll+0x2c>
	__asm volatile
 800967a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967e:	f383 8811 	msr	BASEPRI, r3
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	603b      	str	r3, [r7, #0]
}
 800968c:	bf00      	nop
 800968e:	e7fe      	b.n	800968e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009690:	f000 fcf8 	bl	800a084 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009694:	4b38      	ldr	r3, [pc, #224]	; (8009778 <xTaskResumeAll+0x114>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	3b01      	subs	r3, #1
 800969a:	4a37      	ldr	r2, [pc, #220]	; (8009778 <xTaskResumeAll+0x114>)
 800969c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800969e:	4b36      	ldr	r3, [pc, #216]	; (8009778 <xTaskResumeAll+0x114>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d161      	bne.n	800976a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80096a6:	4b35      	ldr	r3, [pc, #212]	; (800977c <xTaskResumeAll+0x118>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d05d      	beq.n	800976a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096ae:	e02e      	b.n	800970e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096b0:	4b33      	ldr	r3, [pc, #204]	; (8009780 <xTaskResumeAll+0x11c>)
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3318      	adds	r3, #24
 80096bc:	4618      	mov	r0, r3
 80096be:	f7ff fc42 	bl	8008f46 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	3304      	adds	r3, #4
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7ff fc3d 	bl	8008f46 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d0:	2201      	movs	r2, #1
 80096d2:	409a      	lsls	r2, r3
 80096d4:	4b2b      	ldr	r3, [pc, #172]	; (8009784 <xTaskResumeAll+0x120>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4313      	orrs	r3, r2
 80096da:	4a2a      	ldr	r2, [pc, #168]	; (8009784 <xTaskResumeAll+0x120>)
 80096dc:	6013      	str	r3, [r2, #0]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096e2:	4613      	mov	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4a27      	ldr	r2, [pc, #156]	; (8009788 <xTaskResumeAll+0x124>)
 80096ec:	441a      	add	r2, r3
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	3304      	adds	r3, #4
 80096f2:	4619      	mov	r1, r3
 80096f4:	4610      	mov	r0, r2
 80096f6:	f7ff fbc9 	bl	8008e8c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096fe:	4b23      	ldr	r3, [pc, #140]	; (800978c <xTaskResumeAll+0x128>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009704:	429a      	cmp	r2, r3
 8009706:	d302      	bcc.n	800970e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009708:	4b21      	ldr	r3, [pc, #132]	; (8009790 <xTaskResumeAll+0x12c>)
 800970a:	2201      	movs	r2, #1
 800970c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800970e:	4b1c      	ldr	r3, [pc, #112]	; (8009780 <xTaskResumeAll+0x11c>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1cc      	bne.n	80096b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800971c:	f000 fa22 	bl	8009b64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009720:	4b1c      	ldr	r3, [pc, #112]	; (8009794 <xTaskResumeAll+0x130>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d010      	beq.n	800974e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800972c:	f000 f846 	bl	80097bc <xTaskIncrementTick>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d002      	beq.n	800973c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009736:	4b16      	ldr	r3, [pc, #88]	; (8009790 <xTaskResumeAll+0x12c>)
 8009738:	2201      	movs	r2, #1
 800973a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	3b01      	subs	r3, #1
 8009740:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1f1      	bne.n	800972c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009748:	4b12      	ldr	r3, [pc, #72]	; (8009794 <xTaskResumeAll+0x130>)
 800974a:	2200      	movs	r2, #0
 800974c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800974e:	4b10      	ldr	r3, [pc, #64]	; (8009790 <xTaskResumeAll+0x12c>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d009      	beq.n	800976a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009756:	2301      	movs	r3, #1
 8009758:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800975a:	4b0f      	ldr	r3, [pc, #60]	; (8009798 <xTaskResumeAll+0x134>)
 800975c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009760:	601a      	str	r2, [r3, #0]
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800976a:	f000 fcbb 	bl	800a0e4 <vPortExitCritical>

	return xAlreadyYielded;
 800976e:	68bb      	ldr	r3, [r7, #8]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	20000ccc 	.word	0x20000ccc
 800977c:	20000ca4 	.word	0x20000ca4
 8009780:	20000c64 	.word	0x20000c64
 8009784:	20000cac 	.word	0x20000cac
 8009788:	20000ba8 	.word	0x20000ba8
 800978c:	20000ba4 	.word	0x20000ba4
 8009790:	20000cb8 	.word	0x20000cb8
 8009794:	20000cb4 	.word	0x20000cb4
 8009798:	e000ed04 	.word	0xe000ed04

0800979c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80097a2:	4b05      	ldr	r3, [pc, #20]	; (80097b8 <xTaskGetTickCount+0x1c>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80097a8:	687b      	ldr	r3, [r7, #4]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	370c      	adds	r7, #12
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	20000ca8 	.word	0x20000ca8

080097bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80097c2:	2300      	movs	r3, #0
 80097c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097c6:	4b4e      	ldr	r3, [pc, #312]	; (8009900 <xTaskIncrementTick+0x144>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f040 808e 	bne.w	80098ec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80097d0:	4b4c      	ldr	r3, [pc, #304]	; (8009904 <xTaskIncrementTick+0x148>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3301      	adds	r3, #1
 80097d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097d8:	4a4a      	ldr	r2, [pc, #296]	; (8009904 <xTaskIncrementTick+0x148>)
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d120      	bne.n	8009826 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80097e4:	4b48      	ldr	r3, [pc, #288]	; (8009908 <xTaskIncrementTick+0x14c>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00a      	beq.n	8009804 <xTaskIncrementTick+0x48>
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	603b      	str	r3, [r7, #0]
}
 8009800:	bf00      	nop
 8009802:	e7fe      	b.n	8009802 <xTaskIncrementTick+0x46>
 8009804:	4b40      	ldr	r3, [pc, #256]	; (8009908 <xTaskIncrementTick+0x14c>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	60fb      	str	r3, [r7, #12]
 800980a:	4b40      	ldr	r3, [pc, #256]	; (800990c <xTaskIncrementTick+0x150>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a3e      	ldr	r2, [pc, #248]	; (8009908 <xTaskIncrementTick+0x14c>)
 8009810:	6013      	str	r3, [r2, #0]
 8009812:	4a3e      	ldr	r2, [pc, #248]	; (800990c <xTaskIncrementTick+0x150>)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	4b3d      	ldr	r3, [pc, #244]	; (8009910 <xTaskIncrementTick+0x154>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	3301      	adds	r3, #1
 800981e:	4a3c      	ldr	r2, [pc, #240]	; (8009910 <xTaskIncrementTick+0x154>)
 8009820:	6013      	str	r3, [r2, #0]
 8009822:	f000 f99f 	bl	8009b64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009826:	4b3b      	ldr	r3, [pc, #236]	; (8009914 <xTaskIncrementTick+0x158>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	429a      	cmp	r2, r3
 800982e:	d348      	bcc.n	80098c2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009830:	4b35      	ldr	r3, [pc, #212]	; (8009908 <xTaskIncrementTick+0x14c>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d104      	bne.n	8009844 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800983a:	4b36      	ldr	r3, [pc, #216]	; (8009914 <xTaskIncrementTick+0x158>)
 800983c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009840:	601a      	str	r2, [r3, #0]
					break;
 8009842:	e03e      	b.n	80098c2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009844:	4b30      	ldr	r3, [pc, #192]	; (8009908 <xTaskIncrementTick+0x14c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	429a      	cmp	r2, r3
 800985a:	d203      	bcs.n	8009864 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800985c:	4a2d      	ldr	r2, [pc, #180]	; (8009914 <xTaskIncrementTick+0x158>)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009862:	e02e      	b.n	80098c2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	3304      	adds	r3, #4
 8009868:	4618      	mov	r0, r3
 800986a:	f7ff fb6c 	bl	8008f46 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009872:	2b00      	cmp	r3, #0
 8009874:	d004      	beq.n	8009880 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	3318      	adds	r3, #24
 800987a:	4618      	mov	r0, r3
 800987c:	f7ff fb63 	bl	8008f46 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009884:	2201      	movs	r2, #1
 8009886:	409a      	lsls	r2, r3
 8009888:	4b23      	ldr	r3, [pc, #140]	; (8009918 <xTaskIncrementTick+0x15c>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4313      	orrs	r3, r2
 800988e:	4a22      	ldr	r2, [pc, #136]	; (8009918 <xTaskIncrementTick+0x15c>)
 8009890:	6013      	str	r3, [r2, #0]
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009896:	4613      	mov	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	4413      	add	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4a1f      	ldr	r2, [pc, #124]	; (800991c <xTaskIncrementTick+0x160>)
 80098a0:	441a      	add	r2, r3
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	3304      	adds	r3, #4
 80098a6:	4619      	mov	r1, r3
 80098a8:	4610      	mov	r0, r2
 80098aa:	f7ff faef 	bl	8008e8c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b2:	4b1b      	ldr	r3, [pc, #108]	; (8009920 <xTaskIncrementTick+0x164>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d3b9      	bcc.n	8009830 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80098bc:	2301      	movs	r3, #1
 80098be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098c0:	e7b6      	b.n	8009830 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80098c2:	4b17      	ldr	r3, [pc, #92]	; (8009920 <xTaskIncrementTick+0x164>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c8:	4914      	ldr	r1, [pc, #80]	; (800991c <xTaskIncrementTick+0x160>)
 80098ca:	4613      	mov	r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4413      	add	r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	440b      	add	r3, r1
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d901      	bls.n	80098de <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80098da:	2301      	movs	r3, #1
 80098dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80098de:	4b11      	ldr	r3, [pc, #68]	; (8009924 <xTaskIncrementTick+0x168>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d007      	beq.n	80098f6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80098e6:	2301      	movs	r3, #1
 80098e8:	617b      	str	r3, [r7, #20]
 80098ea:	e004      	b.n	80098f6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80098ec:	4b0e      	ldr	r3, [pc, #56]	; (8009928 <xTaskIncrementTick+0x16c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	3301      	adds	r3, #1
 80098f2:	4a0d      	ldr	r2, [pc, #52]	; (8009928 <xTaskIncrementTick+0x16c>)
 80098f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80098f6:	697b      	ldr	r3, [r7, #20]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3718      	adds	r7, #24
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	20000ccc 	.word	0x20000ccc
 8009904:	20000ca8 	.word	0x20000ca8
 8009908:	20000c5c 	.word	0x20000c5c
 800990c:	20000c60 	.word	0x20000c60
 8009910:	20000cbc 	.word	0x20000cbc
 8009914:	20000cc4 	.word	0x20000cc4
 8009918:	20000cac 	.word	0x20000cac
 800991c:	20000ba8 	.word	0x20000ba8
 8009920:	20000ba4 	.word	0x20000ba4
 8009924:	20000cb8 	.word	0x20000cb8
 8009928:	20000cb4 	.word	0x20000cb4

0800992c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800992c:	b480      	push	{r7}
 800992e:	b087      	sub	sp, #28
 8009930:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009932:	4b29      	ldr	r3, [pc, #164]	; (80099d8 <vTaskSwitchContext+0xac>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800993a:	4b28      	ldr	r3, [pc, #160]	; (80099dc <vTaskSwitchContext+0xb0>)
 800993c:	2201      	movs	r2, #1
 800993e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009940:	e044      	b.n	80099cc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009942:	4b26      	ldr	r3, [pc, #152]	; (80099dc <vTaskSwitchContext+0xb0>)
 8009944:	2200      	movs	r2, #0
 8009946:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009948:	4b25      	ldr	r3, [pc, #148]	; (80099e0 <vTaskSwitchContext+0xb4>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	fab3 f383 	clz	r3, r3
 8009954:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009956:	7afb      	ldrb	r3, [r7, #11]
 8009958:	f1c3 031f 	rsb	r3, r3, #31
 800995c:	617b      	str	r3, [r7, #20]
 800995e:	4921      	ldr	r1, [pc, #132]	; (80099e4 <vTaskSwitchContext+0xb8>)
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	4613      	mov	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4413      	add	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	440b      	add	r3, r1
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d10a      	bne.n	8009988 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	607b      	str	r3, [r7, #4]
}
 8009984:	bf00      	nop
 8009986:	e7fe      	b.n	8009986 <vTaskSwitchContext+0x5a>
 8009988:	697a      	ldr	r2, [r7, #20]
 800998a:	4613      	mov	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4a14      	ldr	r2, [pc, #80]	; (80099e4 <vTaskSwitchContext+0xb8>)
 8009994:	4413      	add	r3, r2
 8009996:	613b      	str	r3, [r7, #16]
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	685a      	ldr	r2, [r3, #4]
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	605a      	str	r2, [r3, #4]
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	685a      	ldr	r2, [r3, #4]
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	3308      	adds	r3, #8
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d104      	bne.n	80099b8 <vTaskSwitchContext+0x8c>
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	685a      	ldr	r2, [r3, #4]
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	605a      	str	r2, [r3, #4]
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	4a0a      	ldr	r2, [pc, #40]	; (80099e8 <vTaskSwitchContext+0xbc>)
 80099c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099c2:	4b09      	ldr	r3, [pc, #36]	; (80099e8 <vTaskSwitchContext+0xbc>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	334c      	adds	r3, #76	; 0x4c
 80099c8:	4a08      	ldr	r2, [pc, #32]	; (80099ec <vTaskSwitchContext+0xc0>)
 80099ca:	6013      	str	r3, [r2, #0]
}
 80099cc:	bf00      	nop
 80099ce:	371c      	adds	r7, #28
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr
 80099d8:	20000ccc 	.word	0x20000ccc
 80099dc:	20000cb8 	.word	0x20000cb8
 80099e0:	20000cac 	.word	0x20000cac
 80099e4:	20000ba8 	.word	0x20000ba8
 80099e8:	20000ba4 	.word	0x20000ba4
 80099ec:	20000010 	.word	0x20000010

080099f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80099f8:	f000 f852 	bl	8009aa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099fc:	4b06      	ldr	r3, [pc, #24]	; (8009a18 <prvIdleTask+0x28>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d9f9      	bls.n	80099f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a04:	4b05      	ldr	r3, [pc, #20]	; (8009a1c <prvIdleTask+0x2c>)
 8009a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a0a:	601a      	str	r2, [r3, #0]
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009a14:	e7f0      	b.n	80099f8 <prvIdleTask+0x8>
 8009a16:	bf00      	nop
 8009a18:	20000ba8 	.word	0x20000ba8
 8009a1c:	e000ed04 	.word	0xe000ed04

08009a20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a26:	2300      	movs	r3, #0
 8009a28:	607b      	str	r3, [r7, #4]
 8009a2a:	e00c      	b.n	8009a46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	4a12      	ldr	r2, [pc, #72]	; (8009a80 <prvInitialiseTaskLists+0x60>)
 8009a38:	4413      	add	r3, r2
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7ff f9f9 	bl	8008e32 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	3301      	adds	r3, #1
 8009a44:	607b      	str	r3, [r7, #4]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2b06      	cmp	r3, #6
 8009a4a:	d9ef      	bls.n	8009a2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a4c:	480d      	ldr	r0, [pc, #52]	; (8009a84 <prvInitialiseTaskLists+0x64>)
 8009a4e:	f7ff f9f0 	bl	8008e32 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a52:	480d      	ldr	r0, [pc, #52]	; (8009a88 <prvInitialiseTaskLists+0x68>)
 8009a54:	f7ff f9ed 	bl	8008e32 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a58:	480c      	ldr	r0, [pc, #48]	; (8009a8c <prvInitialiseTaskLists+0x6c>)
 8009a5a:	f7ff f9ea 	bl	8008e32 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a5e:	480c      	ldr	r0, [pc, #48]	; (8009a90 <prvInitialiseTaskLists+0x70>)
 8009a60:	f7ff f9e7 	bl	8008e32 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a64:	480b      	ldr	r0, [pc, #44]	; (8009a94 <prvInitialiseTaskLists+0x74>)
 8009a66:	f7ff f9e4 	bl	8008e32 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a6a:	4b0b      	ldr	r3, [pc, #44]	; (8009a98 <prvInitialiseTaskLists+0x78>)
 8009a6c:	4a05      	ldr	r2, [pc, #20]	; (8009a84 <prvInitialiseTaskLists+0x64>)
 8009a6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a70:	4b0a      	ldr	r3, [pc, #40]	; (8009a9c <prvInitialiseTaskLists+0x7c>)
 8009a72:	4a05      	ldr	r2, [pc, #20]	; (8009a88 <prvInitialiseTaskLists+0x68>)
 8009a74:	601a      	str	r2, [r3, #0]
}
 8009a76:	bf00      	nop
 8009a78:	3708      	adds	r7, #8
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	20000ba8 	.word	0x20000ba8
 8009a84:	20000c34 	.word	0x20000c34
 8009a88:	20000c48 	.word	0x20000c48
 8009a8c:	20000c64 	.word	0x20000c64
 8009a90:	20000c78 	.word	0x20000c78
 8009a94:	20000c90 	.word	0x20000c90
 8009a98:	20000c5c 	.word	0x20000c5c
 8009a9c:	20000c60 	.word	0x20000c60

08009aa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009aa6:	e019      	b.n	8009adc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009aa8:	f000 faec 	bl	800a084 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aac:	4b10      	ldr	r3, [pc, #64]	; (8009af0 <prvCheckTasksWaitingTermination+0x50>)
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7ff fa44 	bl	8008f46 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009abe:	4b0d      	ldr	r3, [pc, #52]	; (8009af4 <prvCheckTasksWaitingTermination+0x54>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	4a0b      	ldr	r2, [pc, #44]	; (8009af4 <prvCheckTasksWaitingTermination+0x54>)
 8009ac6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ac8:	4b0b      	ldr	r3, [pc, #44]	; (8009af8 <prvCheckTasksWaitingTermination+0x58>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	3b01      	subs	r3, #1
 8009ace:	4a0a      	ldr	r2, [pc, #40]	; (8009af8 <prvCheckTasksWaitingTermination+0x58>)
 8009ad0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ad2:	f000 fb07 	bl	800a0e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f810 	bl	8009afc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009adc:	4b06      	ldr	r3, [pc, #24]	; (8009af8 <prvCheckTasksWaitingTermination+0x58>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1e1      	bne.n	8009aa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	20000c78 	.word	0x20000c78
 8009af4:	20000ca4 	.word	0x20000ca4
 8009af8:	20000c8c 	.word	0x20000c8c

08009afc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	334c      	adds	r3, #76	; 0x4c
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f001 f835 	bl	800ab78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d108      	bne.n	8009b2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 fc9f 	bl	800a460 <vPortFree>
				vPortFree( pxTCB );
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fc9c 	bl	800a460 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b28:	e018      	b.n	8009b5c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d103      	bne.n	8009b3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fc93 	bl	800a460 <vPortFree>
	}
 8009b3a:	e00f      	b.n	8009b5c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d00a      	beq.n	8009b5c <prvDeleteTCB+0x60>
	__asm volatile
 8009b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	60fb      	str	r3, [r7, #12]
}
 8009b58:	bf00      	nop
 8009b5a:	e7fe      	b.n	8009b5a <prvDeleteTCB+0x5e>
	}
 8009b5c:	bf00      	nop
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b6a:	4b0c      	ldr	r3, [pc, #48]	; (8009b9c <prvResetNextTaskUnblockTime+0x38>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d104      	bne.n	8009b7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b74:	4b0a      	ldr	r3, [pc, #40]	; (8009ba0 <prvResetNextTaskUnblockTime+0x3c>)
 8009b76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b7c:	e008      	b.n	8009b90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b7e:	4b07      	ldr	r3, [pc, #28]	; (8009b9c <prvResetNextTaskUnblockTime+0x38>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	4a04      	ldr	r2, [pc, #16]	; (8009ba0 <prvResetNextTaskUnblockTime+0x3c>)
 8009b8e:	6013      	str	r3, [r2, #0]
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	20000c5c 	.word	0x20000c5c
 8009ba0:	20000cc4 	.word	0x20000cc4

08009ba4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8009bae:	f000 fa69 	bl	800a084 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8009bb2:	4b20      	ldr	r3, [pc, #128]	; (8009c34 <ulTaskNotifyTake+0x90>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d113      	bne.n	8009be6 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009bbe:	4b1d      	ldr	r3, [pc, #116]	; (8009c34 <ulTaskNotifyTake+0x90>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00b      	beq.n	8009be6 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009bce:	2101      	movs	r1, #1
 8009bd0:	6838      	ldr	r0, [r7, #0]
 8009bd2:	f000 f8c7 	bl	8009d64 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009bd6:	4b18      	ldr	r3, [pc, #96]	; (8009c38 <ulTaskNotifyTake+0x94>)
 8009bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bdc:	601a      	str	r2, [r3, #0]
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009be6:	f000 fa7d 	bl	800a0e4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009bea:	f000 fa4b 	bl	800a084 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8009bee:	4b11      	ldr	r3, [pc, #68]	; (8009c34 <ulTaskNotifyTake+0x90>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009bf6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00e      	beq.n	8009c1c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d005      	beq.n	8009c10 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8009c04:	4b0b      	ldr	r3, [pc, #44]	; (8009c34 <ulTaskNotifyTake+0x90>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8009c0e:	e005      	b.n	8009c1c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8009c10:	4b08      	ldr	r3, [pc, #32]	; (8009c34 <ulTaskNotifyTake+0x90>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	3a01      	subs	r2, #1
 8009c18:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c1c:	4b05      	ldr	r3, [pc, #20]	; (8009c34 <ulTaskNotifyTake+0x90>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8009c26:	f000 fa5d 	bl	800a0e4 <vPortExitCritical>

		return ulReturn;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
	}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	20000ba4 	.word	0x20000ba4
 8009c38:	e000ed04 	.word	0xe000ed04

08009c3c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b08a      	sub	sp, #40	; 0x28
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10a      	bne.n	8009c62 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8009c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c50:	f383 8811 	msr	BASEPRI, r3
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	61bb      	str	r3, [r7, #24]
}
 8009c5e:	bf00      	nop
 8009c60:	e7fe      	b.n	8009c60 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c62:	f000 faf1 	bl	800a248 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	627b      	str	r3, [r7, #36]	; 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c6a:	f3ef 8211 	mrs	r2, BASEPRI
 8009c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	617a      	str	r2, [r7, #20]
 8009c80:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009c82:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c84:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c88:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009c8c:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	2202      	movs	r2, #2
 8009c92:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8009c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009c9c:	1c5a      	adds	r2, r3, #1
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009ca4:	7ffb      	ldrb	r3, [r7, #31]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d145      	bne.n	8009d36 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00a      	beq.n	8009cc8 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8009cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb6:	f383 8811 	msr	BASEPRI, r3
 8009cba:	f3bf 8f6f 	isb	sy
 8009cbe:	f3bf 8f4f 	dsb	sy
 8009cc2:	60fb      	str	r3, [r7, #12]
}
 8009cc4:	bf00      	nop
 8009cc6:	e7fe      	b.n	8009cc6 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cc8:	4b20      	ldr	r3, [pc, #128]	; (8009d4c <vTaskNotifyGiveFromISR+0x110>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d11c      	bne.n	8009d0a <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	3304      	adds	r3, #4
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7ff f936 	bl	8008f46 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cde:	2201      	movs	r2, #1
 8009ce0:	409a      	lsls	r2, r3
 8009ce2:	4b1b      	ldr	r3, [pc, #108]	; (8009d50 <vTaskNotifyGiveFromISR+0x114>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	4a19      	ldr	r2, [pc, #100]	; (8009d50 <vTaskNotifyGiveFromISR+0x114>)
 8009cea:	6013      	str	r3, [r2, #0]
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4413      	add	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4a16      	ldr	r2, [pc, #88]	; (8009d54 <vTaskNotifyGiveFromISR+0x118>)
 8009cfa:	441a      	add	r2, r3
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfe:	3304      	adds	r3, #4
 8009d00:	4619      	mov	r1, r3
 8009d02:	4610      	mov	r0, r2
 8009d04:	f7ff f8c2 	bl	8008e8c <vListInsertEnd>
 8009d08:	e005      	b.n	8009d16 <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0c:	3318      	adds	r3, #24
 8009d0e:	4619      	mov	r1, r3
 8009d10:	4811      	ldr	r0, [pc, #68]	; (8009d58 <vTaskNotifyGiveFromISR+0x11c>)
 8009d12:	f7ff f8bb 	bl	8008e8c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d1a:	4b10      	ldr	r3, [pc, #64]	; (8009d5c <vTaskNotifyGiveFromISR+0x120>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d908      	bls.n	8009d36 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009d30:	4b0b      	ldr	r3, [pc, #44]	; (8009d60 <vTaskNotifyGiveFromISR+0x124>)
 8009d32:	2201      	movs	r2, #1
 8009d34:	601a      	str	r2, [r3, #0]
 8009d36:	6a3b      	ldr	r3, [r7, #32]
 8009d38:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009d40:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8009d42:	bf00      	nop
 8009d44:	3728      	adds	r7, #40	; 0x28
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	20000ccc 	.word	0x20000ccc
 8009d50:	20000cac 	.word	0x20000cac
 8009d54:	20000ba8 	.word	0x20000ba8
 8009d58:	20000c64 	.word	0x20000c64
 8009d5c:	20000ba4 	.word	0x20000ba4
 8009d60:	20000cb8 	.word	0x20000cb8

08009d64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d6e:	4b29      	ldr	r3, [pc, #164]	; (8009e14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d74:	4b28      	ldr	r3, [pc, #160]	; (8009e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	3304      	adds	r3, #4
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7ff f8e3 	bl	8008f46 <uxListRemove>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d10b      	bne.n	8009d9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009d86:	4b24      	ldr	r3, [pc, #144]	; (8009e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d92:	43da      	mvns	r2, r3
 8009d94:	4b21      	ldr	r3, [pc, #132]	; (8009e1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4013      	ands	r3, r2
 8009d9a:	4a20      	ldr	r2, [pc, #128]	; (8009e1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009d9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009da4:	d10a      	bne.n	8009dbc <prvAddCurrentTaskToDelayedList+0x58>
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d007      	beq.n	8009dbc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dac:	4b1a      	ldr	r3, [pc, #104]	; (8009e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3304      	adds	r3, #4
 8009db2:	4619      	mov	r1, r3
 8009db4:	481a      	ldr	r0, [pc, #104]	; (8009e20 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009db6:	f7ff f869 	bl	8008e8c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009dba:	e026      	b.n	8009e0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009dc4:	4b14      	ldr	r3, [pc, #80]	; (8009e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009dcc:	68ba      	ldr	r2, [r7, #8]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d209      	bcs.n	8009de8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dd4:	4b13      	ldr	r3, [pc, #76]	; (8009e24 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	4b0f      	ldr	r3, [pc, #60]	; (8009e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	3304      	adds	r3, #4
 8009dde:	4619      	mov	r1, r3
 8009de0:	4610      	mov	r0, r2
 8009de2:	f7ff f877 	bl	8008ed4 <vListInsert>
}
 8009de6:	e010      	b.n	8009e0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009de8:	4b0f      	ldr	r3, [pc, #60]	; (8009e28 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	4b0a      	ldr	r3, [pc, #40]	; (8009e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	3304      	adds	r3, #4
 8009df2:	4619      	mov	r1, r3
 8009df4:	4610      	mov	r0, r2
 8009df6:	f7ff f86d 	bl	8008ed4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009dfa:	4b0c      	ldr	r3, [pc, #48]	; (8009e2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d202      	bcs.n	8009e0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009e04:	4a09      	ldr	r2, [pc, #36]	; (8009e2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	6013      	str	r3, [r2, #0]
}
 8009e0a:	bf00      	nop
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20000ca8 	.word	0x20000ca8
 8009e18:	20000ba4 	.word	0x20000ba4
 8009e1c:	20000cac 	.word	0x20000cac
 8009e20:	20000c90 	.word	0x20000c90
 8009e24:	20000c60 	.word	0x20000c60
 8009e28:	20000c5c 	.word	0x20000c5c
 8009e2c:	20000cc4 	.word	0x20000cc4

08009e30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	3b04      	subs	r3, #4
 8009e40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009e48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	3b04      	subs	r3, #4
 8009e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	f023 0201 	bic.w	r2, r3, #1
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	3b04      	subs	r3, #4
 8009e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e60:	4a0c      	ldr	r2, [pc, #48]	; (8009e94 <pxPortInitialiseStack+0x64>)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	3b14      	subs	r3, #20
 8009e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	3b04      	subs	r3, #4
 8009e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f06f 0202 	mvn.w	r2, #2
 8009e7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	3b20      	subs	r3, #32
 8009e84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e86:	68fb      	ldr	r3, [r7, #12]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3714      	adds	r7, #20
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr
 8009e94:	08009e99 	.word	0x08009e99

08009e98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ea2:	4b12      	ldr	r3, [pc, #72]	; (8009eec <prvTaskExitError+0x54>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009eaa:	d00a      	beq.n	8009ec2 <prvTaskExitError+0x2a>
	__asm volatile
 8009eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb0:	f383 8811 	msr	BASEPRI, r3
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	60fb      	str	r3, [r7, #12]
}
 8009ebe:	bf00      	nop
 8009ec0:	e7fe      	b.n	8009ec0 <prvTaskExitError+0x28>
	__asm volatile
 8009ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec6:	f383 8811 	msr	BASEPRI, r3
 8009eca:	f3bf 8f6f 	isb	sy
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	60bb      	str	r3, [r7, #8]
}
 8009ed4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ed6:	bf00      	nop
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d0fc      	beq.n	8009ed8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ede:	bf00      	nop
 8009ee0:	bf00      	nop
 8009ee2:	3714      	adds	r7, #20
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr
 8009eec:	2000000c 	.word	0x2000000c

08009ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ef0:	4b07      	ldr	r3, [pc, #28]	; (8009f10 <pxCurrentTCBConst2>)
 8009ef2:	6819      	ldr	r1, [r3, #0]
 8009ef4:	6808      	ldr	r0, [r1, #0]
 8009ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efa:	f380 8809 	msr	PSP, r0
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f04f 0000 	mov.w	r0, #0
 8009f06:	f380 8811 	msr	BASEPRI, r0
 8009f0a:	4770      	bx	lr
 8009f0c:	f3af 8000 	nop.w

08009f10 <pxCurrentTCBConst2>:
 8009f10:	20000ba4 	.word	0x20000ba4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f14:	bf00      	nop
 8009f16:	bf00      	nop

08009f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f18:	4808      	ldr	r0, [pc, #32]	; (8009f3c <prvPortStartFirstTask+0x24>)
 8009f1a:	6800      	ldr	r0, [r0, #0]
 8009f1c:	6800      	ldr	r0, [r0, #0]
 8009f1e:	f380 8808 	msr	MSP, r0
 8009f22:	f04f 0000 	mov.w	r0, #0
 8009f26:	f380 8814 	msr	CONTROL, r0
 8009f2a:	b662      	cpsie	i
 8009f2c:	b661      	cpsie	f
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	f3bf 8f6f 	isb	sy
 8009f36:	df00      	svc	0
 8009f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f3a:	bf00      	nop
 8009f3c:	e000ed08 	.word	0xe000ed08

08009f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009f46:	4b46      	ldr	r3, [pc, #280]	; (800a060 <xPortStartScheduler+0x120>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a46      	ldr	r2, [pc, #280]	; (800a064 <xPortStartScheduler+0x124>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d10a      	bne.n	8009f66 <xPortStartScheduler+0x26>
	__asm volatile
 8009f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f54:	f383 8811 	msr	BASEPRI, r3
 8009f58:	f3bf 8f6f 	isb	sy
 8009f5c:	f3bf 8f4f 	dsb	sy
 8009f60:	613b      	str	r3, [r7, #16]
}
 8009f62:	bf00      	nop
 8009f64:	e7fe      	b.n	8009f64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f66:	4b3e      	ldr	r3, [pc, #248]	; (800a060 <xPortStartScheduler+0x120>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a3f      	ldr	r2, [pc, #252]	; (800a068 <xPortStartScheduler+0x128>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d10a      	bne.n	8009f86 <xPortStartScheduler+0x46>
	__asm volatile
 8009f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f74:	f383 8811 	msr	BASEPRI, r3
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	60fb      	str	r3, [r7, #12]
}
 8009f82:	bf00      	nop
 8009f84:	e7fe      	b.n	8009f84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f86:	4b39      	ldr	r3, [pc, #228]	; (800a06c <xPortStartScheduler+0x12c>)
 8009f88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	22ff      	movs	r2, #255	; 0xff
 8009f96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009fa0:	78fb      	ldrb	r3, [r7, #3]
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009fa8:	b2da      	uxtb	r2, r3
 8009faa:	4b31      	ldr	r3, [pc, #196]	; (800a070 <xPortStartScheduler+0x130>)
 8009fac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009fae:	4b31      	ldr	r3, [pc, #196]	; (800a074 <xPortStartScheduler+0x134>)
 8009fb0:	2207      	movs	r2, #7
 8009fb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fb4:	e009      	b.n	8009fca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009fb6:	4b2f      	ldr	r3, [pc, #188]	; (800a074 <xPortStartScheduler+0x134>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	4a2d      	ldr	r2, [pc, #180]	; (800a074 <xPortStartScheduler+0x134>)
 8009fbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009fc0:	78fb      	ldrb	r3, [r7, #3]
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	005b      	lsls	r3, r3, #1
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fca:	78fb      	ldrb	r3, [r7, #3]
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fd2:	2b80      	cmp	r3, #128	; 0x80
 8009fd4:	d0ef      	beq.n	8009fb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009fd6:	4b27      	ldr	r3, [pc, #156]	; (800a074 <xPortStartScheduler+0x134>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f1c3 0307 	rsb	r3, r3, #7
 8009fde:	2b04      	cmp	r3, #4
 8009fe0:	d00a      	beq.n	8009ff8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	60bb      	str	r3, [r7, #8]
}
 8009ff4:	bf00      	nop
 8009ff6:	e7fe      	b.n	8009ff6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ff8:	4b1e      	ldr	r3, [pc, #120]	; (800a074 <xPortStartScheduler+0x134>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	021b      	lsls	r3, r3, #8
 8009ffe:	4a1d      	ldr	r2, [pc, #116]	; (800a074 <xPortStartScheduler+0x134>)
 800a000:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a002:	4b1c      	ldr	r3, [pc, #112]	; (800a074 <xPortStartScheduler+0x134>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a00a:	4a1a      	ldr	r2, [pc, #104]	; (800a074 <xPortStartScheduler+0x134>)
 800a00c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	b2da      	uxtb	r2, r3
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a016:	4b18      	ldr	r3, [pc, #96]	; (800a078 <xPortStartScheduler+0x138>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a17      	ldr	r2, [pc, #92]	; (800a078 <xPortStartScheduler+0x138>)
 800a01c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a020:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a022:	4b15      	ldr	r3, [pc, #84]	; (800a078 <xPortStartScheduler+0x138>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a14      	ldr	r2, [pc, #80]	; (800a078 <xPortStartScheduler+0x138>)
 800a028:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a02c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a02e:	f000 f8dd 	bl	800a1ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a032:	4b12      	ldr	r3, [pc, #72]	; (800a07c <xPortStartScheduler+0x13c>)
 800a034:	2200      	movs	r2, #0
 800a036:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a038:	f000 f8fc 	bl	800a234 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a03c:	4b10      	ldr	r3, [pc, #64]	; (800a080 <xPortStartScheduler+0x140>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a0f      	ldr	r2, [pc, #60]	; (800a080 <xPortStartScheduler+0x140>)
 800a042:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a046:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a048:	f7ff ff66 	bl	8009f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a04c:	f7ff fc6e 	bl	800992c <vTaskSwitchContext>
	prvTaskExitError();
 800a050:	f7ff ff22 	bl	8009e98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	e000ed00 	.word	0xe000ed00
 800a064:	410fc271 	.word	0x410fc271
 800a068:	410fc270 	.word	0x410fc270
 800a06c:	e000e400 	.word	0xe000e400
 800a070:	20000cd0 	.word	0x20000cd0
 800a074:	20000cd4 	.word	0x20000cd4
 800a078:	e000ed20 	.word	0xe000ed20
 800a07c:	2000000c 	.word	0x2000000c
 800a080:	e000ef34 	.word	0xe000ef34

0800a084 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
	__asm volatile
 800a08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08e:	f383 8811 	msr	BASEPRI, r3
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	f3bf 8f4f 	dsb	sy
 800a09a:	607b      	str	r3, [r7, #4]
}
 800a09c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a09e:	4b0f      	ldr	r3, [pc, #60]	; (800a0dc <vPortEnterCritical+0x58>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	4a0d      	ldr	r2, [pc, #52]	; (800a0dc <vPortEnterCritical+0x58>)
 800a0a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a0a8:	4b0c      	ldr	r3, [pc, #48]	; (800a0dc <vPortEnterCritical+0x58>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d10f      	bne.n	800a0d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a0b0:	4b0b      	ldr	r3, [pc, #44]	; (800a0e0 <vPortEnterCritical+0x5c>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00a      	beq.n	800a0d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	603b      	str	r3, [r7, #0]
}
 800a0cc:	bf00      	nop
 800a0ce:	e7fe      	b.n	800a0ce <vPortEnterCritical+0x4a>
	}
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	2000000c 	.word	0x2000000c
 800a0e0:	e000ed04 	.word	0xe000ed04

0800a0e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a0ea:	4b12      	ldr	r3, [pc, #72]	; (800a134 <vPortExitCritical+0x50>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d10a      	bne.n	800a108 <vPortExitCritical+0x24>
	__asm volatile
 800a0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f6:	f383 8811 	msr	BASEPRI, r3
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	607b      	str	r3, [r7, #4]
}
 800a104:	bf00      	nop
 800a106:	e7fe      	b.n	800a106 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a108:	4b0a      	ldr	r3, [pc, #40]	; (800a134 <vPortExitCritical+0x50>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	3b01      	subs	r3, #1
 800a10e:	4a09      	ldr	r2, [pc, #36]	; (800a134 <vPortExitCritical+0x50>)
 800a110:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a112:	4b08      	ldr	r3, [pc, #32]	; (800a134 <vPortExitCritical+0x50>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d105      	bne.n	800a126 <vPortExitCritical+0x42>
 800a11a:	2300      	movs	r3, #0
 800a11c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	f383 8811 	msr	BASEPRI, r3
}
 800a124:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a126:	bf00      	nop
 800a128:	370c      	adds	r7, #12
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	2000000c 	.word	0x2000000c
	...

0800a140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a140:	f3ef 8009 	mrs	r0, PSP
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	4b15      	ldr	r3, [pc, #84]	; (800a1a0 <pxCurrentTCBConst>)
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	f01e 0f10 	tst.w	lr, #16
 800a150:	bf08      	it	eq
 800a152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15a:	6010      	str	r0, [r2, #0]
 800a15c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a160:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a164:	f380 8811 	msr	BASEPRI, r0
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f7ff fbdc 	bl	800992c <vTaskSwitchContext>
 800a174:	f04f 0000 	mov.w	r0, #0
 800a178:	f380 8811 	msr	BASEPRI, r0
 800a17c:	bc09      	pop	{r0, r3}
 800a17e:	6819      	ldr	r1, [r3, #0]
 800a180:	6808      	ldr	r0, [r1, #0]
 800a182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a186:	f01e 0f10 	tst.w	lr, #16
 800a18a:	bf08      	it	eq
 800a18c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a190:	f380 8809 	msr	PSP, r0
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	f3af 8000 	nop.w

0800a1a0 <pxCurrentTCBConst>:
 800a1a0:	20000ba4 	.word	0x20000ba4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a1a4:	bf00      	nop
 800a1a6:	bf00      	nop

0800a1a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b2:	f383 8811 	msr	BASEPRI, r3
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	607b      	str	r3, [r7, #4]
}
 800a1c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a1c2:	f7ff fafb 	bl	80097bc <xTaskIncrementTick>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d003      	beq.n	800a1d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1cc:	4b06      	ldr	r3, [pc, #24]	; (800a1e8 <SysTick_Handler+0x40>)
 800a1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1d2:	601a      	str	r2, [r3, #0]
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	f383 8811 	msr	BASEPRI, r3
}
 800a1de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a1e0:	bf00      	nop
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	e000ed04 	.word	0xe000ed04

0800a1ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a1f0:	4b0b      	ldr	r3, [pc, #44]	; (800a220 <vPortSetupTimerInterrupt+0x34>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a1f6:	4b0b      	ldr	r3, [pc, #44]	; (800a224 <vPortSetupTimerInterrupt+0x38>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a1fc:	4b0a      	ldr	r3, [pc, #40]	; (800a228 <vPortSetupTimerInterrupt+0x3c>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a0a      	ldr	r2, [pc, #40]	; (800a22c <vPortSetupTimerInterrupt+0x40>)
 800a202:	fba2 2303 	umull	r2, r3, r2, r3
 800a206:	099b      	lsrs	r3, r3, #6
 800a208:	4a09      	ldr	r2, [pc, #36]	; (800a230 <vPortSetupTimerInterrupt+0x44>)
 800a20a:	3b01      	subs	r3, #1
 800a20c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a20e:	4b04      	ldr	r3, [pc, #16]	; (800a220 <vPortSetupTimerInterrupt+0x34>)
 800a210:	2207      	movs	r2, #7
 800a212:	601a      	str	r2, [r3, #0]
}
 800a214:	bf00      	nop
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	e000e010 	.word	0xe000e010
 800a224:	e000e018 	.word	0xe000e018
 800a228:	20000000 	.word	0x20000000
 800a22c:	10624dd3 	.word	0x10624dd3
 800a230:	e000e014 	.word	0xe000e014

0800a234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a234:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a244 <vPortEnableVFP+0x10>
 800a238:	6801      	ldr	r1, [r0, #0]
 800a23a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a23e:	6001      	str	r1, [r0, #0]
 800a240:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a242:	bf00      	nop
 800a244:	e000ed88 	.word	0xe000ed88

0800a248 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a24e:	f3ef 8305 	mrs	r3, IPSR
 800a252:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2b0f      	cmp	r3, #15
 800a258:	d914      	bls.n	800a284 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a25a:	4a17      	ldr	r2, [pc, #92]	; (800a2b8 <vPortValidateInterruptPriority+0x70>)
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	4413      	add	r3, r2
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a264:	4b15      	ldr	r3, [pc, #84]	; (800a2bc <vPortValidateInterruptPriority+0x74>)
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	7afa      	ldrb	r2, [r7, #11]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d20a      	bcs.n	800a284 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	607b      	str	r3, [r7, #4]
}
 800a280:	bf00      	nop
 800a282:	e7fe      	b.n	800a282 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a284:	4b0e      	ldr	r3, [pc, #56]	; (800a2c0 <vPortValidateInterruptPriority+0x78>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a28c:	4b0d      	ldr	r3, [pc, #52]	; (800a2c4 <vPortValidateInterruptPriority+0x7c>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	429a      	cmp	r2, r3
 800a292:	d90a      	bls.n	800a2aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a298:	f383 8811 	msr	BASEPRI, r3
 800a29c:	f3bf 8f6f 	isb	sy
 800a2a0:	f3bf 8f4f 	dsb	sy
 800a2a4:	603b      	str	r3, [r7, #0]
}
 800a2a6:	bf00      	nop
 800a2a8:	e7fe      	b.n	800a2a8 <vPortValidateInterruptPriority+0x60>
	}
 800a2aa:	bf00      	nop
 800a2ac:	3714      	adds	r7, #20
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop
 800a2b8:	e000e3f0 	.word	0xe000e3f0
 800a2bc:	20000cd0 	.word	0x20000cd0
 800a2c0:	e000ed0c 	.word	0xe000ed0c
 800a2c4:	20000cd4 	.word	0x20000cd4

0800a2c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b08a      	sub	sp, #40	; 0x28
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a2d4:	f7ff f9b8 	bl	8009648 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a2d8:	4b5b      	ldr	r3, [pc, #364]	; (800a448 <pvPortMalloc+0x180>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d101      	bne.n	800a2e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a2e0:	f000 f920 	bl	800a524 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a2e4:	4b59      	ldr	r3, [pc, #356]	; (800a44c <pvPortMalloc+0x184>)
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f040 8093 	bne.w	800a418 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d01d      	beq.n	800a334 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a2f8:	2208      	movs	r2, #8
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f003 0307 	and.w	r3, r3, #7
 800a306:	2b00      	cmp	r3, #0
 800a308:	d014      	beq.n	800a334 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f023 0307 	bic.w	r3, r3, #7
 800a310:	3308      	adds	r3, #8
 800a312:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f003 0307 	and.w	r3, r3, #7
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00a      	beq.n	800a334 <pvPortMalloc+0x6c>
	__asm volatile
 800a31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	617b      	str	r3, [r7, #20]
}
 800a330:	bf00      	nop
 800a332:	e7fe      	b.n	800a332 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d06e      	beq.n	800a418 <pvPortMalloc+0x150>
 800a33a:	4b45      	ldr	r3, [pc, #276]	; (800a450 <pvPortMalloc+0x188>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	429a      	cmp	r2, r3
 800a342:	d869      	bhi.n	800a418 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a344:	4b43      	ldr	r3, [pc, #268]	; (800a454 <pvPortMalloc+0x18c>)
 800a346:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a348:	4b42      	ldr	r3, [pc, #264]	; (800a454 <pvPortMalloc+0x18c>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a34e:	e004      	b.n	800a35a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	429a      	cmp	r2, r3
 800a362:	d903      	bls.n	800a36c <pvPortMalloc+0xa4>
 800a364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d1f1      	bne.n	800a350 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a36c:	4b36      	ldr	r3, [pc, #216]	; (800a448 <pvPortMalloc+0x180>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a372:	429a      	cmp	r2, r3
 800a374:	d050      	beq.n	800a418 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a376:	6a3b      	ldr	r3, [r7, #32]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2208      	movs	r2, #8
 800a37c:	4413      	add	r3, r2
 800a37e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	6a3b      	ldr	r3, [r7, #32]
 800a386:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38a:	685a      	ldr	r2, [r3, #4]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	1ad2      	subs	r2, r2, r3
 800a390:	2308      	movs	r3, #8
 800a392:	005b      	lsls	r3, r3, #1
 800a394:	429a      	cmp	r2, r3
 800a396:	d91f      	bls.n	800a3d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4413      	add	r3, r2
 800a39e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	f003 0307 	and.w	r3, r3, #7
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d00a      	beq.n	800a3c0 <pvPortMalloc+0xf8>
	__asm volatile
 800a3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ae:	f383 8811 	msr	BASEPRI, r3
 800a3b2:	f3bf 8f6f 	isb	sy
 800a3b6:	f3bf 8f4f 	dsb	sy
 800a3ba:	613b      	str	r3, [r7, #16]
}
 800a3bc:	bf00      	nop
 800a3be:	e7fe      	b.n	800a3be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	1ad2      	subs	r2, r2, r3
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a3d2:	69b8      	ldr	r0, [r7, #24]
 800a3d4:	f000 f908 	bl	800a5e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a3d8:	4b1d      	ldr	r3, [pc, #116]	; (800a450 <pvPortMalloc+0x188>)
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	4a1b      	ldr	r2, [pc, #108]	; (800a450 <pvPortMalloc+0x188>)
 800a3e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a3e6:	4b1a      	ldr	r3, [pc, #104]	; (800a450 <pvPortMalloc+0x188>)
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	4b1b      	ldr	r3, [pc, #108]	; (800a458 <pvPortMalloc+0x190>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d203      	bcs.n	800a3fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a3f2:	4b17      	ldr	r3, [pc, #92]	; (800a450 <pvPortMalloc+0x188>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a18      	ldr	r2, [pc, #96]	; (800a458 <pvPortMalloc+0x190>)
 800a3f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fc:	685a      	ldr	r2, [r3, #4]
 800a3fe:	4b13      	ldr	r3, [pc, #76]	; (800a44c <pvPortMalloc+0x184>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	431a      	orrs	r2, r3
 800a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a406:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40a:	2200      	movs	r2, #0
 800a40c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a40e:	4b13      	ldr	r3, [pc, #76]	; (800a45c <pvPortMalloc+0x194>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	3301      	adds	r3, #1
 800a414:	4a11      	ldr	r2, [pc, #68]	; (800a45c <pvPortMalloc+0x194>)
 800a416:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a418:	f7ff f924 	bl	8009664 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	f003 0307 	and.w	r3, r3, #7
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00a      	beq.n	800a43c <pvPortMalloc+0x174>
	__asm volatile
 800a426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42a:	f383 8811 	msr	BASEPRI, r3
 800a42e:	f3bf 8f6f 	isb	sy
 800a432:	f3bf 8f4f 	dsb	sy
 800a436:	60fb      	str	r3, [r7, #12]
}
 800a438:	bf00      	nop
 800a43a:	e7fe      	b.n	800a43a <pvPortMalloc+0x172>
	return pvReturn;
 800a43c:	69fb      	ldr	r3, [r7, #28]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3728      	adds	r7, #40	; 0x28
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	200048e0 	.word	0x200048e0
 800a44c:	200048f4 	.word	0x200048f4
 800a450:	200048e4 	.word	0x200048e4
 800a454:	200048d8 	.word	0x200048d8
 800a458:	200048e8 	.word	0x200048e8
 800a45c:	200048ec 	.word	0x200048ec

0800a460 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b086      	sub	sp, #24
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d04d      	beq.n	800a50e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a472:	2308      	movs	r3, #8
 800a474:	425b      	negs	r3, r3
 800a476:	697a      	ldr	r2, [r7, #20]
 800a478:	4413      	add	r3, r2
 800a47a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	685a      	ldr	r2, [r3, #4]
 800a484:	4b24      	ldr	r3, [pc, #144]	; (800a518 <vPortFree+0xb8>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4013      	ands	r3, r2
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10a      	bne.n	800a4a4 <vPortFree+0x44>
	__asm volatile
 800a48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a492:	f383 8811 	msr	BASEPRI, r3
 800a496:	f3bf 8f6f 	isb	sy
 800a49a:	f3bf 8f4f 	dsb	sy
 800a49e:	60fb      	str	r3, [r7, #12]
}
 800a4a0:	bf00      	nop
 800a4a2:	e7fe      	b.n	800a4a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00a      	beq.n	800a4c2 <vPortFree+0x62>
	__asm volatile
 800a4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b0:	f383 8811 	msr	BASEPRI, r3
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	60bb      	str	r3, [r7, #8]
}
 800a4be:	bf00      	nop
 800a4c0:	e7fe      	b.n	800a4c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	685a      	ldr	r2, [r3, #4]
 800a4c6:	4b14      	ldr	r3, [pc, #80]	; (800a518 <vPortFree+0xb8>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d01e      	beq.n	800a50e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d11a      	bne.n	800a50e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	4b0e      	ldr	r3, [pc, #56]	; (800a518 <vPortFree+0xb8>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	43db      	mvns	r3, r3
 800a4e2:	401a      	ands	r2, r3
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a4e8:	f7ff f8ae 	bl	8009648 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	685a      	ldr	r2, [r3, #4]
 800a4f0:	4b0a      	ldr	r3, [pc, #40]	; (800a51c <vPortFree+0xbc>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	4a09      	ldr	r2, [pc, #36]	; (800a51c <vPortFree+0xbc>)
 800a4f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a4fa:	6938      	ldr	r0, [r7, #16]
 800a4fc:	f000 f874 	bl	800a5e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a500:	4b07      	ldr	r3, [pc, #28]	; (800a520 <vPortFree+0xc0>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	3301      	adds	r3, #1
 800a506:	4a06      	ldr	r2, [pc, #24]	; (800a520 <vPortFree+0xc0>)
 800a508:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a50a:	f7ff f8ab 	bl	8009664 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a50e:	bf00      	nop
 800a510:	3718      	adds	r7, #24
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	200048f4 	.word	0x200048f4
 800a51c:	200048e4 	.word	0x200048e4
 800a520:	200048f0 	.word	0x200048f0

0800a524 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a52a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a52e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a530:	4b27      	ldr	r3, [pc, #156]	; (800a5d0 <prvHeapInit+0xac>)
 800a532:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f003 0307 	and.w	r3, r3, #7
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00c      	beq.n	800a558 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	3307      	adds	r3, #7
 800a542:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f023 0307 	bic.w	r3, r3, #7
 800a54a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	4a1f      	ldr	r2, [pc, #124]	; (800a5d0 <prvHeapInit+0xac>)
 800a554:	4413      	add	r3, r2
 800a556:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a55c:	4a1d      	ldr	r2, [pc, #116]	; (800a5d4 <prvHeapInit+0xb0>)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a562:	4b1c      	ldr	r3, [pc, #112]	; (800a5d4 <prvHeapInit+0xb0>)
 800a564:	2200      	movs	r2, #0
 800a566:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	4413      	add	r3, r2
 800a56e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a570:	2208      	movs	r2, #8
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	1a9b      	subs	r3, r3, r2
 800a576:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f023 0307 	bic.w	r3, r3, #7
 800a57e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	4a15      	ldr	r2, [pc, #84]	; (800a5d8 <prvHeapInit+0xb4>)
 800a584:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a586:	4b14      	ldr	r3, [pc, #80]	; (800a5d8 <prvHeapInit+0xb4>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2200      	movs	r2, #0
 800a58c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a58e:	4b12      	ldr	r3, [pc, #72]	; (800a5d8 <prvHeapInit+0xb4>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2200      	movs	r2, #0
 800a594:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	1ad2      	subs	r2, r2, r3
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5a4:	4b0c      	ldr	r3, [pc, #48]	; (800a5d8 <prvHeapInit+0xb4>)
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	4a0a      	ldr	r2, [pc, #40]	; (800a5dc <prvHeapInit+0xb8>)
 800a5b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	4a09      	ldr	r2, [pc, #36]	; (800a5e0 <prvHeapInit+0xbc>)
 800a5ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5bc:	4b09      	ldr	r3, [pc, #36]	; (800a5e4 <prvHeapInit+0xc0>)
 800a5be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a5c2:	601a      	str	r2, [r3, #0]
}
 800a5c4:	bf00      	nop
 800a5c6:	3714      	adds	r7, #20
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr
 800a5d0:	20000cd8 	.word	0x20000cd8
 800a5d4:	200048d8 	.word	0x200048d8
 800a5d8:	200048e0 	.word	0x200048e0
 800a5dc:	200048e8 	.word	0x200048e8
 800a5e0:	200048e4 	.word	0x200048e4
 800a5e4:	200048f4 	.word	0x200048f4

0800a5e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b085      	sub	sp, #20
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a5f0:	4b28      	ldr	r3, [pc, #160]	; (800a694 <prvInsertBlockIntoFreeList+0xac>)
 800a5f2:	60fb      	str	r3, [r7, #12]
 800a5f4:	e002      	b.n	800a5fc <prvInsertBlockIntoFreeList+0x14>
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	60fb      	str	r3, [r7, #12]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	429a      	cmp	r2, r3
 800a604:	d8f7      	bhi.n	800a5f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	68ba      	ldr	r2, [r7, #8]
 800a610:	4413      	add	r3, r2
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	429a      	cmp	r2, r3
 800a616:	d108      	bne.n	800a62a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	685a      	ldr	r2, [r3, #4]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	441a      	add	r2, r3
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	68ba      	ldr	r2, [r7, #8]
 800a634:	441a      	add	r2, r3
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d118      	bne.n	800a670 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	4b15      	ldr	r3, [pc, #84]	; (800a698 <prvInsertBlockIntoFreeList+0xb0>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	429a      	cmp	r2, r3
 800a648:	d00d      	beq.n	800a666 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	685a      	ldr	r2, [r3, #4]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	441a      	add	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	601a      	str	r2, [r3, #0]
 800a664:	e008      	b.n	800a678 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a666:	4b0c      	ldr	r3, [pc, #48]	; (800a698 <prvInsertBlockIntoFreeList+0xb0>)
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	601a      	str	r2, [r3, #0]
 800a66e:	e003      	b.n	800a678 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d002      	beq.n	800a686 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a686:	bf00      	nop
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	200048d8 	.word	0x200048d8
 800a698:	200048e0 	.word	0x200048e0

0800a69c <atof>:
 800a69c:	2100      	movs	r1, #0
 800a69e:	f001 b951 	b.w	800b944 <strtod>
	...

0800a6a4 <__errno>:
 800a6a4:	4b01      	ldr	r3, [pc, #4]	; (800a6ac <__errno+0x8>)
 800a6a6:	6818      	ldr	r0, [r3, #0]
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop
 800a6ac:	20000010 	.word	0x20000010

0800a6b0 <std>:
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	b510      	push	{r4, lr}
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	e9c0 3300 	strd	r3, r3, [r0]
 800a6ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6be:	6083      	str	r3, [r0, #8]
 800a6c0:	8181      	strh	r1, [r0, #12]
 800a6c2:	6643      	str	r3, [r0, #100]	; 0x64
 800a6c4:	81c2      	strh	r2, [r0, #14]
 800a6c6:	6183      	str	r3, [r0, #24]
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	2208      	movs	r2, #8
 800a6cc:	305c      	adds	r0, #92	; 0x5c
 800a6ce:	f000 f91a 	bl	800a906 <memset>
 800a6d2:	4b05      	ldr	r3, [pc, #20]	; (800a6e8 <std+0x38>)
 800a6d4:	6263      	str	r3, [r4, #36]	; 0x24
 800a6d6:	4b05      	ldr	r3, [pc, #20]	; (800a6ec <std+0x3c>)
 800a6d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a6da:	4b05      	ldr	r3, [pc, #20]	; (800a6f0 <std+0x40>)
 800a6dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a6de:	4b05      	ldr	r3, [pc, #20]	; (800a6f4 <std+0x44>)
 800a6e0:	6224      	str	r4, [r4, #32]
 800a6e2:	6323      	str	r3, [r4, #48]	; 0x30
 800a6e4:	bd10      	pop	{r4, pc}
 800a6e6:	bf00      	nop
 800a6e8:	0800ac51 	.word	0x0800ac51
 800a6ec:	0800ac73 	.word	0x0800ac73
 800a6f0:	0800acab 	.word	0x0800acab
 800a6f4:	0800accf 	.word	0x0800accf

0800a6f8 <_cleanup_r>:
 800a6f8:	4901      	ldr	r1, [pc, #4]	; (800a700 <_cleanup_r+0x8>)
 800a6fa:	f000 b8af 	b.w	800a85c <_fwalk_reent>
 800a6fe:	bf00      	nop
 800a700:	0800bc2d 	.word	0x0800bc2d

0800a704 <__sfmoreglue>:
 800a704:	b570      	push	{r4, r5, r6, lr}
 800a706:	2268      	movs	r2, #104	; 0x68
 800a708:	1e4d      	subs	r5, r1, #1
 800a70a:	4355      	muls	r5, r2
 800a70c:	460e      	mov	r6, r1
 800a70e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a712:	f000 f921 	bl	800a958 <_malloc_r>
 800a716:	4604      	mov	r4, r0
 800a718:	b140      	cbz	r0, 800a72c <__sfmoreglue+0x28>
 800a71a:	2100      	movs	r1, #0
 800a71c:	e9c0 1600 	strd	r1, r6, [r0]
 800a720:	300c      	adds	r0, #12
 800a722:	60a0      	str	r0, [r4, #8]
 800a724:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a728:	f000 f8ed 	bl	800a906 <memset>
 800a72c:	4620      	mov	r0, r4
 800a72e:	bd70      	pop	{r4, r5, r6, pc}

0800a730 <__sfp_lock_acquire>:
 800a730:	4801      	ldr	r0, [pc, #4]	; (800a738 <__sfp_lock_acquire+0x8>)
 800a732:	f000 b8d8 	b.w	800a8e6 <__retarget_lock_acquire_recursive>
 800a736:	bf00      	nop
 800a738:	200048f9 	.word	0x200048f9

0800a73c <__sfp_lock_release>:
 800a73c:	4801      	ldr	r0, [pc, #4]	; (800a744 <__sfp_lock_release+0x8>)
 800a73e:	f000 b8d3 	b.w	800a8e8 <__retarget_lock_release_recursive>
 800a742:	bf00      	nop
 800a744:	200048f9 	.word	0x200048f9

0800a748 <__sinit_lock_acquire>:
 800a748:	4801      	ldr	r0, [pc, #4]	; (800a750 <__sinit_lock_acquire+0x8>)
 800a74a:	f000 b8cc 	b.w	800a8e6 <__retarget_lock_acquire_recursive>
 800a74e:	bf00      	nop
 800a750:	200048fa 	.word	0x200048fa

0800a754 <__sinit_lock_release>:
 800a754:	4801      	ldr	r0, [pc, #4]	; (800a75c <__sinit_lock_release+0x8>)
 800a756:	f000 b8c7 	b.w	800a8e8 <__retarget_lock_release_recursive>
 800a75a:	bf00      	nop
 800a75c:	200048fa 	.word	0x200048fa

0800a760 <__sinit>:
 800a760:	b510      	push	{r4, lr}
 800a762:	4604      	mov	r4, r0
 800a764:	f7ff fff0 	bl	800a748 <__sinit_lock_acquire>
 800a768:	69a3      	ldr	r3, [r4, #24]
 800a76a:	b11b      	cbz	r3, 800a774 <__sinit+0x14>
 800a76c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a770:	f7ff bff0 	b.w	800a754 <__sinit_lock_release>
 800a774:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a778:	6523      	str	r3, [r4, #80]	; 0x50
 800a77a:	4b13      	ldr	r3, [pc, #76]	; (800a7c8 <__sinit+0x68>)
 800a77c:	4a13      	ldr	r2, [pc, #76]	; (800a7cc <__sinit+0x6c>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	62a2      	str	r2, [r4, #40]	; 0x28
 800a782:	42a3      	cmp	r3, r4
 800a784:	bf04      	itt	eq
 800a786:	2301      	moveq	r3, #1
 800a788:	61a3      	streq	r3, [r4, #24]
 800a78a:	4620      	mov	r0, r4
 800a78c:	f000 f820 	bl	800a7d0 <__sfp>
 800a790:	6060      	str	r0, [r4, #4]
 800a792:	4620      	mov	r0, r4
 800a794:	f000 f81c 	bl	800a7d0 <__sfp>
 800a798:	60a0      	str	r0, [r4, #8]
 800a79a:	4620      	mov	r0, r4
 800a79c:	f000 f818 	bl	800a7d0 <__sfp>
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	60e0      	str	r0, [r4, #12]
 800a7a4:	2104      	movs	r1, #4
 800a7a6:	6860      	ldr	r0, [r4, #4]
 800a7a8:	f7ff ff82 	bl	800a6b0 <std>
 800a7ac:	68a0      	ldr	r0, [r4, #8]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	2109      	movs	r1, #9
 800a7b2:	f7ff ff7d 	bl	800a6b0 <std>
 800a7b6:	68e0      	ldr	r0, [r4, #12]
 800a7b8:	2202      	movs	r2, #2
 800a7ba:	2112      	movs	r1, #18
 800a7bc:	f7ff ff78 	bl	800a6b0 <std>
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	61a3      	str	r3, [r4, #24]
 800a7c4:	e7d2      	b.n	800a76c <__sinit+0xc>
 800a7c6:	bf00      	nop
 800a7c8:	0800e04c 	.word	0x0800e04c
 800a7cc:	0800a6f9 	.word	0x0800a6f9

0800a7d0 <__sfp>:
 800a7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d2:	4607      	mov	r7, r0
 800a7d4:	f7ff ffac 	bl	800a730 <__sfp_lock_acquire>
 800a7d8:	4b1e      	ldr	r3, [pc, #120]	; (800a854 <__sfp+0x84>)
 800a7da:	681e      	ldr	r6, [r3, #0]
 800a7dc:	69b3      	ldr	r3, [r6, #24]
 800a7de:	b913      	cbnz	r3, 800a7e6 <__sfp+0x16>
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f7ff ffbd 	bl	800a760 <__sinit>
 800a7e6:	3648      	adds	r6, #72	; 0x48
 800a7e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	d503      	bpl.n	800a7f8 <__sfp+0x28>
 800a7f0:	6833      	ldr	r3, [r6, #0]
 800a7f2:	b30b      	cbz	r3, 800a838 <__sfp+0x68>
 800a7f4:	6836      	ldr	r6, [r6, #0]
 800a7f6:	e7f7      	b.n	800a7e8 <__sfp+0x18>
 800a7f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a7fc:	b9d5      	cbnz	r5, 800a834 <__sfp+0x64>
 800a7fe:	4b16      	ldr	r3, [pc, #88]	; (800a858 <__sfp+0x88>)
 800a800:	60e3      	str	r3, [r4, #12]
 800a802:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a806:	6665      	str	r5, [r4, #100]	; 0x64
 800a808:	f000 f86c 	bl	800a8e4 <__retarget_lock_init_recursive>
 800a80c:	f7ff ff96 	bl	800a73c <__sfp_lock_release>
 800a810:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a814:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a818:	6025      	str	r5, [r4, #0]
 800a81a:	61a5      	str	r5, [r4, #24]
 800a81c:	2208      	movs	r2, #8
 800a81e:	4629      	mov	r1, r5
 800a820:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a824:	f000 f86f 	bl	800a906 <memset>
 800a828:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a82c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a830:	4620      	mov	r0, r4
 800a832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a834:	3468      	adds	r4, #104	; 0x68
 800a836:	e7d9      	b.n	800a7ec <__sfp+0x1c>
 800a838:	2104      	movs	r1, #4
 800a83a:	4638      	mov	r0, r7
 800a83c:	f7ff ff62 	bl	800a704 <__sfmoreglue>
 800a840:	4604      	mov	r4, r0
 800a842:	6030      	str	r0, [r6, #0]
 800a844:	2800      	cmp	r0, #0
 800a846:	d1d5      	bne.n	800a7f4 <__sfp+0x24>
 800a848:	f7ff ff78 	bl	800a73c <__sfp_lock_release>
 800a84c:	230c      	movs	r3, #12
 800a84e:	603b      	str	r3, [r7, #0]
 800a850:	e7ee      	b.n	800a830 <__sfp+0x60>
 800a852:	bf00      	nop
 800a854:	0800e04c 	.word	0x0800e04c
 800a858:	ffff0001 	.word	0xffff0001

0800a85c <_fwalk_reent>:
 800a85c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a860:	4606      	mov	r6, r0
 800a862:	4688      	mov	r8, r1
 800a864:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a868:	2700      	movs	r7, #0
 800a86a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a86e:	f1b9 0901 	subs.w	r9, r9, #1
 800a872:	d505      	bpl.n	800a880 <_fwalk_reent+0x24>
 800a874:	6824      	ldr	r4, [r4, #0]
 800a876:	2c00      	cmp	r4, #0
 800a878:	d1f7      	bne.n	800a86a <_fwalk_reent+0xe>
 800a87a:	4638      	mov	r0, r7
 800a87c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a880:	89ab      	ldrh	r3, [r5, #12]
 800a882:	2b01      	cmp	r3, #1
 800a884:	d907      	bls.n	800a896 <_fwalk_reent+0x3a>
 800a886:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a88a:	3301      	adds	r3, #1
 800a88c:	d003      	beq.n	800a896 <_fwalk_reent+0x3a>
 800a88e:	4629      	mov	r1, r5
 800a890:	4630      	mov	r0, r6
 800a892:	47c0      	blx	r8
 800a894:	4307      	orrs	r7, r0
 800a896:	3568      	adds	r5, #104	; 0x68
 800a898:	e7e9      	b.n	800a86e <_fwalk_reent+0x12>
	...

0800a89c <__libc_init_array>:
 800a89c:	b570      	push	{r4, r5, r6, lr}
 800a89e:	4d0d      	ldr	r5, [pc, #52]	; (800a8d4 <__libc_init_array+0x38>)
 800a8a0:	4c0d      	ldr	r4, [pc, #52]	; (800a8d8 <__libc_init_array+0x3c>)
 800a8a2:	1b64      	subs	r4, r4, r5
 800a8a4:	10a4      	asrs	r4, r4, #2
 800a8a6:	2600      	movs	r6, #0
 800a8a8:	42a6      	cmp	r6, r4
 800a8aa:	d109      	bne.n	800a8c0 <__libc_init_array+0x24>
 800a8ac:	4d0b      	ldr	r5, [pc, #44]	; (800a8dc <__libc_init_array+0x40>)
 800a8ae:	4c0c      	ldr	r4, [pc, #48]	; (800a8e0 <__libc_init_array+0x44>)
 800a8b0:	f003 f954 	bl	800db5c <_init>
 800a8b4:	1b64      	subs	r4, r4, r5
 800a8b6:	10a4      	asrs	r4, r4, #2
 800a8b8:	2600      	movs	r6, #0
 800a8ba:	42a6      	cmp	r6, r4
 800a8bc:	d105      	bne.n	800a8ca <__libc_init_array+0x2e>
 800a8be:	bd70      	pop	{r4, r5, r6, pc}
 800a8c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8c4:	4798      	blx	r3
 800a8c6:	3601      	adds	r6, #1
 800a8c8:	e7ee      	b.n	800a8a8 <__libc_init_array+0xc>
 800a8ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ce:	4798      	blx	r3
 800a8d0:	3601      	adds	r6, #1
 800a8d2:	e7f2      	b.n	800a8ba <__libc_init_array+0x1e>
 800a8d4:	0800e498 	.word	0x0800e498
 800a8d8:	0800e498 	.word	0x0800e498
 800a8dc:	0800e498 	.word	0x0800e498
 800a8e0:	0800e49c 	.word	0x0800e49c

0800a8e4 <__retarget_lock_init_recursive>:
 800a8e4:	4770      	bx	lr

0800a8e6 <__retarget_lock_acquire_recursive>:
 800a8e6:	4770      	bx	lr

0800a8e8 <__retarget_lock_release_recursive>:
 800a8e8:	4770      	bx	lr

0800a8ea <memcpy>:
 800a8ea:	440a      	add	r2, r1
 800a8ec:	4291      	cmp	r1, r2
 800a8ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a8f2:	d100      	bne.n	800a8f6 <memcpy+0xc>
 800a8f4:	4770      	bx	lr
 800a8f6:	b510      	push	{r4, lr}
 800a8f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a900:	4291      	cmp	r1, r2
 800a902:	d1f9      	bne.n	800a8f8 <memcpy+0xe>
 800a904:	bd10      	pop	{r4, pc}

0800a906 <memset>:
 800a906:	4402      	add	r2, r0
 800a908:	4603      	mov	r3, r0
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d100      	bne.n	800a910 <memset+0xa>
 800a90e:	4770      	bx	lr
 800a910:	f803 1b01 	strb.w	r1, [r3], #1
 800a914:	e7f9      	b.n	800a90a <memset+0x4>
	...

0800a918 <sbrk_aligned>:
 800a918:	b570      	push	{r4, r5, r6, lr}
 800a91a:	4e0e      	ldr	r6, [pc, #56]	; (800a954 <sbrk_aligned+0x3c>)
 800a91c:	460c      	mov	r4, r1
 800a91e:	6831      	ldr	r1, [r6, #0]
 800a920:	4605      	mov	r5, r0
 800a922:	b911      	cbnz	r1, 800a92a <sbrk_aligned+0x12>
 800a924:	f000 f984 	bl	800ac30 <_sbrk_r>
 800a928:	6030      	str	r0, [r6, #0]
 800a92a:	4621      	mov	r1, r4
 800a92c:	4628      	mov	r0, r5
 800a92e:	f000 f97f 	bl	800ac30 <_sbrk_r>
 800a932:	1c43      	adds	r3, r0, #1
 800a934:	d00a      	beq.n	800a94c <sbrk_aligned+0x34>
 800a936:	1cc4      	adds	r4, r0, #3
 800a938:	f024 0403 	bic.w	r4, r4, #3
 800a93c:	42a0      	cmp	r0, r4
 800a93e:	d007      	beq.n	800a950 <sbrk_aligned+0x38>
 800a940:	1a21      	subs	r1, r4, r0
 800a942:	4628      	mov	r0, r5
 800a944:	f000 f974 	bl	800ac30 <_sbrk_r>
 800a948:	3001      	adds	r0, #1
 800a94a:	d101      	bne.n	800a950 <sbrk_aligned+0x38>
 800a94c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a950:	4620      	mov	r0, r4
 800a952:	bd70      	pop	{r4, r5, r6, pc}
 800a954:	20004900 	.word	0x20004900

0800a958 <_malloc_r>:
 800a958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a95c:	1ccd      	adds	r5, r1, #3
 800a95e:	f025 0503 	bic.w	r5, r5, #3
 800a962:	3508      	adds	r5, #8
 800a964:	2d0c      	cmp	r5, #12
 800a966:	bf38      	it	cc
 800a968:	250c      	movcc	r5, #12
 800a96a:	2d00      	cmp	r5, #0
 800a96c:	4607      	mov	r7, r0
 800a96e:	db01      	blt.n	800a974 <_malloc_r+0x1c>
 800a970:	42a9      	cmp	r1, r5
 800a972:	d905      	bls.n	800a980 <_malloc_r+0x28>
 800a974:	230c      	movs	r3, #12
 800a976:	603b      	str	r3, [r7, #0]
 800a978:	2600      	movs	r6, #0
 800a97a:	4630      	mov	r0, r6
 800a97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a980:	4e2e      	ldr	r6, [pc, #184]	; (800aa3c <_malloc_r+0xe4>)
 800a982:	f001 fd89 	bl	800c498 <__malloc_lock>
 800a986:	6833      	ldr	r3, [r6, #0]
 800a988:	461c      	mov	r4, r3
 800a98a:	bb34      	cbnz	r4, 800a9da <_malloc_r+0x82>
 800a98c:	4629      	mov	r1, r5
 800a98e:	4638      	mov	r0, r7
 800a990:	f7ff ffc2 	bl	800a918 <sbrk_aligned>
 800a994:	1c43      	adds	r3, r0, #1
 800a996:	4604      	mov	r4, r0
 800a998:	d14d      	bne.n	800aa36 <_malloc_r+0xde>
 800a99a:	6834      	ldr	r4, [r6, #0]
 800a99c:	4626      	mov	r6, r4
 800a99e:	2e00      	cmp	r6, #0
 800a9a0:	d140      	bne.n	800aa24 <_malloc_r+0xcc>
 800a9a2:	6823      	ldr	r3, [r4, #0]
 800a9a4:	4631      	mov	r1, r6
 800a9a6:	4638      	mov	r0, r7
 800a9a8:	eb04 0803 	add.w	r8, r4, r3
 800a9ac:	f000 f940 	bl	800ac30 <_sbrk_r>
 800a9b0:	4580      	cmp	r8, r0
 800a9b2:	d13a      	bne.n	800aa2a <_malloc_r+0xd2>
 800a9b4:	6821      	ldr	r1, [r4, #0]
 800a9b6:	3503      	adds	r5, #3
 800a9b8:	1a6d      	subs	r5, r5, r1
 800a9ba:	f025 0503 	bic.w	r5, r5, #3
 800a9be:	3508      	adds	r5, #8
 800a9c0:	2d0c      	cmp	r5, #12
 800a9c2:	bf38      	it	cc
 800a9c4:	250c      	movcc	r5, #12
 800a9c6:	4629      	mov	r1, r5
 800a9c8:	4638      	mov	r0, r7
 800a9ca:	f7ff ffa5 	bl	800a918 <sbrk_aligned>
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	d02b      	beq.n	800aa2a <_malloc_r+0xd2>
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	442b      	add	r3, r5
 800a9d6:	6023      	str	r3, [r4, #0]
 800a9d8:	e00e      	b.n	800a9f8 <_malloc_r+0xa0>
 800a9da:	6822      	ldr	r2, [r4, #0]
 800a9dc:	1b52      	subs	r2, r2, r5
 800a9de:	d41e      	bmi.n	800aa1e <_malloc_r+0xc6>
 800a9e0:	2a0b      	cmp	r2, #11
 800a9e2:	d916      	bls.n	800aa12 <_malloc_r+0xba>
 800a9e4:	1961      	adds	r1, r4, r5
 800a9e6:	42a3      	cmp	r3, r4
 800a9e8:	6025      	str	r5, [r4, #0]
 800a9ea:	bf18      	it	ne
 800a9ec:	6059      	strne	r1, [r3, #4]
 800a9ee:	6863      	ldr	r3, [r4, #4]
 800a9f0:	bf08      	it	eq
 800a9f2:	6031      	streq	r1, [r6, #0]
 800a9f4:	5162      	str	r2, [r4, r5]
 800a9f6:	604b      	str	r3, [r1, #4]
 800a9f8:	4638      	mov	r0, r7
 800a9fa:	f104 060b 	add.w	r6, r4, #11
 800a9fe:	f001 fd51 	bl	800c4a4 <__malloc_unlock>
 800aa02:	f026 0607 	bic.w	r6, r6, #7
 800aa06:	1d23      	adds	r3, r4, #4
 800aa08:	1af2      	subs	r2, r6, r3
 800aa0a:	d0b6      	beq.n	800a97a <_malloc_r+0x22>
 800aa0c:	1b9b      	subs	r3, r3, r6
 800aa0e:	50a3      	str	r3, [r4, r2]
 800aa10:	e7b3      	b.n	800a97a <_malloc_r+0x22>
 800aa12:	6862      	ldr	r2, [r4, #4]
 800aa14:	42a3      	cmp	r3, r4
 800aa16:	bf0c      	ite	eq
 800aa18:	6032      	streq	r2, [r6, #0]
 800aa1a:	605a      	strne	r2, [r3, #4]
 800aa1c:	e7ec      	b.n	800a9f8 <_malloc_r+0xa0>
 800aa1e:	4623      	mov	r3, r4
 800aa20:	6864      	ldr	r4, [r4, #4]
 800aa22:	e7b2      	b.n	800a98a <_malloc_r+0x32>
 800aa24:	4634      	mov	r4, r6
 800aa26:	6876      	ldr	r6, [r6, #4]
 800aa28:	e7b9      	b.n	800a99e <_malloc_r+0x46>
 800aa2a:	230c      	movs	r3, #12
 800aa2c:	603b      	str	r3, [r7, #0]
 800aa2e:	4638      	mov	r0, r7
 800aa30:	f001 fd38 	bl	800c4a4 <__malloc_unlock>
 800aa34:	e7a1      	b.n	800a97a <_malloc_r+0x22>
 800aa36:	6025      	str	r5, [r4, #0]
 800aa38:	e7de      	b.n	800a9f8 <_malloc_r+0xa0>
 800aa3a:	bf00      	nop
 800aa3c:	200048fc 	.word	0x200048fc

0800aa40 <iprintf>:
 800aa40:	b40f      	push	{r0, r1, r2, r3}
 800aa42:	4b0a      	ldr	r3, [pc, #40]	; (800aa6c <iprintf+0x2c>)
 800aa44:	b513      	push	{r0, r1, r4, lr}
 800aa46:	681c      	ldr	r4, [r3, #0]
 800aa48:	b124      	cbz	r4, 800aa54 <iprintf+0x14>
 800aa4a:	69a3      	ldr	r3, [r4, #24]
 800aa4c:	b913      	cbnz	r3, 800aa54 <iprintf+0x14>
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f7ff fe86 	bl	800a760 <__sinit>
 800aa54:	ab05      	add	r3, sp, #20
 800aa56:	9a04      	ldr	r2, [sp, #16]
 800aa58:	68a1      	ldr	r1, [r4, #8]
 800aa5a:	9301      	str	r3, [sp, #4]
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f002 fa75 	bl	800cf4c <_vfiprintf_r>
 800aa62:	b002      	add	sp, #8
 800aa64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa68:	b004      	add	sp, #16
 800aa6a:	4770      	bx	lr
 800aa6c:	20000010 	.word	0x20000010

0800aa70 <_puts_r>:
 800aa70:	b570      	push	{r4, r5, r6, lr}
 800aa72:	460e      	mov	r6, r1
 800aa74:	4605      	mov	r5, r0
 800aa76:	b118      	cbz	r0, 800aa80 <_puts_r+0x10>
 800aa78:	6983      	ldr	r3, [r0, #24]
 800aa7a:	b90b      	cbnz	r3, 800aa80 <_puts_r+0x10>
 800aa7c:	f7ff fe70 	bl	800a760 <__sinit>
 800aa80:	69ab      	ldr	r3, [r5, #24]
 800aa82:	68ac      	ldr	r4, [r5, #8]
 800aa84:	b913      	cbnz	r3, 800aa8c <_puts_r+0x1c>
 800aa86:	4628      	mov	r0, r5
 800aa88:	f7ff fe6a 	bl	800a760 <__sinit>
 800aa8c:	4b2c      	ldr	r3, [pc, #176]	; (800ab40 <_puts_r+0xd0>)
 800aa8e:	429c      	cmp	r4, r3
 800aa90:	d120      	bne.n	800aad4 <_puts_r+0x64>
 800aa92:	686c      	ldr	r4, [r5, #4]
 800aa94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa96:	07db      	lsls	r3, r3, #31
 800aa98:	d405      	bmi.n	800aaa6 <_puts_r+0x36>
 800aa9a:	89a3      	ldrh	r3, [r4, #12]
 800aa9c:	0598      	lsls	r0, r3, #22
 800aa9e:	d402      	bmi.n	800aaa6 <_puts_r+0x36>
 800aaa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaa2:	f7ff ff20 	bl	800a8e6 <__retarget_lock_acquire_recursive>
 800aaa6:	89a3      	ldrh	r3, [r4, #12]
 800aaa8:	0719      	lsls	r1, r3, #28
 800aaaa:	d51d      	bpl.n	800aae8 <_puts_r+0x78>
 800aaac:	6923      	ldr	r3, [r4, #16]
 800aaae:	b1db      	cbz	r3, 800aae8 <_puts_r+0x78>
 800aab0:	3e01      	subs	r6, #1
 800aab2:	68a3      	ldr	r3, [r4, #8]
 800aab4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aab8:	3b01      	subs	r3, #1
 800aaba:	60a3      	str	r3, [r4, #8]
 800aabc:	bb39      	cbnz	r1, 800ab0e <_puts_r+0x9e>
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	da38      	bge.n	800ab34 <_puts_r+0xc4>
 800aac2:	4622      	mov	r2, r4
 800aac4:	210a      	movs	r1, #10
 800aac6:	4628      	mov	r0, r5
 800aac8:	f000 ff48 	bl	800b95c <__swbuf_r>
 800aacc:	3001      	adds	r0, #1
 800aace:	d011      	beq.n	800aaf4 <_puts_r+0x84>
 800aad0:	250a      	movs	r5, #10
 800aad2:	e011      	b.n	800aaf8 <_puts_r+0x88>
 800aad4:	4b1b      	ldr	r3, [pc, #108]	; (800ab44 <_puts_r+0xd4>)
 800aad6:	429c      	cmp	r4, r3
 800aad8:	d101      	bne.n	800aade <_puts_r+0x6e>
 800aada:	68ac      	ldr	r4, [r5, #8]
 800aadc:	e7da      	b.n	800aa94 <_puts_r+0x24>
 800aade:	4b1a      	ldr	r3, [pc, #104]	; (800ab48 <_puts_r+0xd8>)
 800aae0:	429c      	cmp	r4, r3
 800aae2:	bf08      	it	eq
 800aae4:	68ec      	ldreq	r4, [r5, #12]
 800aae6:	e7d5      	b.n	800aa94 <_puts_r+0x24>
 800aae8:	4621      	mov	r1, r4
 800aaea:	4628      	mov	r0, r5
 800aaec:	f000 ff9a 	bl	800ba24 <__swsetup_r>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d0dd      	beq.n	800aab0 <_puts_r+0x40>
 800aaf4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800aaf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aafa:	07da      	lsls	r2, r3, #31
 800aafc:	d405      	bmi.n	800ab0a <_puts_r+0x9a>
 800aafe:	89a3      	ldrh	r3, [r4, #12]
 800ab00:	059b      	lsls	r3, r3, #22
 800ab02:	d402      	bmi.n	800ab0a <_puts_r+0x9a>
 800ab04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab06:	f7ff feef 	bl	800a8e8 <__retarget_lock_release_recursive>
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	bd70      	pop	{r4, r5, r6, pc}
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	da04      	bge.n	800ab1c <_puts_r+0xac>
 800ab12:	69a2      	ldr	r2, [r4, #24]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	dc06      	bgt.n	800ab26 <_puts_r+0xb6>
 800ab18:	290a      	cmp	r1, #10
 800ab1a:	d004      	beq.n	800ab26 <_puts_r+0xb6>
 800ab1c:	6823      	ldr	r3, [r4, #0]
 800ab1e:	1c5a      	adds	r2, r3, #1
 800ab20:	6022      	str	r2, [r4, #0]
 800ab22:	7019      	strb	r1, [r3, #0]
 800ab24:	e7c5      	b.n	800aab2 <_puts_r+0x42>
 800ab26:	4622      	mov	r2, r4
 800ab28:	4628      	mov	r0, r5
 800ab2a:	f000 ff17 	bl	800b95c <__swbuf_r>
 800ab2e:	3001      	adds	r0, #1
 800ab30:	d1bf      	bne.n	800aab2 <_puts_r+0x42>
 800ab32:	e7df      	b.n	800aaf4 <_puts_r+0x84>
 800ab34:	6823      	ldr	r3, [r4, #0]
 800ab36:	250a      	movs	r5, #10
 800ab38:	1c5a      	adds	r2, r3, #1
 800ab3a:	6022      	str	r2, [r4, #0]
 800ab3c:	701d      	strb	r5, [r3, #0]
 800ab3e:	e7db      	b.n	800aaf8 <_puts_r+0x88>
 800ab40:	0800e00c 	.word	0x0800e00c
 800ab44:	0800e02c 	.word	0x0800e02c
 800ab48:	0800dfec 	.word	0x0800dfec

0800ab4c <puts>:
 800ab4c:	4b02      	ldr	r3, [pc, #8]	; (800ab58 <puts+0xc>)
 800ab4e:	4601      	mov	r1, r0
 800ab50:	6818      	ldr	r0, [r3, #0]
 800ab52:	f7ff bf8d 	b.w	800aa70 <_puts_r>
 800ab56:	bf00      	nop
 800ab58:	20000010 	.word	0x20000010

0800ab5c <cleanup_glue>:
 800ab5c:	b538      	push	{r3, r4, r5, lr}
 800ab5e:	460c      	mov	r4, r1
 800ab60:	6809      	ldr	r1, [r1, #0]
 800ab62:	4605      	mov	r5, r0
 800ab64:	b109      	cbz	r1, 800ab6a <cleanup_glue+0xe>
 800ab66:	f7ff fff9 	bl	800ab5c <cleanup_glue>
 800ab6a:	4621      	mov	r1, r4
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab72:	f002 b975 	b.w	800ce60 <_free_r>
	...

0800ab78 <_reclaim_reent>:
 800ab78:	4b2c      	ldr	r3, [pc, #176]	; (800ac2c <_reclaim_reent+0xb4>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4283      	cmp	r3, r0
 800ab7e:	b570      	push	{r4, r5, r6, lr}
 800ab80:	4604      	mov	r4, r0
 800ab82:	d051      	beq.n	800ac28 <_reclaim_reent+0xb0>
 800ab84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ab86:	b143      	cbz	r3, 800ab9a <_reclaim_reent+0x22>
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d14a      	bne.n	800ac24 <_reclaim_reent+0xac>
 800ab8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab90:	6819      	ldr	r1, [r3, #0]
 800ab92:	b111      	cbz	r1, 800ab9a <_reclaim_reent+0x22>
 800ab94:	4620      	mov	r0, r4
 800ab96:	f002 f963 	bl	800ce60 <_free_r>
 800ab9a:	6961      	ldr	r1, [r4, #20]
 800ab9c:	b111      	cbz	r1, 800aba4 <_reclaim_reent+0x2c>
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f002 f95e 	bl	800ce60 <_free_r>
 800aba4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aba6:	b111      	cbz	r1, 800abae <_reclaim_reent+0x36>
 800aba8:	4620      	mov	r0, r4
 800abaa:	f002 f959 	bl	800ce60 <_free_r>
 800abae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800abb0:	b111      	cbz	r1, 800abb8 <_reclaim_reent+0x40>
 800abb2:	4620      	mov	r0, r4
 800abb4:	f002 f954 	bl	800ce60 <_free_r>
 800abb8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800abba:	b111      	cbz	r1, 800abc2 <_reclaim_reent+0x4a>
 800abbc:	4620      	mov	r0, r4
 800abbe:	f002 f94f 	bl	800ce60 <_free_r>
 800abc2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800abc4:	b111      	cbz	r1, 800abcc <_reclaim_reent+0x54>
 800abc6:	4620      	mov	r0, r4
 800abc8:	f002 f94a 	bl	800ce60 <_free_r>
 800abcc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800abce:	b111      	cbz	r1, 800abd6 <_reclaim_reent+0x5e>
 800abd0:	4620      	mov	r0, r4
 800abd2:	f002 f945 	bl	800ce60 <_free_r>
 800abd6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800abd8:	b111      	cbz	r1, 800abe0 <_reclaim_reent+0x68>
 800abda:	4620      	mov	r0, r4
 800abdc:	f002 f940 	bl	800ce60 <_free_r>
 800abe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abe2:	b111      	cbz	r1, 800abea <_reclaim_reent+0x72>
 800abe4:	4620      	mov	r0, r4
 800abe6:	f002 f93b 	bl	800ce60 <_free_r>
 800abea:	69a3      	ldr	r3, [r4, #24]
 800abec:	b1e3      	cbz	r3, 800ac28 <_reclaim_reent+0xb0>
 800abee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800abf0:	4620      	mov	r0, r4
 800abf2:	4798      	blx	r3
 800abf4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800abf6:	b1b9      	cbz	r1, 800ac28 <_reclaim_reent+0xb0>
 800abf8:	4620      	mov	r0, r4
 800abfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800abfe:	f7ff bfad 	b.w	800ab5c <cleanup_glue>
 800ac02:	5949      	ldr	r1, [r1, r5]
 800ac04:	b941      	cbnz	r1, 800ac18 <_reclaim_reent+0xa0>
 800ac06:	3504      	adds	r5, #4
 800ac08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac0a:	2d80      	cmp	r5, #128	; 0x80
 800ac0c:	68d9      	ldr	r1, [r3, #12]
 800ac0e:	d1f8      	bne.n	800ac02 <_reclaim_reent+0x8a>
 800ac10:	4620      	mov	r0, r4
 800ac12:	f002 f925 	bl	800ce60 <_free_r>
 800ac16:	e7ba      	b.n	800ab8e <_reclaim_reent+0x16>
 800ac18:	680e      	ldr	r6, [r1, #0]
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f002 f920 	bl	800ce60 <_free_r>
 800ac20:	4631      	mov	r1, r6
 800ac22:	e7ef      	b.n	800ac04 <_reclaim_reent+0x8c>
 800ac24:	2500      	movs	r5, #0
 800ac26:	e7ef      	b.n	800ac08 <_reclaim_reent+0x90>
 800ac28:	bd70      	pop	{r4, r5, r6, pc}
 800ac2a:	bf00      	nop
 800ac2c:	20000010 	.word	0x20000010

0800ac30 <_sbrk_r>:
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	4d06      	ldr	r5, [pc, #24]	; (800ac4c <_sbrk_r+0x1c>)
 800ac34:	2300      	movs	r3, #0
 800ac36:	4604      	mov	r4, r0
 800ac38:	4608      	mov	r0, r1
 800ac3a:	602b      	str	r3, [r5, #0]
 800ac3c:	f7f7 fce8 	bl	8002610 <_sbrk>
 800ac40:	1c43      	adds	r3, r0, #1
 800ac42:	d102      	bne.n	800ac4a <_sbrk_r+0x1a>
 800ac44:	682b      	ldr	r3, [r5, #0]
 800ac46:	b103      	cbz	r3, 800ac4a <_sbrk_r+0x1a>
 800ac48:	6023      	str	r3, [r4, #0]
 800ac4a:	bd38      	pop	{r3, r4, r5, pc}
 800ac4c:	20004904 	.word	0x20004904

0800ac50 <__sread>:
 800ac50:	b510      	push	{r4, lr}
 800ac52:	460c      	mov	r4, r1
 800ac54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac58:	f002 fc3c 	bl	800d4d4 <_read_r>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	bfab      	itete	ge
 800ac60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac62:	89a3      	ldrhlt	r3, [r4, #12]
 800ac64:	181b      	addge	r3, r3, r0
 800ac66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac6a:	bfac      	ite	ge
 800ac6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac6e:	81a3      	strhlt	r3, [r4, #12]
 800ac70:	bd10      	pop	{r4, pc}

0800ac72 <__swrite>:
 800ac72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac76:	461f      	mov	r7, r3
 800ac78:	898b      	ldrh	r3, [r1, #12]
 800ac7a:	05db      	lsls	r3, r3, #23
 800ac7c:	4605      	mov	r5, r0
 800ac7e:	460c      	mov	r4, r1
 800ac80:	4616      	mov	r6, r2
 800ac82:	d505      	bpl.n	800ac90 <__swrite+0x1e>
 800ac84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac88:	2302      	movs	r3, #2
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f001 fb7a 	bl	800c384 <_lseek_r>
 800ac90:	89a3      	ldrh	r3, [r4, #12]
 800ac92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac9a:	81a3      	strh	r3, [r4, #12]
 800ac9c:	4632      	mov	r2, r6
 800ac9e:	463b      	mov	r3, r7
 800aca0:	4628      	mov	r0, r5
 800aca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aca6:	f000 beab 	b.w	800ba00 <_write_r>

0800acaa <__sseek>:
 800acaa:	b510      	push	{r4, lr}
 800acac:	460c      	mov	r4, r1
 800acae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb2:	f001 fb67 	bl	800c384 <_lseek_r>
 800acb6:	1c43      	adds	r3, r0, #1
 800acb8:	89a3      	ldrh	r3, [r4, #12]
 800acba:	bf15      	itete	ne
 800acbc:	6560      	strne	r0, [r4, #84]	; 0x54
 800acbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acc6:	81a3      	strheq	r3, [r4, #12]
 800acc8:	bf18      	it	ne
 800acca:	81a3      	strhne	r3, [r4, #12]
 800accc:	bd10      	pop	{r4, pc}

0800acce <__sclose>:
 800acce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd2:	f000 bf15 	b.w	800bb00 <_close_r>

0800acd6 <strncmp>:
 800acd6:	b510      	push	{r4, lr}
 800acd8:	b17a      	cbz	r2, 800acfa <strncmp+0x24>
 800acda:	4603      	mov	r3, r0
 800acdc:	3901      	subs	r1, #1
 800acde:	1884      	adds	r4, r0, r2
 800ace0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ace4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ace8:	4290      	cmp	r0, r2
 800acea:	d101      	bne.n	800acf0 <strncmp+0x1a>
 800acec:	42a3      	cmp	r3, r4
 800acee:	d101      	bne.n	800acf4 <strncmp+0x1e>
 800acf0:	1a80      	subs	r0, r0, r2
 800acf2:	bd10      	pop	{r4, pc}
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d1f3      	bne.n	800ace0 <strncmp+0xa>
 800acf8:	e7fa      	b.n	800acf0 <strncmp+0x1a>
 800acfa:	4610      	mov	r0, r2
 800acfc:	e7f9      	b.n	800acf2 <strncmp+0x1c>

0800acfe <sulp>:
 800acfe:	b570      	push	{r4, r5, r6, lr}
 800ad00:	4604      	mov	r4, r0
 800ad02:	460d      	mov	r5, r1
 800ad04:	ec45 4b10 	vmov	d0, r4, r5
 800ad08:	4616      	mov	r6, r2
 800ad0a:	f001 ff43 	bl	800cb94 <__ulp>
 800ad0e:	ec51 0b10 	vmov	r0, r1, d0
 800ad12:	b17e      	cbz	r6, 800ad34 <sulp+0x36>
 800ad14:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ad18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	dd09      	ble.n	800ad34 <sulp+0x36>
 800ad20:	051b      	lsls	r3, r3, #20
 800ad22:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ad26:	2400      	movs	r4, #0
 800ad28:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ad2c:	4622      	mov	r2, r4
 800ad2e:	462b      	mov	r3, r5
 800ad30:	f7f5 fc6a 	bl	8000608 <__aeabi_dmul>
 800ad34:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad38 <_strtod_l>:
 800ad38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad3c:	ed2d 8b02 	vpush	{d8}
 800ad40:	b09d      	sub	sp, #116	; 0x74
 800ad42:	461f      	mov	r7, r3
 800ad44:	2300      	movs	r3, #0
 800ad46:	9318      	str	r3, [sp, #96]	; 0x60
 800ad48:	4ba2      	ldr	r3, [pc, #648]	; (800afd4 <_strtod_l+0x29c>)
 800ad4a:	9213      	str	r2, [sp, #76]	; 0x4c
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	9305      	str	r3, [sp, #20]
 800ad50:	4604      	mov	r4, r0
 800ad52:	4618      	mov	r0, r3
 800ad54:	4688      	mov	r8, r1
 800ad56:	f7f5 fa43 	bl	80001e0 <strlen>
 800ad5a:	f04f 0a00 	mov.w	sl, #0
 800ad5e:	4605      	mov	r5, r0
 800ad60:	f04f 0b00 	mov.w	fp, #0
 800ad64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ad68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad6a:	781a      	ldrb	r2, [r3, #0]
 800ad6c:	2a2b      	cmp	r2, #43	; 0x2b
 800ad6e:	d04e      	beq.n	800ae0e <_strtod_l+0xd6>
 800ad70:	d83b      	bhi.n	800adea <_strtod_l+0xb2>
 800ad72:	2a0d      	cmp	r2, #13
 800ad74:	d834      	bhi.n	800ade0 <_strtod_l+0xa8>
 800ad76:	2a08      	cmp	r2, #8
 800ad78:	d834      	bhi.n	800ade4 <_strtod_l+0xac>
 800ad7a:	2a00      	cmp	r2, #0
 800ad7c:	d03e      	beq.n	800adfc <_strtod_l+0xc4>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	930a      	str	r3, [sp, #40]	; 0x28
 800ad82:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ad84:	7833      	ldrb	r3, [r6, #0]
 800ad86:	2b30      	cmp	r3, #48	; 0x30
 800ad88:	f040 80b0 	bne.w	800aeec <_strtod_l+0x1b4>
 800ad8c:	7873      	ldrb	r3, [r6, #1]
 800ad8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ad92:	2b58      	cmp	r3, #88	; 0x58
 800ad94:	d168      	bne.n	800ae68 <_strtod_l+0x130>
 800ad96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad98:	9301      	str	r3, [sp, #4]
 800ad9a:	ab18      	add	r3, sp, #96	; 0x60
 800ad9c:	9702      	str	r7, [sp, #8]
 800ad9e:	9300      	str	r3, [sp, #0]
 800ada0:	4a8d      	ldr	r2, [pc, #564]	; (800afd8 <_strtod_l+0x2a0>)
 800ada2:	ab19      	add	r3, sp, #100	; 0x64
 800ada4:	a917      	add	r1, sp, #92	; 0x5c
 800ada6:	4620      	mov	r0, r4
 800ada8:	f000 ffe4 	bl	800bd74 <__gethex>
 800adac:	f010 0707 	ands.w	r7, r0, #7
 800adb0:	4605      	mov	r5, r0
 800adb2:	d005      	beq.n	800adc0 <_strtod_l+0x88>
 800adb4:	2f06      	cmp	r7, #6
 800adb6:	d12c      	bne.n	800ae12 <_strtod_l+0xda>
 800adb8:	3601      	adds	r6, #1
 800adba:	2300      	movs	r3, #0
 800adbc:	9617      	str	r6, [sp, #92]	; 0x5c
 800adbe:	930a      	str	r3, [sp, #40]	; 0x28
 800adc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f040 8590 	bne.w	800b8e8 <_strtod_l+0xbb0>
 800adc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adca:	b1eb      	cbz	r3, 800ae08 <_strtod_l+0xd0>
 800adcc:	4652      	mov	r2, sl
 800adce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800add2:	ec43 2b10 	vmov	d0, r2, r3
 800add6:	b01d      	add	sp, #116	; 0x74
 800add8:	ecbd 8b02 	vpop	{d8}
 800addc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade0:	2a20      	cmp	r2, #32
 800ade2:	d1cc      	bne.n	800ad7e <_strtod_l+0x46>
 800ade4:	3301      	adds	r3, #1
 800ade6:	9317      	str	r3, [sp, #92]	; 0x5c
 800ade8:	e7be      	b.n	800ad68 <_strtod_l+0x30>
 800adea:	2a2d      	cmp	r2, #45	; 0x2d
 800adec:	d1c7      	bne.n	800ad7e <_strtod_l+0x46>
 800adee:	2201      	movs	r2, #1
 800adf0:	920a      	str	r2, [sp, #40]	; 0x28
 800adf2:	1c5a      	adds	r2, r3, #1
 800adf4:	9217      	str	r2, [sp, #92]	; 0x5c
 800adf6:	785b      	ldrb	r3, [r3, #1]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d1c2      	bne.n	800ad82 <_strtod_l+0x4a>
 800adfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800adfe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f040 856e 	bne.w	800b8e4 <_strtod_l+0xbac>
 800ae08:	4652      	mov	r2, sl
 800ae0a:	465b      	mov	r3, fp
 800ae0c:	e7e1      	b.n	800add2 <_strtod_l+0x9a>
 800ae0e:	2200      	movs	r2, #0
 800ae10:	e7ee      	b.n	800adf0 <_strtod_l+0xb8>
 800ae12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ae14:	b13a      	cbz	r2, 800ae26 <_strtod_l+0xee>
 800ae16:	2135      	movs	r1, #53	; 0x35
 800ae18:	a81a      	add	r0, sp, #104	; 0x68
 800ae1a:	f001 ffc6 	bl	800cdaa <__copybits>
 800ae1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ae20:	4620      	mov	r0, r4
 800ae22:	f001 fb85 	bl	800c530 <_Bfree>
 800ae26:	3f01      	subs	r7, #1
 800ae28:	2f04      	cmp	r7, #4
 800ae2a:	d806      	bhi.n	800ae3a <_strtod_l+0x102>
 800ae2c:	e8df f007 	tbb	[pc, r7]
 800ae30:	1714030a 	.word	0x1714030a
 800ae34:	0a          	.byte	0x0a
 800ae35:	00          	.byte	0x00
 800ae36:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ae3a:	0728      	lsls	r0, r5, #28
 800ae3c:	d5c0      	bpl.n	800adc0 <_strtod_l+0x88>
 800ae3e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ae42:	e7bd      	b.n	800adc0 <_strtod_l+0x88>
 800ae44:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ae48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ae4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ae52:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ae56:	e7f0      	b.n	800ae3a <_strtod_l+0x102>
 800ae58:	f8df b180 	ldr.w	fp, [pc, #384]	; 800afdc <_strtod_l+0x2a4>
 800ae5c:	e7ed      	b.n	800ae3a <_strtod_l+0x102>
 800ae5e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ae62:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ae66:	e7e8      	b.n	800ae3a <_strtod_l+0x102>
 800ae68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae6a:	1c5a      	adds	r2, r3, #1
 800ae6c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae6e:	785b      	ldrb	r3, [r3, #1]
 800ae70:	2b30      	cmp	r3, #48	; 0x30
 800ae72:	d0f9      	beq.n	800ae68 <_strtod_l+0x130>
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d0a3      	beq.n	800adc0 <_strtod_l+0x88>
 800ae78:	2301      	movs	r3, #1
 800ae7a:	f04f 0900 	mov.w	r9, #0
 800ae7e:	9304      	str	r3, [sp, #16]
 800ae80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae82:	9308      	str	r3, [sp, #32]
 800ae84:	f8cd 901c 	str.w	r9, [sp, #28]
 800ae88:	464f      	mov	r7, r9
 800ae8a:	220a      	movs	r2, #10
 800ae8c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ae8e:	7806      	ldrb	r6, [r0, #0]
 800ae90:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ae94:	b2d9      	uxtb	r1, r3
 800ae96:	2909      	cmp	r1, #9
 800ae98:	d92a      	bls.n	800aef0 <_strtod_l+0x1b8>
 800ae9a:	9905      	ldr	r1, [sp, #20]
 800ae9c:	462a      	mov	r2, r5
 800ae9e:	f7ff ff1a 	bl	800acd6 <strncmp>
 800aea2:	b398      	cbz	r0, 800af0c <_strtod_l+0x1d4>
 800aea4:	2000      	movs	r0, #0
 800aea6:	4632      	mov	r2, r6
 800aea8:	463d      	mov	r5, r7
 800aeaa:	9005      	str	r0, [sp, #20]
 800aeac:	4603      	mov	r3, r0
 800aeae:	2a65      	cmp	r2, #101	; 0x65
 800aeb0:	d001      	beq.n	800aeb6 <_strtod_l+0x17e>
 800aeb2:	2a45      	cmp	r2, #69	; 0x45
 800aeb4:	d118      	bne.n	800aee8 <_strtod_l+0x1b0>
 800aeb6:	b91d      	cbnz	r5, 800aec0 <_strtod_l+0x188>
 800aeb8:	9a04      	ldr	r2, [sp, #16]
 800aeba:	4302      	orrs	r2, r0
 800aebc:	d09e      	beq.n	800adfc <_strtod_l+0xc4>
 800aebe:	2500      	movs	r5, #0
 800aec0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800aec4:	f108 0201 	add.w	r2, r8, #1
 800aec8:	9217      	str	r2, [sp, #92]	; 0x5c
 800aeca:	f898 2001 	ldrb.w	r2, [r8, #1]
 800aece:	2a2b      	cmp	r2, #43	; 0x2b
 800aed0:	d075      	beq.n	800afbe <_strtod_l+0x286>
 800aed2:	2a2d      	cmp	r2, #45	; 0x2d
 800aed4:	d07b      	beq.n	800afce <_strtod_l+0x296>
 800aed6:	f04f 0c00 	mov.w	ip, #0
 800aeda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800aede:	2909      	cmp	r1, #9
 800aee0:	f240 8082 	bls.w	800afe8 <_strtod_l+0x2b0>
 800aee4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aee8:	2600      	movs	r6, #0
 800aeea:	e09d      	b.n	800b028 <_strtod_l+0x2f0>
 800aeec:	2300      	movs	r3, #0
 800aeee:	e7c4      	b.n	800ae7a <_strtod_l+0x142>
 800aef0:	2f08      	cmp	r7, #8
 800aef2:	bfd8      	it	le
 800aef4:	9907      	ldrle	r1, [sp, #28]
 800aef6:	f100 0001 	add.w	r0, r0, #1
 800aefa:	bfda      	itte	le
 800aefc:	fb02 3301 	mlale	r3, r2, r1, r3
 800af00:	9307      	strle	r3, [sp, #28]
 800af02:	fb02 3909 	mlagt	r9, r2, r9, r3
 800af06:	3701      	adds	r7, #1
 800af08:	9017      	str	r0, [sp, #92]	; 0x5c
 800af0a:	e7bf      	b.n	800ae8c <_strtod_l+0x154>
 800af0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af0e:	195a      	adds	r2, r3, r5
 800af10:	9217      	str	r2, [sp, #92]	; 0x5c
 800af12:	5d5a      	ldrb	r2, [r3, r5]
 800af14:	2f00      	cmp	r7, #0
 800af16:	d037      	beq.n	800af88 <_strtod_l+0x250>
 800af18:	9005      	str	r0, [sp, #20]
 800af1a:	463d      	mov	r5, r7
 800af1c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800af20:	2b09      	cmp	r3, #9
 800af22:	d912      	bls.n	800af4a <_strtod_l+0x212>
 800af24:	2301      	movs	r3, #1
 800af26:	e7c2      	b.n	800aeae <_strtod_l+0x176>
 800af28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af2a:	1c5a      	adds	r2, r3, #1
 800af2c:	9217      	str	r2, [sp, #92]	; 0x5c
 800af2e:	785a      	ldrb	r2, [r3, #1]
 800af30:	3001      	adds	r0, #1
 800af32:	2a30      	cmp	r2, #48	; 0x30
 800af34:	d0f8      	beq.n	800af28 <_strtod_l+0x1f0>
 800af36:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800af3a:	2b08      	cmp	r3, #8
 800af3c:	f200 84d9 	bhi.w	800b8f2 <_strtod_l+0xbba>
 800af40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af42:	9005      	str	r0, [sp, #20]
 800af44:	2000      	movs	r0, #0
 800af46:	9308      	str	r3, [sp, #32]
 800af48:	4605      	mov	r5, r0
 800af4a:	3a30      	subs	r2, #48	; 0x30
 800af4c:	f100 0301 	add.w	r3, r0, #1
 800af50:	d014      	beq.n	800af7c <_strtod_l+0x244>
 800af52:	9905      	ldr	r1, [sp, #20]
 800af54:	4419      	add	r1, r3
 800af56:	9105      	str	r1, [sp, #20]
 800af58:	462b      	mov	r3, r5
 800af5a:	eb00 0e05 	add.w	lr, r0, r5
 800af5e:	210a      	movs	r1, #10
 800af60:	4573      	cmp	r3, lr
 800af62:	d113      	bne.n	800af8c <_strtod_l+0x254>
 800af64:	182b      	adds	r3, r5, r0
 800af66:	2b08      	cmp	r3, #8
 800af68:	f105 0501 	add.w	r5, r5, #1
 800af6c:	4405      	add	r5, r0
 800af6e:	dc1c      	bgt.n	800afaa <_strtod_l+0x272>
 800af70:	9907      	ldr	r1, [sp, #28]
 800af72:	230a      	movs	r3, #10
 800af74:	fb03 2301 	mla	r3, r3, r1, r2
 800af78:	9307      	str	r3, [sp, #28]
 800af7a:	2300      	movs	r3, #0
 800af7c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af7e:	1c51      	adds	r1, r2, #1
 800af80:	9117      	str	r1, [sp, #92]	; 0x5c
 800af82:	7852      	ldrb	r2, [r2, #1]
 800af84:	4618      	mov	r0, r3
 800af86:	e7c9      	b.n	800af1c <_strtod_l+0x1e4>
 800af88:	4638      	mov	r0, r7
 800af8a:	e7d2      	b.n	800af32 <_strtod_l+0x1fa>
 800af8c:	2b08      	cmp	r3, #8
 800af8e:	dc04      	bgt.n	800af9a <_strtod_l+0x262>
 800af90:	9e07      	ldr	r6, [sp, #28]
 800af92:	434e      	muls	r6, r1
 800af94:	9607      	str	r6, [sp, #28]
 800af96:	3301      	adds	r3, #1
 800af98:	e7e2      	b.n	800af60 <_strtod_l+0x228>
 800af9a:	f103 0c01 	add.w	ip, r3, #1
 800af9e:	f1bc 0f10 	cmp.w	ip, #16
 800afa2:	bfd8      	it	le
 800afa4:	fb01 f909 	mulle.w	r9, r1, r9
 800afa8:	e7f5      	b.n	800af96 <_strtod_l+0x25e>
 800afaa:	2d10      	cmp	r5, #16
 800afac:	bfdc      	itt	le
 800afae:	230a      	movle	r3, #10
 800afb0:	fb03 2909 	mlale	r9, r3, r9, r2
 800afb4:	e7e1      	b.n	800af7a <_strtod_l+0x242>
 800afb6:	2300      	movs	r3, #0
 800afb8:	9305      	str	r3, [sp, #20]
 800afba:	2301      	movs	r3, #1
 800afbc:	e77c      	b.n	800aeb8 <_strtod_l+0x180>
 800afbe:	f04f 0c00 	mov.w	ip, #0
 800afc2:	f108 0202 	add.w	r2, r8, #2
 800afc6:	9217      	str	r2, [sp, #92]	; 0x5c
 800afc8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800afcc:	e785      	b.n	800aeda <_strtod_l+0x1a2>
 800afce:	f04f 0c01 	mov.w	ip, #1
 800afd2:	e7f6      	b.n	800afc2 <_strtod_l+0x28a>
 800afd4:	0800e128 	.word	0x0800e128
 800afd8:	0800e05c 	.word	0x0800e05c
 800afdc:	7ff00000 	.word	0x7ff00000
 800afe0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800afe2:	1c51      	adds	r1, r2, #1
 800afe4:	9117      	str	r1, [sp, #92]	; 0x5c
 800afe6:	7852      	ldrb	r2, [r2, #1]
 800afe8:	2a30      	cmp	r2, #48	; 0x30
 800afea:	d0f9      	beq.n	800afe0 <_strtod_l+0x2a8>
 800afec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800aff0:	2908      	cmp	r1, #8
 800aff2:	f63f af79 	bhi.w	800aee8 <_strtod_l+0x1b0>
 800aff6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800affa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800affc:	9206      	str	r2, [sp, #24]
 800affe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b000:	1c51      	adds	r1, r2, #1
 800b002:	9117      	str	r1, [sp, #92]	; 0x5c
 800b004:	7852      	ldrb	r2, [r2, #1]
 800b006:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b00a:	2e09      	cmp	r6, #9
 800b00c:	d937      	bls.n	800b07e <_strtod_l+0x346>
 800b00e:	9e06      	ldr	r6, [sp, #24]
 800b010:	1b89      	subs	r1, r1, r6
 800b012:	2908      	cmp	r1, #8
 800b014:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b018:	dc02      	bgt.n	800b020 <_strtod_l+0x2e8>
 800b01a:	4576      	cmp	r6, lr
 800b01c:	bfa8      	it	ge
 800b01e:	4676      	movge	r6, lr
 800b020:	f1bc 0f00 	cmp.w	ip, #0
 800b024:	d000      	beq.n	800b028 <_strtod_l+0x2f0>
 800b026:	4276      	negs	r6, r6
 800b028:	2d00      	cmp	r5, #0
 800b02a:	d14d      	bne.n	800b0c8 <_strtod_l+0x390>
 800b02c:	9904      	ldr	r1, [sp, #16]
 800b02e:	4301      	orrs	r1, r0
 800b030:	f47f aec6 	bne.w	800adc0 <_strtod_l+0x88>
 800b034:	2b00      	cmp	r3, #0
 800b036:	f47f aee1 	bne.w	800adfc <_strtod_l+0xc4>
 800b03a:	2a69      	cmp	r2, #105	; 0x69
 800b03c:	d027      	beq.n	800b08e <_strtod_l+0x356>
 800b03e:	dc24      	bgt.n	800b08a <_strtod_l+0x352>
 800b040:	2a49      	cmp	r2, #73	; 0x49
 800b042:	d024      	beq.n	800b08e <_strtod_l+0x356>
 800b044:	2a4e      	cmp	r2, #78	; 0x4e
 800b046:	f47f aed9 	bne.w	800adfc <_strtod_l+0xc4>
 800b04a:	499f      	ldr	r1, [pc, #636]	; (800b2c8 <_strtod_l+0x590>)
 800b04c:	a817      	add	r0, sp, #92	; 0x5c
 800b04e:	f001 f8e9 	bl	800c224 <__match>
 800b052:	2800      	cmp	r0, #0
 800b054:	f43f aed2 	beq.w	800adfc <_strtod_l+0xc4>
 800b058:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	2b28      	cmp	r3, #40	; 0x28
 800b05e:	d12d      	bne.n	800b0bc <_strtod_l+0x384>
 800b060:	499a      	ldr	r1, [pc, #616]	; (800b2cc <_strtod_l+0x594>)
 800b062:	aa1a      	add	r2, sp, #104	; 0x68
 800b064:	a817      	add	r0, sp, #92	; 0x5c
 800b066:	f001 f8f1 	bl	800c24c <__hexnan>
 800b06a:	2805      	cmp	r0, #5
 800b06c:	d126      	bne.n	800b0bc <_strtod_l+0x384>
 800b06e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b070:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b074:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b078:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b07c:	e6a0      	b.n	800adc0 <_strtod_l+0x88>
 800b07e:	210a      	movs	r1, #10
 800b080:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b084:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b088:	e7b9      	b.n	800affe <_strtod_l+0x2c6>
 800b08a:	2a6e      	cmp	r2, #110	; 0x6e
 800b08c:	e7db      	b.n	800b046 <_strtod_l+0x30e>
 800b08e:	4990      	ldr	r1, [pc, #576]	; (800b2d0 <_strtod_l+0x598>)
 800b090:	a817      	add	r0, sp, #92	; 0x5c
 800b092:	f001 f8c7 	bl	800c224 <__match>
 800b096:	2800      	cmp	r0, #0
 800b098:	f43f aeb0 	beq.w	800adfc <_strtod_l+0xc4>
 800b09c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b09e:	498d      	ldr	r1, [pc, #564]	; (800b2d4 <_strtod_l+0x59c>)
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	a817      	add	r0, sp, #92	; 0x5c
 800b0a4:	9317      	str	r3, [sp, #92]	; 0x5c
 800b0a6:	f001 f8bd 	bl	800c224 <__match>
 800b0aa:	b910      	cbnz	r0, 800b0b2 <_strtod_l+0x37a>
 800b0ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	9317      	str	r3, [sp, #92]	; 0x5c
 800b0b2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b2e4 <_strtod_l+0x5ac>
 800b0b6:	f04f 0a00 	mov.w	sl, #0
 800b0ba:	e681      	b.n	800adc0 <_strtod_l+0x88>
 800b0bc:	4886      	ldr	r0, [pc, #536]	; (800b2d8 <_strtod_l+0x5a0>)
 800b0be:	f002 fa1b 	bl	800d4f8 <nan>
 800b0c2:	ec5b ab10 	vmov	sl, fp, d0
 800b0c6:	e67b      	b.n	800adc0 <_strtod_l+0x88>
 800b0c8:	9b05      	ldr	r3, [sp, #20]
 800b0ca:	9807      	ldr	r0, [sp, #28]
 800b0cc:	1af3      	subs	r3, r6, r3
 800b0ce:	2f00      	cmp	r7, #0
 800b0d0:	bf08      	it	eq
 800b0d2:	462f      	moveq	r7, r5
 800b0d4:	2d10      	cmp	r5, #16
 800b0d6:	9306      	str	r3, [sp, #24]
 800b0d8:	46a8      	mov	r8, r5
 800b0da:	bfa8      	it	ge
 800b0dc:	f04f 0810 	movge.w	r8, #16
 800b0e0:	f7f5 fa18 	bl	8000514 <__aeabi_ui2d>
 800b0e4:	2d09      	cmp	r5, #9
 800b0e6:	4682      	mov	sl, r0
 800b0e8:	468b      	mov	fp, r1
 800b0ea:	dd13      	ble.n	800b114 <_strtod_l+0x3dc>
 800b0ec:	4b7b      	ldr	r3, [pc, #492]	; (800b2dc <_strtod_l+0x5a4>)
 800b0ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b0f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b0f6:	f7f5 fa87 	bl	8000608 <__aeabi_dmul>
 800b0fa:	4682      	mov	sl, r0
 800b0fc:	4648      	mov	r0, r9
 800b0fe:	468b      	mov	fp, r1
 800b100:	f7f5 fa08 	bl	8000514 <__aeabi_ui2d>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	4650      	mov	r0, sl
 800b10a:	4659      	mov	r1, fp
 800b10c:	f7f5 f8c6 	bl	800029c <__adddf3>
 800b110:	4682      	mov	sl, r0
 800b112:	468b      	mov	fp, r1
 800b114:	2d0f      	cmp	r5, #15
 800b116:	dc38      	bgt.n	800b18a <_strtod_l+0x452>
 800b118:	9b06      	ldr	r3, [sp, #24]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	f43f ae50 	beq.w	800adc0 <_strtod_l+0x88>
 800b120:	dd24      	ble.n	800b16c <_strtod_l+0x434>
 800b122:	2b16      	cmp	r3, #22
 800b124:	dc0b      	bgt.n	800b13e <_strtod_l+0x406>
 800b126:	496d      	ldr	r1, [pc, #436]	; (800b2dc <_strtod_l+0x5a4>)
 800b128:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b12c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b130:	4652      	mov	r2, sl
 800b132:	465b      	mov	r3, fp
 800b134:	f7f5 fa68 	bl	8000608 <__aeabi_dmul>
 800b138:	4682      	mov	sl, r0
 800b13a:	468b      	mov	fp, r1
 800b13c:	e640      	b.n	800adc0 <_strtod_l+0x88>
 800b13e:	9a06      	ldr	r2, [sp, #24]
 800b140:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b144:	4293      	cmp	r3, r2
 800b146:	db20      	blt.n	800b18a <_strtod_l+0x452>
 800b148:	4c64      	ldr	r4, [pc, #400]	; (800b2dc <_strtod_l+0x5a4>)
 800b14a:	f1c5 050f 	rsb	r5, r5, #15
 800b14e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b152:	4652      	mov	r2, sl
 800b154:	465b      	mov	r3, fp
 800b156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b15a:	f7f5 fa55 	bl	8000608 <__aeabi_dmul>
 800b15e:	9b06      	ldr	r3, [sp, #24]
 800b160:	1b5d      	subs	r5, r3, r5
 800b162:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b166:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b16a:	e7e3      	b.n	800b134 <_strtod_l+0x3fc>
 800b16c:	9b06      	ldr	r3, [sp, #24]
 800b16e:	3316      	adds	r3, #22
 800b170:	db0b      	blt.n	800b18a <_strtod_l+0x452>
 800b172:	9b05      	ldr	r3, [sp, #20]
 800b174:	1b9e      	subs	r6, r3, r6
 800b176:	4b59      	ldr	r3, [pc, #356]	; (800b2dc <_strtod_l+0x5a4>)
 800b178:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b17c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b180:	4650      	mov	r0, sl
 800b182:	4659      	mov	r1, fp
 800b184:	f7f5 fb6a 	bl	800085c <__aeabi_ddiv>
 800b188:	e7d6      	b.n	800b138 <_strtod_l+0x400>
 800b18a:	9b06      	ldr	r3, [sp, #24]
 800b18c:	eba5 0808 	sub.w	r8, r5, r8
 800b190:	4498      	add	r8, r3
 800b192:	f1b8 0f00 	cmp.w	r8, #0
 800b196:	dd74      	ble.n	800b282 <_strtod_l+0x54a>
 800b198:	f018 030f 	ands.w	r3, r8, #15
 800b19c:	d00a      	beq.n	800b1b4 <_strtod_l+0x47c>
 800b19e:	494f      	ldr	r1, [pc, #316]	; (800b2dc <_strtod_l+0x5a4>)
 800b1a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b1a4:	4652      	mov	r2, sl
 800b1a6:	465b      	mov	r3, fp
 800b1a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1ac:	f7f5 fa2c 	bl	8000608 <__aeabi_dmul>
 800b1b0:	4682      	mov	sl, r0
 800b1b2:	468b      	mov	fp, r1
 800b1b4:	f038 080f 	bics.w	r8, r8, #15
 800b1b8:	d04f      	beq.n	800b25a <_strtod_l+0x522>
 800b1ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b1be:	dd22      	ble.n	800b206 <_strtod_l+0x4ce>
 800b1c0:	2500      	movs	r5, #0
 800b1c2:	462e      	mov	r6, r5
 800b1c4:	9507      	str	r5, [sp, #28]
 800b1c6:	9505      	str	r5, [sp, #20]
 800b1c8:	2322      	movs	r3, #34	; 0x22
 800b1ca:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b2e4 <_strtod_l+0x5ac>
 800b1ce:	6023      	str	r3, [r4, #0]
 800b1d0:	f04f 0a00 	mov.w	sl, #0
 800b1d4:	9b07      	ldr	r3, [sp, #28]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	f43f adf2 	beq.w	800adc0 <_strtod_l+0x88>
 800b1dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f001 f9a6 	bl	800c530 <_Bfree>
 800b1e4:	9905      	ldr	r1, [sp, #20]
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f001 f9a2 	bl	800c530 <_Bfree>
 800b1ec:	4631      	mov	r1, r6
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f001 f99e 	bl	800c530 <_Bfree>
 800b1f4:	9907      	ldr	r1, [sp, #28]
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	f001 f99a 	bl	800c530 <_Bfree>
 800b1fc:	4629      	mov	r1, r5
 800b1fe:	4620      	mov	r0, r4
 800b200:	f001 f996 	bl	800c530 <_Bfree>
 800b204:	e5dc      	b.n	800adc0 <_strtod_l+0x88>
 800b206:	4b36      	ldr	r3, [pc, #216]	; (800b2e0 <_strtod_l+0x5a8>)
 800b208:	9304      	str	r3, [sp, #16]
 800b20a:	2300      	movs	r3, #0
 800b20c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b210:	4650      	mov	r0, sl
 800b212:	4659      	mov	r1, fp
 800b214:	4699      	mov	r9, r3
 800b216:	f1b8 0f01 	cmp.w	r8, #1
 800b21a:	dc21      	bgt.n	800b260 <_strtod_l+0x528>
 800b21c:	b10b      	cbz	r3, 800b222 <_strtod_l+0x4ea>
 800b21e:	4682      	mov	sl, r0
 800b220:	468b      	mov	fp, r1
 800b222:	4b2f      	ldr	r3, [pc, #188]	; (800b2e0 <_strtod_l+0x5a8>)
 800b224:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b228:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b22c:	4652      	mov	r2, sl
 800b22e:	465b      	mov	r3, fp
 800b230:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b234:	f7f5 f9e8 	bl	8000608 <__aeabi_dmul>
 800b238:	4b2a      	ldr	r3, [pc, #168]	; (800b2e4 <_strtod_l+0x5ac>)
 800b23a:	460a      	mov	r2, r1
 800b23c:	400b      	ands	r3, r1
 800b23e:	492a      	ldr	r1, [pc, #168]	; (800b2e8 <_strtod_l+0x5b0>)
 800b240:	428b      	cmp	r3, r1
 800b242:	4682      	mov	sl, r0
 800b244:	d8bc      	bhi.n	800b1c0 <_strtod_l+0x488>
 800b246:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b24a:	428b      	cmp	r3, r1
 800b24c:	bf86      	itte	hi
 800b24e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b2ec <_strtod_l+0x5b4>
 800b252:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800b256:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b25a:	2300      	movs	r3, #0
 800b25c:	9304      	str	r3, [sp, #16]
 800b25e:	e084      	b.n	800b36a <_strtod_l+0x632>
 800b260:	f018 0f01 	tst.w	r8, #1
 800b264:	d005      	beq.n	800b272 <_strtod_l+0x53a>
 800b266:	9b04      	ldr	r3, [sp, #16]
 800b268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26c:	f7f5 f9cc 	bl	8000608 <__aeabi_dmul>
 800b270:	2301      	movs	r3, #1
 800b272:	9a04      	ldr	r2, [sp, #16]
 800b274:	3208      	adds	r2, #8
 800b276:	f109 0901 	add.w	r9, r9, #1
 800b27a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b27e:	9204      	str	r2, [sp, #16]
 800b280:	e7c9      	b.n	800b216 <_strtod_l+0x4de>
 800b282:	d0ea      	beq.n	800b25a <_strtod_l+0x522>
 800b284:	f1c8 0800 	rsb	r8, r8, #0
 800b288:	f018 020f 	ands.w	r2, r8, #15
 800b28c:	d00a      	beq.n	800b2a4 <_strtod_l+0x56c>
 800b28e:	4b13      	ldr	r3, [pc, #76]	; (800b2dc <_strtod_l+0x5a4>)
 800b290:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b294:	4650      	mov	r0, sl
 800b296:	4659      	mov	r1, fp
 800b298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29c:	f7f5 fade 	bl	800085c <__aeabi_ddiv>
 800b2a0:	4682      	mov	sl, r0
 800b2a2:	468b      	mov	fp, r1
 800b2a4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b2a8:	d0d7      	beq.n	800b25a <_strtod_l+0x522>
 800b2aa:	f1b8 0f1f 	cmp.w	r8, #31
 800b2ae:	dd1f      	ble.n	800b2f0 <_strtod_l+0x5b8>
 800b2b0:	2500      	movs	r5, #0
 800b2b2:	462e      	mov	r6, r5
 800b2b4:	9507      	str	r5, [sp, #28]
 800b2b6:	9505      	str	r5, [sp, #20]
 800b2b8:	2322      	movs	r3, #34	; 0x22
 800b2ba:	f04f 0a00 	mov.w	sl, #0
 800b2be:	f04f 0b00 	mov.w	fp, #0
 800b2c2:	6023      	str	r3, [r4, #0]
 800b2c4:	e786      	b.n	800b1d4 <_strtod_l+0x49c>
 800b2c6:	bf00      	nop
 800b2c8:	0800e059 	.word	0x0800e059
 800b2cc:	0800e070 	.word	0x0800e070
 800b2d0:	0800e050 	.word	0x0800e050
 800b2d4:	0800e053 	.word	0x0800e053
 800b2d8:	0800e31a 	.word	0x0800e31a
 800b2dc:	0800e1d8 	.word	0x0800e1d8
 800b2e0:	0800e1b0 	.word	0x0800e1b0
 800b2e4:	7ff00000 	.word	0x7ff00000
 800b2e8:	7ca00000 	.word	0x7ca00000
 800b2ec:	7fefffff 	.word	0x7fefffff
 800b2f0:	f018 0310 	ands.w	r3, r8, #16
 800b2f4:	bf18      	it	ne
 800b2f6:	236a      	movne	r3, #106	; 0x6a
 800b2f8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b6a8 <_strtod_l+0x970>
 800b2fc:	9304      	str	r3, [sp, #16]
 800b2fe:	4650      	mov	r0, sl
 800b300:	4659      	mov	r1, fp
 800b302:	2300      	movs	r3, #0
 800b304:	f018 0f01 	tst.w	r8, #1
 800b308:	d004      	beq.n	800b314 <_strtod_l+0x5dc>
 800b30a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b30e:	f7f5 f97b 	bl	8000608 <__aeabi_dmul>
 800b312:	2301      	movs	r3, #1
 800b314:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b318:	f109 0908 	add.w	r9, r9, #8
 800b31c:	d1f2      	bne.n	800b304 <_strtod_l+0x5cc>
 800b31e:	b10b      	cbz	r3, 800b324 <_strtod_l+0x5ec>
 800b320:	4682      	mov	sl, r0
 800b322:	468b      	mov	fp, r1
 800b324:	9b04      	ldr	r3, [sp, #16]
 800b326:	b1c3      	cbz	r3, 800b35a <_strtod_l+0x622>
 800b328:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b32c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b330:	2b00      	cmp	r3, #0
 800b332:	4659      	mov	r1, fp
 800b334:	dd11      	ble.n	800b35a <_strtod_l+0x622>
 800b336:	2b1f      	cmp	r3, #31
 800b338:	f340 8124 	ble.w	800b584 <_strtod_l+0x84c>
 800b33c:	2b34      	cmp	r3, #52	; 0x34
 800b33e:	bfde      	ittt	le
 800b340:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b344:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800b348:	fa03 f202 	lslle.w	r2, r3, r2
 800b34c:	f04f 0a00 	mov.w	sl, #0
 800b350:	bfcc      	ite	gt
 800b352:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b356:	ea02 0b01 	andle.w	fp, r2, r1
 800b35a:	2200      	movs	r2, #0
 800b35c:	2300      	movs	r3, #0
 800b35e:	4650      	mov	r0, sl
 800b360:	4659      	mov	r1, fp
 800b362:	f7f5 fbb9 	bl	8000ad8 <__aeabi_dcmpeq>
 800b366:	2800      	cmp	r0, #0
 800b368:	d1a2      	bne.n	800b2b0 <_strtod_l+0x578>
 800b36a:	9b07      	ldr	r3, [sp, #28]
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	9908      	ldr	r1, [sp, #32]
 800b370:	462b      	mov	r3, r5
 800b372:	463a      	mov	r2, r7
 800b374:	4620      	mov	r0, r4
 800b376:	f001 f943 	bl	800c600 <__s2b>
 800b37a:	9007      	str	r0, [sp, #28]
 800b37c:	2800      	cmp	r0, #0
 800b37e:	f43f af1f 	beq.w	800b1c0 <_strtod_l+0x488>
 800b382:	9b05      	ldr	r3, [sp, #20]
 800b384:	1b9e      	subs	r6, r3, r6
 800b386:	9b06      	ldr	r3, [sp, #24]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	bfb4      	ite	lt
 800b38c:	4633      	movlt	r3, r6
 800b38e:	2300      	movge	r3, #0
 800b390:	930c      	str	r3, [sp, #48]	; 0x30
 800b392:	9b06      	ldr	r3, [sp, #24]
 800b394:	2500      	movs	r5, #0
 800b396:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b39a:	9312      	str	r3, [sp, #72]	; 0x48
 800b39c:	462e      	mov	r6, r5
 800b39e:	9b07      	ldr	r3, [sp, #28]
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	6859      	ldr	r1, [r3, #4]
 800b3a4:	f001 f884 	bl	800c4b0 <_Balloc>
 800b3a8:	9005      	str	r0, [sp, #20]
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	f43f af0c 	beq.w	800b1c8 <_strtod_l+0x490>
 800b3b0:	9b07      	ldr	r3, [sp, #28]
 800b3b2:	691a      	ldr	r2, [r3, #16]
 800b3b4:	3202      	adds	r2, #2
 800b3b6:	f103 010c 	add.w	r1, r3, #12
 800b3ba:	0092      	lsls	r2, r2, #2
 800b3bc:	300c      	adds	r0, #12
 800b3be:	f7ff fa94 	bl	800a8ea <memcpy>
 800b3c2:	ec4b ab10 	vmov	d0, sl, fp
 800b3c6:	aa1a      	add	r2, sp, #104	; 0x68
 800b3c8:	a919      	add	r1, sp, #100	; 0x64
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	f001 fc5e 	bl	800cc8c <__d2b>
 800b3d0:	ec4b ab18 	vmov	d8, sl, fp
 800b3d4:	9018      	str	r0, [sp, #96]	; 0x60
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	f43f aef6 	beq.w	800b1c8 <_strtod_l+0x490>
 800b3dc:	2101      	movs	r1, #1
 800b3de:	4620      	mov	r0, r4
 800b3e0:	f001 f9a8 	bl	800c734 <__i2b>
 800b3e4:	4606      	mov	r6, r0
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	f43f aeee 	beq.w	800b1c8 <_strtod_l+0x490>
 800b3ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b3ee:	9904      	ldr	r1, [sp, #16]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	bfab      	itete	ge
 800b3f4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b3f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b3f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b3fa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b3fe:	bfac      	ite	ge
 800b400:	eb03 0902 	addge.w	r9, r3, r2
 800b404:	1ad7      	sublt	r7, r2, r3
 800b406:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b408:	eba3 0801 	sub.w	r8, r3, r1
 800b40c:	4490      	add	r8, r2
 800b40e:	4ba1      	ldr	r3, [pc, #644]	; (800b694 <_strtod_l+0x95c>)
 800b410:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b414:	4598      	cmp	r8, r3
 800b416:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b41a:	f280 80c7 	bge.w	800b5ac <_strtod_l+0x874>
 800b41e:	eba3 0308 	sub.w	r3, r3, r8
 800b422:	2b1f      	cmp	r3, #31
 800b424:	eba2 0203 	sub.w	r2, r2, r3
 800b428:	f04f 0101 	mov.w	r1, #1
 800b42c:	f300 80b1 	bgt.w	800b592 <_strtod_l+0x85a>
 800b430:	fa01 f303 	lsl.w	r3, r1, r3
 800b434:	930d      	str	r3, [sp, #52]	; 0x34
 800b436:	2300      	movs	r3, #0
 800b438:	9308      	str	r3, [sp, #32]
 800b43a:	eb09 0802 	add.w	r8, r9, r2
 800b43e:	9b04      	ldr	r3, [sp, #16]
 800b440:	45c1      	cmp	r9, r8
 800b442:	4417      	add	r7, r2
 800b444:	441f      	add	r7, r3
 800b446:	464b      	mov	r3, r9
 800b448:	bfa8      	it	ge
 800b44a:	4643      	movge	r3, r8
 800b44c:	42bb      	cmp	r3, r7
 800b44e:	bfa8      	it	ge
 800b450:	463b      	movge	r3, r7
 800b452:	2b00      	cmp	r3, #0
 800b454:	bfc2      	ittt	gt
 800b456:	eba8 0803 	subgt.w	r8, r8, r3
 800b45a:	1aff      	subgt	r7, r7, r3
 800b45c:	eba9 0903 	subgt.w	r9, r9, r3
 800b460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b462:	2b00      	cmp	r3, #0
 800b464:	dd17      	ble.n	800b496 <_strtod_l+0x75e>
 800b466:	4631      	mov	r1, r6
 800b468:	461a      	mov	r2, r3
 800b46a:	4620      	mov	r0, r4
 800b46c:	f001 fa22 	bl	800c8b4 <__pow5mult>
 800b470:	4606      	mov	r6, r0
 800b472:	2800      	cmp	r0, #0
 800b474:	f43f aea8 	beq.w	800b1c8 <_strtod_l+0x490>
 800b478:	4601      	mov	r1, r0
 800b47a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b47c:	4620      	mov	r0, r4
 800b47e:	f001 f96f 	bl	800c760 <__multiply>
 800b482:	900b      	str	r0, [sp, #44]	; 0x2c
 800b484:	2800      	cmp	r0, #0
 800b486:	f43f ae9f 	beq.w	800b1c8 <_strtod_l+0x490>
 800b48a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b48c:	4620      	mov	r0, r4
 800b48e:	f001 f84f 	bl	800c530 <_Bfree>
 800b492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b494:	9318      	str	r3, [sp, #96]	; 0x60
 800b496:	f1b8 0f00 	cmp.w	r8, #0
 800b49a:	f300 808c 	bgt.w	800b5b6 <_strtod_l+0x87e>
 800b49e:	9b06      	ldr	r3, [sp, #24]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	dd08      	ble.n	800b4b6 <_strtod_l+0x77e>
 800b4a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4a6:	9905      	ldr	r1, [sp, #20]
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	f001 fa03 	bl	800c8b4 <__pow5mult>
 800b4ae:	9005      	str	r0, [sp, #20]
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	f43f ae89 	beq.w	800b1c8 <_strtod_l+0x490>
 800b4b6:	2f00      	cmp	r7, #0
 800b4b8:	dd08      	ble.n	800b4cc <_strtod_l+0x794>
 800b4ba:	9905      	ldr	r1, [sp, #20]
 800b4bc:	463a      	mov	r2, r7
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f001 fa52 	bl	800c968 <__lshift>
 800b4c4:	9005      	str	r0, [sp, #20]
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	f43f ae7e 	beq.w	800b1c8 <_strtod_l+0x490>
 800b4cc:	f1b9 0f00 	cmp.w	r9, #0
 800b4d0:	dd08      	ble.n	800b4e4 <_strtod_l+0x7ac>
 800b4d2:	4631      	mov	r1, r6
 800b4d4:	464a      	mov	r2, r9
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f001 fa46 	bl	800c968 <__lshift>
 800b4dc:	4606      	mov	r6, r0
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	f43f ae72 	beq.w	800b1c8 <_strtod_l+0x490>
 800b4e4:	9a05      	ldr	r2, [sp, #20]
 800b4e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	f001 fac9 	bl	800ca80 <__mdiff>
 800b4ee:	4605      	mov	r5, r0
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	f43f ae69 	beq.w	800b1c8 <_strtod_l+0x490>
 800b4f6:	68c3      	ldr	r3, [r0, #12]
 800b4f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	60c3      	str	r3, [r0, #12]
 800b4fe:	4631      	mov	r1, r6
 800b500:	f001 faa2 	bl	800ca48 <__mcmp>
 800b504:	2800      	cmp	r0, #0
 800b506:	da60      	bge.n	800b5ca <_strtod_l+0x892>
 800b508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b50a:	ea53 030a 	orrs.w	r3, r3, sl
 800b50e:	f040 8082 	bne.w	800b616 <_strtod_l+0x8de>
 800b512:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b516:	2b00      	cmp	r3, #0
 800b518:	d17d      	bne.n	800b616 <_strtod_l+0x8de>
 800b51a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b51e:	0d1b      	lsrs	r3, r3, #20
 800b520:	051b      	lsls	r3, r3, #20
 800b522:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b526:	d976      	bls.n	800b616 <_strtod_l+0x8de>
 800b528:	696b      	ldr	r3, [r5, #20]
 800b52a:	b913      	cbnz	r3, 800b532 <_strtod_l+0x7fa>
 800b52c:	692b      	ldr	r3, [r5, #16]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	dd71      	ble.n	800b616 <_strtod_l+0x8de>
 800b532:	4629      	mov	r1, r5
 800b534:	2201      	movs	r2, #1
 800b536:	4620      	mov	r0, r4
 800b538:	f001 fa16 	bl	800c968 <__lshift>
 800b53c:	4631      	mov	r1, r6
 800b53e:	4605      	mov	r5, r0
 800b540:	f001 fa82 	bl	800ca48 <__mcmp>
 800b544:	2800      	cmp	r0, #0
 800b546:	dd66      	ble.n	800b616 <_strtod_l+0x8de>
 800b548:	9904      	ldr	r1, [sp, #16]
 800b54a:	4a53      	ldr	r2, [pc, #332]	; (800b698 <_strtod_l+0x960>)
 800b54c:	465b      	mov	r3, fp
 800b54e:	2900      	cmp	r1, #0
 800b550:	f000 8081 	beq.w	800b656 <_strtod_l+0x91e>
 800b554:	ea02 010b 	and.w	r1, r2, fp
 800b558:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b55c:	dc7b      	bgt.n	800b656 <_strtod_l+0x91e>
 800b55e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b562:	f77f aea9 	ble.w	800b2b8 <_strtod_l+0x580>
 800b566:	4b4d      	ldr	r3, [pc, #308]	; (800b69c <_strtod_l+0x964>)
 800b568:	4650      	mov	r0, sl
 800b56a:	4659      	mov	r1, fp
 800b56c:	2200      	movs	r2, #0
 800b56e:	f7f5 f84b 	bl	8000608 <__aeabi_dmul>
 800b572:	460b      	mov	r3, r1
 800b574:	4303      	orrs	r3, r0
 800b576:	bf08      	it	eq
 800b578:	2322      	moveq	r3, #34	; 0x22
 800b57a:	4682      	mov	sl, r0
 800b57c:	468b      	mov	fp, r1
 800b57e:	bf08      	it	eq
 800b580:	6023      	streq	r3, [r4, #0]
 800b582:	e62b      	b.n	800b1dc <_strtod_l+0x4a4>
 800b584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b588:	fa02 f303 	lsl.w	r3, r2, r3
 800b58c:	ea03 0a0a 	and.w	sl, r3, sl
 800b590:	e6e3      	b.n	800b35a <_strtod_l+0x622>
 800b592:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b596:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b59a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b59e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b5a2:	fa01 f308 	lsl.w	r3, r1, r8
 800b5a6:	9308      	str	r3, [sp, #32]
 800b5a8:	910d      	str	r1, [sp, #52]	; 0x34
 800b5aa:	e746      	b.n	800b43a <_strtod_l+0x702>
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	9308      	str	r3, [sp, #32]
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	930d      	str	r3, [sp, #52]	; 0x34
 800b5b4:	e741      	b.n	800b43a <_strtod_l+0x702>
 800b5b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b5b8:	4642      	mov	r2, r8
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f001 f9d4 	bl	800c968 <__lshift>
 800b5c0:	9018      	str	r0, [sp, #96]	; 0x60
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	f47f af6b 	bne.w	800b49e <_strtod_l+0x766>
 800b5c8:	e5fe      	b.n	800b1c8 <_strtod_l+0x490>
 800b5ca:	465f      	mov	r7, fp
 800b5cc:	d16e      	bne.n	800b6ac <_strtod_l+0x974>
 800b5ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5d4:	b342      	cbz	r2, 800b628 <_strtod_l+0x8f0>
 800b5d6:	4a32      	ldr	r2, [pc, #200]	; (800b6a0 <_strtod_l+0x968>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d128      	bne.n	800b62e <_strtod_l+0x8f6>
 800b5dc:	9b04      	ldr	r3, [sp, #16]
 800b5de:	4651      	mov	r1, sl
 800b5e0:	b1eb      	cbz	r3, 800b61e <_strtod_l+0x8e6>
 800b5e2:	4b2d      	ldr	r3, [pc, #180]	; (800b698 <_strtod_l+0x960>)
 800b5e4:	403b      	ands	r3, r7
 800b5e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b5ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5ee:	d819      	bhi.n	800b624 <_strtod_l+0x8ec>
 800b5f0:	0d1b      	lsrs	r3, r3, #20
 800b5f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b5f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5fa:	4299      	cmp	r1, r3
 800b5fc:	d117      	bne.n	800b62e <_strtod_l+0x8f6>
 800b5fe:	4b29      	ldr	r3, [pc, #164]	; (800b6a4 <_strtod_l+0x96c>)
 800b600:	429f      	cmp	r7, r3
 800b602:	d102      	bne.n	800b60a <_strtod_l+0x8d2>
 800b604:	3101      	adds	r1, #1
 800b606:	f43f addf 	beq.w	800b1c8 <_strtod_l+0x490>
 800b60a:	4b23      	ldr	r3, [pc, #140]	; (800b698 <_strtod_l+0x960>)
 800b60c:	403b      	ands	r3, r7
 800b60e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b612:	f04f 0a00 	mov.w	sl, #0
 800b616:	9b04      	ldr	r3, [sp, #16]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1a4      	bne.n	800b566 <_strtod_l+0x82e>
 800b61c:	e5de      	b.n	800b1dc <_strtod_l+0x4a4>
 800b61e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b622:	e7ea      	b.n	800b5fa <_strtod_l+0x8c2>
 800b624:	4613      	mov	r3, r2
 800b626:	e7e8      	b.n	800b5fa <_strtod_l+0x8c2>
 800b628:	ea53 030a 	orrs.w	r3, r3, sl
 800b62c:	d08c      	beq.n	800b548 <_strtod_l+0x810>
 800b62e:	9b08      	ldr	r3, [sp, #32]
 800b630:	b1db      	cbz	r3, 800b66a <_strtod_l+0x932>
 800b632:	423b      	tst	r3, r7
 800b634:	d0ef      	beq.n	800b616 <_strtod_l+0x8de>
 800b636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b638:	9a04      	ldr	r2, [sp, #16]
 800b63a:	4650      	mov	r0, sl
 800b63c:	4659      	mov	r1, fp
 800b63e:	b1c3      	cbz	r3, 800b672 <_strtod_l+0x93a>
 800b640:	f7ff fb5d 	bl	800acfe <sulp>
 800b644:	4602      	mov	r2, r0
 800b646:	460b      	mov	r3, r1
 800b648:	ec51 0b18 	vmov	r0, r1, d8
 800b64c:	f7f4 fe26 	bl	800029c <__adddf3>
 800b650:	4682      	mov	sl, r0
 800b652:	468b      	mov	fp, r1
 800b654:	e7df      	b.n	800b616 <_strtod_l+0x8de>
 800b656:	4013      	ands	r3, r2
 800b658:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b65c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b660:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b664:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b668:	e7d5      	b.n	800b616 <_strtod_l+0x8de>
 800b66a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b66c:	ea13 0f0a 	tst.w	r3, sl
 800b670:	e7e0      	b.n	800b634 <_strtod_l+0x8fc>
 800b672:	f7ff fb44 	bl	800acfe <sulp>
 800b676:	4602      	mov	r2, r0
 800b678:	460b      	mov	r3, r1
 800b67a:	ec51 0b18 	vmov	r0, r1, d8
 800b67e:	f7f4 fe0b 	bl	8000298 <__aeabi_dsub>
 800b682:	2200      	movs	r2, #0
 800b684:	2300      	movs	r3, #0
 800b686:	4682      	mov	sl, r0
 800b688:	468b      	mov	fp, r1
 800b68a:	f7f5 fa25 	bl	8000ad8 <__aeabi_dcmpeq>
 800b68e:	2800      	cmp	r0, #0
 800b690:	d0c1      	beq.n	800b616 <_strtod_l+0x8de>
 800b692:	e611      	b.n	800b2b8 <_strtod_l+0x580>
 800b694:	fffffc02 	.word	0xfffffc02
 800b698:	7ff00000 	.word	0x7ff00000
 800b69c:	39500000 	.word	0x39500000
 800b6a0:	000fffff 	.word	0x000fffff
 800b6a4:	7fefffff 	.word	0x7fefffff
 800b6a8:	0800e088 	.word	0x0800e088
 800b6ac:	4631      	mov	r1, r6
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f001 fb48 	bl	800cd44 <__ratio>
 800b6b4:	ec59 8b10 	vmov	r8, r9, d0
 800b6b8:	ee10 0a10 	vmov	r0, s0
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b6c2:	4649      	mov	r1, r9
 800b6c4:	f7f5 fa1c 	bl	8000b00 <__aeabi_dcmple>
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	d07a      	beq.n	800b7c2 <_strtod_l+0xa8a>
 800b6cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d04a      	beq.n	800b768 <_strtod_l+0xa30>
 800b6d2:	4b95      	ldr	r3, [pc, #596]	; (800b928 <_strtod_l+0xbf0>)
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b6da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b928 <_strtod_l+0xbf0>
 800b6de:	f04f 0800 	mov.w	r8, #0
 800b6e2:	4b92      	ldr	r3, [pc, #584]	; (800b92c <_strtod_l+0xbf4>)
 800b6e4:	403b      	ands	r3, r7
 800b6e6:	930d      	str	r3, [sp, #52]	; 0x34
 800b6e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6ea:	4b91      	ldr	r3, [pc, #580]	; (800b930 <_strtod_l+0xbf8>)
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	f040 80b0 	bne.w	800b852 <_strtod_l+0xb1a>
 800b6f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b6f6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b6fa:	ec4b ab10 	vmov	d0, sl, fp
 800b6fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b702:	f001 fa47 	bl	800cb94 <__ulp>
 800b706:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b70a:	ec53 2b10 	vmov	r2, r3, d0
 800b70e:	f7f4 ff7b 	bl	8000608 <__aeabi_dmul>
 800b712:	4652      	mov	r2, sl
 800b714:	465b      	mov	r3, fp
 800b716:	f7f4 fdc1 	bl	800029c <__adddf3>
 800b71a:	460b      	mov	r3, r1
 800b71c:	4983      	ldr	r1, [pc, #524]	; (800b92c <_strtod_l+0xbf4>)
 800b71e:	4a85      	ldr	r2, [pc, #532]	; (800b934 <_strtod_l+0xbfc>)
 800b720:	4019      	ands	r1, r3
 800b722:	4291      	cmp	r1, r2
 800b724:	4682      	mov	sl, r0
 800b726:	d960      	bls.n	800b7ea <_strtod_l+0xab2>
 800b728:	ee18 3a90 	vmov	r3, s17
 800b72c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b730:	4293      	cmp	r3, r2
 800b732:	d104      	bne.n	800b73e <_strtod_l+0xa06>
 800b734:	ee18 3a10 	vmov	r3, s16
 800b738:	3301      	adds	r3, #1
 800b73a:	f43f ad45 	beq.w	800b1c8 <_strtod_l+0x490>
 800b73e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b940 <_strtod_l+0xc08>
 800b742:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b746:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b748:	4620      	mov	r0, r4
 800b74a:	f000 fef1 	bl	800c530 <_Bfree>
 800b74e:	9905      	ldr	r1, [sp, #20]
 800b750:	4620      	mov	r0, r4
 800b752:	f000 feed 	bl	800c530 <_Bfree>
 800b756:	4631      	mov	r1, r6
 800b758:	4620      	mov	r0, r4
 800b75a:	f000 fee9 	bl	800c530 <_Bfree>
 800b75e:	4629      	mov	r1, r5
 800b760:	4620      	mov	r0, r4
 800b762:	f000 fee5 	bl	800c530 <_Bfree>
 800b766:	e61a      	b.n	800b39e <_strtod_l+0x666>
 800b768:	f1ba 0f00 	cmp.w	sl, #0
 800b76c:	d11b      	bne.n	800b7a6 <_strtod_l+0xa6e>
 800b76e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b772:	b9f3      	cbnz	r3, 800b7b2 <_strtod_l+0xa7a>
 800b774:	4b6c      	ldr	r3, [pc, #432]	; (800b928 <_strtod_l+0xbf0>)
 800b776:	2200      	movs	r2, #0
 800b778:	4640      	mov	r0, r8
 800b77a:	4649      	mov	r1, r9
 800b77c:	f7f5 f9b6 	bl	8000aec <__aeabi_dcmplt>
 800b780:	b9d0      	cbnz	r0, 800b7b8 <_strtod_l+0xa80>
 800b782:	4640      	mov	r0, r8
 800b784:	4649      	mov	r1, r9
 800b786:	4b6c      	ldr	r3, [pc, #432]	; (800b938 <_strtod_l+0xc00>)
 800b788:	2200      	movs	r2, #0
 800b78a:	f7f4 ff3d 	bl	8000608 <__aeabi_dmul>
 800b78e:	4680      	mov	r8, r0
 800b790:	4689      	mov	r9, r1
 800b792:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b796:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b79a:	9315      	str	r3, [sp, #84]	; 0x54
 800b79c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b7a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b7a4:	e79d      	b.n	800b6e2 <_strtod_l+0x9aa>
 800b7a6:	f1ba 0f01 	cmp.w	sl, #1
 800b7aa:	d102      	bne.n	800b7b2 <_strtod_l+0xa7a>
 800b7ac:	2f00      	cmp	r7, #0
 800b7ae:	f43f ad83 	beq.w	800b2b8 <_strtod_l+0x580>
 800b7b2:	4b62      	ldr	r3, [pc, #392]	; (800b93c <_strtod_l+0xc04>)
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	e78e      	b.n	800b6d6 <_strtod_l+0x99e>
 800b7b8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b938 <_strtod_l+0xc00>
 800b7bc:	f04f 0800 	mov.w	r8, #0
 800b7c0:	e7e7      	b.n	800b792 <_strtod_l+0xa5a>
 800b7c2:	4b5d      	ldr	r3, [pc, #372]	; (800b938 <_strtod_l+0xc00>)
 800b7c4:	4640      	mov	r0, r8
 800b7c6:	4649      	mov	r1, r9
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f7f4 ff1d 	bl	8000608 <__aeabi_dmul>
 800b7ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7d0:	4680      	mov	r8, r0
 800b7d2:	4689      	mov	r9, r1
 800b7d4:	b933      	cbnz	r3, 800b7e4 <_strtod_l+0xaac>
 800b7d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7da:	900e      	str	r0, [sp, #56]	; 0x38
 800b7dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b7e2:	e7dd      	b.n	800b7a0 <_strtod_l+0xa68>
 800b7e4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b7e8:	e7f9      	b.n	800b7de <_strtod_l+0xaa6>
 800b7ea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b7ee:	9b04      	ldr	r3, [sp, #16]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1a8      	bne.n	800b746 <_strtod_l+0xa0e>
 800b7f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b7f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b7fa:	0d1b      	lsrs	r3, r3, #20
 800b7fc:	051b      	lsls	r3, r3, #20
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d1a1      	bne.n	800b746 <_strtod_l+0xa0e>
 800b802:	4640      	mov	r0, r8
 800b804:	4649      	mov	r1, r9
 800b806:	f7f5 fa21 	bl	8000c4c <__aeabi_d2lz>
 800b80a:	f7f4 fecf 	bl	80005ac <__aeabi_l2d>
 800b80e:	4602      	mov	r2, r0
 800b810:	460b      	mov	r3, r1
 800b812:	4640      	mov	r0, r8
 800b814:	4649      	mov	r1, r9
 800b816:	f7f4 fd3f 	bl	8000298 <__aeabi_dsub>
 800b81a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b81c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b820:	ea43 030a 	orr.w	r3, r3, sl
 800b824:	4313      	orrs	r3, r2
 800b826:	4680      	mov	r8, r0
 800b828:	4689      	mov	r9, r1
 800b82a:	d055      	beq.n	800b8d8 <_strtod_l+0xba0>
 800b82c:	a336      	add	r3, pc, #216	; (adr r3, 800b908 <_strtod_l+0xbd0>)
 800b82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b832:	f7f5 f95b 	bl	8000aec <__aeabi_dcmplt>
 800b836:	2800      	cmp	r0, #0
 800b838:	f47f acd0 	bne.w	800b1dc <_strtod_l+0x4a4>
 800b83c:	a334      	add	r3, pc, #208	; (adr r3, 800b910 <_strtod_l+0xbd8>)
 800b83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b842:	4640      	mov	r0, r8
 800b844:	4649      	mov	r1, r9
 800b846:	f7f5 f96f 	bl	8000b28 <__aeabi_dcmpgt>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	f43f af7b 	beq.w	800b746 <_strtod_l+0xa0e>
 800b850:	e4c4      	b.n	800b1dc <_strtod_l+0x4a4>
 800b852:	9b04      	ldr	r3, [sp, #16]
 800b854:	b333      	cbz	r3, 800b8a4 <_strtod_l+0xb6c>
 800b856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b858:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b85c:	d822      	bhi.n	800b8a4 <_strtod_l+0xb6c>
 800b85e:	a32e      	add	r3, pc, #184	; (adr r3, 800b918 <_strtod_l+0xbe0>)
 800b860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b864:	4640      	mov	r0, r8
 800b866:	4649      	mov	r1, r9
 800b868:	f7f5 f94a 	bl	8000b00 <__aeabi_dcmple>
 800b86c:	b1a0      	cbz	r0, 800b898 <_strtod_l+0xb60>
 800b86e:	4649      	mov	r1, r9
 800b870:	4640      	mov	r0, r8
 800b872:	f7f5 f963 	bl	8000b3c <__aeabi_d2uiz>
 800b876:	2801      	cmp	r0, #1
 800b878:	bf38      	it	cc
 800b87a:	2001      	movcc	r0, #1
 800b87c:	f7f4 fe4a 	bl	8000514 <__aeabi_ui2d>
 800b880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b882:	4680      	mov	r8, r0
 800b884:	4689      	mov	r9, r1
 800b886:	bb23      	cbnz	r3, 800b8d2 <_strtod_l+0xb9a>
 800b888:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b88c:	9010      	str	r0, [sp, #64]	; 0x40
 800b88e:	9311      	str	r3, [sp, #68]	; 0x44
 800b890:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b894:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b89a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b89c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b8a0:	1a9b      	subs	r3, r3, r2
 800b8a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b8a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b8a8:	eeb0 0a48 	vmov.f32	s0, s16
 800b8ac:	eef0 0a68 	vmov.f32	s1, s17
 800b8b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b8b4:	f001 f96e 	bl	800cb94 <__ulp>
 800b8b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b8bc:	ec53 2b10 	vmov	r2, r3, d0
 800b8c0:	f7f4 fea2 	bl	8000608 <__aeabi_dmul>
 800b8c4:	ec53 2b18 	vmov	r2, r3, d8
 800b8c8:	f7f4 fce8 	bl	800029c <__adddf3>
 800b8cc:	4682      	mov	sl, r0
 800b8ce:	468b      	mov	fp, r1
 800b8d0:	e78d      	b.n	800b7ee <_strtod_l+0xab6>
 800b8d2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b8d6:	e7db      	b.n	800b890 <_strtod_l+0xb58>
 800b8d8:	a311      	add	r3, pc, #68	; (adr r3, 800b920 <_strtod_l+0xbe8>)
 800b8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8de:	f7f5 f905 	bl	8000aec <__aeabi_dcmplt>
 800b8e2:	e7b2      	b.n	800b84a <_strtod_l+0xb12>
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	930a      	str	r3, [sp, #40]	; 0x28
 800b8e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b8ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b8ec:	6013      	str	r3, [r2, #0]
 800b8ee:	f7ff ba6b 	b.w	800adc8 <_strtod_l+0x90>
 800b8f2:	2a65      	cmp	r2, #101	; 0x65
 800b8f4:	f43f ab5f 	beq.w	800afb6 <_strtod_l+0x27e>
 800b8f8:	2a45      	cmp	r2, #69	; 0x45
 800b8fa:	f43f ab5c 	beq.w	800afb6 <_strtod_l+0x27e>
 800b8fe:	2301      	movs	r3, #1
 800b900:	f7ff bb94 	b.w	800b02c <_strtod_l+0x2f4>
 800b904:	f3af 8000 	nop.w
 800b908:	94a03595 	.word	0x94a03595
 800b90c:	3fdfffff 	.word	0x3fdfffff
 800b910:	35afe535 	.word	0x35afe535
 800b914:	3fe00000 	.word	0x3fe00000
 800b918:	ffc00000 	.word	0xffc00000
 800b91c:	41dfffff 	.word	0x41dfffff
 800b920:	94a03595 	.word	0x94a03595
 800b924:	3fcfffff 	.word	0x3fcfffff
 800b928:	3ff00000 	.word	0x3ff00000
 800b92c:	7ff00000 	.word	0x7ff00000
 800b930:	7fe00000 	.word	0x7fe00000
 800b934:	7c9fffff 	.word	0x7c9fffff
 800b938:	3fe00000 	.word	0x3fe00000
 800b93c:	bff00000 	.word	0xbff00000
 800b940:	7fefffff 	.word	0x7fefffff

0800b944 <strtod>:
 800b944:	460a      	mov	r2, r1
 800b946:	4601      	mov	r1, r0
 800b948:	4802      	ldr	r0, [pc, #8]	; (800b954 <strtod+0x10>)
 800b94a:	4b03      	ldr	r3, [pc, #12]	; (800b958 <strtod+0x14>)
 800b94c:	6800      	ldr	r0, [r0, #0]
 800b94e:	f7ff b9f3 	b.w	800ad38 <_strtod_l>
 800b952:	bf00      	nop
 800b954:	20000010 	.word	0x20000010
 800b958:	20000078 	.word	0x20000078

0800b95c <__swbuf_r>:
 800b95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b95e:	460e      	mov	r6, r1
 800b960:	4614      	mov	r4, r2
 800b962:	4605      	mov	r5, r0
 800b964:	b118      	cbz	r0, 800b96e <__swbuf_r+0x12>
 800b966:	6983      	ldr	r3, [r0, #24]
 800b968:	b90b      	cbnz	r3, 800b96e <__swbuf_r+0x12>
 800b96a:	f7fe fef9 	bl	800a760 <__sinit>
 800b96e:	4b21      	ldr	r3, [pc, #132]	; (800b9f4 <__swbuf_r+0x98>)
 800b970:	429c      	cmp	r4, r3
 800b972:	d12b      	bne.n	800b9cc <__swbuf_r+0x70>
 800b974:	686c      	ldr	r4, [r5, #4]
 800b976:	69a3      	ldr	r3, [r4, #24]
 800b978:	60a3      	str	r3, [r4, #8]
 800b97a:	89a3      	ldrh	r3, [r4, #12]
 800b97c:	071a      	lsls	r2, r3, #28
 800b97e:	d52f      	bpl.n	800b9e0 <__swbuf_r+0x84>
 800b980:	6923      	ldr	r3, [r4, #16]
 800b982:	b36b      	cbz	r3, 800b9e0 <__swbuf_r+0x84>
 800b984:	6923      	ldr	r3, [r4, #16]
 800b986:	6820      	ldr	r0, [r4, #0]
 800b988:	1ac0      	subs	r0, r0, r3
 800b98a:	6963      	ldr	r3, [r4, #20]
 800b98c:	b2f6      	uxtb	r6, r6
 800b98e:	4283      	cmp	r3, r0
 800b990:	4637      	mov	r7, r6
 800b992:	dc04      	bgt.n	800b99e <__swbuf_r+0x42>
 800b994:	4621      	mov	r1, r4
 800b996:	4628      	mov	r0, r5
 800b998:	f000 f948 	bl	800bc2c <_fflush_r>
 800b99c:	bb30      	cbnz	r0, 800b9ec <__swbuf_r+0x90>
 800b99e:	68a3      	ldr	r3, [r4, #8]
 800b9a0:	3b01      	subs	r3, #1
 800b9a2:	60a3      	str	r3, [r4, #8]
 800b9a4:	6823      	ldr	r3, [r4, #0]
 800b9a6:	1c5a      	adds	r2, r3, #1
 800b9a8:	6022      	str	r2, [r4, #0]
 800b9aa:	701e      	strb	r6, [r3, #0]
 800b9ac:	6963      	ldr	r3, [r4, #20]
 800b9ae:	3001      	adds	r0, #1
 800b9b0:	4283      	cmp	r3, r0
 800b9b2:	d004      	beq.n	800b9be <__swbuf_r+0x62>
 800b9b4:	89a3      	ldrh	r3, [r4, #12]
 800b9b6:	07db      	lsls	r3, r3, #31
 800b9b8:	d506      	bpl.n	800b9c8 <__swbuf_r+0x6c>
 800b9ba:	2e0a      	cmp	r6, #10
 800b9bc:	d104      	bne.n	800b9c8 <__swbuf_r+0x6c>
 800b9be:	4621      	mov	r1, r4
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	f000 f933 	bl	800bc2c <_fflush_r>
 800b9c6:	b988      	cbnz	r0, 800b9ec <__swbuf_r+0x90>
 800b9c8:	4638      	mov	r0, r7
 800b9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9cc:	4b0a      	ldr	r3, [pc, #40]	; (800b9f8 <__swbuf_r+0x9c>)
 800b9ce:	429c      	cmp	r4, r3
 800b9d0:	d101      	bne.n	800b9d6 <__swbuf_r+0x7a>
 800b9d2:	68ac      	ldr	r4, [r5, #8]
 800b9d4:	e7cf      	b.n	800b976 <__swbuf_r+0x1a>
 800b9d6:	4b09      	ldr	r3, [pc, #36]	; (800b9fc <__swbuf_r+0xa0>)
 800b9d8:	429c      	cmp	r4, r3
 800b9da:	bf08      	it	eq
 800b9dc:	68ec      	ldreq	r4, [r5, #12]
 800b9de:	e7ca      	b.n	800b976 <__swbuf_r+0x1a>
 800b9e0:	4621      	mov	r1, r4
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	f000 f81e 	bl	800ba24 <__swsetup_r>
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	d0cb      	beq.n	800b984 <__swbuf_r+0x28>
 800b9ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b9f0:	e7ea      	b.n	800b9c8 <__swbuf_r+0x6c>
 800b9f2:	bf00      	nop
 800b9f4:	0800e00c 	.word	0x0800e00c
 800b9f8:	0800e02c 	.word	0x0800e02c
 800b9fc:	0800dfec 	.word	0x0800dfec

0800ba00 <_write_r>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	4d07      	ldr	r5, [pc, #28]	; (800ba20 <_write_r+0x20>)
 800ba04:	4604      	mov	r4, r0
 800ba06:	4608      	mov	r0, r1
 800ba08:	4611      	mov	r1, r2
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	602a      	str	r2, [r5, #0]
 800ba0e:	461a      	mov	r2, r3
 800ba10:	f7f6 fdad 	bl	800256e <_write>
 800ba14:	1c43      	adds	r3, r0, #1
 800ba16:	d102      	bne.n	800ba1e <_write_r+0x1e>
 800ba18:	682b      	ldr	r3, [r5, #0]
 800ba1a:	b103      	cbz	r3, 800ba1e <_write_r+0x1e>
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	bd38      	pop	{r3, r4, r5, pc}
 800ba20:	20004904 	.word	0x20004904

0800ba24 <__swsetup_r>:
 800ba24:	4b32      	ldr	r3, [pc, #200]	; (800baf0 <__swsetup_r+0xcc>)
 800ba26:	b570      	push	{r4, r5, r6, lr}
 800ba28:	681d      	ldr	r5, [r3, #0]
 800ba2a:	4606      	mov	r6, r0
 800ba2c:	460c      	mov	r4, r1
 800ba2e:	b125      	cbz	r5, 800ba3a <__swsetup_r+0x16>
 800ba30:	69ab      	ldr	r3, [r5, #24]
 800ba32:	b913      	cbnz	r3, 800ba3a <__swsetup_r+0x16>
 800ba34:	4628      	mov	r0, r5
 800ba36:	f7fe fe93 	bl	800a760 <__sinit>
 800ba3a:	4b2e      	ldr	r3, [pc, #184]	; (800baf4 <__swsetup_r+0xd0>)
 800ba3c:	429c      	cmp	r4, r3
 800ba3e:	d10f      	bne.n	800ba60 <__swsetup_r+0x3c>
 800ba40:	686c      	ldr	r4, [r5, #4]
 800ba42:	89a3      	ldrh	r3, [r4, #12]
 800ba44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba48:	0719      	lsls	r1, r3, #28
 800ba4a:	d42c      	bmi.n	800baa6 <__swsetup_r+0x82>
 800ba4c:	06dd      	lsls	r5, r3, #27
 800ba4e:	d411      	bmi.n	800ba74 <__swsetup_r+0x50>
 800ba50:	2309      	movs	r3, #9
 800ba52:	6033      	str	r3, [r6, #0]
 800ba54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba58:	81a3      	strh	r3, [r4, #12]
 800ba5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba5e:	e03e      	b.n	800bade <__swsetup_r+0xba>
 800ba60:	4b25      	ldr	r3, [pc, #148]	; (800baf8 <__swsetup_r+0xd4>)
 800ba62:	429c      	cmp	r4, r3
 800ba64:	d101      	bne.n	800ba6a <__swsetup_r+0x46>
 800ba66:	68ac      	ldr	r4, [r5, #8]
 800ba68:	e7eb      	b.n	800ba42 <__swsetup_r+0x1e>
 800ba6a:	4b24      	ldr	r3, [pc, #144]	; (800bafc <__swsetup_r+0xd8>)
 800ba6c:	429c      	cmp	r4, r3
 800ba6e:	bf08      	it	eq
 800ba70:	68ec      	ldreq	r4, [r5, #12]
 800ba72:	e7e6      	b.n	800ba42 <__swsetup_r+0x1e>
 800ba74:	0758      	lsls	r0, r3, #29
 800ba76:	d512      	bpl.n	800ba9e <__swsetup_r+0x7a>
 800ba78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba7a:	b141      	cbz	r1, 800ba8e <__swsetup_r+0x6a>
 800ba7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba80:	4299      	cmp	r1, r3
 800ba82:	d002      	beq.n	800ba8a <__swsetup_r+0x66>
 800ba84:	4630      	mov	r0, r6
 800ba86:	f001 f9eb 	bl	800ce60 <_free_r>
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	6363      	str	r3, [r4, #52]	; 0x34
 800ba8e:	89a3      	ldrh	r3, [r4, #12]
 800ba90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba94:	81a3      	strh	r3, [r4, #12]
 800ba96:	2300      	movs	r3, #0
 800ba98:	6063      	str	r3, [r4, #4]
 800ba9a:	6923      	ldr	r3, [r4, #16]
 800ba9c:	6023      	str	r3, [r4, #0]
 800ba9e:	89a3      	ldrh	r3, [r4, #12]
 800baa0:	f043 0308 	orr.w	r3, r3, #8
 800baa4:	81a3      	strh	r3, [r4, #12]
 800baa6:	6923      	ldr	r3, [r4, #16]
 800baa8:	b94b      	cbnz	r3, 800babe <__swsetup_r+0x9a>
 800baaa:	89a3      	ldrh	r3, [r4, #12]
 800baac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bab4:	d003      	beq.n	800babe <__swsetup_r+0x9a>
 800bab6:	4621      	mov	r1, r4
 800bab8:	4630      	mov	r0, r6
 800baba:	f000 fc9b 	bl	800c3f4 <__smakebuf_r>
 800babe:	89a0      	ldrh	r0, [r4, #12]
 800bac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bac4:	f010 0301 	ands.w	r3, r0, #1
 800bac8:	d00a      	beq.n	800bae0 <__swsetup_r+0xbc>
 800baca:	2300      	movs	r3, #0
 800bacc:	60a3      	str	r3, [r4, #8]
 800bace:	6963      	ldr	r3, [r4, #20]
 800bad0:	425b      	negs	r3, r3
 800bad2:	61a3      	str	r3, [r4, #24]
 800bad4:	6923      	ldr	r3, [r4, #16]
 800bad6:	b943      	cbnz	r3, 800baea <__swsetup_r+0xc6>
 800bad8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800badc:	d1ba      	bne.n	800ba54 <__swsetup_r+0x30>
 800bade:	bd70      	pop	{r4, r5, r6, pc}
 800bae0:	0781      	lsls	r1, r0, #30
 800bae2:	bf58      	it	pl
 800bae4:	6963      	ldrpl	r3, [r4, #20]
 800bae6:	60a3      	str	r3, [r4, #8]
 800bae8:	e7f4      	b.n	800bad4 <__swsetup_r+0xb0>
 800baea:	2000      	movs	r0, #0
 800baec:	e7f7      	b.n	800bade <__swsetup_r+0xba>
 800baee:	bf00      	nop
 800baf0:	20000010 	.word	0x20000010
 800baf4:	0800e00c 	.word	0x0800e00c
 800baf8:	0800e02c 	.word	0x0800e02c
 800bafc:	0800dfec 	.word	0x0800dfec

0800bb00 <_close_r>:
 800bb00:	b538      	push	{r3, r4, r5, lr}
 800bb02:	4d06      	ldr	r5, [pc, #24]	; (800bb1c <_close_r+0x1c>)
 800bb04:	2300      	movs	r3, #0
 800bb06:	4604      	mov	r4, r0
 800bb08:	4608      	mov	r0, r1
 800bb0a:	602b      	str	r3, [r5, #0]
 800bb0c:	f7f6 fd4b 	bl	80025a6 <_close>
 800bb10:	1c43      	adds	r3, r0, #1
 800bb12:	d102      	bne.n	800bb1a <_close_r+0x1a>
 800bb14:	682b      	ldr	r3, [r5, #0]
 800bb16:	b103      	cbz	r3, 800bb1a <_close_r+0x1a>
 800bb18:	6023      	str	r3, [r4, #0]
 800bb1a:	bd38      	pop	{r3, r4, r5, pc}
 800bb1c:	20004904 	.word	0x20004904

0800bb20 <__sflush_r>:
 800bb20:	898a      	ldrh	r2, [r1, #12]
 800bb22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb26:	4605      	mov	r5, r0
 800bb28:	0710      	lsls	r0, r2, #28
 800bb2a:	460c      	mov	r4, r1
 800bb2c:	d458      	bmi.n	800bbe0 <__sflush_r+0xc0>
 800bb2e:	684b      	ldr	r3, [r1, #4]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	dc05      	bgt.n	800bb40 <__sflush_r+0x20>
 800bb34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	dc02      	bgt.n	800bb40 <__sflush_r+0x20>
 800bb3a:	2000      	movs	r0, #0
 800bb3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb42:	2e00      	cmp	r6, #0
 800bb44:	d0f9      	beq.n	800bb3a <__sflush_r+0x1a>
 800bb46:	2300      	movs	r3, #0
 800bb48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb4c:	682f      	ldr	r7, [r5, #0]
 800bb4e:	602b      	str	r3, [r5, #0]
 800bb50:	d032      	beq.n	800bbb8 <__sflush_r+0x98>
 800bb52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb54:	89a3      	ldrh	r3, [r4, #12]
 800bb56:	075a      	lsls	r2, r3, #29
 800bb58:	d505      	bpl.n	800bb66 <__sflush_r+0x46>
 800bb5a:	6863      	ldr	r3, [r4, #4]
 800bb5c:	1ac0      	subs	r0, r0, r3
 800bb5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb60:	b10b      	cbz	r3, 800bb66 <__sflush_r+0x46>
 800bb62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb64:	1ac0      	subs	r0, r0, r3
 800bb66:	2300      	movs	r3, #0
 800bb68:	4602      	mov	r2, r0
 800bb6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb6c:	6a21      	ldr	r1, [r4, #32]
 800bb6e:	4628      	mov	r0, r5
 800bb70:	47b0      	blx	r6
 800bb72:	1c43      	adds	r3, r0, #1
 800bb74:	89a3      	ldrh	r3, [r4, #12]
 800bb76:	d106      	bne.n	800bb86 <__sflush_r+0x66>
 800bb78:	6829      	ldr	r1, [r5, #0]
 800bb7a:	291d      	cmp	r1, #29
 800bb7c:	d82c      	bhi.n	800bbd8 <__sflush_r+0xb8>
 800bb7e:	4a2a      	ldr	r2, [pc, #168]	; (800bc28 <__sflush_r+0x108>)
 800bb80:	40ca      	lsrs	r2, r1
 800bb82:	07d6      	lsls	r6, r2, #31
 800bb84:	d528      	bpl.n	800bbd8 <__sflush_r+0xb8>
 800bb86:	2200      	movs	r2, #0
 800bb88:	6062      	str	r2, [r4, #4]
 800bb8a:	04d9      	lsls	r1, r3, #19
 800bb8c:	6922      	ldr	r2, [r4, #16]
 800bb8e:	6022      	str	r2, [r4, #0]
 800bb90:	d504      	bpl.n	800bb9c <__sflush_r+0x7c>
 800bb92:	1c42      	adds	r2, r0, #1
 800bb94:	d101      	bne.n	800bb9a <__sflush_r+0x7a>
 800bb96:	682b      	ldr	r3, [r5, #0]
 800bb98:	b903      	cbnz	r3, 800bb9c <__sflush_r+0x7c>
 800bb9a:	6560      	str	r0, [r4, #84]	; 0x54
 800bb9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb9e:	602f      	str	r7, [r5, #0]
 800bba0:	2900      	cmp	r1, #0
 800bba2:	d0ca      	beq.n	800bb3a <__sflush_r+0x1a>
 800bba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bba8:	4299      	cmp	r1, r3
 800bbaa:	d002      	beq.n	800bbb2 <__sflush_r+0x92>
 800bbac:	4628      	mov	r0, r5
 800bbae:	f001 f957 	bl	800ce60 <_free_r>
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	6360      	str	r0, [r4, #52]	; 0x34
 800bbb6:	e7c1      	b.n	800bb3c <__sflush_r+0x1c>
 800bbb8:	6a21      	ldr	r1, [r4, #32]
 800bbba:	2301      	movs	r3, #1
 800bbbc:	4628      	mov	r0, r5
 800bbbe:	47b0      	blx	r6
 800bbc0:	1c41      	adds	r1, r0, #1
 800bbc2:	d1c7      	bne.n	800bb54 <__sflush_r+0x34>
 800bbc4:	682b      	ldr	r3, [r5, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d0c4      	beq.n	800bb54 <__sflush_r+0x34>
 800bbca:	2b1d      	cmp	r3, #29
 800bbcc:	d001      	beq.n	800bbd2 <__sflush_r+0xb2>
 800bbce:	2b16      	cmp	r3, #22
 800bbd0:	d101      	bne.n	800bbd6 <__sflush_r+0xb6>
 800bbd2:	602f      	str	r7, [r5, #0]
 800bbd4:	e7b1      	b.n	800bb3a <__sflush_r+0x1a>
 800bbd6:	89a3      	ldrh	r3, [r4, #12]
 800bbd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbdc:	81a3      	strh	r3, [r4, #12]
 800bbde:	e7ad      	b.n	800bb3c <__sflush_r+0x1c>
 800bbe0:	690f      	ldr	r7, [r1, #16]
 800bbe2:	2f00      	cmp	r7, #0
 800bbe4:	d0a9      	beq.n	800bb3a <__sflush_r+0x1a>
 800bbe6:	0793      	lsls	r3, r2, #30
 800bbe8:	680e      	ldr	r6, [r1, #0]
 800bbea:	bf08      	it	eq
 800bbec:	694b      	ldreq	r3, [r1, #20]
 800bbee:	600f      	str	r7, [r1, #0]
 800bbf0:	bf18      	it	ne
 800bbf2:	2300      	movne	r3, #0
 800bbf4:	eba6 0807 	sub.w	r8, r6, r7
 800bbf8:	608b      	str	r3, [r1, #8]
 800bbfa:	f1b8 0f00 	cmp.w	r8, #0
 800bbfe:	dd9c      	ble.n	800bb3a <__sflush_r+0x1a>
 800bc00:	6a21      	ldr	r1, [r4, #32]
 800bc02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc04:	4643      	mov	r3, r8
 800bc06:	463a      	mov	r2, r7
 800bc08:	4628      	mov	r0, r5
 800bc0a:	47b0      	blx	r6
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	dc06      	bgt.n	800bc1e <__sflush_r+0xfe>
 800bc10:	89a3      	ldrh	r3, [r4, #12]
 800bc12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc16:	81a3      	strh	r3, [r4, #12]
 800bc18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc1c:	e78e      	b.n	800bb3c <__sflush_r+0x1c>
 800bc1e:	4407      	add	r7, r0
 800bc20:	eba8 0800 	sub.w	r8, r8, r0
 800bc24:	e7e9      	b.n	800bbfa <__sflush_r+0xda>
 800bc26:	bf00      	nop
 800bc28:	20400001 	.word	0x20400001

0800bc2c <_fflush_r>:
 800bc2c:	b538      	push	{r3, r4, r5, lr}
 800bc2e:	690b      	ldr	r3, [r1, #16]
 800bc30:	4605      	mov	r5, r0
 800bc32:	460c      	mov	r4, r1
 800bc34:	b913      	cbnz	r3, 800bc3c <_fflush_r+0x10>
 800bc36:	2500      	movs	r5, #0
 800bc38:	4628      	mov	r0, r5
 800bc3a:	bd38      	pop	{r3, r4, r5, pc}
 800bc3c:	b118      	cbz	r0, 800bc46 <_fflush_r+0x1a>
 800bc3e:	6983      	ldr	r3, [r0, #24]
 800bc40:	b90b      	cbnz	r3, 800bc46 <_fflush_r+0x1a>
 800bc42:	f7fe fd8d 	bl	800a760 <__sinit>
 800bc46:	4b14      	ldr	r3, [pc, #80]	; (800bc98 <_fflush_r+0x6c>)
 800bc48:	429c      	cmp	r4, r3
 800bc4a:	d11b      	bne.n	800bc84 <_fflush_r+0x58>
 800bc4c:	686c      	ldr	r4, [r5, #4]
 800bc4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d0ef      	beq.n	800bc36 <_fflush_r+0xa>
 800bc56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc58:	07d0      	lsls	r0, r2, #31
 800bc5a:	d404      	bmi.n	800bc66 <_fflush_r+0x3a>
 800bc5c:	0599      	lsls	r1, r3, #22
 800bc5e:	d402      	bmi.n	800bc66 <_fflush_r+0x3a>
 800bc60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc62:	f7fe fe40 	bl	800a8e6 <__retarget_lock_acquire_recursive>
 800bc66:	4628      	mov	r0, r5
 800bc68:	4621      	mov	r1, r4
 800bc6a:	f7ff ff59 	bl	800bb20 <__sflush_r>
 800bc6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc70:	07da      	lsls	r2, r3, #31
 800bc72:	4605      	mov	r5, r0
 800bc74:	d4e0      	bmi.n	800bc38 <_fflush_r+0xc>
 800bc76:	89a3      	ldrh	r3, [r4, #12]
 800bc78:	059b      	lsls	r3, r3, #22
 800bc7a:	d4dd      	bmi.n	800bc38 <_fflush_r+0xc>
 800bc7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc7e:	f7fe fe33 	bl	800a8e8 <__retarget_lock_release_recursive>
 800bc82:	e7d9      	b.n	800bc38 <_fflush_r+0xc>
 800bc84:	4b05      	ldr	r3, [pc, #20]	; (800bc9c <_fflush_r+0x70>)
 800bc86:	429c      	cmp	r4, r3
 800bc88:	d101      	bne.n	800bc8e <_fflush_r+0x62>
 800bc8a:	68ac      	ldr	r4, [r5, #8]
 800bc8c:	e7df      	b.n	800bc4e <_fflush_r+0x22>
 800bc8e:	4b04      	ldr	r3, [pc, #16]	; (800bca0 <_fflush_r+0x74>)
 800bc90:	429c      	cmp	r4, r3
 800bc92:	bf08      	it	eq
 800bc94:	68ec      	ldreq	r4, [r5, #12]
 800bc96:	e7da      	b.n	800bc4e <_fflush_r+0x22>
 800bc98:	0800e00c 	.word	0x0800e00c
 800bc9c:	0800e02c 	.word	0x0800e02c
 800bca0:	0800dfec 	.word	0x0800dfec

0800bca4 <rshift>:
 800bca4:	6903      	ldr	r3, [r0, #16]
 800bca6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bcaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bcae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bcb2:	f100 0414 	add.w	r4, r0, #20
 800bcb6:	dd45      	ble.n	800bd44 <rshift+0xa0>
 800bcb8:	f011 011f 	ands.w	r1, r1, #31
 800bcbc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bcc0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bcc4:	d10c      	bne.n	800bce0 <rshift+0x3c>
 800bcc6:	f100 0710 	add.w	r7, r0, #16
 800bcca:	4629      	mov	r1, r5
 800bccc:	42b1      	cmp	r1, r6
 800bcce:	d334      	bcc.n	800bd3a <rshift+0x96>
 800bcd0:	1a9b      	subs	r3, r3, r2
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	1eea      	subs	r2, r5, #3
 800bcd6:	4296      	cmp	r6, r2
 800bcd8:	bf38      	it	cc
 800bcda:	2300      	movcc	r3, #0
 800bcdc:	4423      	add	r3, r4
 800bcde:	e015      	b.n	800bd0c <rshift+0x68>
 800bce0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bce4:	f1c1 0820 	rsb	r8, r1, #32
 800bce8:	40cf      	lsrs	r7, r1
 800bcea:	f105 0e04 	add.w	lr, r5, #4
 800bcee:	46a1      	mov	r9, r4
 800bcf0:	4576      	cmp	r6, lr
 800bcf2:	46f4      	mov	ip, lr
 800bcf4:	d815      	bhi.n	800bd22 <rshift+0x7e>
 800bcf6:	1a9a      	subs	r2, r3, r2
 800bcf8:	0092      	lsls	r2, r2, #2
 800bcfa:	3a04      	subs	r2, #4
 800bcfc:	3501      	adds	r5, #1
 800bcfe:	42ae      	cmp	r6, r5
 800bd00:	bf38      	it	cc
 800bd02:	2200      	movcc	r2, #0
 800bd04:	18a3      	adds	r3, r4, r2
 800bd06:	50a7      	str	r7, [r4, r2]
 800bd08:	b107      	cbz	r7, 800bd0c <rshift+0x68>
 800bd0a:	3304      	adds	r3, #4
 800bd0c:	1b1a      	subs	r2, r3, r4
 800bd0e:	42a3      	cmp	r3, r4
 800bd10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bd14:	bf08      	it	eq
 800bd16:	2300      	moveq	r3, #0
 800bd18:	6102      	str	r2, [r0, #16]
 800bd1a:	bf08      	it	eq
 800bd1c:	6143      	streq	r3, [r0, #20]
 800bd1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd22:	f8dc c000 	ldr.w	ip, [ip]
 800bd26:	fa0c fc08 	lsl.w	ip, ip, r8
 800bd2a:	ea4c 0707 	orr.w	r7, ip, r7
 800bd2e:	f849 7b04 	str.w	r7, [r9], #4
 800bd32:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bd36:	40cf      	lsrs	r7, r1
 800bd38:	e7da      	b.n	800bcf0 <rshift+0x4c>
 800bd3a:	f851 cb04 	ldr.w	ip, [r1], #4
 800bd3e:	f847 cf04 	str.w	ip, [r7, #4]!
 800bd42:	e7c3      	b.n	800bccc <rshift+0x28>
 800bd44:	4623      	mov	r3, r4
 800bd46:	e7e1      	b.n	800bd0c <rshift+0x68>

0800bd48 <__hexdig_fun>:
 800bd48:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bd4c:	2b09      	cmp	r3, #9
 800bd4e:	d802      	bhi.n	800bd56 <__hexdig_fun+0xe>
 800bd50:	3820      	subs	r0, #32
 800bd52:	b2c0      	uxtb	r0, r0
 800bd54:	4770      	bx	lr
 800bd56:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bd5a:	2b05      	cmp	r3, #5
 800bd5c:	d801      	bhi.n	800bd62 <__hexdig_fun+0x1a>
 800bd5e:	3847      	subs	r0, #71	; 0x47
 800bd60:	e7f7      	b.n	800bd52 <__hexdig_fun+0xa>
 800bd62:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bd66:	2b05      	cmp	r3, #5
 800bd68:	d801      	bhi.n	800bd6e <__hexdig_fun+0x26>
 800bd6a:	3827      	subs	r0, #39	; 0x27
 800bd6c:	e7f1      	b.n	800bd52 <__hexdig_fun+0xa>
 800bd6e:	2000      	movs	r0, #0
 800bd70:	4770      	bx	lr
	...

0800bd74 <__gethex>:
 800bd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd78:	ed2d 8b02 	vpush	{d8}
 800bd7c:	b089      	sub	sp, #36	; 0x24
 800bd7e:	ee08 0a10 	vmov	s16, r0
 800bd82:	9304      	str	r3, [sp, #16]
 800bd84:	4bb4      	ldr	r3, [pc, #720]	; (800c058 <__gethex+0x2e4>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	9301      	str	r3, [sp, #4]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	468b      	mov	fp, r1
 800bd8e:	4690      	mov	r8, r2
 800bd90:	f7f4 fa26 	bl	80001e0 <strlen>
 800bd94:	9b01      	ldr	r3, [sp, #4]
 800bd96:	f8db 2000 	ldr.w	r2, [fp]
 800bd9a:	4403      	add	r3, r0
 800bd9c:	4682      	mov	sl, r0
 800bd9e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bda2:	9305      	str	r3, [sp, #20]
 800bda4:	1c93      	adds	r3, r2, #2
 800bda6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bdaa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bdae:	32fe      	adds	r2, #254	; 0xfe
 800bdb0:	18d1      	adds	r1, r2, r3
 800bdb2:	461f      	mov	r7, r3
 800bdb4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bdb8:	9100      	str	r1, [sp, #0]
 800bdba:	2830      	cmp	r0, #48	; 0x30
 800bdbc:	d0f8      	beq.n	800bdb0 <__gethex+0x3c>
 800bdbe:	f7ff ffc3 	bl	800bd48 <__hexdig_fun>
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d13a      	bne.n	800be3e <__gethex+0xca>
 800bdc8:	9901      	ldr	r1, [sp, #4]
 800bdca:	4652      	mov	r2, sl
 800bdcc:	4638      	mov	r0, r7
 800bdce:	f7fe ff82 	bl	800acd6 <strncmp>
 800bdd2:	4605      	mov	r5, r0
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	d168      	bne.n	800beaa <__gethex+0x136>
 800bdd8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bddc:	eb07 060a 	add.w	r6, r7, sl
 800bde0:	f7ff ffb2 	bl	800bd48 <__hexdig_fun>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	d062      	beq.n	800beae <__gethex+0x13a>
 800bde8:	4633      	mov	r3, r6
 800bdea:	7818      	ldrb	r0, [r3, #0]
 800bdec:	2830      	cmp	r0, #48	; 0x30
 800bdee:	461f      	mov	r7, r3
 800bdf0:	f103 0301 	add.w	r3, r3, #1
 800bdf4:	d0f9      	beq.n	800bdea <__gethex+0x76>
 800bdf6:	f7ff ffa7 	bl	800bd48 <__hexdig_fun>
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	fab0 f480 	clz	r4, r0
 800be00:	0964      	lsrs	r4, r4, #5
 800be02:	4635      	mov	r5, r6
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	463a      	mov	r2, r7
 800be08:	4616      	mov	r6, r2
 800be0a:	3201      	adds	r2, #1
 800be0c:	7830      	ldrb	r0, [r6, #0]
 800be0e:	f7ff ff9b 	bl	800bd48 <__hexdig_fun>
 800be12:	2800      	cmp	r0, #0
 800be14:	d1f8      	bne.n	800be08 <__gethex+0x94>
 800be16:	9901      	ldr	r1, [sp, #4]
 800be18:	4652      	mov	r2, sl
 800be1a:	4630      	mov	r0, r6
 800be1c:	f7fe ff5b 	bl	800acd6 <strncmp>
 800be20:	b980      	cbnz	r0, 800be44 <__gethex+0xd0>
 800be22:	b94d      	cbnz	r5, 800be38 <__gethex+0xc4>
 800be24:	eb06 050a 	add.w	r5, r6, sl
 800be28:	462a      	mov	r2, r5
 800be2a:	4616      	mov	r6, r2
 800be2c:	3201      	adds	r2, #1
 800be2e:	7830      	ldrb	r0, [r6, #0]
 800be30:	f7ff ff8a 	bl	800bd48 <__hexdig_fun>
 800be34:	2800      	cmp	r0, #0
 800be36:	d1f8      	bne.n	800be2a <__gethex+0xb6>
 800be38:	1bad      	subs	r5, r5, r6
 800be3a:	00ad      	lsls	r5, r5, #2
 800be3c:	e004      	b.n	800be48 <__gethex+0xd4>
 800be3e:	2400      	movs	r4, #0
 800be40:	4625      	mov	r5, r4
 800be42:	e7e0      	b.n	800be06 <__gethex+0x92>
 800be44:	2d00      	cmp	r5, #0
 800be46:	d1f7      	bne.n	800be38 <__gethex+0xc4>
 800be48:	7833      	ldrb	r3, [r6, #0]
 800be4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800be4e:	2b50      	cmp	r3, #80	; 0x50
 800be50:	d13b      	bne.n	800beca <__gethex+0x156>
 800be52:	7873      	ldrb	r3, [r6, #1]
 800be54:	2b2b      	cmp	r3, #43	; 0x2b
 800be56:	d02c      	beq.n	800beb2 <__gethex+0x13e>
 800be58:	2b2d      	cmp	r3, #45	; 0x2d
 800be5a:	d02e      	beq.n	800beba <__gethex+0x146>
 800be5c:	1c71      	adds	r1, r6, #1
 800be5e:	f04f 0900 	mov.w	r9, #0
 800be62:	7808      	ldrb	r0, [r1, #0]
 800be64:	f7ff ff70 	bl	800bd48 <__hexdig_fun>
 800be68:	1e43      	subs	r3, r0, #1
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	2b18      	cmp	r3, #24
 800be6e:	d82c      	bhi.n	800beca <__gethex+0x156>
 800be70:	f1a0 0210 	sub.w	r2, r0, #16
 800be74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800be78:	f7ff ff66 	bl	800bd48 <__hexdig_fun>
 800be7c:	1e43      	subs	r3, r0, #1
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	2b18      	cmp	r3, #24
 800be82:	d91d      	bls.n	800bec0 <__gethex+0x14c>
 800be84:	f1b9 0f00 	cmp.w	r9, #0
 800be88:	d000      	beq.n	800be8c <__gethex+0x118>
 800be8a:	4252      	negs	r2, r2
 800be8c:	4415      	add	r5, r2
 800be8e:	f8cb 1000 	str.w	r1, [fp]
 800be92:	b1e4      	cbz	r4, 800bece <__gethex+0x15a>
 800be94:	9b00      	ldr	r3, [sp, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	bf14      	ite	ne
 800be9a:	2700      	movne	r7, #0
 800be9c:	2706      	moveq	r7, #6
 800be9e:	4638      	mov	r0, r7
 800bea0:	b009      	add	sp, #36	; 0x24
 800bea2:	ecbd 8b02 	vpop	{d8}
 800bea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beaa:	463e      	mov	r6, r7
 800beac:	4625      	mov	r5, r4
 800beae:	2401      	movs	r4, #1
 800beb0:	e7ca      	b.n	800be48 <__gethex+0xd4>
 800beb2:	f04f 0900 	mov.w	r9, #0
 800beb6:	1cb1      	adds	r1, r6, #2
 800beb8:	e7d3      	b.n	800be62 <__gethex+0xee>
 800beba:	f04f 0901 	mov.w	r9, #1
 800bebe:	e7fa      	b.n	800beb6 <__gethex+0x142>
 800bec0:	230a      	movs	r3, #10
 800bec2:	fb03 0202 	mla	r2, r3, r2, r0
 800bec6:	3a10      	subs	r2, #16
 800bec8:	e7d4      	b.n	800be74 <__gethex+0x100>
 800beca:	4631      	mov	r1, r6
 800becc:	e7df      	b.n	800be8e <__gethex+0x11a>
 800bece:	1bf3      	subs	r3, r6, r7
 800bed0:	3b01      	subs	r3, #1
 800bed2:	4621      	mov	r1, r4
 800bed4:	2b07      	cmp	r3, #7
 800bed6:	dc0b      	bgt.n	800bef0 <__gethex+0x17c>
 800bed8:	ee18 0a10 	vmov	r0, s16
 800bedc:	f000 fae8 	bl	800c4b0 <_Balloc>
 800bee0:	4604      	mov	r4, r0
 800bee2:	b940      	cbnz	r0, 800bef6 <__gethex+0x182>
 800bee4:	4b5d      	ldr	r3, [pc, #372]	; (800c05c <__gethex+0x2e8>)
 800bee6:	4602      	mov	r2, r0
 800bee8:	21de      	movs	r1, #222	; 0xde
 800beea:	485d      	ldr	r0, [pc, #372]	; (800c060 <__gethex+0x2ec>)
 800beec:	f001 fb1a 	bl	800d524 <__assert_func>
 800bef0:	3101      	adds	r1, #1
 800bef2:	105b      	asrs	r3, r3, #1
 800bef4:	e7ee      	b.n	800bed4 <__gethex+0x160>
 800bef6:	f100 0914 	add.w	r9, r0, #20
 800befa:	f04f 0b00 	mov.w	fp, #0
 800befe:	f1ca 0301 	rsb	r3, sl, #1
 800bf02:	f8cd 9008 	str.w	r9, [sp, #8]
 800bf06:	f8cd b000 	str.w	fp, [sp]
 800bf0a:	9306      	str	r3, [sp, #24]
 800bf0c:	42b7      	cmp	r7, r6
 800bf0e:	d340      	bcc.n	800bf92 <__gethex+0x21e>
 800bf10:	9802      	ldr	r0, [sp, #8]
 800bf12:	9b00      	ldr	r3, [sp, #0]
 800bf14:	f840 3b04 	str.w	r3, [r0], #4
 800bf18:	eba0 0009 	sub.w	r0, r0, r9
 800bf1c:	1080      	asrs	r0, r0, #2
 800bf1e:	0146      	lsls	r6, r0, #5
 800bf20:	6120      	str	r0, [r4, #16]
 800bf22:	4618      	mov	r0, r3
 800bf24:	f000 fbb6 	bl	800c694 <__hi0bits>
 800bf28:	1a30      	subs	r0, r6, r0
 800bf2a:	f8d8 6000 	ldr.w	r6, [r8]
 800bf2e:	42b0      	cmp	r0, r6
 800bf30:	dd63      	ble.n	800bffa <__gethex+0x286>
 800bf32:	1b87      	subs	r7, r0, r6
 800bf34:	4639      	mov	r1, r7
 800bf36:	4620      	mov	r0, r4
 800bf38:	f000 ff5a 	bl	800cdf0 <__any_on>
 800bf3c:	4682      	mov	sl, r0
 800bf3e:	b1a8      	cbz	r0, 800bf6c <__gethex+0x1f8>
 800bf40:	1e7b      	subs	r3, r7, #1
 800bf42:	1159      	asrs	r1, r3, #5
 800bf44:	f003 021f 	and.w	r2, r3, #31
 800bf48:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bf4c:	f04f 0a01 	mov.w	sl, #1
 800bf50:	fa0a f202 	lsl.w	r2, sl, r2
 800bf54:	420a      	tst	r2, r1
 800bf56:	d009      	beq.n	800bf6c <__gethex+0x1f8>
 800bf58:	4553      	cmp	r3, sl
 800bf5a:	dd05      	ble.n	800bf68 <__gethex+0x1f4>
 800bf5c:	1eb9      	subs	r1, r7, #2
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f000 ff46 	bl	800cdf0 <__any_on>
 800bf64:	2800      	cmp	r0, #0
 800bf66:	d145      	bne.n	800bff4 <__gethex+0x280>
 800bf68:	f04f 0a02 	mov.w	sl, #2
 800bf6c:	4639      	mov	r1, r7
 800bf6e:	4620      	mov	r0, r4
 800bf70:	f7ff fe98 	bl	800bca4 <rshift>
 800bf74:	443d      	add	r5, r7
 800bf76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf7a:	42ab      	cmp	r3, r5
 800bf7c:	da4c      	bge.n	800c018 <__gethex+0x2a4>
 800bf7e:	ee18 0a10 	vmov	r0, s16
 800bf82:	4621      	mov	r1, r4
 800bf84:	f000 fad4 	bl	800c530 <_Bfree>
 800bf88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	6013      	str	r3, [r2, #0]
 800bf8e:	27a3      	movs	r7, #163	; 0xa3
 800bf90:	e785      	b.n	800be9e <__gethex+0x12a>
 800bf92:	1e73      	subs	r3, r6, #1
 800bf94:	9a05      	ldr	r2, [sp, #20]
 800bf96:	9303      	str	r3, [sp, #12]
 800bf98:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d019      	beq.n	800bfd4 <__gethex+0x260>
 800bfa0:	f1bb 0f20 	cmp.w	fp, #32
 800bfa4:	d107      	bne.n	800bfb6 <__gethex+0x242>
 800bfa6:	9b02      	ldr	r3, [sp, #8]
 800bfa8:	9a00      	ldr	r2, [sp, #0]
 800bfaa:	f843 2b04 	str.w	r2, [r3], #4
 800bfae:	9302      	str	r3, [sp, #8]
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	9300      	str	r3, [sp, #0]
 800bfb4:	469b      	mov	fp, r3
 800bfb6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bfba:	f7ff fec5 	bl	800bd48 <__hexdig_fun>
 800bfbe:	9b00      	ldr	r3, [sp, #0]
 800bfc0:	f000 000f 	and.w	r0, r0, #15
 800bfc4:	fa00 f00b 	lsl.w	r0, r0, fp
 800bfc8:	4303      	orrs	r3, r0
 800bfca:	9300      	str	r3, [sp, #0]
 800bfcc:	f10b 0b04 	add.w	fp, fp, #4
 800bfd0:	9b03      	ldr	r3, [sp, #12]
 800bfd2:	e00d      	b.n	800bff0 <__gethex+0x27c>
 800bfd4:	9b03      	ldr	r3, [sp, #12]
 800bfd6:	9a06      	ldr	r2, [sp, #24]
 800bfd8:	4413      	add	r3, r2
 800bfda:	42bb      	cmp	r3, r7
 800bfdc:	d3e0      	bcc.n	800bfa0 <__gethex+0x22c>
 800bfde:	4618      	mov	r0, r3
 800bfe0:	9901      	ldr	r1, [sp, #4]
 800bfe2:	9307      	str	r3, [sp, #28]
 800bfe4:	4652      	mov	r2, sl
 800bfe6:	f7fe fe76 	bl	800acd6 <strncmp>
 800bfea:	9b07      	ldr	r3, [sp, #28]
 800bfec:	2800      	cmp	r0, #0
 800bfee:	d1d7      	bne.n	800bfa0 <__gethex+0x22c>
 800bff0:	461e      	mov	r6, r3
 800bff2:	e78b      	b.n	800bf0c <__gethex+0x198>
 800bff4:	f04f 0a03 	mov.w	sl, #3
 800bff8:	e7b8      	b.n	800bf6c <__gethex+0x1f8>
 800bffa:	da0a      	bge.n	800c012 <__gethex+0x29e>
 800bffc:	1a37      	subs	r7, r6, r0
 800bffe:	4621      	mov	r1, r4
 800c000:	ee18 0a10 	vmov	r0, s16
 800c004:	463a      	mov	r2, r7
 800c006:	f000 fcaf 	bl	800c968 <__lshift>
 800c00a:	1bed      	subs	r5, r5, r7
 800c00c:	4604      	mov	r4, r0
 800c00e:	f100 0914 	add.w	r9, r0, #20
 800c012:	f04f 0a00 	mov.w	sl, #0
 800c016:	e7ae      	b.n	800bf76 <__gethex+0x202>
 800c018:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c01c:	42a8      	cmp	r0, r5
 800c01e:	dd72      	ble.n	800c106 <__gethex+0x392>
 800c020:	1b45      	subs	r5, r0, r5
 800c022:	42ae      	cmp	r6, r5
 800c024:	dc36      	bgt.n	800c094 <__gethex+0x320>
 800c026:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c02a:	2b02      	cmp	r3, #2
 800c02c:	d02a      	beq.n	800c084 <__gethex+0x310>
 800c02e:	2b03      	cmp	r3, #3
 800c030:	d02c      	beq.n	800c08c <__gethex+0x318>
 800c032:	2b01      	cmp	r3, #1
 800c034:	d11c      	bne.n	800c070 <__gethex+0x2fc>
 800c036:	42ae      	cmp	r6, r5
 800c038:	d11a      	bne.n	800c070 <__gethex+0x2fc>
 800c03a:	2e01      	cmp	r6, #1
 800c03c:	d112      	bne.n	800c064 <__gethex+0x2f0>
 800c03e:	9a04      	ldr	r2, [sp, #16]
 800c040:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c044:	6013      	str	r3, [r2, #0]
 800c046:	2301      	movs	r3, #1
 800c048:	6123      	str	r3, [r4, #16]
 800c04a:	f8c9 3000 	str.w	r3, [r9]
 800c04e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c050:	2762      	movs	r7, #98	; 0x62
 800c052:	601c      	str	r4, [r3, #0]
 800c054:	e723      	b.n	800be9e <__gethex+0x12a>
 800c056:	bf00      	nop
 800c058:	0800e128 	.word	0x0800e128
 800c05c:	0800e0b0 	.word	0x0800e0b0
 800c060:	0800e0c1 	.word	0x0800e0c1
 800c064:	1e71      	subs	r1, r6, #1
 800c066:	4620      	mov	r0, r4
 800c068:	f000 fec2 	bl	800cdf0 <__any_on>
 800c06c:	2800      	cmp	r0, #0
 800c06e:	d1e6      	bne.n	800c03e <__gethex+0x2ca>
 800c070:	ee18 0a10 	vmov	r0, s16
 800c074:	4621      	mov	r1, r4
 800c076:	f000 fa5b 	bl	800c530 <_Bfree>
 800c07a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c07c:	2300      	movs	r3, #0
 800c07e:	6013      	str	r3, [r2, #0]
 800c080:	2750      	movs	r7, #80	; 0x50
 800c082:	e70c      	b.n	800be9e <__gethex+0x12a>
 800c084:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c086:	2b00      	cmp	r3, #0
 800c088:	d1f2      	bne.n	800c070 <__gethex+0x2fc>
 800c08a:	e7d8      	b.n	800c03e <__gethex+0x2ca>
 800c08c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d1d5      	bne.n	800c03e <__gethex+0x2ca>
 800c092:	e7ed      	b.n	800c070 <__gethex+0x2fc>
 800c094:	1e6f      	subs	r7, r5, #1
 800c096:	f1ba 0f00 	cmp.w	sl, #0
 800c09a:	d131      	bne.n	800c100 <__gethex+0x38c>
 800c09c:	b127      	cbz	r7, 800c0a8 <__gethex+0x334>
 800c09e:	4639      	mov	r1, r7
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	f000 fea5 	bl	800cdf0 <__any_on>
 800c0a6:	4682      	mov	sl, r0
 800c0a8:	117b      	asrs	r3, r7, #5
 800c0aa:	2101      	movs	r1, #1
 800c0ac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c0b0:	f007 071f 	and.w	r7, r7, #31
 800c0b4:	fa01 f707 	lsl.w	r7, r1, r7
 800c0b8:	421f      	tst	r7, r3
 800c0ba:	4629      	mov	r1, r5
 800c0bc:	4620      	mov	r0, r4
 800c0be:	bf18      	it	ne
 800c0c0:	f04a 0a02 	orrne.w	sl, sl, #2
 800c0c4:	1b76      	subs	r6, r6, r5
 800c0c6:	f7ff fded 	bl	800bca4 <rshift>
 800c0ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c0ce:	2702      	movs	r7, #2
 800c0d0:	f1ba 0f00 	cmp.w	sl, #0
 800c0d4:	d048      	beq.n	800c168 <__gethex+0x3f4>
 800c0d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c0da:	2b02      	cmp	r3, #2
 800c0dc:	d015      	beq.n	800c10a <__gethex+0x396>
 800c0de:	2b03      	cmp	r3, #3
 800c0e0:	d017      	beq.n	800c112 <__gethex+0x39e>
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d109      	bne.n	800c0fa <__gethex+0x386>
 800c0e6:	f01a 0f02 	tst.w	sl, #2
 800c0ea:	d006      	beq.n	800c0fa <__gethex+0x386>
 800c0ec:	f8d9 0000 	ldr.w	r0, [r9]
 800c0f0:	ea4a 0a00 	orr.w	sl, sl, r0
 800c0f4:	f01a 0f01 	tst.w	sl, #1
 800c0f8:	d10e      	bne.n	800c118 <__gethex+0x3a4>
 800c0fa:	f047 0710 	orr.w	r7, r7, #16
 800c0fe:	e033      	b.n	800c168 <__gethex+0x3f4>
 800c100:	f04f 0a01 	mov.w	sl, #1
 800c104:	e7d0      	b.n	800c0a8 <__gethex+0x334>
 800c106:	2701      	movs	r7, #1
 800c108:	e7e2      	b.n	800c0d0 <__gethex+0x35c>
 800c10a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c10c:	f1c3 0301 	rsb	r3, r3, #1
 800c110:	9315      	str	r3, [sp, #84]	; 0x54
 800c112:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c114:	2b00      	cmp	r3, #0
 800c116:	d0f0      	beq.n	800c0fa <__gethex+0x386>
 800c118:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c11c:	f104 0314 	add.w	r3, r4, #20
 800c120:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c124:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c128:	f04f 0c00 	mov.w	ip, #0
 800c12c:	4618      	mov	r0, r3
 800c12e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c132:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800c136:	d01c      	beq.n	800c172 <__gethex+0x3fe>
 800c138:	3201      	adds	r2, #1
 800c13a:	6002      	str	r2, [r0, #0]
 800c13c:	2f02      	cmp	r7, #2
 800c13e:	f104 0314 	add.w	r3, r4, #20
 800c142:	d13f      	bne.n	800c1c4 <__gethex+0x450>
 800c144:	f8d8 2000 	ldr.w	r2, [r8]
 800c148:	3a01      	subs	r2, #1
 800c14a:	42b2      	cmp	r2, r6
 800c14c:	d10a      	bne.n	800c164 <__gethex+0x3f0>
 800c14e:	1171      	asrs	r1, r6, #5
 800c150:	2201      	movs	r2, #1
 800c152:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c156:	f006 061f 	and.w	r6, r6, #31
 800c15a:	fa02 f606 	lsl.w	r6, r2, r6
 800c15e:	421e      	tst	r6, r3
 800c160:	bf18      	it	ne
 800c162:	4617      	movne	r7, r2
 800c164:	f047 0720 	orr.w	r7, r7, #32
 800c168:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c16a:	601c      	str	r4, [r3, #0]
 800c16c:	9b04      	ldr	r3, [sp, #16]
 800c16e:	601d      	str	r5, [r3, #0]
 800c170:	e695      	b.n	800be9e <__gethex+0x12a>
 800c172:	4299      	cmp	r1, r3
 800c174:	f843 cc04 	str.w	ip, [r3, #-4]
 800c178:	d8d8      	bhi.n	800c12c <__gethex+0x3b8>
 800c17a:	68a3      	ldr	r3, [r4, #8]
 800c17c:	459b      	cmp	fp, r3
 800c17e:	db19      	blt.n	800c1b4 <__gethex+0x440>
 800c180:	6861      	ldr	r1, [r4, #4]
 800c182:	ee18 0a10 	vmov	r0, s16
 800c186:	3101      	adds	r1, #1
 800c188:	f000 f992 	bl	800c4b0 <_Balloc>
 800c18c:	4681      	mov	r9, r0
 800c18e:	b918      	cbnz	r0, 800c198 <__gethex+0x424>
 800c190:	4b1a      	ldr	r3, [pc, #104]	; (800c1fc <__gethex+0x488>)
 800c192:	4602      	mov	r2, r0
 800c194:	2184      	movs	r1, #132	; 0x84
 800c196:	e6a8      	b.n	800beea <__gethex+0x176>
 800c198:	6922      	ldr	r2, [r4, #16]
 800c19a:	3202      	adds	r2, #2
 800c19c:	f104 010c 	add.w	r1, r4, #12
 800c1a0:	0092      	lsls	r2, r2, #2
 800c1a2:	300c      	adds	r0, #12
 800c1a4:	f7fe fba1 	bl	800a8ea <memcpy>
 800c1a8:	4621      	mov	r1, r4
 800c1aa:	ee18 0a10 	vmov	r0, s16
 800c1ae:	f000 f9bf 	bl	800c530 <_Bfree>
 800c1b2:	464c      	mov	r4, r9
 800c1b4:	6923      	ldr	r3, [r4, #16]
 800c1b6:	1c5a      	adds	r2, r3, #1
 800c1b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c1bc:	6122      	str	r2, [r4, #16]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	615a      	str	r2, [r3, #20]
 800c1c2:	e7bb      	b.n	800c13c <__gethex+0x3c8>
 800c1c4:	6922      	ldr	r2, [r4, #16]
 800c1c6:	455a      	cmp	r2, fp
 800c1c8:	dd0b      	ble.n	800c1e2 <__gethex+0x46e>
 800c1ca:	2101      	movs	r1, #1
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	f7ff fd69 	bl	800bca4 <rshift>
 800c1d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c1d6:	3501      	adds	r5, #1
 800c1d8:	42ab      	cmp	r3, r5
 800c1da:	f6ff aed0 	blt.w	800bf7e <__gethex+0x20a>
 800c1de:	2701      	movs	r7, #1
 800c1e0:	e7c0      	b.n	800c164 <__gethex+0x3f0>
 800c1e2:	f016 061f 	ands.w	r6, r6, #31
 800c1e6:	d0fa      	beq.n	800c1de <__gethex+0x46a>
 800c1e8:	4453      	add	r3, sl
 800c1ea:	f1c6 0620 	rsb	r6, r6, #32
 800c1ee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c1f2:	f000 fa4f 	bl	800c694 <__hi0bits>
 800c1f6:	42b0      	cmp	r0, r6
 800c1f8:	dbe7      	blt.n	800c1ca <__gethex+0x456>
 800c1fa:	e7f0      	b.n	800c1de <__gethex+0x46a>
 800c1fc:	0800e0b0 	.word	0x0800e0b0

0800c200 <L_shift>:
 800c200:	f1c2 0208 	rsb	r2, r2, #8
 800c204:	0092      	lsls	r2, r2, #2
 800c206:	b570      	push	{r4, r5, r6, lr}
 800c208:	f1c2 0620 	rsb	r6, r2, #32
 800c20c:	6843      	ldr	r3, [r0, #4]
 800c20e:	6804      	ldr	r4, [r0, #0]
 800c210:	fa03 f506 	lsl.w	r5, r3, r6
 800c214:	432c      	orrs	r4, r5
 800c216:	40d3      	lsrs	r3, r2
 800c218:	6004      	str	r4, [r0, #0]
 800c21a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c21e:	4288      	cmp	r0, r1
 800c220:	d3f4      	bcc.n	800c20c <L_shift+0xc>
 800c222:	bd70      	pop	{r4, r5, r6, pc}

0800c224 <__match>:
 800c224:	b530      	push	{r4, r5, lr}
 800c226:	6803      	ldr	r3, [r0, #0]
 800c228:	3301      	adds	r3, #1
 800c22a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c22e:	b914      	cbnz	r4, 800c236 <__match+0x12>
 800c230:	6003      	str	r3, [r0, #0]
 800c232:	2001      	movs	r0, #1
 800c234:	bd30      	pop	{r4, r5, pc}
 800c236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c23a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c23e:	2d19      	cmp	r5, #25
 800c240:	bf98      	it	ls
 800c242:	3220      	addls	r2, #32
 800c244:	42a2      	cmp	r2, r4
 800c246:	d0f0      	beq.n	800c22a <__match+0x6>
 800c248:	2000      	movs	r0, #0
 800c24a:	e7f3      	b.n	800c234 <__match+0x10>

0800c24c <__hexnan>:
 800c24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c250:	680b      	ldr	r3, [r1, #0]
 800c252:	115e      	asrs	r6, r3, #5
 800c254:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c258:	f013 031f 	ands.w	r3, r3, #31
 800c25c:	b087      	sub	sp, #28
 800c25e:	bf18      	it	ne
 800c260:	3604      	addne	r6, #4
 800c262:	2500      	movs	r5, #0
 800c264:	1f37      	subs	r7, r6, #4
 800c266:	4690      	mov	r8, r2
 800c268:	6802      	ldr	r2, [r0, #0]
 800c26a:	9301      	str	r3, [sp, #4]
 800c26c:	4682      	mov	sl, r0
 800c26e:	f846 5c04 	str.w	r5, [r6, #-4]
 800c272:	46b9      	mov	r9, r7
 800c274:	463c      	mov	r4, r7
 800c276:	9502      	str	r5, [sp, #8]
 800c278:	46ab      	mov	fp, r5
 800c27a:	7851      	ldrb	r1, [r2, #1]
 800c27c:	1c53      	adds	r3, r2, #1
 800c27e:	9303      	str	r3, [sp, #12]
 800c280:	b341      	cbz	r1, 800c2d4 <__hexnan+0x88>
 800c282:	4608      	mov	r0, r1
 800c284:	9205      	str	r2, [sp, #20]
 800c286:	9104      	str	r1, [sp, #16]
 800c288:	f7ff fd5e 	bl	800bd48 <__hexdig_fun>
 800c28c:	2800      	cmp	r0, #0
 800c28e:	d14f      	bne.n	800c330 <__hexnan+0xe4>
 800c290:	9904      	ldr	r1, [sp, #16]
 800c292:	9a05      	ldr	r2, [sp, #20]
 800c294:	2920      	cmp	r1, #32
 800c296:	d818      	bhi.n	800c2ca <__hexnan+0x7e>
 800c298:	9b02      	ldr	r3, [sp, #8]
 800c29a:	459b      	cmp	fp, r3
 800c29c:	dd13      	ble.n	800c2c6 <__hexnan+0x7a>
 800c29e:	454c      	cmp	r4, r9
 800c2a0:	d206      	bcs.n	800c2b0 <__hexnan+0x64>
 800c2a2:	2d07      	cmp	r5, #7
 800c2a4:	dc04      	bgt.n	800c2b0 <__hexnan+0x64>
 800c2a6:	462a      	mov	r2, r5
 800c2a8:	4649      	mov	r1, r9
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f7ff ffa8 	bl	800c200 <L_shift>
 800c2b0:	4544      	cmp	r4, r8
 800c2b2:	d950      	bls.n	800c356 <__hexnan+0x10a>
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	f1a4 0904 	sub.w	r9, r4, #4
 800c2ba:	f844 3c04 	str.w	r3, [r4, #-4]
 800c2be:	f8cd b008 	str.w	fp, [sp, #8]
 800c2c2:	464c      	mov	r4, r9
 800c2c4:	461d      	mov	r5, r3
 800c2c6:	9a03      	ldr	r2, [sp, #12]
 800c2c8:	e7d7      	b.n	800c27a <__hexnan+0x2e>
 800c2ca:	2929      	cmp	r1, #41	; 0x29
 800c2cc:	d156      	bne.n	800c37c <__hexnan+0x130>
 800c2ce:	3202      	adds	r2, #2
 800c2d0:	f8ca 2000 	str.w	r2, [sl]
 800c2d4:	f1bb 0f00 	cmp.w	fp, #0
 800c2d8:	d050      	beq.n	800c37c <__hexnan+0x130>
 800c2da:	454c      	cmp	r4, r9
 800c2dc:	d206      	bcs.n	800c2ec <__hexnan+0xa0>
 800c2de:	2d07      	cmp	r5, #7
 800c2e0:	dc04      	bgt.n	800c2ec <__hexnan+0xa0>
 800c2e2:	462a      	mov	r2, r5
 800c2e4:	4649      	mov	r1, r9
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	f7ff ff8a 	bl	800c200 <L_shift>
 800c2ec:	4544      	cmp	r4, r8
 800c2ee:	d934      	bls.n	800c35a <__hexnan+0x10e>
 800c2f0:	f1a8 0204 	sub.w	r2, r8, #4
 800c2f4:	4623      	mov	r3, r4
 800c2f6:	f853 1b04 	ldr.w	r1, [r3], #4
 800c2fa:	f842 1f04 	str.w	r1, [r2, #4]!
 800c2fe:	429f      	cmp	r7, r3
 800c300:	d2f9      	bcs.n	800c2f6 <__hexnan+0xaa>
 800c302:	1b3b      	subs	r3, r7, r4
 800c304:	f023 0303 	bic.w	r3, r3, #3
 800c308:	3304      	adds	r3, #4
 800c30a:	3401      	adds	r4, #1
 800c30c:	3e03      	subs	r6, #3
 800c30e:	42b4      	cmp	r4, r6
 800c310:	bf88      	it	hi
 800c312:	2304      	movhi	r3, #4
 800c314:	4443      	add	r3, r8
 800c316:	2200      	movs	r2, #0
 800c318:	f843 2b04 	str.w	r2, [r3], #4
 800c31c:	429f      	cmp	r7, r3
 800c31e:	d2fb      	bcs.n	800c318 <__hexnan+0xcc>
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	b91b      	cbnz	r3, 800c32c <__hexnan+0xe0>
 800c324:	4547      	cmp	r7, r8
 800c326:	d127      	bne.n	800c378 <__hexnan+0x12c>
 800c328:	2301      	movs	r3, #1
 800c32a:	603b      	str	r3, [r7, #0]
 800c32c:	2005      	movs	r0, #5
 800c32e:	e026      	b.n	800c37e <__hexnan+0x132>
 800c330:	3501      	adds	r5, #1
 800c332:	2d08      	cmp	r5, #8
 800c334:	f10b 0b01 	add.w	fp, fp, #1
 800c338:	dd06      	ble.n	800c348 <__hexnan+0xfc>
 800c33a:	4544      	cmp	r4, r8
 800c33c:	d9c3      	bls.n	800c2c6 <__hexnan+0x7a>
 800c33e:	2300      	movs	r3, #0
 800c340:	f844 3c04 	str.w	r3, [r4, #-4]
 800c344:	2501      	movs	r5, #1
 800c346:	3c04      	subs	r4, #4
 800c348:	6822      	ldr	r2, [r4, #0]
 800c34a:	f000 000f 	and.w	r0, r0, #15
 800c34e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c352:	6022      	str	r2, [r4, #0]
 800c354:	e7b7      	b.n	800c2c6 <__hexnan+0x7a>
 800c356:	2508      	movs	r5, #8
 800c358:	e7b5      	b.n	800c2c6 <__hexnan+0x7a>
 800c35a:	9b01      	ldr	r3, [sp, #4]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d0df      	beq.n	800c320 <__hexnan+0xd4>
 800c360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c364:	f1c3 0320 	rsb	r3, r3, #32
 800c368:	fa22 f303 	lsr.w	r3, r2, r3
 800c36c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c370:	401a      	ands	r2, r3
 800c372:	f846 2c04 	str.w	r2, [r6, #-4]
 800c376:	e7d3      	b.n	800c320 <__hexnan+0xd4>
 800c378:	3f04      	subs	r7, #4
 800c37a:	e7d1      	b.n	800c320 <__hexnan+0xd4>
 800c37c:	2004      	movs	r0, #4
 800c37e:	b007      	add	sp, #28
 800c380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c384 <_lseek_r>:
 800c384:	b538      	push	{r3, r4, r5, lr}
 800c386:	4d07      	ldr	r5, [pc, #28]	; (800c3a4 <_lseek_r+0x20>)
 800c388:	4604      	mov	r4, r0
 800c38a:	4608      	mov	r0, r1
 800c38c:	4611      	mov	r1, r2
 800c38e:	2200      	movs	r2, #0
 800c390:	602a      	str	r2, [r5, #0]
 800c392:	461a      	mov	r2, r3
 800c394:	f7f6 f92e 	bl	80025f4 <_lseek>
 800c398:	1c43      	adds	r3, r0, #1
 800c39a:	d102      	bne.n	800c3a2 <_lseek_r+0x1e>
 800c39c:	682b      	ldr	r3, [r5, #0]
 800c39e:	b103      	cbz	r3, 800c3a2 <_lseek_r+0x1e>
 800c3a0:	6023      	str	r3, [r4, #0]
 800c3a2:	bd38      	pop	{r3, r4, r5, pc}
 800c3a4:	20004904 	.word	0x20004904

0800c3a8 <__swhatbuf_r>:
 800c3a8:	b570      	push	{r4, r5, r6, lr}
 800c3aa:	460e      	mov	r6, r1
 800c3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3b0:	2900      	cmp	r1, #0
 800c3b2:	b096      	sub	sp, #88	; 0x58
 800c3b4:	4614      	mov	r4, r2
 800c3b6:	461d      	mov	r5, r3
 800c3b8:	da08      	bge.n	800c3cc <__swhatbuf_r+0x24>
 800c3ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	602a      	str	r2, [r5, #0]
 800c3c2:	061a      	lsls	r2, r3, #24
 800c3c4:	d410      	bmi.n	800c3e8 <__swhatbuf_r+0x40>
 800c3c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3ca:	e00e      	b.n	800c3ea <__swhatbuf_r+0x42>
 800c3cc:	466a      	mov	r2, sp
 800c3ce:	f001 f8d9 	bl	800d584 <_fstat_r>
 800c3d2:	2800      	cmp	r0, #0
 800c3d4:	dbf1      	blt.n	800c3ba <__swhatbuf_r+0x12>
 800c3d6:	9a01      	ldr	r2, [sp, #4]
 800c3d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c3dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c3e0:	425a      	negs	r2, r3
 800c3e2:	415a      	adcs	r2, r3
 800c3e4:	602a      	str	r2, [r5, #0]
 800c3e6:	e7ee      	b.n	800c3c6 <__swhatbuf_r+0x1e>
 800c3e8:	2340      	movs	r3, #64	; 0x40
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	6023      	str	r3, [r4, #0]
 800c3ee:	b016      	add	sp, #88	; 0x58
 800c3f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c3f4 <__smakebuf_r>:
 800c3f4:	898b      	ldrh	r3, [r1, #12]
 800c3f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3f8:	079d      	lsls	r5, r3, #30
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	460c      	mov	r4, r1
 800c3fe:	d507      	bpl.n	800c410 <__smakebuf_r+0x1c>
 800c400:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c404:	6023      	str	r3, [r4, #0]
 800c406:	6123      	str	r3, [r4, #16]
 800c408:	2301      	movs	r3, #1
 800c40a:	6163      	str	r3, [r4, #20]
 800c40c:	b002      	add	sp, #8
 800c40e:	bd70      	pop	{r4, r5, r6, pc}
 800c410:	ab01      	add	r3, sp, #4
 800c412:	466a      	mov	r2, sp
 800c414:	f7ff ffc8 	bl	800c3a8 <__swhatbuf_r>
 800c418:	9900      	ldr	r1, [sp, #0]
 800c41a:	4605      	mov	r5, r0
 800c41c:	4630      	mov	r0, r6
 800c41e:	f7fe fa9b 	bl	800a958 <_malloc_r>
 800c422:	b948      	cbnz	r0, 800c438 <__smakebuf_r+0x44>
 800c424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c428:	059a      	lsls	r2, r3, #22
 800c42a:	d4ef      	bmi.n	800c40c <__smakebuf_r+0x18>
 800c42c:	f023 0303 	bic.w	r3, r3, #3
 800c430:	f043 0302 	orr.w	r3, r3, #2
 800c434:	81a3      	strh	r3, [r4, #12]
 800c436:	e7e3      	b.n	800c400 <__smakebuf_r+0xc>
 800c438:	4b0d      	ldr	r3, [pc, #52]	; (800c470 <__smakebuf_r+0x7c>)
 800c43a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c43c:	89a3      	ldrh	r3, [r4, #12]
 800c43e:	6020      	str	r0, [r4, #0]
 800c440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c444:	81a3      	strh	r3, [r4, #12]
 800c446:	9b00      	ldr	r3, [sp, #0]
 800c448:	6163      	str	r3, [r4, #20]
 800c44a:	9b01      	ldr	r3, [sp, #4]
 800c44c:	6120      	str	r0, [r4, #16]
 800c44e:	b15b      	cbz	r3, 800c468 <__smakebuf_r+0x74>
 800c450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c454:	4630      	mov	r0, r6
 800c456:	f001 f8a7 	bl	800d5a8 <_isatty_r>
 800c45a:	b128      	cbz	r0, 800c468 <__smakebuf_r+0x74>
 800c45c:	89a3      	ldrh	r3, [r4, #12]
 800c45e:	f023 0303 	bic.w	r3, r3, #3
 800c462:	f043 0301 	orr.w	r3, r3, #1
 800c466:	81a3      	strh	r3, [r4, #12]
 800c468:	89a0      	ldrh	r0, [r4, #12]
 800c46a:	4305      	orrs	r5, r0
 800c46c:	81a5      	strh	r5, [r4, #12]
 800c46e:	e7cd      	b.n	800c40c <__smakebuf_r+0x18>
 800c470:	0800a6f9 	.word	0x0800a6f9

0800c474 <__ascii_mbtowc>:
 800c474:	b082      	sub	sp, #8
 800c476:	b901      	cbnz	r1, 800c47a <__ascii_mbtowc+0x6>
 800c478:	a901      	add	r1, sp, #4
 800c47a:	b142      	cbz	r2, 800c48e <__ascii_mbtowc+0x1a>
 800c47c:	b14b      	cbz	r3, 800c492 <__ascii_mbtowc+0x1e>
 800c47e:	7813      	ldrb	r3, [r2, #0]
 800c480:	600b      	str	r3, [r1, #0]
 800c482:	7812      	ldrb	r2, [r2, #0]
 800c484:	1e10      	subs	r0, r2, #0
 800c486:	bf18      	it	ne
 800c488:	2001      	movne	r0, #1
 800c48a:	b002      	add	sp, #8
 800c48c:	4770      	bx	lr
 800c48e:	4610      	mov	r0, r2
 800c490:	e7fb      	b.n	800c48a <__ascii_mbtowc+0x16>
 800c492:	f06f 0001 	mvn.w	r0, #1
 800c496:	e7f8      	b.n	800c48a <__ascii_mbtowc+0x16>

0800c498 <__malloc_lock>:
 800c498:	4801      	ldr	r0, [pc, #4]	; (800c4a0 <__malloc_lock+0x8>)
 800c49a:	f7fe ba24 	b.w	800a8e6 <__retarget_lock_acquire_recursive>
 800c49e:	bf00      	nop
 800c4a0:	200048f8 	.word	0x200048f8

0800c4a4 <__malloc_unlock>:
 800c4a4:	4801      	ldr	r0, [pc, #4]	; (800c4ac <__malloc_unlock+0x8>)
 800c4a6:	f7fe ba1f 	b.w	800a8e8 <__retarget_lock_release_recursive>
 800c4aa:	bf00      	nop
 800c4ac:	200048f8 	.word	0x200048f8

0800c4b0 <_Balloc>:
 800c4b0:	b570      	push	{r4, r5, r6, lr}
 800c4b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4b4:	4604      	mov	r4, r0
 800c4b6:	460d      	mov	r5, r1
 800c4b8:	b976      	cbnz	r6, 800c4d8 <_Balloc+0x28>
 800c4ba:	2010      	movs	r0, #16
 800c4bc:	f001 f884 	bl	800d5c8 <malloc>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	6260      	str	r0, [r4, #36]	; 0x24
 800c4c4:	b920      	cbnz	r0, 800c4d0 <_Balloc+0x20>
 800c4c6:	4b18      	ldr	r3, [pc, #96]	; (800c528 <_Balloc+0x78>)
 800c4c8:	4818      	ldr	r0, [pc, #96]	; (800c52c <_Balloc+0x7c>)
 800c4ca:	2166      	movs	r1, #102	; 0x66
 800c4cc:	f001 f82a 	bl	800d524 <__assert_func>
 800c4d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4d4:	6006      	str	r6, [r0, #0]
 800c4d6:	60c6      	str	r6, [r0, #12]
 800c4d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c4da:	68f3      	ldr	r3, [r6, #12]
 800c4dc:	b183      	cbz	r3, 800c500 <_Balloc+0x50>
 800c4de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4e6:	b9b8      	cbnz	r0, 800c518 <_Balloc+0x68>
 800c4e8:	2101      	movs	r1, #1
 800c4ea:	fa01 f605 	lsl.w	r6, r1, r5
 800c4ee:	1d72      	adds	r2, r6, #5
 800c4f0:	0092      	lsls	r2, r2, #2
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f000 fc9d 	bl	800ce32 <_calloc_r>
 800c4f8:	b160      	cbz	r0, 800c514 <_Balloc+0x64>
 800c4fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4fe:	e00e      	b.n	800c51e <_Balloc+0x6e>
 800c500:	2221      	movs	r2, #33	; 0x21
 800c502:	2104      	movs	r1, #4
 800c504:	4620      	mov	r0, r4
 800c506:	f000 fc94 	bl	800ce32 <_calloc_r>
 800c50a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c50c:	60f0      	str	r0, [r6, #12]
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d1e4      	bne.n	800c4de <_Balloc+0x2e>
 800c514:	2000      	movs	r0, #0
 800c516:	bd70      	pop	{r4, r5, r6, pc}
 800c518:	6802      	ldr	r2, [r0, #0]
 800c51a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c51e:	2300      	movs	r3, #0
 800c520:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c524:	e7f7      	b.n	800c516 <_Balloc+0x66>
 800c526:	bf00      	nop
 800c528:	0800e13c 	.word	0x0800e13c
 800c52c:	0800e153 	.word	0x0800e153

0800c530 <_Bfree>:
 800c530:	b570      	push	{r4, r5, r6, lr}
 800c532:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c534:	4605      	mov	r5, r0
 800c536:	460c      	mov	r4, r1
 800c538:	b976      	cbnz	r6, 800c558 <_Bfree+0x28>
 800c53a:	2010      	movs	r0, #16
 800c53c:	f001 f844 	bl	800d5c8 <malloc>
 800c540:	4602      	mov	r2, r0
 800c542:	6268      	str	r0, [r5, #36]	; 0x24
 800c544:	b920      	cbnz	r0, 800c550 <_Bfree+0x20>
 800c546:	4b09      	ldr	r3, [pc, #36]	; (800c56c <_Bfree+0x3c>)
 800c548:	4809      	ldr	r0, [pc, #36]	; (800c570 <_Bfree+0x40>)
 800c54a:	218a      	movs	r1, #138	; 0x8a
 800c54c:	f000 ffea 	bl	800d524 <__assert_func>
 800c550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c554:	6006      	str	r6, [r0, #0]
 800c556:	60c6      	str	r6, [r0, #12]
 800c558:	b13c      	cbz	r4, 800c56a <_Bfree+0x3a>
 800c55a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c55c:	6862      	ldr	r2, [r4, #4]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c564:	6021      	str	r1, [r4, #0]
 800c566:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c56a:	bd70      	pop	{r4, r5, r6, pc}
 800c56c:	0800e13c 	.word	0x0800e13c
 800c570:	0800e153 	.word	0x0800e153

0800c574 <__multadd>:
 800c574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c578:	690d      	ldr	r5, [r1, #16]
 800c57a:	4607      	mov	r7, r0
 800c57c:	460c      	mov	r4, r1
 800c57e:	461e      	mov	r6, r3
 800c580:	f101 0c14 	add.w	ip, r1, #20
 800c584:	2000      	movs	r0, #0
 800c586:	f8dc 3000 	ldr.w	r3, [ip]
 800c58a:	b299      	uxth	r1, r3
 800c58c:	fb02 6101 	mla	r1, r2, r1, r6
 800c590:	0c1e      	lsrs	r6, r3, #16
 800c592:	0c0b      	lsrs	r3, r1, #16
 800c594:	fb02 3306 	mla	r3, r2, r6, r3
 800c598:	b289      	uxth	r1, r1
 800c59a:	3001      	adds	r0, #1
 800c59c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c5a0:	4285      	cmp	r5, r0
 800c5a2:	f84c 1b04 	str.w	r1, [ip], #4
 800c5a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c5aa:	dcec      	bgt.n	800c586 <__multadd+0x12>
 800c5ac:	b30e      	cbz	r6, 800c5f2 <__multadd+0x7e>
 800c5ae:	68a3      	ldr	r3, [r4, #8]
 800c5b0:	42ab      	cmp	r3, r5
 800c5b2:	dc19      	bgt.n	800c5e8 <__multadd+0x74>
 800c5b4:	6861      	ldr	r1, [r4, #4]
 800c5b6:	4638      	mov	r0, r7
 800c5b8:	3101      	adds	r1, #1
 800c5ba:	f7ff ff79 	bl	800c4b0 <_Balloc>
 800c5be:	4680      	mov	r8, r0
 800c5c0:	b928      	cbnz	r0, 800c5ce <__multadd+0x5a>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	4b0c      	ldr	r3, [pc, #48]	; (800c5f8 <__multadd+0x84>)
 800c5c6:	480d      	ldr	r0, [pc, #52]	; (800c5fc <__multadd+0x88>)
 800c5c8:	21b5      	movs	r1, #181	; 0xb5
 800c5ca:	f000 ffab 	bl	800d524 <__assert_func>
 800c5ce:	6922      	ldr	r2, [r4, #16]
 800c5d0:	3202      	adds	r2, #2
 800c5d2:	f104 010c 	add.w	r1, r4, #12
 800c5d6:	0092      	lsls	r2, r2, #2
 800c5d8:	300c      	adds	r0, #12
 800c5da:	f7fe f986 	bl	800a8ea <memcpy>
 800c5de:	4621      	mov	r1, r4
 800c5e0:	4638      	mov	r0, r7
 800c5e2:	f7ff ffa5 	bl	800c530 <_Bfree>
 800c5e6:	4644      	mov	r4, r8
 800c5e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5ec:	3501      	adds	r5, #1
 800c5ee:	615e      	str	r6, [r3, #20]
 800c5f0:	6125      	str	r5, [r4, #16]
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5f8:	0800e0b0 	.word	0x0800e0b0
 800c5fc:	0800e153 	.word	0x0800e153

0800c600 <__s2b>:
 800c600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c604:	460c      	mov	r4, r1
 800c606:	4615      	mov	r5, r2
 800c608:	461f      	mov	r7, r3
 800c60a:	2209      	movs	r2, #9
 800c60c:	3308      	adds	r3, #8
 800c60e:	4606      	mov	r6, r0
 800c610:	fb93 f3f2 	sdiv	r3, r3, r2
 800c614:	2100      	movs	r1, #0
 800c616:	2201      	movs	r2, #1
 800c618:	429a      	cmp	r2, r3
 800c61a:	db09      	blt.n	800c630 <__s2b+0x30>
 800c61c:	4630      	mov	r0, r6
 800c61e:	f7ff ff47 	bl	800c4b0 <_Balloc>
 800c622:	b940      	cbnz	r0, 800c636 <__s2b+0x36>
 800c624:	4602      	mov	r2, r0
 800c626:	4b19      	ldr	r3, [pc, #100]	; (800c68c <__s2b+0x8c>)
 800c628:	4819      	ldr	r0, [pc, #100]	; (800c690 <__s2b+0x90>)
 800c62a:	21ce      	movs	r1, #206	; 0xce
 800c62c:	f000 ff7a 	bl	800d524 <__assert_func>
 800c630:	0052      	lsls	r2, r2, #1
 800c632:	3101      	adds	r1, #1
 800c634:	e7f0      	b.n	800c618 <__s2b+0x18>
 800c636:	9b08      	ldr	r3, [sp, #32]
 800c638:	6143      	str	r3, [r0, #20]
 800c63a:	2d09      	cmp	r5, #9
 800c63c:	f04f 0301 	mov.w	r3, #1
 800c640:	6103      	str	r3, [r0, #16]
 800c642:	dd16      	ble.n	800c672 <__s2b+0x72>
 800c644:	f104 0909 	add.w	r9, r4, #9
 800c648:	46c8      	mov	r8, r9
 800c64a:	442c      	add	r4, r5
 800c64c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c650:	4601      	mov	r1, r0
 800c652:	3b30      	subs	r3, #48	; 0x30
 800c654:	220a      	movs	r2, #10
 800c656:	4630      	mov	r0, r6
 800c658:	f7ff ff8c 	bl	800c574 <__multadd>
 800c65c:	45a0      	cmp	r8, r4
 800c65e:	d1f5      	bne.n	800c64c <__s2b+0x4c>
 800c660:	f1a5 0408 	sub.w	r4, r5, #8
 800c664:	444c      	add	r4, r9
 800c666:	1b2d      	subs	r5, r5, r4
 800c668:	1963      	adds	r3, r4, r5
 800c66a:	42bb      	cmp	r3, r7
 800c66c:	db04      	blt.n	800c678 <__s2b+0x78>
 800c66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c672:	340a      	adds	r4, #10
 800c674:	2509      	movs	r5, #9
 800c676:	e7f6      	b.n	800c666 <__s2b+0x66>
 800c678:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c67c:	4601      	mov	r1, r0
 800c67e:	3b30      	subs	r3, #48	; 0x30
 800c680:	220a      	movs	r2, #10
 800c682:	4630      	mov	r0, r6
 800c684:	f7ff ff76 	bl	800c574 <__multadd>
 800c688:	e7ee      	b.n	800c668 <__s2b+0x68>
 800c68a:	bf00      	nop
 800c68c:	0800e0b0 	.word	0x0800e0b0
 800c690:	0800e153 	.word	0x0800e153

0800c694 <__hi0bits>:
 800c694:	0c03      	lsrs	r3, r0, #16
 800c696:	041b      	lsls	r3, r3, #16
 800c698:	b9d3      	cbnz	r3, 800c6d0 <__hi0bits+0x3c>
 800c69a:	0400      	lsls	r0, r0, #16
 800c69c:	2310      	movs	r3, #16
 800c69e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c6a2:	bf04      	itt	eq
 800c6a4:	0200      	lsleq	r0, r0, #8
 800c6a6:	3308      	addeq	r3, #8
 800c6a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c6ac:	bf04      	itt	eq
 800c6ae:	0100      	lsleq	r0, r0, #4
 800c6b0:	3304      	addeq	r3, #4
 800c6b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c6b6:	bf04      	itt	eq
 800c6b8:	0080      	lsleq	r0, r0, #2
 800c6ba:	3302      	addeq	r3, #2
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	db05      	blt.n	800c6cc <__hi0bits+0x38>
 800c6c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c6c4:	f103 0301 	add.w	r3, r3, #1
 800c6c8:	bf08      	it	eq
 800c6ca:	2320      	moveq	r3, #32
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	4770      	bx	lr
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	e7e4      	b.n	800c69e <__hi0bits+0xa>

0800c6d4 <__lo0bits>:
 800c6d4:	6803      	ldr	r3, [r0, #0]
 800c6d6:	f013 0207 	ands.w	r2, r3, #7
 800c6da:	4601      	mov	r1, r0
 800c6dc:	d00b      	beq.n	800c6f6 <__lo0bits+0x22>
 800c6de:	07da      	lsls	r2, r3, #31
 800c6e0:	d423      	bmi.n	800c72a <__lo0bits+0x56>
 800c6e2:	0798      	lsls	r0, r3, #30
 800c6e4:	bf49      	itett	mi
 800c6e6:	085b      	lsrmi	r3, r3, #1
 800c6e8:	089b      	lsrpl	r3, r3, #2
 800c6ea:	2001      	movmi	r0, #1
 800c6ec:	600b      	strmi	r3, [r1, #0]
 800c6ee:	bf5c      	itt	pl
 800c6f0:	600b      	strpl	r3, [r1, #0]
 800c6f2:	2002      	movpl	r0, #2
 800c6f4:	4770      	bx	lr
 800c6f6:	b298      	uxth	r0, r3
 800c6f8:	b9a8      	cbnz	r0, 800c726 <__lo0bits+0x52>
 800c6fa:	0c1b      	lsrs	r3, r3, #16
 800c6fc:	2010      	movs	r0, #16
 800c6fe:	b2da      	uxtb	r2, r3
 800c700:	b90a      	cbnz	r2, 800c706 <__lo0bits+0x32>
 800c702:	3008      	adds	r0, #8
 800c704:	0a1b      	lsrs	r3, r3, #8
 800c706:	071a      	lsls	r2, r3, #28
 800c708:	bf04      	itt	eq
 800c70a:	091b      	lsreq	r3, r3, #4
 800c70c:	3004      	addeq	r0, #4
 800c70e:	079a      	lsls	r2, r3, #30
 800c710:	bf04      	itt	eq
 800c712:	089b      	lsreq	r3, r3, #2
 800c714:	3002      	addeq	r0, #2
 800c716:	07da      	lsls	r2, r3, #31
 800c718:	d403      	bmi.n	800c722 <__lo0bits+0x4e>
 800c71a:	085b      	lsrs	r3, r3, #1
 800c71c:	f100 0001 	add.w	r0, r0, #1
 800c720:	d005      	beq.n	800c72e <__lo0bits+0x5a>
 800c722:	600b      	str	r3, [r1, #0]
 800c724:	4770      	bx	lr
 800c726:	4610      	mov	r0, r2
 800c728:	e7e9      	b.n	800c6fe <__lo0bits+0x2a>
 800c72a:	2000      	movs	r0, #0
 800c72c:	4770      	bx	lr
 800c72e:	2020      	movs	r0, #32
 800c730:	4770      	bx	lr
	...

0800c734 <__i2b>:
 800c734:	b510      	push	{r4, lr}
 800c736:	460c      	mov	r4, r1
 800c738:	2101      	movs	r1, #1
 800c73a:	f7ff feb9 	bl	800c4b0 <_Balloc>
 800c73e:	4602      	mov	r2, r0
 800c740:	b928      	cbnz	r0, 800c74e <__i2b+0x1a>
 800c742:	4b05      	ldr	r3, [pc, #20]	; (800c758 <__i2b+0x24>)
 800c744:	4805      	ldr	r0, [pc, #20]	; (800c75c <__i2b+0x28>)
 800c746:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c74a:	f000 feeb 	bl	800d524 <__assert_func>
 800c74e:	2301      	movs	r3, #1
 800c750:	6144      	str	r4, [r0, #20]
 800c752:	6103      	str	r3, [r0, #16]
 800c754:	bd10      	pop	{r4, pc}
 800c756:	bf00      	nop
 800c758:	0800e0b0 	.word	0x0800e0b0
 800c75c:	0800e153 	.word	0x0800e153

0800c760 <__multiply>:
 800c760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c764:	4691      	mov	r9, r2
 800c766:	690a      	ldr	r2, [r1, #16]
 800c768:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	bfb8      	it	lt
 800c770:	460b      	movlt	r3, r1
 800c772:	460c      	mov	r4, r1
 800c774:	bfbc      	itt	lt
 800c776:	464c      	movlt	r4, r9
 800c778:	4699      	movlt	r9, r3
 800c77a:	6927      	ldr	r7, [r4, #16]
 800c77c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c780:	68a3      	ldr	r3, [r4, #8]
 800c782:	6861      	ldr	r1, [r4, #4]
 800c784:	eb07 060a 	add.w	r6, r7, sl
 800c788:	42b3      	cmp	r3, r6
 800c78a:	b085      	sub	sp, #20
 800c78c:	bfb8      	it	lt
 800c78e:	3101      	addlt	r1, #1
 800c790:	f7ff fe8e 	bl	800c4b0 <_Balloc>
 800c794:	b930      	cbnz	r0, 800c7a4 <__multiply+0x44>
 800c796:	4602      	mov	r2, r0
 800c798:	4b44      	ldr	r3, [pc, #272]	; (800c8ac <__multiply+0x14c>)
 800c79a:	4845      	ldr	r0, [pc, #276]	; (800c8b0 <__multiply+0x150>)
 800c79c:	f240 115d 	movw	r1, #349	; 0x15d
 800c7a0:	f000 fec0 	bl	800d524 <__assert_func>
 800c7a4:	f100 0514 	add.w	r5, r0, #20
 800c7a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c7ac:	462b      	mov	r3, r5
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	4543      	cmp	r3, r8
 800c7b2:	d321      	bcc.n	800c7f8 <__multiply+0x98>
 800c7b4:	f104 0314 	add.w	r3, r4, #20
 800c7b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c7bc:	f109 0314 	add.w	r3, r9, #20
 800c7c0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c7c4:	9202      	str	r2, [sp, #8]
 800c7c6:	1b3a      	subs	r2, r7, r4
 800c7c8:	3a15      	subs	r2, #21
 800c7ca:	f022 0203 	bic.w	r2, r2, #3
 800c7ce:	3204      	adds	r2, #4
 800c7d0:	f104 0115 	add.w	r1, r4, #21
 800c7d4:	428f      	cmp	r7, r1
 800c7d6:	bf38      	it	cc
 800c7d8:	2204      	movcc	r2, #4
 800c7da:	9201      	str	r2, [sp, #4]
 800c7dc:	9a02      	ldr	r2, [sp, #8]
 800c7de:	9303      	str	r3, [sp, #12]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d80c      	bhi.n	800c7fe <__multiply+0x9e>
 800c7e4:	2e00      	cmp	r6, #0
 800c7e6:	dd03      	ble.n	800c7f0 <__multiply+0x90>
 800c7e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d05a      	beq.n	800c8a6 <__multiply+0x146>
 800c7f0:	6106      	str	r6, [r0, #16]
 800c7f2:	b005      	add	sp, #20
 800c7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f8:	f843 2b04 	str.w	r2, [r3], #4
 800c7fc:	e7d8      	b.n	800c7b0 <__multiply+0x50>
 800c7fe:	f8b3 a000 	ldrh.w	sl, [r3]
 800c802:	f1ba 0f00 	cmp.w	sl, #0
 800c806:	d024      	beq.n	800c852 <__multiply+0xf2>
 800c808:	f104 0e14 	add.w	lr, r4, #20
 800c80c:	46a9      	mov	r9, r5
 800c80e:	f04f 0c00 	mov.w	ip, #0
 800c812:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c816:	f8d9 1000 	ldr.w	r1, [r9]
 800c81a:	fa1f fb82 	uxth.w	fp, r2
 800c81e:	b289      	uxth	r1, r1
 800c820:	fb0a 110b 	mla	r1, sl, fp, r1
 800c824:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c828:	f8d9 2000 	ldr.w	r2, [r9]
 800c82c:	4461      	add	r1, ip
 800c82e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c832:	fb0a c20b 	mla	r2, sl, fp, ip
 800c836:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c83a:	b289      	uxth	r1, r1
 800c83c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c840:	4577      	cmp	r7, lr
 800c842:	f849 1b04 	str.w	r1, [r9], #4
 800c846:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c84a:	d8e2      	bhi.n	800c812 <__multiply+0xb2>
 800c84c:	9a01      	ldr	r2, [sp, #4]
 800c84e:	f845 c002 	str.w	ip, [r5, r2]
 800c852:	9a03      	ldr	r2, [sp, #12]
 800c854:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c858:	3304      	adds	r3, #4
 800c85a:	f1b9 0f00 	cmp.w	r9, #0
 800c85e:	d020      	beq.n	800c8a2 <__multiply+0x142>
 800c860:	6829      	ldr	r1, [r5, #0]
 800c862:	f104 0c14 	add.w	ip, r4, #20
 800c866:	46ae      	mov	lr, r5
 800c868:	f04f 0a00 	mov.w	sl, #0
 800c86c:	f8bc b000 	ldrh.w	fp, [ip]
 800c870:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c874:	fb09 220b 	mla	r2, r9, fp, r2
 800c878:	4492      	add	sl, r2
 800c87a:	b289      	uxth	r1, r1
 800c87c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c880:	f84e 1b04 	str.w	r1, [lr], #4
 800c884:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c888:	f8be 1000 	ldrh.w	r1, [lr]
 800c88c:	0c12      	lsrs	r2, r2, #16
 800c88e:	fb09 1102 	mla	r1, r9, r2, r1
 800c892:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c896:	4567      	cmp	r7, ip
 800c898:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c89c:	d8e6      	bhi.n	800c86c <__multiply+0x10c>
 800c89e:	9a01      	ldr	r2, [sp, #4]
 800c8a0:	50a9      	str	r1, [r5, r2]
 800c8a2:	3504      	adds	r5, #4
 800c8a4:	e79a      	b.n	800c7dc <__multiply+0x7c>
 800c8a6:	3e01      	subs	r6, #1
 800c8a8:	e79c      	b.n	800c7e4 <__multiply+0x84>
 800c8aa:	bf00      	nop
 800c8ac:	0800e0b0 	.word	0x0800e0b0
 800c8b0:	0800e153 	.word	0x0800e153

0800c8b4 <__pow5mult>:
 800c8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8b8:	4615      	mov	r5, r2
 800c8ba:	f012 0203 	ands.w	r2, r2, #3
 800c8be:	4606      	mov	r6, r0
 800c8c0:	460f      	mov	r7, r1
 800c8c2:	d007      	beq.n	800c8d4 <__pow5mult+0x20>
 800c8c4:	4c25      	ldr	r4, [pc, #148]	; (800c95c <__pow5mult+0xa8>)
 800c8c6:	3a01      	subs	r2, #1
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c8ce:	f7ff fe51 	bl	800c574 <__multadd>
 800c8d2:	4607      	mov	r7, r0
 800c8d4:	10ad      	asrs	r5, r5, #2
 800c8d6:	d03d      	beq.n	800c954 <__pow5mult+0xa0>
 800c8d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c8da:	b97c      	cbnz	r4, 800c8fc <__pow5mult+0x48>
 800c8dc:	2010      	movs	r0, #16
 800c8de:	f000 fe73 	bl	800d5c8 <malloc>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	6270      	str	r0, [r6, #36]	; 0x24
 800c8e6:	b928      	cbnz	r0, 800c8f4 <__pow5mult+0x40>
 800c8e8:	4b1d      	ldr	r3, [pc, #116]	; (800c960 <__pow5mult+0xac>)
 800c8ea:	481e      	ldr	r0, [pc, #120]	; (800c964 <__pow5mult+0xb0>)
 800c8ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c8f0:	f000 fe18 	bl	800d524 <__assert_func>
 800c8f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8f8:	6004      	str	r4, [r0, #0]
 800c8fa:	60c4      	str	r4, [r0, #12]
 800c8fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c900:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c904:	b94c      	cbnz	r4, 800c91a <__pow5mult+0x66>
 800c906:	f240 2171 	movw	r1, #625	; 0x271
 800c90a:	4630      	mov	r0, r6
 800c90c:	f7ff ff12 	bl	800c734 <__i2b>
 800c910:	2300      	movs	r3, #0
 800c912:	f8c8 0008 	str.w	r0, [r8, #8]
 800c916:	4604      	mov	r4, r0
 800c918:	6003      	str	r3, [r0, #0]
 800c91a:	f04f 0900 	mov.w	r9, #0
 800c91e:	07eb      	lsls	r3, r5, #31
 800c920:	d50a      	bpl.n	800c938 <__pow5mult+0x84>
 800c922:	4639      	mov	r1, r7
 800c924:	4622      	mov	r2, r4
 800c926:	4630      	mov	r0, r6
 800c928:	f7ff ff1a 	bl	800c760 <__multiply>
 800c92c:	4639      	mov	r1, r7
 800c92e:	4680      	mov	r8, r0
 800c930:	4630      	mov	r0, r6
 800c932:	f7ff fdfd 	bl	800c530 <_Bfree>
 800c936:	4647      	mov	r7, r8
 800c938:	106d      	asrs	r5, r5, #1
 800c93a:	d00b      	beq.n	800c954 <__pow5mult+0xa0>
 800c93c:	6820      	ldr	r0, [r4, #0]
 800c93e:	b938      	cbnz	r0, 800c950 <__pow5mult+0x9c>
 800c940:	4622      	mov	r2, r4
 800c942:	4621      	mov	r1, r4
 800c944:	4630      	mov	r0, r6
 800c946:	f7ff ff0b 	bl	800c760 <__multiply>
 800c94a:	6020      	str	r0, [r4, #0]
 800c94c:	f8c0 9000 	str.w	r9, [r0]
 800c950:	4604      	mov	r4, r0
 800c952:	e7e4      	b.n	800c91e <__pow5mult+0x6a>
 800c954:	4638      	mov	r0, r7
 800c956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c95a:	bf00      	nop
 800c95c:	0800e2a0 	.word	0x0800e2a0
 800c960:	0800e13c 	.word	0x0800e13c
 800c964:	0800e153 	.word	0x0800e153

0800c968 <__lshift>:
 800c968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c96c:	460c      	mov	r4, r1
 800c96e:	6849      	ldr	r1, [r1, #4]
 800c970:	6923      	ldr	r3, [r4, #16]
 800c972:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c976:	68a3      	ldr	r3, [r4, #8]
 800c978:	4607      	mov	r7, r0
 800c97a:	4691      	mov	r9, r2
 800c97c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c980:	f108 0601 	add.w	r6, r8, #1
 800c984:	42b3      	cmp	r3, r6
 800c986:	db0b      	blt.n	800c9a0 <__lshift+0x38>
 800c988:	4638      	mov	r0, r7
 800c98a:	f7ff fd91 	bl	800c4b0 <_Balloc>
 800c98e:	4605      	mov	r5, r0
 800c990:	b948      	cbnz	r0, 800c9a6 <__lshift+0x3e>
 800c992:	4602      	mov	r2, r0
 800c994:	4b2a      	ldr	r3, [pc, #168]	; (800ca40 <__lshift+0xd8>)
 800c996:	482b      	ldr	r0, [pc, #172]	; (800ca44 <__lshift+0xdc>)
 800c998:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c99c:	f000 fdc2 	bl	800d524 <__assert_func>
 800c9a0:	3101      	adds	r1, #1
 800c9a2:	005b      	lsls	r3, r3, #1
 800c9a4:	e7ee      	b.n	800c984 <__lshift+0x1c>
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	f100 0114 	add.w	r1, r0, #20
 800c9ac:	f100 0210 	add.w	r2, r0, #16
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	4553      	cmp	r3, sl
 800c9b4:	db37      	blt.n	800ca26 <__lshift+0xbe>
 800c9b6:	6920      	ldr	r0, [r4, #16]
 800c9b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c9bc:	f104 0314 	add.w	r3, r4, #20
 800c9c0:	f019 091f 	ands.w	r9, r9, #31
 800c9c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c9c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c9cc:	d02f      	beq.n	800ca2e <__lshift+0xc6>
 800c9ce:	f1c9 0e20 	rsb	lr, r9, #32
 800c9d2:	468a      	mov	sl, r1
 800c9d4:	f04f 0c00 	mov.w	ip, #0
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	fa02 f209 	lsl.w	r2, r2, r9
 800c9de:	ea42 020c 	orr.w	r2, r2, ip
 800c9e2:	f84a 2b04 	str.w	r2, [sl], #4
 800c9e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9ea:	4298      	cmp	r0, r3
 800c9ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c9f0:	d8f2      	bhi.n	800c9d8 <__lshift+0x70>
 800c9f2:	1b03      	subs	r3, r0, r4
 800c9f4:	3b15      	subs	r3, #21
 800c9f6:	f023 0303 	bic.w	r3, r3, #3
 800c9fa:	3304      	adds	r3, #4
 800c9fc:	f104 0215 	add.w	r2, r4, #21
 800ca00:	4290      	cmp	r0, r2
 800ca02:	bf38      	it	cc
 800ca04:	2304      	movcc	r3, #4
 800ca06:	f841 c003 	str.w	ip, [r1, r3]
 800ca0a:	f1bc 0f00 	cmp.w	ip, #0
 800ca0e:	d001      	beq.n	800ca14 <__lshift+0xac>
 800ca10:	f108 0602 	add.w	r6, r8, #2
 800ca14:	3e01      	subs	r6, #1
 800ca16:	4638      	mov	r0, r7
 800ca18:	612e      	str	r6, [r5, #16]
 800ca1a:	4621      	mov	r1, r4
 800ca1c:	f7ff fd88 	bl	800c530 <_Bfree>
 800ca20:	4628      	mov	r0, r5
 800ca22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca26:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	e7c1      	b.n	800c9b2 <__lshift+0x4a>
 800ca2e:	3904      	subs	r1, #4
 800ca30:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca34:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca38:	4298      	cmp	r0, r3
 800ca3a:	d8f9      	bhi.n	800ca30 <__lshift+0xc8>
 800ca3c:	e7ea      	b.n	800ca14 <__lshift+0xac>
 800ca3e:	bf00      	nop
 800ca40:	0800e0b0 	.word	0x0800e0b0
 800ca44:	0800e153 	.word	0x0800e153

0800ca48 <__mcmp>:
 800ca48:	b530      	push	{r4, r5, lr}
 800ca4a:	6902      	ldr	r2, [r0, #16]
 800ca4c:	690c      	ldr	r4, [r1, #16]
 800ca4e:	1b12      	subs	r2, r2, r4
 800ca50:	d10e      	bne.n	800ca70 <__mcmp+0x28>
 800ca52:	f100 0314 	add.w	r3, r0, #20
 800ca56:	3114      	adds	r1, #20
 800ca58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ca5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ca60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ca64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ca68:	42a5      	cmp	r5, r4
 800ca6a:	d003      	beq.n	800ca74 <__mcmp+0x2c>
 800ca6c:	d305      	bcc.n	800ca7a <__mcmp+0x32>
 800ca6e:	2201      	movs	r2, #1
 800ca70:	4610      	mov	r0, r2
 800ca72:	bd30      	pop	{r4, r5, pc}
 800ca74:	4283      	cmp	r3, r0
 800ca76:	d3f3      	bcc.n	800ca60 <__mcmp+0x18>
 800ca78:	e7fa      	b.n	800ca70 <__mcmp+0x28>
 800ca7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca7e:	e7f7      	b.n	800ca70 <__mcmp+0x28>

0800ca80 <__mdiff>:
 800ca80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca84:	460c      	mov	r4, r1
 800ca86:	4606      	mov	r6, r0
 800ca88:	4611      	mov	r1, r2
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	4690      	mov	r8, r2
 800ca8e:	f7ff ffdb 	bl	800ca48 <__mcmp>
 800ca92:	1e05      	subs	r5, r0, #0
 800ca94:	d110      	bne.n	800cab8 <__mdiff+0x38>
 800ca96:	4629      	mov	r1, r5
 800ca98:	4630      	mov	r0, r6
 800ca9a:	f7ff fd09 	bl	800c4b0 <_Balloc>
 800ca9e:	b930      	cbnz	r0, 800caae <__mdiff+0x2e>
 800caa0:	4b3a      	ldr	r3, [pc, #232]	; (800cb8c <__mdiff+0x10c>)
 800caa2:	4602      	mov	r2, r0
 800caa4:	f240 2132 	movw	r1, #562	; 0x232
 800caa8:	4839      	ldr	r0, [pc, #228]	; (800cb90 <__mdiff+0x110>)
 800caaa:	f000 fd3b 	bl	800d524 <__assert_func>
 800caae:	2301      	movs	r3, #1
 800cab0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab8:	bfa4      	itt	ge
 800caba:	4643      	movge	r3, r8
 800cabc:	46a0      	movge	r8, r4
 800cabe:	4630      	mov	r0, r6
 800cac0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cac4:	bfa6      	itte	ge
 800cac6:	461c      	movge	r4, r3
 800cac8:	2500      	movge	r5, #0
 800caca:	2501      	movlt	r5, #1
 800cacc:	f7ff fcf0 	bl	800c4b0 <_Balloc>
 800cad0:	b920      	cbnz	r0, 800cadc <__mdiff+0x5c>
 800cad2:	4b2e      	ldr	r3, [pc, #184]	; (800cb8c <__mdiff+0x10c>)
 800cad4:	4602      	mov	r2, r0
 800cad6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cada:	e7e5      	b.n	800caa8 <__mdiff+0x28>
 800cadc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cae0:	6926      	ldr	r6, [r4, #16]
 800cae2:	60c5      	str	r5, [r0, #12]
 800cae4:	f104 0914 	add.w	r9, r4, #20
 800cae8:	f108 0514 	add.w	r5, r8, #20
 800caec:	f100 0e14 	add.w	lr, r0, #20
 800caf0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800caf4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800caf8:	f108 0210 	add.w	r2, r8, #16
 800cafc:	46f2      	mov	sl, lr
 800cafe:	2100      	movs	r1, #0
 800cb00:	f859 3b04 	ldr.w	r3, [r9], #4
 800cb04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cb08:	fa1f f883 	uxth.w	r8, r3
 800cb0c:	fa11 f18b 	uxtah	r1, r1, fp
 800cb10:	0c1b      	lsrs	r3, r3, #16
 800cb12:	eba1 0808 	sub.w	r8, r1, r8
 800cb16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cb1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cb1e:	fa1f f888 	uxth.w	r8, r8
 800cb22:	1419      	asrs	r1, r3, #16
 800cb24:	454e      	cmp	r6, r9
 800cb26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cb2a:	f84a 3b04 	str.w	r3, [sl], #4
 800cb2e:	d8e7      	bhi.n	800cb00 <__mdiff+0x80>
 800cb30:	1b33      	subs	r3, r6, r4
 800cb32:	3b15      	subs	r3, #21
 800cb34:	f023 0303 	bic.w	r3, r3, #3
 800cb38:	3304      	adds	r3, #4
 800cb3a:	3415      	adds	r4, #21
 800cb3c:	42a6      	cmp	r6, r4
 800cb3e:	bf38      	it	cc
 800cb40:	2304      	movcc	r3, #4
 800cb42:	441d      	add	r5, r3
 800cb44:	4473      	add	r3, lr
 800cb46:	469e      	mov	lr, r3
 800cb48:	462e      	mov	r6, r5
 800cb4a:	4566      	cmp	r6, ip
 800cb4c:	d30e      	bcc.n	800cb6c <__mdiff+0xec>
 800cb4e:	f10c 0203 	add.w	r2, ip, #3
 800cb52:	1b52      	subs	r2, r2, r5
 800cb54:	f022 0203 	bic.w	r2, r2, #3
 800cb58:	3d03      	subs	r5, #3
 800cb5a:	45ac      	cmp	ip, r5
 800cb5c:	bf38      	it	cc
 800cb5e:	2200      	movcc	r2, #0
 800cb60:	441a      	add	r2, r3
 800cb62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cb66:	b17b      	cbz	r3, 800cb88 <__mdiff+0x108>
 800cb68:	6107      	str	r7, [r0, #16]
 800cb6a:	e7a3      	b.n	800cab4 <__mdiff+0x34>
 800cb6c:	f856 8b04 	ldr.w	r8, [r6], #4
 800cb70:	fa11 f288 	uxtah	r2, r1, r8
 800cb74:	1414      	asrs	r4, r2, #16
 800cb76:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cb7a:	b292      	uxth	r2, r2
 800cb7c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cb80:	f84e 2b04 	str.w	r2, [lr], #4
 800cb84:	1421      	asrs	r1, r4, #16
 800cb86:	e7e0      	b.n	800cb4a <__mdiff+0xca>
 800cb88:	3f01      	subs	r7, #1
 800cb8a:	e7ea      	b.n	800cb62 <__mdiff+0xe2>
 800cb8c:	0800e0b0 	.word	0x0800e0b0
 800cb90:	0800e153 	.word	0x0800e153

0800cb94 <__ulp>:
 800cb94:	b082      	sub	sp, #8
 800cb96:	ed8d 0b00 	vstr	d0, [sp]
 800cb9a:	9b01      	ldr	r3, [sp, #4]
 800cb9c:	4912      	ldr	r1, [pc, #72]	; (800cbe8 <__ulp+0x54>)
 800cb9e:	4019      	ands	r1, r3
 800cba0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cba4:	2900      	cmp	r1, #0
 800cba6:	dd05      	ble.n	800cbb4 <__ulp+0x20>
 800cba8:	2200      	movs	r2, #0
 800cbaa:	460b      	mov	r3, r1
 800cbac:	ec43 2b10 	vmov	d0, r2, r3
 800cbb0:	b002      	add	sp, #8
 800cbb2:	4770      	bx	lr
 800cbb4:	4249      	negs	r1, r1
 800cbb6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cbba:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cbbe:	f04f 0200 	mov.w	r2, #0
 800cbc2:	f04f 0300 	mov.w	r3, #0
 800cbc6:	da04      	bge.n	800cbd2 <__ulp+0x3e>
 800cbc8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cbcc:	fa41 f300 	asr.w	r3, r1, r0
 800cbd0:	e7ec      	b.n	800cbac <__ulp+0x18>
 800cbd2:	f1a0 0114 	sub.w	r1, r0, #20
 800cbd6:	291e      	cmp	r1, #30
 800cbd8:	bfda      	itte	le
 800cbda:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cbde:	fa20 f101 	lsrle.w	r1, r0, r1
 800cbe2:	2101      	movgt	r1, #1
 800cbe4:	460a      	mov	r2, r1
 800cbe6:	e7e1      	b.n	800cbac <__ulp+0x18>
 800cbe8:	7ff00000 	.word	0x7ff00000

0800cbec <__b2d>:
 800cbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbee:	6905      	ldr	r5, [r0, #16]
 800cbf0:	f100 0714 	add.w	r7, r0, #20
 800cbf4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cbf8:	1f2e      	subs	r6, r5, #4
 800cbfa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cbfe:	4620      	mov	r0, r4
 800cc00:	f7ff fd48 	bl	800c694 <__hi0bits>
 800cc04:	f1c0 0320 	rsb	r3, r0, #32
 800cc08:	280a      	cmp	r0, #10
 800cc0a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cc88 <__b2d+0x9c>
 800cc0e:	600b      	str	r3, [r1, #0]
 800cc10:	dc14      	bgt.n	800cc3c <__b2d+0x50>
 800cc12:	f1c0 0e0b 	rsb	lr, r0, #11
 800cc16:	fa24 f10e 	lsr.w	r1, r4, lr
 800cc1a:	42b7      	cmp	r7, r6
 800cc1c:	ea41 030c 	orr.w	r3, r1, ip
 800cc20:	bf34      	ite	cc
 800cc22:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cc26:	2100      	movcs	r1, #0
 800cc28:	3015      	adds	r0, #21
 800cc2a:	fa04 f000 	lsl.w	r0, r4, r0
 800cc2e:	fa21 f10e 	lsr.w	r1, r1, lr
 800cc32:	ea40 0201 	orr.w	r2, r0, r1
 800cc36:	ec43 2b10 	vmov	d0, r2, r3
 800cc3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc3c:	42b7      	cmp	r7, r6
 800cc3e:	bf3a      	itte	cc
 800cc40:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cc44:	f1a5 0608 	subcc.w	r6, r5, #8
 800cc48:	2100      	movcs	r1, #0
 800cc4a:	380b      	subs	r0, #11
 800cc4c:	d017      	beq.n	800cc7e <__b2d+0x92>
 800cc4e:	f1c0 0c20 	rsb	ip, r0, #32
 800cc52:	fa04 f500 	lsl.w	r5, r4, r0
 800cc56:	42be      	cmp	r6, r7
 800cc58:	fa21 f40c 	lsr.w	r4, r1, ip
 800cc5c:	ea45 0504 	orr.w	r5, r5, r4
 800cc60:	bf8c      	ite	hi
 800cc62:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cc66:	2400      	movls	r4, #0
 800cc68:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cc6c:	fa01 f000 	lsl.w	r0, r1, r0
 800cc70:	fa24 f40c 	lsr.w	r4, r4, ip
 800cc74:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cc78:	ea40 0204 	orr.w	r2, r0, r4
 800cc7c:	e7db      	b.n	800cc36 <__b2d+0x4a>
 800cc7e:	ea44 030c 	orr.w	r3, r4, ip
 800cc82:	460a      	mov	r2, r1
 800cc84:	e7d7      	b.n	800cc36 <__b2d+0x4a>
 800cc86:	bf00      	nop
 800cc88:	3ff00000 	.word	0x3ff00000

0800cc8c <__d2b>:
 800cc8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc90:	4689      	mov	r9, r1
 800cc92:	2101      	movs	r1, #1
 800cc94:	ec57 6b10 	vmov	r6, r7, d0
 800cc98:	4690      	mov	r8, r2
 800cc9a:	f7ff fc09 	bl	800c4b0 <_Balloc>
 800cc9e:	4604      	mov	r4, r0
 800cca0:	b930      	cbnz	r0, 800ccb0 <__d2b+0x24>
 800cca2:	4602      	mov	r2, r0
 800cca4:	4b25      	ldr	r3, [pc, #148]	; (800cd3c <__d2b+0xb0>)
 800cca6:	4826      	ldr	r0, [pc, #152]	; (800cd40 <__d2b+0xb4>)
 800cca8:	f240 310a 	movw	r1, #778	; 0x30a
 800ccac:	f000 fc3a 	bl	800d524 <__assert_func>
 800ccb0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ccb4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ccb8:	bb35      	cbnz	r5, 800cd08 <__d2b+0x7c>
 800ccba:	2e00      	cmp	r6, #0
 800ccbc:	9301      	str	r3, [sp, #4]
 800ccbe:	d028      	beq.n	800cd12 <__d2b+0x86>
 800ccc0:	4668      	mov	r0, sp
 800ccc2:	9600      	str	r6, [sp, #0]
 800ccc4:	f7ff fd06 	bl	800c6d4 <__lo0bits>
 800ccc8:	9900      	ldr	r1, [sp, #0]
 800ccca:	b300      	cbz	r0, 800cd0e <__d2b+0x82>
 800cccc:	9a01      	ldr	r2, [sp, #4]
 800ccce:	f1c0 0320 	rsb	r3, r0, #32
 800ccd2:	fa02 f303 	lsl.w	r3, r2, r3
 800ccd6:	430b      	orrs	r3, r1
 800ccd8:	40c2      	lsrs	r2, r0
 800ccda:	6163      	str	r3, [r4, #20]
 800ccdc:	9201      	str	r2, [sp, #4]
 800ccde:	9b01      	ldr	r3, [sp, #4]
 800cce0:	61a3      	str	r3, [r4, #24]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	bf14      	ite	ne
 800cce6:	2202      	movne	r2, #2
 800cce8:	2201      	moveq	r2, #1
 800ccea:	6122      	str	r2, [r4, #16]
 800ccec:	b1d5      	cbz	r5, 800cd24 <__d2b+0x98>
 800ccee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ccf2:	4405      	add	r5, r0
 800ccf4:	f8c9 5000 	str.w	r5, [r9]
 800ccf8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ccfc:	f8c8 0000 	str.w	r0, [r8]
 800cd00:	4620      	mov	r0, r4
 800cd02:	b003      	add	sp, #12
 800cd04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd0c:	e7d5      	b.n	800ccba <__d2b+0x2e>
 800cd0e:	6161      	str	r1, [r4, #20]
 800cd10:	e7e5      	b.n	800ccde <__d2b+0x52>
 800cd12:	a801      	add	r0, sp, #4
 800cd14:	f7ff fcde 	bl	800c6d4 <__lo0bits>
 800cd18:	9b01      	ldr	r3, [sp, #4]
 800cd1a:	6163      	str	r3, [r4, #20]
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	6122      	str	r2, [r4, #16]
 800cd20:	3020      	adds	r0, #32
 800cd22:	e7e3      	b.n	800ccec <__d2b+0x60>
 800cd24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cd2c:	f8c9 0000 	str.w	r0, [r9]
 800cd30:	6918      	ldr	r0, [r3, #16]
 800cd32:	f7ff fcaf 	bl	800c694 <__hi0bits>
 800cd36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd3a:	e7df      	b.n	800ccfc <__d2b+0x70>
 800cd3c:	0800e0b0 	.word	0x0800e0b0
 800cd40:	0800e153 	.word	0x0800e153

0800cd44 <__ratio>:
 800cd44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd48:	4688      	mov	r8, r1
 800cd4a:	4669      	mov	r1, sp
 800cd4c:	4681      	mov	r9, r0
 800cd4e:	f7ff ff4d 	bl	800cbec <__b2d>
 800cd52:	a901      	add	r1, sp, #4
 800cd54:	4640      	mov	r0, r8
 800cd56:	ec55 4b10 	vmov	r4, r5, d0
 800cd5a:	f7ff ff47 	bl	800cbec <__b2d>
 800cd5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd62:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cd66:	eba3 0c02 	sub.w	ip, r3, r2
 800cd6a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cd6e:	1a9b      	subs	r3, r3, r2
 800cd70:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cd74:	ec51 0b10 	vmov	r0, r1, d0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	bfd6      	itet	le
 800cd7c:	460a      	movle	r2, r1
 800cd7e:	462a      	movgt	r2, r5
 800cd80:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cd84:	468b      	mov	fp, r1
 800cd86:	462f      	mov	r7, r5
 800cd88:	bfd4      	ite	le
 800cd8a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cd8e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cd92:	4620      	mov	r0, r4
 800cd94:	ee10 2a10 	vmov	r2, s0
 800cd98:	465b      	mov	r3, fp
 800cd9a:	4639      	mov	r1, r7
 800cd9c:	f7f3 fd5e 	bl	800085c <__aeabi_ddiv>
 800cda0:	ec41 0b10 	vmov	d0, r0, r1
 800cda4:	b003      	add	sp, #12
 800cda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cdaa <__copybits>:
 800cdaa:	3901      	subs	r1, #1
 800cdac:	b570      	push	{r4, r5, r6, lr}
 800cdae:	1149      	asrs	r1, r1, #5
 800cdb0:	6914      	ldr	r4, [r2, #16]
 800cdb2:	3101      	adds	r1, #1
 800cdb4:	f102 0314 	add.w	r3, r2, #20
 800cdb8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cdbc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cdc0:	1f05      	subs	r5, r0, #4
 800cdc2:	42a3      	cmp	r3, r4
 800cdc4:	d30c      	bcc.n	800cde0 <__copybits+0x36>
 800cdc6:	1aa3      	subs	r3, r4, r2
 800cdc8:	3b11      	subs	r3, #17
 800cdca:	f023 0303 	bic.w	r3, r3, #3
 800cdce:	3211      	adds	r2, #17
 800cdd0:	42a2      	cmp	r2, r4
 800cdd2:	bf88      	it	hi
 800cdd4:	2300      	movhi	r3, #0
 800cdd6:	4418      	add	r0, r3
 800cdd8:	2300      	movs	r3, #0
 800cdda:	4288      	cmp	r0, r1
 800cddc:	d305      	bcc.n	800cdea <__copybits+0x40>
 800cdde:	bd70      	pop	{r4, r5, r6, pc}
 800cde0:	f853 6b04 	ldr.w	r6, [r3], #4
 800cde4:	f845 6f04 	str.w	r6, [r5, #4]!
 800cde8:	e7eb      	b.n	800cdc2 <__copybits+0x18>
 800cdea:	f840 3b04 	str.w	r3, [r0], #4
 800cdee:	e7f4      	b.n	800cdda <__copybits+0x30>

0800cdf0 <__any_on>:
 800cdf0:	f100 0214 	add.w	r2, r0, #20
 800cdf4:	6900      	ldr	r0, [r0, #16]
 800cdf6:	114b      	asrs	r3, r1, #5
 800cdf8:	4298      	cmp	r0, r3
 800cdfa:	b510      	push	{r4, lr}
 800cdfc:	db11      	blt.n	800ce22 <__any_on+0x32>
 800cdfe:	dd0a      	ble.n	800ce16 <__any_on+0x26>
 800ce00:	f011 011f 	ands.w	r1, r1, #31
 800ce04:	d007      	beq.n	800ce16 <__any_on+0x26>
 800ce06:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ce0a:	fa24 f001 	lsr.w	r0, r4, r1
 800ce0e:	fa00 f101 	lsl.w	r1, r0, r1
 800ce12:	428c      	cmp	r4, r1
 800ce14:	d10b      	bne.n	800ce2e <__any_on+0x3e>
 800ce16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d803      	bhi.n	800ce26 <__any_on+0x36>
 800ce1e:	2000      	movs	r0, #0
 800ce20:	bd10      	pop	{r4, pc}
 800ce22:	4603      	mov	r3, r0
 800ce24:	e7f7      	b.n	800ce16 <__any_on+0x26>
 800ce26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce2a:	2900      	cmp	r1, #0
 800ce2c:	d0f5      	beq.n	800ce1a <__any_on+0x2a>
 800ce2e:	2001      	movs	r0, #1
 800ce30:	e7f6      	b.n	800ce20 <__any_on+0x30>

0800ce32 <_calloc_r>:
 800ce32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce34:	fba1 2402 	umull	r2, r4, r1, r2
 800ce38:	b94c      	cbnz	r4, 800ce4e <_calloc_r+0x1c>
 800ce3a:	4611      	mov	r1, r2
 800ce3c:	9201      	str	r2, [sp, #4]
 800ce3e:	f7fd fd8b 	bl	800a958 <_malloc_r>
 800ce42:	9a01      	ldr	r2, [sp, #4]
 800ce44:	4605      	mov	r5, r0
 800ce46:	b930      	cbnz	r0, 800ce56 <_calloc_r+0x24>
 800ce48:	4628      	mov	r0, r5
 800ce4a:	b003      	add	sp, #12
 800ce4c:	bd30      	pop	{r4, r5, pc}
 800ce4e:	220c      	movs	r2, #12
 800ce50:	6002      	str	r2, [r0, #0]
 800ce52:	2500      	movs	r5, #0
 800ce54:	e7f8      	b.n	800ce48 <_calloc_r+0x16>
 800ce56:	4621      	mov	r1, r4
 800ce58:	f7fd fd55 	bl	800a906 <memset>
 800ce5c:	e7f4      	b.n	800ce48 <_calloc_r+0x16>
	...

0800ce60 <_free_r>:
 800ce60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce62:	2900      	cmp	r1, #0
 800ce64:	d044      	beq.n	800cef0 <_free_r+0x90>
 800ce66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce6a:	9001      	str	r0, [sp, #4]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	f1a1 0404 	sub.w	r4, r1, #4
 800ce72:	bfb8      	it	lt
 800ce74:	18e4      	addlt	r4, r4, r3
 800ce76:	f7ff fb0f 	bl	800c498 <__malloc_lock>
 800ce7a:	4a1e      	ldr	r2, [pc, #120]	; (800cef4 <_free_r+0x94>)
 800ce7c:	9801      	ldr	r0, [sp, #4]
 800ce7e:	6813      	ldr	r3, [r2, #0]
 800ce80:	b933      	cbnz	r3, 800ce90 <_free_r+0x30>
 800ce82:	6063      	str	r3, [r4, #4]
 800ce84:	6014      	str	r4, [r2, #0]
 800ce86:	b003      	add	sp, #12
 800ce88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce8c:	f7ff bb0a 	b.w	800c4a4 <__malloc_unlock>
 800ce90:	42a3      	cmp	r3, r4
 800ce92:	d908      	bls.n	800cea6 <_free_r+0x46>
 800ce94:	6825      	ldr	r5, [r4, #0]
 800ce96:	1961      	adds	r1, r4, r5
 800ce98:	428b      	cmp	r3, r1
 800ce9a:	bf01      	itttt	eq
 800ce9c:	6819      	ldreq	r1, [r3, #0]
 800ce9e:	685b      	ldreq	r3, [r3, #4]
 800cea0:	1949      	addeq	r1, r1, r5
 800cea2:	6021      	streq	r1, [r4, #0]
 800cea4:	e7ed      	b.n	800ce82 <_free_r+0x22>
 800cea6:	461a      	mov	r2, r3
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	b10b      	cbz	r3, 800ceb0 <_free_r+0x50>
 800ceac:	42a3      	cmp	r3, r4
 800ceae:	d9fa      	bls.n	800cea6 <_free_r+0x46>
 800ceb0:	6811      	ldr	r1, [r2, #0]
 800ceb2:	1855      	adds	r5, r2, r1
 800ceb4:	42a5      	cmp	r5, r4
 800ceb6:	d10b      	bne.n	800ced0 <_free_r+0x70>
 800ceb8:	6824      	ldr	r4, [r4, #0]
 800ceba:	4421      	add	r1, r4
 800cebc:	1854      	adds	r4, r2, r1
 800cebe:	42a3      	cmp	r3, r4
 800cec0:	6011      	str	r1, [r2, #0]
 800cec2:	d1e0      	bne.n	800ce86 <_free_r+0x26>
 800cec4:	681c      	ldr	r4, [r3, #0]
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	6053      	str	r3, [r2, #4]
 800ceca:	4421      	add	r1, r4
 800cecc:	6011      	str	r1, [r2, #0]
 800cece:	e7da      	b.n	800ce86 <_free_r+0x26>
 800ced0:	d902      	bls.n	800ced8 <_free_r+0x78>
 800ced2:	230c      	movs	r3, #12
 800ced4:	6003      	str	r3, [r0, #0]
 800ced6:	e7d6      	b.n	800ce86 <_free_r+0x26>
 800ced8:	6825      	ldr	r5, [r4, #0]
 800ceda:	1961      	adds	r1, r4, r5
 800cedc:	428b      	cmp	r3, r1
 800cede:	bf04      	itt	eq
 800cee0:	6819      	ldreq	r1, [r3, #0]
 800cee2:	685b      	ldreq	r3, [r3, #4]
 800cee4:	6063      	str	r3, [r4, #4]
 800cee6:	bf04      	itt	eq
 800cee8:	1949      	addeq	r1, r1, r5
 800ceea:	6021      	streq	r1, [r4, #0]
 800ceec:	6054      	str	r4, [r2, #4]
 800ceee:	e7ca      	b.n	800ce86 <_free_r+0x26>
 800cef0:	b003      	add	sp, #12
 800cef2:	bd30      	pop	{r4, r5, pc}
 800cef4:	200048fc 	.word	0x200048fc

0800cef8 <__sfputc_r>:
 800cef8:	6893      	ldr	r3, [r2, #8]
 800cefa:	3b01      	subs	r3, #1
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	b410      	push	{r4}
 800cf00:	6093      	str	r3, [r2, #8]
 800cf02:	da08      	bge.n	800cf16 <__sfputc_r+0x1e>
 800cf04:	6994      	ldr	r4, [r2, #24]
 800cf06:	42a3      	cmp	r3, r4
 800cf08:	db01      	blt.n	800cf0e <__sfputc_r+0x16>
 800cf0a:	290a      	cmp	r1, #10
 800cf0c:	d103      	bne.n	800cf16 <__sfputc_r+0x1e>
 800cf0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf12:	f7fe bd23 	b.w	800b95c <__swbuf_r>
 800cf16:	6813      	ldr	r3, [r2, #0]
 800cf18:	1c58      	adds	r0, r3, #1
 800cf1a:	6010      	str	r0, [r2, #0]
 800cf1c:	7019      	strb	r1, [r3, #0]
 800cf1e:	4608      	mov	r0, r1
 800cf20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf24:	4770      	bx	lr

0800cf26 <__sfputs_r>:
 800cf26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf28:	4606      	mov	r6, r0
 800cf2a:	460f      	mov	r7, r1
 800cf2c:	4614      	mov	r4, r2
 800cf2e:	18d5      	adds	r5, r2, r3
 800cf30:	42ac      	cmp	r4, r5
 800cf32:	d101      	bne.n	800cf38 <__sfputs_r+0x12>
 800cf34:	2000      	movs	r0, #0
 800cf36:	e007      	b.n	800cf48 <__sfputs_r+0x22>
 800cf38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf3c:	463a      	mov	r2, r7
 800cf3e:	4630      	mov	r0, r6
 800cf40:	f7ff ffda 	bl	800cef8 <__sfputc_r>
 800cf44:	1c43      	adds	r3, r0, #1
 800cf46:	d1f3      	bne.n	800cf30 <__sfputs_r+0xa>
 800cf48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf4c <_vfiprintf_r>:
 800cf4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf50:	460d      	mov	r5, r1
 800cf52:	b09d      	sub	sp, #116	; 0x74
 800cf54:	4614      	mov	r4, r2
 800cf56:	4698      	mov	r8, r3
 800cf58:	4606      	mov	r6, r0
 800cf5a:	b118      	cbz	r0, 800cf64 <_vfiprintf_r+0x18>
 800cf5c:	6983      	ldr	r3, [r0, #24]
 800cf5e:	b90b      	cbnz	r3, 800cf64 <_vfiprintf_r+0x18>
 800cf60:	f7fd fbfe 	bl	800a760 <__sinit>
 800cf64:	4b89      	ldr	r3, [pc, #548]	; (800d18c <_vfiprintf_r+0x240>)
 800cf66:	429d      	cmp	r5, r3
 800cf68:	d11b      	bne.n	800cfa2 <_vfiprintf_r+0x56>
 800cf6a:	6875      	ldr	r5, [r6, #4]
 800cf6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf6e:	07d9      	lsls	r1, r3, #31
 800cf70:	d405      	bmi.n	800cf7e <_vfiprintf_r+0x32>
 800cf72:	89ab      	ldrh	r3, [r5, #12]
 800cf74:	059a      	lsls	r2, r3, #22
 800cf76:	d402      	bmi.n	800cf7e <_vfiprintf_r+0x32>
 800cf78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf7a:	f7fd fcb4 	bl	800a8e6 <__retarget_lock_acquire_recursive>
 800cf7e:	89ab      	ldrh	r3, [r5, #12]
 800cf80:	071b      	lsls	r3, r3, #28
 800cf82:	d501      	bpl.n	800cf88 <_vfiprintf_r+0x3c>
 800cf84:	692b      	ldr	r3, [r5, #16]
 800cf86:	b9eb      	cbnz	r3, 800cfc4 <_vfiprintf_r+0x78>
 800cf88:	4629      	mov	r1, r5
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	f7fe fd4a 	bl	800ba24 <__swsetup_r>
 800cf90:	b1c0      	cbz	r0, 800cfc4 <_vfiprintf_r+0x78>
 800cf92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf94:	07dc      	lsls	r4, r3, #31
 800cf96:	d50e      	bpl.n	800cfb6 <_vfiprintf_r+0x6a>
 800cf98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf9c:	b01d      	add	sp, #116	; 0x74
 800cf9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfa2:	4b7b      	ldr	r3, [pc, #492]	; (800d190 <_vfiprintf_r+0x244>)
 800cfa4:	429d      	cmp	r5, r3
 800cfa6:	d101      	bne.n	800cfac <_vfiprintf_r+0x60>
 800cfa8:	68b5      	ldr	r5, [r6, #8]
 800cfaa:	e7df      	b.n	800cf6c <_vfiprintf_r+0x20>
 800cfac:	4b79      	ldr	r3, [pc, #484]	; (800d194 <_vfiprintf_r+0x248>)
 800cfae:	429d      	cmp	r5, r3
 800cfb0:	bf08      	it	eq
 800cfb2:	68f5      	ldreq	r5, [r6, #12]
 800cfb4:	e7da      	b.n	800cf6c <_vfiprintf_r+0x20>
 800cfb6:	89ab      	ldrh	r3, [r5, #12]
 800cfb8:	0598      	lsls	r0, r3, #22
 800cfba:	d4ed      	bmi.n	800cf98 <_vfiprintf_r+0x4c>
 800cfbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfbe:	f7fd fc93 	bl	800a8e8 <__retarget_lock_release_recursive>
 800cfc2:	e7e9      	b.n	800cf98 <_vfiprintf_r+0x4c>
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	9309      	str	r3, [sp, #36]	; 0x24
 800cfc8:	2320      	movs	r3, #32
 800cfca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfce:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfd2:	2330      	movs	r3, #48	; 0x30
 800cfd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d198 <_vfiprintf_r+0x24c>
 800cfd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfdc:	f04f 0901 	mov.w	r9, #1
 800cfe0:	4623      	mov	r3, r4
 800cfe2:	469a      	mov	sl, r3
 800cfe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfe8:	b10a      	cbz	r2, 800cfee <_vfiprintf_r+0xa2>
 800cfea:	2a25      	cmp	r2, #37	; 0x25
 800cfec:	d1f9      	bne.n	800cfe2 <_vfiprintf_r+0x96>
 800cfee:	ebba 0b04 	subs.w	fp, sl, r4
 800cff2:	d00b      	beq.n	800d00c <_vfiprintf_r+0xc0>
 800cff4:	465b      	mov	r3, fp
 800cff6:	4622      	mov	r2, r4
 800cff8:	4629      	mov	r1, r5
 800cffa:	4630      	mov	r0, r6
 800cffc:	f7ff ff93 	bl	800cf26 <__sfputs_r>
 800d000:	3001      	adds	r0, #1
 800d002:	f000 80aa 	beq.w	800d15a <_vfiprintf_r+0x20e>
 800d006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d008:	445a      	add	r2, fp
 800d00a:	9209      	str	r2, [sp, #36]	; 0x24
 800d00c:	f89a 3000 	ldrb.w	r3, [sl]
 800d010:	2b00      	cmp	r3, #0
 800d012:	f000 80a2 	beq.w	800d15a <_vfiprintf_r+0x20e>
 800d016:	2300      	movs	r3, #0
 800d018:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d01c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d020:	f10a 0a01 	add.w	sl, sl, #1
 800d024:	9304      	str	r3, [sp, #16]
 800d026:	9307      	str	r3, [sp, #28]
 800d028:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d02c:	931a      	str	r3, [sp, #104]	; 0x68
 800d02e:	4654      	mov	r4, sl
 800d030:	2205      	movs	r2, #5
 800d032:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d036:	4858      	ldr	r0, [pc, #352]	; (800d198 <_vfiprintf_r+0x24c>)
 800d038:	f7f3 f8da 	bl	80001f0 <memchr>
 800d03c:	9a04      	ldr	r2, [sp, #16]
 800d03e:	b9d8      	cbnz	r0, 800d078 <_vfiprintf_r+0x12c>
 800d040:	06d1      	lsls	r1, r2, #27
 800d042:	bf44      	itt	mi
 800d044:	2320      	movmi	r3, #32
 800d046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d04a:	0713      	lsls	r3, r2, #28
 800d04c:	bf44      	itt	mi
 800d04e:	232b      	movmi	r3, #43	; 0x2b
 800d050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d054:	f89a 3000 	ldrb.w	r3, [sl]
 800d058:	2b2a      	cmp	r3, #42	; 0x2a
 800d05a:	d015      	beq.n	800d088 <_vfiprintf_r+0x13c>
 800d05c:	9a07      	ldr	r2, [sp, #28]
 800d05e:	4654      	mov	r4, sl
 800d060:	2000      	movs	r0, #0
 800d062:	f04f 0c0a 	mov.w	ip, #10
 800d066:	4621      	mov	r1, r4
 800d068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d06c:	3b30      	subs	r3, #48	; 0x30
 800d06e:	2b09      	cmp	r3, #9
 800d070:	d94e      	bls.n	800d110 <_vfiprintf_r+0x1c4>
 800d072:	b1b0      	cbz	r0, 800d0a2 <_vfiprintf_r+0x156>
 800d074:	9207      	str	r2, [sp, #28]
 800d076:	e014      	b.n	800d0a2 <_vfiprintf_r+0x156>
 800d078:	eba0 0308 	sub.w	r3, r0, r8
 800d07c:	fa09 f303 	lsl.w	r3, r9, r3
 800d080:	4313      	orrs	r3, r2
 800d082:	9304      	str	r3, [sp, #16]
 800d084:	46a2      	mov	sl, r4
 800d086:	e7d2      	b.n	800d02e <_vfiprintf_r+0xe2>
 800d088:	9b03      	ldr	r3, [sp, #12]
 800d08a:	1d19      	adds	r1, r3, #4
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	9103      	str	r1, [sp, #12]
 800d090:	2b00      	cmp	r3, #0
 800d092:	bfbb      	ittet	lt
 800d094:	425b      	neglt	r3, r3
 800d096:	f042 0202 	orrlt.w	r2, r2, #2
 800d09a:	9307      	strge	r3, [sp, #28]
 800d09c:	9307      	strlt	r3, [sp, #28]
 800d09e:	bfb8      	it	lt
 800d0a0:	9204      	strlt	r2, [sp, #16]
 800d0a2:	7823      	ldrb	r3, [r4, #0]
 800d0a4:	2b2e      	cmp	r3, #46	; 0x2e
 800d0a6:	d10c      	bne.n	800d0c2 <_vfiprintf_r+0x176>
 800d0a8:	7863      	ldrb	r3, [r4, #1]
 800d0aa:	2b2a      	cmp	r3, #42	; 0x2a
 800d0ac:	d135      	bne.n	800d11a <_vfiprintf_r+0x1ce>
 800d0ae:	9b03      	ldr	r3, [sp, #12]
 800d0b0:	1d1a      	adds	r2, r3, #4
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	9203      	str	r2, [sp, #12]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	bfb8      	it	lt
 800d0ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d0be:	3402      	adds	r4, #2
 800d0c0:	9305      	str	r3, [sp, #20]
 800d0c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d1a8 <_vfiprintf_r+0x25c>
 800d0c6:	7821      	ldrb	r1, [r4, #0]
 800d0c8:	2203      	movs	r2, #3
 800d0ca:	4650      	mov	r0, sl
 800d0cc:	f7f3 f890 	bl	80001f0 <memchr>
 800d0d0:	b140      	cbz	r0, 800d0e4 <_vfiprintf_r+0x198>
 800d0d2:	2340      	movs	r3, #64	; 0x40
 800d0d4:	eba0 000a 	sub.w	r0, r0, sl
 800d0d8:	fa03 f000 	lsl.w	r0, r3, r0
 800d0dc:	9b04      	ldr	r3, [sp, #16]
 800d0de:	4303      	orrs	r3, r0
 800d0e0:	3401      	adds	r4, #1
 800d0e2:	9304      	str	r3, [sp, #16]
 800d0e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0e8:	482c      	ldr	r0, [pc, #176]	; (800d19c <_vfiprintf_r+0x250>)
 800d0ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0ee:	2206      	movs	r2, #6
 800d0f0:	f7f3 f87e 	bl	80001f0 <memchr>
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	d03f      	beq.n	800d178 <_vfiprintf_r+0x22c>
 800d0f8:	4b29      	ldr	r3, [pc, #164]	; (800d1a0 <_vfiprintf_r+0x254>)
 800d0fa:	bb1b      	cbnz	r3, 800d144 <_vfiprintf_r+0x1f8>
 800d0fc:	9b03      	ldr	r3, [sp, #12]
 800d0fe:	3307      	adds	r3, #7
 800d100:	f023 0307 	bic.w	r3, r3, #7
 800d104:	3308      	adds	r3, #8
 800d106:	9303      	str	r3, [sp, #12]
 800d108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d10a:	443b      	add	r3, r7
 800d10c:	9309      	str	r3, [sp, #36]	; 0x24
 800d10e:	e767      	b.n	800cfe0 <_vfiprintf_r+0x94>
 800d110:	fb0c 3202 	mla	r2, ip, r2, r3
 800d114:	460c      	mov	r4, r1
 800d116:	2001      	movs	r0, #1
 800d118:	e7a5      	b.n	800d066 <_vfiprintf_r+0x11a>
 800d11a:	2300      	movs	r3, #0
 800d11c:	3401      	adds	r4, #1
 800d11e:	9305      	str	r3, [sp, #20]
 800d120:	4619      	mov	r1, r3
 800d122:	f04f 0c0a 	mov.w	ip, #10
 800d126:	4620      	mov	r0, r4
 800d128:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d12c:	3a30      	subs	r2, #48	; 0x30
 800d12e:	2a09      	cmp	r2, #9
 800d130:	d903      	bls.n	800d13a <_vfiprintf_r+0x1ee>
 800d132:	2b00      	cmp	r3, #0
 800d134:	d0c5      	beq.n	800d0c2 <_vfiprintf_r+0x176>
 800d136:	9105      	str	r1, [sp, #20]
 800d138:	e7c3      	b.n	800d0c2 <_vfiprintf_r+0x176>
 800d13a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d13e:	4604      	mov	r4, r0
 800d140:	2301      	movs	r3, #1
 800d142:	e7f0      	b.n	800d126 <_vfiprintf_r+0x1da>
 800d144:	ab03      	add	r3, sp, #12
 800d146:	9300      	str	r3, [sp, #0]
 800d148:	462a      	mov	r2, r5
 800d14a:	4b16      	ldr	r3, [pc, #88]	; (800d1a4 <_vfiprintf_r+0x258>)
 800d14c:	a904      	add	r1, sp, #16
 800d14e:	4630      	mov	r0, r6
 800d150:	f3af 8000 	nop.w
 800d154:	4607      	mov	r7, r0
 800d156:	1c78      	adds	r0, r7, #1
 800d158:	d1d6      	bne.n	800d108 <_vfiprintf_r+0x1bc>
 800d15a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d15c:	07d9      	lsls	r1, r3, #31
 800d15e:	d405      	bmi.n	800d16c <_vfiprintf_r+0x220>
 800d160:	89ab      	ldrh	r3, [r5, #12]
 800d162:	059a      	lsls	r2, r3, #22
 800d164:	d402      	bmi.n	800d16c <_vfiprintf_r+0x220>
 800d166:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d168:	f7fd fbbe 	bl	800a8e8 <__retarget_lock_release_recursive>
 800d16c:	89ab      	ldrh	r3, [r5, #12]
 800d16e:	065b      	lsls	r3, r3, #25
 800d170:	f53f af12 	bmi.w	800cf98 <_vfiprintf_r+0x4c>
 800d174:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d176:	e711      	b.n	800cf9c <_vfiprintf_r+0x50>
 800d178:	ab03      	add	r3, sp, #12
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	462a      	mov	r2, r5
 800d17e:	4b09      	ldr	r3, [pc, #36]	; (800d1a4 <_vfiprintf_r+0x258>)
 800d180:	a904      	add	r1, sp, #16
 800d182:	4630      	mov	r0, r6
 800d184:	f000 f880 	bl	800d288 <_printf_i>
 800d188:	e7e4      	b.n	800d154 <_vfiprintf_r+0x208>
 800d18a:	bf00      	nop
 800d18c:	0800e00c 	.word	0x0800e00c
 800d190:	0800e02c 	.word	0x0800e02c
 800d194:	0800dfec 	.word	0x0800dfec
 800d198:	0800e2ac 	.word	0x0800e2ac
 800d19c:	0800e2b6 	.word	0x0800e2b6
 800d1a0:	00000000 	.word	0x00000000
 800d1a4:	0800cf27 	.word	0x0800cf27
 800d1a8:	0800e2b2 	.word	0x0800e2b2

0800d1ac <_printf_common>:
 800d1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1b0:	4616      	mov	r6, r2
 800d1b2:	4699      	mov	r9, r3
 800d1b4:	688a      	ldr	r2, [r1, #8]
 800d1b6:	690b      	ldr	r3, [r1, #16]
 800d1b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	bfb8      	it	lt
 800d1c0:	4613      	movlt	r3, r2
 800d1c2:	6033      	str	r3, [r6, #0]
 800d1c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1c8:	4607      	mov	r7, r0
 800d1ca:	460c      	mov	r4, r1
 800d1cc:	b10a      	cbz	r2, 800d1d2 <_printf_common+0x26>
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	6033      	str	r3, [r6, #0]
 800d1d2:	6823      	ldr	r3, [r4, #0]
 800d1d4:	0699      	lsls	r1, r3, #26
 800d1d6:	bf42      	ittt	mi
 800d1d8:	6833      	ldrmi	r3, [r6, #0]
 800d1da:	3302      	addmi	r3, #2
 800d1dc:	6033      	strmi	r3, [r6, #0]
 800d1de:	6825      	ldr	r5, [r4, #0]
 800d1e0:	f015 0506 	ands.w	r5, r5, #6
 800d1e4:	d106      	bne.n	800d1f4 <_printf_common+0x48>
 800d1e6:	f104 0a19 	add.w	sl, r4, #25
 800d1ea:	68e3      	ldr	r3, [r4, #12]
 800d1ec:	6832      	ldr	r2, [r6, #0]
 800d1ee:	1a9b      	subs	r3, r3, r2
 800d1f0:	42ab      	cmp	r3, r5
 800d1f2:	dc26      	bgt.n	800d242 <_printf_common+0x96>
 800d1f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d1f8:	1e13      	subs	r3, r2, #0
 800d1fa:	6822      	ldr	r2, [r4, #0]
 800d1fc:	bf18      	it	ne
 800d1fe:	2301      	movne	r3, #1
 800d200:	0692      	lsls	r2, r2, #26
 800d202:	d42b      	bmi.n	800d25c <_printf_common+0xb0>
 800d204:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d208:	4649      	mov	r1, r9
 800d20a:	4638      	mov	r0, r7
 800d20c:	47c0      	blx	r8
 800d20e:	3001      	adds	r0, #1
 800d210:	d01e      	beq.n	800d250 <_printf_common+0xa4>
 800d212:	6823      	ldr	r3, [r4, #0]
 800d214:	68e5      	ldr	r5, [r4, #12]
 800d216:	6832      	ldr	r2, [r6, #0]
 800d218:	f003 0306 	and.w	r3, r3, #6
 800d21c:	2b04      	cmp	r3, #4
 800d21e:	bf08      	it	eq
 800d220:	1aad      	subeq	r5, r5, r2
 800d222:	68a3      	ldr	r3, [r4, #8]
 800d224:	6922      	ldr	r2, [r4, #16]
 800d226:	bf0c      	ite	eq
 800d228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d22c:	2500      	movne	r5, #0
 800d22e:	4293      	cmp	r3, r2
 800d230:	bfc4      	itt	gt
 800d232:	1a9b      	subgt	r3, r3, r2
 800d234:	18ed      	addgt	r5, r5, r3
 800d236:	2600      	movs	r6, #0
 800d238:	341a      	adds	r4, #26
 800d23a:	42b5      	cmp	r5, r6
 800d23c:	d11a      	bne.n	800d274 <_printf_common+0xc8>
 800d23e:	2000      	movs	r0, #0
 800d240:	e008      	b.n	800d254 <_printf_common+0xa8>
 800d242:	2301      	movs	r3, #1
 800d244:	4652      	mov	r2, sl
 800d246:	4649      	mov	r1, r9
 800d248:	4638      	mov	r0, r7
 800d24a:	47c0      	blx	r8
 800d24c:	3001      	adds	r0, #1
 800d24e:	d103      	bne.n	800d258 <_printf_common+0xac>
 800d250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d258:	3501      	adds	r5, #1
 800d25a:	e7c6      	b.n	800d1ea <_printf_common+0x3e>
 800d25c:	18e1      	adds	r1, r4, r3
 800d25e:	1c5a      	adds	r2, r3, #1
 800d260:	2030      	movs	r0, #48	; 0x30
 800d262:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d266:	4422      	add	r2, r4
 800d268:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d26c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d270:	3302      	adds	r3, #2
 800d272:	e7c7      	b.n	800d204 <_printf_common+0x58>
 800d274:	2301      	movs	r3, #1
 800d276:	4622      	mov	r2, r4
 800d278:	4649      	mov	r1, r9
 800d27a:	4638      	mov	r0, r7
 800d27c:	47c0      	blx	r8
 800d27e:	3001      	adds	r0, #1
 800d280:	d0e6      	beq.n	800d250 <_printf_common+0xa4>
 800d282:	3601      	adds	r6, #1
 800d284:	e7d9      	b.n	800d23a <_printf_common+0x8e>
	...

0800d288 <_printf_i>:
 800d288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d28c:	7e0f      	ldrb	r7, [r1, #24]
 800d28e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d290:	2f78      	cmp	r7, #120	; 0x78
 800d292:	4691      	mov	r9, r2
 800d294:	4680      	mov	r8, r0
 800d296:	460c      	mov	r4, r1
 800d298:	469a      	mov	sl, r3
 800d29a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d29e:	d807      	bhi.n	800d2b0 <_printf_i+0x28>
 800d2a0:	2f62      	cmp	r7, #98	; 0x62
 800d2a2:	d80a      	bhi.n	800d2ba <_printf_i+0x32>
 800d2a4:	2f00      	cmp	r7, #0
 800d2a6:	f000 80d8 	beq.w	800d45a <_printf_i+0x1d2>
 800d2aa:	2f58      	cmp	r7, #88	; 0x58
 800d2ac:	f000 80a3 	beq.w	800d3f6 <_printf_i+0x16e>
 800d2b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d2b8:	e03a      	b.n	800d330 <_printf_i+0xa8>
 800d2ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d2be:	2b15      	cmp	r3, #21
 800d2c0:	d8f6      	bhi.n	800d2b0 <_printf_i+0x28>
 800d2c2:	a101      	add	r1, pc, #4	; (adr r1, 800d2c8 <_printf_i+0x40>)
 800d2c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2c8:	0800d321 	.word	0x0800d321
 800d2cc:	0800d335 	.word	0x0800d335
 800d2d0:	0800d2b1 	.word	0x0800d2b1
 800d2d4:	0800d2b1 	.word	0x0800d2b1
 800d2d8:	0800d2b1 	.word	0x0800d2b1
 800d2dc:	0800d2b1 	.word	0x0800d2b1
 800d2e0:	0800d335 	.word	0x0800d335
 800d2e4:	0800d2b1 	.word	0x0800d2b1
 800d2e8:	0800d2b1 	.word	0x0800d2b1
 800d2ec:	0800d2b1 	.word	0x0800d2b1
 800d2f0:	0800d2b1 	.word	0x0800d2b1
 800d2f4:	0800d441 	.word	0x0800d441
 800d2f8:	0800d365 	.word	0x0800d365
 800d2fc:	0800d423 	.word	0x0800d423
 800d300:	0800d2b1 	.word	0x0800d2b1
 800d304:	0800d2b1 	.word	0x0800d2b1
 800d308:	0800d463 	.word	0x0800d463
 800d30c:	0800d2b1 	.word	0x0800d2b1
 800d310:	0800d365 	.word	0x0800d365
 800d314:	0800d2b1 	.word	0x0800d2b1
 800d318:	0800d2b1 	.word	0x0800d2b1
 800d31c:	0800d42b 	.word	0x0800d42b
 800d320:	682b      	ldr	r3, [r5, #0]
 800d322:	1d1a      	adds	r2, r3, #4
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	602a      	str	r2, [r5, #0]
 800d328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d32c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d330:	2301      	movs	r3, #1
 800d332:	e0a3      	b.n	800d47c <_printf_i+0x1f4>
 800d334:	6820      	ldr	r0, [r4, #0]
 800d336:	6829      	ldr	r1, [r5, #0]
 800d338:	0606      	lsls	r6, r0, #24
 800d33a:	f101 0304 	add.w	r3, r1, #4
 800d33e:	d50a      	bpl.n	800d356 <_printf_i+0xce>
 800d340:	680e      	ldr	r6, [r1, #0]
 800d342:	602b      	str	r3, [r5, #0]
 800d344:	2e00      	cmp	r6, #0
 800d346:	da03      	bge.n	800d350 <_printf_i+0xc8>
 800d348:	232d      	movs	r3, #45	; 0x2d
 800d34a:	4276      	negs	r6, r6
 800d34c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d350:	485e      	ldr	r0, [pc, #376]	; (800d4cc <_printf_i+0x244>)
 800d352:	230a      	movs	r3, #10
 800d354:	e019      	b.n	800d38a <_printf_i+0x102>
 800d356:	680e      	ldr	r6, [r1, #0]
 800d358:	602b      	str	r3, [r5, #0]
 800d35a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d35e:	bf18      	it	ne
 800d360:	b236      	sxthne	r6, r6
 800d362:	e7ef      	b.n	800d344 <_printf_i+0xbc>
 800d364:	682b      	ldr	r3, [r5, #0]
 800d366:	6820      	ldr	r0, [r4, #0]
 800d368:	1d19      	adds	r1, r3, #4
 800d36a:	6029      	str	r1, [r5, #0]
 800d36c:	0601      	lsls	r1, r0, #24
 800d36e:	d501      	bpl.n	800d374 <_printf_i+0xec>
 800d370:	681e      	ldr	r6, [r3, #0]
 800d372:	e002      	b.n	800d37a <_printf_i+0xf2>
 800d374:	0646      	lsls	r6, r0, #25
 800d376:	d5fb      	bpl.n	800d370 <_printf_i+0xe8>
 800d378:	881e      	ldrh	r6, [r3, #0]
 800d37a:	4854      	ldr	r0, [pc, #336]	; (800d4cc <_printf_i+0x244>)
 800d37c:	2f6f      	cmp	r7, #111	; 0x6f
 800d37e:	bf0c      	ite	eq
 800d380:	2308      	moveq	r3, #8
 800d382:	230a      	movne	r3, #10
 800d384:	2100      	movs	r1, #0
 800d386:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d38a:	6865      	ldr	r5, [r4, #4]
 800d38c:	60a5      	str	r5, [r4, #8]
 800d38e:	2d00      	cmp	r5, #0
 800d390:	bfa2      	ittt	ge
 800d392:	6821      	ldrge	r1, [r4, #0]
 800d394:	f021 0104 	bicge.w	r1, r1, #4
 800d398:	6021      	strge	r1, [r4, #0]
 800d39a:	b90e      	cbnz	r6, 800d3a0 <_printf_i+0x118>
 800d39c:	2d00      	cmp	r5, #0
 800d39e:	d04d      	beq.n	800d43c <_printf_i+0x1b4>
 800d3a0:	4615      	mov	r5, r2
 800d3a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800d3a6:	fb03 6711 	mls	r7, r3, r1, r6
 800d3aa:	5dc7      	ldrb	r7, [r0, r7]
 800d3ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d3b0:	4637      	mov	r7, r6
 800d3b2:	42bb      	cmp	r3, r7
 800d3b4:	460e      	mov	r6, r1
 800d3b6:	d9f4      	bls.n	800d3a2 <_printf_i+0x11a>
 800d3b8:	2b08      	cmp	r3, #8
 800d3ba:	d10b      	bne.n	800d3d4 <_printf_i+0x14c>
 800d3bc:	6823      	ldr	r3, [r4, #0]
 800d3be:	07de      	lsls	r6, r3, #31
 800d3c0:	d508      	bpl.n	800d3d4 <_printf_i+0x14c>
 800d3c2:	6923      	ldr	r3, [r4, #16]
 800d3c4:	6861      	ldr	r1, [r4, #4]
 800d3c6:	4299      	cmp	r1, r3
 800d3c8:	bfde      	ittt	le
 800d3ca:	2330      	movle	r3, #48	; 0x30
 800d3cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d3d4:	1b52      	subs	r2, r2, r5
 800d3d6:	6122      	str	r2, [r4, #16]
 800d3d8:	f8cd a000 	str.w	sl, [sp]
 800d3dc:	464b      	mov	r3, r9
 800d3de:	aa03      	add	r2, sp, #12
 800d3e0:	4621      	mov	r1, r4
 800d3e2:	4640      	mov	r0, r8
 800d3e4:	f7ff fee2 	bl	800d1ac <_printf_common>
 800d3e8:	3001      	adds	r0, #1
 800d3ea:	d14c      	bne.n	800d486 <_printf_i+0x1fe>
 800d3ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3f0:	b004      	add	sp, #16
 800d3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3f6:	4835      	ldr	r0, [pc, #212]	; (800d4cc <_printf_i+0x244>)
 800d3f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d3fc:	6829      	ldr	r1, [r5, #0]
 800d3fe:	6823      	ldr	r3, [r4, #0]
 800d400:	f851 6b04 	ldr.w	r6, [r1], #4
 800d404:	6029      	str	r1, [r5, #0]
 800d406:	061d      	lsls	r5, r3, #24
 800d408:	d514      	bpl.n	800d434 <_printf_i+0x1ac>
 800d40a:	07df      	lsls	r7, r3, #31
 800d40c:	bf44      	itt	mi
 800d40e:	f043 0320 	orrmi.w	r3, r3, #32
 800d412:	6023      	strmi	r3, [r4, #0]
 800d414:	b91e      	cbnz	r6, 800d41e <_printf_i+0x196>
 800d416:	6823      	ldr	r3, [r4, #0]
 800d418:	f023 0320 	bic.w	r3, r3, #32
 800d41c:	6023      	str	r3, [r4, #0]
 800d41e:	2310      	movs	r3, #16
 800d420:	e7b0      	b.n	800d384 <_printf_i+0xfc>
 800d422:	6823      	ldr	r3, [r4, #0]
 800d424:	f043 0320 	orr.w	r3, r3, #32
 800d428:	6023      	str	r3, [r4, #0]
 800d42a:	2378      	movs	r3, #120	; 0x78
 800d42c:	4828      	ldr	r0, [pc, #160]	; (800d4d0 <_printf_i+0x248>)
 800d42e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d432:	e7e3      	b.n	800d3fc <_printf_i+0x174>
 800d434:	0659      	lsls	r1, r3, #25
 800d436:	bf48      	it	mi
 800d438:	b2b6      	uxthmi	r6, r6
 800d43a:	e7e6      	b.n	800d40a <_printf_i+0x182>
 800d43c:	4615      	mov	r5, r2
 800d43e:	e7bb      	b.n	800d3b8 <_printf_i+0x130>
 800d440:	682b      	ldr	r3, [r5, #0]
 800d442:	6826      	ldr	r6, [r4, #0]
 800d444:	6961      	ldr	r1, [r4, #20]
 800d446:	1d18      	adds	r0, r3, #4
 800d448:	6028      	str	r0, [r5, #0]
 800d44a:	0635      	lsls	r5, r6, #24
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	d501      	bpl.n	800d454 <_printf_i+0x1cc>
 800d450:	6019      	str	r1, [r3, #0]
 800d452:	e002      	b.n	800d45a <_printf_i+0x1d2>
 800d454:	0670      	lsls	r0, r6, #25
 800d456:	d5fb      	bpl.n	800d450 <_printf_i+0x1c8>
 800d458:	8019      	strh	r1, [r3, #0]
 800d45a:	2300      	movs	r3, #0
 800d45c:	6123      	str	r3, [r4, #16]
 800d45e:	4615      	mov	r5, r2
 800d460:	e7ba      	b.n	800d3d8 <_printf_i+0x150>
 800d462:	682b      	ldr	r3, [r5, #0]
 800d464:	1d1a      	adds	r2, r3, #4
 800d466:	602a      	str	r2, [r5, #0]
 800d468:	681d      	ldr	r5, [r3, #0]
 800d46a:	6862      	ldr	r2, [r4, #4]
 800d46c:	2100      	movs	r1, #0
 800d46e:	4628      	mov	r0, r5
 800d470:	f7f2 febe 	bl	80001f0 <memchr>
 800d474:	b108      	cbz	r0, 800d47a <_printf_i+0x1f2>
 800d476:	1b40      	subs	r0, r0, r5
 800d478:	6060      	str	r0, [r4, #4]
 800d47a:	6863      	ldr	r3, [r4, #4]
 800d47c:	6123      	str	r3, [r4, #16]
 800d47e:	2300      	movs	r3, #0
 800d480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d484:	e7a8      	b.n	800d3d8 <_printf_i+0x150>
 800d486:	6923      	ldr	r3, [r4, #16]
 800d488:	462a      	mov	r2, r5
 800d48a:	4649      	mov	r1, r9
 800d48c:	4640      	mov	r0, r8
 800d48e:	47d0      	blx	sl
 800d490:	3001      	adds	r0, #1
 800d492:	d0ab      	beq.n	800d3ec <_printf_i+0x164>
 800d494:	6823      	ldr	r3, [r4, #0]
 800d496:	079b      	lsls	r3, r3, #30
 800d498:	d413      	bmi.n	800d4c2 <_printf_i+0x23a>
 800d49a:	68e0      	ldr	r0, [r4, #12]
 800d49c:	9b03      	ldr	r3, [sp, #12]
 800d49e:	4298      	cmp	r0, r3
 800d4a0:	bfb8      	it	lt
 800d4a2:	4618      	movlt	r0, r3
 800d4a4:	e7a4      	b.n	800d3f0 <_printf_i+0x168>
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	4632      	mov	r2, r6
 800d4aa:	4649      	mov	r1, r9
 800d4ac:	4640      	mov	r0, r8
 800d4ae:	47d0      	blx	sl
 800d4b0:	3001      	adds	r0, #1
 800d4b2:	d09b      	beq.n	800d3ec <_printf_i+0x164>
 800d4b4:	3501      	adds	r5, #1
 800d4b6:	68e3      	ldr	r3, [r4, #12]
 800d4b8:	9903      	ldr	r1, [sp, #12]
 800d4ba:	1a5b      	subs	r3, r3, r1
 800d4bc:	42ab      	cmp	r3, r5
 800d4be:	dcf2      	bgt.n	800d4a6 <_printf_i+0x21e>
 800d4c0:	e7eb      	b.n	800d49a <_printf_i+0x212>
 800d4c2:	2500      	movs	r5, #0
 800d4c4:	f104 0619 	add.w	r6, r4, #25
 800d4c8:	e7f5      	b.n	800d4b6 <_printf_i+0x22e>
 800d4ca:	bf00      	nop
 800d4cc:	0800e2bd 	.word	0x0800e2bd
 800d4d0:	0800e2ce 	.word	0x0800e2ce

0800d4d4 <_read_r>:
 800d4d4:	b538      	push	{r3, r4, r5, lr}
 800d4d6:	4d07      	ldr	r5, [pc, #28]	; (800d4f4 <_read_r+0x20>)
 800d4d8:	4604      	mov	r4, r0
 800d4da:	4608      	mov	r0, r1
 800d4dc:	4611      	mov	r1, r2
 800d4de:	2200      	movs	r2, #0
 800d4e0:	602a      	str	r2, [r5, #0]
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	f7f5 f826 	bl	8002534 <_read>
 800d4e8:	1c43      	adds	r3, r0, #1
 800d4ea:	d102      	bne.n	800d4f2 <_read_r+0x1e>
 800d4ec:	682b      	ldr	r3, [r5, #0]
 800d4ee:	b103      	cbz	r3, 800d4f2 <_read_r+0x1e>
 800d4f0:	6023      	str	r3, [r4, #0]
 800d4f2:	bd38      	pop	{r3, r4, r5, pc}
 800d4f4:	20004904 	.word	0x20004904

0800d4f8 <nan>:
 800d4f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d500 <nan+0x8>
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop
 800d500:	00000000 	.word	0x00000000
 800d504:	7ff80000 	.word	0x7ff80000

0800d508 <__ascii_wctomb>:
 800d508:	b149      	cbz	r1, 800d51e <__ascii_wctomb+0x16>
 800d50a:	2aff      	cmp	r2, #255	; 0xff
 800d50c:	bf85      	ittet	hi
 800d50e:	238a      	movhi	r3, #138	; 0x8a
 800d510:	6003      	strhi	r3, [r0, #0]
 800d512:	700a      	strbls	r2, [r1, #0]
 800d514:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d518:	bf98      	it	ls
 800d51a:	2001      	movls	r0, #1
 800d51c:	4770      	bx	lr
 800d51e:	4608      	mov	r0, r1
 800d520:	4770      	bx	lr
	...

0800d524 <__assert_func>:
 800d524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d526:	4614      	mov	r4, r2
 800d528:	461a      	mov	r2, r3
 800d52a:	4b09      	ldr	r3, [pc, #36]	; (800d550 <__assert_func+0x2c>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4605      	mov	r5, r0
 800d530:	68d8      	ldr	r0, [r3, #12]
 800d532:	b14c      	cbz	r4, 800d548 <__assert_func+0x24>
 800d534:	4b07      	ldr	r3, [pc, #28]	; (800d554 <__assert_func+0x30>)
 800d536:	9100      	str	r1, [sp, #0]
 800d538:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d53c:	4906      	ldr	r1, [pc, #24]	; (800d558 <__assert_func+0x34>)
 800d53e:	462b      	mov	r3, r5
 800d540:	f000 f80e 	bl	800d560 <fiprintf>
 800d544:	f000 f848 	bl	800d5d8 <abort>
 800d548:	4b04      	ldr	r3, [pc, #16]	; (800d55c <__assert_func+0x38>)
 800d54a:	461c      	mov	r4, r3
 800d54c:	e7f3      	b.n	800d536 <__assert_func+0x12>
 800d54e:	bf00      	nop
 800d550:	20000010 	.word	0x20000010
 800d554:	0800e2df 	.word	0x0800e2df
 800d558:	0800e2ec 	.word	0x0800e2ec
 800d55c:	0800e31a 	.word	0x0800e31a

0800d560 <fiprintf>:
 800d560:	b40e      	push	{r1, r2, r3}
 800d562:	b503      	push	{r0, r1, lr}
 800d564:	4601      	mov	r1, r0
 800d566:	ab03      	add	r3, sp, #12
 800d568:	4805      	ldr	r0, [pc, #20]	; (800d580 <fiprintf+0x20>)
 800d56a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d56e:	6800      	ldr	r0, [r0, #0]
 800d570:	9301      	str	r3, [sp, #4]
 800d572:	f7ff fceb 	bl	800cf4c <_vfiprintf_r>
 800d576:	b002      	add	sp, #8
 800d578:	f85d eb04 	ldr.w	lr, [sp], #4
 800d57c:	b003      	add	sp, #12
 800d57e:	4770      	bx	lr
 800d580:	20000010 	.word	0x20000010

0800d584 <_fstat_r>:
 800d584:	b538      	push	{r3, r4, r5, lr}
 800d586:	4d07      	ldr	r5, [pc, #28]	; (800d5a4 <_fstat_r+0x20>)
 800d588:	2300      	movs	r3, #0
 800d58a:	4604      	mov	r4, r0
 800d58c:	4608      	mov	r0, r1
 800d58e:	4611      	mov	r1, r2
 800d590:	602b      	str	r3, [r5, #0]
 800d592:	f7f5 f814 	bl	80025be <_fstat>
 800d596:	1c43      	adds	r3, r0, #1
 800d598:	d102      	bne.n	800d5a0 <_fstat_r+0x1c>
 800d59a:	682b      	ldr	r3, [r5, #0]
 800d59c:	b103      	cbz	r3, 800d5a0 <_fstat_r+0x1c>
 800d59e:	6023      	str	r3, [r4, #0]
 800d5a0:	bd38      	pop	{r3, r4, r5, pc}
 800d5a2:	bf00      	nop
 800d5a4:	20004904 	.word	0x20004904

0800d5a8 <_isatty_r>:
 800d5a8:	b538      	push	{r3, r4, r5, lr}
 800d5aa:	4d06      	ldr	r5, [pc, #24]	; (800d5c4 <_isatty_r+0x1c>)
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	4604      	mov	r4, r0
 800d5b0:	4608      	mov	r0, r1
 800d5b2:	602b      	str	r3, [r5, #0]
 800d5b4:	f7f5 f813 	bl	80025de <_isatty>
 800d5b8:	1c43      	adds	r3, r0, #1
 800d5ba:	d102      	bne.n	800d5c2 <_isatty_r+0x1a>
 800d5bc:	682b      	ldr	r3, [r5, #0]
 800d5be:	b103      	cbz	r3, 800d5c2 <_isatty_r+0x1a>
 800d5c0:	6023      	str	r3, [r4, #0]
 800d5c2:	bd38      	pop	{r3, r4, r5, pc}
 800d5c4:	20004904 	.word	0x20004904

0800d5c8 <malloc>:
 800d5c8:	4b02      	ldr	r3, [pc, #8]	; (800d5d4 <malloc+0xc>)
 800d5ca:	4601      	mov	r1, r0
 800d5cc:	6818      	ldr	r0, [r3, #0]
 800d5ce:	f7fd b9c3 	b.w	800a958 <_malloc_r>
 800d5d2:	bf00      	nop
 800d5d4:	20000010 	.word	0x20000010

0800d5d8 <abort>:
 800d5d8:	b508      	push	{r3, lr}
 800d5da:	2006      	movs	r0, #6
 800d5dc:	f000 f82c 	bl	800d638 <raise>
 800d5e0:	2001      	movs	r0, #1
 800d5e2:	f7f4 ff9d 	bl	8002520 <_exit>

0800d5e6 <_raise_r>:
 800d5e6:	291f      	cmp	r1, #31
 800d5e8:	b538      	push	{r3, r4, r5, lr}
 800d5ea:	4604      	mov	r4, r0
 800d5ec:	460d      	mov	r5, r1
 800d5ee:	d904      	bls.n	800d5fa <_raise_r+0x14>
 800d5f0:	2316      	movs	r3, #22
 800d5f2:	6003      	str	r3, [r0, #0]
 800d5f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5f8:	bd38      	pop	{r3, r4, r5, pc}
 800d5fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d5fc:	b112      	cbz	r2, 800d604 <_raise_r+0x1e>
 800d5fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d602:	b94b      	cbnz	r3, 800d618 <_raise_r+0x32>
 800d604:	4620      	mov	r0, r4
 800d606:	f000 f831 	bl	800d66c <_getpid_r>
 800d60a:	462a      	mov	r2, r5
 800d60c:	4601      	mov	r1, r0
 800d60e:	4620      	mov	r0, r4
 800d610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d614:	f000 b818 	b.w	800d648 <_kill_r>
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d00a      	beq.n	800d632 <_raise_r+0x4c>
 800d61c:	1c59      	adds	r1, r3, #1
 800d61e:	d103      	bne.n	800d628 <_raise_r+0x42>
 800d620:	2316      	movs	r3, #22
 800d622:	6003      	str	r3, [r0, #0]
 800d624:	2001      	movs	r0, #1
 800d626:	e7e7      	b.n	800d5f8 <_raise_r+0x12>
 800d628:	2400      	movs	r4, #0
 800d62a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d62e:	4628      	mov	r0, r5
 800d630:	4798      	blx	r3
 800d632:	2000      	movs	r0, #0
 800d634:	e7e0      	b.n	800d5f8 <_raise_r+0x12>
	...

0800d638 <raise>:
 800d638:	4b02      	ldr	r3, [pc, #8]	; (800d644 <raise+0xc>)
 800d63a:	4601      	mov	r1, r0
 800d63c:	6818      	ldr	r0, [r3, #0]
 800d63e:	f7ff bfd2 	b.w	800d5e6 <_raise_r>
 800d642:	bf00      	nop
 800d644:	20000010 	.word	0x20000010

0800d648 <_kill_r>:
 800d648:	b538      	push	{r3, r4, r5, lr}
 800d64a:	4d07      	ldr	r5, [pc, #28]	; (800d668 <_kill_r+0x20>)
 800d64c:	2300      	movs	r3, #0
 800d64e:	4604      	mov	r4, r0
 800d650:	4608      	mov	r0, r1
 800d652:	4611      	mov	r1, r2
 800d654:	602b      	str	r3, [r5, #0]
 800d656:	f7f4 ff53 	bl	8002500 <_kill>
 800d65a:	1c43      	adds	r3, r0, #1
 800d65c:	d102      	bne.n	800d664 <_kill_r+0x1c>
 800d65e:	682b      	ldr	r3, [r5, #0]
 800d660:	b103      	cbz	r3, 800d664 <_kill_r+0x1c>
 800d662:	6023      	str	r3, [r4, #0]
 800d664:	bd38      	pop	{r3, r4, r5, pc}
 800d666:	bf00      	nop
 800d668:	20004904 	.word	0x20004904

0800d66c <_getpid_r>:
 800d66c:	f7f4 bf40 	b.w	80024f0 <_getpid>

0800d670 <atan>:
 800d670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d674:	ec55 4b10 	vmov	r4, r5, d0
 800d678:	4bc3      	ldr	r3, [pc, #780]	; (800d988 <atan+0x318>)
 800d67a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d67e:	429e      	cmp	r6, r3
 800d680:	46ab      	mov	fp, r5
 800d682:	dd18      	ble.n	800d6b6 <atan+0x46>
 800d684:	4bc1      	ldr	r3, [pc, #772]	; (800d98c <atan+0x31c>)
 800d686:	429e      	cmp	r6, r3
 800d688:	dc01      	bgt.n	800d68e <atan+0x1e>
 800d68a:	d109      	bne.n	800d6a0 <atan+0x30>
 800d68c:	b144      	cbz	r4, 800d6a0 <atan+0x30>
 800d68e:	4622      	mov	r2, r4
 800d690:	462b      	mov	r3, r5
 800d692:	4620      	mov	r0, r4
 800d694:	4629      	mov	r1, r5
 800d696:	f7f2 fe01 	bl	800029c <__adddf3>
 800d69a:	4604      	mov	r4, r0
 800d69c:	460d      	mov	r5, r1
 800d69e:	e006      	b.n	800d6ae <atan+0x3e>
 800d6a0:	f1bb 0f00 	cmp.w	fp, #0
 800d6a4:	f300 8131 	bgt.w	800d90a <atan+0x29a>
 800d6a8:	a59b      	add	r5, pc, #620	; (adr r5, 800d918 <atan+0x2a8>)
 800d6aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d6ae:	ec45 4b10 	vmov	d0, r4, r5
 800d6b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b6:	4bb6      	ldr	r3, [pc, #728]	; (800d990 <atan+0x320>)
 800d6b8:	429e      	cmp	r6, r3
 800d6ba:	dc14      	bgt.n	800d6e6 <atan+0x76>
 800d6bc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d6c0:	429e      	cmp	r6, r3
 800d6c2:	dc0d      	bgt.n	800d6e0 <atan+0x70>
 800d6c4:	a396      	add	r3, pc, #600	; (adr r3, 800d920 <atan+0x2b0>)
 800d6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ca:	ee10 0a10 	vmov	r0, s0
 800d6ce:	4629      	mov	r1, r5
 800d6d0:	f7f2 fde4 	bl	800029c <__adddf3>
 800d6d4:	4baf      	ldr	r3, [pc, #700]	; (800d994 <atan+0x324>)
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f7f3 fa26 	bl	8000b28 <__aeabi_dcmpgt>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d1e6      	bne.n	800d6ae <atan+0x3e>
 800d6e0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d6e4:	e02b      	b.n	800d73e <atan+0xce>
 800d6e6:	f000 f963 	bl	800d9b0 <fabs>
 800d6ea:	4bab      	ldr	r3, [pc, #684]	; (800d998 <atan+0x328>)
 800d6ec:	429e      	cmp	r6, r3
 800d6ee:	ec55 4b10 	vmov	r4, r5, d0
 800d6f2:	f300 80bf 	bgt.w	800d874 <atan+0x204>
 800d6f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d6fa:	429e      	cmp	r6, r3
 800d6fc:	f300 80a0 	bgt.w	800d840 <atan+0x1d0>
 800d700:	ee10 2a10 	vmov	r2, s0
 800d704:	ee10 0a10 	vmov	r0, s0
 800d708:	462b      	mov	r3, r5
 800d70a:	4629      	mov	r1, r5
 800d70c:	f7f2 fdc6 	bl	800029c <__adddf3>
 800d710:	4ba0      	ldr	r3, [pc, #640]	; (800d994 <atan+0x324>)
 800d712:	2200      	movs	r2, #0
 800d714:	f7f2 fdc0 	bl	8000298 <__aeabi_dsub>
 800d718:	2200      	movs	r2, #0
 800d71a:	4606      	mov	r6, r0
 800d71c:	460f      	mov	r7, r1
 800d71e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d722:	4620      	mov	r0, r4
 800d724:	4629      	mov	r1, r5
 800d726:	f7f2 fdb9 	bl	800029c <__adddf3>
 800d72a:	4602      	mov	r2, r0
 800d72c:	460b      	mov	r3, r1
 800d72e:	4630      	mov	r0, r6
 800d730:	4639      	mov	r1, r7
 800d732:	f7f3 f893 	bl	800085c <__aeabi_ddiv>
 800d736:	f04f 0a00 	mov.w	sl, #0
 800d73a:	4604      	mov	r4, r0
 800d73c:	460d      	mov	r5, r1
 800d73e:	4622      	mov	r2, r4
 800d740:	462b      	mov	r3, r5
 800d742:	4620      	mov	r0, r4
 800d744:	4629      	mov	r1, r5
 800d746:	f7f2 ff5f 	bl	8000608 <__aeabi_dmul>
 800d74a:	4602      	mov	r2, r0
 800d74c:	460b      	mov	r3, r1
 800d74e:	4680      	mov	r8, r0
 800d750:	4689      	mov	r9, r1
 800d752:	f7f2 ff59 	bl	8000608 <__aeabi_dmul>
 800d756:	a374      	add	r3, pc, #464	; (adr r3, 800d928 <atan+0x2b8>)
 800d758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75c:	4606      	mov	r6, r0
 800d75e:	460f      	mov	r7, r1
 800d760:	f7f2 ff52 	bl	8000608 <__aeabi_dmul>
 800d764:	a372      	add	r3, pc, #456	; (adr r3, 800d930 <atan+0x2c0>)
 800d766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76a:	f7f2 fd97 	bl	800029c <__adddf3>
 800d76e:	4632      	mov	r2, r6
 800d770:	463b      	mov	r3, r7
 800d772:	f7f2 ff49 	bl	8000608 <__aeabi_dmul>
 800d776:	a370      	add	r3, pc, #448	; (adr r3, 800d938 <atan+0x2c8>)
 800d778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77c:	f7f2 fd8e 	bl	800029c <__adddf3>
 800d780:	4632      	mov	r2, r6
 800d782:	463b      	mov	r3, r7
 800d784:	f7f2 ff40 	bl	8000608 <__aeabi_dmul>
 800d788:	a36d      	add	r3, pc, #436	; (adr r3, 800d940 <atan+0x2d0>)
 800d78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78e:	f7f2 fd85 	bl	800029c <__adddf3>
 800d792:	4632      	mov	r2, r6
 800d794:	463b      	mov	r3, r7
 800d796:	f7f2 ff37 	bl	8000608 <__aeabi_dmul>
 800d79a:	a36b      	add	r3, pc, #428	; (adr r3, 800d948 <atan+0x2d8>)
 800d79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a0:	f7f2 fd7c 	bl	800029c <__adddf3>
 800d7a4:	4632      	mov	r2, r6
 800d7a6:	463b      	mov	r3, r7
 800d7a8:	f7f2 ff2e 	bl	8000608 <__aeabi_dmul>
 800d7ac:	a368      	add	r3, pc, #416	; (adr r3, 800d950 <atan+0x2e0>)
 800d7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b2:	f7f2 fd73 	bl	800029c <__adddf3>
 800d7b6:	4642      	mov	r2, r8
 800d7b8:	464b      	mov	r3, r9
 800d7ba:	f7f2 ff25 	bl	8000608 <__aeabi_dmul>
 800d7be:	a366      	add	r3, pc, #408	; (adr r3, 800d958 <atan+0x2e8>)
 800d7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c4:	4680      	mov	r8, r0
 800d7c6:	4689      	mov	r9, r1
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	4639      	mov	r1, r7
 800d7cc:	f7f2 ff1c 	bl	8000608 <__aeabi_dmul>
 800d7d0:	a363      	add	r3, pc, #396	; (adr r3, 800d960 <atan+0x2f0>)
 800d7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d6:	f7f2 fd5f 	bl	8000298 <__aeabi_dsub>
 800d7da:	4632      	mov	r2, r6
 800d7dc:	463b      	mov	r3, r7
 800d7de:	f7f2 ff13 	bl	8000608 <__aeabi_dmul>
 800d7e2:	a361      	add	r3, pc, #388	; (adr r3, 800d968 <atan+0x2f8>)
 800d7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e8:	f7f2 fd56 	bl	8000298 <__aeabi_dsub>
 800d7ec:	4632      	mov	r2, r6
 800d7ee:	463b      	mov	r3, r7
 800d7f0:	f7f2 ff0a 	bl	8000608 <__aeabi_dmul>
 800d7f4:	a35e      	add	r3, pc, #376	; (adr r3, 800d970 <atan+0x300>)
 800d7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fa:	f7f2 fd4d 	bl	8000298 <__aeabi_dsub>
 800d7fe:	4632      	mov	r2, r6
 800d800:	463b      	mov	r3, r7
 800d802:	f7f2 ff01 	bl	8000608 <__aeabi_dmul>
 800d806:	a35c      	add	r3, pc, #368	; (adr r3, 800d978 <atan+0x308>)
 800d808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80c:	f7f2 fd44 	bl	8000298 <__aeabi_dsub>
 800d810:	4632      	mov	r2, r6
 800d812:	463b      	mov	r3, r7
 800d814:	f7f2 fef8 	bl	8000608 <__aeabi_dmul>
 800d818:	4602      	mov	r2, r0
 800d81a:	460b      	mov	r3, r1
 800d81c:	4640      	mov	r0, r8
 800d81e:	4649      	mov	r1, r9
 800d820:	f7f2 fd3c 	bl	800029c <__adddf3>
 800d824:	4622      	mov	r2, r4
 800d826:	462b      	mov	r3, r5
 800d828:	f7f2 feee 	bl	8000608 <__aeabi_dmul>
 800d82c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800d830:	4602      	mov	r2, r0
 800d832:	460b      	mov	r3, r1
 800d834:	d14b      	bne.n	800d8ce <atan+0x25e>
 800d836:	4620      	mov	r0, r4
 800d838:	4629      	mov	r1, r5
 800d83a:	f7f2 fd2d 	bl	8000298 <__aeabi_dsub>
 800d83e:	e72c      	b.n	800d69a <atan+0x2a>
 800d840:	ee10 0a10 	vmov	r0, s0
 800d844:	4b53      	ldr	r3, [pc, #332]	; (800d994 <atan+0x324>)
 800d846:	2200      	movs	r2, #0
 800d848:	4629      	mov	r1, r5
 800d84a:	f7f2 fd25 	bl	8000298 <__aeabi_dsub>
 800d84e:	4b51      	ldr	r3, [pc, #324]	; (800d994 <atan+0x324>)
 800d850:	4606      	mov	r6, r0
 800d852:	460f      	mov	r7, r1
 800d854:	2200      	movs	r2, #0
 800d856:	4620      	mov	r0, r4
 800d858:	4629      	mov	r1, r5
 800d85a:	f7f2 fd1f 	bl	800029c <__adddf3>
 800d85e:	4602      	mov	r2, r0
 800d860:	460b      	mov	r3, r1
 800d862:	4630      	mov	r0, r6
 800d864:	4639      	mov	r1, r7
 800d866:	f7f2 fff9 	bl	800085c <__aeabi_ddiv>
 800d86a:	f04f 0a01 	mov.w	sl, #1
 800d86e:	4604      	mov	r4, r0
 800d870:	460d      	mov	r5, r1
 800d872:	e764      	b.n	800d73e <atan+0xce>
 800d874:	4b49      	ldr	r3, [pc, #292]	; (800d99c <atan+0x32c>)
 800d876:	429e      	cmp	r6, r3
 800d878:	da1d      	bge.n	800d8b6 <atan+0x246>
 800d87a:	ee10 0a10 	vmov	r0, s0
 800d87e:	4b48      	ldr	r3, [pc, #288]	; (800d9a0 <atan+0x330>)
 800d880:	2200      	movs	r2, #0
 800d882:	4629      	mov	r1, r5
 800d884:	f7f2 fd08 	bl	8000298 <__aeabi_dsub>
 800d888:	4b45      	ldr	r3, [pc, #276]	; (800d9a0 <atan+0x330>)
 800d88a:	4606      	mov	r6, r0
 800d88c:	460f      	mov	r7, r1
 800d88e:	2200      	movs	r2, #0
 800d890:	4620      	mov	r0, r4
 800d892:	4629      	mov	r1, r5
 800d894:	f7f2 feb8 	bl	8000608 <__aeabi_dmul>
 800d898:	4b3e      	ldr	r3, [pc, #248]	; (800d994 <atan+0x324>)
 800d89a:	2200      	movs	r2, #0
 800d89c:	f7f2 fcfe 	bl	800029c <__adddf3>
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	460b      	mov	r3, r1
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	4639      	mov	r1, r7
 800d8a8:	f7f2 ffd8 	bl	800085c <__aeabi_ddiv>
 800d8ac:	f04f 0a02 	mov.w	sl, #2
 800d8b0:	4604      	mov	r4, r0
 800d8b2:	460d      	mov	r5, r1
 800d8b4:	e743      	b.n	800d73e <atan+0xce>
 800d8b6:	462b      	mov	r3, r5
 800d8b8:	ee10 2a10 	vmov	r2, s0
 800d8bc:	4939      	ldr	r1, [pc, #228]	; (800d9a4 <atan+0x334>)
 800d8be:	2000      	movs	r0, #0
 800d8c0:	f7f2 ffcc 	bl	800085c <__aeabi_ddiv>
 800d8c4:	f04f 0a03 	mov.w	sl, #3
 800d8c8:	4604      	mov	r4, r0
 800d8ca:	460d      	mov	r5, r1
 800d8cc:	e737      	b.n	800d73e <atan+0xce>
 800d8ce:	4b36      	ldr	r3, [pc, #216]	; (800d9a8 <atan+0x338>)
 800d8d0:	4e36      	ldr	r6, [pc, #216]	; (800d9ac <atan+0x33c>)
 800d8d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d8d6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d8da:	e9da 2300 	ldrd	r2, r3, [sl]
 800d8de:	f7f2 fcdb 	bl	8000298 <__aeabi_dsub>
 800d8e2:	4622      	mov	r2, r4
 800d8e4:	462b      	mov	r3, r5
 800d8e6:	f7f2 fcd7 	bl	8000298 <__aeabi_dsub>
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d8f2:	f7f2 fcd1 	bl	8000298 <__aeabi_dsub>
 800d8f6:	f1bb 0f00 	cmp.w	fp, #0
 800d8fa:	4604      	mov	r4, r0
 800d8fc:	460d      	mov	r5, r1
 800d8fe:	f6bf aed6 	bge.w	800d6ae <atan+0x3e>
 800d902:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d906:	461d      	mov	r5, r3
 800d908:	e6d1      	b.n	800d6ae <atan+0x3e>
 800d90a:	a51d      	add	r5, pc, #116	; (adr r5, 800d980 <atan+0x310>)
 800d90c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d910:	e6cd      	b.n	800d6ae <atan+0x3e>
 800d912:	bf00      	nop
 800d914:	f3af 8000 	nop.w
 800d918:	54442d18 	.word	0x54442d18
 800d91c:	bff921fb 	.word	0xbff921fb
 800d920:	8800759c 	.word	0x8800759c
 800d924:	7e37e43c 	.word	0x7e37e43c
 800d928:	e322da11 	.word	0xe322da11
 800d92c:	3f90ad3a 	.word	0x3f90ad3a
 800d930:	24760deb 	.word	0x24760deb
 800d934:	3fa97b4b 	.word	0x3fa97b4b
 800d938:	a0d03d51 	.word	0xa0d03d51
 800d93c:	3fb10d66 	.word	0x3fb10d66
 800d940:	c54c206e 	.word	0xc54c206e
 800d944:	3fb745cd 	.word	0x3fb745cd
 800d948:	920083ff 	.word	0x920083ff
 800d94c:	3fc24924 	.word	0x3fc24924
 800d950:	5555550d 	.word	0x5555550d
 800d954:	3fd55555 	.word	0x3fd55555
 800d958:	2c6a6c2f 	.word	0x2c6a6c2f
 800d95c:	bfa2b444 	.word	0xbfa2b444
 800d960:	52defd9a 	.word	0x52defd9a
 800d964:	3fadde2d 	.word	0x3fadde2d
 800d968:	af749a6d 	.word	0xaf749a6d
 800d96c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d970:	fe231671 	.word	0xfe231671
 800d974:	3fbc71c6 	.word	0x3fbc71c6
 800d978:	9998ebc4 	.word	0x9998ebc4
 800d97c:	3fc99999 	.word	0x3fc99999
 800d980:	54442d18 	.word	0x54442d18
 800d984:	3ff921fb 	.word	0x3ff921fb
 800d988:	440fffff 	.word	0x440fffff
 800d98c:	7ff00000 	.word	0x7ff00000
 800d990:	3fdbffff 	.word	0x3fdbffff
 800d994:	3ff00000 	.word	0x3ff00000
 800d998:	3ff2ffff 	.word	0x3ff2ffff
 800d99c:	40038000 	.word	0x40038000
 800d9a0:	3ff80000 	.word	0x3ff80000
 800d9a4:	bff00000 	.word	0xbff00000
 800d9a8:	0800e440 	.word	0x0800e440
 800d9ac:	0800e420 	.word	0x0800e420

0800d9b0 <fabs>:
 800d9b0:	ec51 0b10 	vmov	r0, r1, d0
 800d9b4:	ee10 2a10 	vmov	r2, s0
 800d9b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d9bc:	ec43 2b10 	vmov	d0, r2, r3
 800d9c0:	4770      	bx	lr

0800d9c2 <atan2>:
 800d9c2:	f000 b801 	b.w	800d9c8 <__ieee754_atan2>
	...

0800d9c8 <__ieee754_atan2>:
 800d9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9cc:	ec57 6b11 	vmov	r6, r7, d1
 800d9d0:	4273      	negs	r3, r6
 800d9d2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800db58 <__ieee754_atan2+0x190>
 800d9d6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d9da:	4333      	orrs	r3, r6
 800d9dc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d9e0:	4573      	cmp	r3, lr
 800d9e2:	ec51 0b10 	vmov	r0, r1, d0
 800d9e6:	ee11 8a10 	vmov	r8, s2
 800d9ea:	d80a      	bhi.n	800da02 <__ieee754_atan2+0x3a>
 800d9ec:	4244      	negs	r4, r0
 800d9ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d9f2:	4304      	orrs	r4, r0
 800d9f4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d9f8:	4574      	cmp	r4, lr
 800d9fa:	ee10 9a10 	vmov	r9, s0
 800d9fe:	468c      	mov	ip, r1
 800da00:	d907      	bls.n	800da12 <__ieee754_atan2+0x4a>
 800da02:	4632      	mov	r2, r6
 800da04:	463b      	mov	r3, r7
 800da06:	f7f2 fc49 	bl	800029c <__adddf3>
 800da0a:	ec41 0b10 	vmov	d0, r0, r1
 800da0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da12:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800da16:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800da1a:	4334      	orrs	r4, r6
 800da1c:	d103      	bne.n	800da26 <__ieee754_atan2+0x5e>
 800da1e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da22:	f7ff be25 	b.w	800d670 <atan>
 800da26:	17bc      	asrs	r4, r7, #30
 800da28:	f004 0402 	and.w	r4, r4, #2
 800da2c:	ea53 0909 	orrs.w	r9, r3, r9
 800da30:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800da34:	d107      	bne.n	800da46 <__ieee754_atan2+0x7e>
 800da36:	2c02      	cmp	r4, #2
 800da38:	d060      	beq.n	800dafc <__ieee754_atan2+0x134>
 800da3a:	2c03      	cmp	r4, #3
 800da3c:	d1e5      	bne.n	800da0a <__ieee754_atan2+0x42>
 800da3e:	a142      	add	r1, pc, #264	; (adr r1, 800db48 <__ieee754_atan2+0x180>)
 800da40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da44:	e7e1      	b.n	800da0a <__ieee754_atan2+0x42>
 800da46:	ea52 0808 	orrs.w	r8, r2, r8
 800da4a:	d106      	bne.n	800da5a <__ieee754_atan2+0x92>
 800da4c:	f1bc 0f00 	cmp.w	ip, #0
 800da50:	da5f      	bge.n	800db12 <__ieee754_atan2+0x14a>
 800da52:	a13f      	add	r1, pc, #252	; (adr r1, 800db50 <__ieee754_atan2+0x188>)
 800da54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da58:	e7d7      	b.n	800da0a <__ieee754_atan2+0x42>
 800da5a:	4572      	cmp	r2, lr
 800da5c:	d10f      	bne.n	800da7e <__ieee754_atan2+0xb6>
 800da5e:	4293      	cmp	r3, r2
 800da60:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800da64:	d107      	bne.n	800da76 <__ieee754_atan2+0xae>
 800da66:	2c02      	cmp	r4, #2
 800da68:	d84c      	bhi.n	800db04 <__ieee754_atan2+0x13c>
 800da6a:	4b35      	ldr	r3, [pc, #212]	; (800db40 <__ieee754_atan2+0x178>)
 800da6c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800da70:	e9d4 0100 	ldrd	r0, r1, [r4]
 800da74:	e7c9      	b.n	800da0a <__ieee754_atan2+0x42>
 800da76:	2c02      	cmp	r4, #2
 800da78:	d848      	bhi.n	800db0c <__ieee754_atan2+0x144>
 800da7a:	4b32      	ldr	r3, [pc, #200]	; (800db44 <__ieee754_atan2+0x17c>)
 800da7c:	e7f6      	b.n	800da6c <__ieee754_atan2+0xa4>
 800da7e:	4573      	cmp	r3, lr
 800da80:	d0e4      	beq.n	800da4c <__ieee754_atan2+0x84>
 800da82:	1a9b      	subs	r3, r3, r2
 800da84:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800da88:	ea4f 5223 	mov.w	r2, r3, asr #20
 800da8c:	da1e      	bge.n	800dacc <__ieee754_atan2+0x104>
 800da8e:	2f00      	cmp	r7, #0
 800da90:	da01      	bge.n	800da96 <__ieee754_atan2+0xce>
 800da92:	323c      	adds	r2, #60	; 0x3c
 800da94:	db1e      	blt.n	800dad4 <__ieee754_atan2+0x10c>
 800da96:	4632      	mov	r2, r6
 800da98:	463b      	mov	r3, r7
 800da9a:	f7f2 fedf 	bl	800085c <__aeabi_ddiv>
 800da9e:	ec41 0b10 	vmov	d0, r0, r1
 800daa2:	f7ff ff85 	bl	800d9b0 <fabs>
 800daa6:	f7ff fde3 	bl	800d670 <atan>
 800daaa:	ec51 0b10 	vmov	r0, r1, d0
 800daae:	2c01      	cmp	r4, #1
 800dab0:	d013      	beq.n	800dada <__ieee754_atan2+0x112>
 800dab2:	2c02      	cmp	r4, #2
 800dab4:	d015      	beq.n	800dae2 <__ieee754_atan2+0x11a>
 800dab6:	2c00      	cmp	r4, #0
 800dab8:	d0a7      	beq.n	800da0a <__ieee754_atan2+0x42>
 800daba:	a319      	add	r3, pc, #100	; (adr r3, 800db20 <__ieee754_atan2+0x158>)
 800dabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac0:	f7f2 fbea 	bl	8000298 <__aeabi_dsub>
 800dac4:	a318      	add	r3, pc, #96	; (adr r3, 800db28 <__ieee754_atan2+0x160>)
 800dac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daca:	e014      	b.n	800daf6 <__ieee754_atan2+0x12e>
 800dacc:	a118      	add	r1, pc, #96	; (adr r1, 800db30 <__ieee754_atan2+0x168>)
 800dace:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dad2:	e7ec      	b.n	800daae <__ieee754_atan2+0xe6>
 800dad4:	2000      	movs	r0, #0
 800dad6:	2100      	movs	r1, #0
 800dad8:	e7e9      	b.n	800daae <__ieee754_atan2+0xe6>
 800dada:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dade:	4619      	mov	r1, r3
 800dae0:	e793      	b.n	800da0a <__ieee754_atan2+0x42>
 800dae2:	a30f      	add	r3, pc, #60	; (adr r3, 800db20 <__ieee754_atan2+0x158>)
 800dae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae8:	f7f2 fbd6 	bl	8000298 <__aeabi_dsub>
 800daec:	4602      	mov	r2, r0
 800daee:	460b      	mov	r3, r1
 800daf0:	a10d      	add	r1, pc, #52	; (adr r1, 800db28 <__ieee754_atan2+0x160>)
 800daf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800daf6:	f7f2 fbcf 	bl	8000298 <__aeabi_dsub>
 800dafa:	e786      	b.n	800da0a <__ieee754_atan2+0x42>
 800dafc:	a10a      	add	r1, pc, #40	; (adr r1, 800db28 <__ieee754_atan2+0x160>)
 800dafe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db02:	e782      	b.n	800da0a <__ieee754_atan2+0x42>
 800db04:	a10c      	add	r1, pc, #48	; (adr r1, 800db38 <__ieee754_atan2+0x170>)
 800db06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db0a:	e77e      	b.n	800da0a <__ieee754_atan2+0x42>
 800db0c:	2000      	movs	r0, #0
 800db0e:	2100      	movs	r1, #0
 800db10:	e77b      	b.n	800da0a <__ieee754_atan2+0x42>
 800db12:	a107      	add	r1, pc, #28	; (adr r1, 800db30 <__ieee754_atan2+0x168>)
 800db14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db18:	e777      	b.n	800da0a <__ieee754_atan2+0x42>
 800db1a:	bf00      	nop
 800db1c:	f3af 8000 	nop.w
 800db20:	33145c07 	.word	0x33145c07
 800db24:	3ca1a626 	.word	0x3ca1a626
 800db28:	54442d18 	.word	0x54442d18
 800db2c:	400921fb 	.word	0x400921fb
 800db30:	54442d18 	.word	0x54442d18
 800db34:	3ff921fb 	.word	0x3ff921fb
 800db38:	54442d18 	.word	0x54442d18
 800db3c:	3fe921fb 	.word	0x3fe921fb
 800db40:	0800e460 	.word	0x0800e460
 800db44:	0800e478 	.word	0x0800e478
 800db48:	54442d18 	.word	0x54442d18
 800db4c:	c00921fb 	.word	0xc00921fb
 800db50:	54442d18 	.word	0x54442d18
 800db54:	bff921fb 	.word	0xbff921fb
 800db58:	7ff00000 	.word	0x7ff00000

0800db5c <_init>:
 800db5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db5e:	bf00      	nop
 800db60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db62:	bc08      	pop	{r3}
 800db64:	469e      	mov	lr, r3
 800db66:	4770      	bx	lr

0800db68 <_fini>:
 800db68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db6a:	bf00      	nop
 800db6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db6e:	bc08      	pop	{r3}
 800db70:	469e      	mov	lr, r3
 800db72:	4770      	bx	lr
