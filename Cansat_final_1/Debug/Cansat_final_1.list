
Cansat_final_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08007c08  08007c08  00017c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f08  08007f08  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007f08  08007f08  00017f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f10  08007f10  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f10  08007f10  00017f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f14  08007f14  00017f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004168  20000074  08007f8c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041dc  08007f8c  000241dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ea2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ad  00000000  00000000  00038f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  0003c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c0  00000000  00000000  0003d7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dfa  00000000  00000000  0003eba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a87  00000000  00000000  000589a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bed1  00000000  00000000  00071429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010d2fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006054  00000000  00000000  0010d34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007bf0 	.word	0x08007bf0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08007bf0 	.word	0x08007bf0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Init>:
	 * et elle configure ce dernier pour qu'il réalise des mesures en continu.
	 * @param p_hi2c1 Pointeur vers une structure I2C qui contient l'information de configuration pour un i2c particulier
	 * @retval None
	 */
void Init(I2C_HandleTypeDef* p_hi2c1)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af04      	add	r7, sp, #16
 800058a:	6078      	str	r0, [r7, #4]

	uint8_t buff[6];
	buff[0] = 0x80;
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD,  PWR_MGMT_1,  1, &buff[0], 1, 10);
 8000590:	230a      	movs	r3, #10
 8000592:	9302      	str	r3, [sp, #8]
 8000594:	2301      	movs	r3, #1
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2301      	movs	r3, #1
 80005a0:	226b      	movs	r2, #107	; 0x6b
 80005a2:	21d0      	movs	r1, #208	; 0xd0
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f001 fddf 	bl	8002168 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80005aa:	2064      	movs	r0, #100	; 0x64
 80005ac:	f000 feae 	bl	800130c <HAL_Delay>
	buff[0] = 0x1;
 80005b0:	2301      	movs	r3, #1
 80005b2:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD, PWR_MGMT_1,  1, &buff[0], 1, 10);
 80005b4:	230a      	movs	r3, #10
 80005b6:	9302      	str	r3, [sp, #8]
 80005b8:	2301      	movs	r3, #1
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2301      	movs	r3, #1
 80005c4:	226b      	movs	r2, #107	; 0x6b
 80005c6:	21d0      	movs	r1, #208	; 0xd0
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f001 fdcd 	bl	8002168 <HAL_I2C_Mem_Write>


	/********* changement de la sensibilité de l'accélérometre  00=2g 01=4g 10=8g 11=16g *********/
	HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD,  ACCEL_CONFIG,  1, &buff[0], 1, 10);
 80005ce:	230a      	movs	r3, #10
 80005d0:	9302      	str	r3, [sp, #8]
 80005d2:	2301      	movs	r3, #1
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	f107 0308 	add.w	r3, r7, #8
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2301      	movs	r3, #1
 80005de:	221c      	movs	r2, #28
 80005e0:	21d0      	movs	r1, #208	; 0xd0
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f001 feba 	bl	800235c <HAL_I2C_Mem_Read>

	//Pour mettre 00
	buff[0] =(buff[0] & (0b11100111)) ;
 80005e8:	7a3b      	ldrb	r3, [r7, #8]
 80005ea:	f023 0318 	bic.w	r3, r3, #24
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	723b      	strb	r3, [r7, #8]
	//buff[0] =(buff[0] & (0b11110111)) ;
	//buff[0] =(buff[0] | (0b00010000)) ;
	//Pour mettre 11
	//buff[0] =(buff[0] | (0b00011000)) ;

	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD,  ACCEL_CONFIG,  1, &buff[0], 1, 10);
 80005f2:	230a      	movs	r3, #10
 80005f4:	9302      	str	r3, [sp, #8]
 80005f6:	2301      	movs	r3, #1
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	f107 0308 	add.w	r3, r7, #8
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2301      	movs	r3, #1
 8000602:	221c      	movs	r2, #28
 8000604:	21d0      	movs	r1, #208	; 0xd0
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f001 fdae 	bl	8002168 <HAL_I2C_Mem_Write>


	buff[0]=0x2; // Bypass pour activer le magnétomètre
 800060c:	2302      	movs	r3, #2
 800060e:	723b      	strb	r3, [r7, #8]
		  if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,INT_PIN_CFG,1,&buff[0],1,10)!=HAL_OK){
 8000610:	230a      	movs	r3, #10
 8000612:	9302      	str	r3, [sp, #8]
 8000614:	2301      	movs	r3, #1
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2301      	movs	r3, #1
 8000620:	2237      	movs	r2, #55	; 0x37
 8000622:	21d0      	movs	r1, #208	; 0xd0
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f001 fd9f 	bl	8002168 <HAL_I2C_Mem_Write>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d004      	beq.n	800063a <Init+0xb6>
			  printf("probleme activation magnetometre --> fct Init \r\n");
 8000630:	4851      	ldr	r0, [pc, #324]	; (8000778 <Init+0x1f4>)
 8000632:	f006 fc81 	bl	8006f38 <puts>
		  	  Error_Handler();
 8000636:	f000 fb85 	bl	8000d44 <Error_Handler>
		  }
	buff[0]=0x16; // configuration mesure en continu du magnétomètre
 800063a:	2316      	movs	r3, #22
 800063c:	723b      	strb	r3, [r7, #8]
		 	  if(HAL_I2C_Mem_Write(p_hi2c1,MAGNETO_ADD,AK8963_CNTL,1,&buff[0],1,10)!=HAL_OK){
 800063e:	230a      	movs	r3, #10
 8000640:	9302      	str	r3, [sp, #8]
 8000642:	2301      	movs	r3, #1
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2301      	movs	r3, #1
 800064e:	220a      	movs	r2, #10
 8000650:	2118      	movs	r1, #24
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f001 fd88 	bl	8002168 <HAL_I2C_Mem_Write>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d004      	beq.n	8000668 <Init+0xe4>
		 		  printf("probleme configuration mesure magnetometre --> fct Init \r\n");
 800065e:	4847      	ldr	r0, [pc, #284]	; (800077c <Init+0x1f8>)
 8000660:	f006 fc6a 	bl	8006f38 <puts>
		 	  	  Error_Handler();
 8000664:	f000 fb6e 	bl	8000d44 <Error_Handler>

		 	  }

	/********** Réglage de la bande passante **********/

	buff[0]=0x3;
 8000668:	2303      	movs	r3, #3
 800066a:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,CONFIG,1,&buff[0],1,10)!=HAL_OK){
 800066c:	230a      	movs	r3, #10
 800066e:	9302      	str	r3, [sp, #8]
 8000670:	2301      	movs	r3, #1
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2301      	movs	r3, #1
 800067c:	221a      	movs	r2, #26
 800067e:	21d0      	movs	r1, #208	; 0xd0
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f001 fd71 	bl	8002168 <HAL_I2C_Mem_Write>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d004      	beq.n	8000696 <Init+0x112>
		printf("probleme bande passante --> fct Init \r\n");
 800068c:	483c      	ldr	r0, [pc, #240]	; (8000780 <Init+0x1fc>)
 800068e:	f006 fc53 	bl	8006f38 <puts>
		Error_Handler();
 8000692:	f000 fb57 	bl	8000d44 <Error_Handler>
			Error_Handler();
		}
*/

	// bande passante à 250Hz : FCHOICE = 11 => FCHOICE_b = 00, DLPF_CFG = 000
		HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD,  GYRO_CONFIG,  1, &buff[0], 1, 10);
 8000696:	230a      	movs	r3, #10
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	2301      	movs	r3, #1
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2301      	movs	r3, #1
 80006a6:	221b      	movs	r2, #27
 80006a8:	21d0      	movs	r1, #208	; 0xd0
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f001 fe56 	bl	800235c <HAL_I2C_Mem_Read>
		//Pour mettre 00 dans FCHOICE_b
		buff[0] =(buff[0] & (0b11111100)) ;
 80006b0:	7a3b      	ldrb	r3, [r7, #8]
 80006b2:	f023 0303 	bic.w	r3, r3, #3
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	723b      	strb	r3, [r7, #8]
		if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,GYRO_CONFIG,1,&buff[0],1,10)!=HAL_OK){
 80006ba:	230a      	movs	r3, #10
 80006bc:	9302      	str	r3, [sp, #8]
 80006be:	2301      	movs	r3, #1
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2301      	movs	r3, #1
 80006ca:	221b      	movs	r2, #27
 80006cc:	21d0      	movs	r1, #208	; 0xd0
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f001 fd4a 	bl	8002168 <HAL_I2C_Mem_Write>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <Init+0x15a>
				Error_Handler(); }
 80006da:	f000 fb33 	bl	8000d44 <Error_Handler>
		//Pour mettre 000 dans DLPF_CFG
		HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD, CONFIG,  1, &buff[0], 1, 10);
 80006de:	230a      	movs	r3, #10
 80006e0:	9302      	str	r3, [sp, #8]
 80006e2:	2301      	movs	r3, #1
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	2301      	movs	r3, #1
 80006ee:	221a      	movs	r2, #26
 80006f0:	21d0      	movs	r1, #208	; 0xd0
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f001 fe32 	bl	800235c <HAL_I2C_Mem_Read>
		buff[0] =(buff[0] & (0b11111000)) ;
 80006f8:	7a3b      	ldrb	r3, [r7, #8]
 80006fa:	f023 0307 	bic.w	r3, r3, #7
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	723b      	strb	r3, [r7, #8]
		if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,CONFIG,1,&buff[0],1,10)!=HAL_OK){
 8000702:	230a      	movs	r3, #10
 8000704:	9302      	str	r3, [sp, #8]
 8000706:	2301      	movs	r3, #1
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2301      	movs	r3, #1
 8000712:	221a      	movs	r2, #26
 8000714:	21d0      	movs	r1, #208	; 0xd0
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f001 fd26 	bl	8002168 <HAL_I2C_Mem_Write>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <Init+0x1a2>
				Error_Handler();
 8000722:	f000 fb0f 	bl	8000d44 <Error_Handler>
		}
*/

	/*********** Réglage de la fréquence d'échantillonnage **********/

	buff[0]=0xFF;
 8000726:	23ff      	movs	r3, #255	; 0xff
 8000728:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,SMPLRT_DIV,1,&buff[0],1,10)!=HAL_OK){
 800072a:	230a      	movs	r3, #10
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	2301      	movs	r3, #1
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2301      	movs	r3, #1
 800073a:	2219      	movs	r2, #25
 800073c:	21d0      	movs	r1, #208	; 0xd0
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f001 fd12 	bl	8002168 <HAL_I2C_Mem_Write>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d004      	beq.n	8000754 <Init+0x1d0>
		printf("probleme reglage frequence echantillonnage --> Init \r\n");
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <Init+0x200>)
 800074c:	f006 fbf4 	bl	8006f38 <puts>
		Error_Handler();
 8000750:	f000 faf8 	bl	8000d44 <Error_Handler>
	}
	HAL_I2C_Mem_Read(p_hi2c1,MPU_ADD,LP_ACCEL_ODR,1,&buff[0],1,10);
 8000754:	230a      	movs	r3, #10
 8000756:	9302      	str	r3, [sp, #8]
 8000758:	2301      	movs	r3, #1
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2301      	movs	r3, #1
 8000764:	221e      	movs	r2, #30
 8000766:	21d0      	movs	r1, #208	; 0xd0
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f001 fdf7 	bl	800235c <HAL_I2C_Mem_Read>
	// a faire : changer la valeur de DLPF_CFG à 2 par exemple et voir en mode debug si la valeur des 4 derniers bits de LP_ACCEL_ODR est à 4.

}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	08007c08 	.word	0x08007c08
 800077c:	08007c38 	.word	0x08007c38
 8000780:	08007c74 	.word	0x08007c74
 8000784:	08007c9c 	.word	0x08007c9c

08000788 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000798:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	4a06      	ldr	r2, [pc, #24]	; (80007b8 <vApplicationGetIdleTaskMemory+0x30>)
 800079e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80007a6:	bf00      	nop
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	20000090 	.word	0x20000090
 80007b8:	20000144 	.word	0x20000144

080007bc <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007c4:	1d39      	adds	r1, r7, #4
 80007c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ca:	2201      	movs	r2, #1
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <__io_putchar+0x20>)
 80007ce:	f004 fb82 	bl	8004ed6 <HAL_UART_Transmit>
return ch;
 80007d2:	687b      	ldr	r3, [r7, #4]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200003e0 	.word	0x200003e0

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b5b0      	push	{r4, r5, r7, lr}
 80007e2:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 80007e6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e8:	f000 fd4e 	bl	8001288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ec:	f000 f8f8 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f0:	f000 fa12 	bl	8000c18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007f4:	f000 f9e6 	bl	8000bc4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007f8:	f000 f95c 	bl	8000ab4 <MX_I2C1_Init>
  MX_TIM3_Init();
 80007fc:	f000 f988 	bl	8000b10 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

    int x=0;
 8000800:	2300      	movs	r3, #0
 8000802:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    int i=0;
 8000806:	2300      	movs	r3, #0
 8000808:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    int Devices[100]={0};
 800080c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000810:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000814:	4618      	mov	r0, r3
 8000816:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800081a:	461a      	mov	r2, r3
 800081c:	2100      	movs	r1, #0
 800081e:	f006 fa68 	bl	8006cf2 <memset>

   uint8_t pData[100] = {0};
 8000822:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000826:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	3304      	adds	r3, #4
 8000830:	2260      	movs	r2, #96	; 0x60
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f006 fa5c 	bl	8006cf2 <memset>
    * ********                           *********
    */

   // Initialisation du capteur MPU-9250

   Init(&hi2c1);
 800083a:	485f      	ldr	r0, [pc, #380]	; (80009b8 <main+0x1d8>)
 800083c:	f7ff fea2 	bl	8000584 <Init>

   // vérification identité capteur MPU-9250

   pData[0]= WHO_AM_I_MPU9250;
 8000840:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000844:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000848:	2275      	movs	r2, #117	; 0x75
 800084a:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Master_Transmit(&hi2c1, MPU_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 800084c:	f107 021c 	add.w	r2, r7, #28
 8000850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2301      	movs	r3, #1
 8000858:	21d0      	movs	r1, #208	; 0xd0
 800085a:	4857      	ldr	r0, [pc, #348]	; (80009b8 <main+0x1d8>)
 800085c:	f001 f960 	bl	8001b20 <HAL_I2C_Master_Transmit>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d002      	beq.n	800086c <main+0x8c>
    {
  	  printf("il y a une erreur avec I2C Master Transmit \r\n");
 8000866:	4855      	ldr	r0, [pc, #340]	; (80009bc <main+0x1dc>)
 8000868:	f006 fb66 	bl	8006f38 <puts>
    }
    if(HAL_I2C_Master_Receive(&hi2c1, MPU_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 800086c:	f107 021c 	add.w	r2, r7, #28
 8000870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2301      	movs	r3, #1
 8000878:	21d0      	movs	r1, #208	; 0xd0
 800087a:	484f      	ldr	r0, [pc, #316]	; (80009b8 <main+0x1d8>)
 800087c:	f001 fa4e 	bl	8001d1c <HAL_I2C_Master_Receive>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d002      	beq.n	800088c <main+0xac>
    {
  	  printf("il y a une erreur avec I2C Master Receive \r\n");
 8000886:	484e      	ldr	r0, [pc, #312]	; (80009c0 <main+0x1e0>)
 8000888:	f006 fb56 	bl	8006f38 <puts>
    }


    printf(" L'identifiant du capteur est : %x \r\n", pData[0]);
 800088c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000890:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	4619      	mov	r1, r3
 8000898:	484a      	ldr	r0, [pc, #296]	; (80009c4 <main+0x1e4>)
 800089a:	f006 fac7 	bl	8006e2c <iprintf>
    if((pData[0] =! 0x71))
 800089e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80008a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
    {
  	  printf("ce n'est pas le bon capteur \r\n");
    }
    else
  	  printf("MPU-9250 identified \r\n");
 80008aa:	4847      	ldr	r0, [pc, #284]	; (80009c8 <main+0x1e8>)
 80008ac:	f006 fb44 	bl	8006f38 <puts>

    // vérification identité AK8963C (magnétomètre)

    pData[0]= WHO_AM_I_AK8963;
 80008b0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80008b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
      if(HAL_I2C_Master_Transmit(&hi2c1, MAGNETO_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 80008bc:	f107 021c 	add.w	r2, r7, #28
 80008c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	2301      	movs	r3, #1
 80008c8:	2118      	movs	r1, #24
 80008ca:	483b      	ldr	r0, [pc, #236]	; (80009b8 <main+0x1d8>)
 80008cc:	f001 f928 	bl	8001b20 <HAL_I2C_Master_Transmit>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d002      	beq.n	80008dc <main+0xfc>
      {
    	  printf("il y a une erreur avec I2C Master Transmit \r\n");
 80008d6:	4839      	ldr	r0, [pc, #228]	; (80009bc <main+0x1dc>)
 80008d8:	f006 fb2e 	bl	8006f38 <puts>
      }
      if(HAL_I2C_Master_Receive(&hi2c1, MAGNETO_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 80008dc:	f107 021c 	add.w	r2, r7, #28
 80008e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	2301      	movs	r3, #1
 80008e8:	2118      	movs	r1, #24
 80008ea:	4833      	ldr	r0, [pc, #204]	; (80009b8 <main+0x1d8>)
 80008ec:	f001 fa16 	bl	8001d1c <HAL_I2C_Master_Receive>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d002      	beq.n	80008fc <main+0x11c>
      {
    	  printf("il y a une erreur avec I2C Master Receive \r\n");
 80008f6:	4832      	ldr	r0, [pc, #200]	; (80009c0 <main+0x1e0>)
 80008f8:	f006 fb1e 	bl	8006f38 <puts>
      }


      printf(" L'identifiant du magnétomètre est : %x \r\n", pData[0]);
 80008fc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000900:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	4619      	mov	r1, r3
 8000908:	4830      	ldr	r0, [pc, #192]	; (80009cc <main+0x1ec>)
 800090a:	f006 fa8f 	bl	8006e2c <iprintf>
      if((pData[0] =! 0x48))
 800090e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000912:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
      {
    	  printf("ce n'est pas le bon capteur \r\n  ****** \r\n ****** \r\n ****** \r\n");
      }
      else
    	  printf("AK8963C identified \r\n  ****** \r\n ****** \r\n ****** \r\n");
 800091a:	482d      	ldr	r0, [pc, #180]	; (80009d0 <main+0x1f0>)
 800091c:	f006 fb0c 	bl	8006f38 <puts>



  // check les périphériques i2c disponibles

    for (i=0;i<256;i++){
 8000920:	2300      	movs	r3, #0
 8000922:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000926:	e02a      	b.n	800097e <main+0x19e>
         	  if(HAL_I2C_IsDeviceReady(&hi2c1, i, 4, 20)==HAL_OK){
 8000928:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800092c:	b299      	uxth	r1, r3
 800092e:	2314      	movs	r3, #20
 8000930:	2204      	movs	r2, #4
 8000932:	4821      	ldr	r0, [pc, #132]	; (80009b8 <main+0x1d8>)
 8000934:	f001 ff38 	bl	80027a8 <HAL_I2C_IsDeviceReady>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d11a      	bne.n	8000974 <main+0x194>
         		  Devices[x]=i;
 800093e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000942:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000946:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800094a:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 800094e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
         		  printf("%d \r\n",Devices[x]);
 8000952:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000956:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800095a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800095e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000962:	4619      	mov	r1, r3
 8000964:	481b      	ldr	r0, [pc, #108]	; (80009d4 <main+0x1f4>)
 8000966:	f006 fa61 	bl	8006e2c <iprintf>
         		  x=x+1;
 800096a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800096e:	3301      	adds	r3, #1
 8000970:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    for (i=0;i<256;i++){
 8000974:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000978:	3301      	adds	r3, #1
 800097a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800097e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000982:	2bff      	cmp	r3, #255	; 0xff
 8000984:	ddd0      	ble.n	8000928 <main+0x148>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000986:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800098a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <main+0x1f8>)
 8000990:	461c      	mov	r4, r3
 8000992:	4615      	mov	r5, r2
 8000994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000998:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800099c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009a0:	463b      	mov	r3, r7
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f004 fe2a 	bl	80055fe <osThreadCreate>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <main+0x1fc>)
 80009ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009b0:	f004 fe1e 	bl	80055f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <main+0x1d4>
 80009b6:	bf00      	nop
 80009b8:	20000344 	.word	0x20000344
 80009bc:	08007d2c 	.word	0x08007d2c
 80009c0:	08007d5c 	.word	0x08007d5c
 80009c4:	08007d88 	.word	0x08007d88
 80009c8:	08007db0 	.word	0x08007db0
 80009cc:	08007dc8 	.word	0x08007dc8
 80009d0:	08007df8 	.word	0x08007df8
 80009d4:	08007e2c 	.word	0x08007e2c
 80009d8:	08007e34 	.word	0x08007e34
 80009dc:	20000424 	.word	0x20000424

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b094      	sub	sp, #80	; 0x50
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	2230      	movs	r2, #48	; 0x30
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f006 f97f 	bl	8006cf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	4b28      	ldr	r3, [pc, #160]	; (8000aac <SystemClock_Config+0xcc>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4a27      	ldr	r2, [pc, #156]	; (8000aac <SystemClock_Config+0xcc>)
 8000a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
 8000a14:	4b25      	ldr	r3, [pc, #148]	; (8000aac <SystemClock_Config+0xcc>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a21      	ldr	r2, [pc, #132]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a40:	2301      	movs	r3, #1
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a44:	2310      	movs	r3, #16
 8000a46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a50:	2310      	movs	r3, #16
 8000a52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 ff92 	bl	8003990 <HAL_RCC_OscConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a72:	f000 f967 	bl	8000d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a76:	230f      	movs	r3, #15
 8000a78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2102      	movs	r1, #2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f003 f9f4 	bl	8003e80 <HAL_RCC_ClockConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a9e:	f000 f951 	bl	8000d44 <Error_Handler>
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	3750      	adds	r7, #80	; 0x50
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40007000 	.word	0x40007000

08000ab4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000aba:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <MX_I2C1_Init+0x54>)
 8000abc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ac0:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MX_I2C1_Init+0x58>)
 8000ac2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ad2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ad6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000af2:	f000 fed1 	bl	8001898 <HAL_I2C_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000afc:	f000 f922 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000344 	.word	0x20000344
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	000186a0 	.word	0x000186a0

08000b10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b16:	f107 0320 	add.w	r3, r7, #32
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
 8000b2e:	615a      	str	r2, [r3, #20]
 8000b30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b32:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <MX_TIM3_Init+0xac>)
 8000b34:	4a22      	ldr	r2, [pc, #136]	; (8000bc0 <MX_TIM3_Init+0xb0>)
 8000b36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000b38:	4b20      	ldr	r3, [pc, #128]	; (8000bbc <MX_TIM3_Init+0xac>)
 8000b3a:	2253      	movs	r2, #83	; 0x53
 8000b3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <MX_TIM3_Init+0xac>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000b44:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <MX_TIM3_Init+0xac>)
 8000b46:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000b4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <MX_TIM3_Init+0xac>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b52:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <MX_TIM3_Init+0xac>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b58:	4818      	ldr	r0, [pc, #96]	; (8000bbc <MX_TIM3_Init+0xac>)
 8000b5a:	f003 fc9f 	bl	800449c <HAL_TIM_PWM_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000b64:	f000 f8ee 	bl	8000d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b70:	f107 0320 	add.w	r3, r7, #32
 8000b74:	4619      	mov	r1, r3
 8000b76:	4811      	ldr	r0, [pc, #68]	; (8000bbc <MX_TIM3_Init+0xac>)
 8000b78:	f004 f8de 	bl	8004d38 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000b82:	f000 f8df 	bl	8000d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b86:	2360      	movs	r3, #96	; 0x60
 8000b88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4807      	ldr	r0, [pc, #28]	; (8000bbc <MX_TIM3_Init+0xac>)
 8000b9e:	f003 fdd5 	bl	800474c <HAL_TIM_PWM_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000ba8:	f000 f8cc 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bac:	4803      	ldr	r0, [pc, #12]	; (8000bbc <MX_TIM3_Init+0xac>)
 8000bae:	f000 f96d 	bl	8000e8c <HAL_TIM_MspPostInit>

}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000398 	.word	0x20000398
 8000bc0:	40000400 	.word	0x40000400

08000bc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <MX_USART2_UART_Init+0x50>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bfc:	f004 f91e 	bl	8004e3c <HAL_UART_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c06:	f000 f89d 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200003e0 	.word	0x200003e0
 8000c14:	40004400 	.word	0x40004400

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b34      	ldr	r3, [pc, #208]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a33      	ldr	r2, [pc, #204]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b31      	ldr	r3, [pc, #196]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a2c      	ldr	r2, [pc, #176]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a25      	ldr	r2, [pc, #148]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a1e      	ldr	r2, [pc, #120]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2120      	movs	r1, #32
 8000ca2:	4819      	ldr	r0, [pc, #100]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000ca4:	f000 fdde 	bl	8001864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ca8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4813      	ldr	r0, [pc, #76]	; (8000d0c <MX_GPIO_Init+0xf4>)
 8000cc0:	f000 fc4c 	bl	800155c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cc4:	2320      	movs	r3, #32
 8000cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480b      	ldr	r0, [pc, #44]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000cdc:	f000 fc3e 	bl	800155c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4804      	ldr	r0, [pc, #16]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000cf6:	f000 fc31 	bl	800155c <HAL_GPIO_Init>

}
 8000cfa:	bf00      	nop
 8000cfc:	3728      	adds	r7, #40	; 0x28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	40020800 	.word	0x40020800

08000d10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f004 fcbc 	bl	8005696 <osDelay>
 8000d1e:	e7fb      	b.n	8000d18 <StartDefaultTask+0x8>

08000d20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d101      	bne.n	8000d36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d32:	f000 facb 	bl	80012cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40010000 	.word	0x40010000

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x8>
	...

08000d50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_MspInit+0x54>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a11      	ldr	r2, [pc, #68]	; (8000da4 <HAL_MspInit+0x54>)
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <HAL_MspInit+0x54>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_MspInit+0x54>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <HAL_MspInit+0x54>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_MspInit+0x54>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	210f      	movs	r1, #15
 8000d92:	f06f 0001 	mvn.w	r0, #1
 8000d96:	f000 fb95 	bl	80014c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800

08000da8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a1d      	ldr	r2, [pc, #116]	; (8000e3c <HAL_I2C_MspInit+0x94>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d133      	bne.n	8000e32 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <HAL_I2C_MspInit+0x98>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a1b      	ldr	r2, [pc, #108]	; (8000e40 <HAL_I2C_MspInit+0x98>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <HAL_I2C_MspInit+0x98>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000de6:	23c0      	movs	r3, #192	; 0xc0
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dea:	2312      	movs	r3, #18
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000df6:	2304      	movs	r3, #4
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4810      	ldr	r0, [pc, #64]	; (8000e44 <HAL_I2C_MspInit+0x9c>)
 8000e02:	f000 fbab 	bl	800155c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_I2C_MspInit+0x98>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <HAL_I2C_MspInit+0x98>)
 8000e10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_I2C_MspInit+0x98>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2105      	movs	r1, #5
 8000e26:	2020      	movs	r0, #32
 8000e28:	f000 fb4c 	bl	80014c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000e2c:	2020      	movs	r0, #32
 8000e2e:	f000 fb65 	bl	80014fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	; 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40005400 	.word	0x40005400
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020400 	.word	0x40020400

08000e48 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d10d      	bne.n	8000e76 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_TIM_PWM_MspInit+0x40>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <HAL_TIM_PWM_MspInit+0x40>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <HAL_TIM_PWM_MspInit+0x40>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40000400 	.word	0x40000400
 8000e88:	40023800 	.word	0x40023800

08000e8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <HAL_TIM_MspPostInit+0x68>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d11d      	bne.n	8000eea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_TIM_MspPostInit+0x6c>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <HAL_TIM_MspPostInit+0x6c>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_TIM_MspPostInit+0x6c>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eca:	2340      	movs	r3, #64	; 0x40
 8000ecc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <HAL_TIM_MspPostInit+0x70>)
 8000ee6:	f000 fb39 	bl	800155c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	3720      	adds	r7, #32
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40000400 	.word	0x40000400
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020000 	.word	0x40020000

08000f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <HAL_UART_MspInit+0x84>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d12b      	bne.n	8000f7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	6413      	str	r3, [r2, #64]	; 0x40
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <HAL_UART_MspInit+0x8c>)
 8000f76:	f000 faf1 	bl	800155c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40004400 	.word	0x40004400
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000

08000f90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	; 0x30
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <HAL_InitTick+0xd0>)
 8000fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa8:	4a2d      	ldr	r2, [pc, #180]	; (8001060 <HAL_InitTick+0xd0>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <HAL_InitTick+0xd0>)
 8000fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fbc:	f107 020c 	add.w	r2, r7, #12
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f003 f97a 	bl	80042c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fcc:	f003 f964 	bl	8004298 <HAL_RCC_GetPCLK2Freq>
 8000fd0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd4:	4a23      	ldr	r2, [pc, #140]	; (8001064 <HAL_InitTick+0xd4>)
 8000fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fda:	0c9b      	lsrs	r3, r3, #18
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fe0:	4b21      	ldr	r3, [pc, #132]	; (8001068 <HAL_InitTick+0xd8>)
 8000fe2:	4a22      	ldr	r2, [pc, #136]	; (800106c <HAL_InitTick+0xdc>)
 8000fe4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <HAL_InitTick+0xd8>)
 8000fe8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fee:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <HAL_InitTick+0xd8>)
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <HAL_InitTick+0xd8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <HAL_InitTick+0xd8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001000:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_InitTick+0xd8>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001006:	4818      	ldr	r0, [pc, #96]	; (8001068 <HAL_InitTick+0xd8>)
 8001008:	f003 f98c 	bl	8004324 <HAL_TIM_Base_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001012:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001016:	2b00      	cmp	r3, #0
 8001018:	d11b      	bne.n	8001052 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800101a:	4813      	ldr	r0, [pc, #76]	; (8001068 <HAL_InitTick+0xd8>)
 800101c:	f003 f9dc 	bl	80043d8 <HAL_TIM_Base_Start_IT>
 8001020:	4603      	mov	r3, r0
 8001022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800102a:	2b00      	cmp	r3, #0
 800102c:	d111      	bne.n	8001052 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800102e:	2019      	movs	r0, #25
 8001030:	f000 fa64 	bl	80014fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b0f      	cmp	r3, #15
 8001038:	d808      	bhi.n	800104c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800103a:	2200      	movs	r2, #0
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	2019      	movs	r0, #25
 8001040:	f000 fa40 	bl	80014c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001044:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <HAL_InitTick+0xe0>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	e002      	b.n	8001052 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001052:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001056:	4618      	mov	r0, r3
 8001058:	3730      	adds	r7, #48	; 0x30
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	431bde83 	.word	0x431bde83
 8001068:	20000428 	.word	0x20000428
 800106c:	40010000 	.word	0x40010000
 8001070:	20000004 	.word	0x20000004

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <NMI_Handler+0x4>

0800107a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <HardFault_Handler+0x4>

08001080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <MemManage_Handler+0x4>

08001086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <BusFault_Handler+0x4>

0800108c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <UsageFault_Handler+0x4>

08001092 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010a6:	f003 fa48 	bl	800453a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000428 	.word	0x20000428

080010b4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <I2C1_ER_IRQHandler+0x10>)
 80010ba:	f001 fca3 	bl	8002a04 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000344 	.word	0x20000344

080010c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	e00a      	b.n	80010f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010da:	f3af 8000 	nop.w
 80010de:	4601      	mov	r1, r0
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	60ba      	str	r2, [r7, #8]
 80010e6:	b2ca      	uxtb	r2, r1
 80010e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3301      	adds	r3, #1
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	dbf0      	blt.n	80010da <_read+0x12>
	}

return len;
 80010f8:	687b      	ldr	r3, [r7, #4]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	e009      	b.n	8001128 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	60ba      	str	r2, [r7, #8]
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fb4d 	bl	80007bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	dbf1      	blt.n	8001114 <_write+0x12>
	}
	return len;
 8001130:	687b      	ldr	r3, [r7, #4]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <_close>:

int _close(int file)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
	return -1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001162:	605a      	str	r2, [r3, #4]
	return 0;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <_isatty>:

int _isatty(int file)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
	return 1;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
	return 0;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ac:	4a14      	ldr	r2, [pc, #80]	; (8001200 <_sbrk+0x5c>)
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <_sbrk+0x60>)
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <_sbrk+0x64>)
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <_sbrk+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d207      	bcs.n	80011e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d4:	f005 fc6a 	bl	8006aac <__errno>
 80011d8:	4603      	mov	r3, r0
 80011da:	220c      	movs	r2, #12
 80011dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011e2:	e009      	b.n	80011f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <_sbrk+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <_sbrk+0x64>)
 80011f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f6:	68fb      	ldr	r3, [r7, #12]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20020000 	.word	0x20020000
 8001204:	00000400 	.word	0x00000400
 8001208:	20000470 	.word	0x20000470
 800120c:	200041e0 	.word	0x200041e0

08001210 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <SystemInit+0x20>)
 8001216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <SystemInit+0x20>)
 800121c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001220:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <Reset_Handler>:
 8001234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800126c <LoopFillZerobss+0x12>
 8001238:	480d      	ldr	r0, [pc, #52]	; (8001270 <LoopFillZerobss+0x16>)
 800123a:	490e      	ldr	r1, [pc, #56]	; (8001274 <LoopFillZerobss+0x1a>)
 800123c:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <LoopFillZerobss+0x1e>)
 800123e:	2300      	movs	r3, #0
 8001240:	e002      	b.n	8001248 <LoopCopyDataInit>

08001242 <CopyDataInit>:
 8001242:	58d4      	ldr	r4, [r2, r3]
 8001244:	50c4      	str	r4, [r0, r3]
 8001246:	3304      	adds	r3, #4

08001248 <LoopCopyDataInit>:
 8001248:	18c4      	adds	r4, r0, r3
 800124a:	428c      	cmp	r4, r1
 800124c:	d3f9      	bcc.n	8001242 <CopyDataInit>
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <LoopFillZerobss+0x22>)
 8001250:	4c0b      	ldr	r4, [pc, #44]	; (8001280 <LoopFillZerobss+0x26>)
 8001252:	2300      	movs	r3, #0
 8001254:	e001      	b.n	800125a <LoopFillZerobss>

08001256 <FillZerobss>:
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	3204      	adds	r2, #4

0800125a <LoopFillZerobss>:
 800125a:	42a2      	cmp	r2, r4
 800125c:	d3fb      	bcc.n	8001256 <FillZerobss>
 800125e:	f7ff ffd7 	bl	8001210 <SystemInit>
 8001262:	f005 fd1f 	bl	8006ca4 <__libc_init_array>
 8001266:	f7ff fabb 	bl	80007e0 <main>
 800126a:	4770      	bx	lr
 800126c:	20020000 	.word	0x20020000
 8001270:	20000000 	.word	0x20000000
 8001274:	20000074 	.word	0x20000074
 8001278:	08007f18 	.word	0x08007f18
 800127c:	20000074 	.word	0x20000074
 8001280:	200041dc 	.word	0x200041dc

08001284 <ADC_IRQHandler>:
 8001284:	e7fe      	b.n	8001284 <ADC_IRQHandler>
	...

08001288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800128c:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <HAL_Init+0x40>)
 8001292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001296:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_Init+0x40>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <HAL_Init+0x40>)
 800129e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <HAL_Init+0x40>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <HAL_Init+0x40>)
 80012aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f000 f8fc 	bl	80014ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b6:	200f      	movs	r0, #15
 80012b8:	f7ff fe6a 	bl	8000f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012bc:	f7ff fd48 	bl	8000d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023c00 	.word	0x40023c00

080012cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000008 	.word	0x20000008
 80012f0:	20000474 	.word	0x20000474

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000474 	.word	0x20000474

0800130c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff ffee 	bl	80012f4 <HAL_GetTick>
 8001318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001324:	d005      	beq.n	8001332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_Delay+0x44>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001332:	bf00      	nop
 8001334:	f7ff ffde 	bl	80012f4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	429a      	cmp	r2, r3
 8001342:	d8f7      	bhi.n	8001334 <HAL_Delay+0x28>
  {
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000008 	.word	0x20000008

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800137c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4907      	ldr	r1, [pc, #28]	; (80013f0 <__NVIC_EnableIRQ+0x38>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db0a      	blt.n	800141e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	490c      	ldr	r1, [pc, #48]	; (8001440 <__NVIC_SetPriority+0x4c>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	440b      	add	r3, r1
 8001418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800141c:	e00a      	b.n	8001434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4908      	ldr	r1, [pc, #32]	; (8001444 <__NVIC_SetPriority+0x50>)
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	3b04      	subs	r3, #4
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	440b      	add	r3, r1
 8001432:	761a      	strb	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf28      	it	cs
 8001466:	2304      	movcs	r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3304      	adds	r3, #4
 800146e:	2b06      	cmp	r3, #6
 8001470:	d902      	bls.n	8001478 <NVIC_EncodePriority+0x30>
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3b03      	subs	r3, #3
 8001476:	e000      	b.n	800147a <NVIC_EncodePriority+0x32>
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001490:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43d9      	mvns	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	4313      	orrs	r3, r2
         );
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3724      	adds	r7, #36	; 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ff4c 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d6:	f7ff ff61 	bl	800139c <__NVIC_GetPriorityGrouping>
 80014da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	68b9      	ldr	r1, [r7, #8]
 80014e0:	6978      	ldr	r0, [r7, #20]
 80014e2:	f7ff ffb1 	bl	8001448 <NVIC_EncodePriority>
 80014e6:	4602      	mov	r2, r0
 80014e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff80 	bl	80013f4 <__NVIC_SetPriority>
}
 80014f4:	bf00      	nop
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ff54 	bl	80013b8 <__NVIC_EnableIRQ>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d004      	beq.n	8001536 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2280      	movs	r2, #128	; 0x80
 8001530:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e00c      	b.n	8001550 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2205      	movs	r2, #5
 800153a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0201 	bic.w	r2, r2, #1
 800154c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	e159      	b.n	800182c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001578:	2201      	movs	r2, #1
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	429a      	cmp	r2, r3
 8001592:	f040 8148 	bne.w	8001826 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d005      	beq.n	80015ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d130      	bne.n	8001610 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	2203      	movs	r2, #3
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e4:	2201      	movs	r2, #1
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	f003 0201 	and.w	r2, r3, #1
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	2b03      	cmp	r3, #3
 800161a:	d017      	beq.n	800164c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d123      	bne.n	80016a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	08da      	lsrs	r2, r3, #3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3208      	adds	r2, #8
 8001660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001664:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	220f      	movs	r2, #15
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	691a      	ldr	r2, [r3, #16]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	08da      	lsrs	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3208      	adds	r2, #8
 800169a:	69b9      	ldr	r1, [r7, #24]
 800169c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	2203      	movs	r2, #3
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0203 	and.w	r2, r3, #3
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 80a2 	beq.w	8001826 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b57      	ldr	r3, [pc, #348]	; (8001844 <HAL_GPIO_Init+0x2e8>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	4a56      	ldr	r2, [pc, #344]	; (8001844 <HAL_GPIO_Init+0x2e8>)
 80016ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f0:	6453      	str	r3, [r2, #68]	; 0x44
 80016f2:	4b54      	ldr	r3, [pc, #336]	; (8001844 <HAL_GPIO_Init+0x2e8>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016fe:	4a52      	ldr	r2, [pc, #328]	; (8001848 <HAL_GPIO_Init+0x2ec>)
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	089b      	lsrs	r3, r3, #2
 8001704:	3302      	adds	r3, #2
 8001706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	220f      	movs	r2, #15
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a49      	ldr	r2, [pc, #292]	; (800184c <HAL_GPIO_Init+0x2f0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d019      	beq.n	800175e <HAL_GPIO_Init+0x202>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a48      	ldr	r2, [pc, #288]	; (8001850 <HAL_GPIO_Init+0x2f4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d013      	beq.n	800175a <HAL_GPIO_Init+0x1fe>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a47      	ldr	r2, [pc, #284]	; (8001854 <HAL_GPIO_Init+0x2f8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d00d      	beq.n	8001756 <HAL_GPIO_Init+0x1fa>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a46      	ldr	r2, [pc, #280]	; (8001858 <HAL_GPIO_Init+0x2fc>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d007      	beq.n	8001752 <HAL_GPIO_Init+0x1f6>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a45      	ldr	r2, [pc, #276]	; (800185c <HAL_GPIO_Init+0x300>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d101      	bne.n	800174e <HAL_GPIO_Init+0x1f2>
 800174a:	2304      	movs	r3, #4
 800174c:	e008      	b.n	8001760 <HAL_GPIO_Init+0x204>
 800174e:	2307      	movs	r3, #7
 8001750:	e006      	b.n	8001760 <HAL_GPIO_Init+0x204>
 8001752:	2303      	movs	r3, #3
 8001754:	e004      	b.n	8001760 <HAL_GPIO_Init+0x204>
 8001756:	2302      	movs	r3, #2
 8001758:	e002      	b.n	8001760 <HAL_GPIO_Init+0x204>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <HAL_GPIO_Init+0x204>
 800175e:	2300      	movs	r3, #0
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	f002 0203 	and.w	r2, r2, #3
 8001766:	0092      	lsls	r2, r2, #2
 8001768:	4093      	lsls	r3, r2
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001770:	4935      	ldr	r1, [pc, #212]	; (8001848 <HAL_GPIO_Init+0x2ec>)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	089b      	lsrs	r3, r3, #2
 8001776:	3302      	adds	r3, #2
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800177e:	4b38      	ldr	r3, [pc, #224]	; (8001860 <HAL_GPIO_Init+0x304>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017a2:	4a2f      	ldr	r2, [pc, #188]	; (8001860 <HAL_GPIO_Init+0x304>)
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017a8:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <HAL_GPIO_Init+0x304>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017cc:	4a24      	ldr	r2, [pc, #144]	; (8001860 <HAL_GPIO_Init+0x304>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017d2:	4b23      	ldr	r3, [pc, #140]	; (8001860 <HAL_GPIO_Init+0x304>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017f6:	4a1a      	ldr	r2, [pc, #104]	; (8001860 <HAL_GPIO_Init+0x304>)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_GPIO_Init+0x304>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001820:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <HAL_GPIO_Init+0x304>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3301      	adds	r3, #1
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	2b0f      	cmp	r3, #15
 8001830:	f67f aea2 	bls.w	8001578 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	3724      	adds	r7, #36	; 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	40013800 	.word	0x40013800
 800184c:	40020000 	.word	0x40020000
 8001850:	40020400 	.word	0x40020400
 8001854:	40020800 	.word	0x40020800
 8001858:	40020c00 	.word	0x40020c00
 800185c:	40021000 	.word	0x40021000
 8001860:	40013c00 	.word	0x40013c00

08001864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
 8001870:	4613      	mov	r3, r2
 8001872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001874:	787b      	ldrb	r3, [r7, #1]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800187a:	887a      	ldrh	r2, [r7, #2]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001880:	e003      	b.n	800188a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001882:	887b      	ldrh	r3, [r7, #2]
 8001884:	041a      	lsls	r2, r3, #16
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	619a      	str	r2, [r3, #24]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e12b      	b.n	8001b02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d106      	bne.n	80018c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff fa72 	bl	8000da8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2224      	movs	r2, #36	; 0x24
 80018c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018fc:	f002 fcb8 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 8001900:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4a81      	ldr	r2, [pc, #516]	; (8001b0c <HAL_I2C_Init+0x274>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d807      	bhi.n	800191c <HAL_I2C_Init+0x84>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4a80      	ldr	r2, [pc, #512]	; (8001b10 <HAL_I2C_Init+0x278>)
 8001910:	4293      	cmp	r3, r2
 8001912:	bf94      	ite	ls
 8001914:	2301      	movls	r3, #1
 8001916:	2300      	movhi	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	e006      	b.n	800192a <HAL_I2C_Init+0x92>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4a7d      	ldr	r2, [pc, #500]	; (8001b14 <HAL_I2C_Init+0x27c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	bf94      	ite	ls
 8001924:	2301      	movls	r3, #1
 8001926:	2300      	movhi	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0e7      	b.n	8001b02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4a78      	ldr	r2, [pc, #480]	; (8001b18 <HAL_I2C_Init+0x280>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	0c9b      	lsrs	r3, r3, #18
 800193c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	430a      	orrs	r2, r1
 8001950:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4a6a      	ldr	r2, [pc, #424]	; (8001b0c <HAL_I2C_Init+0x274>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d802      	bhi.n	800196c <HAL_I2C_Init+0xd4>
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	3301      	adds	r3, #1
 800196a:	e009      	b.n	8001980 <HAL_I2C_Init+0xe8>
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001972:	fb02 f303 	mul.w	r3, r2, r3
 8001976:	4a69      	ldr	r2, [pc, #420]	; (8001b1c <HAL_I2C_Init+0x284>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	099b      	lsrs	r3, r3, #6
 800197e:	3301      	adds	r3, #1
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	430b      	orrs	r3, r1
 8001986:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001992:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	495c      	ldr	r1, [pc, #368]	; (8001b0c <HAL_I2C_Init+0x274>)
 800199c:	428b      	cmp	r3, r1
 800199e:	d819      	bhi.n	80019d4 <HAL_I2C_Init+0x13c>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1e59      	subs	r1, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ae:	1c59      	adds	r1, r3, #1
 80019b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019b4:	400b      	ands	r3, r1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00a      	beq.n	80019d0 <HAL_I2C_Init+0x138>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1e59      	subs	r1, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80019c8:	3301      	adds	r3, #1
 80019ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ce:	e051      	b.n	8001a74 <HAL_I2C_Init+0x1dc>
 80019d0:	2304      	movs	r3, #4
 80019d2:	e04f      	b.n	8001a74 <HAL_I2C_Init+0x1dc>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d111      	bne.n	8001a00 <HAL_I2C_Init+0x168>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1e58      	subs	r0, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6859      	ldr	r1, [r3, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	440b      	add	r3, r1
 80019ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf0c      	ite	eq
 80019f8:	2301      	moveq	r3, #1
 80019fa:	2300      	movne	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	e012      	b.n	8001a26 <HAL_I2C_Init+0x18e>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1e58      	subs	r0, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6859      	ldr	r1, [r3, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	0099      	lsls	r1, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a16:	3301      	adds	r3, #1
 8001a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	bf0c      	ite	eq
 8001a20:	2301      	moveq	r3, #1
 8001a22:	2300      	movne	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_I2C_Init+0x196>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e022      	b.n	8001a74 <HAL_I2C_Init+0x1dc>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10e      	bne.n	8001a54 <HAL_I2C_Init+0x1bc>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1e58      	subs	r0, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6859      	ldr	r1, [r3, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	440b      	add	r3, r1
 8001a44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a48:	3301      	adds	r3, #1
 8001a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a52:	e00f      	b.n	8001a74 <HAL_I2C_Init+0x1dc>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1e58      	subs	r0, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6859      	ldr	r1, [r3, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	0099      	lsls	r1, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	6809      	ldr	r1, [r1, #0]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69da      	ldr	r2, [r3, #28]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001aa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6911      	ldr	r1, [r2, #16]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68d2      	ldr	r2, [r2, #12]
 8001aae:	4311      	orrs	r1, r2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	430b      	orrs	r3, r1
 8001ab6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2220      	movs	r2, #32
 8001aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	000186a0 	.word	0x000186a0
 8001b10:	001e847f 	.word	0x001e847f
 8001b14:	003d08ff 	.word	0x003d08ff
 8001b18:	431bde83 	.word	0x431bde83
 8001b1c:	10624dd3 	.word	0x10624dd3

08001b20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	817b      	strh	r3, [r7, #10]
 8001b30:	4613      	mov	r3, r2
 8001b32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b34:	f7ff fbde 	bl	80012f4 <HAL_GetTick>
 8001b38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b20      	cmp	r3, #32
 8001b44:	f040 80e0 	bne.w	8001d08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2319      	movs	r3, #25
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4970      	ldr	r1, [pc, #448]	; (8001d14 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f001 fd3e 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e0d3      	b.n	8001d0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <HAL_I2C_Master_Transmit+0x50>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e0cc      	b.n	8001d0a <HAL_I2C_Master_Transmit+0x1ea>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d007      	beq.n	8001b96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0201 	orr.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ba4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2221      	movs	r2, #33	; 0x21
 8001baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	893a      	ldrh	r2, [r7, #8]
 8001bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4a50      	ldr	r2, [pc, #320]	; (8001d18 <HAL_I2C_Master_Transmit+0x1f8>)
 8001bd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bd8:	8979      	ldrh	r1, [r7, #10]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	6a3a      	ldr	r2, [r7, #32]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f001 f982 	bl	8002ee8 <I2C_MasterRequestWrite>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e08d      	b.n	8001d0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c04:	e066      	b.n	8001cd4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	6a39      	ldr	r1, [r7, #32]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f001 fdb8 	bl	8003780 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00d      	beq.n	8001c32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d107      	bne.n	8001c2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e06b      	b.n	8001d0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	781a      	ldrb	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d11b      	bne.n	8001ca8 <HAL_I2C_Master_Transmit+0x188>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d017      	beq.n	8001ca8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	781a      	ldrb	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	6a39      	ldr	r1, [r7, #32]
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f001 fda8 	bl	8003802 <I2C_WaitOnBTFFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d107      	bne.n	8001cd0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e01a      	b.n	8001d0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d194      	bne.n	8001c06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e000      	b.n	8001d0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d08:	2302      	movs	r3, #2
  }
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	00100002 	.word	0x00100002
 8001d18:	ffff0000 	.word	0xffff0000

08001d1c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08c      	sub	sp, #48	; 0x30
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	461a      	mov	r2, r3
 8001d28:	460b      	mov	r3, r1
 8001d2a:	817b      	strh	r3, [r7, #10]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d30:	f7ff fae0 	bl	80012f4 <HAL_GetTick>
 8001d34:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	f040 820b 	bne.w	800215a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2319      	movs	r3, #25
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	497c      	ldr	r1, [pc, #496]	; (8001f40 <HAL_I2C_Master_Receive+0x224>)
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f001 fc40 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e1fe      	b.n	800215c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_I2C_Master_Receive+0x50>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e1f7      	b.n	800215c <HAL_I2C_Master_Receive+0x440>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d007      	beq.n	8001d92 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001da0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2222      	movs	r2, #34	; 0x22
 8001da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2210      	movs	r2, #16
 8001dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	893a      	ldrh	r2, [r7, #8]
 8001dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4a5c      	ldr	r2, [pc, #368]	; (8001f44 <HAL_I2C_Master_Receive+0x228>)
 8001dd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001dd4:	8979      	ldrh	r1, [r7, #10]
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f001 f906 	bl	8002fec <I2C_MasterRequestRead>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e1b8      	b.n	800215c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d113      	bne.n	8001e1a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	623b      	str	r3, [r7, #32]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	623b      	str	r3, [r7, #32]
 8001e06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	e18c      	b.n	8002134 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d11b      	bne.n	8001e5a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	e16c      	b.n	8002134 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d11b      	bne.n	8001e9a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e70:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	61bb      	str	r3, [r7, #24]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	e14c      	b.n	8002134 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ea8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ec0:	e138      	b.n	8002134 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	f200 80f1 	bhi.w	80020ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d123      	bne.n	8001f1c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f001 fcd3 	bl	8003884 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e139      	b.n	800215c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691a      	ldr	r2, [r3, #16]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f1a:	e10b      	b.n	8002134 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d14e      	bne.n	8001fc2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	4906      	ldr	r1, [pc, #24]	; (8001f48 <HAL_I2C_Master_Receive+0x22c>)
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f001 fb50 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d008      	beq.n	8001f4c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e10e      	b.n	800215c <HAL_I2C_Master_Receive+0x440>
 8001f3e:	bf00      	nop
 8001f40:	00100002 	.word	0x00100002
 8001f44:	ffff0000 	.word	0xffff0000
 8001f48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fc0:	e0b8      	b.n	8002134 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc8:	2200      	movs	r2, #0
 8001fca:	4966      	ldr	r1, [pc, #408]	; (8002164 <HAL_I2C_Master_Receive+0x448>)
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f001 fb01 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0bf      	b.n	800215c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002014:	b29b      	uxth	r3, r3
 8002016:	3b01      	subs	r3, #1
 8002018:	b29a      	uxth	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002024:	2200      	movs	r2, #0
 8002026:	494f      	ldr	r1, [pc, #316]	; (8002164 <HAL_I2C_Master_Receive+0x448>)
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f001 fad3 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e091      	b.n	800215c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691a      	ldr	r2, [r3, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002070:	b29b      	uxth	r3, r3
 8002072:	3b01      	subs	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002096:	3b01      	subs	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020ac:	e042      	b.n	8002134 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f001 fbe6 	bl	8003884 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e04c      	b.n	800215c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d118      	bne.n	8002134 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211e:	3b01      	subs	r3, #1
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212a:	b29b      	uxth	r3, r3
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002138:	2b00      	cmp	r3, #0
 800213a:	f47f aec2 	bne.w	8001ec2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2220      	movs	r2, #32
 8002142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	e000      	b.n	800215c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800215a:	2302      	movs	r3, #2
  }
}
 800215c:	4618      	mov	r0, r3
 800215e:	3728      	adds	r7, #40	; 0x28
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	00010004 	.word	0x00010004

08002168 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	4608      	mov	r0, r1
 8002172:	4611      	mov	r1, r2
 8002174:	461a      	mov	r2, r3
 8002176:	4603      	mov	r3, r0
 8002178:	817b      	strh	r3, [r7, #10]
 800217a:	460b      	mov	r3, r1
 800217c:	813b      	strh	r3, [r7, #8]
 800217e:	4613      	mov	r3, r2
 8002180:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002182:	f7ff f8b7 	bl	80012f4 <HAL_GetTick>
 8002186:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b20      	cmp	r3, #32
 8002192:	f040 80d9 	bne.w	8002348 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2319      	movs	r3, #25
 800219c:	2201      	movs	r2, #1
 800219e:	496d      	ldr	r1, [pc, #436]	; (8002354 <HAL_I2C_Mem_Write+0x1ec>)
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f001 fa17 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
 80021ae:	e0cc      	b.n	800234a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_I2C_Mem_Write+0x56>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e0c5      	b.n	800234a <HAL_I2C_Mem_Write+0x1e2>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d007      	beq.n	80021e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2221      	movs	r2, #33	; 0x21
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2240      	movs	r2, #64	; 0x40
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a3a      	ldr	r2, [r7, #32]
 800220e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002214:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4a4d      	ldr	r2, [pc, #308]	; (8002358 <HAL_I2C_Mem_Write+0x1f0>)
 8002224:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002226:	88f8      	ldrh	r0, [r7, #6]
 8002228:	893a      	ldrh	r2, [r7, #8]
 800222a:	8979      	ldrh	r1, [r7, #10]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	4603      	mov	r3, r0
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 ffa6 	bl	8003188 <I2C_RequestMemoryWrite>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d052      	beq.n	80022e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e081      	b.n	800234a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f001 fa98 	bl	8003780 <I2C_WaitOnTXEFlagUntilTimeout>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00d      	beq.n	8002272 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	2b04      	cmp	r3, #4
 800225c:	d107      	bne.n	800226e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e06b      	b.n	800234a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	781a      	ldrb	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002298:	b29b      	uxth	r3, r3
 800229a:	3b01      	subs	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d11b      	bne.n	80022e8 <HAL_I2C_Mem_Write+0x180>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d017      	beq.n	80022e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	781a      	ldrb	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022de:	b29b      	uxth	r3, r3
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1aa      	bne.n	8002246 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f001 fa84 	bl	8003802 <I2C_WaitOnBTFFlagUntilTimeout>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00d      	beq.n	800231c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	2b04      	cmp	r3, #4
 8002306:	d107      	bne.n	8002318 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002316:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e016      	b.n	800234a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	e000      	b.n	800234a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002348:	2302      	movs	r3, #2
  }
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	00100002 	.word	0x00100002
 8002358:	ffff0000 	.word	0xffff0000

0800235c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08c      	sub	sp, #48	; 0x30
 8002360:	af02      	add	r7, sp, #8
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	4608      	mov	r0, r1
 8002366:	4611      	mov	r1, r2
 8002368:	461a      	mov	r2, r3
 800236a:	4603      	mov	r3, r0
 800236c:	817b      	strh	r3, [r7, #10]
 800236e:	460b      	mov	r3, r1
 8002370:	813b      	strh	r3, [r7, #8]
 8002372:	4613      	mov	r3, r2
 8002374:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002376:	f7fe ffbd 	bl	80012f4 <HAL_GetTick>
 800237a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b20      	cmp	r3, #32
 8002386:	f040 8208 	bne.w	800279a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	2319      	movs	r3, #25
 8002390:	2201      	movs	r2, #1
 8002392:	497b      	ldr	r1, [pc, #492]	; (8002580 <HAL_I2C_Mem_Read+0x224>)
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f001 f91d 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80023a0:	2302      	movs	r3, #2
 80023a2:	e1fb      	b.n	800279c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_I2C_Mem_Read+0x56>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e1f4      	b.n	800279c <HAL_I2C_Mem_Read+0x440>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d007      	beq.n	80023d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2222      	movs	r2, #34	; 0x22
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2240      	movs	r2, #64	; 0x40
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002402:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002408:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4a5b      	ldr	r2, [pc, #364]	; (8002584 <HAL_I2C_Mem_Read+0x228>)
 8002418:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800241a:	88f8      	ldrh	r0, [r7, #6]
 800241c:	893a      	ldrh	r2, [r7, #8]
 800241e:	8979      	ldrh	r1, [r7, #10]
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	4603      	mov	r3, r0
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 ff42 	bl	80032b4 <I2C_RequestMemoryRead>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e1b0      	b.n	800279c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	2b00      	cmp	r3, #0
 8002440:	d113      	bne.n	800246a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002442:	2300      	movs	r3, #0
 8002444:	623b      	str	r3, [r7, #32]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	623b      	str	r3, [r7, #32]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	623b      	str	r3, [r7, #32]
 8002456:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e184      	b.n	8002774 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246e:	2b01      	cmp	r3, #1
 8002470:	d11b      	bne.n	80024aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002480:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	61fb      	str	r3, [r7, #28]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	e164      	b.n	8002774 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d11b      	bne.n	80024ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	61bb      	str	r3, [r7, #24]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	e144      	b.n	8002774 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002500:	e138      	b.n	8002774 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002506:	2b03      	cmp	r3, #3
 8002508:	f200 80f1 	bhi.w	80026ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002510:	2b01      	cmp	r3, #1
 8002512:	d123      	bne.n	800255c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002516:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f001 f9b3 	bl	8003884 <I2C_WaitOnRXNEFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e139      	b.n	800279c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	855a      	strh	r2, [r3, #42]	; 0x2a
 800255a:	e10b      	b.n	8002774 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002560:	2b02      	cmp	r3, #2
 8002562:	d14e      	bne.n	8002602 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256a:	2200      	movs	r2, #0
 800256c:	4906      	ldr	r1, [pc, #24]	; (8002588 <HAL_I2C_Mem_Read+0x22c>)
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f001 f830 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d008      	beq.n	800258c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e10e      	b.n	800279c <HAL_I2C_Mem_Read+0x440>
 800257e:	bf00      	nop
 8002580:	00100002 	.word	0x00100002
 8002584:	ffff0000 	.word	0xffff0000
 8002588:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691a      	ldr	r2, [r3, #16]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002600:	e0b8      	b.n	8002774 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002608:	2200      	movs	r2, #0
 800260a:	4966      	ldr	r1, [pc, #408]	; (80027a4 <HAL_I2C_Mem_Read+0x448>)
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 ffe1 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0bf      	b.n	800279c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800262a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002664:	2200      	movs	r2, #0
 8002666:	494f      	ldr	r1, [pc, #316]	; (80027a4 <HAL_I2C_Mem_Read+0x448>)
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 ffb3 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e091      	b.n	800279c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026ec:	e042      	b.n	8002774 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f001 f8c6 	bl	8003884 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e04c      	b.n	800279c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b04      	cmp	r3, #4
 8002740:	d118      	bne.n	8002774 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276a:	b29b      	uxth	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002778:	2b00      	cmp	r3, #0
 800277a:	f47f aec2 	bne.w	8002502 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2220      	movs	r2, #32
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e000      	b.n	800279c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800279a:	2302      	movs	r3, #2
  }
}
 800279c:	4618      	mov	r0, r3
 800279e:	3728      	adds	r7, #40	; 0x28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	00010004 	.word	0x00010004

080027a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08a      	sub	sp, #40	; 0x28
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	460b      	mov	r3, r1
 80027b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80027b8:	f7fe fd9c 	bl	80012f4 <HAL_GetTick>
 80027bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	f040 8111 	bne.w	80029f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2319      	movs	r3, #25
 80027d6:	2201      	movs	r2, #1
 80027d8:	4988      	ldr	r1, [pc, #544]	; (80029fc <HAL_I2C_IsDeviceReady+0x254>)
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 fefa 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80027e6:	2302      	movs	r3, #2
 80027e8:	e104      	b.n	80029f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_I2C_IsDeviceReady+0x50>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e0fd      	b.n	80029f4 <HAL_I2C_IsDeviceReady+0x24c>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b01      	cmp	r3, #1
 800280c:	d007      	beq.n	800281e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f042 0201 	orr.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800282c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2224      	movs	r2, #36	; 0x24
 8002832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4a70      	ldr	r2, [pc, #448]	; (8002a00 <HAL_I2C_IsDeviceReady+0x258>)
 8002840:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002850:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2200      	movs	r2, #0
 800285a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 feb8 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00d      	beq.n	8002886 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002878:	d103      	bne.n	8002882 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002880:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e0b6      	b.n	80029f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002886:	897b      	ldrh	r3, [r7, #10]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	461a      	mov	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002894:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002896:	f7fe fd2d 	bl	80012f4 <HAL_GetTick>
 800289a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	bf0c      	ite	eq
 80028aa:	2301      	moveq	r3, #1
 80028ac:	2300      	movne	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c0:	bf0c      	ite	eq
 80028c2:	2301      	moveq	r3, #1
 80028c4:	2300      	movne	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028ca:	e025      	b.n	8002918 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028cc:	f7fe fd12 	bl	80012f4 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d302      	bcc.n	80028e2 <HAL_I2C_IsDeviceReady+0x13a>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d103      	bne.n	80028ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	22a0      	movs	r2, #160	; 0xa0
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2ba0      	cmp	r3, #160	; 0xa0
 8002922:	d005      	beq.n	8002930 <HAL_I2C_IsDeviceReady+0x188>
 8002924:	7dfb      	ldrb	r3, [r7, #23]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d102      	bne.n	8002930 <HAL_I2C_IsDeviceReady+0x188>
 800292a:	7dbb      	ldrb	r3, [r7, #22]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0cd      	beq.n	80028cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b02      	cmp	r3, #2
 8002944:	d129      	bne.n	800299a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002954:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2319      	movs	r3, #25
 8002972:	2201      	movs	r2, #1
 8002974:	4921      	ldr	r1, [pc, #132]	; (80029fc <HAL_I2C_IsDeviceReady+0x254>)
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fe2c 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e036      	b.n	80029f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2220      	movs	r2, #32
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	e02c      	b.n	80029f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2319      	movs	r3, #25
 80029ba:	2201      	movs	r2, #1
 80029bc:	490f      	ldr	r1, [pc, #60]	; (80029fc <HAL_I2C_IsDeviceReady+0x254>)
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 fe08 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e012      	b.n	80029f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	3301      	adds	r3, #1
 80029d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	f4ff af32 	bcc.w	8002842 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80029f2:	2302      	movs	r3, #2
  }
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3720      	adds	r7, #32
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	00100002 	.word	0x00100002
 8002a00:	ffff0000 	.word	0xffff0000

08002a04 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08a      	sub	sp, #40	; 0x28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a26:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	0a1b      	lsrs	r3, r3, #8
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00e      	beq.n	8002a52 <HAL_I2C_ER_IRQHandler+0x4e>
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	0a1b      	lsrs	r3, r3, #8
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a50:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	0a5b      	lsrs	r3, r3, #9
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00e      	beq.n	8002a7c <HAL_I2C_ER_IRQHandler+0x78>
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	0a1b      	lsrs	r3, r3, #8
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d008      	beq.n	8002a7c <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	f043 0302 	orr.w	r3, r3, #2
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002a7a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	0a9b      	lsrs	r3, r3, #10
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d03f      	beq.n	8002b08 <HAL_I2C_ER_IRQHandler+0x104>
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	0a1b      	lsrs	r3, r3, #8
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d039      	beq.n	8002b08 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002a94:	7efb      	ldrb	r3, [r7, #27]
 8002a96:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa6:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002aae:	7ebb      	ldrb	r3, [r7, #26]
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d112      	bne.n	8002ada <HAL_I2C_ER_IRQHandler+0xd6>
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10f      	bne.n	8002ada <HAL_I2C_ER_IRQHandler+0xd6>
 8002aba:	7cfb      	ldrb	r3, [r7, #19]
 8002abc:	2b21      	cmp	r3, #33	; 0x21
 8002abe:	d008      	beq.n	8002ad2 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	2b29      	cmp	r3, #41	; 0x29
 8002ac4:	d005      	beq.n	8002ad2 <HAL_I2C_ER_IRQHandler+0xce>
 8002ac6:	7cfb      	ldrb	r3, [r7, #19]
 8002ac8:	2b28      	cmp	r3, #40	; 0x28
 8002aca:	d106      	bne.n	8002ada <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2b21      	cmp	r3, #33	; 0x21
 8002ad0:	d103      	bne.n	8002ada <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f866 	bl	8002ba4 <I2C_Slave_AF>
 8002ad8:	e016      	b.n	8002b08 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ae2:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	f043 0304 	orr.w	r3, r3, #4
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002aec:	7efb      	ldrb	r3, [r7, #27]
 8002aee:	2b10      	cmp	r3, #16
 8002af0:	d002      	beq.n	8002af8 <HAL_I2C_ER_IRQHandler+0xf4>
 8002af2:	7efb      	ldrb	r3, [r7, #27]
 8002af4:	2b40      	cmp	r3, #64	; 0x40
 8002af6:	d107      	bne.n	8002b08 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b06:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	0adb      	lsrs	r3, r3, #11
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00e      	beq.n	8002b32 <HAL_I2C_ER_IRQHandler+0x12e>
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	f043 0308 	orr.w	r3, r3, #8
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002b30:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f89d 	bl	8002c84 <I2C_ITError>
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	3728      	adds	r7, #40	; 0x28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d002      	beq.n	8002bc6 <I2C_Slave_AF+0x22>
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	d129      	bne.n	8002c1a <I2C_Slave_AF+0x76>
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	2b28      	cmp	r3, #40	; 0x28
 8002bca:	d126      	bne.n	8002c1a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a2c      	ldr	r2, [pc, #176]	; (8002c80 <I2C_Slave_AF+0xdc>)
 8002bd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002be0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bea:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bfa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff ffa7 	bl	8002b66 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002c18:	e02e      	b.n	8002c78 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	2b21      	cmp	r3, #33	; 0x21
 8002c1e:	d126      	bne.n	8002c6e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a17      	ldr	r2, [pc, #92]	; (8002c80 <I2C_Slave_AF+0xdc>)
 8002c24:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2221      	movs	r2, #33	; 0x21
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c4a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c54:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c64:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff ff73 	bl	8002b52 <HAL_I2C_SlaveTxCpltCallback>
}
 8002c6c:	e004      	b.n	8002c78 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c76:	615a      	str	r2, [r3, #20]
}
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	ffff0000 	.word	0xffff0000

08002c84 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c9a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c9c:	7bbb      	ldrb	r3, [r7, #14]
 8002c9e:	2b10      	cmp	r3, #16
 8002ca0:	d002      	beq.n	8002ca8 <I2C_ITError+0x24>
 8002ca2:	7bbb      	ldrb	r3, [r7, #14]
 8002ca4:	2b40      	cmp	r3, #64	; 0x40
 8002ca6:	d10a      	bne.n	8002cbe <I2C_ITError+0x3a>
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	2b22      	cmp	r3, #34	; 0x22
 8002cac:	d107      	bne.n	8002cbe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cbc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cc4:	2b28      	cmp	r3, #40	; 0x28
 8002cc6:	d107      	bne.n	8002cd8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2228      	movs	r2, #40	; 0x28
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002cd6:	e015      	b.n	8002d04 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ce6:	d00a      	beq.n	8002cfe <I2C_ITError+0x7a>
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	2b60      	cmp	r3, #96	; 0x60
 8002cec:	d007      	beq.n	8002cfe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d12:	d162      	bne.n	8002dda <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d22:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d020      	beq.n	8002d74 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d36:	4a6a      	ldr	r2, [pc, #424]	; (8002ee0 <I2C_ITError+0x25c>)
 8002d38:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe fbea 	bl	8001518 <HAL_DMA_Abort_IT>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 8089 	beq.w	8002e5e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0201 	bic.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4798      	blx	r3
 8002d72:	e074      	b.n	8002e5e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d78:	4a59      	ldr	r2, [pc, #356]	; (8002ee0 <I2C_ITError+0x25c>)
 8002d7a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe fbc9 	bl	8001518 <HAL_DMA_Abort_IT>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d068      	beq.n	8002e5e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d96:	2b40      	cmp	r3, #64	; 0x40
 8002d98:	d10b      	bne.n	8002db2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0201 	bic.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4798      	blx	r3
 8002dd8:	e041      	b.n	8002e5e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b60      	cmp	r3, #96	; 0x60
 8002de4:	d125      	bne.n	8002e32 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfe:	2b40      	cmp	r3, #64	; 0x40
 8002e00:	d10b      	bne.n	8002e1a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff feaf 	bl	8002b8e <HAL_I2C_AbortCpltCallback>
 8002e30:	e015      	b.n	8002e5e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3c:	2b40      	cmp	r3, #64	; 0x40
 8002e3e:	d10b      	bne.n	8002e58 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff fe8e 	bl	8002b7a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10e      	bne.n	8002e8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d109      	bne.n	8002e8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d104      	bne.n	8002e8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d007      	beq.n	8002e9c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e9a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d113      	bne.n	8002ed8 <I2C_ITError+0x254>
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	2b28      	cmp	r3, #40	; 0x28
 8002eb4:	d110      	bne.n	8002ed8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <I2C_ITError+0x260>)
 8002eba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff fe47 	bl	8002b66 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ed8:	bf00      	nop
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	08003485 	.word	0x08003485
 8002ee4:	ffff0000 	.word	0xffff0000

08002ee8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d006      	beq.n	8002f12 <I2C_MasterRequestWrite+0x2a>
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d003      	beq.n	8002f12 <I2C_MasterRequestWrite+0x2a>
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f10:	d108      	bne.n	8002f24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	e00b      	b.n	8002f3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	2b12      	cmp	r3, #18
 8002f2a:	d107      	bne.n	8002f3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 fb43 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00d      	beq.n	8002f70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f62:	d103      	bne.n	8002f6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e035      	b.n	8002fdc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f78:	d108      	bne.n	8002f8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f7a:	897b      	ldrh	r3, [r7, #10]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f88:	611a      	str	r2, [r3, #16]
 8002f8a:	e01b      	b.n	8002fc4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f8c:	897b      	ldrh	r3, [r7, #10]
 8002f8e:	11db      	asrs	r3, r3, #7
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f003 0306 	and.w	r3, r3, #6
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	f063 030f 	orn	r3, r3, #15
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	490e      	ldr	r1, [pc, #56]	; (8002fe4 <I2C_MasterRequestWrite+0xfc>)
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fb69 	bl	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e010      	b.n	8002fdc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fba:	897b      	ldrh	r3, [r7, #10]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	4907      	ldr	r1, [pc, #28]	; (8002fe8 <I2C_MasterRequestWrite+0x100>)
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 fb59 	bl	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	00010008 	.word	0x00010008
 8002fe8:	00010002 	.word	0x00010002

08002fec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	607a      	str	r2, [r7, #4]
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003010:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b08      	cmp	r3, #8
 8003016:	d006      	beq.n	8003026 <I2C_MasterRequestRead+0x3a>
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d003      	beq.n	8003026 <I2C_MasterRequestRead+0x3a>
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003024:	d108      	bne.n	8003038 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	e00b      	b.n	8003050 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	2b11      	cmp	r3, #17
 800303e:	d107      	bne.n	8003050 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800304e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 fab9 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00d      	beq.n	8003084 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003076:	d103      	bne.n	8003080 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800307e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e079      	b.n	8003178 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800308c:	d108      	bne.n	80030a0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800308e:	897b      	ldrh	r3, [r7, #10]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	b2da      	uxtb	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	611a      	str	r2, [r3, #16]
 800309e:	e05f      	b.n	8003160 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030a0:	897b      	ldrh	r3, [r7, #10]
 80030a2:	11db      	asrs	r3, r3, #7
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f003 0306 	and.w	r3, r3, #6
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f063 030f 	orn	r3, r3, #15
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4930      	ldr	r1, [pc, #192]	; (8003180 <I2C_MasterRequestRead+0x194>)
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fadf 	bl	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e054      	b.n	8003178 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030ce:	897b      	ldrh	r3, [r7, #10]
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	4929      	ldr	r1, [pc, #164]	; (8003184 <I2C_MasterRequestRead+0x198>)
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 facf 	bl	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e044      	b.n	8003178 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003112:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 fa57 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00d      	beq.n	8003148 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800313a:	d103      	bne.n	8003144 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003142:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e017      	b.n	8003178 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003148:	897b      	ldrh	r3, [r7, #10]
 800314a:	11db      	asrs	r3, r3, #7
 800314c:	b2db      	uxtb	r3, r3
 800314e:	f003 0306 	and.w	r3, r3, #6
 8003152:	b2db      	uxtb	r3, r3
 8003154:	f063 030e 	orn	r3, r3, #14
 8003158:	b2da      	uxtb	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	4907      	ldr	r1, [pc, #28]	; (8003184 <I2C_MasterRequestRead+0x198>)
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fa8b 	bl	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	00010008 	.word	0x00010008
 8003184:	00010002 	.word	0x00010002

08003188 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af02      	add	r7, sp, #8
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	4608      	mov	r0, r1
 8003192:	4611      	mov	r1, r2
 8003194:	461a      	mov	r2, r3
 8003196:	4603      	mov	r3, r0
 8003198:	817b      	strh	r3, [r7, #10]
 800319a:	460b      	mov	r3, r1
 800319c:	813b      	strh	r3, [r7, #8]
 800319e:	4613      	mov	r3, r2
 80031a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 fa08 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00d      	beq.n	80031e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d8:	d103      	bne.n	80031e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e05f      	b.n	80032a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031e6:	897b      	ldrh	r3, [r7, #10]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	6a3a      	ldr	r2, [r7, #32]
 80031fa:	492d      	ldr	r1, [pc, #180]	; (80032b0 <I2C_RequestMemoryWrite+0x128>)
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 fa40 	bl	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e04c      	b.n	80032a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003224:	6a39      	ldr	r1, [r7, #32]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 faaa 	bl	8003780 <I2C_WaitOnTXEFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00d      	beq.n	800324e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2b04      	cmp	r3, #4
 8003238:	d107      	bne.n	800324a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003248:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e02b      	b.n	80032a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d105      	bne.n	8003260 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003254:	893b      	ldrh	r3, [r7, #8]
 8003256:	b2da      	uxtb	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	611a      	str	r2, [r3, #16]
 800325e:	e021      	b.n	80032a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003260:	893b      	ldrh	r3, [r7, #8]
 8003262:	0a1b      	lsrs	r3, r3, #8
 8003264:	b29b      	uxth	r3, r3
 8003266:	b2da      	uxtb	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800326e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003270:	6a39      	ldr	r1, [r7, #32]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 fa84 	bl	8003780 <I2C_WaitOnTXEFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00d      	beq.n	800329a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	2b04      	cmp	r3, #4
 8003284:	d107      	bne.n	8003296 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003294:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e005      	b.n	80032a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800329a:	893b      	ldrh	r3, [r7, #8]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	00010002 	.word	0x00010002

080032b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	4608      	mov	r0, r1
 80032be:	4611      	mov	r1, r2
 80032c0:	461a      	mov	r2, r3
 80032c2:	4603      	mov	r3, r0
 80032c4:	817b      	strh	r3, [r7, #10]
 80032c6:	460b      	mov	r3, r1
 80032c8:	813b      	strh	r3, [r7, #8]
 80032ca:	4613      	mov	r3, r2
 80032cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f96a 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00d      	beq.n	8003322 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003314:	d103      	bne.n	800331e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e0aa      	b.n	8003478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003322:	897b      	ldrh	r3, [r7, #10]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003330:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	6a3a      	ldr	r2, [r7, #32]
 8003336:	4952      	ldr	r1, [pc, #328]	; (8003480 <I2C_RequestMemoryRead+0x1cc>)
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 f9a2 	bl	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e097      	b.n	8003478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800335e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003360:	6a39      	ldr	r1, [r7, #32]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 fa0c 	bl	8003780 <I2C_WaitOnTXEFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00d      	beq.n	800338a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	2b04      	cmp	r3, #4
 8003374:	d107      	bne.n	8003386 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003384:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e076      	b.n	8003478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d105      	bne.n	800339c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003390:	893b      	ldrh	r3, [r7, #8]
 8003392:	b2da      	uxtb	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	611a      	str	r2, [r3, #16]
 800339a:	e021      	b.n	80033e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800339c:	893b      	ldrh	r3, [r7, #8]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ac:	6a39      	ldr	r1, [r7, #32]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f9e6 	bl	8003780 <I2C_WaitOnTXEFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00d      	beq.n	80033d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d107      	bne.n	80033d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e050      	b.n	8003478 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033d6:	893b      	ldrh	r3, [r7, #8]
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e2:	6a39      	ldr	r1, [r7, #32]
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f9cb 	bl	8003780 <I2C_WaitOnTXEFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00d      	beq.n	800340c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d107      	bne.n	8003408 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003406:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e035      	b.n	8003478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800341a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	2200      	movs	r2, #0
 8003424:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f8d3 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00d      	beq.n	8003450 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003442:	d103      	bne.n	800344c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800344a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e013      	b.n	8003478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003450:	897b      	ldrh	r3, [r7, #10]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	b2da      	uxtb	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	6a3a      	ldr	r2, [r7, #32]
 8003464:	4906      	ldr	r1, [pc, #24]	; (8003480 <I2C_RequestMemoryRead+0x1cc>)
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f90b 	bl	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	00010002 	.word	0x00010002

08003484 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800349e:	4b4b      	ldr	r3, [pc, #300]	; (80035cc <I2C_DMAAbort+0x148>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	08db      	lsrs	r3, r3, #3
 80034a4:	4a4a      	ldr	r2, [pc, #296]	; (80035d0 <I2C_DMAAbort+0x14c>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	0a1a      	lsrs	r2, r3, #8
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	00da      	lsls	r2, r3, #3
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f043 0220 	orr.w	r2, r3, #32
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80034ca:	e00a      	b.n	80034e2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e0:	d0ea      	beq.n	80034b8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ee:	2200      	movs	r2, #0
 80034f0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	2200      	movs	r2, #0
 8003500:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003510:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2200      	movs	r2, #0
 8003516:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003524:	2200      	movs	r2, #0
 8003526:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	2200      	movs	r2, #0
 8003536:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0201 	bic.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b60      	cmp	r3, #96	; 0x60
 8003552:	d10e      	bne.n	8003572 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2200      	movs	r2, #0
 8003568:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800356a:	6978      	ldr	r0, [r7, #20]
 800356c:	f7ff fb0f 	bl	8002b8e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003570:	e027      	b.n	80035c2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003572:	7cfb      	ldrb	r3, [r7, #19]
 8003574:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003578:	2b28      	cmp	r3, #40	; 0x28
 800357a:	d117      	bne.n	80035ac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800359a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2200      	movs	r2, #0
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2228      	movs	r2, #40	; 0x28
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80035aa:	e007      	b.n	80035bc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80035bc:	6978      	ldr	r0, [r7, #20]
 80035be:	f7ff fadc 	bl	8002b7a <HAL_I2C_ErrorCallback>
}
 80035c2:	bf00      	nop
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000000 	.word	0x20000000
 80035d0:	14f8b589 	.word	0x14f8b589

080035d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	4613      	mov	r3, r2
 80035e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e4:	e025      	b.n	8003632 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035ec:	d021      	beq.n	8003632 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ee:	f7fd fe81 	bl	80012f4 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d302      	bcc.n	8003604 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d116      	bne.n	8003632 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f043 0220 	orr.w	r2, r3, #32
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e023      	b.n	800367a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	0c1b      	lsrs	r3, r3, #16
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d10d      	bne.n	8003658 <I2C_WaitOnFlagUntilTimeout+0x84>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	43da      	mvns	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4013      	ands	r3, r2
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	bf0c      	ite	eq
 800364e:	2301      	moveq	r3, #1
 8003650:	2300      	movne	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	e00c      	b.n	8003672 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	43da      	mvns	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4013      	ands	r3, r2
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	bf0c      	ite	eq
 800366a:	2301      	moveq	r3, #1
 800366c:	2300      	movne	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	79fb      	ldrb	r3, [r7, #7]
 8003674:	429a      	cmp	r2, r3
 8003676:	d0b6      	beq.n	80035e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
 800368e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003690:	e051      	b.n	8003736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a0:	d123      	bne.n	80036ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f043 0204 	orr.w	r2, r3, #4
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e046      	b.n	8003778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036f0:	d021      	beq.n	8003736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f2:	f7fd fdff 	bl	80012f4 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d302      	bcc.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d116      	bne.n	8003736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f043 0220 	orr.w	r2, r3, #32
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e020      	b.n	8003778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	d10c      	bne.n	800375a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	43da      	mvns	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4013      	ands	r3, r2
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	bf14      	ite	ne
 8003752:	2301      	movne	r3, #1
 8003754:	2300      	moveq	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	e00b      	b.n	8003772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	43da      	mvns	r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4013      	ands	r3, r2
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	bf14      	ite	ne
 800376c:	2301      	movne	r3, #1
 800376e:	2300      	moveq	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d18d      	bne.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800378c:	e02d      	b.n	80037ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 f8ce 	bl	8003930 <I2C_IsAcknowledgeFailed>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e02d      	b.n	80037fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037a4:	d021      	beq.n	80037ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a6:	f7fd fda5 	bl	80012f4 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d302      	bcc.n	80037bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d116      	bne.n	80037ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f043 0220 	orr.w	r2, r3, #32
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e007      	b.n	80037fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f4:	2b80      	cmp	r3, #128	; 0x80
 80037f6:	d1ca      	bne.n	800378e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
 8003808:	60f8      	str	r0, [r7, #12]
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800380e:	e02d      	b.n	800386c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 f88d 	bl	8003930 <I2C_IsAcknowledgeFailed>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e02d      	b.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003826:	d021      	beq.n	800386c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003828:	f7fd fd64 	bl	80012f4 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	429a      	cmp	r2, r3
 8003836:	d302      	bcc.n	800383e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d116      	bne.n	800386c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	f043 0220 	orr.w	r2, r3, #32
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e007      	b.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b04      	cmp	r3, #4
 8003878:	d1ca      	bne.n	8003810 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003890:	e042      	b.n	8003918 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b10      	cmp	r3, #16
 800389e:	d119      	bne.n	80038d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0210 	mvn.w	r2, #16
 80038a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e029      	b.n	8003928 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d4:	f7fd fd0e 	bl	80012f4 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d302      	bcc.n	80038ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d116      	bne.n	8003918 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f043 0220 	orr.w	r2, r3, #32
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e007      	b.n	8003928 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d1b5      	bne.n	8003892 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003946:	d11b      	bne.n	8003980 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003950:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	f043 0204 	orr.w	r2, r3, #4
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e267      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d075      	beq.n	8003a9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ae:	4b88      	ldr	r3, [pc, #544]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d00c      	beq.n	80039d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ba:	4b85      	ldr	r3, [pc, #532]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d112      	bne.n	80039ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039c6:	4b82      	ldr	r3, [pc, #520]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039d2:	d10b      	bne.n	80039ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d4:	4b7e      	ldr	r3, [pc, #504]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d05b      	beq.n	8003a98 <HAL_RCC_OscConfig+0x108>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d157      	bne.n	8003a98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e242      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f4:	d106      	bne.n	8003a04 <HAL_RCC_OscConfig+0x74>
 80039f6:	4b76      	ldr	r3, [pc, #472]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a75      	ldr	r2, [pc, #468]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 80039fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e01d      	b.n	8003a40 <HAL_RCC_OscConfig+0xb0>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a0c:	d10c      	bne.n	8003a28 <HAL_RCC_OscConfig+0x98>
 8003a0e:	4b70      	ldr	r3, [pc, #448]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a6f      	ldr	r2, [pc, #444]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	4b6d      	ldr	r3, [pc, #436]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a6c      	ldr	r2, [pc, #432]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e00b      	b.n	8003a40 <HAL_RCC_OscConfig+0xb0>
 8003a28:	4b69      	ldr	r3, [pc, #420]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a68      	ldr	r2, [pc, #416]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	4b66      	ldr	r3, [pc, #408]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a65      	ldr	r2, [pc, #404]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d013      	beq.n	8003a70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7fd fc54 	bl	80012f4 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a50:	f7fd fc50 	bl	80012f4 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	; 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e207      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a62:	4b5b      	ldr	r3, [pc, #364]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f0      	beq.n	8003a50 <HAL_RCC_OscConfig+0xc0>
 8003a6e:	e014      	b.n	8003a9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a70:	f7fd fc40 	bl	80012f4 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a78:	f7fd fc3c 	bl	80012f4 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	; 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e1f3      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8a:	4b51      	ldr	r3, [pc, #324]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0xe8>
 8003a96:	e000      	b.n	8003a9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d063      	beq.n	8003b6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aa6:	4b4a      	ldr	r3, [pc, #296]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00b      	beq.n	8003aca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ab2:	4b47      	ldr	r3, [pc, #284]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d11c      	bne.n	8003af8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003abe:	4b44      	ldr	r3, [pc, #272]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d116      	bne.n	8003af8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aca:	4b41      	ldr	r3, [pc, #260]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x152>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d001      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e1c7      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae2:	4b3b      	ldr	r3, [pc, #236]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4937      	ldr	r1, [pc, #220]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af6:	e03a      	b.n	8003b6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d020      	beq.n	8003b42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b00:	4b34      	ldr	r3, [pc, #208]	; (8003bd4 <HAL_RCC_OscConfig+0x244>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b06:	f7fd fbf5 	bl	80012f4 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b0e:	f7fd fbf1 	bl	80012f4 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e1a8      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b20:	4b2b      	ldr	r3, [pc, #172]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0f0      	beq.n	8003b0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2c:	4b28      	ldr	r3, [pc, #160]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4925      	ldr	r1, [pc, #148]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	600b      	str	r3, [r1, #0]
 8003b40:	e015      	b.n	8003b6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b42:	4b24      	ldr	r3, [pc, #144]	; (8003bd4 <HAL_RCC_OscConfig+0x244>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b48:	f7fd fbd4 	bl	80012f4 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b50:	f7fd fbd0 	bl	80012f4 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e187      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b62:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d036      	beq.n	8003be8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d016      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b82:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <HAL_RCC_OscConfig+0x248>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b88:	f7fd fbb4 	bl	80012f4 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b90:	f7fd fbb0 	bl	80012f4 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e167      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCC_OscConfig+0x200>
 8003bae:	e01b      	b.n	8003be8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bb0:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <HAL_RCC_OscConfig+0x248>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb6:	f7fd fb9d 	bl	80012f4 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bbc:	e00e      	b.n	8003bdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bbe:	f7fd fb99 	bl	80012f4 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d907      	bls.n	8003bdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e150      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	42470000 	.word	0x42470000
 8003bd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bdc:	4b88      	ldr	r3, [pc, #544]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1ea      	bne.n	8003bbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 8097 	beq.w	8003d24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bfa:	4b81      	ldr	r3, [pc, #516]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10f      	bne.n	8003c26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	4b7d      	ldr	r3, [pc, #500]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	4a7c      	ldr	r2, [pc, #496]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c14:	6413      	str	r3, [r2, #64]	; 0x40
 8003c16:	4b7a      	ldr	r3, [pc, #488]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1e:	60bb      	str	r3, [r7, #8]
 8003c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c22:	2301      	movs	r3, #1
 8003c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c26:	4b77      	ldr	r3, [pc, #476]	; (8003e04 <HAL_RCC_OscConfig+0x474>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d118      	bne.n	8003c64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c32:	4b74      	ldr	r3, [pc, #464]	; (8003e04 <HAL_RCC_OscConfig+0x474>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a73      	ldr	r2, [pc, #460]	; (8003e04 <HAL_RCC_OscConfig+0x474>)
 8003c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3e:	f7fd fb59 	bl	80012f4 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c46:	f7fd fb55 	bl	80012f4 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e10c      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c58:	4b6a      	ldr	r3, [pc, #424]	; (8003e04 <HAL_RCC_OscConfig+0x474>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0f0      	beq.n	8003c46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d106      	bne.n	8003c7a <HAL_RCC_OscConfig+0x2ea>
 8003c6c:	4b64      	ldr	r3, [pc, #400]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	4a63      	ldr	r2, [pc, #396]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c72:	f043 0301 	orr.w	r3, r3, #1
 8003c76:	6713      	str	r3, [r2, #112]	; 0x70
 8003c78:	e01c      	b.n	8003cb4 <HAL_RCC_OscConfig+0x324>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b05      	cmp	r3, #5
 8003c80:	d10c      	bne.n	8003c9c <HAL_RCC_OscConfig+0x30c>
 8003c82:	4b5f      	ldr	r3, [pc, #380]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c86:	4a5e      	ldr	r2, [pc, #376]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c88:	f043 0304 	orr.w	r3, r3, #4
 8003c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c8e:	4b5c      	ldr	r3, [pc, #368]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c92:	4a5b      	ldr	r2, [pc, #364]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9a:	e00b      	b.n	8003cb4 <HAL_RCC_OscConfig+0x324>
 8003c9c:	4b58      	ldr	r3, [pc, #352]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	4a57      	ldr	r2, [pc, #348]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	f023 0301 	bic.w	r3, r3, #1
 8003ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca8:	4b55      	ldr	r3, [pc, #340]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	4a54      	ldr	r2, [pc, #336]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003cae:	f023 0304 	bic.w	r3, r3, #4
 8003cb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d015      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbc:	f7fd fb1a 	bl	80012f4 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc2:	e00a      	b.n	8003cda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc4:	f7fd fb16 	bl	80012f4 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e0cb      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cda:	4b49      	ldr	r3, [pc, #292]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0ee      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x334>
 8003ce6:	e014      	b.n	8003d12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce8:	f7fd fb04 	bl	80012f4 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cee:	e00a      	b.n	8003d06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cf0:	f7fd fb00 	bl	80012f4 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e0b5      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d06:	4b3e      	ldr	r3, [pc, #248]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1ee      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d105      	bne.n	8003d24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d18:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	4a38      	ldr	r2, [pc, #224]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80a1 	beq.w	8003e70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d2e:	4b34      	ldr	r3, [pc, #208]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 030c 	and.w	r3, r3, #12
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d05c      	beq.n	8003df4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d141      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d42:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <HAL_RCC_OscConfig+0x478>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d48:	f7fd fad4 	bl	80012f4 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d50:	f7fd fad0 	bl	80012f4 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e087      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d62:	4b27      	ldr	r3, [pc, #156]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69da      	ldr	r2, [r3, #28]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	019b      	lsls	r3, r3, #6
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d84:	085b      	lsrs	r3, r3, #1
 8003d86:	3b01      	subs	r3, #1
 8003d88:	041b      	lsls	r3, r3, #16
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	061b      	lsls	r3, r3, #24
 8003d92:	491b      	ldr	r1, [pc, #108]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d98:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <HAL_RCC_OscConfig+0x478>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9e:	f7fd faa9 	bl	80012f4 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da6:	f7fd faa5 	bl	80012f4 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e05c      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db8:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0f0      	beq.n	8003da6 <HAL_RCC_OscConfig+0x416>
 8003dc4:	e054      	b.n	8003e70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc6:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <HAL_RCC_OscConfig+0x478>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dcc:	f7fd fa92 	bl	80012f4 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd4:	f7fd fa8e 	bl	80012f4 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e045      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x444>
 8003df2:	e03d      	b.n	8003e70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e038      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40007000 	.word	0x40007000
 8003e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e0c:	4b1b      	ldr	r3, [pc, #108]	; (8003e7c <HAL_RCC_OscConfig+0x4ec>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d028      	beq.n	8003e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d121      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d11a      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d111      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	085b      	lsrs	r3, r3, #1
 8003e54:	3b01      	subs	r3, #1
 8003e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d107      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e000      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40023800 	.word	0x40023800

08003e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0cc      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e94:	4b68      	ldr	r3, [pc, #416]	; (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d90c      	bls.n	8003ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea2:	4b65      	ldr	r3, [pc, #404]	; (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eaa:	4b63      	ldr	r3, [pc, #396]	; (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0b8      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d020      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed4:	4b59      	ldr	r3, [pc, #356]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a58      	ldr	r2, [pc, #352]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ede:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eec:	4b53      	ldr	r3, [pc, #332]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4a52      	ldr	r2, [pc, #328]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef8:	4b50      	ldr	r3, [pc, #320]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	494d      	ldr	r1, [pc, #308]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d044      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d107      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1e:	4b47      	ldr	r3, [pc, #284]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d119      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e07f      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d003      	beq.n	8003f3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d107      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3e:	4b3f      	ldr	r3, [pc, #252]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d109      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e06f      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4e:	4b3b      	ldr	r3, [pc, #236]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e067      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f5e:	4b37      	ldr	r3, [pc, #220]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f023 0203 	bic.w	r2, r3, #3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4934      	ldr	r1, [pc, #208]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f70:	f7fd f9c0 	bl	80012f4 <HAL_GetTick>
 8003f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	e00a      	b.n	8003f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f78:	f7fd f9bc 	bl	80012f4 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e04f      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8e:	4b2b      	ldr	r3, [pc, #172]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 020c 	and.w	r2, r3, #12
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d1eb      	bne.n	8003f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa0:	4b25      	ldr	r3, [pc, #148]	; (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d20c      	bcs.n	8003fc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fae:	4b22      	ldr	r3, [pc, #136]	; (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb6:	4b20      	ldr	r3, [pc, #128]	; (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e032      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd4:	4b19      	ldr	r3, [pc, #100]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4916      	ldr	r1, [pc, #88]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d009      	beq.n	8004006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ff2:	4b12      	ldr	r3, [pc, #72]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	490e      	ldr	r1, [pc, #56]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	4313      	orrs	r3, r2
 8004004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004006:	f000 f821 	bl	800404c <HAL_RCC_GetSysClockFreq>
 800400a:	4602      	mov	r2, r0
 800400c:	4b0b      	ldr	r3, [pc, #44]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	490a      	ldr	r1, [pc, #40]	; (8004040 <HAL_RCC_ClockConfig+0x1c0>)
 8004018:	5ccb      	ldrb	r3, [r1, r3]
 800401a:	fa22 f303 	lsr.w	r3, r2, r3
 800401e:	4a09      	ldr	r2, [pc, #36]	; (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8004020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004022:	4b09      	ldr	r3, [pc, #36]	; (8004048 <HAL_RCC_ClockConfig+0x1c8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7fc ffb2 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40023c00 	.word	0x40023c00
 800403c:	40023800 	.word	0x40023800
 8004040:	08007e58 	.word	0x08007e58
 8004044:	20000000 	.word	0x20000000
 8004048:	20000004 	.word	0x20000004

0800404c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800404c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004050:	b094      	sub	sp, #80	; 0x50
 8004052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	647b      	str	r3, [r7, #68]	; 0x44
 8004058:	2300      	movs	r3, #0
 800405a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800405c:	2300      	movs	r3, #0
 800405e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004064:	4b79      	ldr	r3, [pc, #484]	; (800424c <HAL_RCC_GetSysClockFreq+0x200>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 030c 	and.w	r3, r3, #12
 800406c:	2b08      	cmp	r3, #8
 800406e:	d00d      	beq.n	800408c <HAL_RCC_GetSysClockFreq+0x40>
 8004070:	2b08      	cmp	r3, #8
 8004072:	f200 80e1 	bhi.w	8004238 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <HAL_RCC_GetSysClockFreq+0x34>
 800407a:	2b04      	cmp	r3, #4
 800407c:	d003      	beq.n	8004086 <HAL_RCC_GetSysClockFreq+0x3a>
 800407e:	e0db      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004080:	4b73      	ldr	r3, [pc, #460]	; (8004250 <HAL_RCC_GetSysClockFreq+0x204>)
 8004082:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004084:	e0db      	b.n	800423e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004086:	4b73      	ldr	r3, [pc, #460]	; (8004254 <HAL_RCC_GetSysClockFreq+0x208>)
 8004088:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800408a:	e0d8      	b.n	800423e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800408c:	4b6f      	ldr	r3, [pc, #444]	; (800424c <HAL_RCC_GetSysClockFreq+0x200>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004094:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004096:	4b6d      	ldr	r3, [pc, #436]	; (800424c <HAL_RCC_GetSysClockFreq+0x200>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d063      	beq.n	800416a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a2:	4b6a      	ldr	r3, [pc, #424]	; (800424c <HAL_RCC_GetSysClockFreq+0x200>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	099b      	lsrs	r3, r3, #6
 80040a8:	2200      	movs	r2, #0
 80040aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80040ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b4:	633b      	str	r3, [r7, #48]	; 0x30
 80040b6:	2300      	movs	r3, #0
 80040b8:	637b      	str	r3, [r7, #52]	; 0x34
 80040ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040be:	4622      	mov	r2, r4
 80040c0:	462b      	mov	r3, r5
 80040c2:	f04f 0000 	mov.w	r0, #0
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	0159      	lsls	r1, r3, #5
 80040cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040d0:	0150      	lsls	r0, r2, #5
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	4621      	mov	r1, r4
 80040d8:	1a51      	subs	r1, r2, r1
 80040da:	6139      	str	r1, [r7, #16]
 80040dc:	4629      	mov	r1, r5
 80040de:	eb63 0301 	sbc.w	r3, r3, r1
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040f0:	4659      	mov	r1, fp
 80040f2:	018b      	lsls	r3, r1, #6
 80040f4:	4651      	mov	r1, sl
 80040f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040fa:	4651      	mov	r1, sl
 80040fc:	018a      	lsls	r2, r1, #6
 80040fe:	4651      	mov	r1, sl
 8004100:	ebb2 0801 	subs.w	r8, r2, r1
 8004104:	4659      	mov	r1, fp
 8004106:	eb63 0901 	sbc.w	r9, r3, r1
 800410a:	f04f 0200 	mov.w	r2, #0
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800411a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800411e:	4690      	mov	r8, r2
 8004120:	4699      	mov	r9, r3
 8004122:	4623      	mov	r3, r4
 8004124:	eb18 0303 	adds.w	r3, r8, r3
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	462b      	mov	r3, r5
 800412c:	eb49 0303 	adc.w	r3, r9, r3
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800413e:	4629      	mov	r1, r5
 8004140:	024b      	lsls	r3, r1, #9
 8004142:	4621      	mov	r1, r4
 8004144:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004148:	4621      	mov	r1, r4
 800414a:	024a      	lsls	r2, r1, #9
 800414c:	4610      	mov	r0, r2
 800414e:	4619      	mov	r1, r3
 8004150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004152:	2200      	movs	r2, #0
 8004154:	62bb      	str	r3, [r7, #40]	; 0x28
 8004156:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004158:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800415c:	f7fc f890 	bl	8000280 <__aeabi_uldivmod>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4613      	mov	r3, r2
 8004166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004168:	e058      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800416a:	4b38      	ldr	r3, [pc, #224]	; (800424c <HAL_RCC_GetSysClockFreq+0x200>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	099b      	lsrs	r3, r3, #6
 8004170:	2200      	movs	r2, #0
 8004172:	4618      	mov	r0, r3
 8004174:	4611      	mov	r1, r2
 8004176:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800417a:	623b      	str	r3, [r7, #32]
 800417c:	2300      	movs	r3, #0
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
 8004180:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004184:	4642      	mov	r2, r8
 8004186:	464b      	mov	r3, r9
 8004188:	f04f 0000 	mov.w	r0, #0
 800418c:	f04f 0100 	mov.w	r1, #0
 8004190:	0159      	lsls	r1, r3, #5
 8004192:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004196:	0150      	lsls	r0, r2, #5
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4641      	mov	r1, r8
 800419e:	ebb2 0a01 	subs.w	sl, r2, r1
 80041a2:	4649      	mov	r1, r9
 80041a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041bc:	ebb2 040a 	subs.w	r4, r2, sl
 80041c0:	eb63 050b 	sbc.w	r5, r3, fp
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	00eb      	lsls	r3, r5, #3
 80041ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041d2:	00e2      	lsls	r2, r4, #3
 80041d4:	4614      	mov	r4, r2
 80041d6:	461d      	mov	r5, r3
 80041d8:	4643      	mov	r3, r8
 80041da:	18e3      	adds	r3, r4, r3
 80041dc:	603b      	str	r3, [r7, #0]
 80041de:	464b      	mov	r3, r9
 80041e0:	eb45 0303 	adc.w	r3, r5, r3
 80041e4:	607b      	str	r3, [r7, #4]
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041f2:	4629      	mov	r1, r5
 80041f4:	028b      	lsls	r3, r1, #10
 80041f6:	4621      	mov	r1, r4
 80041f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041fc:	4621      	mov	r1, r4
 80041fe:	028a      	lsls	r2, r1, #10
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004206:	2200      	movs	r2, #0
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	61fa      	str	r2, [r7, #28]
 800420c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004210:	f7fc f836 	bl	8000280 <__aeabi_uldivmod>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4613      	mov	r3, r2
 800421a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <HAL_RCC_GetSysClockFreq+0x200>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	0c1b      	lsrs	r3, r3, #16
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	3301      	adds	r3, #1
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800422c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800422e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004236:	e002      	b.n	800423e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004238:	4b05      	ldr	r3, [pc, #20]	; (8004250 <HAL_RCC_GetSysClockFreq+0x204>)
 800423a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800423c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800423e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004240:	4618      	mov	r0, r3
 8004242:	3750      	adds	r7, #80	; 0x50
 8004244:	46bd      	mov	sp, r7
 8004246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800424a:	bf00      	nop
 800424c:	40023800 	.word	0x40023800
 8004250:	00f42400 	.word	0x00f42400
 8004254:	007a1200 	.word	0x007a1200

08004258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800425c:	4b03      	ldr	r3, [pc, #12]	; (800426c <HAL_RCC_GetHCLKFreq+0x14>)
 800425e:	681b      	ldr	r3, [r3, #0]
}
 8004260:	4618      	mov	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000000 	.word	0x20000000

08004270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004274:	f7ff fff0 	bl	8004258 <HAL_RCC_GetHCLKFreq>
 8004278:	4602      	mov	r2, r0
 800427a:	4b05      	ldr	r3, [pc, #20]	; (8004290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	0a9b      	lsrs	r3, r3, #10
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	4903      	ldr	r1, [pc, #12]	; (8004294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004286:	5ccb      	ldrb	r3, [r1, r3]
 8004288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800428c:	4618      	mov	r0, r3
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40023800 	.word	0x40023800
 8004294:	08007e68 	.word	0x08007e68

08004298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800429c:	f7ff ffdc 	bl	8004258 <HAL_RCC_GetHCLKFreq>
 80042a0:	4602      	mov	r2, r0
 80042a2:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	0b5b      	lsrs	r3, r3, #13
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	4903      	ldr	r1, [pc, #12]	; (80042bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ae:	5ccb      	ldrb	r3, [r1, r3]
 80042b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40023800 	.word	0x40023800
 80042bc:	08007e68 	.word	0x08007e68

080042c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	220f      	movs	r2, #15
 80042ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042d0:	4b12      	ldr	r3, [pc, #72]	; (800431c <HAL_RCC_GetClockConfig+0x5c>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 0203 	and.w	r2, r3, #3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042dc:	4b0f      	ldr	r3, [pc, #60]	; (800431c <HAL_RCC_GetClockConfig+0x5c>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042e8:	4b0c      	ldr	r3, [pc, #48]	; (800431c <HAL_RCC_GetClockConfig+0x5c>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042f4:	4b09      	ldr	r3, [pc, #36]	; (800431c <HAL_RCC_GetClockConfig+0x5c>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	08db      	lsrs	r3, r3, #3
 80042fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004302:	4b07      	ldr	r3, [pc, #28]	; (8004320 <HAL_RCC_GetClockConfig+0x60>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0207 	and.w	r2, r3, #7
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	601a      	str	r2, [r3, #0]
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800
 8004320:	40023c00 	.word	0x40023c00

08004324 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e041      	b.n	80043ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f839 	bl	80043c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3304      	adds	r3, #4
 8004360:	4619      	mov	r1, r3
 8004362:	4610      	mov	r0, r2
 8004364:	f000 fadc 	bl	8004920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
	...

080043d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d001      	beq.n	80043f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e044      	b.n	800447a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a1e      	ldr	r2, [pc, #120]	; (8004488 <HAL_TIM_Base_Start_IT+0xb0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d018      	beq.n	8004444 <HAL_TIM_Base_Start_IT+0x6c>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441a:	d013      	beq.n	8004444 <HAL_TIM_Base_Start_IT+0x6c>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1a      	ldr	r2, [pc, #104]	; (800448c <HAL_TIM_Base_Start_IT+0xb4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00e      	beq.n	8004444 <HAL_TIM_Base_Start_IT+0x6c>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a19      	ldr	r2, [pc, #100]	; (8004490 <HAL_TIM_Base_Start_IT+0xb8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d009      	beq.n	8004444 <HAL_TIM_Base_Start_IT+0x6c>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a17      	ldr	r2, [pc, #92]	; (8004494 <HAL_TIM_Base_Start_IT+0xbc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d004      	beq.n	8004444 <HAL_TIM_Base_Start_IT+0x6c>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a16      	ldr	r2, [pc, #88]	; (8004498 <HAL_TIM_Base_Start_IT+0xc0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d111      	bne.n	8004468 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b06      	cmp	r3, #6
 8004454:	d010      	beq.n	8004478 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0201 	orr.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004466:	e007      	b.n	8004478 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40010000 	.word	0x40010000
 800448c:	40000400 	.word	0x40000400
 8004490:	40000800 	.word	0x40000800
 8004494:	40000c00 	.word	0x40000c00
 8004498:	40014000 	.word	0x40014000

0800449c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e041      	b.n	8004532 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fc fcc0 	bl	8000e48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3304      	adds	r3, #4
 80044d8:	4619      	mov	r1, r3
 80044da:	4610      	mov	r0, r2
 80044dc:	f000 fa20 	bl	8004920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b082      	sub	sp, #8
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b02      	cmp	r3, #2
 800454e:	d122      	bne.n	8004596 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b02      	cmp	r3, #2
 800455c:	d11b      	bne.n	8004596 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f06f 0202 	mvn.w	r2, #2
 8004566:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f9b1 	bl	80048e4 <HAL_TIM_IC_CaptureCallback>
 8004582:	e005      	b.n	8004590 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f9a3 	bl	80048d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f9b4 	bl	80048f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d122      	bne.n	80045ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d11b      	bne.n	80045ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f06f 0204 	mvn.w	r2, #4
 80045ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f987 	bl	80048e4 <HAL_TIM_IC_CaptureCallback>
 80045d6:	e005      	b.n	80045e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f979 	bl	80048d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f98a 	bl	80048f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d122      	bne.n	800463e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b08      	cmp	r3, #8
 8004604:	d11b      	bne.n	800463e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f06f 0208 	mvn.w	r2, #8
 800460e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2204      	movs	r2, #4
 8004614:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f95d 	bl	80048e4 <HAL_TIM_IC_CaptureCallback>
 800462a:	e005      	b.n	8004638 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f94f 	bl	80048d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f960 	bl	80048f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f003 0310 	and.w	r3, r3, #16
 8004648:	2b10      	cmp	r3, #16
 800464a:	d122      	bne.n	8004692 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 0310 	and.w	r3, r3, #16
 8004656:	2b10      	cmp	r3, #16
 8004658:	d11b      	bne.n	8004692 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f06f 0210 	mvn.w	r2, #16
 8004662:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2208      	movs	r2, #8
 8004668:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f933 	bl	80048e4 <HAL_TIM_IC_CaptureCallback>
 800467e:	e005      	b.n	800468c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f925 	bl	80048d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f936 	bl	80048f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b01      	cmp	r3, #1
 800469e:	d10e      	bne.n	80046be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d107      	bne.n	80046be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f06f 0201 	mvn.w	r2, #1
 80046b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7fc fb31 	bl	8000d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c8:	2b80      	cmp	r3, #128	; 0x80
 80046ca:	d10e      	bne.n	80046ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d6:	2b80      	cmp	r3, #128	; 0x80
 80046d8:	d107      	bne.n	80046ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fb9f 	bl	8004e28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	d10e      	bne.n	8004716 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004702:	2b40      	cmp	r3, #64	; 0x40
 8004704:	d107      	bne.n	8004716 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800470e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f8fb 	bl	800490c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b20      	cmp	r3, #32
 8004722:	d10e      	bne.n	8004742 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	2b20      	cmp	r3, #32
 8004730:	d107      	bne.n	8004742 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f06f 0220 	mvn.w	r2, #32
 800473a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fb69 	bl	8004e14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004766:	2302      	movs	r3, #2
 8004768:	e0ae      	b.n	80048c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b0c      	cmp	r3, #12
 8004776:	f200 809f 	bhi.w	80048b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800477a:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	080047b5 	.word	0x080047b5
 8004784:	080048b9 	.word	0x080048b9
 8004788:	080048b9 	.word	0x080048b9
 800478c:	080048b9 	.word	0x080048b9
 8004790:	080047f5 	.word	0x080047f5
 8004794:	080048b9 	.word	0x080048b9
 8004798:	080048b9 	.word	0x080048b9
 800479c:	080048b9 	.word	0x080048b9
 80047a0:	08004837 	.word	0x08004837
 80047a4:	080048b9 	.word	0x080048b9
 80047a8:	080048b9 	.word	0x080048b9
 80047ac:	080048b9 	.word	0x080048b9
 80047b0:	08004877 	.word	0x08004877
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 f930 	bl	8004a20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0208 	orr.w	r2, r2, #8
 80047ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0204 	bic.w	r2, r2, #4
 80047de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6999      	ldr	r1, [r3, #24]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	619a      	str	r2, [r3, #24]
      break;
 80047f2:	e064      	b.n	80048be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68b9      	ldr	r1, [r7, #8]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 f976 	bl	8004aec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800480e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800481e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6999      	ldr	r1, [r3, #24]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	021a      	lsls	r2, r3, #8
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	619a      	str	r2, [r3, #24]
      break;
 8004834:	e043      	b.n	80048be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	4618      	mov	r0, r3
 800483e:	f000 f9c1 	bl	8004bc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0208 	orr.w	r2, r2, #8
 8004850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69da      	ldr	r2, [r3, #28]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0204 	bic.w	r2, r2, #4
 8004860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69d9      	ldr	r1, [r3, #28]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	61da      	str	r2, [r3, #28]
      break;
 8004874:	e023      	b.n	80048be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fa0b 	bl	8004c98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69da      	ldr	r2, [r3, #28]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69da      	ldr	r2, [r3, #28]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69d9      	ldr	r1, [r3, #28]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	021a      	lsls	r2, r3, #8
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	61da      	str	r2, [r3, #28]
      break;
 80048b6:	e002      	b.n	80048be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	75fb      	strb	r3, [r7, #23]
      break;
 80048bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a34      	ldr	r2, [pc, #208]	; (8004a04 <TIM_Base_SetConfig+0xe4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d00f      	beq.n	8004958 <TIM_Base_SetConfig+0x38>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493e:	d00b      	beq.n	8004958 <TIM_Base_SetConfig+0x38>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a31      	ldr	r2, [pc, #196]	; (8004a08 <TIM_Base_SetConfig+0xe8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d007      	beq.n	8004958 <TIM_Base_SetConfig+0x38>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a30      	ldr	r2, [pc, #192]	; (8004a0c <TIM_Base_SetConfig+0xec>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d003      	beq.n	8004958 <TIM_Base_SetConfig+0x38>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a2f      	ldr	r2, [pc, #188]	; (8004a10 <TIM_Base_SetConfig+0xf0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d108      	bne.n	800496a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a25      	ldr	r2, [pc, #148]	; (8004a04 <TIM_Base_SetConfig+0xe4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d01b      	beq.n	80049aa <TIM_Base_SetConfig+0x8a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004978:	d017      	beq.n	80049aa <TIM_Base_SetConfig+0x8a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a22      	ldr	r2, [pc, #136]	; (8004a08 <TIM_Base_SetConfig+0xe8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d013      	beq.n	80049aa <TIM_Base_SetConfig+0x8a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a21      	ldr	r2, [pc, #132]	; (8004a0c <TIM_Base_SetConfig+0xec>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00f      	beq.n	80049aa <TIM_Base_SetConfig+0x8a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a20      	ldr	r2, [pc, #128]	; (8004a10 <TIM_Base_SetConfig+0xf0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d00b      	beq.n	80049aa <TIM_Base_SetConfig+0x8a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a1f      	ldr	r2, [pc, #124]	; (8004a14 <TIM_Base_SetConfig+0xf4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d007      	beq.n	80049aa <TIM_Base_SetConfig+0x8a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a1e      	ldr	r2, [pc, #120]	; (8004a18 <TIM_Base_SetConfig+0xf8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d003      	beq.n	80049aa <TIM_Base_SetConfig+0x8a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a1d      	ldr	r2, [pc, #116]	; (8004a1c <TIM_Base_SetConfig+0xfc>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d108      	bne.n	80049bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a08      	ldr	r2, [pc, #32]	; (8004a04 <TIM_Base_SetConfig+0xe4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d103      	bne.n	80049f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	691a      	ldr	r2, [r3, #16]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	615a      	str	r2, [r3, #20]
}
 80049f6:	bf00      	nop
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40010000 	.word	0x40010000
 8004a08:	40000400 	.word	0x40000400
 8004a0c:	40000800 	.word	0x40000800
 8004a10:	40000c00 	.word	0x40000c00
 8004a14:	40014000 	.word	0x40014000
 8004a18:	40014400 	.word	0x40014400
 8004a1c:	40014800 	.word	0x40014800

08004a20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f023 0201 	bic.w	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0303 	bic.w	r3, r3, #3
 8004a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f023 0302 	bic.w	r3, r3, #2
 8004a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a1c      	ldr	r2, [pc, #112]	; (8004ae8 <TIM_OC1_SetConfig+0xc8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d10c      	bne.n	8004a96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f023 0308 	bic.w	r3, r3, #8
 8004a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f023 0304 	bic.w	r3, r3, #4
 8004a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a13      	ldr	r2, [pc, #76]	; (8004ae8 <TIM_OC1_SetConfig+0xc8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d111      	bne.n	8004ac2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	621a      	str	r2, [r3, #32]
}
 8004adc:	bf00      	nop
 8004ade:	371c      	adds	r7, #28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	40010000 	.word	0x40010000

08004aec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	f023 0210 	bic.w	r2, r3, #16
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	021b      	lsls	r3, r3, #8
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f023 0320 	bic.w	r3, r3, #32
 8004b36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a1e      	ldr	r2, [pc, #120]	; (8004bc0 <TIM_OC2_SetConfig+0xd4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d10d      	bne.n	8004b68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <TIM_OC2_SetConfig+0xd4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d113      	bne.n	8004b98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	621a      	str	r2, [r3, #32]
}
 8004bb2:	bf00      	nop
 8004bb4:	371c      	adds	r7, #28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40010000 	.word	0x40010000

08004bc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0303 	bic.w	r3, r3, #3
 8004bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a1d      	ldr	r2, [pc, #116]	; (8004c94 <TIM_OC3_SetConfig+0xd0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d10d      	bne.n	8004c3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <TIM_OC3_SetConfig+0xd0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d113      	bne.n	8004c6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	621a      	str	r2, [r3, #32]
}
 8004c88:	bf00      	nop
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	40010000 	.word	0x40010000

08004c98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	021b      	lsls	r3, r3, #8
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	031b      	lsls	r3, r3, #12
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a10      	ldr	r2, [pc, #64]	; (8004d34 <TIM_OC4_SetConfig+0x9c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d109      	bne.n	8004d0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	019b      	lsls	r3, r3, #6
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40010000 	.word	0x40010000

08004d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e050      	b.n	8004df2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1c      	ldr	r2, [pc, #112]	; (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d018      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9c:	d013      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a18      	ldr	r2, [pc, #96]	; (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00e      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a16      	ldr	r2, [pc, #88]	; (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d009      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a15      	ldr	r2, [pc, #84]	; (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d004      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a13      	ldr	r2, [pc, #76]	; (8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d10c      	bne.n	8004de0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40010000 	.word	0x40010000
 8004e04:	40000400 	.word	0x40000400
 8004e08:	40000800 	.word	0x40000800
 8004e0c:	40000c00 	.word	0x40000c00
 8004e10:	40014000 	.word	0x40014000

08004e14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e03f      	b.n	8004ece <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7fc f84c 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2224      	movs	r2, #36	; 0x24
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f929 	bl	80050d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695a      	ldr	r2, [r3, #20]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ea4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004eb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b08a      	sub	sp, #40	; 0x28
 8004eda:	af02      	add	r7, sp, #8
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	603b      	str	r3, [r7, #0]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b20      	cmp	r3, #32
 8004ef4:	d17c      	bne.n	8004ff0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <HAL_UART_Transmit+0x2c>
 8004efc:	88fb      	ldrh	r3, [r7, #6]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e075      	b.n	8004ff2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_UART_Transmit+0x3e>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e06e      	b.n	8004ff2 <HAL_UART_Transmit+0x11c>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2221      	movs	r2, #33	; 0x21
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f2a:	f7fc f9e3 	bl	80012f4 <HAL_GetTick>
 8004f2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	88fa      	ldrh	r2, [r7, #6]
 8004f34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	88fa      	ldrh	r2, [r7, #6]
 8004f3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f44:	d108      	bne.n	8004f58 <HAL_UART_Transmit+0x82>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d104      	bne.n	8004f58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	61bb      	str	r3, [r7, #24]
 8004f56:	e003      	b.n	8004f60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f68:	e02a      	b.n	8004fc0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2200      	movs	r2, #0
 8004f72:	2180      	movs	r1, #128	; 0x80
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f840 	bl	8004ffa <UART_WaitOnFlagUntilTimeout>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e036      	b.n	8004ff2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10b      	bne.n	8004fa2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	3302      	adds	r3, #2
 8004f9e:	61bb      	str	r3, [r7, #24]
 8004fa0:	e007      	b.n	8004fb2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	781a      	ldrb	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1cf      	bne.n	8004f6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	2140      	movs	r1, #64	; 0x40
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 f810 	bl	8004ffa <UART_WaitOnFlagUntilTimeout>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e006      	b.n	8004ff2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	e000      	b.n	8004ff2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ff0:	2302      	movs	r3, #2
  }
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3720      	adds	r7, #32
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b090      	sub	sp, #64	; 0x40
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	60f8      	str	r0, [r7, #12]
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	603b      	str	r3, [r7, #0]
 8005006:	4613      	mov	r3, r2
 8005008:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800500a:	e050      	b.n	80050ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800500c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005012:	d04c      	beq.n	80050ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <UART_WaitOnFlagUntilTimeout+0x30>
 800501a:	f7fc f96b 	bl	80012f4 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005026:	429a      	cmp	r2, r3
 8005028:	d241      	bcs.n	80050ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	330c      	adds	r3, #12
 8005030:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	330c      	adds	r3, #12
 8005048:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800504a:	637a      	str	r2, [r7, #52]	; 0x34
 800504c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e5      	bne.n	800502a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3314      	adds	r3, #20
 8005064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	613b      	str	r3, [r7, #16]
   return(result);
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f023 0301 	bic.w	r3, r3, #1
 8005074:	63bb      	str	r3, [r7, #56]	; 0x38
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3314      	adds	r3, #20
 800507c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800507e:	623a      	str	r2, [r7, #32]
 8005080:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	69f9      	ldr	r1, [r7, #28]
 8005084:	6a3a      	ldr	r2, [r7, #32]
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	61bb      	str	r3, [r7, #24]
   return(result);
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e5      	bne.n	800505e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e00f      	b.n	80050ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4013      	ands	r3, r2
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	bf0c      	ite	eq
 80050be:	2301      	moveq	r3, #1
 80050c0:	2300      	movne	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	461a      	mov	r2, r3
 80050c6:	79fb      	ldrb	r3, [r7, #7]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d09f      	beq.n	800500c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3740      	adds	r7, #64	; 0x40
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050dc:	b0c0      	sub	sp, #256	; 0x100
 80050de:	af00      	add	r7, sp, #0
 80050e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f4:	68d9      	ldr	r1, [r3, #12]
 80050f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	ea40 0301 	orr.w	r3, r0, r1
 8005100:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	431a      	orrs	r2, r3
 8005110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	431a      	orrs	r2, r3
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005130:	f021 010c 	bic.w	r1, r1, #12
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800513e:	430b      	orrs	r3, r1
 8005140:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800514e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005152:	6999      	ldr	r1, [r3, #24]
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	ea40 0301 	orr.w	r3, r0, r1
 800515e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	4b8f      	ldr	r3, [pc, #572]	; (80053a4 <UART_SetConfig+0x2cc>)
 8005168:	429a      	cmp	r2, r3
 800516a:	d005      	beq.n	8005178 <UART_SetConfig+0xa0>
 800516c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	4b8d      	ldr	r3, [pc, #564]	; (80053a8 <UART_SetConfig+0x2d0>)
 8005174:	429a      	cmp	r2, r3
 8005176:	d104      	bne.n	8005182 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005178:	f7ff f88e 	bl	8004298 <HAL_RCC_GetPCLK2Freq>
 800517c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005180:	e003      	b.n	800518a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005182:	f7ff f875 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 8005186:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800518a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005194:	f040 810c 	bne.w	80053b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800519c:	2200      	movs	r2, #0
 800519e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80051a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80051aa:	4622      	mov	r2, r4
 80051ac:	462b      	mov	r3, r5
 80051ae:	1891      	adds	r1, r2, r2
 80051b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80051b2:	415b      	adcs	r3, r3
 80051b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051ba:	4621      	mov	r1, r4
 80051bc:	eb12 0801 	adds.w	r8, r2, r1
 80051c0:	4629      	mov	r1, r5
 80051c2:	eb43 0901 	adc.w	r9, r3, r1
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051da:	4690      	mov	r8, r2
 80051dc:	4699      	mov	r9, r3
 80051de:	4623      	mov	r3, r4
 80051e0:	eb18 0303 	adds.w	r3, r8, r3
 80051e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80051e8:	462b      	mov	r3, r5
 80051ea:	eb49 0303 	adc.w	r3, r9, r3
 80051ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005202:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005206:	460b      	mov	r3, r1
 8005208:	18db      	adds	r3, r3, r3
 800520a:	653b      	str	r3, [r7, #80]	; 0x50
 800520c:	4613      	mov	r3, r2
 800520e:	eb42 0303 	adc.w	r3, r2, r3
 8005212:	657b      	str	r3, [r7, #84]	; 0x54
 8005214:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005218:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800521c:	f7fb f830 	bl	8000280 <__aeabi_uldivmod>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4b61      	ldr	r3, [pc, #388]	; (80053ac <UART_SetConfig+0x2d4>)
 8005226:	fba3 2302 	umull	r2, r3, r3, r2
 800522a:	095b      	lsrs	r3, r3, #5
 800522c:	011c      	lsls	r4, r3, #4
 800522e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005232:	2200      	movs	r2, #0
 8005234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005238:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800523c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005240:	4642      	mov	r2, r8
 8005242:	464b      	mov	r3, r9
 8005244:	1891      	adds	r1, r2, r2
 8005246:	64b9      	str	r1, [r7, #72]	; 0x48
 8005248:	415b      	adcs	r3, r3
 800524a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800524c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005250:	4641      	mov	r1, r8
 8005252:	eb12 0a01 	adds.w	sl, r2, r1
 8005256:	4649      	mov	r1, r9
 8005258:	eb43 0b01 	adc.w	fp, r3, r1
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	f04f 0300 	mov.w	r3, #0
 8005264:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005268:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800526c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005270:	4692      	mov	sl, r2
 8005272:	469b      	mov	fp, r3
 8005274:	4643      	mov	r3, r8
 8005276:	eb1a 0303 	adds.w	r3, sl, r3
 800527a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800527e:	464b      	mov	r3, r9
 8005280:	eb4b 0303 	adc.w	r3, fp, r3
 8005284:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005294:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005298:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800529c:	460b      	mov	r3, r1
 800529e:	18db      	adds	r3, r3, r3
 80052a0:	643b      	str	r3, [r7, #64]	; 0x40
 80052a2:	4613      	mov	r3, r2
 80052a4:	eb42 0303 	adc.w	r3, r2, r3
 80052a8:	647b      	str	r3, [r7, #68]	; 0x44
 80052aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052b2:	f7fa ffe5 	bl	8000280 <__aeabi_uldivmod>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4611      	mov	r1, r2
 80052bc:	4b3b      	ldr	r3, [pc, #236]	; (80053ac <UART_SetConfig+0x2d4>)
 80052be:	fba3 2301 	umull	r2, r3, r3, r1
 80052c2:	095b      	lsrs	r3, r3, #5
 80052c4:	2264      	movs	r2, #100	; 0x64
 80052c6:	fb02 f303 	mul.w	r3, r2, r3
 80052ca:	1acb      	subs	r3, r1, r3
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80052d2:	4b36      	ldr	r3, [pc, #216]	; (80053ac <UART_SetConfig+0x2d4>)
 80052d4:	fba3 2302 	umull	r2, r3, r3, r2
 80052d8:	095b      	lsrs	r3, r3, #5
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052e0:	441c      	add	r4, r3
 80052e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80052f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80052f4:	4642      	mov	r2, r8
 80052f6:	464b      	mov	r3, r9
 80052f8:	1891      	adds	r1, r2, r2
 80052fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80052fc:	415b      	adcs	r3, r3
 80052fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005300:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005304:	4641      	mov	r1, r8
 8005306:	1851      	adds	r1, r2, r1
 8005308:	6339      	str	r1, [r7, #48]	; 0x30
 800530a:	4649      	mov	r1, r9
 800530c:	414b      	adcs	r3, r1
 800530e:	637b      	str	r3, [r7, #52]	; 0x34
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800531c:	4659      	mov	r1, fp
 800531e:	00cb      	lsls	r3, r1, #3
 8005320:	4651      	mov	r1, sl
 8005322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005326:	4651      	mov	r1, sl
 8005328:	00ca      	lsls	r2, r1, #3
 800532a:	4610      	mov	r0, r2
 800532c:	4619      	mov	r1, r3
 800532e:	4603      	mov	r3, r0
 8005330:	4642      	mov	r2, r8
 8005332:	189b      	adds	r3, r3, r2
 8005334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005338:	464b      	mov	r3, r9
 800533a:	460a      	mov	r2, r1
 800533c:	eb42 0303 	adc.w	r3, r2, r3
 8005340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005350:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005354:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005358:	460b      	mov	r3, r1
 800535a:	18db      	adds	r3, r3, r3
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28
 800535e:	4613      	mov	r3, r2
 8005360:	eb42 0303 	adc.w	r3, r2, r3
 8005364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800536a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800536e:	f7fa ff87 	bl	8000280 <__aeabi_uldivmod>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4b0d      	ldr	r3, [pc, #52]	; (80053ac <UART_SetConfig+0x2d4>)
 8005378:	fba3 1302 	umull	r1, r3, r3, r2
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	2164      	movs	r1, #100	; 0x64
 8005380:	fb01 f303 	mul.w	r3, r1, r3
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	3332      	adds	r3, #50	; 0x32
 800538a:	4a08      	ldr	r2, [pc, #32]	; (80053ac <UART_SetConfig+0x2d4>)
 800538c:	fba2 2303 	umull	r2, r3, r2, r3
 8005390:	095b      	lsrs	r3, r3, #5
 8005392:	f003 0207 	and.w	r2, r3, #7
 8005396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4422      	add	r2, r4
 800539e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053a0:	e105      	b.n	80055ae <UART_SetConfig+0x4d6>
 80053a2:	bf00      	nop
 80053a4:	40011000 	.word	0x40011000
 80053a8:	40011400 	.word	0x40011400
 80053ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80053be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80053c2:	4642      	mov	r2, r8
 80053c4:	464b      	mov	r3, r9
 80053c6:	1891      	adds	r1, r2, r2
 80053c8:	6239      	str	r1, [r7, #32]
 80053ca:	415b      	adcs	r3, r3
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
 80053ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053d2:	4641      	mov	r1, r8
 80053d4:	1854      	adds	r4, r2, r1
 80053d6:	4649      	mov	r1, r9
 80053d8:	eb43 0501 	adc.w	r5, r3, r1
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	00eb      	lsls	r3, r5, #3
 80053e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053ea:	00e2      	lsls	r2, r4, #3
 80053ec:	4614      	mov	r4, r2
 80053ee:	461d      	mov	r5, r3
 80053f0:	4643      	mov	r3, r8
 80053f2:	18e3      	adds	r3, r4, r3
 80053f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053f8:	464b      	mov	r3, r9
 80053fa:	eb45 0303 	adc.w	r3, r5, r3
 80053fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800540e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800541e:	4629      	mov	r1, r5
 8005420:	008b      	lsls	r3, r1, #2
 8005422:	4621      	mov	r1, r4
 8005424:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005428:	4621      	mov	r1, r4
 800542a:	008a      	lsls	r2, r1, #2
 800542c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005430:	f7fa ff26 	bl	8000280 <__aeabi_uldivmod>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4b60      	ldr	r3, [pc, #384]	; (80055bc <UART_SetConfig+0x4e4>)
 800543a:	fba3 2302 	umull	r2, r3, r3, r2
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	011c      	lsls	r4, r3, #4
 8005442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005446:	2200      	movs	r2, #0
 8005448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800544c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005450:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005454:	4642      	mov	r2, r8
 8005456:	464b      	mov	r3, r9
 8005458:	1891      	adds	r1, r2, r2
 800545a:	61b9      	str	r1, [r7, #24]
 800545c:	415b      	adcs	r3, r3
 800545e:	61fb      	str	r3, [r7, #28]
 8005460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005464:	4641      	mov	r1, r8
 8005466:	1851      	adds	r1, r2, r1
 8005468:	6139      	str	r1, [r7, #16]
 800546a:	4649      	mov	r1, r9
 800546c:	414b      	adcs	r3, r1
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800547c:	4659      	mov	r1, fp
 800547e:	00cb      	lsls	r3, r1, #3
 8005480:	4651      	mov	r1, sl
 8005482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005486:	4651      	mov	r1, sl
 8005488:	00ca      	lsls	r2, r1, #3
 800548a:	4610      	mov	r0, r2
 800548c:	4619      	mov	r1, r3
 800548e:	4603      	mov	r3, r0
 8005490:	4642      	mov	r2, r8
 8005492:	189b      	adds	r3, r3, r2
 8005494:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005498:	464b      	mov	r3, r9
 800549a:	460a      	mov	r2, r1
 800549c:	eb42 0303 	adc.w	r3, r2, r3
 80054a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80054ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80054bc:	4649      	mov	r1, r9
 80054be:	008b      	lsls	r3, r1, #2
 80054c0:	4641      	mov	r1, r8
 80054c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054c6:	4641      	mov	r1, r8
 80054c8:	008a      	lsls	r2, r1, #2
 80054ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80054ce:	f7fa fed7 	bl	8000280 <__aeabi_uldivmod>
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4b39      	ldr	r3, [pc, #228]	; (80055bc <UART_SetConfig+0x4e4>)
 80054d8:	fba3 1302 	umull	r1, r3, r3, r2
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	2164      	movs	r1, #100	; 0x64
 80054e0:	fb01 f303 	mul.w	r3, r1, r3
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	3332      	adds	r3, #50	; 0x32
 80054ea:	4a34      	ldr	r2, [pc, #208]	; (80055bc <UART_SetConfig+0x4e4>)
 80054ec:	fba2 2303 	umull	r2, r3, r2, r3
 80054f0:	095b      	lsrs	r3, r3, #5
 80054f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054f6:	441c      	add	r4, r3
 80054f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054fc:	2200      	movs	r2, #0
 80054fe:	673b      	str	r3, [r7, #112]	; 0x70
 8005500:	677a      	str	r2, [r7, #116]	; 0x74
 8005502:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005506:	4642      	mov	r2, r8
 8005508:	464b      	mov	r3, r9
 800550a:	1891      	adds	r1, r2, r2
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	415b      	adcs	r3, r3
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005516:	4641      	mov	r1, r8
 8005518:	1851      	adds	r1, r2, r1
 800551a:	6039      	str	r1, [r7, #0]
 800551c:	4649      	mov	r1, r9
 800551e:	414b      	adcs	r3, r1
 8005520:	607b      	str	r3, [r7, #4]
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800552e:	4659      	mov	r1, fp
 8005530:	00cb      	lsls	r3, r1, #3
 8005532:	4651      	mov	r1, sl
 8005534:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005538:	4651      	mov	r1, sl
 800553a:	00ca      	lsls	r2, r1, #3
 800553c:	4610      	mov	r0, r2
 800553e:	4619      	mov	r1, r3
 8005540:	4603      	mov	r3, r0
 8005542:	4642      	mov	r2, r8
 8005544:	189b      	adds	r3, r3, r2
 8005546:	66bb      	str	r3, [r7, #104]	; 0x68
 8005548:	464b      	mov	r3, r9
 800554a:	460a      	mov	r2, r1
 800554c:	eb42 0303 	adc.w	r3, r2, r3
 8005550:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	663b      	str	r3, [r7, #96]	; 0x60
 800555c:	667a      	str	r2, [r7, #100]	; 0x64
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800556a:	4649      	mov	r1, r9
 800556c:	008b      	lsls	r3, r1, #2
 800556e:	4641      	mov	r1, r8
 8005570:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005574:	4641      	mov	r1, r8
 8005576:	008a      	lsls	r2, r1, #2
 8005578:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800557c:	f7fa fe80 	bl	8000280 <__aeabi_uldivmod>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	4b0d      	ldr	r3, [pc, #52]	; (80055bc <UART_SetConfig+0x4e4>)
 8005586:	fba3 1302 	umull	r1, r3, r3, r2
 800558a:	095b      	lsrs	r3, r3, #5
 800558c:	2164      	movs	r1, #100	; 0x64
 800558e:	fb01 f303 	mul.w	r3, r1, r3
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	3332      	adds	r3, #50	; 0x32
 8005598:	4a08      	ldr	r2, [pc, #32]	; (80055bc <UART_SetConfig+0x4e4>)
 800559a:	fba2 2303 	umull	r2, r3, r2, r3
 800559e:	095b      	lsrs	r3, r3, #5
 80055a0:	f003 020f 	and.w	r2, r3, #15
 80055a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4422      	add	r2, r4
 80055ac:	609a      	str	r2, [r3, #8]
}
 80055ae:	bf00      	nop
 80055b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80055b4:	46bd      	mov	sp, r7
 80055b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ba:	bf00      	nop
 80055bc:	51eb851f 	.word	0x51eb851f

080055c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80055ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055d2:	2b84      	cmp	r3, #132	; 0x84
 80055d4:	d005      	beq.n	80055e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80055d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4413      	add	r3, r2
 80055de:	3303      	adds	r3, #3
 80055e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80055e2:	68fb      	ldr	r3, [r7, #12]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80055f4:	f000 faf6 	bl	8005be4 <vTaskStartScheduler>
  
  return osOK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	bd80      	pop	{r7, pc}

080055fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80055fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005600:	b089      	sub	sp, #36	; 0x24
 8005602:	af04      	add	r7, sp, #16
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d020      	beq.n	8005652 <osThreadCreate+0x54>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01c      	beq.n	8005652 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685c      	ldr	r4, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681d      	ldr	r5, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691e      	ldr	r6, [r3, #16]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800562a:	4618      	mov	r0, r3
 800562c:	f7ff ffc8 	bl	80055c0 <makeFreeRtosPriority>
 8005630:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800563a:	9202      	str	r2, [sp, #8]
 800563c:	9301      	str	r3, [sp, #4]
 800563e:	9100      	str	r1, [sp, #0]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	4632      	mov	r2, r6
 8005644:	4629      	mov	r1, r5
 8005646:	4620      	mov	r0, r4
 8005648:	f000 f8ed 	bl	8005826 <xTaskCreateStatic>
 800564c:	4603      	mov	r3, r0
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	e01c      	b.n	800568c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685c      	ldr	r4, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800565e:	b29e      	uxth	r6, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff ffaa 	bl	80055c0 <makeFreeRtosPriority>
 800566c:	4602      	mov	r2, r0
 800566e:	f107 030c 	add.w	r3, r7, #12
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	9200      	str	r2, [sp, #0]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	4632      	mov	r2, r6
 800567a:	4629      	mov	r1, r5
 800567c:	4620      	mov	r0, r4
 800567e:	f000 f92f 	bl	80058e0 <xTaskCreate>
 8005682:	4603      	mov	r3, r0
 8005684:	2b01      	cmp	r3, #1
 8005686:	d001      	beq.n	800568c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005688:	2300      	movs	r3, #0
 800568a:	e000      	b.n	800568e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800568c:	68fb      	ldr	r3, [r7, #12]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005696 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b084      	sub	sp, #16
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <osDelay+0x16>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	e000      	b.n	80056ae <osDelay+0x18>
 80056ac:	2301      	movs	r3, #1
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fa64 	bl	8005b7c <vTaskDelay>
  
  return osOK;
 80056b4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f103 0208 	add.w	r2, r3, #8
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f103 0208 	add.w	r2, r3, #8
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f103 0208 	add.w	r2, r3, #8
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056f2:	bf00      	nop
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	601a      	str	r2, [r3, #0]
}
 8005754:	bf00      	nop
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005776:	d103      	bne.n	8005780 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	e00c      	b.n	800579a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3308      	adds	r3, #8
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	e002      	b.n	800578e <vListInsert+0x2e>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	429a      	cmp	r2, r3
 8005798:	d2f6      	bcs.n	8005788 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	601a      	str	r2, [r3, #0]
}
 80057c6:	bf00      	nop
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6892      	ldr	r2, [r2, #8]
 80057e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	6852      	ldr	r2, [r2, #4]
 80057f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d103      	bne.n	8005806 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689a      	ldr	r2, [r3, #8]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	1e5a      	subs	r2, r3, #1
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005826:	b580      	push	{r7, lr}
 8005828:	b08e      	sub	sp, #56	; 0x38
 800582a:	af04      	add	r7, sp, #16
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
 8005832:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10a      	bne.n	8005850 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800584c:	bf00      	nop
 800584e:	e7fe      	b.n	800584e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10a      	bne.n	800586c <xTaskCreateStatic+0x46>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	61fb      	str	r3, [r7, #28]
}
 8005868:	bf00      	nop
 800586a:	e7fe      	b.n	800586a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800586c:	23b4      	movs	r3, #180	; 0xb4
 800586e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	2bb4      	cmp	r3, #180	; 0xb4
 8005874:	d00a      	beq.n	800588c <xTaskCreateStatic+0x66>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	61bb      	str	r3, [r7, #24]
}
 8005888:	bf00      	nop
 800588a:	e7fe      	b.n	800588a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800588c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005890:	2b00      	cmp	r3, #0
 8005892:	d01e      	beq.n	80058d2 <xTaskCreateStatic+0xac>
 8005894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005896:	2b00      	cmp	r3, #0
 8005898:	d01b      	beq.n	80058d2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800589a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058ac:	2300      	movs	r3, #0
 80058ae:	9303      	str	r3, [sp, #12]
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	9302      	str	r3, [sp, #8]
 80058b4:	f107 0314 	add.w	r3, r7, #20
 80058b8:	9301      	str	r3, [sp, #4]
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	68b9      	ldr	r1, [r7, #8]
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 f851 	bl	800596c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058cc:	f000 f8ec 	bl	8005aa8 <prvAddNewTaskToReadyList>
 80058d0:	e001      	b.n	80058d6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058d6:	697b      	ldr	r3, [r7, #20]
	}
 80058d8:	4618      	mov	r0, r3
 80058da:	3728      	adds	r7, #40	; 0x28
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08c      	sub	sp, #48	; 0x30
 80058e4:	af04      	add	r7, sp, #16
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	4613      	mov	r3, r2
 80058ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058f0:	88fb      	ldrh	r3, [r7, #6]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 feef 	bl	80066d8 <pvPortMalloc>
 80058fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00e      	beq.n	8005920 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005902:	20b4      	movs	r0, #180	; 0xb4
 8005904:	f000 fee8 	bl	80066d8 <pvPortMalloc>
 8005908:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	631a      	str	r2, [r3, #48]	; 0x30
 8005916:	e005      	b.n	8005924 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005918:	6978      	ldr	r0, [r7, #20]
 800591a:	f000 ffa9 	bl	8006870 <vPortFree>
 800591e:	e001      	b.n	8005924 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005920:	2300      	movs	r3, #0
 8005922:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d017      	beq.n	800595a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005932:	88fa      	ldrh	r2, [r7, #6]
 8005934:	2300      	movs	r3, #0
 8005936:	9303      	str	r3, [sp, #12]
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	9302      	str	r3, [sp, #8]
 800593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f80f 	bl	800596c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800594e:	69f8      	ldr	r0, [r7, #28]
 8005950:	f000 f8aa 	bl	8005aa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005954:	2301      	movs	r3, #1
 8005956:	61bb      	str	r3, [r7, #24]
 8005958:	e002      	b.n	8005960 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800595a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800595e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005960:	69bb      	ldr	r3, [r7, #24]
	}
 8005962:	4618      	mov	r0, r3
 8005964:	3720      	adds	r7, #32
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b088      	sub	sp, #32
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005984:	3b01      	subs	r3, #1
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	f023 0307 	bic.w	r3, r3, #7
 8005992:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	617b      	str	r3, [r7, #20]
}
 80059b0:	bf00      	nop
 80059b2:	e7fe      	b.n	80059b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d01f      	beq.n	80059fa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
 80059be:	e012      	b.n	80059e6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	4413      	add	r3, r2
 80059c6:	7819      	ldrb	r1, [r3, #0]
 80059c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	4413      	add	r3, r2
 80059ce:	3334      	adds	r3, #52	; 0x34
 80059d0:	460a      	mov	r2, r1
 80059d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	4413      	add	r3, r2
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d006      	beq.n	80059ee <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	3301      	adds	r3, #1
 80059e4:	61fb      	str	r3, [r7, #28]
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	2b0f      	cmp	r3, #15
 80059ea:	d9e9      	bls.n	80059c0 <prvInitialiseNewTask+0x54>
 80059ec:	e000      	b.n	80059f0 <prvInitialiseNewTask+0x84>
			{
				break;
 80059ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059f8:	e003      	b.n	8005a02 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	2b06      	cmp	r3, #6
 8005a06:	d901      	bls.n	8005a0c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a08:	2306      	movs	r3, #6
 8005a0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a16:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	3304      	adds	r3, #4
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff fe6b 	bl	80056fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2a:	3318      	adds	r3, #24
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff fe66 	bl	80056fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3a:	f1c3 0207 	rsb	r2, r3, #7
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	334c      	adds	r3, #76	; 0x4c
 8005a5c:	2260      	movs	r2, #96	; 0x60
 8005a5e:	2100      	movs	r1, #0
 8005a60:	4618      	mov	r0, r3
 8005a62:	f001 f946 	bl	8006cf2 <memset>
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	4a0c      	ldr	r2, [pc, #48]	; (8005a9c <prvInitialiseNewTask+0x130>)
 8005a6a:	651a      	str	r2, [r3, #80]	; 0x50
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	4a0c      	ldr	r2, [pc, #48]	; (8005aa0 <prvInitialiseNewTask+0x134>)
 8005a70:	655a      	str	r2, [r3, #84]	; 0x54
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	4a0b      	ldr	r2, [pc, #44]	; (8005aa4 <prvInitialiseNewTask+0x138>)
 8005a76:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	68f9      	ldr	r1, [r7, #12]
 8005a7c:	69b8      	ldr	r0, [r7, #24]
 8005a7e:	f000 fc1f 	bl	80062c0 <pxPortInitialiseStack>
 8005a82:	4602      	mov	r2, r0
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a94:	bf00      	nop
 8005a96:	3720      	adds	r7, #32
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	08007e90 	.word	0x08007e90
 8005aa0:	08007eb0 	.word	0x08007eb0
 8005aa4:	08007e70 	.word	0x08007e70

08005aa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ab0:	f000 fd30 	bl	8006514 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ab4:	4b2a      	ldr	r3, [pc, #168]	; (8005b60 <prvAddNewTaskToReadyList+0xb8>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	4a29      	ldr	r2, [pc, #164]	; (8005b60 <prvAddNewTaskToReadyList+0xb8>)
 8005abc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005abe:	4b29      	ldr	r3, [pc, #164]	; (8005b64 <prvAddNewTaskToReadyList+0xbc>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d109      	bne.n	8005ada <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ac6:	4a27      	ldr	r2, [pc, #156]	; (8005b64 <prvAddNewTaskToReadyList+0xbc>)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005acc:	4b24      	ldr	r3, [pc, #144]	; (8005b60 <prvAddNewTaskToReadyList+0xb8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d110      	bne.n	8005af6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ad4:	f000 facc 	bl	8006070 <prvInitialiseTaskLists>
 8005ad8:	e00d      	b.n	8005af6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ada:	4b23      	ldr	r3, [pc, #140]	; (8005b68 <prvAddNewTaskToReadyList+0xc0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d109      	bne.n	8005af6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ae2:	4b20      	ldr	r3, [pc, #128]	; (8005b64 <prvAddNewTaskToReadyList+0xbc>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d802      	bhi.n	8005af6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005af0:	4a1c      	ldr	r2, [pc, #112]	; (8005b64 <prvAddNewTaskToReadyList+0xbc>)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005af6:	4b1d      	ldr	r3, [pc, #116]	; (8005b6c <prvAddNewTaskToReadyList+0xc4>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3301      	adds	r3, #1
 8005afc:	4a1b      	ldr	r2, [pc, #108]	; (8005b6c <prvAddNewTaskToReadyList+0xc4>)
 8005afe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	2201      	movs	r2, #1
 8005b06:	409a      	lsls	r2, r3
 8005b08:	4b19      	ldr	r3, [pc, #100]	; (8005b70 <prvAddNewTaskToReadyList+0xc8>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	4a18      	ldr	r2, [pc, #96]	; (8005b70 <prvAddNewTaskToReadyList+0xc8>)
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4a15      	ldr	r2, [pc, #84]	; (8005b74 <prvAddNewTaskToReadyList+0xcc>)
 8005b20:	441a      	add	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3304      	adds	r3, #4
 8005b26:	4619      	mov	r1, r3
 8005b28:	4610      	mov	r0, r2
 8005b2a:	f7ff fdf5 	bl	8005718 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b2e:	f000 fd21 	bl	8006574 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b32:	4b0d      	ldr	r3, [pc, #52]	; (8005b68 <prvAddNewTaskToReadyList+0xc0>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00e      	beq.n	8005b58 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b3a:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <prvAddNewTaskToReadyList+0xbc>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d207      	bcs.n	8005b58 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b48:	4b0b      	ldr	r3, [pc, #44]	; (8005b78 <prvAddNewTaskToReadyList+0xd0>)
 8005b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b58:	bf00      	nop
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	20000578 	.word	0x20000578
 8005b64:	20000478 	.word	0x20000478
 8005b68:	20000584 	.word	0x20000584
 8005b6c:	20000594 	.word	0x20000594
 8005b70:	20000580 	.word	0x20000580
 8005b74:	2000047c 	.word	0x2000047c
 8005b78:	e000ed04 	.word	0xe000ed04

08005b7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b84:	2300      	movs	r3, #0
 8005b86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d017      	beq.n	8005bbe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b8e:	4b13      	ldr	r3, [pc, #76]	; (8005bdc <vTaskDelay+0x60>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00a      	beq.n	8005bac <vTaskDelay+0x30>
	__asm volatile
 8005b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	60bb      	str	r3, [r7, #8]
}
 8005ba8:	bf00      	nop
 8005baa:	e7fe      	b.n	8005baa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005bac:	f000 f884 	bl	8005cb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fb1e 	bl	80061f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bb8:	f000 f88c 	bl	8005cd4 <xTaskResumeAll>
 8005bbc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d107      	bne.n	8005bd4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005bc4:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <vTaskDelay+0x64>)
 8005bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bd4:	bf00      	nop
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	200005a0 	.word	0x200005a0
 8005be0:	e000ed04 	.word	0xe000ed04

08005be4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	; 0x28
 8005be8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bf2:	463a      	mov	r2, r7
 8005bf4:	1d39      	adds	r1, r7, #4
 8005bf6:	f107 0308 	add.w	r3, r7, #8
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fa fdc4 	bl	8000788 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	9202      	str	r2, [sp, #8]
 8005c08:	9301      	str	r3, [sp, #4]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	460a      	mov	r2, r1
 8005c12:	4921      	ldr	r1, [pc, #132]	; (8005c98 <vTaskStartScheduler+0xb4>)
 8005c14:	4821      	ldr	r0, [pc, #132]	; (8005c9c <vTaskStartScheduler+0xb8>)
 8005c16:	f7ff fe06 	bl	8005826 <xTaskCreateStatic>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	4a20      	ldr	r2, [pc, #128]	; (8005ca0 <vTaskStartScheduler+0xbc>)
 8005c1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c20:	4b1f      	ldr	r3, [pc, #124]	; (8005ca0 <vTaskStartScheduler+0xbc>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	e001      	b.n	8005c32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d11b      	bne.n	8005c70 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	613b      	str	r3, [r7, #16]
}
 8005c4a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c4c:	4b15      	ldr	r3, [pc, #84]	; (8005ca4 <vTaskStartScheduler+0xc0>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	334c      	adds	r3, #76	; 0x4c
 8005c52:	4a15      	ldr	r2, [pc, #84]	; (8005ca8 <vTaskStartScheduler+0xc4>)
 8005c54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c56:	4b15      	ldr	r3, [pc, #84]	; (8005cac <vTaskStartScheduler+0xc8>)
 8005c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c5e:	4b14      	ldr	r3, [pc, #80]	; (8005cb0 <vTaskStartScheduler+0xcc>)
 8005c60:	2201      	movs	r2, #1
 8005c62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c64:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <vTaskStartScheduler+0xd0>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c6a:	f000 fbb1 	bl	80063d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c6e:	e00e      	b.n	8005c8e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c76:	d10a      	bne.n	8005c8e <vTaskStartScheduler+0xaa>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	60fb      	str	r3, [r7, #12]
}
 8005c8a:	bf00      	nop
 8005c8c:	e7fe      	b.n	8005c8c <vTaskStartScheduler+0xa8>
}
 8005c8e:	bf00      	nop
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	08007e50 	.word	0x08007e50
 8005c9c:	08006041 	.word	0x08006041
 8005ca0:	2000059c 	.word	0x2000059c
 8005ca4:	20000478 	.word	0x20000478
 8005ca8:	20000010 	.word	0x20000010
 8005cac:	20000598 	.word	0x20000598
 8005cb0:	20000584 	.word	0x20000584
 8005cb4:	2000057c 	.word	0x2000057c

08005cb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005cb8:	b480      	push	{r7}
 8005cba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005cbc:	4b04      	ldr	r3, [pc, #16]	; (8005cd0 <vTaskSuspendAll+0x18>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	4a03      	ldr	r2, [pc, #12]	; (8005cd0 <vTaskSuspendAll+0x18>)
 8005cc4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005cc6:	bf00      	nop
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	200005a0 	.word	0x200005a0

08005cd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ce2:	4b41      	ldr	r3, [pc, #260]	; (8005de8 <xTaskResumeAll+0x114>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10a      	bne.n	8005d00 <xTaskResumeAll+0x2c>
	__asm volatile
 8005cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	603b      	str	r3, [r7, #0]
}
 8005cfc:	bf00      	nop
 8005cfe:	e7fe      	b.n	8005cfe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d00:	f000 fc08 	bl	8006514 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d04:	4b38      	ldr	r3, [pc, #224]	; (8005de8 <xTaskResumeAll+0x114>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	4a37      	ldr	r2, [pc, #220]	; (8005de8 <xTaskResumeAll+0x114>)
 8005d0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d0e:	4b36      	ldr	r3, [pc, #216]	; (8005de8 <xTaskResumeAll+0x114>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d161      	bne.n	8005dda <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d16:	4b35      	ldr	r3, [pc, #212]	; (8005dec <xTaskResumeAll+0x118>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d05d      	beq.n	8005dda <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d1e:	e02e      	b.n	8005d7e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d20:	4b33      	ldr	r3, [pc, #204]	; (8005df0 <xTaskResumeAll+0x11c>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3318      	adds	r3, #24
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff fd50 	bl	80057d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3304      	adds	r3, #4
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7ff fd4b 	bl	80057d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	2201      	movs	r2, #1
 8005d42:	409a      	lsls	r2, r3
 8005d44:	4b2b      	ldr	r3, [pc, #172]	; (8005df4 <xTaskResumeAll+0x120>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	4a2a      	ldr	r2, [pc, #168]	; (8005df4 <xTaskResumeAll+0x120>)
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d52:	4613      	mov	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4a27      	ldr	r2, [pc, #156]	; (8005df8 <xTaskResumeAll+0x124>)
 8005d5c:	441a      	add	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3304      	adds	r3, #4
 8005d62:	4619      	mov	r1, r3
 8005d64:	4610      	mov	r0, r2
 8005d66:	f7ff fcd7 	bl	8005718 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6e:	4b23      	ldr	r3, [pc, #140]	; (8005dfc <xTaskResumeAll+0x128>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d302      	bcc.n	8005d7e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005d78:	4b21      	ldr	r3, [pc, #132]	; (8005e00 <xTaskResumeAll+0x12c>)
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d7e:	4b1c      	ldr	r3, [pc, #112]	; (8005df0 <xTaskResumeAll+0x11c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1cc      	bne.n	8005d20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d8c:	f000 fa12 	bl	80061b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d90:	4b1c      	ldr	r3, [pc, #112]	; (8005e04 <xTaskResumeAll+0x130>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d010      	beq.n	8005dbe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d9c:	f000 f836 	bl	8005e0c <xTaskIncrementTick>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005da6:	4b16      	ldr	r3, [pc, #88]	; (8005e00 <xTaskResumeAll+0x12c>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3b01      	subs	r3, #1
 8005db0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1f1      	bne.n	8005d9c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005db8:	4b12      	ldr	r3, [pc, #72]	; (8005e04 <xTaskResumeAll+0x130>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005dbe:	4b10      	ldr	r3, [pc, #64]	; (8005e00 <xTaskResumeAll+0x12c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d009      	beq.n	8005dda <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005dca:	4b0f      	ldr	r3, [pc, #60]	; (8005e08 <xTaskResumeAll+0x134>)
 8005dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dda:	f000 fbcb 	bl	8006574 <vPortExitCritical>

	return xAlreadyYielded;
 8005dde:	68bb      	ldr	r3, [r7, #8]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	200005a0 	.word	0x200005a0
 8005dec:	20000578 	.word	0x20000578
 8005df0:	20000538 	.word	0x20000538
 8005df4:	20000580 	.word	0x20000580
 8005df8:	2000047c 	.word	0x2000047c
 8005dfc:	20000478 	.word	0x20000478
 8005e00:	2000058c 	.word	0x2000058c
 8005e04:	20000588 	.word	0x20000588
 8005e08:	e000ed04 	.word	0xe000ed04

08005e0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e16:	4b4e      	ldr	r3, [pc, #312]	; (8005f50 <xTaskIncrementTick+0x144>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f040 808e 	bne.w	8005f3c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e20:	4b4c      	ldr	r3, [pc, #304]	; (8005f54 <xTaskIncrementTick+0x148>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3301      	adds	r3, #1
 8005e26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e28:	4a4a      	ldr	r2, [pc, #296]	; (8005f54 <xTaskIncrementTick+0x148>)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d120      	bne.n	8005e76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e34:	4b48      	ldr	r3, [pc, #288]	; (8005f58 <xTaskIncrementTick+0x14c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <xTaskIncrementTick+0x48>
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	603b      	str	r3, [r7, #0]
}
 8005e50:	bf00      	nop
 8005e52:	e7fe      	b.n	8005e52 <xTaskIncrementTick+0x46>
 8005e54:	4b40      	ldr	r3, [pc, #256]	; (8005f58 <xTaskIncrementTick+0x14c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	4b40      	ldr	r3, [pc, #256]	; (8005f5c <xTaskIncrementTick+0x150>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a3e      	ldr	r2, [pc, #248]	; (8005f58 <xTaskIncrementTick+0x14c>)
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	4a3e      	ldr	r2, [pc, #248]	; (8005f5c <xTaskIncrementTick+0x150>)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	4b3d      	ldr	r3, [pc, #244]	; (8005f60 <xTaskIncrementTick+0x154>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	4a3c      	ldr	r2, [pc, #240]	; (8005f60 <xTaskIncrementTick+0x154>)
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	f000 f99f 	bl	80061b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e76:	4b3b      	ldr	r3, [pc, #236]	; (8005f64 <xTaskIncrementTick+0x158>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d348      	bcc.n	8005f12 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e80:	4b35      	ldr	r3, [pc, #212]	; (8005f58 <xTaskIncrementTick+0x14c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d104      	bne.n	8005e94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e8a:	4b36      	ldr	r3, [pc, #216]	; (8005f64 <xTaskIncrementTick+0x158>)
 8005e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e90:	601a      	str	r2, [r3, #0]
					break;
 8005e92:	e03e      	b.n	8005f12 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e94:	4b30      	ldr	r3, [pc, #192]	; (8005f58 <xTaskIncrementTick+0x14c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d203      	bcs.n	8005eb4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005eac:	4a2d      	ldr	r2, [pc, #180]	; (8005f64 <xTaskIncrementTick+0x158>)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005eb2:	e02e      	b.n	8005f12 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7ff fc8a 	bl	80057d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d004      	beq.n	8005ed0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	3318      	adds	r3, #24
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff fc81 	bl	80057d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	4b23      	ldr	r3, [pc, #140]	; (8005f68 <xTaskIncrementTick+0x15c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	4a22      	ldr	r2, [pc, #136]	; (8005f68 <xTaskIncrementTick+0x15c>)
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4a1f      	ldr	r2, [pc, #124]	; (8005f6c <xTaskIncrementTick+0x160>)
 8005ef0:	441a      	add	r2, r3
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4610      	mov	r0, r2
 8005efa:	f7ff fc0d 	bl	8005718 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f02:	4b1b      	ldr	r3, [pc, #108]	; (8005f70 <xTaskIncrementTick+0x164>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d3b9      	bcc.n	8005e80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f10:	e7b6      	b.n	8005e80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f12:	4b17      	ldr	r3, [pc, #92]	; (8005f70 <xTaskIncrementTick+0x164>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f18:	4914      	ldr	r1, [pc, #80]	; (8005f6c <xTaskIncrementTick+0x160>)
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	440b      	add	r3, r1
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d901      	bls.n	8005f2e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f2e:	4b11      	ldr	r3, [pc, #68]	; (8005f74 <xTaskIncrementTick+0x168>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005f36:	2301      	movs	r3, #1
 8005f38:	617b      	str	r3, [r7, #20]
 8005f3a:	e004      	b.n	8005f46 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f3c:	4b0e      	ldr	r3, [pc, #56]	; (8005f78 <xTaskIncrementTick+0x16c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3301      	adds	r3, #1
 8005f42:	4a0d      	ldr	r2, [pc, #52]	; (8005f78 <xTaskIncrementTick+0x16c>)
 8005f44:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f46:	697b      	ldr	r3, [r7, #20]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3718      	adds	r7, #24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	200005a0 	.word	0x200005a0
 8005f54:	2000057c 	.word	0x2000057c
 8005f58:	20000530 	.word	0x20000530
 8005f5c:	20000534 	.word	0x20000534
 8005f60:	20000590 	.word	0x20000590
 8005f64:	20000598 	.word	0x20000598
 8005f68:	20000580 	.word	0x20000580
 8005f6c:	2000047c 	.word	0x2000047c
 8005f70:	20000478 	.word	0x20000478
 8005f74:	2000058c 	.word	0x2000058c
 8005f78:	20000588 	.word	0x20000588

08005f7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f82:	4b29      	ldr	r3, [pc, #164]	; (8006028 <vTaskSwitchContext+0xac>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f8a:	4b28      	ldr	r3, [pc, #160]	; (800602c <vTaskSwitchContext+0xb0>)
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f90:	e044      	b.n	800601c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005f92:	4b26      	ldr	r3, [pc, #152]	; (800602c <vTaskSwitchContext+0xb0>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f98:	4b25      	ldr	r3, [pc, #148]	; (8006030 <vTaskSwitchContext+0xb4>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	fab3 f383 	clz	r3, r3
 8005fa4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005fa6:	7afb      	ldrb	r3, [r7, #11]
 8005fa8:	f1c3 031f 	rsb	r3, r3, #31
 8005fac:	617b      	str	r3, [r7, #20]
 8005fae:	4921      	ldr	r1, [pc, #132]	; (8006034 <vTaskSwitchContext+0xb8>)
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	440b      	add	r3, r1
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10a      	bne.n	8005fd8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	607b      	str	r3, [r7, #4]
}
 8005fd4:	bf00      	nop
 8005fd6:	e7fe      	b.n	8005fd6 <vTaskSwitchContext+0x5a>
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4a14      	ldr	r2, [pc, #80]	; (8006034 <vTaskSwitchContext+0xb8>)
 8005fe4:	4413      	add	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	605a      	str	r2, [r3, #4]
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	3308      	adds	r3, #8
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d104      	bne.n	8006008 <vTaskSwitchContext+0x8c>
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	605a      	str	r2, [r3, #4]
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	4a0a      	ldr	r2, [pc, #40]	; (8006038 <vTaskSwitchContext+0xbc>)
 8006010:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006012:	4b09      	ldr	r3, [pc, #36]	; (8006038 <vTaskSwitchContext+0xbc>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	334c      	adds	r3, #76	; 0x4c
 8006018:	4a08      	ldr	r2, [pc, #32]	; (800603c <vTaskSwitchContext+0xc0>)
 800601a:	6013      	str	r3, [r2, #0]
}
 800601c:	bf00      	nop
 800601e:	371c      	adds	r7, #28
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr
 8006028:	200005a0 	.word	0x200005a0
 800602c:	2000058c 	.word	0x2000058c
 8006030:	20000580 	.word	0x20000580
 8006034:	2000047c 	.word	0x2000047c
 8006038:	20000478 	.word	0x20000478
 800603c:	20000010 	.word	0x20000010

08006040 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006048:	f000 f852 	bl	80060f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800604c:	4b06      	ldr	r3, [pc, #24]	; (8006068 <prvIdleTask+0x28>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d9f9      	bls.n	8006048 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006054:	4b05      	ldr	r3, [pc, #20]	; (800606c <prvIdleTask+0x2c>)
 8006056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006064:	e7f0      	b.n	8006048 <prvIdleTask+0x8>
 8006066:	bf00      	nop
 8006068:	2000047c 	.word	0x2000047c
 800606c:	e000ed04 	.word	0xe000ed04

08006070 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006076:	2300      	movs	r3, #0
 8006078:	607b      	str	r3, [r7, #4]
 800607a:	e00c      	b.n	8006096 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	4613      	mov	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4a12      	ldr	r2, [pc, #72]	; (80060d0 <prvInitialiseTaskLists+0x60>)
 8006088:	4413      	add	r3, r2
 800608a:	4618      	mov	r0, r3
 800608c:	f7ff fb17 	bl	80056be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3301      	adds	r3, #1
 8006094:	607b      	str	r3, [r7, #4]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b06      	cmp	r3, #6
 800609a:	d9ef      	bls.n	800607c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800609c:	480d      	ldr	r0, [pc, #52]	; (80060d4 <prvInitialiseTaskLists+0x64>)
 800609e:	f7ff fb0e 	bl	80056be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060a2:	480d      	ldr	r0, [pc, #52]	; (80060d8 <prvInitialiseTaskLists+0x68>)
 80060a4:	f7ff fb0b 	bl	80056be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060a8:	480c      	ldr	r0, [pc, #48]	; (80060dc <prvInitialiseTaskLists+0x6c>)
 80060aa:	f7ff fb08 	bl	80056be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060ae:	480c      	ldr	r0, [pc, #48]	; (80060e0 <prvInitialiseTaskLists+0x70>)
 80060b0:	f7ff fb05 	bl	80056be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060b4:	480b      	ldr	r0, [pc, #44]	; (80060e4 <prvInitialiseTaskLists+0x74>)
 80060b6:	f7ff fb02 	bl	80056be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060ba:	4b0b      	ldr	r3, [pc, #44]	; (80060e8 <prvInitialiseTaskLists+0x78>)
 80060bc:	4a05      	ldr	r2, [pc, #20]	; (80060d4 <prvInitialiseTaskLists+0x64>)
 80060be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060c0:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <prvInitialiseTaskLists+0x7c>)
 80060c2:	4a05      	ldr	r2, [pc, #20]	; (80060d8 <prvInitialiseTaskLists+0x68>)
 80060c4:	601a      	str	r2, [r3, #0]
}
 80060c6:	bf00      	nop
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	2000047c 	.word	0x2000047c
 80060d4:	20000508 	.word	0x20000508
 80060d8:	2000051c 	.word	0x2000051c
 80060dc:	20000538 	.word	0x20000538
 80060e0:	2000054c 	.word	0x2000054c
 80060e4:	20000564 	.word	0x20000564
 80060e8:	20000530 	.word	0x20000530
 80060ec:	20000534 	.word	0x20000534

080060f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060f6:	e019      	b.n	800612c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060f8:	f000 fa0c 	bl	8006514 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060fc:	4b10      	ldr	r3, [pc, #64]	; (8006140 <prvCheckTasksWaitingTermination+0x50>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	3304      	adds	r3, #4
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff fb62 	bl	80057d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800610e:	4b0d      	ldr	r3, [pc, #52]	; (8006144 <prvCheckTasksWaitingTermination+0x54>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3b01      	subs	r3, #1
 8006114:	4a0b      	ldr	r2, [pc, #44]	; (8006144 <prvCheckTasksWaitingTermination+0x54>)
 8006116:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006118:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <prvCheckTasksWaitingTermination+0x58>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3b01      	subs	r3, #1
 800611e:	4a0a      	ldr	r2, [pc, #40]	; (8006148 <prvCheckTasksWaitingTermination+0x58>)
 8006120:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006122:	f000 fa27 	bl	8006574 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f810 	bl	800614c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800612c:	4b06      	ldr	r3, [pc, #24]	; (8006148 <prvCheckTasksWaitingTermination+0x58>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1e1      	bne.n	80060f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	2000054c 	.word	0x2000054c
 8006144:	20000578 	.word	0x20000578
 8006148:	20000560 	.word	0x20000560

0800614c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	334c      	adds	r3, #76	; 0x4c
 8006158:	4618      	mov	r0, r3
 800615a:	f000 ff03 	bl	8006f64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006164:	2b00      	cmp	r3, #0
 8006166:	d108      	bne.n	800617a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fb7f 	bl	8006870 <vPortFree>
				vPortFree( pxTCB );
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fb7c 	bl	8006870 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006178:	e018      	b.n	80061ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006180:	2b01      	cmp	r3, #1
 8006182:	d103      	bne.n	800618c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fb73 	bl	8006870 <vPortFree>
	}
 800618a:	e00f      	b.n	80061ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006192:	2b02      	cmp	r3, #2
 8006194:	d00a      	beq.n	80061ac <prvDeleteTCB+0x60>
	__asm volatile
 8006196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	60fb      	str	r3, [r7, #12]
}
 80061a8:	bf00      	nop
 80061aa:	e7fe      	b.n	80061aa <prvDeleteTCB+0x5e>
	}
 80061ac:	bf00      	nop
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ba:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <prvResetNextTaskUnblockTime+0x38>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d104      	bne.n	80061ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061c4:	4b0a      	ldr	r3, [pc, #40]	; (80061f0 <prvResetNextTaskUnblockTime+0x3c>)
 80061c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061cc:	e008      	b.n	80061e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ce:	4b07      	ldr	r3, [pc, #28]	; (80061ec <prvResetNextTaskUnblockTime+0x38>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	4a04      	ldr	r2, [pc, #16]	; (80061f0 <prvResetNextTaskUnblockTime+0x3c>)
 80061de:	6013      	str	r3, [r2, #0]
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	20000530 	.word	0x20000530
 80061f0:	20000598 	.word	0x20000598

080061f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061fe:	4b29      	ldr	r3, [pc, #164]	; (80062a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006204:	4b28      	ldr	r3, [pc, #160]	; (80062a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3304      	adds	r3, #4
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fae1 	bl	80057d2 <uxListRemove>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10b      	bne.n	800622e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006216:	4b24      	ldr	r3, [pc, #144]	; (80062a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	2201      	movs	r2, #1
 800621e:	fa02 f303 	lsl.w	r3, r2, r3
 8006222:	43da      	mvns	r2, r3
 8006224:	4b21      	ldr	r3, [pc, #132]	; (80062ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4013      	ands	r3, r2
 800622a:	4a20      	ldr	r2, [pc, #128]	; (80062ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800622c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006234:	d10a      	bne.n	800624c <prvAddCurrentTaskToDelayedList+0x58>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d007      	beq.n	800624c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800623c:	4b1a      	ldr	r3, [pc, #104]	; (80062a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3304      	adds	r3, #4
 8006242:	4619      	mov	r1, r3
 8006244:	481a      	ldr	r0, [pc, #104]	; (80062b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006246:	f7ff fa67 	bl	8005718 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800624a:	e026      	b.n	800629a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4413      	add	r3, r2
 8006252:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006254:	4b14      	ldr	r3, [pc, #80]	; (80062a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	429a      	cmp	r2, r3
 8006262:	d209      	bcs.n	8006278 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006264:	4b13      	ldr	r3, [pc, #76]	; (80062b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	4b0f      	ldr	r3, [pc, #60]	; (80062a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3304      	adds	r3, #4
 800626e:	4619      	mov	r1, r3
 8006270:	4610      	mov	r0, r2
 8006272:	f7ff fa75 	bl	8005760 <vListInsert>
}
 8006276:	e010      	b.n	800629a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006278:	4b0f      	ldr	r3, [pc, #60]	; (80062b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	4b0a      	ldr	r3, [pc, #40]	; (80062a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3304      	adds	r3, #4
 8006282:	4619      	mov	r1, r3
 8006284:	4610      	mov	r0, r2
 8006286:	f7ff fa6b 	bl	8005760 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800628a:	4b0c      	ldr	r3, [pc, #48]	; (80062bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	429a      	cmp	r2, r3
 8006292:	d202      	bcs.n	800629a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006294:	4a09      	ldr	r2, [pc, #36]	; (80062bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	6013      	str	r3, [r2, #0]
}
 800629a:	bf00      	nop
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	2000057c 	.word	0x2000057c
 80062a8:	20000478 	.word	0x20000478
 80062ac:	20000580 	.word	0x20000580
 80062b0:	20000564 	.word	0x20000564
 80062b4:	20000534 	.word	0x20000534
 80062b8:	20000530 	.word	0x20000530
 80062bc:	20000598 	.word	0x20000598

080062c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3b04      	subs	r3, #4
 80062d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3b04      	subs	r3, #4
 80062de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f023 0201 	bic.w	r2, r3, #1
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3b04      	subs	r3, #4
 80062ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062f0:	4a0c      	ldr	r2, [pc, #48]	; (8006324 <pxPortInitialiseStack+0x64>)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	3b14      	subs	r3, #20
 80062fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	3b04      	subs	r3, #4
 8006306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f06f 0202 	mvn.w	r2, #2
 800630e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	3b20      	subs	r3, #32
 8006314:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006316:	68fb      	ldr	r3, [r7, #12]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	08006329 	.word	0x08006329

08006328 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800632e:	2300      	movs	r3, #0
 8006330:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006332:	4b12      	ldr	r3, [pc, #72]	; (800637c <prvTaskExitError+0x54>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800633a:	d00a      	beq.n	8006352 <prvTaskExitError+0x2a>
	__asm volatile
 800633c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	60fb      	str	r3, [r7, #12]
}
 800634e:	bf00      	nop
 8006350:	e7fe      	b.n	8006350 <prvTaskExitError+0x28>
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	60bb      	str	r3, [r7, #8]
}
 8006364:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006366:	bf00      	nop
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d0fc      	beq.n	8006368 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800636e:	bf00      	nop
 8006370:	bf00      	nop
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	2000000c 	.word	0x2000000c

08006380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006380:	4b07      	ldr	r3, [pc, #28]	; (80063a0 <pxCurrentTCBConst2>)
 8006382:	6819      	ldr	r1, [r3, #0]
 8006384:	6808      	ldr	r0, [r1, #0]
 8006386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800638a:	f380 8809 	msr	PSP, r0
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f04f 0000 	mov.w	r0, #0
 8006396:	f380 8811 	msr	BASEPRI, r0
 800639a:	4770      	bx	lr
 800639c:	f3af 8000 	nop.w

080063a0 <pxCurrentTCBConst2>:
 80063a0:	20000478 	.word	0x20000478
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop

080063a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80063a8:	4808      	ldr	r0, [pc, #32]	; (80063cc <prvPortStartFirstTask+0x24>)
 80063aa:	6800      	ldr	r0, [r0, #0]
 80063ac:	6800      	ldr	r0, [r0, #0]
 80063ae:	f380 8808 	msr	MSP, r0
 80063b2:	f04f 0000 	mov.w	r0, #0
 80063b6:	f380 8814 	msr	CONTROL, r0
 80063ba:	b662      	cpsie	i
 80063bc:	b661      	cpsie	f
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	df00      	svc	0
 80063c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063ca:	bf00      	nop
 80063cc:	e000ed08 	.word	0xe000ed08

080063d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80063d6:	4b46      	ldr	r3, [pc, #280]	; (80064f0 <xPortStartScheduler+0x120>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a46      	ldr	r2, [pc, #280]	; (80064f4 <xPortStartScheduler+0x124>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d10a      	bne.n	80063f6 <xPortStartScheduler+0x26>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	613b      	str	r3, [r7, #16]
}
 80063f2:	bf00      	nop
 80063f4:	e7fe      	b.n	80063f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063f6:	4b3e      	ldr	r3, [pc, #248]	; (80064f0 <xPortStartScheduler+0x120>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a3f      	ldr	r2, [pc, #252]	; (80064f8 <xPortStartScheduler+0x128>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d10a      	bne.n	8006416 <xPortStartScheduler+0x46>
	__asm volatile
 8006400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	60fb      	str	r3, [r7, #12]
}
 8006412:	bf00      	nop
 8006414:	e7fe      	b.n	8006414 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006416:	4b39      	ldr	r3, [pc, #228]	; (80064fc <xPortStartScheduler+0x12c>)
 8006418:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	b2db      	uxtb	r3, r3
 8006420:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	22ff      	movs	r2, #255	; 0xff
 8006426:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	b2db      	uxtb	r3, r3
 8006434:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006438:	b2da      	uxtb	r2, r3
 800643a:	4b31      	ldr	r3, [pc, #196]	; (8006500 <xPortStartScheduler+0x130>)
 800643c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800643e:	4b31      	ldr	r3, [pc, #196]	; (8006504 <xPortStartScheduler+0x134>)
 8006440:	2207      	movs	r2, #7
 8006442:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006444:	e009      	b.n	800645a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006446:	4b2f      	ldr	r3, [pc, #188]	; (8006504 <xPortStartScheduler+0x134>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3b01      	subs	r3, #1
 800644c:	4a2d      	ldr	r2, [pc, #180]	; (8006504 <xPortStartScheduler+0x134>)
 800644e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006450:	78fb      	ldrb	r3, [r7, #3]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	b2db      	uxtb	r3, r3
 8006458:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800645a:	78fb      	ldrb	r3, [r7, #3]
 800645c:	b2db      	uxtb	r3, r3
 800645e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006462:	2b80      	cmp	r3, #128	; 0x80
 8006464:	d0ef      	beq.n	8006446 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006466:	4b27      	ldr	r3, [pc, #156]	; (8006504 <xPortStartScheduler+0x134>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f1c3 0307 	rsb	r3, r3, #7
 800646e:	2b04      	cmp	r3, #4
 8006470:	d00a      	beq.n	8006488 <xPortStartScheduler+0xb8>
	__asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	60bb      	str	r3, [r7, #8]
}
 8006484:	bf00      	nop
 8006486:	e7fe      	b.n	8006486 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006488:	4b1e      	ldr	r3, [pc, #120]	; (8006504 <xPortStartScheduler+0x134>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	021b      	lsls	r3, r3, #8
 800648e:	4a1d      	ldr	r2, [pc, #116]	; (8006504 <xPortStartScheduler+0x134>)
 8006490:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006492:	4b1c      	ldr	r3, [pc, #112]	; (8006504 <xPortStartScheduler+0x134>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800649a:	4a1a      	ldr	r2, [pc, #104]	; (8006504 <xPortStartScheduler+0x134>)
 800649c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80064a6:	4b18      	ldr	r3, [pc, #96]	; (8006508 <xPortStartScheduler+0x138>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a17      	ldr	r2, [pc, #92]	; (8006508 <xPortStartScheduler+0x138>)
 80064ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80064b2:	4b15      	ldr	r3, [pc, #84]	; (8006508 <xPortStartScheduler+0x138>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a14      	ldr	r2, [pc, #80]	; (8006508 <xPortStartScheduler+0x138>)
 80064b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80064bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80064be:	f000 f8dd 	bl	800667c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80064c2:	4b12      	ldr	r3, [pc, #72]	; (800650c <xPortStartScheduler+0x13c>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80064c8:	f000 f8fc 	bl	80066c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80064cc:	4b10      	ldr	r3, [pc, #64]	; (8006510 <xPortStartScheduler+0x140>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a0f      	ldr	r2, [pc, #60]	; (8006510 <xPortStartScheduler+0x140>)
 80064d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80064d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80064d8:	f7ff ff66 	bl	80063a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80064dc:	f7ff fd4e 	bl	8005f7c <vTaskSwitchContext>
	prvTaskExitError();
 80064e0:	f7ff ff22 	bl	8006328 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	e000ed00 	.word	0xe000ed00
 80064f4:	410fc271 	.word	0x410fc271
 80064f8:	410fc270 	.word	0x410fc270
 80064fc:	e000e400 	.word	0xe000e400
 8006500:	200005a4 	.word	0x200005a4
 8006504:	200005a8 	.word	0x200005a8
 8006508:	e000ed20 	.word	0xe000ed20
 800650c:	2000000c 	.word	0x2000000c
 8006510:	e000ef34 	.word	0xe000ef34

08006514 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	607b      	str	r3, [r7, #4]
}
 800652c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800652e:	4b0f      	ldr	r3, [pc, #60]	; (800656c <vPortEnterCritical+0x58>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3301      	adds	r3, #1
 8006534:	4a0d      	ldr	r2, [pc, #52]	; (800656c <vPortEnterCritical+0x58>)
 8006536:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006538:	4b0c      	ldr	r3, [pc, #48]	; (800656c <vPortEnterCritical+0x58>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d10f      	bne.n	8006560 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006540:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <vPortEnterCritical+0x5c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <vPortEnterCritical+0x4c>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	603b      	str	r3, [r7, #0]
}
 800655c:	bf00      	nop
 800655e:	e7fe      	b.n	800655e <vPortEnterCritical+0x4a>
	}
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	2000000c 	.word	0x2000000c
 8006570:	e000ed04 	.word	0xe000ed04

08006574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800657a:	4b12      	ldr	r3, [pc, #72]	; (80065c4 <vPortExitCritical+0x50>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10a      	bne.n	8006598 <vPortExitCritical+0x24>
	__asm volatile
 8006582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	607b      	str	r3, [r7, #4]
}
 8006594:	bf00      	nop
 8006596:	e7fe      	b.n	8006596 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006598:	4b0a      	ldr	r3, [pc, #40]	; (80065c4 <vPortExitCritical+0x50>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3b01      	subs	r3, #1
 800659e:	4a09      	ldr	r2, [pc, #36]	; (80065c4 <vPortExitCritical+0x50>)
 80065a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80065a2:	4b08      	ldr	r3, [pc, #32]	; (80065c4 <vPortExitCritical+0x50>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d105      	bne.n	80065b6 <vPortExitCritical+0x42>
 80065aa:	2300      	movs	r3, #0
 80065ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80065b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	2000000c 	.word	0x2000000c
	...

080065d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065d0:	f3ef 8009 	mrs	r0, PSP
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	4b15      	ldr	r3, [pc, #84]	; (8006630 <pxCurrentTCBConst>)
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	f01e 0f10 	tst.w	lr, #16
 80065e0:	bf08      	it	eq
 80065e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ea:	6010      	str	r0, [r2, #0]
 80065ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80065f4:	f380 8811 	msr	BASEPRI, r0
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f7ff fcbc 	bl	8005f7c <vTaskSwitchContext>
 8006604:	f04f 0000 	mov.w	r0, #0
 8006608:	f380 8811 	msr	BASEPRI, r0
 800660c:	bc09      	pop	{r0, r3}
 800660e:	6819      	ldr	r1, [r3, #0]
 8006610:	6808      	ldr	r0, [r1, #0]
 8006612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006616:	f01e 0f10 	tst.w	lr, #16
 800661a:	bf08      	it	eq
 800661c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006620:	f380 8809 	msr	PSP, r0
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	f3af 8000 	nop.w

08006630 <pxCurrentTCBConst>:
 8006630:	20000478 	.word	0x20000478
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop

08006638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
	__asm volatile
 800663e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	607b      	str	r3, [r7, #4]
}
 8006650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006652:	f7ff fbdb 	bl	8005e0c <xTaskIncrementTick>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800665c:	4b06      	ldr	r3, [pc, #24]	; (8006678 <SysTick_Handler+0x40>)
 800665e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	2300      	movs	r3, #0
 8006666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	f383 8811 	msr	BASEPRI, r3
}
 800666e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	e000ed04 	.word	0xe000ed04

0800667c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006680:	4b0b      	ldr	r3, [pc, #44]	; (80066b0 <vPortSetupTimerInterrupt+0x34>)
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006686:	4b0b      	ldr	r3, [pc, #44]	; (80066b4 <vPortSetupTimerInterrupt+0x38>)
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800668c:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <vPortSetupTimerInterrupt+0x3c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a0a      	ldr	r2, [pc, #40]	; (80066bc <vPortSetupTimerInterrupt+0x40>)
 8006692:	fba2 2303 	umull	r2, r3, r2, r3
 8006696:	099b      	lsrs	r3, r3, #6
 8006698:	4a09      	ldr	r2, [pc, #36]	; (80066c0 <vPortSetupTimerInterrupt+0x44>)
 800669a:	3b01      	subs	r3, #1
 800669c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800669e:	4b04      	ldr	r3, [pc, #16]	; (80066b0 <vPortSetupTimerInterrupt+0x34>)
 80066a0:	2207      	movs	r2, #7
 80066a2:	601a      	str	r2, [r3, #0]
}
 80066a4:	bf00      	nop
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	e000e010 	.word	0xe000e010
 80066b4:	e000e018 	.word	0xe000e018
 80066b8:	20000000 	.word	0x20000000
 80066bc:	10624dd3 	.word	0x10624dd3
 80066c0:	e000e014 	.word	0xe000e014

080066c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80066c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80066d4 <vPortEnableVFP+0x10>
 80066c8:	6801      	ldr	r1, [r0, #0]
 80066ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80066ce:	6001      	str	r1, [r0, #0]
 80066d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80066d2:	bf00      	nop
 80066d4:	e000ed88 	.word	0xe000ed88

080066d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08a      	sub	sp, #40	; 0x28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066e0:	2300      	movs	r3, #0
 80066e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066e4:	f7ff fae8 	bl	8005cb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066e8:	4b5b      	ldr	r3, [pc, #364]	; (8006858 <pvPortMalloc+0x180>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066f0:	f000 f920 	bl	8006934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066f4:	4b59      	ldr	r3, [pc, #356]	; (800685c <pvPortMalloc+0x184>)
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4013      	ands	r3, r2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f040 8093 	bne.w	8006828 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01d      	beq.n	8006744 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006708:	2208      	movs	r2, #8
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4413      	add	r3, r2
 800670e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	2b00      	cmp	r3, #0
 8006718:	d014      	beq.n	8006744 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f023 0307 	bic.w	r3, r3, #7
 8006720:	3308      	adds	r3, #8
 8006722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <pvPortMalloc+0x6c>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	617b      	str	r3, [r7, #20]
}
 8006740:	bf00      	nop
 8006742:	e7fe      	b.n	8006742 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d06e      	beq.n	8006828 <pvPortMalloc+0x150>
 800674a:	4b45      	ldr	r3, [pc, #276]	; (8006860 <pvPortMalloc+0x188>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	429a      	cmp	r2, r3
 8006752:	d869      	bhi.n	8006828 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006754:	4b43      	ldr	r3, [pc, #268]	; (8006864 <pvPortMalloc+0x18c>)
 8006756:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006758:	4b42      	ldr	r3, [pc, #264]	; (8006864 <pvPortMalloc+0x18c>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800675e:	e004      	b.n	800676a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	429a      	cmp	r2, r3
 8006772:	d903      	bls.n	800677c <pvPortMalloc+0xa4>
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1f1      	bne.n	8006760 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800677c:	4b36      	ldr	r3, [pc, #216]	; (8006858 <pvPortMalloc+0x180>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006782:	429a      	cmp	r2, r3
 8006784:	d050      	beq.n	8006828 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2208      	movs	r2, #8
 800678c:	4413      	add	r3, r2
 800678e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	1ad2      	subs	r2, r2, r3
 80067a0:	2308      	movs	r3, #8
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d91f      	bls.n	80067e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4413      	add	r3, r2
 80067ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <pvPortMalloc+0xf8>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	613b      	str	r3, [r7, #16]
}
 80067cc:	bf00      	nop
 80067ce:	e7fe      	b.n	80067ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	1ad2      	subs	r2, r2, r3
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067e2:	69b8      	ldr	r0, [r7, #24]
 80067e4:	f000 f908 	bl	80069f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067e8:	4b1d      	ldr	r3, [pc, #116]	; (8006860 <pvPortMalloc+0x188>)
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	4a1b      	ldr	r2, [pc, #108]	; (8006860 <pvPortMalloc+0x188>)
 80067f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067f6:	4b1a      	ldr	r3, [pc, #104]	; (8006860 <pvPortMalloc+0x188>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	4b1b      	ldr	r3, [pc, #108]	; (8006868 <pvPortMalloc+0x190>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d203      	bcs.n	800680a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006802:	4b17      	ldr	r3, [pc, #92]	; (8006860 <pvPortMalloc+0x188>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a18      	ldr	r2, [pc, #96]	; (8006868 <pvPortMalloc+0x190>)
 8006808:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	4b13      	ldr	r3, [pc, #76]	; (800685c <pvPortMalloc+0x184>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	431a      	orrs	r2, r3
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	2200      	movs	r2, #0
 800681c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800681e:	4b13      	ldr	r3, [pc, #76]	; (800686c <pvPortMalloc+0x194>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3301      	adds	r3, #1
 8006824:	4a11      	ldr	r2, [pc, #68]	; (800686c <pvPortMalloc+0x194>)
 8006826:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006828:	f7ff fa54 	bl	8005cd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f003 0307 	and.w	r3, r3, #7
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <pvPortMalloc+0x174>
	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	60fb      	str	r3, [r7, #12]
}
 8006848:	bf00      	nop
 800684a:	e7fe      	b.n	800684a <pvPortMalloc+0x172>
	return pvReturn;
 800684c:	69fb      	ldr	r3, [r7, #28]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3728      	adds	r7, #40	; 0x28
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	200041b4 	.word	0x200041b4
 800685c:	200041c8 	.word	0x200041c8
 8006860:	200041b8 	.word	0x200041b8
 8006864:	200041ac 	.word	0x200041ac
 8006868:	200041bc 	.word	0x200041bc
 800686c:	200041c0 	.word	0x200041c0

08006870 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d04d      	beq.n	800691e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006882:	2308      	movs	r3, #8
 8006884:	425b      	negs	r3, r3
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	4413      	add	r3, r2
 800688a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	4b24      	ldr	r3, [pc, #144]	; (8006928 <vPortFree+0xb8>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4013      	ands	r3, r2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10a      	bne.n	80068b4 <vPortFree+0x44>
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	60fb      	str	r3, [r7, #12]
}
 80068b0:	bf00      	nop
 80068b2:	e7fe      	b.n	80068b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <vPortFree+0x62>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	60bb      	str	r3, [r7, #8]
}
 80068ce:	bf00      	nop
 80068d0:	e7fe      	b.n	80068d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	4b14      	ldr	r3, [pc, #80]	; (8006928 <vPortFree+0xb8>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4013      	ands	r3, r2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d01e      	beq.n	800691e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d11a      	bne.n	800691e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	4b0e      	ldr	r3, [pc, #56]	; (8006928 <vPortFree+0xb8>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	43db      	mvns	r3, r3
 80068f2:	401a      	ands	r2, r3
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068f8:	f7ff f9de 	bl	8005cb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	4b0a      	ldr	r3, [pc, #40]	; (800692c <vPortFree+0xbc>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4413      	add	r3, r2
 8006906:	4a09      	ldr	r2, [pc, #36]	; (800692c <vPortFree+0xbc>)
 8006908:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800690a:	6938      	ldr	r0, [r7, #16]
 800690c:	f000 f874 	bl	80069f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006910:	4b07      	ldr	r3, [pc, #28]	; (8006930 <vPortFree+0xc0>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3301      	adds	r3, #1
 8006916:	4a06      	ldr	r2, [pc, #24]	; (8006930 <vPortFree+0xc0>)
 8006918:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800691a:	f7ff f9db 	bl	8005cd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800691e:	bf00      	nop
 8006920:	3718      	adds	r7, #24
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	200041c8 	.word	0x200041c8
 800692c:	200041b8 	.word	0x200041b8
 8006930:	200041c4 	.word	0x200041c4

08006934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800693a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800693e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006940:	4b27      	ldr	r3, [pc, #156]	; (80069e0 <prvHeapInit+0xac>)
 8006942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00c      	beq.n	8006968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3307      	adds	r3, #7
 8006952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f023 0307 	bic.w	r3, r3, #7
 800695a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	4a1f      	ldr	r2, [pc, #124]	; (80069e0 <prvHeapInit+0xac>)
 8006964:	4413      	add	r3, r2
 8006966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800696c:	4a1d      	ldr	r2, [pc, #116]	; (80069e4 <prvHeapInit+0xb0>)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006972:	4b1c      	ldr	r3, [pc, #112]	; (80069e4 <prvHeapInit+0xb0>)
 8006974:	2200      	movs	r2, #0
 8006976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	4413      	add	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006980:	2208      	movs	r2, #8
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	1a9b      	subs	r3, r3, r2
 8006986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0307 	bic.w	r3, r3, #7
 800698e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4a15      	ldr	r2, [pc, #84]	; (80069e8 <prvHeapInit+0xb4>)
 8006994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006996:	4b14      	ldr	r3, [pc, #80]	; (80069e8 <prvHeapInit+0xb4>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2200      	movs	r2, #0
 800699c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800699e:	4b12      	ldr	r3, [pc, #72]	; (80069e8 <prvHeapInit+0xb4>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	1ad2      	subs	r2, r2, r3
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069b4:	4b0c      	ldr	r3, [pc, #48]	; (80069e8 <prvHeapInit+0xb4>)
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	4a0a      	ldr	r2, [pc, #40]	; (80069ec <prvHeapInit+0xb8>)
 80069c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	4a09      	ldr	r2, [pc, #36]	; (80069f0 <prvHeapInit+0xbc>)
 80069ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069cc:	4b09      	ldr	r3, [pc, #36]	; (80069f4 <prvHeapInit+0xc0>)
 80069ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80069d2:	601a      	str	r2, [r3, #0]
}
 80069d4:	bf00      	nop
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	200005ac 	.word	0x200005ac
 80069e4:	200041ac 	.word	0x200041ac
 80069e8:	200041b4 	.word	0x200041b4
 80069ec:	200041bc 	.word	0x200041bc
 80069f0:	200041b8 	.word	0x200041b8
 80069f4:	200041c8 	.word	0x200041c8

080069f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a00:	4b28      	ldr	r3, [pc, #160]	; (8006aa4 <prvInsertBlockIntoFreeList+0xac>)
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e002      	b.n	8006a0c <prvInsertBlockIntoFreeList+0x14>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d8f7      	bhi.n	8006a06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	4413      	add	r3, r2
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d108      	bne.n	8006a3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	441a      	add	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	441a      	add	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d118      	bne.n	8006a80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	4b15      	ldr	r3, [pc, #84]	; (8006aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d00d      	beq.n	8006a76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	441a      	add	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e008      	b.n	8006a88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a76:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	e003      	b.n	8006a88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d002      	beq.n	8006a96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a96:	bf00      	nop
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	200041ac 	.word	0x200041ac
 8006aa8:	200041b4 	.word	0x200041b4

08006aac <__errno>:
 8006aac:	4b01      	ldr	r3, [pc, #4]	; (8006ab4 <__errno+0x8>)
 8006aae:	6818      	ldr	r0, [r3, #0]
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	20000010 	.word	0x20000010

08006ab8 <std>:
 8006ab8:	2300      	movs	r3, #0
 8006aba:	b510      	push	{r4, lr}
 8006abc:	4604      	mov	r4, r0
 8006abe:	e9c0 3300 	strd	r3, r3, [r0]
 8006ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ac6:	6083      	str	r3, [r0, #8]
 8006ac8:	8181      	strh	r1, [r0, #12]
 8006aca:	6643      	str	r3, [r0, #100]	; 0x64
 8006acc:	81c2      	strh	r2, [r0, #14]
 8006ace:	6183      	str	r3, [r0, #24]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	2208      	movs	r2, #8
 8006ad4:	305c      	adds	r0, #92	; 0x5c
 8006ad6:	f000 f90c 	bl	8006cf2 <memset>
 8006ada:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <std+0x38>)
 8006adc:	6263      	str	r3, [r4, #36]	; 0x24
 8006ade:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <std+0x3c>)
 8006ae0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ae2:	4b05      	ldr	r3, [pc, #20]	; (8006af8 <std+0x40>)
 8006ae4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ae6:	4b05      	ldr	r3, [pc, #20]	; (8006afc <std+0x44>)
 8006ae8:	6224      	str	r4, [r4, #32]
 8006aea:	6323      	str	r3, [r4, #48]	; 0x30
 8006aec:	bd10      	pop	{r4, pc}
 8006aee:	bf00      	nop
 8006af0:	0800703d 	.word	0x0800703d
 8006af4:	0800705f 	.word	0x0800705f
 8006af8:	08007097 	.word	0x08007097
 8006afc:	080070bb 	.word	0x080070bb

08006b00 <_cleanup_r>:
 8006b00:	4901      	ldr	r1, [pc, #4]	; (8006b08 <_cleanup_r+0x8>)
 8006b02:	f000 b8af 	b.w	8006c64 <_fwalk_reent>
 8006b06:	bf00      	nop
 8006b08:	08007395 	.word	0x08007395

08006b0c <__sfmoreglue>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	2268      	movs	r2, #104	; 0x68
 8006b10:	1e4d      	subs	r5, r1, #1
 8006b12:	4355      	muls	r5, r2
 8006b14:	460e      	mov	r6, r1
 8006b16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b1a:	f000 f913 	bl	8006d44 <_malloc_r>
 8006b1e:	4604      	mov	r4, r0
 8006b20:	b140      	cbz	r0, 8006b34 <__sfmoreglue+0x28>
 8006b22:	2100      	movs	r1, #0
 8006b24:	e9c0 1600 	strd	r1, r6, [r0]
 8006b28:	300c      	adds	r0, #12
 8006b2a:	60a0      	str	r0, [r4, #8]
 8006b2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b30:	f000 f8df 	bl	8006cf2 <memset>
 8006b34:	4620      	mov	r0, r4
 8006b36:	bd70      	pop	{r4, r5, r6, pc}

08006b38 <__sfp_lock_acquire>:
 8006b38:	4801      	ldr	r0, [pc, #4]	; (8006b40 <__sfp_lock_acquire+0x8>)
 8006b3a:	f000 b8d8 	b.w	8006cee <__retarget_lock_acquire_recursive>
 8006b3e:	bf00      	nop
 8006b40:	200041cd 	.word	0x200041cd

08006b44 <__sfp_lock_release>:
 8006b44:	4801      	ldr	r0, [pc, #4]	; (8006b4c <__sfp_lock_release+0x8>)
 8006b46:	f000 b8d3 	b.w	8006cf0 <__retarget_lock_release_recursive>
 8006b4a:	bf00      	nop
 8006b4c:	200041cd 	.word	0x200041cd

08006b50 <__sinit_lock_acquire>:
 8006b50:	4801      	ldr	r0, [pc, #4]	; (8006b58 <__sinit_lock_acquire+0x8>)
 8006b52:	f000 b8cc 	b.w	8006cee <__retarget_lock_acquire_recursive>
 8006b56:	bf00      	nop
 8006b58:	200041ce 	.word	0x200041ce

08006b5c <__sinit_lock_release>:
 8006b5c:	4801      	ldr	r0, [pc, #4]	; (8006b64 <__sinit_lock_release+0x8>)
 8006b5e:	f000 b8c7 	b.w	8006cf0 <__retarget_lock_release_recursive>
 8006b62:	bf00      	nop
 8006b64:	200041ce 	.word	0x200041ce

08006b68 <__sinit>:
 8006b68:	b510      	push	{r4, lr}
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	f7ff fff0 	bl	8006b50 <__sinit_lock_acquire>
 8006b70:	69a3      	ldr	r3, [r4, #24]
 8006b72:	b11b      	cbz	r3, 8006b7c <__sinit+0x14>
 8006b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b78:	f7ff bff0 	b.w	8006b5c <__sinit_lock_release>
 8006b7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b80:	6523      	str	r3, [r4, #80]	; 0x50
 8006b82:	4b13      	ldr	r3, [pc, #76]	; (8006bd0 <__sinit+0x68>)
 8006b84:	4a13      	ldr	r2, [pc, #76]	; (8006bd4 <__sinit+0x6c>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b8a:	42a3      	cmp	r3, r4
 8006b8c:	bf04      	itt	eq
 8006b8e:	2301      	moveq	r3, #1
 8006b90:	61a3      	streq	r3, [r4, #24]
 8006b92:	4620      	mov	r0, r4
 8006b94:	f000 f820 	bl	8006bd8 <__sfp>
 8006b98:	6060      	str	r0, [r4, #4]
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f000 f81c 	bl	8006bd8 <__sfp>
 8006ba0:	60a0      	str	r0, [r4, #8]
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f000 f818 	bl	8006bd8 <__sfp>
 8006ba8:	2200      	movs	r2, #0
 8006baa:	60e0      	str	r0, [r4, #12]
 8006bac:	2104      	movs	r1, #4
 8006bae:	6860      	ldr	r0, [r4, #4]
 8006bb0:	f7ff ff82 	bl	8006ab8 <std>
 8006bb4:	68a0      	ldr	r0, [r4, #8]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	2109      	movs	r1, #9
 8006bba:	f7ff ff7d 	bl	8006ab8 <std>
 8006bbe:	68e0      	ldr	r0, [r4, #12]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	2112      	movs	r1, #18
 8006bc4:	f7ff ff78 	bl	8006ab8 <std>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	61a3      	str	r3, [r4, #24]
 8006bcc:	e7d2      	b.n	8006b74 <__sinit+0xc>
 8006bce:	bf00      	nop
 8006bd0:	08007ed0 	.word	0x08007ed0
 8006bd4:	08006b01 	.word	0x08006b01

08006bd8 <__sfp>:
 8006bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bda:	4607      	mov	r7, r0
 8006bdc:	f7ff ffac 	bl	8006b38 <__sfp_lock_acquire>
 8006be0:	4b1e      	ldr	r3, [pc, #120]	; (8006c5c <__sfp+0x84>)
 8006be2:	681e      	ldr	r6, [r3, #0]
 8006be4:	69b3      	ldr	r3, [r6, #24]
 8006be6:	b913      	cbnz	r3, 8006bee <__sfp+0x16>
 8006be8:	4630      	mov	r0, r6
 8006bea:	f7ff ffbd 	bl	8006b68 <__sinit>
 8006bee:	3648      	adds	r6, #72	; 0x48
 8006bf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	d503      	bpl.n	8006c00 <__sfp+0x28>
 8006bf8:	6833      	ldr	r3, [r6, #0]
 8006bfa:	b30b      	cbz	r3, 8006c40 <__sfp+0x68>
 8006bfc:	6836      	ldr	r6, [r6, #0]
 8006bfe:	e7f7      	b.n	8006bf0 <__sfp+0x18>
 8006c00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c04:	b9d5      	cbnz	r5, 8006c3c <__sfp+0x64>
 8006c06:	4b16      	ldr	r3, [pc, #88]	; (8006c60 <__sfp+0x88>)
 8006c08:	60e3      	str	r3, [r4, #12]
 8006c0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c0e:	6665      	str	r5, [r4, #100]	; 0x64
 8006c10:	f000 f86c 	bl	8006cec <__retarget_lock_init_recursive>
 8006c14:	f7ff ff96 	bl	8006b44 <__sfp_lock_release>
 8006c18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c20:	6025      	str	r5, [r4, #0]
 8006c22:	61a5      	str	r5, [r4, #24]
 8006c24:	2208      	movs	r2, #8
 8006c26:	4629      	mov	r1, r5
 8006c28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c2c:	f000 f861 	bl	8006cf2 <memset>
 8006c30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c38:	4620      	mov	r0, r4
 8006c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c3c:	3468      	adds	r4, #104	; 0x68
 8006c3e:	e7d9      	b.n	8006bf4 <__sfp+0x1c>
 8006c40:	2104      	movs	r1, #4
 8006c42:	4638      	mov	r0, r7
 8006c44:	f7ff ff62 	bl	8006b0c <__sfmoreglue>
 8006c48:	4604      	mov	r4, r0
 8006c4a:	6030      	str	r0, [r6, #0]
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d1d5      	bne.n	8006bfc <__sfp+0x24>
 8006c50:	f7ff ff78 	bl	8006b44 <__sfp_lock_release>
 8006c54:	230c      	movs	r3, #12
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	e7ee      	b.n	8006c38 <__sfp+0x60>
 8006c5a:	bf00      	nop
 8006c5c:	08007ed0 	.word	0x08007ed0
 8006c60:	ffff0001 	.word	0xffff0001

08006c64 <_fwalk_reent>:
 8006c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c68:	4606      	mov	r6, r0
 8006c6a:	4688      	mov	r8, r1
 8006c6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c70:	2700      	movs	r7, #0
 8006c72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c76:	f1b9 0901 	subs.w	r9, r9, #1
 8006c7a:	d505      	bpl.n	8006c88 <_fwalk_reent+0x24>
 8006c7c:	6824      	ldr	r4, [r4, #0]
 8006c7e:	2c00      	cmp	r4, #0
 8006c80:	d1f7      	bne.n	8006c72 <_fwalk_reent+0xe>
 8006c82:	4638      	mov	r0, r7
 8006c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c88:	89ab      	ldrh	r3, [r5, #12]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d907      	bls.n	8006c9e <_fwalk_reent+0x3a>
 8006c8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c92:	3301      	adds	r3, #1
 8006c94:	d003      	beq.n	8006c9e <_fwalk_reent+0x3a>
 8006c96:	4629      	mov	r1, r5
 8006c98:	4630      	mov	r0, r6
 8006c9a:	47c0      	blx	r8
 8006c9c:	4307      	orrs	r7, r0
 8006c9e:	3568      	adds	r5, #104	; 0x68
 8006ca0:	e7e9      	b.n	8006c76 <_fwalk_reent+0x12>
	...

08006ca4 <__libc_init_array>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	4d0d      	ldr	r5, [pc, #52]	; (8006cdc <__libc_init_array+0x38>)
 8006ca8:	4c0d      	ldr	r4, [pc, #52]	; (8006ce0 <__libc_init_array+0x3c>)
 8006caa:	1b64      	subs	r4, r4, r5
 8006cac:	10a4      	asrs	r4, r4, #2
 8006cae:	2600      	movs	r6, #0
 8006cb0:	42a6      	cmp	r6, r4
 8006cb2:	d109      	bne.n	8006cc8 <__libc_init_array+0x24>
 8006cb4:	4d0b      	ldr	r5, [pc, #44]	; (8006ce4 <__libc_init_array+0x40>)
 8006cb6:	4c0c      	ldr	r4, [pc, #48]	; (8006ce8 <__libc_init_array+0x44>)
 8006cb8:	f000 ff9a 	bl	8007bf0 <_init>
 8006cbc:	1b64      	subs	r4, r4, r5
 8006cbe:	10a4      	asrs	r4, r4, #2
 8006cc0:	2600      	movs	r6, #0
 8006cc2:	42a6      	cmp	r6, r4
 8006cc4:	d105      	bne.n	8006cd2 <__libc_init_array+0x2e>
 8006cc6:	bd70      	pop	{r4, r5, r6, pc}
 8006cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ccc:	4798      	blx	r3
 8006cce:	3601      	adds	r6, #1
 8006cd0:	e7ee      	b.n	8006cb0 <__libc_init_array+0xc>
 8006cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd6:	4798      	blx	r3
 8006cd8:	3601      	adds	r6, #1
 8006cda:	e7f2      	b.n	8006cc2 <__libc_init_array+0x1e>
 8006cdc:	08007f10 	.word	0x08007f10
 8006ce0:	08007f10 	.word	0x08007f10
 8006ce4:	08007f10 	.word	0x08007f10
 8006ce8:	08007f14 	.word	0x08007f14

08006cec <__retarget_lock_init_recursive>:
 8006cec:	4770      	bx	lr

08006cee <__retarget_lock_acquire_recursive>:
 8006cee:	4770      	bx	lr

08006cf0 <__retarget_lock_release_recursive>:
 8006cf0:	4770      	bx	lr

08006cf2 <memset>:
 8006cf2:	4402      	add	r2, r0
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d100      	bne.n	8006cfc <memset+0xa>
 8006cfa:	4770      	bx	lr
 8006cfc:	f803 1b01 	strb.w	r1, [r3], #1
 8006d00:	e7f9      	b.n	8006cf6 <memset+0x4>
	...

08006d04 <sbrk_aligned>:
 8006d04:	b570      	push	{r4, r5, r6, lr}
 8006d06:	4e0e      	ldr	r6, [pc, #56]	; (8006d40 <sbrk_aligned+0x3c>)
 8006d08:	460c      	mov	r4, r1
 8006d0a:	6831      	ldr	r1, [r6, #0]
 8006d0c:	4605      	mov	r5, r0
 8006d0e:	b911      	cbnz	r1, 8006d16 <sbrk_aligned+0x12>
 8006d10:	f000 f984 	bl	800701c <_sbrk_r>
 8006d14:	6030      	str	r0, [r6, #0]
 8006d16:	4621      	mov	r1, r4
 8006d18:	4628      	mov	r0, r5
 8006d1a:	f000 f97f 	bl	800701c <_sbrk_r>
 8006d1e:	1c43      	adds	r3, r0, #1
 8006d20:	d00a      	beq.n	8006d38 <sbrk_aligned+0x34>
 8006d22:	1cc4      	adds	r4, r0, #3
 8006d24:	f024 0403 	bic.w	r4, r4, #3
 8006d28:	42a0      	cmp	r0, r4
 8006d2a:	d007      	beq.n	8006d3c <sbrk_aligned+0x38>
 8006d2c:	1a21      	subs	r1, r4, r0
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f000 f974 	bl	800701c <_sbrk_r>
 8006d34:	3001      	adds	r0, #1
 8006d36:	d101      	bne.n	8006d3c <sbrk_aligned+0x38>
 8006d38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	bd70      	pop	{r4, r5, r6, pc}
 8006d40:	200041d4 	.word	0x200041d4

08006d44 <_malloc_r>:
 8006d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d48:	1ccd      	adds	r5, r1, #3
 8006d4a:	f025 0503 	bic.w	r5, r5, #3
 8006d4e:	3508      	adds	r5, #8
 8006d50:	2d0c      	cmp	r5, #12
 8006d52:	bf38      	it	cc
 8006d54:	250c      	movcc	r5, #12
 8006d56:	2d00      	cmp	r5, #0
 8006d58:	4607      	mov	r7, r0
 8006d5a:	db01      	blt.n	8006d60 <_malloc_r+0x1c>
 8006d5c:	42a9      	cmp	r1, r5
 8006d5e:	d905      	bls.n	8006d6c <_malloc_r+0x28>
 8006d60:	230c      	movs	r3, #12
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	2600      	movs	r6, #0
 8006d66:	4630      	mov	r0, r6
 8006d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d6c:	4e2e      	ldr	r6, [pc, #184]	; (8006e28 <_malloc_r+0xe4>)
 8006d6e:	f000 fbc5 	bl	80074fc <__malloc_lock>
 8006d72:	6833      	ldr	r3, [r6, #0]
 8006d74:	461c      	mov	r4, r3
 8006d76:	bb34      	cbnz	r4, 8006dc6 <_malloc_r+0x82>
 8006d78:	4629      	mov	r1, r5
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	f7ff ffc2 	bl	8006d04 <sbrk_aligned>
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	4604      	mov	r4, r0
 8006d84:	d14d      	bne.n	8006e22 <_malloc_r+0xde>
 8006d86:	6834      	ldr	r4, [r6, #0]
 8006d88:	4626      	mov	r6, r4
 8006d8a:	2e00      	cmp	r6, #0
 8006d8c:	d140      	bne.n	8006e10 <_malloc_r+0xcc>
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	4631      	mov	r1, r6
 8006d92:	4638      	mov	r0, r7
 8006d94:	eb04 0803 	add.w	r8, r4, r3
 8006d98:	f000 f940 	bl	800701c <_sbrk_r>
 8006d9c:	4580      	cmp	r8, r0
 8006d9e:	d13a      	bne.n	8006e16 <_malloc_r+0xd2>
 8006da0:	6821      	ldr	r1, [r4, #0]
 8006da2:	3503      	adds	r5, #3
 8006da4:	1a6d      	subs	r5, r5, r1
 8006da6:	f025 0503 	bic.w	r5, r5, #3
 8006daa:	3508      	adds	r5, #8
 8006dac:	2d0c      	cmp	r5, #12
 8006dae:	bf38      	it	cc
 8006db0:	250c      	movcc	r5, #12
 8006db2:	4629      	mov	r1, r5
 8006db4:	4638      	mov	r0, r7
 8006db6:	f7ff ffa5 	bl	8006d04 <sbrk_aligned>
 8006dba:	3001      	adds	r0, #1
 8006dbc:	d02b      	beq.n	8006e16 <_malloc_r+0xd2>
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	442b      	add	r3, r5
 8006dc2:	6023      	str	r3, [r4, #0]
 8006dc4:	e00e      	b.n	8006de4 <_malloc_r+0xa0>
 8006dc6:	6822      	ldr	r2, [r4, #0]
 8006dc8:	1b52      	subs	r2, r2, r5
 8006dca:	d41e      	bmi.n	8006e0a <_malloc_r+0xc6>
 8006dcc:	2a0b      	cmp	r2, #11
 8006dce:	d916      	bls.n	8006dfe <_malloc_r+0xba>
 8006dd0:	1961      	adds	r1, r4, r5
 8006dd2:	42a3      	cmp	r3, r4
 8006dd4:	6025      	str	r5, [r4, #0]
 8006dd6:	bf18      	it	ne
 8006dd8:	6059      	strne	r1, [r3, #4]
 8006dda:	6863      	ldr	r3, [r4, #4]
 8006ddc:	bf08      	it	eq
 8006dde:	6031      	streq	r1, [r6, #0]
 8006de0:	5162      	str	r2, [r4, r5]
 8006de2:	604b      	str	r3, [r1, #4]
 8006de4:	4638      	mov	r0, r7
 8006de6:	f104 060b 	add.w	r6, r4, #11
 8006dea:	f000 fb8d 	bl	8007508 <__malloc_unlock>
 8006dee:	f026 0607 	bic.w	r6, r6, #7
 8006df2:	1d23      	adds	r3, r4, #4
 8006df4:	1af2      	subs	r2, r6, r3
 8006df6:	d0b6      	beq.n	8006d66 <_malloc_r+0x22>
 8006df8:	1b9b      	subs	r3, r3, r6
 8006dfa:	50a3      	str	r3, [r4, r2]
 8006dfc:	e7b3      	b.n	8006d66 <_malloc_r+0x22>
 8006dfe:	6862      	ldr	r2, [r4, #4]
 8006e00:	42a3      	cmp	r3, r4
 8006e02:	bf0c      	ite	eq
 8006e04:	6032      	streq	r2, [r6, #0]
 8006e06:	605a      	strne	r2, [r3, #4]
 8006e08:	e7ec      	b.n	8006de4 <_malloc_r+0xa0>
 8006e0a:	4623      	mov	r3, r4
 8006e0c:	6864      	ldr	r4, [r4, #4]
 8006e0e:	e7b2      	b.n	8006d76 <_malloc_r+0x32>
 8006e10:	4634      	mov	r4, r6
 8006e12:	6876      	ldr	r6, [r6, #4]
 8006e14:	e7b9      	b.n	8006d8a <_malloc_r+0x46>
 8006e16:	230c      	movs	r3, #12
 8006e18:	603b      	str	r3, [r7, #0]
 8006e1a:	4638      	mov	r0, r7
 8006e1c:	f000 fb74 	bl	8007508 <__malloc_unlock>
 8006e20:	e7a1      	b.n	8006d66 <_malloc_r+0x22>
 8006e22:	6025      	str	r5, [r4, #0]
 8006e24:	e7de      	b.n	8006de4 <_malloc_r+0xa0>
 8006e26:	bf00      	nop
 8006e28:	200041d0 	.word	0x200041d0

08006e2c <iprintf>:
 8006e2c:	b40f      	push	{r0, r1, r2, r3}
 8006e2e:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <iprintf+0x2c>)
 8006e30:	b513      	push	{r0, r1, r4, lr}
 8006e32:	681c      	ldr	r4, [r3, #0]
 8006e34:	b124      	cbz	r4, 8006e40 <iprintf+0x14>
 8006e36:	69a3      	ldr	r3, [r4, #24]
 8006e38:	b913      	cbnz	r3, 8006e40 <iprintf+0x14>
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f7ff fe94 	bl	8006b68 <__sinit>
 8006e40:	ab05      	add	r3, sp, #20
 8006e42:	9a04      	ldr	r2, [sp, #16]
 8006e44:	68a1      	ldr	r1, [r4, #8]
 8006e46:	9301      	str	r3, [sp, #4]
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f000 fbd9 	bl	8007600 <_vfiprintf_r>
 8006e4e:	b002      	add	sp, #8
 8006e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e54:	b004      	add	sp, #16
 8006e56:	4770      	bx	lr
 8006e58:	20000010 	.word	0x20000010

08006e5c <_puts_r>:
 8006e5c:	b570      	push	{r4, r5, r6, lr}
 8006e5e:	460e      	mov	r6, r1
 8006e60:	4605      	mov	r5, r0
 8006e62:	b118      	cbz	r0, 8006e6c <_puts_r+0x10>
 8006e64:	6983      	ldr	r3, [r0, #24]
 8006e66:	b90b      	cbnz	r3, 8006e6c <_puts_r+0x10>
 8006e68:	f7ff fe7e 	bl	8006b68 <__sinit>
 8006e6c:	69ab      	ldr	r3, [r5, #24]
 8006e6e:	68ac      	ldr	r4, [r5, #8]
 8006e70:	b913      	cbnz	r3, 8006e78 <_puts_r+0x1c>
 8006e72:	4628      	mov	r0, r5
 8006e74:	f7ff fe78 	bl	8006b68 <__sinit>
 8006e78:	4b2c      	ldr	r3, [pc, #176]	; (8006f2c <_puts_r+0xd0>)
 8006e7a:	429c      	cmp	r4, r3
 8006e7c:	d120      	bne.n	8006ec0 <_puts_r+0x64>
 8006e7e:	686c      	ldr	r4, [r5, #4]
 8006e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e82:	07db      	lsls	r3, r3, #31
 8006e84:	d405      	bmi.n	8006e92 <_puts_r+0x36>
 8006e86:	89a3      	ldrh	r3, [r4, #12]
 8006e88:	0598      	lsls	r0, r3, #22
 8006e8a:	d402      	bmi.n	8006e92 <_puts_r+0x36>
 8006e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e8e:	f7ff ff2e 	bl	8006cee <__retarget_lock_acquire_recursive>
 8006e92:	89a3      	ldrh	r3, [r4, #12]
 8006e94:	0719      	lsls	r1, r3, #28
 8006e96:	d51d      	bpl.n	8006ed4 <_puts_r+0x78>
 8006e98:	6923      	ldr	r3, [r4, #16]
 8006e9a:	b1db      	cbz	r3, 8006ed4 <_puts_r+0x78>
 8006e9c:	3e01      	subs	r6, #1
 8006e9e:	68a3      	ldr	r3, [r4, #8]
 8006ea0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	60a3      	str	r3, [r4, #8]
 8006ea8:	bb39      	cbnz	r1, 8006efa <_puts_r+0x9e>
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	da38      	bge.n	8006f20 <_puts_r+0xc4>
 8006eae:	4622      	mov	r2, r4
 8006eb0:	210a      	movs	r1, #10
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	f000 f906 	bl	80070c4 <__swbuf_r>
 8006eb8:	3001      	adds	r0, #1
 8006eba:	d011      	beq.n	8006ee0 <_puts_r+0x84>
 8006ebc:	250a      	movs	r5, #10
 8006ebe:	e011      	b.n	8006ee4 <_puts_r+0x88>
 8006ec0:	4b1b      	ldr	r3, [pc, #108]	; (8006f30 <_puts_r+0xd4>)
 8006ec2:	429c      	cmp	r4, r3
 8006ec4:	d101      	bne.n	8006eca <_puts_r+0x6e>
 8006ec6:	68ac      	ldr	r4, [r5, #8]
 8006ec8:	e7da      	b.n	8006e80 <_puts_r+0x24>
 8006eca:	4b1a      	ldr	r3, [pc, #104]	; (8006f34 <_puts_r+0xd8>)
 8006ecc:	429c      	cmp	r4, r3
 8006ece:	bf08      	it	eq
 8006ed0:	68ec      	ldreq	r4, [r5, #12]
 8006ed2:	e7d5      	b.n	8006e80 <_puts_r+0x24>
 8006ed4:	4621      	mov	r1, r4
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	f000 f958 	bl	800718c <__swsetup_r>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d0dd      	beq.n	8006e9c <_puts_r+0x40>
 8006ee0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006ee4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ee6:	07da      	lsls	r2, r3, #31
 8006ee8:	d405      	bmi.n	8006ef6 <_puts_r+0x9a>
 8006eea:	89a3      	ldrh	r3, [r4, #12]
 8006eec:	059b      	lsls	r3, r3, #22
 8006eee:	d402      	bmi.n	8006ef6 <_puts_r+0x9a>
 8006ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ef2:	f7ff fefd 	bl	8006cf0 <__retarget_lock_release_recursive>
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	bd70      	pop	{r4, r5, r6, pc}
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	da04      	bge.n	8006f08 <_puts_r+0xac>
 8006efe:	69a2      	ldr	r2, [r4, #24]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	dc06      	bgt.n	8006f12 <_puts_r+0xb6>
 8006f04:	290a      	cmp	r1, #10
 8006f06:	d004      	beq.n	8006f12 <_puts_r+0xb6>
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	6022      	str	r2, [r4, #0]
 8006f0e:	7019      	strb	r1, [r3, #0]
 8006f10:	e7c5      	b.n	8006e9e <_puts_r+0x42>
 8006f12:	4622      	mov	r2, r4
 8006f14:	4628      	mov	r0, r5
 8006f16:	f000 f8d5 	bl	80070c4 <__swbuf_r>
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	d1bf      	bne.n	8006e9e <_puts_r+0x42>
 8006f1e:	e7df      	b.n	8006ee0 <_puts_r+0x84>
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	250a      	movs	r5, #10
 8006f24:	1c5a      	adds	r2, r3, #1
 8006f26:	6022      	str	r2, [r4, #0]
 8006f28:	701d      	strb	r5, [r3, #0]
 8006f2a:	e7db      	b.n	8006ee4 <_puts_r+0x88>
 8006f2c:	08007e90 	.word	0x08007e90
 8006f30:	08007eb0 	.word	0x08007eb0
 8006f34:	08007e70 	.word	0x08007e70

08006f38 <puts>:
 8006f38:	4b02      	ldr	r3, [pc, #8]	; (8006f44 <puts+0xc>)
 8006f3a:	4601      	mov	r1, r0
 8006f3c:	6818      	ldr	r0, [r3, #0]
 8006f3e:	f7ff bf8d 	b.w	8006e5c <_puts_r>
 8006f42:	bf00      	nop
 8006f44:	20000010 	.word	0x20000010

08006f48 <cleanup_glue>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	6809      	ldr	r1, [r1, #0]
 8006f4e:	4605      	mov	r5, r0
 8006f50:	b109      	cbz	r1, 8006f56 <cleanup_glue+0xe>
 8006f52:	f7ff fff9 	bl	8006f48 <cleanup_glue>
 8006f56:	4621      	mov	r1, r4
 8006f58:	4628      	mov	r0, r5
 8006f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f5e:	f000 bad9 	b.w	8007514 <_free_r>
	...

08006f64 <_reclaim_reent>:
 8006f64:	4b2c      	ldr	r3, [pc, #176]	; (8007018 <_reclaim_reent+0xb4>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4283      	cmp	r3, r0
 8006f6a:	b570      	push	{r4, r5, r6, lr}
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	d051      	beq.n	8007014 <_reclaim_reent+0xb0>
 8006f70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006f72:	b143      	cbz	r3, 8006f86 <_reclaim_reent+0x22>
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d14a      	bne.n	8007010 <_reclaim_reent+0xac>
 8006f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f7c:	6819      	ldr	r1, [r3, #0]
 8006f7e:	b111      	cbz	r1, 8006f86 <_reclaim_reent+0x22>
 8006f80:	4620      	mov	r0, r4
 8006f82:	f000 fac7 	bl	8007514 <_free_r>
 8006f86:	6961      	ldr	r1, [r4, #20]
 8006f88:	b111      	cbz	r1, 8006f90 <_reclaim_reent+0x2c>
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f000 fac2 	bl	8007514 <_free_r>
 8006f90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006f92:	b111      	cbz	r1, 8006f9a <_reclaim_reent+0x36>
 8006f94:	4620      	mov	r0, r4
 8006f96:	f000 fabd 	bl	8007514 <_free_r>
 8006f9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f9c:	b111      	cbz	r1, 8006fa4 <_reclaim_reent+0x40>
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f000 fab8 	bl	8007514 <_free_r>
 8006fa4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006fa6:	b111      	cbz	r1, 8006fae <_reclaim_reent+0x4a>
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f000 fab3 	bl	8007514 <_free_r>
 8006fae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006fb0:	b111      	cbz	r1, 8006fb8 <_reclaim_reent+0x54>
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f000 faae 	bl	8007514 <_free_r>
 8006fb8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006fba:	b111      	cbz	r1, 8006fc2 <_reclaim_reent+0x5e>
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f000 faa9 	bl	8007514 <_free_r>
 8006fc2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006fc4:	b111      	cbz	r1, 8006fcc <_reclaim_reent+0x68>
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f000 faa4 	bl	8007514 <_free_r>
 8006fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fce:	b111      	cbz	r1, 8006fd6 <_reclaim_reent+0x72>
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f000 fa9f 	bl	8007514 <_free_r>
 8006fd6:	69a3      	ldr	r3, [r4, #24]
 8006fd8:	b1e3      	cbz	r3, 8007014 <_reclaim_reent+0xb0>
 8006fda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006fdc:	4620      	mov	r0, r4
 8006fde:	4798      	blx	r3
 8006fe0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006fe2:	b1b9      	cbz	r1, 8007014 <_reclaim_reent+0xb0>
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006fea:	f7ff bfad 	b.w	8006f48 <cleanup_glue>
 8006fee:	5949      	ldr	r1, [r1, r5]
 8006ff0:	b941      	cbnz	r1, 8007004 <_reclaim_reent+0xa0>
 8006ff2:	3504      	adds	r5, #4
 8006ff4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ff6:	2d80      	cmp	r5, #128	; 0x80
 8006ff8:	68d9      	ldr	r1, [r3, #12]
 8006ffa:	d1f8      	bne.n	8006fee <_reclaim_reent+0x8a>
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f000 fa89 	bl	8007514 <_free_r>
 8007002:	e7ba      	b.n	8006f7a <_reclaim_reent+0x16>
 8007004:	680e      	ldr	r6, [r1, #0]
 8007006:	4620      	mov	r0, r4
 8007008:	f000 fa84 	bl	8007514 <_free_r>
 800700c:	4631      	mov	r1, r6
 800700e:	e7ef      	b.n	8006ff0 <_reclaim_reent+0x8c>
 8007010:	2500      	movs	r5, #0
 8007012:	e7ef      	b.n	8006ff4 <_reclaim_reent+0x90>
 8007014:	bd70      	pop	{r4, r5, r6, pc}
 8007016:	bf00      	nop
 8007018:	20000010 	.word	0x20000010

0800701c <_sbrk_r>:
 800701c:	b538      	push	{r3, r4, r5, lr}
 800701e:	4d06      	ldr	r5, [pc, #24]	; (8007038 <_sbrk_r+0x1c>)
 8007020:	2300      	movs	r3, #0
 8007022:	4604      	mov	r4, r0
 8007024:	4608      	mov	r0, r1
 8007026:	602b      	str	r3, [r5, #0]
 8007028:	f7fa f8bc 	bl	80011a4 <_sbrk>
 800702c:	1c43      	adds	r3, r0, #1
 800702e:	d102      	bne.n	8007036 <_sbrk_r+0x1a>
 8007030:	682b      	ldr	r3, [r5, #0]
 8007032:	b103      	cbz	r3, 8007036 <_sbrk_r+0x1a>
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	bd38      	pop	{r3, r4, r5, pc}
 8007038:	200041d8 	.word	0x200041d8

0800703c <__sread>:
 800703c:	b510      	push	{r4, lr}
 800703e:	460c      	mov	r4, r1
 8007040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007044:	f000 fda0 	bl	8007b88 <_read_r>
 8007048:	2800      	cmp	r0, #0
 800704a:	bfab      	itete	ge
 800704c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800704e:	89a3      	ldrhlt	r3, [r4, #12]
 8007050:	181b      	addge	r3, r3, r0
 8007052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007056:	bfac      	ite	ge
 8007058:	6563      	strge	r3, [r4, #84]	; 0x54
 800705a:	81a3      	strhlt	r3, [r4, #12]
 800705c:	bd10      	pop	{r4, pc}

0800705e <__swrite>:
 800705e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007062:	461f      	mov	r7, r3
 8007064:	898b      	ldrh	r3, [r1, #12]
 8007066:	05db      	lsls	r3, r3, #23
 8007068:	4605      	mov	r5, r0
 800706a:	460c      	mov	r4, r1
 800706c:	4616      	mov	r6, r2
 800706e:	d505      	bpl.n	800707c <__swrite+0x1e>
 8007070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007074:	2302      	movs	r3, #2
 8007076:	2200      	movs	r2, #0
 8007078:	f000 f9c8 	bl	800740c <_lseek_r>
 800707c:	89a3      	ldrh	r3, [r4, #12]
 800707e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007082:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007086:	81a3      	strh	r3, [r4, #12]
 8007088:	4632      	mov	r2, r6
 800708a:	463b      	mov	r3, r7
 800708c:	4628      	mov	r0, r5
 800708e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007092:	f000 b869 	b.w	8007168 <_write_r>

08007096 <__sseek>:
 8007096:	b510      	push	{r4, lr}
 8007098:	460c      	mov	r4, r1
 800709a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709e:	f000 f9b5 	bl	800740c <_lseek_r>
 80070a2:	1c43      	adds	r3, r0, #1
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	bf15      	itete	ne
 80070a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80070aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070b2:	81a3      	strheq	r3, [r4, #12]
 80070b4:	bf18      	it	ne
 80070b6:	81a3      	strhne	r3, [r4, #12]
 80070b8:	bd10      	pop	{r4, pc}

080070ba <__sclose>:
 80070ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070be:	f000 b8d3 	b.w	8007268 <_close_r>
	...

080070c4 <__swbuf_r>:
 80070c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c6:	460e      	mov	r6, r1
 80070c8:	4614      	mov	r4, r2
 80070ca:	4605      	mov	r5, r0
 80070cc:	b118      	cbz	r0, 80070d6 <__swbuf_r+0x12>
 80070ce:	6983      	ldr	r3, [r0, #24]
 80070d0:	b90b      	cbnz	r3, 80070d6 <__swbuf_r+0x12>
 80070d2:	f7ff fd49 	bl	8006b68 <__sinit>
 80070d6:	4b21      	ldr	r3, [pc, #132]	; (800715c <__swbuf_r+0x98>)
 80070d8:	429c      	cmp	r4, r3
 80070da:	d12b      	bne.n	8007134 <__swbuf_r+0x70>
 80070dc:	686c      	ldr	r4, [r5, #4]
 80070de:	69a3      	ldr	r3, [r4, #24]
 80070e0:	60a3      	str	r3, [r4, #8]
 80070e2:	89a3      	ldrh	r3, [r4, #12]
 80070e4:	071a      	lsls	r2, r3, #28
 80070e6:	d52f      	bpl.n	8007148 <__swbuf_r+0x84>
 80070e8:	6923      	ldr	r3, [r4, #16]
 80070ea:	b36b      	cbz	r3, 8007148 <__swbuf_r+0x84>
 80070ec:	6923      	ldr	r3, [r4, #16]
 80070ee:	6820      	ldr	r0, [r4, #0]
 80070f0:	1ac0      	subs	r0, r0, r3
 80070f2:	6963      	ldr	r3, [r4, #20]
 80070f4:	b2f6      	uxtb	r6, r6
 80070f6:	4283      	cmp	r3, r0
 80070f8:	4637      	mov	r7, r6
 80070fa:	dc04      	bgt.n	8007106 <__swbuf_r+0x42>
 80070fc:	4621      	mov	r1, r4
 80070fe:	4628      	mov	r0, r5
 8007100:	f000 f948 	bl	8007394 <_fflush_r>
 8007104:	bb30      	cbnz	r0, 8007154 <__swbuf_r+0x90>
 8007106:	68a3      	ldr	r3, [r4, #8]
 8007108:	3b01      	subs	r3, #1
 800710a:	60a3      	str	r3, [r4, #8]
 800710c:	6823      	ldr	r3, [r4, #0]
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	6022      	str	r2, [r4, #0]
 8007112:	701e      	strb	r6, [r3, #0]
 8007114:	6963      	ldr	r3, [r4, #20]
 8007116:	3001      	adds	r0, #1
 8007118:	4283      	cmp	r3, r0
 800711a:	d004      	beq.n	8007126 <__swbuf_r+0x62>
 800711c:	89a3      	ldrh	r3, [r4, #12]
 800711e:	07db      	lsls	r3, r3, #31
 8007120:	d506      	bpl.n	8007130 <__swbuf_r+0x6c>
 8007122:	2e0a      	cmp	r6, #10
 8007124:	d104      	bne.n	8007130 <__swbuf_r+0x6c>
 8007126:	4621      	mov	r1, r4
 8007128:	4628      	mov	r0, r5
 800712a:	f000 f933 	bl	8007394 <_fflush_r>
 800712e:	b988      	cbnz	r0, 8007154 <__swbuf_r+0x90>
 8007130:	4638      	mov	r0, r7
 8007132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007134:	4b0a      	ldr	r3, [pc, #40]	; (8007160 <__swbuf_r+0x9c>)
 8007136:	429c      	cmp	r4, r3
 8007138:	d101      	bne.n	800713e <__swbuf_r+0x7a>
 800713a:	68ac      	ldr	r4, [r5, #8]
 800713c:	e7cf      	b.n	80070de <__swbuf_r+0x1a>
 800713e:	4b09      	ldr	r3, [pc, #36]	; (8007164 <__swbuf_r+0xa0>)
 8007140:	429c      	cmp	r4, r3
 8007142:	bf08      	it	eq
 8007144:	68ec      	ldreq	r4, [r5, #12]
 8007146:	e7ca      	b.n	80070de <__swbuf_r+0x1a>
 8007148:	4621      	mov	r1, r4
 800714a:	4628      	mov	r0, r5
 800714c:	f000 f81e 	bl	800718c <__swsetup_r>
 8007150:	2800      	cmp	r0, #0
 8007152:	d0cb      	beq.n	80070ec <__swbuf_r+0x28>
 8007154:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007158:	e7ea      	b.n	8007130 <__swbuf_r+0x6c>
 800715a:	bf00      	nop
 800715c:	08007e90 	.word	0x08007e90
 8007160:	08007eb0 	.word	0x08007eb0
 8007164:	08007e70 	.word	0x08007e70

08007168 <_write_r>:
 8007168:	b538      	push	{r3, r4, r5, lr}
 800716a:	4d07      	ldr	r5, [pc, #28]	; (8007188 <_write_r+0x20>)
 800716c:	4604      	mov	r4, r0
 800716e:	4608      	mov	r0, r1
 8007170:	4611      	mov	r1, r2
 8007172:	2200      	movs	r2, #0
 8007174:	602a      	str	r2, [r5, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	f7f9 ffc3 	bl	8001102 <_write>
 800717c:	1c43      	adds	r3, r0, #1
 800717e:	d102      	bne.n	8007186 <_write_r+0x1e>
 8007180:	682b      	ldr	r3, [r5, #0]
 8007182:	b103      	cbz	r3, 8007186 <_write_r+0x1e>
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	bd38      	pop	{r3, r4, r5, pc}
 8007188:	200041d8 	.word	0x200041d8

0800718c <__swsetup_r>:
 800718c:	4b32      	ldr	r3, [pc, #200]	; (8007258 <__swsetup_r+0xcc>)
 800718e:	b570      	push	{r4, r5, r6, lr}
 8007190:	681d      	ldr	r5, [r3, #0]
 8007192:	4606      	mov	r6, r0
 8007194:	460c      	mov	r4, r1
 8007196:	b125      	cbz	r5, 80071a2 <__swsetup_r+0x16>
 8007198:	69ab      	ldr	r3, [r5, #24]
 800719a:	b913      	cbnz	r3, 80071a2 <__swsetup_r+0x16>
 800719c:	4628      	mov	r0, r5
 800719e:	f7ff fce3 	bl	8006b68 <__sinit>
 80071a2:	4b2e      	ldr	r3, [pc, #184]	; (800725c <__swsetup_r+0xd0>)
 80071a4:	429c      	cmp	r4, r3
 80071a6:	d10f      	bne.n	80071c8 <__swsetup_r+0x3c>
 80071a8:	686c      	ldr	r4, [r5, #4]
 80071aa:	89a3      	ldrh	r3, [r4, #12]
 80071ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071b0:	0719      	lsls	r1, r3, #28
 80071b2:	d42c      	bmi.n	800720e <__swsetup_r+0x82>
 80071b4:	06dd      	lsls	r5, r3, #27
 80071b6:	d411      	bmi.n	80071dc <__swsetup_r+0x50>
 80071b8:	2309      	movs	r3, #9
 80071ba:	6033      	str	r3, [r6, #0]
 80071bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071c0:	81a3      	strh	r3, [r4, #12]
 80071c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071c6:	e03e      	b.n	8007246 <__swsetup_r+0xba>
 80071c8:	4b25      	ldr	r3, [pc, #148]	; (8007260 <__swsetup_r+0xd4>)
 80071ca:	429c      	cmp	r4, r3
 80071cc:	d101      	bne.n	80071d2 <__swsetup_r+0x46>
 80071ce:	68ac      	ldr	r4, [r5, #8]
 80071d0:	e7eb      	b.n	80071aa <__swsetup_r+0x1e>
 80071d2:	4b24      	ldr	r3, [pc, #144]	; (8007264 <__swsetup_r+0xd8>)
 80071d4:	429c      	cmp	r4, r3
 80071d6:	bf08      	it	eq
 80071d8:	68ec      	ldreq	r4, [r5, #12]
 80071da:	e7e6      	b.n	80071aa <__swsetup_r+0x1e>
 80071dc:	0758      	lsls	r0, r3, #29
 80071de:	d512      	bpl.n	8007206 <__swsetup_r+0x7a>
 80071e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071e2:	b141      	cbz	r1, 80071f6 <__swsetup_r+0x6a>
 80071e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071e8:	4299      	cmp	r1, r3
 80071ea:	d002      	beq.n	80071f2 <__swsetup_r+0x66>
 80071ec:	4630      	mov	r0, r6
 80071ee:	f000 f991 	bl	8007514 <_free_r>
 80071f2:	2300      	movs	r3, #0
 80071f4:	6363      	str	r3, [r4, #52]	; 0x34
 80071f6:	89a3      	ldrh	r3, [r4, #12]
 80071f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071fc:	81a3      	strh	r3, [r4, #12]
 80071fe:	2300      	movs	r3, #0
 8007200:	6063      	str	r3, [r4, #4]
 8007202:	6923      	ldr	r3, [r4, #16]
 8007204:	6023      	str	r3, [r4, #0]
 8007206:	89a3      	ldrh	r3, [r4, #12]
 8007208:	f043 0308 	orr.w	r3, r3, #8
 800720c:	81a3      	strh	r3, [r4, #12]
 800720e:	6923      	ldr	r3, [r4, #16]
 8007210:	b94b      	cbnz	r3, 8007226 <__swsetup_r+0x9a>
 8007212:	89a3      	ldrh	r3, [r4, #12]
 8007214:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800721c:	d003      	beq.n	8007226 <__swsetup_r+0x9a>
 800721e:	4621      	mov	r1, r4
 8007220:	4630      	mov	r0, r6
 8007222:	f000 f92b 	bl	800747c <__smakebuf_r>
 8007226:	89a0      	ldrh	r0, [r4, #12]
 8007228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800722c:	f010 0301 	ands.w	r3, r0, #1
 8007230:	d00a      	beq.n	8007248 <__swsetup_r+0xbc>
 8007232:	2300      	movs	r3, #0
 8007234:	60a3      	str	r3, [r4, #8]
 8007236:	6963      	ldr	r3, [r4, #20]
 8007238:	425b      	negs	r3, r3
 800723a:	61a3      	str	r3, [r4, #24]
 800723c:	6923      	ldr	r3, [r4, #16]
 800723e:	b943      	cbnz	r3, 8007252 <__swsetup_r+0xc6>
 8007240:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007244:	d1ba      	bne.n	80071bc <__swsetup_r+0x30>
 8007246:	bd70      	pop	{r4, r5, r6, pc}
 8007248:	0781      	lsls	r1, r0, #30
 800724a:	bf58      	it	pl
 800724c:	6963      	ldrpl	r3, [r4, #20]
 800724e:	60a3      	str	r3, [r4, #8]
 8007250:	e7f4      	b.n	800723c <__swsetup_r+0xb0>
 8007252:	2000      	movs	r0, #0
 8007254:	e7f7      	b.n	8007246 <__swsetup_r+0xba>
 8007256:	bf00      	nop
 8007258:	20000010 	.word	0x20000010
 800725c:	08007e90 	.word	0x08007e90
 8007260:	08007eb0 	.word	0x08007eb0
 8007264:	08007e70 	.word	0x08007e70

08007268 <_close_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	4d06      	ldr	r5, [pc, #24]	; (8007284 <_close_r+0x1c>)
 800726c:	2300      	movs	r3, #0
 800726e:	4604      	mov	r4, r0
 8007270:	4608      	mov	r0, r1
 8007272:	602b      	str	r3, [r5, #0]
 8007274:	f7f9 ff61 	bl	800113a <_close>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	d102      	bne.n	8007282 <_close_r+0x1a>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	b103      	cbz	r3, 8007282 <_close_r+0x1a>
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	200041d8 	.word	0x200041d8

08007288 <__sflush_r>:
 8007288:	898a      	ldrh	r2, [r1, #12]
 800728a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800728e:	4605      	mov	r5, r0
 8007290:	0710      	lsls	r0, r2, #28
 8007292:	460c      	mov	r4, r1
 8007294:	d458      	bmi.n	8007348 <__sflush_r+0xc0>
 8007296:	684b      	ldr	r3, [r1, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	dc05      	bgt.n	80072a8 <__sflush_r+0x20>
 800729c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800729e:	2b00      	cmp	r3, #0
 80072a0:	dc02      	bgt.n	80072a8 <__sflush_r+0x20>
 80072a2:	2000      	movs	r0, #0
 80072a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072aa:	2e00      	cmp	r6, #0
 80072ac:	d0f9      	beq.n	80072a2 <__sflush_r+0x1a>
 80072ae:	2300      	movs	r3, #0
 80072b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072b4:	682f      	ldr	r7, [r5, #0]
 80072b6:	602b      	str	r3, [r5, #0]
 80072b8:	d032      	beq.n	8007320 <__sflush_r+0x98>
 80072ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	075a      	lsls	r2, r3, #29
 80072c0:	d505      	bpl.n	80072ce <__sflush_r+0x46>
 80072c2:	6863      	ldr	r3, [r4, #4]
 80072c4:	1ac0      	subs	r0, r0, r3
 80072c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072c8:	b10b      	cbz	r3, 80072ce <__sflush_r+0x46>
 80072ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072cc:	1ac0      	subs	r0, r0, r3
 80072ce:	2300      	movs	r3, #0
 80072d0:	4602      	mov	r2, r0
 80072d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072d4:	6a21      	ldr	r1, [r4, #32]
 80072d6:	4628      	mov	r0, r5
 80072d8:	47b0      	blx	r6
 80072da:	1c43      	adds	r3, r0, #1
 80072dc:	89a3      	ldrh	r3, [r4, #12]
 80072de:	d106      	bne.n	80072ee <__sflush_r+0x66>
 80072e0:	6829      	ldr	r1, [r5, #0]
 80072e2:	291d      	cmp	r1, #29
 80072e4:	d82c      	bhi.n	8007340 <__sflush_r+0xb8>
 80072e6:	4a2a      	ldr	r2, [pc, #168]	; (8007390 <__sflush_r+0x108>)
 80072e8:	40ca      	lsrs	r2, r1
 80072ea:	07d6      	lsls	r6, r2, #31
 80072ec:	d528      	bpl.n	8007340 <__sflush_r+0xb8>
 80072ee:	2200      	movs	r2, #0
 80072f0:	6062      	str	r2, [r4, #4]
 80072f2:	04d9      	lsls	r1, r3, #19
 80072f4:	6922      	ldr	r2, [r4, #16]
 80072f6:	6022      	str	r2, [r4, #0]
 80072f8:	d504      	bpl.n	8007304 <__sflush_r+0x7c>
 80072fa:	1c42      	adds	r2, r0, #1
 80072fc:	d101      	bne.n	8007302 <__sflush_r+0x7a>
 80072fe:	682b      	ldr	r3, [r5, #0]
 8007300:	b903      	cbnz	r3, 8007304 <__sflush_r+0x7c>
 8007302:	6560      	str	r0, [r4, #84]	; 0x54
 8007304:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007306:	602f      	str	r7, [r5, #0]
 8007308:	2900      	cmp	r1, #0
 800730a:	d0ca      	beq.n	80072a2 <__sflush_r+0x1a>
 800730c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007310:	4299      	cmp	r1, r3
 8007312:	d002      	beq.n	800731a <__sflush_r+0x92>
 8007314:	4628      	mov	r0, r5
 8007316:	f000 f8fd 	bl	8007514 <_free_r>
 800731a:	2000      	movs	r0, #0
 800731c:	6360      	str	r0, [r4, #52]	; 0x34
 800731e:	e7c1      	b.n	80072a4 <__sflush_r+0x1c>
 8007320:	6a21      	ldr	r1, [r4, #32]
 8007322:	2301      	movs	r3, #1
 8007324:	4628      	mov	r0, r5
 8007326:	47b0      	blx	r6
 8007328:	1c41      	adds	r1, r0, #1
 800732a:	d1c7      	bne.n	80072bc <__sflush_r+0x34>
 800732c:	682b      	ldr	r3, [r5, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d0c4      	beq.n	80072bc <__sflush_r+0x34>
 8007332:	2b1d      	cmp	r3, #29
 8007334:	d001      	beq.n	800733a <__sflush_r+0xb2>
 8007336:	2b16      	cmp	r3, #22
 8007338:	d101      	bne.n	800733e <__sflush_r+0xb6>
 800733a:	602f      	str	r7, [r5, #0]
 800733c:	e7b1      	b.n	80072a2 <__sflush_r+0x1a>
 800733e:	89a3      	ldrh	r3, [r4, #12]
 8007340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007344:	81a3      	strh	r3, [r4, #12]
 8007346:	e7ad      	b.n	80072a4 <__sflush_r+0x1c>
 8007348:	690f      	ldr	r7, [r1, #16]
 800734a:	2f00      	cmp	r7, #0
 800734c:	d0a9      	beq.n	80072a2 <__sflush_r+0x1a>
 800734e:	0793      	lsls	r3, r2, #30
 8007350:	680e      	ldr	r6, [r1, #0]
 8007352:	bf08      	it	eq
 8007354:	694b      	ldreq	r3, [r1, #20]
 8007356:	600f      	str	r7, [r1, #0]
 8007358:	bf18      	it	ne
 800735a:	2300      	movne	r3, #0
 800735c:	eba6 0807 	sub.w	r8, r6, r7
 8007360:	608b      	str	r3, [r1, #8]
 8007362:	f1b8 0f00 	cmp.w	r8, #0
 8007366:	dd9c      	ble.n	80072a2 <__sflush_r+0x1a>
 8007368:	6a21      	ldr	r1, [r4, #32]
 800736a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800736c:	4643      	mov	r3, r8
 800736e:	463a      	mov	r2, r7
 8007370:	4628      	mov	r0, r5
 8007372:	47b0      	blx	r6
 8007374:	2800      	cmp	r0, #0
 8007376:	dc06      	bgt.n	8007386 <__sflush_r+0xfe>
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800737e:	81a3      	strh	r3, [r4, #12]
 8007380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007384:	e78e      	b.n	80072a4 <__sflush_r+0x1c>
 8007386:	4407      	add	r7, r0
 8007388:	eba8 0800 	sub.w	r8, r8, r0
 800738c:	e7e9      	b.n	8007362 <__sflush_r+0xda>
 800738e:	bf00      	nop
 8007390:	20400001 	.word	0x20400001

08007394 <_fflush_r>:
 8007394:	b538      	push	{r3, r4, r5, lr}
 8007396:	690b      	ldr	r3, [r1, #16]
 8007398:	4605      	mov	r5, r0
 800739a:	460c      	mov	r4, r1
 800739c:	b913      	cbnz	r3, 80073a4 <_fflush_r+0x10>
 800739e:	2500      	movs	r5, #0
 80073a0:	4628      	mov	r0, r5
 80073a2:	bd38      	pop	{r3, r4, r5, pc}
 80073a4:	b118      	cbz	r0, 80073ae <_fflush_r+0x1a>
 80073a6:	6983      	ldr	r3, [r0, #24]
 80073a8:	b90b      	cbnz	r3, 80073ae <_fflush_r+0x1a>
 80073aa:	f7ff fbdd 	bl	8006b68 <__sinit>
 80073ae:	4b14      	ldr	r3, [pc, #80]	; (8007400 <_fflush_r+0x6c>)
 80073b0:	429c      	cmp	r4, r3
 80073b2:	d11b      	bne.n	80073ec <_fflush_r+0x58>
 80073b4:	686c      	ldr	r4, [r5, #4]
 80073b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0ef      	beq.n	800739e <_fflush_r+0xa>
 80073be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073c0:	07d0      	lsls	r0, r2, #31
 80073c2:	d404      	bmi.n	80073ce <_fflush_r+0x3a>
 80073c4:	0599      	lsls	r1, r3, #22
 80073c6:	d402      	bmi.n	80073ce <_fflush_r+0x3a>
 80073c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073ca:	f7ff fc90 	bl	8006cee <__retarget_lock_acquire_recursive>
 80073ce:	4628      	mov	r0, r5
 80073d0:	4621      	mov	r1, r4
 80073d2:	f7ff ff59 	bl	8007288 <__sflush_r>
 80073d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073d8:	07da      	lsls	r2, r3, #31
 80073da:	4605      	mov	r5, r0
 80073dc:	d4e0      	bmi.n	80073a0 <_fflush_r+0xc>
 80073de:	89a3      	ldrh	r3, [r4, #12]
 80073e0:	059b      	lsls	r3, r3, #22
 80073e2:	d4dd      	bmi.n	80073a0 <_fflush_r+0xc>
 80073e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073e6:	f7ff fc83 	bl	8006cf0 <__retarget_lock_release_recursive>
 80073ea:	e7d9      	b.n	80073a0 <_fflush_r+0xc>
 80073ec:	4b05      	ldr	r3, [pc, #20]	; (8007404 <_fflush_r+0x70>)
 80073ee:	429c      	cmp	r4, r3
 80073f0:	d101      	bne.n	80073f6 <_fflush_r+0x62>
 80073f2:	68ac      	ldr	r4, [r5, #8]
 80073f4:	e7df      	b.n	80073b6 <_fflush_r+0x22>
 80073f6:	4b04      	ldr	r3, [pc, #16]	; (8007408 <_fflush_r+0x74>)
 80073f8:	429c      	cmp	r4, r3
 80073fa:	bf08      	it	eq
 80073fc:	68ec      	ldreq	r4, [r5, #12]
 80073fe:	e7da      	b.n	80073b6 <_fflush_r+0x22>
 8007400:	08007e90 	.word	0x08007e90
 8007404:	08007eb0 	.word	0x08007eb0
 8007408:	08007e70 	.word	0x08007e70

0800740c <_lseek_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	4d07      	ldr	r5, [pc, #28]	; (800742c <_lseek_r+0x20>)
 8007410:	4604      	mov	r4, r0
 8007412:	4608      	mov	r0, r1
 8007414:	4611      	mov	r1, r2
 8007416:	2200      	movs	r2, #0
 8007418:	602a      	str	r2, [r5, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	f7f9 feb4 	bl	8001188 <_lseek>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d102      	bne.n	800742a <_lseek_r+0x1e>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	b103      	cbz	r3, 800742a <_lseek_r+0x1e>
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	bd38      	pop	{r3, r4, r5, pc}
 800742c:	200041d8 	.word	0x200041d8

08007430 <__swhatbuf_r>:
 8007430:	b570      	push	{r4, r5, r6, lr}
 8007432:	460e      	mov	r6, r1
 8007434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007438:	2900      	cmp	r1, #0
 800743a:	b096      	sub	sp, #88	; 0x58
 800743c:	4614      	mov	r4, r2
 800743e:	461d      	mov	r5, r3
 8007440:	da08      	bge.n	8007454 <__swhatbuf_r+0x24>
 8007442:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	602a      	str	r2, [r5, #0]
 800744a:	061a      	lsls	r2, r3, #24
 800744c:	d410      	bmi.n	8007470 <__swhatbuf_r+0x40>
 800744e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007452:	e00e      	b.n	8007472 <__swhatbuf_r+0x42>
 8007454:	466a      	mov	r2, sp
 8007456:	f000 fba9 	bl	8007bac <_fstat_r>
 800745a:	2800      	cmp	r0, #0
 800745c:	dbf1      	blt.n	8007442 <__swhatbuf_r+0x12>
 800745e:	9a01      	ldr	r2, [sp, #4]
 8007460:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007464:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007468:	425a      	negs	r2, r3
 800746a:	415a      	adcs	r2, r3
 800746c:	602a      	str	r2, [r5, #0]
 800746e:	e7ee      	b.n	800744e <__swhatbuf_r+0x1e>
 8007470:	2340      	movs	r3, #64	; 0x40
 8007472:	2000      	movs	r0, #0
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	b016      	add	sp, #88	; 0x58
 8007478:	bd70      	pop	{r4, r5, r6, pc}
	...

0800747c <__smakebuf_r>:
 800747c:	898b      	ldrh	r3, [r1, #12]
 800747e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007480:	079d      	lsls	r5, r3, #30
 8007482:	4606      	mov	r6, r0
 8007484:	460c      	mov	r4, r1
 8007486:	d507      	bpl.n	8007498 <__smakebuf_r+0x1c>
 8007488:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800748c:	6023      	str	r3, [r4, #0]
 800748e:	6123      	str	r3, [r4, #16]
 8007490:	2301      	movs	r3, #1
 8007492:	6163      	str	r3, [r4, #20]
 8007494:	b002      	add	sp, #8
 8007496:	bd70      	pop	{r4, r5, r6, pc}
 8007498:	ab01      	add	r3, sp, #4
 800749a:	466a      	mov	r2, sp
 800749c:	f7ff ffc8 	bl	8007430 <__swhatbuf_r>
 80074a0:	9900      	ldr	r1, [sp, #0]
 80074a2:	4605      	mov	r5, r0
 80074a4:	4630      	mov	r0, r6
 80074a6:	f7ff fc4d 	bl	8006d44 <_malloc_r>
 80074aa:	b948      	cbnz	r0, 80074c0 <__smakebuf_r+0x44>
 80074ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074b0:	059a      	lsls	r2, r3, #22
 80074b2:	d4ef      	bmi.n	8007494 <__smakebuf_r+0x18>
 80074b4:	f023 0303 	bic.w	r3, r3, #3
 80074b8:	f043 0302 	orr.w	r3, r3, #2
 80074bc:	81a3      	strh	r3, [r4, #12]
 80074be:	e7e3      	b.n	8007488 <__smakebuf_r+0xc>
 80074c0:	4b0d      	ldr	r3, [pc, #52]	; (80074f8 <__smakebuf_r+0x7c>)
 80074c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80074c4:	89a3      	ldrh	r3, [r4, #12]
 80074c6:	6020      	str	r0, [r4, #0]
 80074c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074cc:	81a3      	strh	r3, [r4, #12]
 80074ce:	9b00      	ldr	r3, [sp, #0]
 80074d0:	6163      	str	r3, [r4, #20]
 80074d2:	9b01      	ldr	r3, [sp, #4]
 80074d4:	6120      	str	r0, [r4, #16]
 80074d6:	b15b      	cbz	r3, 80074f0 <__smakebuf_r+0x74>
 80074d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074dc:	4630      	mov	r0, r6
 80074de:	f000 fb77 	bl	8007bd0 <_isatty_r>
 80074e2:	b128      	cbz	r0, 80074f0 <__smakebuf_r+0x74>
 80074e4:	89a3      	ldrh	r3, [r4, #12]
 80074e6:	f023 0303 	bic.w	r3, r3, #3
 80074ea:	f043 0301 	orr.w	r3, r3, #1
 80074ee:	81a3      	strh	r3, [r4, #12]
 80074f0:	89a0      	ldrh	r0, [r4, #12]
 80074f2:	4305      	orrs	r5, r0
 80074f4:	81a5      	strh	r5, [r4, #12]
 80074f6:	e7cd      	b.n	8007494 <__smakebuf_r+0x18>
 80074f8:	08006b01 	.word	0x08006b01

080074fc <__malloc_lock>:
 80074fc:	4801      	ldr	r0, [pc, #4]	; (8007504 <__malloc_lock+0x8>)
 80074fe:	f7ff bbf6 	b.w	8006cee <__retarget_lock_acquire_recursive>
 8007502:	bf00      	nop
 8007504:	200041cc 	.word	0x200041cc

08007508 <__malloc_unlock>:
 8007508:	4801      	ldr	r0, [pc, #4]	; (8007510 <__malloc_unlock+0x8>)
 800750a:	f7ff bbf1 	b.w	8006cf0 <__retarget_lock_release_recursive>
 800750e:	bf00      	nop
 8007510:	200041cc 	.word	0x200041cc

08007514 <_free_r>:
 8007514:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007516:	2900      	cmp	r1, #0
 8007518:	d044      	beq.n	80075a4 <_free_r+0x90>
 800751a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800751e:	9001      	str	r0, [sp, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	f1a1 0404 	sub.w	r4, r1, #4
 8007526:	bfb8      	it	lt
 8007528:	18e4      	addlt	r4, r4, r3
 800752a:	f7ff ffe7 	bl	80074fc <__malloc_lock>
 800752e:	4a1e      	ldr	r2, [pc, #120]	; (80075a8 <_free_r+0x94>)
 8007530:	9801      	ldr	r0, [sp, #4]
 8007532:	6813      	ldr	r3, [r2, #0]
 8007534:	b933      	cbnz	r3, 8007544 <_free_r+0x30>
 8007536:	6063      	str	r3, [r4, #4]
 8007538:	6014      	str	r4, [r2, #0]
 800753a:	b003      	add	sp, #12
 800753c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007540:	f7ff bfe2 	b.w	8007508 <__malloc_unlock>
 8007544:	42a3      	cmp	r3, r4
 8007546:	d908      	bls.n	800755a <_free_r+0x46>
 8007548:	6825      	ldr	r5, [r4, #0]
 800754a:	1961      	adds	r1, r4, r5
 800754c:	428b      	cmp	r3, r1
 800754e:	bf01      	itttt	eq
 8007550:	6819      	ldreq	r1, [r3, #0]
 8007552:	685b      	ldreq	r3, [r3, #4]
 8007554:	1949      	addeq	r1, r1, r5
 8007556:	6021      	streq	r1, [r4, #0]
 8007558:	e7ed      	b.n	8007536 <_free_r+0x22>
 800755a:	461a      	mov	r2, r3
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	b10b      	cbz	r3, 8007564 <_free_r+0x50>
 8007560:	42a3      	cmp	r3, r4
 8007562:	d9fa      	bls.n	800755a <_free_r+0x46>
 8007564:	6811      	ldr	r1, [r2, #0]
 8007566:	1855      	adds	r5, r2, r1
 8007568:	42a5      	cmp	r5, r4
 800756a:	d10b      	bne.n	8007584 <_free_r+0x70>
 800756c:	6824      	ldr	r4, [r4, #0]
 800756e:	4421      	add	r1, r4
 8007570:	1854      	adds	r4, r2, r1
 8007572:	42a3      	cmp	r3, r4
 8007574:	6011      	str	r1, [r2, #0]
 8007576:	d1e0      	bne.n	800753a <_free_r+0x26>
 8007578:	681c      	ldr	r4, [r3, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	6053      	str	r3, [r2, #4]
 800757e:	4421      	add	r1, r4
 8007580:	6011      	str	r1, [r2, #0]
 8007582:	e7da      	b.n	800753a <_free_r+0x26>
 8007584:	d902      	bls.n	800758c <_free_r+0x78>
 8007586:	230c      	movs	r3, #12
 8007588:	6003      	str	r3, [r0, #0]
 800758a:	e7d6      	b.n	800753a <_free_r+0x26>
 800758c:	6825      	ldr	r5, [r4, #0]
 800758e:	1961      	adds	r1, r4, r5
 8007590:	428b      	cmp	r3, r1
 8007592:	bf04      	itt	eq
 8007594:	6819      	ldreq	r1, [r3, #0]
 8007596:	685b      	ldreq	r3, [r3, #4]
 8007598:	6063      	str	r3, [r4, #4]
 800759a:	bf04      	itt	eq
 800759c:	1949      	addeq	r1, r1, r5
 800759e:	6021      	streq	r1, [r4, #0]
 80075a0:	6054      	str	r4, [r2, #4]
 80075a2:	e7ca      	b.n	800753a <_free_r+0x26>
 80075a4:	b003      	add	sp, #12
 80075a6:	bd30      	pop	{r4, r5, pc}
 80075a8:	200041d0 	.word	0x200041d0

080075ac <__sfputc_r>:
 80075ac:	6893      	ldr	r3, [r2, #8]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	b410      	push	{r4}
 80075b4:	6093      	str	r3, [r2, #8]
 80075b6:	da08      	bge.n	80075ca <__sfputc_r+0x1e>
 80075b8:	6994      	ldr	r4, [r2, #24]
 80075ba:	42a3      	cmp	r3, r4
 80075bc:	db01      	blt.n	80075c2 <__sfputc_r+0x16>
 80075be:	290a      	cmp	r1, #10
 80075c0:	d103      	bne.n	80075ca <__sfputc_r+0x1e>
 80075c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075c6:	f7ff bd7d 	b.w	80070c4 <__swbuf_r>
 80075ca:	6813      	ldr	r3, [r2, #0]
 80075cc:	1c58      	adds	r0, r3, #1
 80075ce:	6010      	str	r0, [r2, #0]
 80075d0:	7019      	strb	r1, [r3, #0]
 80075d2:	4608      	mov	r0, r1
 80075d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075d8:	4770      	bx	lr

080075da <__sfputs_r>:
 80075da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075dc:	4606      	mov	r6, r0
 80075de:	460f      	mov	r7, r1
 80075e0:	4614      	mov	r4, r2
 80075e2:	18d5      	adds	r5, r2, r3
 80075e4:	42ac      	cmp	r4, r5
 80075e6:	d101      	bne.n	80075ec <__sfputs_r+0x12>
 80075e8:	2000      	movs	r0, #0
 80075ea:	e007      	b.n	80075fc <__sfputs_r+0x22>
 80075ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f0:	463a      	mov	r2, r7
 80075f2:	4630      	mov	r0, r6
 80075f4:	f7ff ffda 	bl	80075ac <__sfputc_r>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d1f3      	bne.n	80075e4 <__sfputs_r+0xa>
 80075fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007600 <_vfiprintf_r>:
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	460d      	mov	r5, r1
 8007606:	b09d      	sub	sp, #116	; 0x74
 8007608:	4614      	mov	r4, r2
 800760a:	4698      	mov	r8, r3
 800760c:	4606      	mov	r6, r0
 800760e:	b118      	cbz	r0, 8007618 <_vfiprintf_r+0x18>
 8007610:	6983      	ldr	r3, [r0, #24]
 8007612:	b90b      	cbnz	r3, 8007618 <_vfiprintf_r+0x18>
 8007614:	f7ff faa8 	bl	8006b68 <__sinit>
 8007618:	4b89      	ldr	r3, [pc, #548]	; (8007840 <_vfiprintf_r+0x240>)
 800761a:	429d      	cmp	r5, r3
 800761c:	d11b      	bne.n	8007656 <_vfiprintf_r+0x56>
 800761e:	6875      	ldr	r5, [r6, #4]
 8007620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007622:	07d9      	lsls	r1, r3, #31
 8007624:	d405      	bmi.n	8007632 <_vfiprintf_r+0x32>
 8007626:	89ab      	ldrh	r3, [r5, #12]
 8007628:	059a      	lsls	r2, r3, #22
 800762a:	d402      	bmi.n	8007632 <_vfiprintf_r+0x32>
 800762c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800762e:	f7ff fb5e 	bl	8006cee <__retarget_lock_acquire_recursive>
 8007632:	89ab      	ldrh	r3, [r5, #12]
 8007634:	071b      	lsls	r3, r3, #28
 8007636:	d501      	bpl.n	800763c <_vfiprintf_r+0x3c>
 8007638:	692b      	ldr	r3, [r5, #16]
 800763a:	b9eb      	cbnz	r3, 8007678 <_vfiprintf_r+0x78>
 800763c:	4629      	mov	r1, r5
 800763e:	4630      	mov	r0, r6
 8007640:	f7ff fda4 	bl	800718c <__swsetup_r>
 8007644:	b1c0      	cbz	r0, 8007678 <_vfiprintf_r+0x78>
 8007646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007648:	07dc      	lsls	r4, r3, #31
 800764a:	d50e      	bpl.n	800766a <_vfiprintf_r+0x6a>
 800764c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007650:	b01d      	add	sp, #116	; 0x74
 8007652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007656:	4b7b      	ldr	r3, [pc, #492]	; (8007844 <_vfiprintf_r+0x244>)
 8007658:	429d      	cmp	r5, r3
 800765a:	d101      	bne.n	8007660 <_vfiprintf_r+0x60>
 800765c:	68b5      	ldr	r5, [r6, #8]
 800765e:	e7df      	b.n	8007620 <_vfiprintf_r+0x20>
 8007660:	4b79      	ldr	r3, [pc, #484]	; (8007848 <_vfiprintf_r+0x248>)
 8007662:	429d      	cmp	r5, r3
 8007664:	bf08      	it	eq
 8007666:	68f5      	ldreq	r5, [r6, #12]
 8007668:	e7da      	b.n	8007620 <_vfiprintf_r+0x20>
 800766a:	89ab      	ldrh	r3, [r5, #12]
 800766c:	0598      	lsls	r0, r3, #22
 800766e:	d4ed      	bmi.n	800764c <_vfiprintf_r+0x4c>
 8007670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007672:	f7ff fb3d 	bl	8006cf0 <__retarget_lock_release_recursive>
 8007676:	e7e9      	b.n	800764c <_vfiprintf_r+0x4c>
 8007678:	2300      	movs	r3, #0
 800767a:	9309      	str	r3, [sp, #36]	; 0x24
 800767c:	2320      	movs	r3, #32
 800767e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007682:	f8cd 800c 	str.w	r8, [sp, #12]
 8007686:	2330      	movs	r3, #48	; 0x30
 8007688:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800784c <_vfiprintf_r+0x24c>
 800768c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007690:	f04f 0901 	mov.w	r9, #1
 8007694:	4623      	mov	r3, r4
 8007696:	469a      	mov	sl, r3
 8007698:	f813 2b01 	ldrb.w	r2, [r3], #1
 800769c:	b10a      	cbz	r2, 80076a2 <_vfiprintf_r+0xa2>
 800769e:	2a25      	cmp	r2, #37	; 0x25
 80076a0:	d1f9      	bne.n	8007696 <_vfiprintf_r+0x96>
 80076a2:	ebba 0b04 	subs.w	fp, sl, r4
 80076a6:	d00b      	beq.n	80076c0 <_vfiprintf_r+0xc0>
 80076a8:	465b      	mov	r3, fp
 80076aa:	4622      	mov	r2, r4
 80076ac:	4629      	mov	r1, r5
 80076ae:	4630      	mov	r0, r6
 80076b0:	f7ff ff93 	bl	80075da <__sfputs_r>
 80076b4:	3001      	adds	r0, #1
 80076b6:	f000 80aa 	beq.w	800780e <_vfiprintf_r+0x20e>
 80076ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076bc:	445a      	add	r2, fp
 80076be:	9209      	str	r2, [sp, #36]	; 0x24
 80076c0:	f89a 3000 	ldrb.w	r3, [sl]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 80a2 	beq.w	800780e <_vfiprintf_r+0x20e>
 80076ca:	2300      	movs	r3, #0
 80076cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076d4:	f10a 0a01 	add.w	sl, sl, #1
 80076d8:	9304      	str	r3, [sp, #16]
 80076da:	9307      	str	r3, [sp, #28]
 80076dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076e0:	931a      	str	r3, [sp, #104]	; 0x68
 80076e2:	4654      	mov	r4, sl
 80076e4:	2205      	movs	r2, #5
 80076e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ea:	4858      	ldr	r0, [pc, #352]	; (800784c <_vfiprintf_r+0x24c>)
 80076ec:	f7f8 fd78 	bl	80001e0 <memchr>
 80076f0:	9a04      	ldr	r2, [sp, #16]
 80076f2:	b9d8      	cbnz	r0, 800772c <_vfiprintf_r+0x12c>
 80076f4:	06d1      	lsls	r1, r2, #27
 80076f6:	bf44      	itt	mi
 80076f8:	2320      	movmi	r3, #32
 80076fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076fe:	0713      	lsls	r3, r2, #28
 8007700:	bf44      	itt	mi
 8007702:	232b      	movmi	r3, #43	; 0x2b
 8007704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007708:	f89a 3000 	ldrb.w	r3, [sl]
 800770c:	2b2a      	cmp	r3, #42	; 0x2a
 800770e:	d015      	beq.n	800773c <_vfiprintf_r+0x13c>
 8007710:	9a07      	ldr	r2, [sp, #28]
 8007712:	4654      	mov	r4, sl
 8007714:	2000      	movs	r0, #0
 8007716:	f04f 0c0a 	mov.w	ip, #10
 800771a:	4621      	mov	r1, r4
 800771c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007720:	3b30      	subs	r3, #48	; 0x30
 8007722:	2b09      	cmp	r3, #9
 8007724:	d94e      	bls.n	80077c4 <_vfiprintf_r+0x1c4>
 8007726:	b1b0      	cbz	r0, 8007756 <_vfiprintf_r+0x156>
 8007728:	9207      	str	r2, [sp, #28]
 800772a:	e014      	b.n	8007756 <_vfiprintf_r+0x156>
 800772c:	eba0 0308 	sub.w	r3, r0, r8
 8007730:	fa09 f303 	lsl.w	r3, r9, r3
 8007734:	4313      	orrs	r3, r2
 8007736:	9304      	str	r3, [sp, #16]
 8007738:	46a2      	mov	sl, r4
 800773a:	e7d2      	b.n	80076e2 <_vfiprintf_r+0xe2>
 800773c:	9b03      	ldr	r3, [sp, #12]
 800773e:	1d19      	adds	r1, r3, #4
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	9103      	str	r1, [sp, #12]
 8007744:	2b00      	cmp	r3, #0
 8007746:	bfbb      	ittet	lt
 8007748:	425b      	neglt	r3, r3
 800774a:	f042 0202 	orrlt.w	r2, r2, #2
 800774e:	9307      	strge	r3, [sp, #28]
 8007750:	9307      	strlt	r3, [sp, #28]
 8007752:	bfb8      	it	lt
 8007754:	9204      	strlt	r2, [sp, #16]
 8007756:	7823      	ldrb	r3, [r4, #0]
 8007758:	2b2e      	cmp	r3, #46	; 0x2e
 800775a:	d10c      	bne.n	8007776 <_vfiprintf_r+0x176>
 800775c:	7863      	ldrb	r3, [r4, #1]
 800775e:	2b2a      	cmp	r3, #42	; 0x2a
 8007760:	d135      	bne.n	80077ce <_vfiprintf_r+0x1ce>
 8007762:	9b03      	ldr	r3, [sp, #12]
 8007764:	1d1a      	adds	r2, r3, #4
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	9203      	str	r2, [sp, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	bfb8      	it	lt
 800776e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007772:	3402      	adds	r4, #2
 8007774:	9305      	str	r3, [sp, #20]
 8007776:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800785c <_vfiprintf_r+0x25c>
 800777a:	7821      	ldrb	r1, [r4, #0]
 800777c:	2203      	movs	r2, #3
 800777e:	4650      	mov	r0, sl
 8007780:	f7f8 fd2e 	bl	80001e0 <memchr>
 8007784:	b140      	cbz	r0, 8007798 <_vfiprintf_r+0x198>
 8007786:	2340      	movs	r3, #64	; 0x40
 8007788:	eba0 000a 	sub.w	r0, r0, sl
 800778c:	fa03 f000 	lsl.w	r0, r3, r0
 8007790:	9b04      	ldr	r3, [sp, #16]
 8007792:	4303      	orrs	r3, r0
 8007794:	3401      	adds	r4, #1
 8007796:	9304      	str	r3, [sp, #16]
 8007798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800779c:	482c      	ldr	r0, [pc, #176]	; (8007850 <_vfiprintf_r+0x250>)
 800779e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077a2:	2206      	movs	r2, #6
 80077a4:	f7f8 fd1c 	bl	80001e0 <memchr>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	d03f      	beq.n	800782c <_vfiprintf_r+0x22c>
 80077ac:	4b29      	ldr	r3, [pc, #164]	; (8007854 <_vfiprintf_r+0x254>)
 80077ae:	bb1b      	cbnz	r3, 80077f8 <_vfiprintf_r+0x1f8>
 80077b0:	9b03      	ldr	r3, [sp, #12]
 80077b2:	3307      	adds	r3, #7
 80077b4:	f023 0307 	bic.w	r3, r3, #7
 80077b8:	3308      	adds	r3, #8
 80077ba:	9303      	str	r3, [sp, #12]
 80077bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077be:	443b      	add	r3, r7
 80077c0:	9309      	str	r3, [sp, #36]	; 0x24
 80077c2:	e767      	b.n	8007694 <_vfiprintf_r+0x94>
 80077c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80077c8:	460c      	mov	r4, r1
 80077ca:	2001      	movs	r0, #1
 80077cc:	e7a5      	b.n	800771a <_vfiprintf_r+0x11a>
 80077ce:	2300      	movs	r3, #0
 80077d0:	3401      	adds	r4, #1
 80077d2:	9305      	str	r3, [sp, #20]
 80077d4:	4619      	mov	r1, r3
 80077d6:	f04f 0c0a 	mov.w	ip, #10
 80077da:	4620      	mov	r0, r4
 80077dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077e0:	3a30      	subs	r2, #48	; 0x30
 80077e2:	2a09      	cmp	r2, #9
 80077e4:	d903      	bls.n	80077ee <_vfiprintf_r+0x1ee>
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d0c5      	beq.n	8007776 <_vfiprintf_r+0x176>
 80077ea:	9105      	str	r1, [sp, #20]
 80077ec:	e7c3      	b.n	8007776 <_vfiprintf_r+0x176>
 80077ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80077f2:	4604      	mov	r4, r0
 80077f4:	2301      	movs	r3, #1
 80077f6:	e7f0      	b.n	80077da <_vfiprintf_r+0x1da>
 80077f8:	ab03      	add	r3, sp, #12
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	462a      	mov	r2, r5
 80077fe:	4b16      	ldr	r3, [pc, #88]	; (8007858 <_vfiprintf_r+0x258>)
 8007800:	a904      	add	r1, sp, #16
 8007802:	4630      	mov	r0, r6
 8007804:	f3af 8000 	nop.w
 8007808:	4607      	mov	r7, r0
 800780a:	1c78      	adds	r0, r7, #1
 800780c:	d1d6      	bne.n	80077bc <_vfiprintf_r+0x1bc>
 800780e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007810:	07d9      	lsls	r1, r3, #31
 8007812:	d405      	bmi.n	8007820 <_vfiprintf_r+0x220>
 8007814:	89ab      	ldrh	r3, [r5, #12]
 8007816:	059a      	lsls	r2, r3, #22
 8007818:	d402      	bmi.n	8007820 <_vfiprintf_r+0x220>
 800781a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800781c:	f7ff fa68 	bl	8006cf0 <__retarget_lock_release_recursive>
 8007820:	89ab      	ldrh	r3, [r5, #12]
 8007822:	065b      	lsls	r3, r3, #25
 8007824:	f53f af12 	bmi.w	800764c <_vfiprintf_r+0x4c>
 8007828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800782a:	e711      	b.n	8007650 <_vfiprintf_r+0x50>
 800782c:	ab03      	add	r3, sp, #12
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	462a      	mov	r2, r5
 8007832:	4b09      	ldr	r3, [pc, #36]	; (8007858 <_vfiprintf_r+0x258>)
 8007834:	a904      	add	r1, sp, #16
 8007836:	4630      	mov	r0, r6
 8007838:	f000 f880 	bl	800793c <_printf_i>
 800783c:	e7e4      	b.n	8007808 <_vfiprintf_r+0x208>
 800783e:	bf00      	nop
 8007840:	08007e90 	.word	0x08007e90
 8007844:	08007eb0 	.word	0x08007eb0
 8007848:	08007e70 	.word	0x08007e70
 800784c:	08007ed4 	.word	0x08007ed4
 8007850:	08007ede 	.word	0x08007ede
 8007854:	00000000 	.word	0x00000000
 8007858:	080075db 	.word	0x080075db
 800785c:	08007eda 	.word	0x08007eda

08007860 <_printf_common>:
 8007860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007864:	4616      	mov	r6, r2
 8007866:	4699      	mov	r9, r3
 8007868:	688a      	ldr	r2, [r1, #8]
 800786a:	690b      	ldr	r3, [r1, #16]
 800786c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007870:	4293      	cmp	r3, r2
 8007872:	bfb8      	it	lt
 8007874:	4613      	movlt	r3, r2
 8007876:	6033      	str	r3, [r6, #0]
 8007878:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800787c:	4607      	mov	r7, r0
 800787e:	460c      	mov	r4, r1
 8007880:	b10a      	cbz	r2, 8007886 <_printf_common+0x26>
 8007882:	3301      	adds	r3, #1
 8007884:	6033      	str	r3, [r6, #0]
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	0699      	lsls	r1, r3, #26
 800788a:	bf42      	ittt	mi
 800788c:	6833      	ldrmi	r3, [r6, #0]
 800788e:	3302      	addmi	r3, #2
 8007890:	6033      	strmi	r3, [r6, #0]
 8007892:	6825      	ldr	r5, [r4, #0]
 8007894:	f015 0506 	ands.w	r5, r5, #6
 8007898:	d106      	bne.n	80078a8 <_printf_common+0x48>
 800789a:	f104 0a19 	add.w	sl, r4, #25
 800789e:	68e3      	ldr	r3, [r4, #12]
 80078a0:	6832      	ldr	r2, [r6, #0]
 80078a2:	1a9b      	subs	r3, r3, r2
 80078a4:	42ab      	cmp	r3, r5
 80078a6:	dc26      	bgt.n	80078f6 <_printf_common+0x96>
 80078a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078ac:	1e13      	subs	r3, r2, #0
 80078ae:	6822      	ldr	r2, [r4, #0]
 80078b0:	bf18      	it	ne
 80078b2:	2301      	movne	r3, #1
 80078b4:	0692      	lsls	r2, r2, #26
 80078b6:	d42b      	bmi.n	8007910 <_printf_common+0xb0>
 80078b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078bc:	4649      	mov	r1, r9
 80078be:	4638      	mov	r0, r7
 80078c0:	47c0      	blx	r8
 80078c2:	3001      	adds	r0, #1
 80078c4:	d01e      	beq.n	8007904 <_printf_common+0xa4>
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	68e5      	ldr	r5, [r4, #12]
 80078ca:	6832      	ldr	r2, [r6, #0]
 80078cc:	f003 0306 	and.w	r3, r3, #6
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	bf08      	it	eq
 80078d4:	1aad      	subeq	r5, r5, r2
 80078d6:	68a3      	ldr	r3, [r4, #8]
 80078d8:	6922      	ldr	r2, [r4, #16]
 80078da:	bf0c      	ite	eq
 80078dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078e0:	2500      	movne	r5, #0
 80078e2:	4293      	cmp	r3, r2
 80078e4:	bfc4      	itt	gt
 80078e6:	1a9b      	subgt	r3, r3, r2
 80078e8:	18ed      	addgt	r5, r5, r3
 80078ea:	2600      	movs	r6, #0
 80078ec:	341a      	adds	r4, #26
 80078ee:	42b5      	cmp	r5, r6
 80078f0:	d11a      	bne.n	8007928 <_printf_common+0xc8>
 80078f2:	2000      	movs	r0, #0
 80078f4:	e008      	b.n	8007908 <_printf_common+0xa8>
 80078f6:	2301      	movs	r3, #1
 80078f8:	4652      	mov	r2, sl
 80078fa:	4649      	mov	r1, r9
 80078fc:	4638      	mov	r0, r7
 80078fe:	47c0      	blx	r8
 8007900:	3001      	adds	r0, #1
 8007902:	d103      	bne.n	800790c <_printf_common+0xac>
 8007904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800790c:	3501      	adds	r5, #1
 800790e:	e7c6      	b.n	800789e <_printf_common+0x3e>
 8007910:	18e1      	adds	r1, r4, r3
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	2030      	movs	r0, #48	; 0x30
 8007916:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800791a:	4422      	add	r2, r4
 800791c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007920:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007924:	3302      	adds	r3, #2
 8007926:	e7c7      	b.n	80078b8 <_printf_common+0x58>
 8007928:	2301      	movs	r3, #1
 800792a:	4622      	mov	r2, r4
 800792c:	4649      	mov	r1, r9
 800792e:	4638      	mov	r0, r7
 8007930:	47c0      	blx	r8
 8007932:	3001      	adds	r0, #1
 8007934:	d0e6      	beq.n	8007904 <_printf_common+0xa4>
 8007936:	3601      	adds	r6, #1
 8007938:	e7d9      	b.n	80078ee <_printf_common+0x8e>
	...

0800793c <_printf_i>:
 800793c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007940:	7e0f      	ldrb	r7, [r1, #24]
 8007942:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007944:	2f78      	cmp	r7, #120	; 0x78
 8007946:	4691      	mov	r9, r2
 8007948:	4680      	mov	r8, r0
 800794a:	460c      	mov	r4, r1
 800794c:	469a      	mov	sl, r3
 800794e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007952:	d807      	bhi.n	8007964 <_printf_i+0x28>
 8007954:	2f62      	cmp	r7, #98	; 0x62
 8007956:	d80a      	bhi.n	800796e <_printf_i+0x32>
 8007958:	2f00      	cmp	r7, #0
 800795a:	f000 80d8 	beq.w	8007b0e <_printf_i+0x1d2>
 800795e:	2f58      	cmp	r7, #88	; 0x58
 8007960:	f000 80a3 	beq.w	8007aaa <_printf_i+0x16e>
 8007964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007968:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800796c:	e03a      	b.n	80079e4 <_printf_i+0xa8>
 800796e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007972:	2b15      	cmp	r3, #21
 8007974:	d8f6      	bhi.n	8007964 <_printf_i+0x28>
 8007976:	a101      	add	r1, pc, #4	; (adr r1, 800797c <_printf_i+0x40>)
 8007978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800797c:	080079d5 	.word	0x080079d5
 8007980:	080079e9 	.word	0x080079e9
 8007984:	08007965 	.word	0x08007965
 8007988:	08007965 	.word	0x08007965
 800798c:	08007965 	.word	0x08007965
 8007990:	08007965 	.word	0x08007965
 8007994:	080079e9 	.word	0x080079e9
 8007998:	08007965 	.word	0x08007965
 800799c:	08007965 	.word	0x08007965
 80079a0:	08007965 	.word	0x08007965
 80079a4:	08007965 	.word	0x08007965
 80079a8:	08007af5 	.word	0x08007af5
 80079ac:	08007a19 	.word	0x08007a19
 80079b0:	08007ad7 	.word	0x08007ad7
 80079b4:	08007965 	.word	0x08007965
 80079b8:	08007965 	.word	0x08007965
 80079bc:	08007b17 	.word	0x08007b17
 80079c0:	08007965 	.word	0x08007965
 80079c4:	08007a19 	.word	0x08007a19
 80079c8:	08007965 	.word	0x08007965
 80079cc:	08007965 	.word	0x08007965
 80079d0:	08007adf 	.word	0x08007adf
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	1d1a      	adds	r2, r3, #4
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	602a      	str	r2, [r5, #0]
 80079dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079e4:	2301      	movs	r3, #1
 80079e6:	e0a3      	b.n	8007b30 <_printf_i+0x1f4>
 80079e8:	6820      	ldr	r0, [r4, #0]
 80079ea:	6829      	ldr	r1, [r5, #0]
 80079ec:	0606      	lsls	r6, r0, #24
 80079ee:	f101 0304 	add.w	r3, r1, #4
 80079f2:	d50a      	bpl.n	8007a0a <_printf_i+0xce>
 80079f4:	680e      	ldr	r6, [r1, #0]
 80079f6:	602b      	str	r3, [r5, #0]
 80079f8:	2e00      	cmp	r6, #0
 80079fa:	da03      	bge.n	8007a04 <_printf_i+0xc8>
 80079fc:	232d      	movs	r3, #45	; 0x2d
 80079fe:	4276      	negs	r6, r6
 8007a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a04:	485e      	ldr	r0, [pc, #376]	; (8007b80 <_printf_i+0x244>)
 8007a06:	230a      	movs	r3, #10
 8007a08:	e019      	b.n	8007a3e <_printf_i+0x102>
 8007a0a:	680e      	ldr	r6, [r1, #0]
 8007a0c:	602b      	str	r3, [r5, #0]
 8007a0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a12:	bf18      	it	ne
 8007a14:	b236      	sxthne	r6, r6
 8007a16:	e7ef      	b.n	80079f8 <_printf_i+0xbc>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	6820      	ldr	r0, [r4, #0]
 8007a1c:	1d19      	adds	r1, r3, #4
 8007a1e:	6029      	str	r1, [r5, #0]
 8007a20:	0601      	lsls	r1, r0, #24
 8007a22:	d501      	bpl.n	8007a28 <_printf_i+0xec>
 8007a24:	681e      	ldr	r6, [r3, #0]
 8007a26:	e002      	b.n	8007a2e <_printf_i+0xf2>
 8007a28:	0646      	lsls	r6, r0, #25
 8007a2a:	d5fb      	bpl.n	8007a24 <_printf_i+0xe8>
 8007a2c:	881e      	ldrh	r6, [r3, #0]
 8007a2e:	4854      	ldr	r0, [pc, #336]	; (8007b80 <_printf_i+0x244>)
 8007a30:	2f6f      	cmp	r7, #111	; 0x6f
 8007a32:	bf0c      	ite	eq
 8007a34:	2308      	moveq	r3, #8
 8007a36:	230a      	movne	r3, #10
 8007a38:	2100      	movs	r1, #0
 8007a3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a3e:	6865      	ldr	r5, [r4, #4]
 8007a40:	60a5      	str	r5, [r4, #8]
 8007a42:	2d00      	cmp	r5, #0
 8007a44:	bfa2      	ittt	ge
 8007a46:	6821      	ldrge	r1, [r4, #0]
 8007a48:	f021 0104 	bicge.w	r1, r1, #4
 8007a4c:	6021      	strge	r1, [r4, #0]
 8007a4e:	b90e      	cbnz	r6, 8007a54 <_printf_i+0x118>
 8007a50:	2d00      	cmp	r5, #0
 8007a52:	d04d      	beq.n	8007af0 <_printf_i+0x1b4>
 8007a54:	4615      	mov	r5, r2
 8007a56:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a5a:	fb03 6711 	mls	r7, r3, r1, r6
 8007a5e:	5dc7      	ldrb	r7, [r0, r7]
 8007a60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a64:	4637      	mov	r7, r6
 8007a66:	42bb      	cmp	r3, r7
 8007a68:	460e      	mov	r6, r1
 8007a6a:	d9f4      	bls.n	8007a56 <_printf_i+0x11a>
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d10b      	bne.n	8007a88 <_printf_i+0x14c>
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	07de      	lsls	r6, r3, #31
 8007a74:	d508      	bpl.n	8007a88 <_printf_i+0x14c>
 8007a76:	6923      	ldr	r3, [r4, #16]
 8007a78:	6861      	ldr	r1, [r4, #4]
 8007a7a:	4299      	cmp	r1, r3
 8007a7c:	bfde      	ittt	le
 8007a7e:	2330      	movle	r3, #48	; 0x30
 8007a80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a84:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007a88:	1b52      	subs	r2, r2, r5
 8007a8a:	6122      	str	r2, [r4, #16]
 8007a8c:	f8cd a000 	str.w	sl, [sp]
 8007a90:	464b      	mov	r3, r9
 8007a92:	aa03      	add	r2, sp, #12
 8007a94:	4621      	mov	r1, r4
 8007a96:	4640      	mov	r0, r8
 8007a98:	f7ff fee2 	bl	8007860 <_printf_common>
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	d14c      	bne.n	8007b3a <_printf_i+0x1fe>
 8007aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007aa4:	b004      	add	sp, #16
 8007aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aaa:	4835      	ldr	r0, [pc, #212]	; (8007b80 <_printf_i+0x244>)
 8007aac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ab0:	6829      	ldr	r1, [r5, #0]
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ab8:	6029      	str	r1, [r5, #0]
 8007aba:	061d      	lsls	r5, r3, #24
 8007abc:	d514      	bpl.n	8007ae8 <_printf_i+0x1ac>
 8007abe:	07df      	lsls	r7, r3, #31
 8007ac0:	bf44      	itt	mi
 8007ac2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ac6:	6023      	strmi	r3, [r4, #0]
 8007ac8:	b91e      	cbnz	r6, 8007ad2 <_printf_i+0x196>
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	f023 0320 	bic.w	r3, r3, #32
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	2310      	movs	r3, #16
 8007ad4:	e7b0      	b.n	8007a38 <_printf_i+0xfc>
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	f043 0320 	orr.w	r3, r3, #32
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	2378      	movs	r3, #120	; 0x78
 8007ae0:	4828      	ldr	r0, [pc, #160]	; (8007b84 <_printf_i+0x248>)
 8007ae2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ae6:	e7e3      	b.n	8007ab0 <_printf_i+0x174>
 8007ae8:	0659      	lsls	r1, r3, #25
 8007aea:	bf48      	it	mi
 8007aec:	b2b6      	uxthmi	r6, r6
 8007aee:	e7e6      	b.n	8007abe <_printf_i+0x182>
 8007af0:	4615      	mov	r5, r2
 8007af2:	e7bb      	b.n	8007a6c <_printf_i+0x130>
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	6826      	ldr	r6, [r4, #0]
 8007af8:	6961      	ldr	r1, [r4, #20]
 8007afa:	1d18      	adds	r0, r3, #4
 8007afc:	6028      	str	r0, [r5, #0]
 8007afe:	0635      	lsls	r5, r6, #24
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	d501      	bpl.n	8007b08 <_printf_i+0x1cc>
 8007b04:	6019      	str	r1, [r3, #0]
 8007b06:	e002      	b.n	8007b0e <_printf_i+0x1d2>
 8007b08:	0670      	lsls	r0, r6, #25
 8007b0a:	d5fb      	bpl.n	8007b04 <_printf_i+0x1c8>
 8007b0c:	8019      	strh	r1, [r3, #0]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	6123      	str	r3, [r4, #16]
 8007b12:	4615      	mov	r5, r2
 8007b14:	e7ba      	b.n	8007a8c <_printf_i+0x150>
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	1d1a      	adds	r2, r3, #4
 8007b1a:	602a      	str	r2, [r5, #0]
 8007b1c:	681d      	ldr	r5, [r3, #0]
 8007b1e:	6862      	ldr	r2, [r4, #4]
 8007b20:	2100      	movs	r1, #0
 8007b22:	4628      	mov	r0, r5
 8007b24:	f7f8 fb5c 	bl	80001e0 <memchr>
 8007b28:	b108      	cbz	r0, 8007b2e <_printf_i+0x1f2>
 8007b2a:	1b40      	subs	r0, r0, r5
 8007b2c:	6060      	str	r0, [r4, #4]
 8007b2e:	6863      	ldr	r3, [r4, #4]
 8007b30:	6123      	str	r3, [r4, #16]
 8007b32:	2300      	movs	r3, #0
 8007b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b38:	e7a8      	b.n	8007a8c <_printf_i+0x150>
 8007b3a:	6923      	ldr	r3, [r4, #16]
 8007b3c:	462a      	mov	r2, r5
 8007b3e:	4649      	mov	r1, r9
 8007b40:	4640      	mov	r0, r8
 8007b42:	47d0      	blx	sl
 8007b44:	3001      	adds	r0, #1
 8007b46:	d0ab      	beq.n	8007aa0 <_printf_i+0x164>
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	079b      	lsls	r3, r3, #30
 8007b4c:	d413      	bmi.n	8007b76 <_printf_i+0x23a>
 8007b4e:	68e0      	ldr	r0, [r4, #12]
 8007b50:	9b03      	ldr	r3, [sp, #12]
 8007b52:	4298      	cmp	r0, r3
 8007b54:	bfb8      	it	lt
 8007b56:	4618      	movlt	r0, r3
 8007b58:	e7a4      	b.n	8007aa4 <_printf_i+0x168>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4632      	mov	r2, r6
 8007b5e:	4649      	mov	r1, r9
 8007b60:	4640      	mov	r0, r8
 8007b62:	47d0      	blx	sl
 8007b64:	3001      	adds	r0, #1
 8007b66:	d09b      	beq.n	8007aa0 <_printf_i+0x164>
 8007b68:	3501      	adds	r5, #1
 8007b6a:	68e3      	ldr	r3, [r4, #12]
 8007b6c:	9903      	ldr	r1, [sp, #12]
 8007b6e:	1a5b      	subs	r3, r3, r1
 8007b70:	42ab      	cmp	r3, r5
 8007b72:	dcf2      	bgt.n	8007b5a <_printf_i+0x21e>
 8007b74:	e7eb      	b.n	8007b4e <_printf_i+0x212>
 8007b76:	2500      	movs	r5, #0
 8007b78:	f104 0619 	add.w	r6, r4, #25
 8007b7c:	e7f5      	b.n	8007b6a <_printf_i+0x22e>
 8007b7e:	bf00      	nop
 8007b80:	08007ee5 	.word	0x08007ee5
 8007b84:	08007ef6 	.word	0x08007ef6

08007b88 <_read_r>:
 8007b88:	b538      	push	{r3, r4, r5, lr}
 8007b8a:	4d07      	ldr	r5, [pc, #28]	; (8007ba8 <_read_r+0x20>)
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	4608      	mov	r0, r1
 8007b90:	4611      	mov	r1, r2
 8007b92:	2200      	movs	r2, #0
 8007b94:	602a      	str	r2, [r5, #0]
 8007b96:	461a      	mov	r2, r3
 8007b98:	f7f9 fa96 	bl	80010c8 <_read>
 8007b9c:	1c43      	adds	r3, r0, #1
 8007b9e:	d102      	bne.n	8007ba6 <_read_r+0x1e>
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	b103      	cbz	r3, 8007ba6 <_read_r+0x1e>
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	bd38      	pop	{r3, r4, r5, pc}
 8007ba8:	200041d8 	.word	0x200041d8

08007bac <_fstat_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	4d07      	ldr	r5, [pc, #28]	; (8007bcc <_fstat_r+0x20>)
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	4608      	mov	r0, r1
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	602b      	str	r3, [r5, #0]
 8007bba:	f7f9 faca 	bl	8001152 <_fstat>
 8007bbe:	1c43      	adds	r3, r0, #1
 8007bc0:	d102      	bne.n	8007bc8 <_fstat_r+0x1c>
 8007bc2:	682b      	ldr	r3, [r5, #0]
 8007bc4:	b103      	cbz	r3, 8007bc8 <_fstat_r+0x1c>
 8007bc6:	6023      	str	r3, [r4, #0]
 8007bc8:	bd38      	pop	{r3, r4, r5, pc}
 8007bca:	bf00      	nop
 8007bcc:	200041d8 	.word	0x200041d8

08007bd0 <_isatty_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4d06      	ldr	r5, [pc, #24]	; (8007bec <_isatty_r+0x1c>)
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	4604      	mov	r4, r0
 8007bd8:	4608      	mov	r0, r1
 8007bda:	602b      	str	r3, [r5, #0]
 8007bdc:	f7f9 fac9 	bl	8001172 <_isatty>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	d102      	bne.n	8007bea <_isatty_r+0x1a>
 8007be4:	682b      	ldr	r3, [r5, #0]
 8007be6:	b103      	cbz	r3, 8007bea <_isatty_r+0x1a>
 8007be8:	6023      	str	r3, [r4, #0]
 8007bea:	bd38      	pop	{r3, r4, r5, pc}
 8007bec:	200041d8 	.word	0x200041d8

08007bf0 <_init>:
 8007bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf2:	bf00      	nop
 8007bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bf6:	bc08      	pop	{r3}
 8007bf8:	469e      	mov	lr, r3
 8007bfa:	4770      	bx	lr

08007bfc <_fini>:
 8007bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfe:	bf00      	nop
 8007c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c02:	bc08      	pop	{r3}
 8007c04:	469e      	mov	lr, r3
 8007c06:	4770      	bx	lr
