
Cansat_final_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  08008bb8  08008bb8  00018bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f24  08008f24  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008f24  08008f24  00018f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f2c  08008f2c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f2c  08008f2c  00018f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f30  08008f30  00018f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042c4  20000078  08008fa8  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000433c  08008fa8  0002433c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab3e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c21  00000000  00000000  0003abe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  0003e808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  0003fdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005886  00000000  00000000  000411d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b642  00000000  00000000  00046a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c369  00000000  00000000  000620a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fe409  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061b0  00000000  00000000  000fe45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008ba0 	.word	0x08008ba0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08008ba0 	.word	0x08008ba0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Init>:
	 * et elle configure ce dernier pour qu'il réalise des mesures en continu.
	 * @param p_hi2c1 Pointeur vers une structure I2C qui contient l'information de configuration pour un i2c particulier
	 * @retval None
	 */
void Init(I2C_HandleTypeDef* p_hi2c1)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af04      	add	r7, sp, #16
 800058a:	6078      	str	r0, [r7, #4]

	uint8_t buff[6];
	buff[0] = 0x80;
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD,  PWR_MGMT_1,  1, &buff[0], 1, 10);
 8000590:	230a      	movs	r3, #10
 8000592:	9302      	str	r3, [sp, #8]
 8000594:	2301      	movs	r3, #1
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2301      	movs	r3, #1
 80005a0:	226b      	movs	r2, #107	; 0x6b
 80005a2:	21d0      	movs	r1, #208	; 0xd0
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f002 f84f 	bl	8002648 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80005aa:	2064      	movs	r0, #100	; 0x64
 80005ac:	f001 f872 	bl	8001694 <HAL_Delay>
	buff[0] = 0x1;
 80005b0:	2301      	movs	r3, #1
 80005b2:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD, PWR_MGMT_1,  1, &buff[0], 1, 10);
 80005b4:	230a      	movs	r3, #10
 80005b6:	9302      	str	r3, [sp, #8]
 80005b8:	2301      	movs	r3, #1
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2301      	movs	r3, #1
 80005c4:	226b      	movs	r2, #107	; 0x6b
 80005c6:	21d0      	movs	r1, #208	; 0xd0
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f002 f83d 	bl	8002648 <HAL_I2C_Mem_Write>


	/********* changement de la sensibilité de l'accélérometre  00=2g 01=4g 10=8g 11=16g *********/
	HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD,  ACCEL_CONFIG,  1, &buff[0], 1, 10);
 80005ce:	230a      	movs	r3, #10
 80005d0:	9302      	str	r3, [sp, #8]
 80005d2:	2301      	movs	r3, #1
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	f107 0308 	add.w	r3, r7, #8
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2301      	movs	r3, #1
 80005de:	221c      	movs	r2, #28
 80005e0:	21d0      	movs	r1, #208	; 0xd0
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f002 f92a 	bl	800283c <HAL_I2C_Mem_Read>

	//Pour mettre 00
	buff[0] =(buff[0] & (0b11100111)) ;
 80005e8:	7a3b      	ldrb	r3, [r7, #8]
 80005ea:	f023 0318 	bic.w	r3, r3, #24
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	723b      	strb	r3, [r7, #8]
	//buff[0] =(buff[0] & (0b11110111)) ;
	//buff[0] =(buff[0] | (0b00010000)) ;
	//Pour mettre 11
	//buff[0] =(buff[0] | (0b00011000)) ;

	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD,  ACCEL_CONFIG,  1, &buff[0], 1, 10);
 80005f2:	230a      	movs	r3, #10
 80005f4:	9302      	str	r3, [sp, #8]
 80005f6:	2301      	movs	r3, #1
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	f107 0308 	add.w	r3, r7, #8
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2301      	movs	r3, #1
 8000602:	221c      	movs	r2, #28
 8000604:	21d0      	movs	r1, #208	; 0xd0
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f002 f81e 	bl	8002648 <HAL_I2C_Mem_Write>


	buff[0]=0x2; // Bypass pour activer le magnétomètre
 800060c:	2302      	movs	r3, #2
 800060e:	723b      	strb	r3, [r7, #8]
		  if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,INT_PIN_CFG,1,&buff[0],1,10)!=HAL_OK){
 8000610:	230a      	movs	r3, #10
 8000612:	9302      	str	r3, [sp, #8]
 8000614:	2301      	movs	r3, #1
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2301      	movs	r3, #1
 8000620:	2237      	movs	r2, #55	; 0x37
 8000622:	21d0      	movs	r1, #208	; 0xd0
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f002 f80f 	bl	8002648 <HAL_I2C_Mem_Write>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d004      	beq.n	800063a <Init+0xb6>
			  printf("probleme activation magnetometre --> fct Init \r\n");
 8000630:	4851      	ldr	r0, [pc, #324]	; (8000778 <Init+0x1f4>)
 8000632:	f007 fc59 	bl	8007ee8 <puts>
		  	  Error_Handler();
 8000636:	f000 fba3 	bl	8000d80 <Error_Handler>
		  }
	buff[0]=0x16; // configuration mesure en continu du magnétomètre
 800063a:	2316      	movs	r3, #22
 800063c:	723b      	strb	r3, [r7, #8]
		 	  if(HAL_I2C_Mem_Write(p_hi2c1,MAGNETO_ADD,AK8963_CNTL,1,&buff[0],1,10)!=HAL_OK){
 800063e:	230a      	movs	r3, #10
 8000640:	9302      	str	r3, [sp, #8]
 8000642:	2301      	movs	r3, #1
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2301      	movs	r3, #1
 800064e:	220a      	movs	r2, #10
 8000650:	2118      	movs	r1, #24
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f001 fff8 	bl	8002648 <HAL_I2C_Mem_Write>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d004      	beq.n	8000668 <Init+0xe4>
		 		  printf("probleme configuration mesure magnetometre --> fct Init \r\n");
 800065e:	4847      	ldr	r0, [pc, #284]	; (800077c <Init+0x1f8>)
 8000660:	f007 fc42 	bl	8007ee8 <puts>
		 	  	  Error_Handler();
 8000664:	f000 fb8c 	bl	8000d80 <Error_Handler>

		 	  }

	/********** Réglage de la bande passante **********/

	buff[0]=0x3;
 8000668:	2303      	movs	r3, #3
 800066a:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,CONFIG,1,&buff[0],1,10)!=HAL_OK){
 800066c:	230a      	movs	r3, #10
 800066e:	9302      	str	r3, [sp, #8]
 8000670:	2301      	movs	r3, #1
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2301      	movs	r3, #1
 800067c:	221a      	movs	r2, #26
 800067e:	21d0      	movs	r1, #208	; 0xd0
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f001 ffe1 	bl	8002648 <HAL_I2C_Mem_Write>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d004      	beq.n	8000696 <Init+0x112>
		printf("probleme bande passante --> fct Init \r\n");
 800068c:	483c      	ldr	r0, [pc, #240]	; (8000780 <Init+0x1fc>)
 800068e:	f007 fc2b 	bl	8007ee8 <puts>
		Error_Handler();
 8000692:	f000 fb75 	bl	8000d80 <Error_Handler>
			Error_Handler();
		}
*/

	// bande passante à 250Hz : FCHOICE = 11 => FCHOICE_b = 00, DLPF_CFG = 000
		HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD,  GYRO_CONFIG,  1, &buff[0], 1, 10);
 8000696:	230a      	movs	r3, #10
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	2301      	movs	r3, #1
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2301      	movs	r3, #1
 80006a6:	221b      	movs	r2, #27
 80006a8:	21d0      	movs	r1, #208	; 0xd0
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f002 f8c6 	bl	800283c <HAL_I2C_Mem_Read>
		//Pour mettre 00 dans FCHOICE_b
		buff[0] =(buff[0] & (0b11111100)) ;
 80006b0:	7a3b      	ldrb	r3, [r7, #8]
 80006b2:	f023 0303 	bic.w	r3, r3, #3
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	723b      	strb	r3, [r7, #8]
		if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,GYRO_CONFIG,1,&buff[0],1,10)!=HAL_OK){
 80006ba:	230a      	movs	r3, #10
 80006bc:	9302      	str	r3, [sp, #8]
 80006be:	2301      	movs	r3, #1
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2301      	movs	r3, #1
 80006ca:	221b      	movs	r2, #27
 80006cc:	21d0      	movs	r1, #208	; 0xd0
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f001 ffba 	bl	8002648 <HAL_I2C_Mem_Write>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <Init+0x15a>
				Error_Handler(); }
 80006da:	f000 fb51 	bl	8000d80 <Error_Handler>
		//Pour mettre 000 dans DLPF_CFG
		HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD, CONFIG,  1, &buff[0], 1, 10);
 80006de:	230a      	movs	r3, #10
 80006e0:	9302      	str	r3, [sp, #8]
 80006e2:	2301      	movs	r3, #1
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	2301      	movs	r3, #1
 80006ee:	221a      	movs	r2, #26
 80006f0:	21d0      	movs	r1, #208	; 0xd0
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f002 f8a2 	bl	800283c <HAL_I2C_Mem_Read>
		buff[0] =(buff[0] & (0b11111000)) ;
 80006f8:	7a3b      	ldrb	r3, [r7, #8]
 80006fa:	f023 0307 	bic.w	r3, r3, #7
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	723b      	strb	r3, [r7, #8]
		if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,CONFIG,1,&buff[0],1,10)!=HAL_OK){
 8000702:	230a      	movs	r3, #10
 8000704:	9302      	str	r3, [sp, #8]
 8000706:	2301      	movs	r3, #1
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2301      	movs	r3, #1
 8000712:	221a      	movs	r2, #26
 8000714:	21d0      	movs	r1, #208	; 0xd0
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f001 ff96 	bl	8002648 <HAL_I2C_Mem_Write>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <Init+0x1a2>
				Error_Handler();
 8000722:	f000 fb2d 	bl	8000d80 <Error_Handler>
		}
*/

	/*********** Réglage de la fréquence d'échantillonnage **********/

	buff[0]=0xFF;
 8000726:	23ff      	movs	r3, #255	; 0xff
 8000728:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,SMPLRT_DIV,1,&buff[0],1,10)!=HAL_OK){
 800072a:	230a      	movs	r3, #10
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	2301      	movs	r3, #1
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2301      	movs	r3, #1
 800073a:	2219      	movs	r2, #25
 800073c:	21d0      	movs	r1, #208	; 0xd0
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f001 ff82 	bl	8002648 <HAL_I2C_Mem_Write>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d004      	beq.n	8000754 <Init+0x1d0>
		printf("probleme reglage frequence echantillonnage --> Init \r\n");
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <Init+0x200>)
 800074c:	f007 fbcc 	bl	8007ee8 <puts>
		Error_Handler();
 8000750:	f000 fb16 	bl	8000d80 <Error_Handler>
	}
	HAL_I2C_Mem_Read(p_hi2c1,MPU_ADD,LP_ACCEL_ODR,1,&buff[0],1,10);
 8000754:	230a      	movs	r3, #10
 8000756:	9302      	str	r3, [sp, #8]
 8000758:	2301      	movs	r3, #1
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2301      	movs	r3, #1
 8000764:	221e      	movs	r2, #30
 8000766:	21d0      	movs	r1, #208	; 0xd0
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f002 f867 	bl	800283c <HAL_I2C_Mem_Read>
	// a faire : changer la valeur de DLPF_CFG à 2 par exemple et voir en mode debug si la valeur des 4 derniers bits de LP_ACCEL_ODR est à 4.

}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	08008bb8 	.word	0x08008bb8
 800077c:	08008be8 	.word	0x08008be8
 8000780:	08008c24 	.word	0x08008c24
 8000784:	08008c4c 	.word	0x08008c4c

08000788 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000798:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	4a06      	ldr	r2, [pc, #24]	; (80007b8 <vApplicationGetIdleTaskMemory+0x30>)
 800079e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80007a6:	bf00      	nop
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	20000098 	.word	0x20000098
 80007b8:	2000014c 	.word	0x2000014c

080007bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007bc:	b5b0      	push	{r4, r5, r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <MX_FREERTOS_Init+0x30>)
 80007c4:	1d3c      	adds	r4, r7, #4
 80007c6:	461d      	mov	r5, r3
 80007c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f005 fdc8 	bl	800636e <osThreadCreate>
 80007de:	4603      	mov	r3, r0
 80007e0:	4a03      	ldr	r2, [pc, #12]	; (80007f0 <MX_FREERTOS_Init+0x34>)
 80007e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bdb0      	pop	{r4, r5, r7, pc}
 80007ec:	08008cdc 	.word	0x08008cdc
 80007f0:	20000094 	.word	0x20000094

080007f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f005 fe02 	bl	8006406 <osDelay>
 8000802:	e7fb      	b.n	80007fc <StartDefaultTask+0x8>

08000804 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b38      	ldr	r3, [pc, #224]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a37      	ldr	r2, [pc, #220]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b35      	ldr	r3, [pc, #212]	; (8000900 <MX_GPIO_Init+0xfc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b31      	ldr	r3, [pc, #196]	; (8000900 <MX_GPIO_Init+0xfc>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a30      	ldr	r2, [pc, #192]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a29      	ldr	r2, [pc, #164]	; (8000900 <MX_GPIO_Init+0xfc>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b27      	ldr	r3, [pc, #156]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b23      	ldr	r3, [pc, #140]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a22      	ldr	r2, [pc, #136]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2120      	movs	r1, #32
 800088e:	481d      	ldr	r0, [pc, #116]	; (8000904 <MX_GPIO_Init+0x100>)
 8000890:	f001 fa34 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4817      	ldr	r0, [pc, #92]	; (8000908 <MX_GPIO_Init+0x104>)
 80008ac:	f001 f88a 	bl	80019c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b0:	2320      	movs	r3, #32
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	480f      	ldr	r0, [pc, #60]	; (8000904 <MX_GPIO_Init+0x100>)
 80008c8:	f001 f87c 	bl	80019c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4808      	ldr	r0, [pc, #32]	; (8000904 <MX_GPIO_Init+0x100>)
 80008e2:	f001 f86f 	bl	80019c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2105      	movs	r1, #5
 80008ea:	2028      	movs	r0, #40	; 0x28
 80008ec:	f000 ffae 	bl	800184c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008f0:	2028      	movs	r0, #40	; 0x28
 80008f2:	f000 ffc7 	bl	8001884 <HAL_NVIC_EnableIRQ>

}
 80008f6:	bf00      	nop
 80008f8:	3728      	adds	r7, #40	; 0x28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40020000 	.word	0x40020000
 8000908:	40020800 	.word	0x40020800

0800090c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_I2C1_Init+0x50>)
 8000912:	4a13      	ldr	r2, [pc, #76]	; (8000960 <MX_I2C1_Init+0x54>)
 8000914:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_I2C1_Init+0x50>)
 8000918:	4a12      	ldr	r2, [pc, #72]	; (8000964 <MX_I2C1_Init+0x58>)
 800091a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_I2C1_Init+0x50>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_I2C1_Init+0x50>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_I2C1_Init+0x50>)
 800092a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800092e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <MX_I2C1_Init+0x50>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_I2C1_Init+0x50>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <MX_I2C1_Init+0x50>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_I2C1_Init+0x50>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_I2C1_Init+0x50>)
 800094a:	f001 fa15 	bl	8001d78 <HAL_I2C_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000954:	f000 fa14 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	2000034c 	.word	0x2000034c
 8000960:	40005400 	.word	0x40005400
 8000964:	000186a0 	.word	0x000186a0

08000968 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a1d      	ldr	r2, [pc, #116]	; (80009fc <HAL_I2C_MspInit+0x94>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d134      	bne.n	80009f4 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <HAL_I2C_MspInit+0x98>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a1b      	ldr	r2, [pc, #108]	; (8000a00 <HAL_I2C_MspInit+0x98>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <HAL_I2C_MspInit+0x98>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80009a6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ac:	2312      	movs	r3, #18
 80009ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009b8:	2304      	movs	r3, #4
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4810      	ldr	r0, [pc, #64]	; (8000a04 <HAL_I2C_MspInit+0x9c>)
 80009c4:	f000 fffe 	bl	80019c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <HAL_I2C_MspInit+0x98>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <HAL_I2C_MspInit+0x98>)
 80009d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009d6:	6413      	str	r3, [r2, #64]	; 0x40
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_I2C_MspInit+0x98>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2105      	movs	r1, #5
 80009e8:	2020      	movs	r0, #32
 80009ea:	f000 ff2f 	bl	800184c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009ee:	2020      	movs	r0, #32
 80009f0:	f000 ff48 	bl	8001884 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009f4:	bf00      	nop
 80009f6:	3728      	adds	r7, #40	; 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40005400 	.word	0x40005400
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020400 	.word	0x40020400

08000a08 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a10:	1d39      	adds	r1, r7, #4
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a16:	2201      	movs	r2, #1
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <__io_putchar+0x20>)
 8000a1a:	f004 fccc 	bl	80053b6 <HAL_UART_Transmit>
return ch;
 8000a1e:	687b      	ldr	r3, [r7, #4]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000590 	.word	0x20000590

08000a2c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){ // fonction de callback de l'UART
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
		portYIELD_FROM_ISR(Task_GPS_data_reading);

		portYIELD_FROM_ISR(Task_lancement_Cansat);

	}
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000a46:	af02      	add	r7, sp, #8
	  *            entrée des données GPS de la cible
	  ***********************************************************/

	  //Position GPS cible : 43°13'18.7"N 0°03'10.0"W  --> données telles que décrites dans le règlement 2023

	  pDataCansat.GPS.latitude_Target = 43.2218611;
 8000a48:	4983      	ldr	r1, [pc, #524]	; (8000c58 <main+0x218>)
 8000a4a:	a37f      	add	r3, pc, #508	; (adr r3, 8000c48 <main+0x208>)
 8000a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a50:	e9c1 2308 	strd	r2, r3, [r1, #32]
	  pDataCansat.GPS.longitude_Target = -0.05277777777777778;
 8000a54:	4980      	ldr	r1, [pc, #512]	; (8000c58 <main+0x218>)
 8000a56:	a37e      	add	r3, pc, #504	; (adr r3, 8000c50 <main+0x210>)
 8000a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a5c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a60:	f000 fdd6 	bl	8001610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a64:	f000 f910 	bl	8000c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a68:	f7ff fecc 	bl	8000804 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a6c:	f000 fcd8 	bl	8001420 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a70:	f7ff ff4c 	bl	800090c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000a74:	f000 fbbc 	bl	80011f0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000a78:	f000 fca8 	bl	80013cc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000a7c:	f000 fb54 	bl	8001128 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("------------------------\r\n");
 8000a80:	4876      	ldr	r0, [pc, #472]	; (8000c5c <main+0x21c>)
 8000a82:	f007 fa31 	bl	8007ee8 <puts>
  printf("------------------------\r\n");
 8000a86:	4875      	ldr	r0, [pc, #468]	; (8000c5c <main+0x21c>)
 8000a88:	f007 fa2e 	bl	8007ee8 <puts>
  printf("------------------------\r\n");
 8000a8c:	4873      	ldr	r0, [pc, #460]	; (8000c5c <main+0x21c>)
 8000a8e:	f007 fa2b 	bl	8007ee8 <puts>
  printf("------------------------\r\n");
 8000a92:	4872      	ldr	r0, [pc, #456]	; (8000c5c <main+0x21c>)
 8000a94:	f007 fa28 	bl	8007ee8 <puts>
  printf("initialisation du CanSat\r\n");
 8000a98:	4871      	ldr	r0, [pc, #452]	; (8000c60 <main+0x220>)
 8000a9a:	f007 fa25 	bl	8007ee8 <puts>
  printf("------------------------\r\n");
 8000a9e:	486f      	ldr	r0, [pc, #444]	; (8000c5c <main+0x21c>)
 8000aa0:	f007 fa22 	bl	8007ee8 <puts>
  printf("------------------------\r\n");
 8000aa4:	486d      	ldr	r0, [pc, #436]	; (8000c5c <main+0x21c>)
 8000aa6:	f007 fa1f 	bl	8007ee8 <puts>
  printf("------------------------\r\n");
 8000aaa:	486c      	ldr	r0, [pc, #432]	; (8000c5c <main+0x21c>)
 8000aac:	f007 fa1c 	bl	8007ee8 <puts>
  printf("------------------------\r\n");
 8000ab0:	486a      	ldr	r0, [pc, #424]	; (8000c5c <main+0x21c>)
 8000ab2:	f007 fa19 	bl	8007ee8 <puts>

    int x=0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    int i=0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
    int Devices[100]={0};
 8000ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ac6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000aca:	4618      	mov	r0, r3
 8000acc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	f007 f8e5 	bl	8007ca2 <memset>

   uint8_t pData[100] = {0};
 8000ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000adc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	2260      	movs	r2, #96	; 0x60
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f007 f8d9 	bl	8007ca2 <memset>
   /**********                           *********
    * ******** INIT MPU-9250 (IMU_10DOF) *********
    * ********                           *********
    */

   printf("initialisation de l'IMU \r\n \r\n");
 8000af0:	485c      	ldr	r0, [pc, #368]	; (8000c64 <main+0x224>)
 8000af2:	f007 f9f9 	bl	8007ee8 <puts>

   // Initialisation du capteur MPU-9250

   Init(&hi2c1);
 8000af6:	485c      	ldr	r0, [pc, #368]	; (8000c68 <main+0x228>)
 8000af8:	f7ff fd44 	bl	8000584 <Init>

   // vérification identité capteur MPU-9250

   pData[0]= WHO_AM_I_MPU9250;
 8000afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b04:	2275      	movs	r2, #117	; 0x75
 8000b06:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Master_Transmit(&hi2c1, MPU_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8000b08:	1d3a      	adds	r2, r7, #4
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2301      	movs	r3, #1
 8000b12:	21d0      	movs	r1, #208	; 0xd0
 8000b14:	4854      	ldr	r0, [pc, #336]	; (8000c68 <main+0x228>)
 8000b16:	f001 fa73 	bl	8002000 <HAL_I2C_Master_Transmit>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d002      	beq.n	8000b26 <main+0xe6>
    {
  	  printf("il y a une erreur avec I2C Master Transmit \r\n");
 8000b20:	4852      	ldr	r0, [pc, #328]	; (8000c6c <main+0x22c>)
 8000b22:	f007 f9e1 	bl	8007ee8 <puts>
    }
    if(HAL_I2C_Master_Receive(&hi2c1, MPU_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8000b26:	1d3a      	adds	r2, r7, #4
 8000b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2301      	movs	r3, #1
 8000b30:	21d0      	movs	r1, #208	; 0xd0
 8000b32:	484d      	ldr	r0, [pc, #308]	; (8000c68 <main+0x228>)
 8000b34:	f001 fb62 	bl	80021fc <HAL_I2C_Master_Receive>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d002      	beq.n	8000b44 <main+0x104>
    {
  	  printf("il y a une erreur avec I2C Master Receive \r\n");
 8000b3e:	484c      	ldr	r0, [pc, #304]	; (8000c70 <main+0x230>)
 8000b40:	f007 f9d2 	bl	8007ee8 <puts>
    }


    printf(" L'identifiant du capteur est : %x \r\n", pData[0]);
 8000b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4848      	ldr	r0, [pc, #288]	; (8000c74 <main+0x234>)
 8000b52:	f007 f943 	bl	8007ddc <iprintf>
    if((pData[0] =! 0x71))
 8000b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
    {
  	  printf("ce n'est pas le bon capteur \r\n");
    }
    else
  	  printf("MPU-9250 identified \r\n");
 8000b62:	4845      	ldr	r0, [pc, #276]	; (8000c78 <main+0x238>)
 8000b64:	f007 f9c0 	bl	8007ee8 <puts>

    // vérification identité AK8963C (magnétomètre)

    pData[0]= WHO_AM_I_AK8963;
 8000b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
      if(HAL_I2C_Master_Transmit(&hi2c1, MAGNETO_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8000b74:	1d3a      	adds	r2, r7, #4
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	2118      	movs	r1, #24
 8000b80:	4839      	ldr	r0, [pc, #228]	; (8000c68 <main+0x228>)
 8000b82:	f001 fa3d 	bl	8002000 <HAL_I2C_Master_Transmit>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d002      	beq.n	8000b92 <main+0x152>
      {
    	  printf("il y a une erreur avec I2C Master Transmit \r\n");
 8000b8c:	4837      	ldr	r0, [pc, #220]	; (8000c6c <main+0x22c>)
 8000b8e:	f007 f9ab 	bl	8007ee8 <puts>
      }
      if(HAL_I2C_Master_Receive(&hi2c1, MAGNETO_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8000b92:	1d3a      	adds	r2, r7, #4
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	2118      	movs	r1, #24
 8000b9e:	4832      	ldr	r0, [pc, #200]	; (8000c68 <main+0x228>)
 8000ba0:	f001 fb2c 	bl	80021fc <HAL_I2C_Master_Receive>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d002      	beq.n	8000bb0 <main+0x170>
      {
    	  printf("il y a une erreur avec I2C Master Receive \r\n");
 8000baa:	4831      	ldr	r0, [pc, #196]	; (8000c70 <main+0x230>)
 8000bac:	f007 f99c 	bl	8007ee8 <puts>
      }


      printf(" L'identifiant du magnétomètre est : %x \r\n", pData[0]);
 8000bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000bb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	482f      	ldr	r0, [pc, #188]	; (8000c7c <main+0x23c>)
 8000bbe:	f007 f90d 	bl	8007ddc <iprintf>
      if((pData[0] =! 0x48))
 8000bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000bc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
      {
    	  printf("ce n'est pas le bon capteur \r\n  ****** \r\n ****** \r\n ****** \r\n");
      }
      else
    	  printf("AK8963C identified \r\n  ****** \r\n ****** \r\n ****** \r\n");
 8000bce:	482c      	ldr	r0, [pc, #176]	; (8000c80 <main+0x240>)
 8000bd0:	f007 f98a 	bl	8007ee8 <puts>



  // check les périphériques i2c disponibles

    for (i=0;i<256;i++){
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8000bda:	e02a      	b.n	8000c32 <main+0x1f2>
         	  if(HAL_I2C_IsDeviceReady(&hi2c1, i, 4, 20)==HAL_OK){
 8000bdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000be0:	b299      	uxth	r1, r3
 8000be2:	2314      	movs	r3, #20
 8000be4:	2204      	movs	r2, #4
 8000be6:	4820      	ldr	r0, [pc, #128]	; (8000c68 <main+0x228>)
 8000be8:	f002 f84e 	bl	8002c88 <HAL_I2C_IsDeviceReady>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d11a      	bne.n	8000c28 <main+0x1e8>
         		  Devices[x]=i;
 8000bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000bf6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000bfa:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8000bfe:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8000c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
         		  printf("%d \r\n",Devices[x]);
 8000c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c0a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000c0e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8000c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c16:	4619      	mov	r1, r3
 8000c18:	481a      	ldr	r0, [pc, #104]	; (8000c84 <main+0x244>)
 8000c1a:	f007 f8df 	bl	8007ddc <iprintf>
         		  x=x+1;
 8000c1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000c22:	3301      	adds	r3, #1
 8000c24:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    for (i=0;i<256;i++){
 8000c28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8000c32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c36:	2bff      	cmp	r3, #255	; 0xff
 8000c38:	ddd0      	ble.n	8000bdc <main+0x19c>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000c3a:	f7ff fdbf 	bl	80007bc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c3e:	f005 fb8f 	bl	8006360 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <main+0x202>
 8000c44:	f3af 8000 	nop.w
 8000c48:	f1cc6096 	.word	0xf1cc6096
 8000c4c:	40459c65 	.word	0x40459c65
 8000c50:	5b05b05b 	.word	0x5b05b05b
 8000c54:	bfab05b0 	.word	0xbfab05b0
 8000c58:	200003a0 	.word	0x200003a0
 8000c5c:	08008cf8 	.word	0x08008cf8
 8000c60:	08008d14 	.word	0x08008d14
 8000c64:	08008d30 	.word	0x08008d30
 8000c68:	2000034c 	.word	0x2000034c
 8000c6c:	08008d50 	.word	0x08008d50
 8000c70:	08008d80 	.word	0x08008d80
 8000c74:	08008dac 	.word	0x08008dac
 8000c78:	08008dd4 	.word	0x08008dd4
 8000c7c:	08008dec 	.word	0x08008dec
 8000c80:	08008e1c 	.word	0x08008e1c
 8000c84:	08008e50 	.word	0x08008e50

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b094      	sub	sp, #80	; 0x50
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0320 	add.w	r3, r7, #32
 8000c92:	2230      	movs	r2, #48	; 0x30
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f007 f803 	bl	8007ca2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <SystemClock_Config+0xcc>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	4a27      	ldr	r2, [pc, #156]	; (8000d54 <SystemClock_Config+0xcc>)
 8000cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cba:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbc:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <SystemClock_Config+0xcc>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <SystemClock_Config+0xd0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <SystemClock_Config+0xd0>)
 8000cd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <SystemClock_Config+0xd0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cec:	2310      	movs	r3, #16
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cfc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d02:	2304      	movs	r3, #4
 8000d04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d06:	2304      	movs	r3, #4
 8000d08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0a:	f107 0320 	add.w	r3, r7, #32
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f003 f8ae 	bl	8003e70 <HAL_RCC_OscConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d1a:	f000 f831 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1e:	230f      	movs	r3, #15
 8000d20:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d22:	2302      	movs	r3, #2
 8000d24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	2102      	movs	r1, #2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f003 fb10 	bl	8004360 <HAL_RCC_ClockConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d46:	f000 f81b 	bl	8000d80 <Error_Handler>
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3750      	adds	r7, #80	; 0x50
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40007000 	.word	0x40007000

08000d5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d101      	bne.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d6e:	f000 fc71 	bl	8001654 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40010000 	.word	0x40010000

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <Error_Handler+0x8>
	...

08000d8c <Task_Drop_detection>:
	 * lancer le démarrage des missions.
	 * @retval None
	 */

void Task_Drop_detection(void * pvParameters)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = portTICK_PERIOD_MS/500;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8000d98:	f005 fffe 	bl	8006d98 <xTaskGetTickCount>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	60fb      	str	r3, [r7, #12]

	for(;;)
	{

		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	6979      	ldr	r1, [r7, #20]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f005 fe30 	bl	8006a0c <vTaskDelayUntil>

		uint16_t gpio_value = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);  // prend la valeur 1 lorsque pas d'obstacles
 8000dac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000db0:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <Task_Drop_detection+0x48>)
 8000db2:	f000 ff8b 	bl	8001ccc <HAL_GPIO_ReadPin>
 8000db6:	4603      	mov	r3, r0
 8000db8:	827b      	strh	r3, [r7, #18]
																	// prend la valeur 0 lorsque detection d'un obstacle
		if(gpio_value == 1)
 8000dba:	8a7b      	ldrh	r3, [r7, #18]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d1ef      	bne.n	8000da0 <Task_Drop_detection+0x14>
		{
			Drop_flag = 1;
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <Task_Drop_detection+0x4c>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]
			vTaskDelete(pxDrop_detection);
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <Task_Drop_detection+0x50>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f005 fd8e 	bl	80068ec <vTaskDelete>
	{
 8000dd0:	e7e6      	b.n	8000da0 <Task_Drop_detection+0x14>
 8000dd2:	bf00      	nop
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	2000046c 	.word	0x2000046c
 8000ddc:	20000468 	.word	0x20000468

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_MspInit+0x54>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a11      	ldr	r2, [pc, #68]	; (8000e34 <HAL_MspInit+0x54>)
 8000df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <HAL_MspInit+0x54>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_MspInit+0x54>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_MspInit+0x54>)
 8000e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <HAL_MspInit+0x54>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	210f      	movs	r1, #15
 8000e22:	f06f 0001 	mvn.w	r0, #1
 8000e26:	f000 fd11 	bl	800184c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800

08000e38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	4b2e      	ldr	r3, [pc, #184]	; (8000f08 <HAL_InitTick+0xd0>)
 8000e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e50:	4a2d      	ldr	r2, [pc, #180]	; (8000f08 <HAL_InitTick+0xd0>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6453      	str	r3, [r2, #68]	; 0x44
 8000e58:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <HAL_InitTick+0xd0>)
 8000e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e64:	f107 020c 	add.w	r2, r7, #12
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f003 fc96 	bl	80047a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e74:	f003 fc80 	bl	8004778 <HAL_RCC_GetPCLK2Freq>
 8000e78:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e7c:	4a23      	ldr	r2, [pc, #140]	; (8000f0c <HAL_InitTick+0xd4>)
 8000e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e82:	0c9b      	lsrs	r3, r3, #18
 8000e84:	3b01      	subs	r3, #1
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e88:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <HAL_InitTick+0xd8>)
 8000e8a:	4a22      	ldr	r2, [pc, #136]	; (8000f14 <HAL_InitTick+0xdc>)
 8000e8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <HAL_InitTick+0xd8>)
 8000e90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e94:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e96:	4a1e      	ldr	r2, [pc, #120]	; (8000f10 <HAL_InitTick+0xd8>)
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_InitTick+0xd8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <HAL_InitTick+0xd8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_InitTick+0xd8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000eae:	4818      	ldr	r0, [pc, #96]	; (8000f10 <HAL_InitTick+0xd8>)
 8000eb0:	f003 fca8 	bl	8004804 <HAL_TIM_Base_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000eba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d11b      	bne.n	8000efa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ec2:	4813      	ldr	r0, [pc, #76]	; (8000f10 <HAL_InitTick+0xd8>)
 8000ec4:	f003 fcf8 	bl	80048b8 <HAL_TIM_Base_Start_IT>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ece:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d111      	bne.n	8000efa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ed6:	2019      	movs	r0, #25
 8000ed8:	f000 fcd4 	bl	8001884 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b0f      	cmp	r3, #15
 8000ee0:	d808      	bhi.n	8000ef4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	2019      	movs	r0, #25
 8000ee8:	f000 fcb0 	bl	800184c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <HAL_InitTick+0xe0>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	e002      	b.n	8000efa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000efa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3730      	adds	r7, #48	; 0x30
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	431bde83 	.word	0x431bde83
 8000f10:	20000470 	.word	0x20000470
 8000f14:	40010000 	.word	0x40010000
 8000f18:	20000004 	.word	0x20000004

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <NMI_Handler+0x4>

08000f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <HardFault_Handler+0x4>

08000f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <MemManage_Handler+0x4>

08000f2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f4e:	f003 fd64 	bl	8004a1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000470 	.word	0x20000470

08000f5c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <I2C1_ER_IRQHandler+0x10>)
 8000f62:	f001 ffbf 	bl	8002ee4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000034c 	.word	0x2000034c

08000f70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <USART1_IRQHandler+0x10>)
 8000f76:	f004 fab1 	bl	80054dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000054c 	.word	0x2000054c

08000f84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f8a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f8e:	f000 fecf 	bl	8001d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  xTaskCreate(Task_Drop_detection, "Drop detection task", 500, NULL, osPriorityAboveNormal, &pxDrop_detection);
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <EXTI15_10_IRQHandler+0x2c>)
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	2301      	movs	r3, #1
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fa0:	4904      	ldr	r1, [pc, #16]	; (8000fb4 <EXTI15_10_IRQHandler+0x30>)
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <EXTI15_10_IRQHandler+0x34>)
 8000fa4:	f005 fb54 	bl	8006650 <xTaskCreate>

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000468 	.word	0x20000468
 8000fb4:	08008e58 	.word	0x08008e58
 8000fb8:	08000d8d 	.word	0x08000d8d

08000fbc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	e00a      	b.n	8000fe4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fce:	f3af 8000 	nop.w
 8000fd2:	4601      	mov	r1, r0
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	60ba      	str	r2, [r7, #8]
 8000fda:	b2ca      	uxtb	r2, r1
 8000fdc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dbf0      	blt.n	8000fce <_read+0x12>
	}

return len;
 8000fec:	687b      	ldr	r3, [r7, #4]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	60f8      	str	r0, [r7, #12]
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	e009      	b.n	800101c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60ba      	str	r2, [r7, #8]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fcf9 	bl	8000a08 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3301      	adds	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	dbf1      	blt.n	8001008 <_write+0x12>
	}
	return len;
 8001024:	687b      	ldr	r3, [r7, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_close>:

int _close(int file)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	return -1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001056:	605a      	str	r2, [r3, #4]
	return 0;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <_isatty>:

int _isatty(int file)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
	return 1;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
	return 0;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a0:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <_sbrk+0x5c>)
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <_sbrk+0x60>)
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <_sbrk+0x64>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <_sbrk+0x64>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	; (8001100 <_sbrk+0x68>)
 80010b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d207      	bcs.n	80010d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c8:	f006 fcc8 	bl	8007a5c <__errno>
 80010cc:	4603      	mov	r3, r0
 80010ce:	220c      	movs	r2, #12
 80010d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010d6:	e009      	b.n	80010ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <_sbrk+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	4a05      	ldr	r2, [pc, #20]	; (80010fc <_sbrk+0x64>)
 80010e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ea:	68fb      	ldr	r3, [r7, #12]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20020000 	.word	0x20020000
 80010f8:	00000400 	.word	0x00000400
 80010fc:	200004b8 	.word	0x200004b8
 8001100:	20004340 	.word	0x20004340

08001104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <SystemInit+0x20>)
 800110a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <SystemInit+0x20>)
 8001110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001114:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]
 8001146:	615a      	str	r2, [r3, #20]
 8001148:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800114a:	4b28      	ldr	r3, [pc, #160]	; (80011ec <MX_TIM2_Init+0xc4>)
 800114c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001150:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <MX_TIM2_Init+0xc4>)
 8001154:	2253      	movs	r2, #83	; 0x53
 8001156:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001158:	4b24      	ldr	r3, [pc, #144]	; (80011ec <MX_TIM2_Init+0xc4>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <MX_TIM2_Init+0xc4>)
 8001160:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001164:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <MX_TIM2_Init+0xc4>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <MX_TIM2_Init+0xc4>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001172:	481e      	ldr	r0, [pc, #120]	; (80011ec <MX_TIM2_Init+0xc4>)
 8001174:	f003 fc02 	bl	800497c <HAL_TIM_PWM_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800117e:	f7ff fdff 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800118a:	f107 0320 	add.w	r3, r7, #32
 800118e:	4619      	mov	r1, r3
 8001190:	4816      	ldr	r0, [pc, #88]	; (80011ec <MX_TIM2_Init+0xc4>)
 8001192:	f004 f841 	bl	8005218 <HAL_TIMEx_MasterConfigSynchronization>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800119c:	f7ff fdf0 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a0:	2360      	movs	r3, #96	; 0x60
 80011a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2200      	movs	r2, #0
 80011b4:	4619      	mov	r1, r3
 80011b6:	480d      	ldr	r0, [pc, #52]	; (80011ec <MX_TIM2_Init+0xc4>)
 80011b8:	f003 fd38 	bl	8004c2c <HAL_TIM_PWM_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80011c2:	f7ff fddd 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2204      	movs	r2, #4
 80011ca:	4619      	mov	r1, r3
 80011cc:	4807      	ldr	r0, [pc, #28]	; (80011ec <MX_TIM2_Init+0xc4>)
 80011ce:	f003 fd2d 	bl	8004c2c <HAL_TIM_PWM_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80011d8:	f7ff fdd2 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011dc:	4803      	ldr	r0, [pc, #12]	; (80011ec <MX_TIM2_Init+0xc4>)
 80011de:	f000 f897 	bl	8001310 <HAL_TIM_MspPostInit>

}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	; 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200004bc 	.word	0x200004bc

080011f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f6:	f107 0320 	add.w	r3, r7, #32
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]
 800120e:	615a      	str	r2, [r3, #20]
 8001210:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001212:	4b22      	ldr	r3, [pc, #136]	; (800129c <MX_TIM3_Init+0xac>)
 8001214:	4a22      	ldr	r2, [pc, #136]	; (80012a0 <MX_TIM3_Init+0xb0>)
 8001216:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001218:	4b20      	ldr	r3, [pc, #128]	; (800129c <MX_TIM3_Init+0xac>)
 800121a:	2253      	movs	r2, #83	; 0x53
 800121c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <MX_TIM3_Init+0xac>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <MX_TIM3_Init+0xac>)
 8001226:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800122a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <MX_TIM3_Init+0xac>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_TIM3_Init+0xac>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001238:	4818      	ldr	r0, [pc, #96]	; (800129c <MX_TIM3_Init+0xac>)
 800123a:	f003 fb9f 	bl	800497c <HAL_TIM_PWM_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001244:	f7ff fd9c 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001250:	f107 0320 	add.w	r3, r7, #32
 8001254:	4619      	mov	r1, r3
 8001256:	4811      	ldr	r0, [pc, #68]	; (800129c <MX_TIM3_Init+0xac>)
 8001258:	f003 ffde 	bl	8005218 <HAL_TIMEx_MasterConfigSynchronization>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001262:	f7ff fd8d 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001266:	2360      	movs	r3, #96	; 0x60
 8001268:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	4619      	mov	r1, r3
 800127c:	4807      	ldr	r0, [pc, #28]	; (800129c <MX_TIM3_Init+0xac>)
 800127e:	f003 fcd5 	bl	8004c2c <HAL_TIM_PWM_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001288:	f7ff fd7a 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <MX_TIM3_Init+0xac>)
 800128e:	f000 f83f 	bl	8001310 <HAL_TIM_MspPostInit>

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	; 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000504 	.word	0x20000504
 80012a0:	40000400 	.word	0x40000400

080012a4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b4:	d10e      	bne.n	80012d4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <HAL_TIM_PWM_MspInit+0x64>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <HAL_TIM_PWM_MspInit+0x64>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <HAL_TIM_PWM_MspInit+0x64>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80012d2:	e012      	b.n	80012fa <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a0c      	ldr	r2, [pc, #48]	; (800130c <HAL_TIM_PWM_MspInit+0x68>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d10d      	bne.n	80012fa <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_TIM_PWM_MspInit+0x64>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a08      	ldr	r2, [pc, #32]	; (8001308 <HAL_TIM_PWM_MspInit+0x64>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_TIM_PWM_MspInit+0x64>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
}
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40000400 	.word	0x40000400

08001310 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001330:	d11e      	bne.n	8001370 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <HAL_TIM_MspPostInit+0xb0>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a21      	ldr	r2, [pc, #132]	; (80013c0 <HAL_TIM_MspPostInit+0xb0>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <HAL_TIM_MspPostInit+0xb0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800134e:	2303      	movs	r3, #3
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800135e:	2301      	movs	r3, #1
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4816      	ldr	r0, [pc, #88]	; (80013c4 <HAL_TIM_MspPostInit+0xb4>)
 800136a:	f000 fb2b 	bl	80019c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800136e:	e022      	b.n	80013b6 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM3)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <HAL_TIM_MspPostInit+0xb8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d11d      	bne.n	80013b6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <HAL_TIM_MspPostInit+0xb0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <HAL_TIM_MspPostInit+0xb0>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <HAL_TIM_MspPostInit+0xb0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001396:	2340      	movs	r3, #64	; 0x40
 8001398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013a6:	2302      	movs	r3, #2
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <HAL_TIM_MspPostInit+0xb4>)
 80013b2:	f000 fb07 	bl	80019c4 <HAL_GPIO_Init>
}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	; 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020000 	.word	0x40020000
 80013c8:	40000400 	.word	0x40000400

080013cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <MX_USART1_UART_Init+0x50>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 8001404:	f003 ff8a 	bl	800531c <HAL_UART_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800140e:	f7ff fcb7 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000054c 	.word	0x2000054c
 800141c:	40011000 	.word	0x40011000

08001420 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <MX_USART2_UART_Init+0x50>)
 8001428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <MX_USART2_UART_Init+0x4c>)
 800142c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_USART2_UART_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001446:	220c      	movs	r2, #12
 8001448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <MX_USART2_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001458:	f003 ff60 	bl	800531c <HAL_UART_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001462:	f7ff fc8d 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000590 	.word	0x20000590
 8001470:	40004400 	.word	0x40004400

08001474 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08c      	sub	sp, #48	; 0x30
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a45      	ldr	r2, [pc, #276]	; (80015a8 <HAL_UART_MspInit+0x134>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d153      	bne.n	800153e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	4b44      	ldr	r3, [pc, #272]	; (80015ac <HAL_UART_MspInit+0x138>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	4a43      	ldr	r2, [pc, #268]	; (80015ac <HAL_UART_MspInit+0x138>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6453      	str	r3, [r2, #68]	; 0x44
 80014a6:	4b41      	ldr	r3, [pc, #260]	; (80015ac <HAL_UART_MspInit+0x138>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	4b3d      	ldr	r3, [pc, #244]	; (80015ac <HAL_UART_MspInit+0x138>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a3c      	ldr	r2, [pc, #240]	; (80015ac <HAL_UART_MspInit+0x138>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b3a      	ldr	r3, [pc, #232]	; (80015ac <HAL_UART_MspInit+0x138>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b36      	ldr	r3, [pc, #216]	; (80015ac <HAL_UART_MspInit+0x138>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a35      	ldr	r2, [pc, #212]	; (80015ac <HAL_UART_MspInit+0x138>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b33      	ldr	r3, [pc, #204]	; (80015ac <HAL_UART_MspInit+0x138>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014fc:	2307      	movs	r3, #7
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	482a      	ldr	r0, [pc, #168]	; (80015b0 <HAL_UART_MspInit+0x13c>)
 8001508:	f000 fa5c 	bl	80019c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800151c:	2307      	movs	r3, #7
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	4619      	mov	r1, r3
 8001526:	4823      	ldr	r0, [pc, #140]	; (80015b4 <HAL_UART_MspInit+0x140>)
 8001528:	f000 fa4c 	bl	80019c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2105      	movs	r1, #5
 8001530:	2025      	movs	r0, #37	; 0x25
 8001532:	f000 f98b 	bl	800184c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001536:	2025      	movs	r0, #37	; 0x25
 8001538:	f000 f9a4 	bl	8001884 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800153c:	e030      	b.n	80015a0 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART2)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a1d      	ldr	r2, [pc, #116]	; (80015b8 <HAL_UART_MspInit+0x144>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d12b      	bne.n	80015a0 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <HAL_UART_MspInit+0x138>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	4a16      	ldr	r2, [pc, #88]	; (80015ac <HAL_UART_MspInit+0x138>)
 8001552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001556:	6413      	str	r3, [r2, #64]	; 0x40
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <HAL_UART_MspInit+0x138>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_UART_MspInit+0x138>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <HAL_UART_MspInit+0x138>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6313      	str	r3, [r2, #48]	; 0x30
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_UART_MspInit+0x138>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001580:	230c      	movs	r3, #12
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158c:	2303      	movs	r3, #3
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001590:	2307      	movs	r3, #7
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	4619      	mov	r1, r3
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <HAL_UART_MspInit+0x13c>)
 800159c:	f000 fa12 	bl	80019c4 <HAL_GPIO_Init>
}
 80015a0:	bf00      	nop
 80015a2:	3730      	adds	r7, #48	; 0x30
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40011000 	.word	0x40011000
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40020400 	.word	0x40020400
 80015b8:	40004400 	.word	0x40004400

080015bc <Reset_Handler>:
 80015bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f4 <LoopFillZerobss+0x12>
 80015c0:	480d      	ldr	r0, [pc, #52]	; (80015f8 <LoopFillZerobss+0x16>)
 80015c2:	490e      	ldr	r1, [pc, #56]	; (80015fc <LoopFillZerobss+0x1a>)
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <LoopFillZerobss+0x1e>)
 80015c6:	2300      	movs	r3, #0
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:
 80015ca:	58d4      	ldr	r4, [r2, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:
 80015d0:	18c4      	adds	r4, r0, r3
 80015d2:	428c      	cmp	r4, r1
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
 80015d6:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <LoopFillZerobss+0x22>)
 80015d8:	4c0b      	ldr	r4, [pc, #44]	; (8001608 <LoopFillZerobss+0x26>)
 80015da:	2300      	movs	r3, #0
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:
 80015e2:	42a2      	cmp	r2, r4
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>
 80015e6:	f7ff fd8d 	bl	8001104 <SystemInit>
 80015ea:	f006 fb33 	bl	8007c54 <__libc_init_array>
 80015ee:	f7ff fa27 	bl	8000a40 <main>
 80015f2:	4770      	bx	lr
 80015f4:	20020000 	.word	0x20020000
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000074 	.word	0x20000074
 8001600:	08008f34 	.word	0x08008f34
 8001604:	20000078 	.word	0x20000078
 8001608:	2000433c 	.word	0x2000433c

0800160c <ADC_IRQHandler>:
 800160c:	e7fe      	b.n	800160c <ADC_IRQHandler>
	...

08001610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <HAL_Init+0x40>)
 800161a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <HAL_Init+0x40>)
 8001626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_Init+0x40>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_Init+0x40>)
 8001632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001638:	2003      	movs	r0, #3
 800163a:	f000 f8fc 	bl	8001836 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163e:	200f      	movs	r0, #15
 8001640:	f7ff fbfa 	bl	8000e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001644:	f7ff fbcc 	bl	8000de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023c00 	.word	0x40023c00

08001654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x20>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_IncTick+0x24>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000008 	.word	0x20000008
 8001678:	200005d4 	.word	0x200005d4

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	200005d4 	.word	0x200005d4

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff ffee 	bl	800167c <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_Delay+0x44>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffde 	bl	800167c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000008 	.word	0x20000008

080016dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0b      	blt.n	800176a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4907      	ldr	r1, [pc, #28]	; (8001778 <__NVIC_EnableIRQ+0x38>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ff4c 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800185e:	f7ff ff61 	bl	8001724 <__NVIC_GetPriorityGrouping>
 8001862:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	6978      	ldr	r0, [r7, #20]
 800186a:	f7ff ffb1 	bl	80017d0 <NVIC_EncodePriority>
 800186e:	4602      	mov	r2, r0
 8001870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff80 	bl	800177c <__NVIC_SetPriority>
}
 800187c:	bf00      	nop
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff ff54 	bl	8001740 <__NVIC_EnableIRQ>
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018ae:	f7ff fee5 	bl	800167c <HAL_GetTick>
 80018b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d008      	beq.n	80018d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e052      	b.n	8001978 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0216 	bic.w	r2, r2, #22
 80018e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d103      	bne.n	8001902 <HAL_DMA_Abort+0x62>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d007      	beq.n	8001912 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0208 	bic.w	r2, r2, #8
 8001910:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 0201 	bic.w	r2, r2, #1
 8001920:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001922:	e013      	b.n	800194c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001924:	f7ff feaa 	bl	800167c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b05      	cmp	r3, #5
 8001930:	d90c      	bls.n	800194c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2220      	movs	r2, #32
 8001936:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2203      	movs	r2, #3
 800193c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e015      	b.n	8001978 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1e4      	bne.n	8001924 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195e:	223f      	movs	r2, #63	; 0x3f
 8001960:	409a      	lsls	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d004      	beq.n	800199e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e00c      	b.n	80019b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2205      	movs	r2, #5
 80019a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0201 	bic.w	r2, r2, #1
 80019b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	e159      	b.n	8001c94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019e0:	2201      	movs	r2, #1
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	f040 8148 	bne.w	8001c8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d005      	beq.n	8001a16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d130      	bne.n	8001a78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	2203      	movs	r2, #3
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f003 0201 	and.w	r2, r3, #1
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d017      	beq.n	8001ab4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2203      	movs	r2, #3
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d123      	bne.n	8001b08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	08da      	lsrs	r2, r3, #3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3208      	adds	r2, #8
 8001ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	08da      	lsrs	r2, r3, #3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3208      	adds	r2, #8
 8001b02:	69b9      	ldr	r1, [r7, #24]
 8001b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2203      	movs	r2, #3
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0203 	and.w	r2, r3, #3
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80a2 	beq.w	8001c8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b57      	ldr	r3, [pc, #348]	; (8001cac <HAL_GPIO_Init+0x2e8>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	4a56      	ldr	r2, [pc, #344]	; (8001cac <HAL_GPIO_Init+0x2e8>)
 8001b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b58:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5a:	4b54      	ldr	r3, [pc, #336]	; (8001cac <HAL_GPIO_Init+0x2e8>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b66:	4a52      	ldr	r2, [pc, #328]	; (8001cb0 <HAL_GPIO_Init+0x2ec>)
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	089b      	lsrs	r3, r3, #2
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	220f      	movs	r2, #15
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a49      	ldr	r2, [pc, #292]	; (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d019      	beq.n	8001bc6 <HAL_GPIO_Init+0x202>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a48      	ldr	r2, [pc, #288]	; (8001cb8 <HAL_GPIO_Init+0x2f4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d013      	beq.n	8001bc2 <HAL_GPIO_Init+0x1fe>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a47      	ldr	r2, [pc, #284]	; (8001cbc <HAL_GPIO_Init+0x2f8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d00d      	beq.n	8001bbe <HAL_GPIO_Init+0x1fa>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a46      	ldr	r2, [pc, #280]	; (8001cc0 <HAL_GPIO_Init+0x2fc>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d007      	beq.n	8001bba <HAL_GPIO_Init+0x1f6>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a45      	ldr	r2, [pc, #276]	; (8001cc4 <HAL_GPIO_Init+0x300>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d101      	bne.n	8001bb6 <HAL_GPIO_Init+0x1f2>
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	e008      	b.n	8001bc8 <HAL_GPIO_Init+0x204>
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	e006      	b.n	8001bc8 <HAL_GPIO_Init+0x204>
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e004      	b.n	8001bc8 <HAL_GPIO_Init+0x204>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e002      	b.n	8001bc8 <HAL_GPIO_Init+0x204>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_GPIO_Init+0x204>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	f002 0203 	and.w	r2, r2, #3
 8001bce:	0092      	lsls	r2, r2, #2
 8001bd0:	4093      	lsls	r3, r2
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd8:	4935      	ldr	r1, [pc, #212]	; (8001cb0 <HAL_GPIO_Init+0x2ec>)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	3302      	adds	r3, #2
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001be6:	4b38      	ldr	r3, [pc, #224]	; (8001cc8 <HAL_GPIO_Init+0x304>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c0a:	4a2f      	ldr	r2, [pc, #188]	; (8001cc8 <HAL_GPIO_Init+0x304>)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c10:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <HAL_GPIO_Init+0x304>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c34:	4a24      	ldr	r2, [pc, #144]	; (8001cc8 <HAL_GPIO_Init+0x304>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <HAL_GPIO_Init+0x304>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c5e:	4a1a      	ldr	r2, [pc, #104]	; (8001cc8 <HAL_GPIO_Init+0x304>)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c64:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <HAL_GPIO_Init+0x304>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c88:	4a0f      	ldr	r2, [pc, #60]	; (8001cc8 <HAL_GPIO_Init+0x304>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3301      	adds	r3, #1
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	2b0f      	cmp	r3, #15
 8001c98:	f67f aea2 	bls.w	80019e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3724      	adds	r7, #36	; 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40013800 	.word	0x40013800
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	40020400 	.word	0x40020400
 8001cbc:	40020800 	.word	0x40020800
 8001cc0:	40020c00 	.word	0x40020c00
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40013c00 	.word	0x40013c00

08001ccc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	887b      	ldrh	r3, [r7, #2]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	e001      	b.n	8001cee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d0c:	787b      	ldrb	r3, [r7, #1]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d12:	887a      	ldrh	r2, [r7, #2]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d18:	e003      	b.n	8001d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d1a:	887b      	ldrh	r3, [r7, #2]
 8001d1c:	041a      	lsls	r2, r3, #16
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	619a      	str	r2, [r3, #24]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	4013      	ands	r3, r2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d006      	beq.n	8001d54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d46:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 f806 	bl	8001d60 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40013c00 	.word	0x40013c00

08001d60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e12b      	b.n	8001fe2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d106      	bne.n	8001da4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7fe fde2 	bl	8000968 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2224      	movs	r2, #36	; 0x24
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 0201 	bic.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ddc:	f002 fcb8 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8001de0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4a81      	ldr	r2, [pc, #516]	; (8001fec <HAL_I2C_Init+0x274>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d807      	bhi.n	8001dfc <HAL_I2C_Init+0x84>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4a80      	ldr	r2, [pc, #512]	; (8001ff0 <HAL_I2C_Init+0x278>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	bf94      	ite	ls
 8001df4:	2301      	movls	r3, #1
 8001df6:	2300      	movhi	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	e006      	b.n	8001e0a <HAL_I2C_Init+0x92>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4a7d      	ldr	r2, [pc, #500]	; (8001ff4 <HAL_I2C_Init+0x27c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	bf94      	ite	ls
 8001e04:	2301      	movls	r3, #1
 8001e06:	2300      	movhi	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e0e7      	b.n	8001fe2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4a78      	ldr	r2, [pc, #480]	; (8001ff8 <HAL_I2C_Init+0x280>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	0c9b      	lsrs	r3, r3, #18
 8001e1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	4a6a      	ldr	r2, [pc, #424]	; (8001fec <HAL_I2C_Init+0x274>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d802      	bhi.n	8001e4c <HAL_I2C_Init+0xd4>
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	e009      	b.n	8001e60 <HAL_I2C_Init+0xe8>
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	4a69      	ldr	r2, [pc, #420]	; (8001ffc <HAL_I2C_Init+0x284>)
 8001e58:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5c:	099b      	lsrs	r3, r3, #6
 8001e5e:	3301      	adds	r3, #1
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	430b      	orrs	r3, r1
 8001e66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	495c      	ldr	r1, [pc, #368]	; (8001fec <HAL_I2C_Init+0x274>)
 8001e7c:	428b      	cmp	r3, r1
 8001e7e:	d819      	bhi.n	8001eb4 <HAL_I2C_Init+0x13c>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	1e59      	subs	r1, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e8e:	1c59      	adds	r1, r3, #1
 8001e90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e94:	400b      	ands	r3, r1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00a      	beq.n	8001eb0 <HAL_I2C_Init+0x138>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1e59      	subs	r1, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eae:	e051      	b.n	8001f54 <HAL_I2C_Init+0x1dc>
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	e04f      	b.n	8001f54 <HAL_I2C_Init+0x1dc>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d111      	bne.n	8001ee0 <HAL_I2C_Init+0x168>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	1e58      	subs	r0, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	440b      	add	r3, r1
 8001eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ece:	3301      	adds	r3, #1
 8001ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf0c      	ite	eq
 8001ed8:	2301      	moveq	r3, #1
 8001eda:	2300      	movne	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	e012      	b.n	8001f06 <HAL_I2C_Init+0x18e>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1e58      	subs	r0, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6859      	ldr	r1, [r3, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	0099      	lsls	r1, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	bf0c      	ite	eq
 8001f00:	2301      	moveq	r3, #1
 8001f02:	2300      	movne	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_I2C_Init+0x196>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e022      	b.n	8001f54 <HAL_I2C_Init+0x1dc>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10e      	bne.n	8001f34 <HAL_I2C_Init+0x1bc>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1e58      	subs	r0, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6859      	ldr	r1, [r3, #4]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	440b      	add	r3, r1
 8001f24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f28:	3301      	adds	r3, #1
 8001f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f32:	e00f      	b.n	8001f54 <HAL_I2C_Init+0x1dc>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1e58      	subs	r0, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6859      	ldr	r1, [r3, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	0099      	lsls	r1, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	6809      	ldr	r1, [r1, #0]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69da      	ldr	r2, [r3, #28]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6911      	ldr	r1, [r2, #16]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68d2      	ldr	r2, [r2, #12]
 8001f8e:	4311      	orrs	r1, r2
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	430b      	orrs	r3, r1
 8001f96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695a      	ldr	r2, [r3, #20]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	000186a0 	.word	0x000186a0
 8001ff0:	001e847f 	.word	0x001e847f
 8001ff4:	003d08ff 	.word	0x003d08ff
 8001ff8:	431bde83 	.word	0x431bde83
 8001ffc:	10624dd3 	.word	0x10624dd3

08002000 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af02      	add	r7, sp, #8
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	461a      	mov	r2, r3
 800200c:	460b      	mov	r3, r1
 800200e:	817b      	strh	r3, [r7, #10]
 8002010:	4613      	mov	r3, r2
 8002012:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002014:	f7ff fb32 	bl	800167c <HAL_GetTick>
 8002018:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b20      	cmp	r3, #32
 8002024:	f040 80e0 	bne.w	80021e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2319      	movs	r3, #25
 800202e:	2201      	movs	r2, #1
 8002030:	4970      	ldr	r1, [pc, #448]	; (80021f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f001 fd3e 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800203e:	2302      	movs	r3, #2
 8002040:	e0d3      	b.n	80021ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002048:	2b01      	cmp	r3, #1
 800204a:	d101      	bne.n	8002050 <HAL_I2C_Master_Transmit+0x50>
 800204c:	2302      	movs	r3, #2
 800204e:	e0cc      	b.n	80021ea <HAL_I2C_Master_Transmit+0x1ea>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d007      	beq.n	8002076 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0201 	orr.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002084:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2221      	movs	r2, #33	; 0x21
 800208a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2210      	movs	r2, #16
 8002092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	893a      	ldrh	r2, [r7, #8]
 80020a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4a50      	ldr	r2, [pc, #320]	; (80021f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80020b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020b8:	8979      	ldrh	r1, [r7, #10]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	6a3a      	ldr	r2, [r7, #32]
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f001 f982 	bl	80033c8 <I2C_MasterRequestWrite>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e08d      	b.n	80021ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020e4:	e066      	b.n	80021b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	6a39      	ldr	r1, [r7, #32]
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f001 fdb8 	bl	8003c60 <I2C_WaitOnTXEFlagUntilTimeout>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00d      	beq.n	8002112 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d107      	bne.n	800210e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800210c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e06b      	b.n	80021ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	781a      	ldrb	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212c:	b29b      	uxth	r3, r3
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b04      	cmp	r3, #4
 800214e:	d11b      	bne.n	8002188 <HAL_I2C_Master_Transmit+0x188>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002154:	2b00      	cmp	r3, #0
 8002156:	d017      	beq.n	8002188 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	781a      	ldrb	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002172:	b29b      	uxth	r3, r3
 8002174:	3b01      	subs	r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	6a39      	ldr	r1, [r7, #32]
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f001 fda8 	bl	8003ce2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00d      	beq.n	80021b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	2b04      	cmp	r3, #4
 800219e:	d107      	bne.n	80021b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e01a      	b.n	80021ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d194      	bne.n	80020e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	e000      	b.n	80021ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021e8:	2302      	movs	r3, #2
  }
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	00100002 	.word	0x00100002
 80021f8:	ffff0000 	.word	0xffff0000

080021fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08c      	sub	sp, #48	; 0x30
 8002200:	af02      	add	r7, sp, #8
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	461a      	mov	r2, r3
 8002208:	460b      	mov	r3, r1
 800220a:	817b      	strh	r3, [r7, #10]
 800220c:	4613      	mov	r3, r2
 800220e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002210:	f7ff fa34 	bl	800167c <HAL_GetTick>
 8002214:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b20      	cmp	r3, #32
 8002220:	f040 820b 	bne.w	800263a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2319      	movs	r3, #25
 800222a:	2201      	movs	r2, #1
 800222c:	497c      	ldr	r1, [pc, #496]	; (8002420 <HAL_I2C_Master_Receive+0x224>)
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f001 fc40 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800223a:	2302      	movs	r3, #2
 800223c:	e1fe      	b.n	800263c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_I2C_Master_Receive+0x50>
 8002248:	2302      	movs	r3, #2
 800224a:	e1f7      	b.n	800263c <HAL_I2C_Master_Receive+0x440>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d007      	beq.n	8002272 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f042 0201 	orr.w	r2, r2, #1
 8002270:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002280:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2222      	movs	r2, #34	; 0x22
 8002286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2210      	movs	r2, #16
 800228e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	893a      	ldrh	r2, [r7, #8]
 80022a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4a5c      	ldr	r2, [pc, #368]	; (8002424 <HAL_I2C_Master_Receive+0x228>)
 80022b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022b4:	8979      	ldrh	r1, [r7, #10]
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f001 f906 	bl	80034cc <I2C_MasterRequestRead>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e1b8      	b.n	800263c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d113      	bne.n	80022fa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	623b      	str	r3, [r7, #32]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	623b      	str	r3, [r7, #32]
 80022e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	e18c      	b.n	8002614 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d11b      	bne.n	800233a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002310:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	e16c      	b.n	8002614 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233e:	2b02      	cmp	r3, #2
 8002340:	d11b      	bne.n	800237a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002350:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002360:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	61bb      	str	r3, [r7, #24]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	61bb      	str	r3, [r7, #24]
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	e14c      	b.n	8002614 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002388:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023a0:	e138      	b.n	8002614 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	f200 80f1 	bhi.w	800258e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d123      	bne.n	80023fc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f001 fcd3 	bl	8003d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e139      	b.n	800263c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023fa:	e10b      	b.n	8002614 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002400:	2b02      	cmp	r3, #2
 8002402:	d14e      	bne.n	80024a2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240a:	2200      	movs	r2, #0
 800240c:	4906      	ldr	r1, [pc, #24]	; (8002428 <HAL_I2C_Master_Receive+0x22c>)
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f001 fb50 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e10e      	b.n	800263c <HAL_I2C_Master_Receive+0x440>
 800241e:	bf00      	nop
 8002420:	00100002 	.word	0x00100002
 8002424:	ffff0000 	.word	0xffff0000
 8002428:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024a0:	e0b8      	b.n	8002614 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a8:	2200      	movs	r2, #0
 80024aa:	4966      	ldr	r1, [pc, #408]	; (8002644 <HAL_I2C_Master_Receive+0x448>)
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f001 fb01 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0bf      	b.n	800263c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002504:	2200      	movs	r2, #0
 8002506:	494f      	ldr	r1, [pc, #316]	; (8002644 <HAL_I2C_Master_Receive+0x448>)
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f001 fad3 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e091      	b.n	800263c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002526:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002582:	b29b      	uxth	r3, r3
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800258c:	e042      	b.n	8002614 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800258e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002590:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f001 fbe6 	bl	8003d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e04c      	b.n	800263c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f003 0304 	and.w	r3, r3, #4
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d118      	bne.n	8002614 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002618:	2b00      	cmp	r3, #0
 800261a:	f47f aec2 	bne.w	80023a2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2220      	movs	r2, #32
 8002622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	e000      	b.n	800263c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800263a:	2302      	movs	r3, #2
  }
}
 800263c:	4618      	mov	r0, r3
 800263e:	3728      	adds	r7, #40	; 0x28
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	00010004 	.word	0x00010004

08002648 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	4608      	mov	r0, r1
 8002652:	4611      	mov	r1, r2
 8002654:	461a      	mov	r2, r3
 8002656:	4603      	mov	r3, r0
 8002658:	817b      	strh	r3, [r7, #10]
 800265a:	460b      	mov	r3, r1
 800265c:	813b      	strh	r3, [r7, #8]
 800265e:	4613      	mov	r3, r2
 8002660:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002662:	f7ff f80b 	bl	800167c <HAL_GetTick>
 8002666:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b20      	cmp	r3, #32
 8002672:	f040 80d9 	bne.w	8002828 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	2319      	movs	r3, #25
 800267c:	2201      	movs	r2, #1
 800267e:	496d      	ldr	r1, [pc, #436]	; (8002834 <HAL_I2C_Mem_Write+0x1ec>)
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f001 fa17 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800268c:	2302      	movs	r3, #2
 800268e:	e0cc      	b.n	800282a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_I2C_Mem_Write+0x56>
 800269a:	2302      	movs	r3, #2
 800269c:	e0c5      	b.n	800282a <HAL_I2C_Mem_Write+0x1e2>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d007      	beq.n	80026c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2221      	movs	r2, #33	; 0x21
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2240      	movs	r2, #64	; 0x40
 80026e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a3a      	ldr	r2, [r7, #32]
 80026ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4a4d      	ldr	r2, [pc, #308]	; (8002838 <HAL_I2C_Mem_Write+0x1f0>)
 8002704:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002706:	88f8      	ldrh	r0, [r7, #6]
 8002708:	893a      	ldrh	r2, [r7, #8]
 800270a:	8979      	ldrh	r1, [r7, #10]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	9301      	str	r3, [sp, #4]
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	4603      	mov	r3, r0
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 ffa6 	bl	8003668 <I2C_RequestMemoryWrite>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d052      	beq.n	80027c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e081      	b.n	800282a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f001 fa98 	bl	8003c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00d      	beq.n	8002752 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	2b04      	cmp	r3, #4
 800273c:	d107      	bne.n	800274e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800274c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e06b      	b.n	800282a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	781a      	ldrb	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b04      	cmp	r3, #4
 800278e:	d11b      	bne.n	80027c8 <HAL_I2C_Mem_Write+0x180>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002794:	2b00      	cmp	r3, #0
 8002796:	d017      	beq.n	80027c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	781a      	ldrb	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1aa      	bne.n	8002726 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f001 fa84 	bl	8003ce2 <I2C_WaitOnBTFFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00d      	beq.n	80027fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d107      	bne.n	80027f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e016      	b.n	800282a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800280a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	e000      	b.n	800282a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002828:	2302      	movs	r3, #2
  }
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	00100002 	.word	0x00100002
 8002838:	ffff0000 	.word	0xffff0000

0800283c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08c      	sub	sp, #48	; 0x30
 8002840:	af02      	add	r7, sp, #8
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	4608      	mov	r0, r1
 8002846:	4611      	mov	r1, r2
 8002848:	461a      	mov	r2, r3
 800284a:	4603      	mov	r3, r0
 800284c:	817b      	strh	r3, [r7, #10]
 800284e:	460b      	mov	r3, r1
 8002850:	813b      	strh	r3, [r7, #8]
 8002852:	4613      	mov	r3, r2
 8002854:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002856:	f7fe ff11 	bl	800167c <HAL_GetTick>
 800285a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b20      	cmp	r3, #32
 8002866:	f040 8208 	bne.w	8002c7a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	2319      	movs	r3, #25
 8002870:	2201      	movs	r2, #1
 8002872:	497b      	ldr	r1, [pc, #492]	; (8002a60 <HAL_I2C_Mem_Read+0x224>)
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f001 f91d 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002880:	2302      	movs	r3, #2
 8002882:	e1fb      	b.n	8002c7c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_I2C_Mem_Read+0x56>
 800288e:	2302      	movs	r3, #2
 8002890:	e1f4      	b.n	8002c7c <HAL_I2C_Mem_Read+0x440>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d007      	beq.n	80028b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2222      	movs	r2, #34	; 0x22
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2240      	movs	r2, #64	; 0x40
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80028e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4a5b      	ldr	r2, [pc, #364]	; (8002a64 <HAL_I2C_Mem_Read+0x228>)
 80028f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028fa:	88f8      	ldrh	r0, [r7, #6]
 80028fc:	893a      	ldrh	r2, [r7, #8]
 80028fe:	8979      	ldrh	r1, [r7, #10]
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	9301      	str	r3, [sp, #4]
 8002904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	4603      	mov	r3, r0
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 ff42 	bl	8003794 <I2C_RequestMemoryRead>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e1b0      	b.n	8002c7c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291e:	2b00      	cmp	r3, #0
 8002920:	d113      	bne.n	800294a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002922:	2300      	movs	r3, #0
 8002924:	623b      	str	r3, [r7, #32]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	623b      	str	r3, [r7, #32]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	623b      	str	r3, [r7, #32]
 8002936:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	e184      	b.n	8002c54 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294e:	2b01      	cmp	r3, #1
 8002950:	d11b      	bne.n	800298a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002960:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	61fb      	str	r3, [r7, #28]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	e164      	b.n	8002c54 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298e:	2b02      	cmp	r3, #2
 8002990:	d11b      	bne.n	80029ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	e144      	b.n	8002c54 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029e0:	e138      	b.n	8002c54 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	f200 80f1 	bhi.w	8002bce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d123      	bne.n	8002a3c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f001 f9b3 	bl	8003d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e139      	b.n	8002c7c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a3a:	e10b      	b.n	8002c54 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d14e      	bne.n	8002ae2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	4906      	ldr	r1, [pc, #24]	; (8002a68 <HAL_I2C_Mem_Read+0x22c>)
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f001 f830 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d008      	beq.n	8002a6c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e10e      	b.n	8002c7c <HAL_I2C_Mem_Read+0x440>
 8002a5e:	bf00      	nop
 8002a60:	00100002 	.word	0x00100002
 8002a64:	ffff0000 	.word	0xffff0000
 8002a68:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691a      	ldr	r2, [r3, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ae0:	e0b8      	b.n	8002c54 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae8:	2200      	movs	r2, #0
 8002aea:	4966      	ldr	r1, [pc, #408]	; (8002c84 <HAL_I2C_Mem_Read+0x448>)
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 ffe1 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0bf      	b.n	8002c7c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b44:	2200      	movs	r2, #0
 8002b46:	494f      	ldr	r1, [pc, #316]	; (8002c84 <HAL_I2C_Mem_Read+0x448>)
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 ffb3 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e091      	b.n	8002c7c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bcc:	e042      	b.n	8002c54 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f001 f8c6 	bl	8003d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e04c      	b.n	8002c7c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d118      	bne.n	8002c54 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f47f aec2 	bne.w	80029e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e000      	b.n	8002c7c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002c7a:	2302      	movs	r3, #2
  }
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3728      	adds	r7, #40	; 0x28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	00010004 	.word	0x00010004

08002c88 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08a      	sub	sp, #40	; 0x28
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	460b      	mov	r3, r1
 8002c96:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002c98:	f7fe fcf0 	bl	800167c <HAL_GetTick>
 8002c9c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	f040 8111 	bne.w	8002ed2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	2319      	movs	r3, #25
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	4988      	ldr	r1, [pc, #544]	; (8002edc <HAL_I2C_IsDeviceReady+0x254>)
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 fefa 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e104      	b.n	8002ed4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_I2C_IsDeviceReady+0x50>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e0fd      	b.n	8002ed4 <HAL_I2C_IsDeviceReady+0x24c>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d007      	beq.n	8002cfe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0201 	orr.w	r2, r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2224      	movs	r2, #36	; 0x24
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4a70      	ldr	r2, [pc, #448]	; (8002ee0 <HAL_I2C_IsDeviceReady+0x258>)
 8002d20:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d30:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 feb8 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00d      	beq.n	8002d66 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d58:	d103      	bne.n	8002d62 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e0b6      	b.n	8002ed4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d66:	897b      	ldrh	r3, [r7, #10]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d74:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002d76:	f7fe fc81 	bl	800167c <HAL_GetTick>
 8002d7a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	bf0c      	ite	eq
 8002d8a:	2301      	moveq	r3, #1
 8002d8c:	2300      	movne	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da0:	bf0c      	ite	eq
 8002da2:	2301      	moveq	r3, #1
 8002da4:	2300      	movne	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002daa:	e025      	b.n	8002df8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dac:	f7fe fc66 	bl	800167c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d302      	bcc.n	8002dc2 <HAL_I2C_IsDeviceReady+0x13a>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d103      	bne.n	8002dca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	22a0      	movs	r2, #160	; 0xa0
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dee:	bf0c      	ite	eq
 8002df0:	2301      	moveq	r3, #1
 8002df2:	2300      	movne	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2ba0      	cmp	r3, #160	; 0xa0
 8002e02:	d005      	beq.n	8002e10 <HAL_I2C_IsDeviceReady+0x188>
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d102      	bne.n	8002e10 <HAL_I2C_IsDeviceReady+0x188>
 8002e0a:	7dbb      	ldrb	r3, [r7, #22]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0cd      	beq.n	8002dac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d129      	bne.n	8002e7a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e34:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	2319      	movs	r3, #25
 8002e52:	2201      	movs	r2, #1
 8002e54:	4921      	ldr	r1, [pc, #132]	; (8002edc <HAL_I2C_IsDeviceReady+0x254>)
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 fe2c 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e036      	b.n	8002ed4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	e02c      	b.n	8002ed4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e88:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e92:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	2319      	movs	r3, #25
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	490f      	ldr	r1, [pc, #60]	; (8002edc <HAL_I2C_IsDeviceReady+0x254>)
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 fe08 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e012      	b.n	8002ed4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	f4ff af32 	bcc.w	8002d22 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002ed2:	2302      	movs	r3, #2
  }
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3720      	adds	r7, #32
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	00100002 	.word	0x00100002
 8002ee0:	ffff0000 	.word	0xffff0000

08002ee4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f06:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00e      	beq.n	8002f32 <HAL_I2C_ER_IRQHandler+0x4e>
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	0a1b      	lsrs	r3, r3, #8
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f30:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	0a5b      	lsrs	r3, r3, #9
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00e      	beq.n	8002f5c <HAL_I2C_ER_IRQHandler+0x78>
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	0a1b      	lsrs	r3, r3, #8
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d008      	beq.n	8002f5c <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	f043 0302 	orr.w	r3, r3, #2
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002f5a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	0a9b      	lsrs	r3, r3, #10
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d03f      	beq.n	8002fe8 <HAL_I2C_ER_IRQHandler+0x104>
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d039      	beq.n	8002fe8 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002f74:	7efb      	ldrb	r3, [r7, #27]
 8002f76:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f86:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002f8e:	7ebb      	ldrb	r3, [r7, #26]
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d112      	bne.n	8002fba <HAL_I2C_ER_IRQHandler+0xd6>
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10f      	bne.n	8002fba <HAL_I2C_ER_IRQHandler+0xd6>
 8002f9a:	7cfb      	ldrb	r3, [r7, #19]
 8002f9c:	2b21      	cmp	r3, #33	; 0x21
 8002f9e:	d008      	beq.n	8002fb2 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002fa0:	7cfb      	ldrb	r3, [r7, #19]
 8002fa2:	2b29      	cmp	r3, #41	; 0x29
 8002fa4:	d005      	beq.n	8002fb2 <HAL_I2C_ER_IRQHandler+0xce>
 8002fa6:	7cfb      	ldrb	r3, [r7, #19]
 8002fa8:	2b28      	cmp	r3, #40	; 0x28
 8002faa:	d106      	bne.n	8002fba <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b21      	cmp	r3, #33	; 0x21
 8002fb0:	d103      	bne.n	8002fba <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f866 	bl	8003084 <I2C_Slave_AF>
 8002fb8:	e016      	b.n	8002fe8 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fc2:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	f043 0304 	orr.w	r3, r3, #4
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fcc:	7efb      	ldrb	r3, [r7, #27]
 8002fce:	2b10      	cmp	r3, #16
 8002fd0:	d002      	beq.n	8002fd8 <HAL_I2C_ER_IRQHandler+0xf4>
 8002fd2:	7efb      	ldrb	r3, [r7, #27]
 8002fd4:	2b40      	cmp	r3, #64	; 0x40
 8002fd6:	d107      	bne.n	8002fe8 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe6:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	0adb      	lsrs	r3, r3, #11
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00e      	beq.n	8003012 <HAL_I2C_ER_IRQHandler+0x12e>
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	0a1b      	lsrs	r3, r3, #8
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	f043 0308 	orr.w	r3, r3, #8
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003010:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f89d 	bl	8003164 <I2C_ITError>
  }
}
 800302a:	bf00      	nop
 800302c:	3728      	adds	r7, #40	; 0x28
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003092:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b08      	cmp	r3, #8
 800309e:	d002      	beq.n	80030a6 <I2C_Slave_AF+0x22>
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	d129      	bne.n	80030fa <I2C_Slave_AF+0x76>
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b28      	cmp	r3, #40	; 0x28
 80030aa:	d126      	bne.n	80030fa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a2c      	ldr	r2, [pc, #176]	; (8003160 <I2C_Slave_AF+0xdc>)
 80030b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030c0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030ca:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030da:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff ffa7 	bl	8003046 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80030f8:	e02e      	b.n	8003158 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	2b21      	cmp	r3, #33	; 0x21
 80030fe:	d126      	bne.n	800314e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a17      	ldr	r2, [pc, #92]	; (8003160 <I2C_Slave_AF+0xdc>)
 8003104:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2221      	movs	r2, #33	; 0x21
 800310a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800312a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003134:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003144:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff ff73 	bl	8003032 <HAL_I2C_SlaveTxCpltCallback>
}
 800314c:	e004      	b.n	8003158 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003156:	615a      	str	r2, [r3, #20]
}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	ffff0000 	.word	0xffff0000

08003164 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003172:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800317a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800317c:	7bbb      	ldrb	r3, [r7, #14]
 800317e:	2b10      	cmp	r3, #16
 8003180:	d002      	beq.n	8003188 <I2C_ITError+0x24>
 8003182:	7bbb      	ldrb	r3, [r7, #14]
 8003184:	2b40      	cmp	r3, #64	; 0x40
 8003186:	d10a      	bne.n	800319e <I2C_ITError+0x3a>
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	2b22      	cmp	r3, #34	; 0x22
 800318c:	d107      	bne.n	800319e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800319c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031a4:	2b28      	cmp	r3, #40	; 0x28
 80031a6:	d107      	bne.n	80031b8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2228      	movs	r2, #40	; 0x28
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80031b6:	e015      	b.n	80031e4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c6:	d00a      	beq.n	80031de <I2C_ITError+0x7a>
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	2b60      	cmp	r3, #96	; 0x60
 80031cc:	d007      	beq.n	80031de <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f2:	d162      	bne.n	80032ba <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003202:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003208:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d020      	beq.n	8003254 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003216:	4a6a      	ldr	r2, [pc, #424]	; (80033c0 <I2C_ITError+0x25c>)
 8003218:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe fbae 	bl	8001980 <HAL_DMA_Abort_IT>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 8089 	beq.w	800333e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800324e:	4610      	mov	r0, r2
 8003250:	4798      	blx	r3
 8003252:	e074      	b.n	800333e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003258:	4a59      	ldr	r2, [pc, #356]	; (80033c0 <I2C_ITError+0x25c>)
 800325a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003260:	4618      	mov	r0, r3
 8003262:	f7fe fb8d 	bl	8001980 <HAL_DMA_Abort_IT>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d068      	beq.n	800333e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003276:	2b40      	cmp	r3, #64	; 0x40
 8003278:	d10b      	bne.n	8003292 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032b4:	4610      	mov	r0, r2
 80032b6:	4798      	blx	r3
 80032b8:	e041      	b.n	800333e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b60      	cmp	r3, #96	; 0x60
 80032c4:	d125      	bne.n	8003312 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d10b      	bne.n	80032fa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0201 	bic.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff feaf 	bl	800306e <HAL_I2C_AbortCpltCallback>
 8003310:	e015      	b.n	800333e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331c:	2b40      	cmp	r3, #64	; 0x40
 800331e:	d10b      	bne.n	8003338 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff fe8e 	bl	800305a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10e      	bne.n	800336c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003354:	2b00      	cmp	r3, #0
 8003356:	d109      	bne.n	800336c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800335e:	2b00      	cmp	r3, #0
 8003360:	d104      	bne.n	800336c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003368:	2b00      	cmp	r3, #0
 800336a:	d007      	beq.n	800337c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800337a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003382:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b04      	cmp	r3, #4
 800338e:	d113      	bne.n	80033b8 <I2C_ITError+0x254>
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	2b28      	cmp	r3, #40	; 0x28
 8003394:	d110      	bne.n	80033b8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <I2C_ITError+0x260>)
 800339a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff fe47 	bl	8003046 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033b8:	bf00      	nop
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	08003965 	.word	0x08003965
 80033c4:	ffff0000 	.word	0xffff0000

080033c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	460b      	mov	r3, r1
 80033d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d006      	beq.n	80033f2 <I2C_MasterRequestWrite+0x2a>
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d003      	beq.n	80033f2 <I2C_MasterRequestWrite+0x2a>
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033f0:	d108      	bne.n	8003404 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	e00b      	b.n	800341c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	2b12      	cmp	r3, #18
 800340a:	d107      	bne.n	800341c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800341a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 fb43 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00d      	beq.n	8003450 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003442:	d103      	bne.n	800344c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800344a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e035      	b.n	80034bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003458:	d108      	bne.n	800346c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800345a:	897b      	ldrh	r3, [r7, #10]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003468:	611a      	str	r2, [r3, #16]
 800346a:	e01b      	b.n	80034a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800346c:	897b      	ldrh	r3, [r7, #10]
 800346e:	11db      	asrs	r3, r3, #7
 8003470:	b2db      	uxtb	r3, r3
 8003472:	f003 0306 	and.w	r3, r3, #6
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f063 030f 	orn	r3, r3, #15
 800347c:	b2da      	uxtb	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	490e      	ldr	r1, [pc, #56]	; (80034c4 <I2C_MasterRequestWrite+0xfc>)
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fb69 	bl	8003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e010      	b.n	80034bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800349a:	897b      	ldrh	r3, [r7, #10]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	4907      	ldr	r1, [pc, #28]	; (80034c8 <I2C_MasterRequestWrite+0x100>)
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fb59 	bl	8003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	00010008 	.word	0x00010008
 80034c8:	00010002 	.word	0x00010002

080034cc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	460b      	mov	r3, r1
 80034da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034f0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d006      	beq.n	8003506 <I2C_MasterRequestRead+0x3a>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d003      	beq.n	8003506 <I2C_MasterRequestRead+0x3a>
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003504:	d108      	bne.n	8003518 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	e00b      	b.n	8003530 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	2b11      	cmp	r3, #17
 800351e:	d107      	bne.n	8003530 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800352e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 fab9 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00d      	beq.n	8003564 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003556:	d103      	bne.n	8003560 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800355e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e079      	b.n	8003658 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800356c:	d108      	bne.n	8003580 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800356e:	897b      	ldrh	r3, [r7, #10]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	b2da      	uxtb	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	611a      	str	r2, [r3, #16]
 800357e:	e05f      	b.n	8003640 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003580:	897b      	ldrh	r3, [r7, #10]
 8003582:	11db      	asrs	r3, r3, #7
 8003584:	b2db      	uxtb	r3, r3
 8003586:	f003 0306 	and.w	r3, r3, #6
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f063 030f 	orn	r3, r3, #15
 8003590:	b2da      	uxtb	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	4930      	ldr	r1, [pc, #192]	; (8003660 <I2C_MasterRequestRead+0x194>)
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 fadf 	bl	8003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e054      	b.n	8003658 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035ae:	897b      	ldrh	r3, [r7, #10]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	4929      	ldr	r1, [pc, #164]	; (8003664 <I2C_MasterRequestRead+0x198>)
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 facf 	bl	8003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e044      	b.n	8003658 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035f2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fa57 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00d      	beq.n	8003628 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800361a:	d103      	bne.n	8003624 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003622:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e017      	b.n	8003658 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003628:	897b      	ldrh	r3, [r7, #10]
 800362a:	11db      	asrs	r3, r3, #7
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f003 0306 	and.w	r3, r3, #6
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f063 030e 	orn	r3, r3, #14
 8003638:	b2da      	uxtb	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	4907      	ldr	r1, [pc, #28]	; (8003664 <I2C_MasterRequestRead+0x198>)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fa8b 	bl	8003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	00010008 	.word	0x00010008
 8003664:	00010002 	.word	0x00010002

08003668 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	4608      	mov	r0, r1
 8003672:	4611      	mov	r1, r2
 8003674:	461a      	mov	r2, r3
 8003676:	4603      	mov	r3, r0
 8003678:	817b      	strh	r3, [r7, #10]
 800367a:	460b      	mov	r3, r1
 800367c:	813b      	strh	r3, [r7, #8]
 800367e:	4613      	mov	r3, r2
 8003680:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003690:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	2200      	movs	r2, #0
 800369a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 fa08 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00d      	beq.n	80036c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b8:	d103      	bne.n	80036c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e05f      	b.n	8003786 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036c6:	897b      	ldrh	r3, [r7, #10]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	6a3a      	ldr	r2, [r7, #32]
 80036da:	492d      	ldr	r1, [pc, #180]	; (8003790 <I2C_RequestMemoryWrite+0x128>)
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 fa40 	bl	8003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e04c      	b.n	8003786 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003704:	6a39      	ldr	r1, [r7, #32]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 faaa 	bl	8003c60 <I2C_WaitOnTXEFlagUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00d      	beq.n	800372e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	2b04      	cmp	r3, #4
 8003718:	d107      	bne.n	800372a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003728:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e02b      	b.n	8003786 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d105      	bne.n	8003740 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003734:	893b      	ldrh	r3, [r7, #8]
 8003736:	b2da      	uxtb	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	611a      	str	r2, [r3, #16]
 800373e:	e021      	b.n	8003784 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003740:	893b      	ldrh	r3, [r7, #8]
 8003742:	0a1b      	lsrs	r3, r3, #8
 8003744:	b29b      	uxth	r3, r3
 8003746:	b2da      	uxtb	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800374e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003750:	6a39      	ldr	r1, [r7, #32]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fa84 	bl	8003c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00d      	beq.n	800377a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	2b04      	cmp	r3, #4
 8003764:	d107      	bne.n	8003776 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003774:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e005      	b.n	8003786 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800377a:	893b      	ldrh	r3, [r7, #8]
 800377c:	b2da      	uxtb	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	00010002 	.word	0x00010002

08003794 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	4608      	mov	r0, r1
 800379e:	4611      	mov	r1, r2
 80037a0:	461a      	mov	r2, r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	817b      	strh	r3, [r7, #10]
 80037a6:	460b      	mov	r3, r1
 80037a8:	813b      	strh	r3, [r7, #8]
 80037aa:	4613      	mov	r3, r2
 80037ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 f96a 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00d      	beq.n	8003802 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f4:	d103      	bne.n	80037fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e0aa      	b.n	8003958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003802:	897b      	ldrh	r3, [r7, #10]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	461a      	mov	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003810:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	6a3a      	ldr	r2, [r7, #32]
 8003816:	4952      	ldr	r1, [pc, #328]	; (8003960 <I2C_RequestMemoryRead+0x1cc>)
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f9a2 	bl	8003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e097      	b.n	8003958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800383e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003840:	6a39      	ldr	r1, [r7, #32]
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 fa0c 	bl	8003c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00d      	beq.n	800386a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	2b04      	cmp	r3, #4
 8003854:	d107      	bne.n	8003866 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003864:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e076      	b.n	8003958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800386a:	88fb      	ldrh	r3, [r7, #6]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d105      	bne.n	800387c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003870:	893b      	ldrh	r3, [r7, #8]
 8003872:	b2da      	uxtb	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	611a      	str	r2, [r3, #16]
 800387a:	e021      	b.n	80038c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800387c:	893b      	ldrh	r3, [r7, #8]
 800387e:	0a1b      	lsrs	r3, r3, #8
 8003880:	b29b      	uxth	r3, r3
 8003882:	b2da      	uxtb	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800388a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388c:	6a39      	ldr	r1, [r7, #32]
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f9e6 	bl	8003c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00d      	beq.n	80038b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d107      	bne.n	80038b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e050      	b.n	8003958 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038b6:	893b      	ldrh	r3, [r7, #8]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c2:	6a39      	ldr	r1, [r7, #32]
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 f9cb 	bl	8003c60 <I2C_WaitOnTXEFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00d      	beq.n	80038ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d107      	bne.n	80038e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e035      	b.n	8003958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	2200      	movs	r2, #0
 8003904:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f8d3 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00d      	beq.n	8003930 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003922:	d103      	bne.n	800392c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800392a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e013      	b.n	8003958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003930:	897b      	ldrh	r3, [r7, #10]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	b2da      	uxtb	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	6a3a      	ldr	r2, [r7, #32]
 8003944:	4906      	ldr	r1, [pc, #24]	; (8003960 <I2C_RequestMemoryRead+0x1cc>)
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 f90b 	bl	8003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	00010002 	.word	0x00010002

08003964 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800397e:	4b4b      	ldr	r3, [pc, #300]	; (8003aac <I2C_DMAAbort+0x148>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	08db      	lsrs	r3, r3, #3
 8003984:	4a4a      	ldr	r2, [pc, #296]	; (8003ab0 <I2C_DMAAbort+0x14c>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	0a1a      	lsrs	r2, r3, #8
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	00da      	lsls	r2, r3, #3
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f043 0220 	orr.w	r2, r3, #32
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80039aa:	e00a      	b.n	80039c2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c0:	d0ea      	beq.n	8003998 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ce:	2200      	movs	r2, #0
 80039d0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039de:	2200      	movs	r2, #0
 80039e0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2200      	movs	r2, #0
 80039f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a04:	2200      	movs	r2, #0
 8003a06:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	2200      	movs	r2, #0
 8003a16:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0201 	bic.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b60      	cmp	r3, #96	; 0x60
 8003a32:	d10e      	bne.n	8003a52 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2200      	movs	r2, #0
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a4a:	6978      	ldr	r0, [r7, #20]
 8003a4c:	f7ff fb0f 	bl	800306e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a50:	e027      	b.n	8003aa2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a52:	7cfb      	ldrb	r3, [r7, #19]
 8003a54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a58:	2b28      	cmp	r3, #40	; 0x28
 8003a5a:	d117      	bne.n	8003a8c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a7a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2228      	movs	r2, #40	; 0x28
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a8a:	e007      	b.n	8003a9c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003a9c:	6978      	ldr	r0, [r7, #20]
 8003a9e:	f7ff fadc 	bl	800305a <HAL_I2C_ErrorCallback>
}
 8003aa2:	bf00      	nop
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000000 	.word	0x20000000
 8003ab0:	14f8b589 	.word	0x14f8b589

08003ab4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ac4:	e025      	b.n	8003b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003acc:	d021      	beq.n	8003b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ace:	f7fd fdd5 	bl	800167c <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d302      	bcc.n	8003ae4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d116      	bne.n	8003b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f043 0220 	orr.w	r2, r3, #32
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e023      	b.n	8003b5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	0c1b      	lsrs	r3, r3, #16
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d10d      	bne.n	8003b38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	43da      	mvns	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4013      	ands	r3, r2
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	bf0c      	ite	eq
 8003b2e:	2301      	moveq	r3, #1
 8003b30:	2300      	movne	r3, #0
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	461a      	mov	r2, r3
 8003b36:	e00c      	b.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	43da      	mvns	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4013      	ands	r3, r2
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	bf0c      	ite	eq
 8003b4a:	2301      	moveq	r3, #1
 8003b4c:	2300      	movne	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d0b6      	beq.n	8003ac6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
 8003b6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b70:	e051      	b.n	8003c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b80:	d123      	bne.n	8003bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f043 0204 	orr.w	r2, r3, #4
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e046      	b.n	8003c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bd0:	d021      	beq.n	8003c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd2:	f7fd fd53 	bl	800167c <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d302      	bcc.n	8003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d116      	bne.n	8003c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f043 0220 	orr.w	r2, r3, #32
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e020      	b.n	8003c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	0c1b      	lsrs	r3, r3, #16
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d10c      	bne.n	8003c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	43da      	mvns	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	bf14      	ite	ne
 8003c32:	2301      	movne	r3, #1
 8003c34:	2300      	moveq	r3, #0
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	e00b      	b.n	8003c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	43da      	mvns	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	4013      	ands	r3, r2
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	bf14      	ite	ne
 8003c4c:	2301      	movne	r3, #1
 8003c4e:	2300      	moveq	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d18d      	bne.n	8003b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c6c:	e02d      	b.n	8003cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f8ce 	bl	8003e10 <I2C_IsAcknowledgeFailed>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e02d      	b.n	8003cda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c84:	d021      	beq.n	8003cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c86:	f7fd fcf9 	bl	800167c <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d302      	bcc.n	8003c9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d116      	bne.n	8003cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f043 0220 	orr.w	r2, r3, #32
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e007      	b.n	8003cda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd4:	2b80      	cmp	r3, #128	; 0x80
 8003cd6:	d1ca      	bne.n	8003c6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cee:	e02d      	b.n	8003d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f88d 	bl	8003e10 <I2C_IsAcknowledgeFailed>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e02d      	b.n	8003d5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d06:	d021      	beq.n	8003d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d08:	f7fd fcb8 	bl	800167c <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d302      	bcc.n	8003d1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d116      	bne.n	8003d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	f043 0220 	orr.w	r2, r3, #32
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e007      	b.n	8003d5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d1ca      	bne.n	8003cf0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d70:	e042      	b.n	8003df8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d119      	bne.n	8003db4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0210 	mvn.w	r2, #16
 8003d88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e029      	b.n	8003e08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db4:	f7fd fc62 	bl	800167c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d302      	bcc.n	8003dca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d116      	bne.n	8003df8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	f043 0220 	orr.w	r2, r3, #32
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e007      	b.n	8003e08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e02:	2b40      	cmp	r3, #64	; 0x40
 8003e04:	d1b5      	bne.n	8003d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e26:	d11b      	bne.n	8003e60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	f043 0204 	orr.w	r2, r3, #4
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
	...

08003e70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e267      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d075      	beq.n	8003f7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e8e:	4b88      	ldr	r3, [pc, #544]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 030c 	and.w	r3, r3, #12
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d00c      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e9a:	4b85      	ldr	r3, [pc, #532]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d112      	bne.n	8003ecc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ea6:	4b82      	ldr	r3, [pc, #520]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eb2:	d10b      	bne.n	8003ecc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb4:	4b7e      	ldr	r3, [pc, #504]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d05b      	beq.n	8003f78 <HAL_RCC_OscConfig+0x108>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d157      	bne.n	8003f78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e242      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed4:	d106      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x74>
 8003ed6:	4b76      	ldr	r3, [pc, #472]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a75      	ldr	r2, [pc, #468]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	e01d      	b.n	8003f20 <HAL_RCC_OscConfig+0xb0>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCC_OscConfig+0x98>
 8003eee:	4b70      	ldr	r3, [pc, #448]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a6f      	ldr	r2, [pc, #444]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	4b6d      	ldr	r3, [pc, #436]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a6c      	ldr	r2, [pc, #432]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	e00b      	b.n	8003f20 <HAL_RCC_OscConfig+0xb0>
 8003f08:	4b69      	ldr	r3, [pc, #420]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a68      	ldr	r2, [pc, #416]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	4b66      	ldr	r3, [pc, #408]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a65      	ldr	r2, [pc, #404]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d013      	beq.n	8003f50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f28:	f7fd fba8 	bl	800167c <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f30:	f7fd fba4 	bl	800167c <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b64      	cmp	r3, #100	; 0x64
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e207      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f42:	4b5b      	ldr	r3, [pc, #364]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0xc0>
 8003f4e:	e014      	b.n	8003f7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f50:	f7fd fb94 	bl	800167c <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f58:	f7fd fb90 	bl	800167c <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b64      	cmp	r3, #100	; 0x64
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e1f3      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6a:	4b51      	ldr	r3, [pc, #324]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f0      	bne.n	8003f58 <HAL_RCC_OscConfig+0xe8>
 8003f76:	e000      	b.n	8003f7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d063      	beq.n	800404e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f86:	4b4a      	ldr	r3, [pc, #296]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00b      	beq.n	8003faa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f92:	4b47      	ldr	r3, [pc, #284]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d11c      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f9e:	4b44      	ldr	r3, [pc, #272]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d116      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003faa:	4b41      	ldr	r3, [pc, #260]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x152>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d001      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e1c7      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc2:	4b3b      	ldr	r3, [pc, #236]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4937      	ldr	r1, [pc, #220]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd6:	e03a      	b.n	800404e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d020      	beq.n	8004022 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fe0:	4b34      	ldr	r3, [pc, #208]	; (80040b4 <HAL_RCC_OscConfig+0x244>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe6:	f7fd fb49 	bl	800167c <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fee:	f7fd fb45 	bl	800167c <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e1a8      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004000:	4b2b      	ldr	r3, [pc, #172]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400c:	4b28      	ldr	r3, [pc, #160]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4925      	ldr	r1, [pc, #148]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 800401c:	4313      	orrs	r3, r2
 800401e:	600b      	str	r3, [r1, #0]
 8004020:	e015      	b.n	800404e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004022:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <HAL_RCC_OscConfig+0x244>)
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fd fb28 	bl	800167c <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004030:	f7fd fb24 	bl	800167c <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e187      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004042:	4b1b      	ldr	r3, [pc, #108]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d036      	beq.n	80040c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d016      	beq.n	8004090 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004062:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <HAL_RCC_OscConfig+0x248>)
 8004064:	2201      	movs	r2, #1
 8004066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004068:	f7fd fb08 	bl	800167c <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004070:	f7fd fb04 	bl	800167c <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e167      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004082:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8004084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x200>
 800408e:	e01b      	b.n	80040c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004090:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <HAL_RCC_OscConfig+0x248>)
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004096:	f7fd faf1 	bl	800167c <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800409c:	e00e      	b.n	80040bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800409e:	f7fd faed 	bl	800167c <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d907      	bls.n	80040bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e150      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
 80040b0:	40023800 	.word	0x40023800
 80040b4:	42470000 	.word	0x42470000
 80040b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040bc:	4b88      	ldr	r3, [pc, #544]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 80040be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1ea      	bne.n	800409e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8097 	beq.w	8004204 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040d6:	2300      	movs	r3, #0
 80040d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040da:	4b81      	ldr	r3, [pc, #516]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10f      	bne.n	8004106 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	4b7d      	ldr	r3, [pc, #500]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	4a7c      	ldr	r2, [pc, #496]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 80040f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f4:	6413      	str	r3, [r2, #64]	; 0x40
 80040f6:	4b7a      	ldr	r3, [pc, #488]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fe:	60bb      	str	r3, [r7, #8]
 8004100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004102:	2301      	movs	r3, #1
 8004104:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004106:	4b77      	ldr	r3, [pc, #476]	; (80042e4 <HAL_RCC_OscConfig+0x474>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410e:	2b00      	cmp	r3, #0
 8004110:	d118      	bne.n	8004144 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004112:	4b74      	ldr	r3, [pc, #464]	; (80042e4 <HAL_RCC_OscConfig+0x474>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a73      	ldr	r2, [pc, #460]	; (80042e4 <HAL_RCC_OscConfig+0x474>)
 8004118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800411e:	f7fd faad 	bl	800167c <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004126:	f7fd faa9 	bl	800167c <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e10c      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004138:	4b6a      	ldr	r3, [pc, #424]	; (80042e4 <HAL_RCC_OscConfig+0x474>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0f0      	beq.n	8004126 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d106      	bne.n	800415a <HAL_RCC_OscConfig+0x2ea>
 800414c:	4b64      	ldr	r3, [pc, #400]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004150:	4a63      	ldr	r2, [pc, #396]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	6713      	str	r3, [r2, #112]	; 0x70
 8004158:	e01c      	b.n	8004194 <HAL_RCC_OscConfig+0x324>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	2b05      	cmp	r3, #5
 8004160:	d10c      	bne.n	800417c <HAL_RCC_OscConfig+0x30c>
 8004162:	4b5f      	ldr	r3, [pc, #380]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	4a5e      	ldr	r2, [pc, #376]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 8004168:	f043 0304 	orr.w	r3, r3, #4
 800416c:	6713      	str	r3, [r2, #112]	; 0x70
 800416e:	4b5c      	ldr	r3, [pc, #368]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	4a5b      	ldr	r2, [pc, #364]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	6713      	str	r3, [r2, #112]	; 0x70
 800417a:	e00b      	b.n	8004194 <HAL_RCC_OscConfig+0x324>
 800417c:	4b58      	ldr	r3, [pc, #352]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 800417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004180:	4a57      	ldr	r2, [pc, #348]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 8004182:	f023 0301 	bic.w	r3, r3, #1
 8004186:	6713      	str	r3, [r2, #112]	; 0x70
 8004188:	4b55      	ldr	r3, [pc, #340]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 800418a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418c:	4a54      	ldr	r2, [pc, #336]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 800418e:	f023 0304 	bic.w	r3, r3, #4
 8004192:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d015      	beq.n	80041c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419c:	f7fd fa6e 	bl	800167c <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a2:	e00a      	b.n	80041ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041a4:	f7fd fa6a 	bl	800167c <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e0cb      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ba:	4b49      	ldr	r3, [pc, #292]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0ee      	beq.n	80041a4 <HAL_RCC_OscConfig+0x334>
 80041c6:	e014      	b.n	80041f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c8:	f7fd fa58 	bl	800167c <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041d0:	f7fd fa54 	bl	800167c <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	; 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e0b5      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e6:	4b3e      	ldr	r3, [pc, #248]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 80041e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1ee      	bne.n	80041d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041f2:	7dfb      	ldrb	r3, [r7, #23]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d105      	bne.n	8004204 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f8:	4b39      	ldr	r3, [pc, #228]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	4a38      	ldr	r2, [pc, #224]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 80041fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004202:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80a1 	beq.w	8004350 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800420e:	4b34      	ldr	r3, [pc, #208]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
 8004216:	2b08      	cmp	r3, #8
 8004218:	d05c      	beq.n	80042d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d141      	bne.n	80042a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004222:	4b31      	ldr	r3, [pc, #196]	; (80042e8 <HAL_RCC_OscConfig+0x478>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004228:	f7fd fa28 	bl	800167c <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004230:	f7fd fa24 	bl	800167c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e087      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004242:	4b27      	ldr	r3, [pc, #156]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69da      	ldr	r2, [r3, #28]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	019b      	lsls	r3, r3, #6
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004264:	085b      	lsrs	r3, r3, #1
 8004266:	3b01      	subs	r3, #1
 8004268:	041b      	lsls	r3, r3, #16
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	061b      	lsls	r3, r3, #24
 8004272:	491b      	ldr	r1, [pc, #108]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 8004274:	4313      	orrs	r3, r2
 8004276:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004278:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <HAL_RCC_OscConfig+0x478>)
 800427a:	2201      	movs	r2, #1
 800427c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427e:	f7fd f9fd 	bl	800167c <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004286:	f7fd f9f9 	bl	800167c <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e05c      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004298:	4b11      	ldr	r3, [pc, #68]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCC_OscConfig+0x416>
 80042a4:	e054      	b.n	8004350 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a6:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <HAL_RCC_OscConfig+0x478>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ac:	f7fd f9e6 	bl	800167c <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b4:	f7fd f9e2 	bl	800167c <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e045      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c6:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x444>
 80042d2:	e03d      	b.n	8004350 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d107      	bne.n	80042ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e038      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
 80042e0:	40023800 	.word	0x40023800
 80042e4:	40007000 	.word	0x40007000
 80042e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042ec:	4b1b      	ldr	r3, [pc, #108]	; (800435c <HAL_RCC_OscConfig+0x4ec>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d028      	beq.n	800434c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004304:	429a      	cmp	r2, r3
 8004306:	d121      	bne.n	800434c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004312:	429a      	cmp	r2, r3
 8004314:	d11a      	bne.n	800434c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800431c:	4013      	ands	r3, r2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004322:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004324:	4293      	cmp	r3, r2
 8004326:	d111      	bne.n	800434c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	085b      	lsrs	r3, r3, #1
 8004334:	3b01      	subs	r3, #1
 8004336:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004338:	429a      	cmp	r2, r3
 800433a:	d107      	bne.n	800434c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004348:	429a      	cmp	r2, r3
 800434a:	d001      	beq.n	8004350 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40023800 	.word	0x40023800

08004360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0cc      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004374:	4b68      	ldr	r3, [pc, #416]	; (8004518 <HAL_RCC_ClockConfig+0x1b8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d90c      	bls.n	800439c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004382:	4b65      	ldr	r3, [pc, #404]	; (8004518 <HAL_RCC_ClockConfig+0x1b8>)
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800438a:	4b63      	ldr	r3, [pc, #396]	; (8004518 <HAL_RCC_ClockConfig+0x1b8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d001      	beq.n	800439c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0b8      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d020      	beq.n	80043ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043b4:	4b59      	ldr	r3, [pc, #356]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	4a58      	ldr	r2, [pc, #352]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043cc:	4b53      	ldr	r3, [pc, #332]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	4a52      	ldr	r2, [pc, #328]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043d8:	4b50      	ldr	r3, [pc, #320]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	494d      	ldr	r1, [pc, #308]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d044      	beq.n	8004480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d107      	bne.n	800440e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fe:	4b47      	ldr	r3, [pc, #284]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d119      	bne.n	800443e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e07f      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d003      	beq.n	800441e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800441a:	2b03      	cmp	r3, #3
 800441c:	d107      	bne.n	800442e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441e:	4b3f      	ldr	r3, [pc, #252]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e06f      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442e:	4b3b      	ldr	r3, [pc, #236]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e067      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800443e:	4b37      	ldr	r3, [pc, #220]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f023 0203 	bic.w	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	4934      	ldr	r1, [pc, #208]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	4313      	orrs	r3, r2
 800444e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004450:	f7fd f914 	bl	800167c <HAL_GetTick>
 8004454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004456:	e00a      	b.n	800446e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004458:	f7fd f910 	bl	800167c <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f241 3288 	movw	r2, #5000	; 0x1388
 8004466:	4293      	cmp	r3, r2
 8004468:	d901      	bls.n	800446e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e04f      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446e:	4b2b      	ldr	r3, [pc, #172]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 020c 	and.w	r2, r3, #12
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	429a      	cmp	r2, r3
 800447e:	d1eb      	bne.n	8004458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004480:	4b25      	ldr	r3, [pc, #148]	; (8004518 <HAL_RCC_ClockConfig+0x1b8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d20c      	bcs.n	80044a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448e:	4b22      	ldr	r3, [pc, #136]	; (8004518 <HAL_RCC_ClockConfig+0x1b8>)
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004496:	4b20      	ldr	r3, [pc, #128]	; (8004518 <HAL_RCC_ClockConfig+0x1b8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d001      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e032      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044b4:	4b19      	ldr	r3, [pc, #100]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4916      	ldr	r1, [pc, #88]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044d2:	4b12      	ldr	r3, [pc, #72]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	490e      	ldr	r1, [pc, #56]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044e6:	f000 f821 	bl	800452c <HAL_RCC_GetSysClockFreq>
 80044ea:	4602      	mov	r2, r0
 80044ec:	4b0b      	ldr	r3, [pc, #44]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	490a      	ldr	r1, [pc, #40]	; (8004520 <HAL_RCC_ClockConfig+0x1c0>)
 80044f8:	5ccb      	ldrb	r3, [r1, r3]
 80044fa:	fa22 f303 	lsr.w	r3, r2, r3
 80044fe:	4a09      	ldr	r2, [pc, #36]	; (8004524 <HAL_RCC_ClockConfig+0x1c4>)
 8004500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004502:	4b09      	ldr	r3, [pc, #36]	; (8004528 <HAL_RCC_ClockConfig+0x1c8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7fc fc96 	bl	8000e38 <HAL_InitTick>

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40023c00 	.word	0x40023c00
 800451c:	40023800 	.word	0x40023800
 8004520:	08008e74 	.word	0x08008e74
 8004524:	20000000 	.word	0x20000000
 8004528:	20000004 	.word	0x20000004

0800452c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800452c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004530:	b094      	sub	sp, #80	; 0x50
 8004532:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	647b      	str	r3, [r7, #68]	; 0x44
 8004538:	2300      	movs	r3, #0
 800453a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800453c:	2300      	movs	r3, #0
 800453e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004544:	4b79      	ldr	r3, [pc, #484]	; (800472c <HAL_RCC_GetSysClockFreq+0x200>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 030c 	and.w	r3, r3, #12
 800454c:	2b08      	cmp	r3, #8
 800454e:	d00d      	beq.n	800456c <HAL_RCC_GetSysClockFreq+0x40>
 8004550:	2b08      	cmp	r3, #8
 8004552:	f200 80e1 	bhi.w	8004718 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_RCC_GetSysClockFreq+0x34>
 800455a:	2b04      	cmp	r3, #4
 800455c:	d003      	beq.n	8004566 <HAL_RCC_GetSysClockFreq+0x3a>
 800455e:	e0db      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004560:	4b73      	ldr	r3, [pc, #460]	; (8004730 <HAL_RCC_GetSysClockFreq+0x204>)
 8004562:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004564:	e0db      	b.n	800471e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004566:	4b73      	ldr	r3, [pc, #460]	; (8004734 <HAL_RCC_GetSysClockFreq+0x208>)
 8004568:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800456a:	e0d8      	b.n	800471e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800456c:	4b6f      	ldr	r3, [pc, #444]	; (800472c <HAL_RCC_GetSysClockFreq+0x200>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004574:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004576:	4b6d      	ldr	r3, [pc, #436]	; (800472c <HAL_RCC_GetSysClockFreq+0x200>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d063      	beq.n	800464a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004582:	4b6a      	ldr	r3, [pc, #424]	; (800472c <HAL_RCC_GetSysClockFreq+0x200>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	099b      	lsrs	r3, r3, #6
 8004588:	2200      	movs	r2, #0
 800458a:	63bb      	str	r3, [r7, #56]	; 0x38
 800458c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004594:	633b      	str	r3, [r7, #48]	; 0x30
 8004596:	2300      	movs	r3, #0
 8004598:	637b      	str	r3, [r7, #52]	; 0x34
 800459a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800459e:	4622      	mov	r2, r4
 80045a0:	462b      	mov	r3, r5
 80045a2:	f04f 0000 	mov.w	r0, #0
 80045a6:	f04f 0100 	mov.w	r1, #0
 80045aa:	0159      	lsls	r1, r3, #5
 80045ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045b0:	0150      	lsls	r0, r2, #5
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4621      	mov	r1, r4
 80045b8:	1a51      	subs	r1, r2, r1
 80045ba:	6139      	str	r1, [r7, #16]
 80045bc:	4629      	mov	r1, r5
 80045be:	eb63 0301 	sbc.w	r3, r3, r1
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	f04f 0300 	mov.w	r3, #0
 80045cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045d0:	4659      	mov	r1, fp
 80045d2:	018b      	lsls	r3, r1, #6
 80045d4:	4651      	mov	r1, sl
 80045d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045da:	4651      	mov	r1, sl
 80045dc:	018a      	lsls	r2, r1, #6
 80045de:	4651      	mov	r1, sl
 80045e0:	ebb2 0801 	subs.w	r8, r2, r1
 80045e4:	4659      	mov	r1, fp
 80045e6:	eb63 0901 	sbc.w	r9, r3, r1
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045fe:	4690      	mov	r8, r2
 8004600:	4699      	mov	r9, r3
 8004602:	4623      	mov	r3, r4
 8004604:	eb18 0303 	adds.w	r3, r8, r3
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	462b      	mov	r3, r5
 800460c:	eb49 0303 	adc.w	r3, r9, r3
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	f04f 0300 	mov.w	r3, #0
 800461a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800461e:	4629      	mov	r1, r5
 8004620:	024b      	lsls	r3, r1, #9
 8004622:	4621      	mov	r1, r4
 8004624:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004628:	4621      	mov	r1, r4
 800462a:	024a      	lsls	r2, r1, #9
 800462c:	4610      	mov	r0, r2
 800462e:	4619      	mov	r1, r3
 8004630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004632:	2200      	movs	r2, #0
 8004634:	62bb      	str	r3, [r7, #40]	; 0x28
 8004636:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004638:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800463c:	f7fb fe20 	bl	8000280 <__aeabi_uldivmod>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4613      	mov	r3, r2
 8004646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004648:	e058      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800464a:	4b38      	ldr	r3, [pc, #224]	; (800472c <HAL_RCC_GetSysClockFreq+0x200>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	099b      	lsrs	r3, r3, #6
 8004650:	2200      	movs	r2, #0
 8004652:	4618      	mov	r0, r3
 8004654:	4611      	mov	r1, r2
 8004656:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800465a:	623b      	str	r3, [r7, #32]
 800465c:	2300      	movs	r3, #0
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
 8004660:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004664:	4642      	mov	r2, r8
 8004666:	464b      	mov	r3, r9
 8004668:	f04f 0000 	mov.w	r0, #0
 800466c:	f04f 0100 	mov.w	r1, #0
 8004670:	0159      	lsls	r1, r3, #5
 8004672:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004676:	0150      	lsls	r0, r2, #5
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4641      	mov	r1, r8
 800467e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004682:	4649      	mov	r1, r9
 8004684:	eb63 0b01 	sbc.w	fp, r3, r1
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004694:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004698:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800469c:	ebb2 040a 	subs.w	r4, r2, sl
 80046a0:	eb63 050b 	sbc.w	r5, r3, fp
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	00eb      	lsls	r3, r5, #3
 80046ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046b2:	00e2      	lsls	r2, r4, #3
 80046b4:	4614      	mov	r4, r2
 80046b6:	461d      	mov	r5, r3
 80046b8:	4643      	mov	r3, r8
 80046ba:	18e3      	adds	r3, r4, r3
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	464b      	mov	r3, r9
 80046c0:	eb45 0303 	adc.w	r3, r5, r3
 80046c4:	607b      	str	r3, [r7, #4]
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046d2:	4629      	mov	r1, r5
 80046d4:	028b      	lsls	r3, r1, #10
 80046d6:	4621      	mov	r1, r4
 80046d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046dc:	4621      	mov	r1, r4
 80046de:	028a      	lsls	r2, r1, #10
 80046e0:	4610      	mov	r0, r2
 80046e2:	4619      	mov	r1, r3
 80046e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046e6:	2200      	movs	r2, #0
 80046e8:	61bb      	str	r3, [r7, #24]
 80046ea:	61fa      	str	r2, [r7, #28]
 80046ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046f0:	f7fb fdc6 	bl	8000280 <__aeabi_uldivmod>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	4613      	mov	r3, r2
 80046fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <HAL_RCC_GetSysClockFreq+0x200>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	0c1b      	lsrs	r3, r3, #16
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	3301      	adds	r3, #1
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800470c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800470e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004716:	e002      	b.n	800471e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_RCC_GetSysClockFreq+0x204>)
 800471a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800471c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800471e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004720:	4618      	mov	r0, r3
 8004722:	3750      	adds	r7, #80	; 0x50
 8004724:	46bd      	mov	sp, r7
 8004726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800472a:	bf00      	nop
 800472c:	40023800 	.word	0x40023800
 8004730:	00f42400 	.word	0x00f42400
 8004734:	007a1200 	.word	0x007a1200

08004738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800473c:	4b03      	ldr	r3, [pc, #12]	; (800474c <HAL_RCC_GetHCLKFreq+0x14>)
 800473e:	681b      	ldr	r3, [r3, #0]
}
 8004740:	4618      	mov	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	20000000 	.word	0x20000000

08004750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004754:	f7ff fff0 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004758:	4602      	mov	r2, r0
 800475a:	4b05      	ldr	r3, [pc, #20]	; (8004770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	0a9b      	lsrs	r3, r3, #10
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	4903      	ldr	r1, [pc, #12]	; (8004774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004766:	5ccb      	ldrb	r3, [r1, r3]
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800476c:	4618      	mov	r0, r3
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40023800 	.word	0x40023800
 8004774:	08008e84 	.word	0x08008e84

08004778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800477c:	f7ff ffdc 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004780:	4602      	mov	r2, r0
 8004782:	4b05      	ldr	r3, [pc, #20]	; (8004798 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	0b5b      	lsrs	r3, r3, #13
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	4903      	ldr	r1, [pc, #12]	; (800479c <HAL_RCC_GetPCLK2Freq+0x24>)
 800478e:	5ccb      	ldrb	r3, [r1, r3]
 8004790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004794:	4618      	mov	r0, r3
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40023800 	.word	0x40023800
 800479c:	08008e84 	.word	0x08008e84

080047a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	220f      	movs	r2, #15
 80047ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80047b0:	4b12      	ldr	r3, [pc, #72]	; (80047fc <HAL_RCC_GetClockConfig+0x5c>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 0203 	and.w	r2, r3, #3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80047bc:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <HAL_RCC_GetClockConfig+0x5c>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80047c8:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <HAL_RCC_GetClockConfig+0x5c>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80047d4:	4b09      	ldr	r3, [pc, #36]	; (80047fc <HAL_RCC_GetClockConfig+0x5c>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	08db      	lsrs	r3, r3, #3
 80047da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80047e2:	4b07      	ldr	r3, [pc, #28]	; (8004800 <HAL_RCC_GetClockConfig+0x60>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0207 	and.w	r2, r3, #7
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	601a      	str	r2, [r3, #0]
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40023800 	.word	0x40023800
 8004800:	40023c00 	.word	0x40023c00

08004804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e041      	b.n	800489a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f839 	bl	80048a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3304      	adds	r3, #4
 8004840:	4619      	mov	r1, r3
 8004842:	4610      	mov	r0, r2
 8004844:	f000 fadc 	bl	8004e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
	...

080048b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d001      	beq.n	80048d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e044      	b.n	800495a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1e      	ldr	r2, [pc, #120]	; (8004968 <HAL_TIM_Base_Start_IT+0xb0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d018      	beq.n	8004924 <HAL_TIM_Base_Start_IT+0x6c>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fa:	d013      	beq.n	8004924 <HAL_TIM_Base_Start_IT+0x6c>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a1a      	ldr	r2, [pc, #104]	; (800496c <HAL_TIM_Base_Start_IT+0xb4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00e      	beq.n	8004924 <HAL_TIM_Base_Start_IT+0x6c>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a19      	ldr	r2, [pc, #100]	; (8004970 <HAL_TIM_Base_Start_IT+0xb8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d009      	beq.n	8004924 <HAL_TIM_Base_Start_IT+0x6c>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a17      	ldr	r2, [pc, #92]	; (8004974 <HAL_TIM_Base_Start_IT+0xbc>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d004      	beq.n	8004924 <HAL_TIM_Base_Start_IT+0x6c>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a16      	ldr	r2, [pc, #88]	; (8004978 <HAL_TIM_Base_Start_IT+0xc0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d111      	bne.n	8004948 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b06      	cmp	r3, #6
 8004934:	d010      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f042 0201 	orr.w	r2, r2, #1
 8004944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004946:	e007      	b.n	8004958 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40010000 	.word	0x40010000
 800496c:	40000400 	.word	0x40000400
 8004970:	40000800 	.word	0x40000800
 8004974:	40000c00 	.word	0x40000c00
 8004978:	40014000 	.word	0x40014000

0800497c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e041      	b.n	8004a12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fc fc7e 	bl	80012a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4619      	mov	r1, r3
 80049ba:	4610      	mov	r0, r2
 80049bc:	f000 fa20 	bl	8004e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d122      	bne.n	8004a76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d11b      	bne.n	8004a76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f06f 0202 	mvn.w	r2, #2
 8004a46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f003 0303 	and.w	r3, r3, #3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f9b1 	bl	8004dc4 <HAL_TIM_IC_CaptureCallback>
 8004a62:	e005      	b.n	8004a70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f9a3 	bl	8004db0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f9b4 	bl	8004dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d122      	bne.n	8004aca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d11b      	bne.n	8004aca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f06f 0204 	mvn.w	r2, #4
 8004a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f987 	bl	8004dc4 <HAL_TIM_IC_CaptureCallback>
 8004ab6:	e005      	b.n	8004ac4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f979 	bl	8004db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f98a 	bl	8004dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d122      	bne.n	8004b1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d11b      	bne.n	8004b1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f06f 0208 	mvn.w	r2, #8
 8004aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2204      	movs	r2, #4
 8004af4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	f003 0303 	and.w	r3, r3, #3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f95d 	bl	8004dc4 <HAL_TIM_IC_CaptureCallback>
 8004b0a:	e005      	b.n	8004b18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f94f 	bl	8004db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f960 	bl	8004dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b10      	cmp	r3, #16
 8004b2a:	d122      	bne.n	8004b72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f003 0310 	and.w	r3, r3, #16
 8004b36:	2b10      	cmp	r3, #16
 8004b38:	d11b      	bne.n	8004b72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f06f 0210 	mvn.w	r2, #16
 8004b42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2208      	movs	r2, #8
 8004b48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f933 	bl	8004dc4 <HAL_TIM_IC_CaptureCallback>
 8004b5e:	e005      	b.n	8004b6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f925 	bl	8004db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f936 	bl	8004dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d10e      	bne.n	8004b9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d107      	bne.n	8004b9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f06f 0201 	mvn.w	r2, #1
 8004b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7fc f8df 	bl	8000d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba8:	2b80      	cmp	r3, #128	; 0x80
 8004baa:	d10e      	bne.n	8004bca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb6:	2b80      	cmp	r3, #128	; 0x80
 8004bb8:	d107      	bne.n	8004bca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fb9f 	bl	8005308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd4:	2b40      	cmp	r3, #64	; 0x40
 8004bd6:	d10e      	bne.n	8004bf6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be2:	2b40      	cmp	r3, #64	; 0x40
 8004be4:	d107      	bne.n	8004bf6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f8fb 	bl	8004dec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d10e      	bne.n	8004c22 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b20      	cmp	r3, #32
 8004c10:	d107      	bne.n	8004c22 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f06f 0220 	mvn.w	r2, #32
 8004c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fb69 	bl	80052f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c22:	bf00      	nop
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d101      	bne.n	8004c4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c46:	2302      	movs	r3, #2
 8004c48:	e0ae      	b.n	8004da8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b0c      	cmp	r3, #12
 8004c56:	f200 809f 	bhi.w	8004d98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c5a:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c60:	08004c95 	.word	0x08004c95
 8004c64:	08004d99 	.word	0x08004d99
 8004c68:	08004d99 	.word	0x08004d99
 8004c6c:	08004d99 	.word	0x08004d99
 8004c70:	08004cd5 	.word	0x08004cd5
 8004c74:	08004d99 	.word	0x08004d99
 8004c78:	08004d99 	.word	0x08004d99
 8004c7c:	08004d99 	.word	0x08004d99
 8004c80:	08004d17 	.word	0x08004d17
 8004c84:	08004d99 	.word	0x08004d99
 8004c88:	08004d99 	.word	0x08004d99
 8004c8c:	08004d99 	.word	0x08004d99
 8004c90:	08004d57 	.word	0x08004d57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 f930 	bl	8004f00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0208 	orr.w	r2, r2, #8
 8004cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0204 	bic.w	r2, r2, #4
 8004cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6999      	ldr	r1, [r3, #24]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	619a      	str	r2, [r3, #24]
      break;
 8004cd2:	e064      	b.n	8004d9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 f976 	bl	8004fcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699a      	ldr	r2, [r3, #24]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6999      	ldr	r1, [r3, #24]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	021a      	lsls	r2, r3, #8
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	619a      	str	r2, [r3, #24]
      break;
 8004d14:	e043      	b.n	8004d9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 f9c1 	bl	80050a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f042 0208 	orr.w	r2, r2, #8
 8004d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0204 	bic.w	r2, r2, #4
 8004d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69d9      	ldr	r1, [r3, #28]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	61da      	str	r2, [r3, #28]
      break;
 8004d54:	e023      	b.n	8004d9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fa0b 	bl	8005178 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69da      	ldr	r2, [r3, #28]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69d9      	ldr	r1, [r3, #28]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	021a      	lsls	r2, r3, #8
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	61da      	str	r2, [r3, #28]
      break;
 8004d96:	e002      	b.n	8004d9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a34      	ldr	r2, [pc, #208]	; (8004ee4 <TIM_Base_SetConfig+0xe4>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00f      	beq.n	8004e38 <TIM_Base_SetConfig+0x38>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1e:	d00b      	beq.n	8004e38 <TIM_Base_SetConfig+0x38>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a31      	ldr	r2, [pc, #196]	; (8004ee8 <TIM_Base_SetConfig+0xe8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d007      	beq.n	8004e38 <TIM_Base_SetConfig+0x38>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a30      	ldr	r2, [pc, #192]	; (8004eec <TIM_Base_SetConfig+0xec>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_Base_SetConfig+0x38>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a2f      	ldr	r2, [pc, #188]	; (8004ef0 <TIM_Base_SetConfig+0xf0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d108      	bne.n	8004e4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a25      	ldr	r2, [pc, #148]	; (8004ee4 <TIM_Base_SetConfig+0xe4>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d01b      	beq.n	8004e8a <TIM_Base_SetConfig+0x8a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e58:	d017      	beq.n	8004e8a <TIM_Base_SetConfig+0x8a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a22      	ldr	r2, [pc, #136]	; (8004ee8 <TIM_Base_SetConfig+0xe8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <TIM_Base_SetConfig+0x8a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a21      	ldr	r2, [pc, #132]	; (8004eec <TIM_Base_SetConfig+0xec>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00f      	beq.n	8004e8a <TIM_Base_SetConfig+0x8a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a20      	ldr	r2, [pc, #128]	; (8004ef0 <TIM_Base_SetConfig+0xf0>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00b      	beq.n	8004e8a <TIM_Base_SetConfig+0x8a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a1f      	ldr	r2, [pc, #124]	; (8004ef4 <TIM_Base_SetConfig+0xf4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d007      	beq.n	8004e8a <TIM_Base_SetConfig+0x8a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a1e      	ldr	r2, [pc, #120]	; (8004ef8 <TIM_Base_SetConfig+0xf8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d003      	beq.n	8004e8a <TIM_Base_SetConfig+0x8a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a1d      	ldr	r2, [pc, #116]	; (8004efc <TIM_Base_SetConfig+0xfc>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d108      	bne.n	8004e9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <TIM_Base_SetConfig+0xe4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d103      	bne.n	8004ed0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	615a      	str	r2, [r3, #20]
}
 8004ed6:	bf00      	nop
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40010000 	.word	0x40010000
 8004ee8:	40000400 	.word	0x40000400
 8004eec:	40000800 	.word	0x40000800
 8004ef0:	40000c00 	.word	0x40000c00
 8004ef4:	40014000 	.word	0x40014000
 8004ef8:	40014400 	.word	0x40014400
 8004efc:	40014800 	.word	0x40014800

08004f00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	f023 0201 	bic.w	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0303 	bic.w	r3, r3, #3
 8004f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f023 0302 	bic.w	r3, r3, #2
 8004f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a1c      	ldr	r2, [pc, #112]	; (8004fc8 <TIM_OC1_SetConfig+0xc8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d10c      	bne.n	8004f76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f023 0308 	bic.w	r3, r3, #8
 8004f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f023 0304 	bic.w	r3, r3, #4
 8004f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a13      	ldr	r2, [pc, #76]	; (8004fc8 <TIM_OC1_SetConfig+0xc8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d111      	bne.n	8004fa2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	621a      	str	r2, [r3, #32]
}
 8004fbc:	bf00      	nop
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	40010000 	.word	0x40010000

08004fcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	f023 0210 	bic.w	r2, r3, #16
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	021b      	lsls	r3, r3, #8
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	4313      	orrs	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 0320 	bic.w	r3, r3, #32
 8005016:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a1e      	ldr	r2, [pc, #120]	; (80050a0 <TIM_OC2_SetConfig+0xd4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d10d      	bne.n	8005048 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005046:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a15      	ldr	r2, [pc, #84]	; (80050a0 <TIM_OC2_SetConfig+0xd4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d113      	bne.n	8005078 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005056:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800505e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	621a      	str	r2, [r3, #32]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40010000 	.word	0x40010000

080050a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0303 	bic.w	r3, r3, #3
 80050da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a1d      	ldr	r2, [pc, #116]	; (8005174 <TIM_OC3_SetConfig+0xd0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d10d      	bne.n	800511e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	021b      	lsls	r3, r3, #8
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800511c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a14      	ldr	r2, [pc, #80]	; (8005174 <TIM_OC3_SetConfig+0xd0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d113      	bne.n	800514e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800512c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	621a      	str	r2, [r3, #32]
}
 8005168:	bf00      	nop
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	40010000 	.word	0x40010000

08005178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	021b      	lsls	r3, r3, #8
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	031b      	lsls	r3, r3, #12
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a10      	ldr	r2, [pc, #64]	; (8005214 <TIM_OC4_SetConfig+0x9c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d109      	bne.n	80051ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	019b      	lsls	r3, r3, #6
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	621a      	str	r2, [r3, #32]
}
 8005206:	bf00      	nop
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40010000 	.word	0x40010000

08005218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800522c:	2302      	movs	r3, #2
 800522e:	e050      	b.n	80052d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a1c      	ldr	r2, [pc, #112]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d018      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800527c:	d013      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a18      	ldr	r2, [pc, #96]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00e      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a16      	ldr	r2, [pc, #88]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d009      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a15      	ldr	r2, [pc, #84]	; (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d004      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a13      	ldr	r2, [pc, #76]	; (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d10c      	bne.n	80052c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40010000 	.word	0x40010000
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40000800 	.word	0x40000800
 80052ec:	40000c00 	.word	0x40000c00
 80052f0:	40014000 	.word	0x40014000

080052f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e03f      	b.n	80053ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fc f896 	bl	8001474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2224      	movs	r2, #36	; 0x24
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800535e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fd71 	bl	8005e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b08a      	sub	sp, #40	; 0x28
 80053ba:	af02      	add	r7, sp, #8
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	603b      	str	r3, [r7, #0]
 80053c2:	4613      	mov	r3, r2
 80053c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b20      	cmp	r3, #32
 80053d4:	d17c      	bne.n	80054d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <HAL_UART_Transmit+0x2c>
 80053dc:	88fb      	ldrh	r3, [r7, #6]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e075      	b.n	80054d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_UART_Transmit+0x3e>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e06e      	b.n	80054d2 <HAL_UART_Transmit+0x11c>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2221      	movs	r2, #33	; 0x21
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800540a:	f7fc f937 	bl	800167c <HAL_GetTick>
 800540e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	88fa      	ldrh	r2, [r7, #6]
 8005414:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	88fa      	ldrh	r2, [r7, #6]
 800541a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005424:	d108      	bne.n	8005438 <HAL_UART_Transmit+0x82>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d104      	bne.n	8005438 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800542e:	2300      	movs	r3, #0
 8005430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	e003      	b.n	8005440 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800543c:	2300      	movs	r3, #0
 800543e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005448:	e02a      	b.n	80054a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2200      	movs	r2, #0
 8005452:	2180      	movs	r1, #128	; 0x80
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 faef 	bl	8005a38 <UART_WaitOnFlagUntilTimeout>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e036      	b.n	80054d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10b      	bne.n	8005482 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005478:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	3302      	adds	r3, #2
 800547e:	61bb      	str	r3, [r7, #24]
 8005480:	e007      	b.n	8005492 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	781a      	ldrb	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	3301      	adds	r3, #1
 8005490:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1cf      	bne.n	800544a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2200      	movs	r2, #0
 80054b2:	2140      	movs	r1, #64	; 0x40
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 fabf 	bl	8005a38 <UART_WaitOnFlagUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e006      	b.n	80054d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	e000      	b.n	80054d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80054d0:	2302      	movs	r3, #2
  }
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b0ba      	sub	sp, #232	; 0xe8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005502:	2300      	movs	r3, #0
 8005504:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005508:	2300      	movs	r3, #0
 800550a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800550e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800551a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10f      	bne.n	8005542 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b00      	cmp	r3, #0
 800552c:	d009      	beq.n	8005542 <HAL_UART_IRQHandler+0x66>
 800552e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 fbc9 	bl	8005cd2 <UART_Receive_IT>
      return;
 8005540:	e256      	b.n	80059f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 80de 	beq.w	8005708 <HAL_UART_IRQHandler+0x22c>
 800554c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d106      	bne.n	8005566 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800555c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 80d1 	beq.w	8005708 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00b      	beq.n	800558a <HAL_UART_IRQHandler+0xae>
 8005572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	f043 0201 	orr.w	r2, r3, #1
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800558a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800558e:	f003 0304 	and.w	r3, r3, #4
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00b      	beq.n	80055ae <HAL_UART_IRQHandler+0xd2>
 8005596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d005      	beq.n	80055ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f043 0202 	orr.w	r2, r3, #2
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00b      	beq.n	80055d2 <HAL_UART_IRQHandler+0xf6>
 80055ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d005      	beq.n	80055d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f043 0204 	orr.w	r2, r3, #4
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d011      	beq.n	8005602 <HAL_UART_IRQHandler+0x126>
 80055de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d105      	bne.n	80055f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	f043 0208 	orr.w	r2, r3, #8
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 81ed 	beq.w	80059e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800560c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005610:	f003 0320 	and.w	r3, r3, #32
 8005614:	2b00      	cmp	r3, #0
 8005616:	d008      	beq.n	800562a <HAL_UART_IRQHandler+0x14e>
 8005618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800561c:	f003 0320 	and.w	r3, r3, #32
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fb54 	bl	8005cd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005634:	2b40      	cmp	r3, #64	; 0x40
 8005636:	bf0c      	ite	eq
 8005638:	2301      	moveq	r3, #1
 800563a:	2300      	movne	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d103      	bne.n	8005656 <HAL_UART_IRQHandler+0x17a>
 800564e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005652:	2b00      	cmp	r3, #0
 8005654:	d04f      	beq.n	80056f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fa5c 	bl	8005b14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005666:	2b40      	cmp	r3, #64	; 0x40
 8005668:	d141      	bne.n	80056ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3314      	adds	r3, #20
 8005670:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005680:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005688:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3314      	adds	r3, #20
 8005692:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005696:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800569a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1d9      	bne.n	800566a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d013      	beq.n	80056e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	4a7d      	ldr	r2, [pc, #500]	; (80058b8 <HAL_UART_IRQHandler+0x3dc>)
 80056c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fc f958 	bl	8001980 <HAL_DMA_Abort_IT>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d016      	beq.n	8005704 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056e0:	4610      	mov	r0, r2
 80056e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e4:	e00e      	b.n	8005704 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f990 	bl	8005a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ec:	e00a      	b.n	8005704 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f98c 	bl	8005a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f4:	e006      	b.n	8005704 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f988 	bl	8005a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005702:	e170      	b.n	80059e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005704:	bf00      	nop
    return;
 8005706:	e16e      	b.n	80059e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	2b01      	cmp	r3, #1
 800570e:	f040 814a 	bne.w	80059a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005716:	f003 0310 	and.w	r3, r3, #16
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 8143 	beq.w	80059a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005724:	f003 0310 	and.w	r3, r3, #16
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 813c 	beq.w	80059a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800572e:	2300      	movs	r3, #0
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60bb      	str	r3, [r7, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	60bb      	str	r3, [r7, #8]
 8005742:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574e:	2b40      	cmp	r3, #64	; 0x40
 8005750:	f040 80b4 	bne.w	80058bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005760:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 8140 	beq.w	80059ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800576e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005772:	429a      	cmp	r2, r3
 8005774:	f080 8139 	bcs.w	80059ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800577e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800578a:	f000 8088 	beq.w	800589e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	330c      	adds	r3, #12
 8005794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	330c      	adds	r3, #12
 80057b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80057ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1d9      	bne.n	800578e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3314      	adds	r3, #20
 80057e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3314      	adds	r3, #20
 80057fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005802:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005806:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800580a:	e841 2300 	strex	r3, r2, [r1]
 800580e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1e1      	bne.n	80057da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3314      	adds	r3, #20
 800581c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005820:	e853 3f00 	ldrex	r3, [r3]
 8005824:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800582c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3314      	adds	r3, #20
 8005836:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800583a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800583c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005840:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e3      	bne.n	8005816 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2220      	movs	r2, #32
 8005852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	330c      	adds	r3, #12
 8005862:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005866:	e853 3f00 	ldrex	r3, [r3]
 800586a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800586c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800586e:	f023 0310 	bic.w	r3, r3, #16
 8005872:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	330c      	adds	r3, #12
 800587c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005880:	65ba      	str	r2, [r7, #88]	; 0x58
 8005882:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005886:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800588e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e3      	bne.n	800585c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005898:	4618      	mov	r0, r3
 800589a:	f7fc f801 	bl	80018a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f8b6 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058b4:	e099      	b.n	80059ea <HAL_UART_IRQHandler+0x50e>
 80058b6:	bf00      	nop
 80058b8:	08005bdb 	.word	0x08005bdb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 808b 	beq.w	80059ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80058d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 8086 	beq.w	80059ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	330c      	adds	r3, #12
 80058e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ec:	e853 3f00 	ldrex	r3, [r3]
 80058f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	330c      	adds	r3, #12
 8005902:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005906:	647a      	str	r2, [r7, #68]	; 0x44
 8005908:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800590c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800590e:	e841 2300 	strex	r3, r2, [r1]
 8005912:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1e3      	bne.n	80058e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3314      	adds	r3, #20
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	e853 3f00 	ldrex	r3, [r3]
 8005928:	623b      	str	r3, [r7, #32]
   return(result);
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	f023 0301 	bic.w	r3, r3, #1
 8005930:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3314      	adds	r3, #20
 800593a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800593e:	633a      	str	r2, [r7, #48]	; 0x30
 8005940:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005942:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005946:	e841 2300 	strex	r3, r2, [r1]
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1e3      	bne.n	800591a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	330c      	adds	r3, #12
 8005966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0310 	bic.w	r3, r3, #16
 8005976:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	330c      	adds	r3, #12
 8005980:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005984:	61fa      	str	r2, [r7, #28]
 8005986:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	69b9      	ldr	r1, [r7, #24]
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	e841 2300 	strex	r3, r2, [r1]
 8005990:	617b      	str	r3, [r7, #20]
   return(result);
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e3      	bne.n	8005960 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f83e 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059a4:	e023      	b.n	80059ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d009      	beq.n	80059c6 <HAL_UART_IRQHandler+0x4ea>
 80059b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f91f 	bl	8005c02 <UART_Transmit_IT>
    return;
 80059c4:	e014      	b.n	80059f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00e      	beq.n	80059f0 <HAL_UART_IRQHandler+0x514>
 80059d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d008      	beq.n	80059f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f95f 	bl	8005ca2 <UART_EndTransmit_IT>
    return;
 80059e4:	e004      	b.n	80059f0 <HAL_UART_IRQHandler+0x514>
    return;
 80059e6:	bf00      	nop
 80059e8:	e002      	b.n	80059f0 <HAL_UART_IRQHandler+0x514>
      return;
 80059ea:	bf00      	nop
 80059ec:	e000      	b.n	80059f0 <HAL_UART_IRQHandler+0x514>
      return;
 80059ee:	bf00      	nop
  }
}
 80059f0:	37e8      	adds	r7, #232	; 0xe8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop

080059f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b090      	sub	sp, #64	; 0x40
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	603b      	str	r3, [r7, #0]
 8005a44:	4613      	mov	r3, r2
 8005a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a48:	e050      	b.n	8005aec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a50:	d04c      	beq.n	8005aec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d007      	beq.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a58:	f7fb fe10 	bl	800167c <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d241      	bcs.n	8005aec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	330c      	adds	r3, #12
 8005a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	330c      	adds	r3, #12
 8005a86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a88:	637a      	str	r2, [r7, #52]	; 0x34
 8005a8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e5      	bne.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3314      	adds	r3, #20
 8005aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	f023 0301 	bic.w	r3, r3, #1
 8005ab2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3314      	adds	r3, #20
 8005aba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005abc:	623a      	str	r2, [r7, #32]
 8005abe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	69f9      	ldr	r1, [r7, #28]
 8005ac2:	6a3a      	ldr	r2, [r7, #32]
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e5      	bne.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e00f      	b.n	8005b0c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	4013      	ands	r3, r2
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	bf0c      	ite	eq
 8005afc:	2301      	moveq	r3, #1
 8005afe:	2300      	movne	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	79fb      	ldrb	r3, [r7, #7]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d09f      	beq.n	8005a4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3740      	adds	r7, #64	; 0x40
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b095      	sub	sp, #84	; 0x54
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	330c      	adds	r3, #12
 8005b22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	330c      	adds	r3, #12
 8005b3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b3c:	643a      	str	r2, [r7, #64]	; 0x40
 8005b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e5      	bne.n	8005b1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3314      	adds	r3, #20
 8005b56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	e853 3f00 	ldrex	r3, [r3]
 8005b5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f023 0301 	bic.w	r3, r3, #1
 8005b66:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3314      	adds	r3, #20
 8005b6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b78:	e841 2300 	strex	r3, r2, [r1]
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e5      	bne.n	8005b50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d119      	bne.n	8005bc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	330c      	adds	r3, #12
 8005b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f023 0310 	bic.w	r3, r3, #16
 8005ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	330c      	adds	r3, #12
 8005baa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bac:	61ba      	str	r2, [r7, #24]
 8005bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	6979      	ldr	r1, [r7, #20]
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e5      	bne.n	8005b8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bce:	bf00      	nop
 8005bd0:	3754      	adds	r7, #84	; 0x54
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f7ff ff09 	bl	8005a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bfa:	bf00      	nop
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b085      	sub	sp, #20
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b21      	cmp	r3, #33	; 0x21
 8005c14:	d13e      	bne.n	8005c94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1e:	d114      	bne.n	8005c4a <UART_Transmit_IT+0x48>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d110      	bne.n	8005c4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	1c9a      	adds	r2, r3, #2
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	621a      	str	r2, [r3, #32]
 8005c48:	e008      	b.n	8005c5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	1c59      	adds	r1, r3, #1
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6211      	str	r1, [r2, #32]
 8005c54:	781a      	ldrb	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10f      	bne.n	8005c90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	e000      	b.n	8005c96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
  }
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff fe98 	bl	80059f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b08c      	sub	sp, #48	; 0x30
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b22      	cmp	r3, #34	; 0x22
 8005ce4:	f040 80ab 	bne.w	8005e3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf0:	d117      	bne.n	8005d22 <UART_Receive_IT+0x50>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d113      	bne.n	8005d22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	1c9a      	adds	r2, r3, #2
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	629a      	str	r2, [r3, #40]	; 0x28
 8005d20:	e026      	b.n	8005d70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d34:	d007      	beq.n	8005d46 <UART_Receive_IT+0x74>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10a      	bne.n	8005d54 <UART_Receive_IT+0x82>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	e008      	b.n	8005d66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d15a      	bne.n	8005e3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68da      	ldr	r2, [r3, #12]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0220 	bic.w	r2, r2, #32
 8005d92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005da2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695a      	ldr	r2, [r3, #20]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0201 	bic.w	r2, r2, #1
 8005db2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d135      	bne.n	8005e30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	330c      	adds	r3, #12
 8005dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	e853 3f00 	ldrex	r3, [r3]
 8005dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f023 0310 	bic.w	r3, r3, #16
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	330c      	adds	r3, #12
 8005de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dea:	623a      	str	r2, [r7, #32]
 8005dec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dee:	69f9      	ldr	r1, [r7, #28]
 8005df0:	6a3a      	ldr	r2, [r7, #32]
 8005df2:	e841 2300 	strex	r3, r2, [r1]
 8005df6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1e5      	bne.n	8005dca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	2b10      	cmp	r3, #16
 8005e0a:	d10a      	bne.n	8005e22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff fdf9 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
 8005e2e:	e002      	b.n	8005e36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7fa fdfb 	bl	8000a2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	e002      	b.n	8005e40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	e000      	b.n	8005e40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e3e:	2302      	movs	r3, #2
  }
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3730      	adds	r7, #48	; 0x30
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e4c:	b0c0      	sub	sp, #256	; 0x100
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e64:	68d9      	ldr	r1, [r3, #12]
 8005e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	ea40 0301 	orr.w	r3, r0, r1
 8005e70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	431a      	orrs	r2, r3
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ea0:	f021 010c 	bic.w	r1, r1, #12
 8005ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005eae:	430b      	orrs	r3, r1
 8005eb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec2:	6999      	ldr	r1, [r3, #24]
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	ea40 0301 	orr.w	r3, r0, r1
 8005ece:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	4b8f      	ldr	r3, [pc, #572]	; (8006114 <UART_SetConfig+0x2cc>)
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d005      	beq.n	8005ee8 <UART_SetConfig+0xa0>
 8005edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b8d      	ldr	r3, [pc, #564]	; (8006118 <UART_SetConfig+0x2d0>)
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d104      	bne.n	8005ef2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ee8:	f7fe fc46 	bl	8004778 <HAL_RCC_GetPCLK2Freq>
 8005eec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ef0:	e003      	b.n	8005efa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ef2:	f7fe fc2d 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8005ef6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f04:	f040 810c 	bne.w	8006120 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	462b      	mov	r3, r5
 8005f1e:	1891      	adds	r1, r2, r2
 8005f20:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f22:	415b      	adcs	r3, r3
 8005f24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f2a:	4621      	mov	r1, r4
 8005f2c:	eb12 0801 	adds.w	r8, r2, r1
 8005f30:	4629      	mov	r1, r5
 8005f32:	eb43 0901 	adc.w	r9, r3, r1
 8005f36:	f04f 0200 	mov.w	r2, #0
 8005f3a:	f04f 0300 	mov.w	r3, #0
 8005f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f4a:	4690      	mov	r8, r2
 8005f4c:	4699      	mov	r9, r3
 8005f4e:	4623      	mov	r3, r4
 8005f50:	eb18 0303 	adds.w	r3, r8, r3
 8005f54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f58:	462b      	mov	r3, r5
 8005f5a:	eb49 0303 	adc.w	r3, r9, r3
 8005f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f76:	460b      	mov	r3, r1
 8005f78:	18db      	adds	r3, r3, r3
 8005f7a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	eb42 0303 	adc.w	r3, r2, r3
 8005f82:	657b      	str	r3, [r7, #84]	; 0x54
 8005f84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f8c:	f7fa f978 	bl	8000280 <__aeabi_uldivmod>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4b61      	ldr	r3, [pc, #388]	; (800611c <UART_SetConfig+0x2d4>)
 8005f96:	fba3 2302 	umull	r2, r3, r3, r2
 8005f9a:	095b      	lsrs	r3, r3, #5
 8005f9c:	011c      	lsls	r4, r3, #4
 8005f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fa8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005fac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005fb0:	4642      	mov	r2, r8
 8005fb2:	464b      	mov	r3, r9
 8005fb4:	1891      	adds	r1, r2, r2
 8005fb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005fb8:	415b      	adcs	r3, r3
 8005fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005fc0:	4641      	mov	r1, r8
 8005fc2:	eb12 0a01 	adds.w	sl, r2, r1
 8005fc6:	4649      	mov	r1, r9
 8005fc8:	eb43 0b01 	adc.w	fp, r3, r1
 8005fcc:	f04f 0200 	mov.w	r2, #0
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fe0:	4692      	mov	sl, r2
 8005fe2:	469b      	mov	fp, r3
 8005fe4:	4643      	mov	r3, r8
 8005fe6:	eb1a 0303 	adds.w	r3, sl, r3
 8005fea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fee:	464b      	mov	r3, r9
 8005ff0:	eb4b 0303 	adc.w	r3, fp, r3
 8005ff4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006004:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006008:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800600c:	460b      	mov	r3, r1
 800600e:	18db      	adds	r3, r3, r3
 8006010:	643b      	str	r3, [r7, #64]	; 0x40
 8006012:	4613      	mov	r3, r2
 8006014:	eb42 0303 	adc.w	r3, r2, r3
 8006018:	647b      	str	r3, [r7, #68]	; 0x44
 800601a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800601e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006022:	f7fa f92d 	bl	8000280 <__aeabi_uldivmod>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4611      	mov	r1, r2
 800602c:	4b3b      	ldr	r3, [pc, #236]	; (800611c <UART_SetConfig+0x2d4>)
 800602e:	fba3 2301 	umull	r2, r3, r3, r1
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	2264      	movs	r2, #100	; 0x64
 8006036:	fb02 f303 	mul.w	r3, r2, r3
 800603a:	1acb      	subs	r3, r1, r3
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006042:	4b36      	ldr	r3, [pc, #216]	; (800611c <UART_SetConfig+0x2d4>)
 8006044:	fba3 2302 	umull	r2, r3, r3, r2
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	005b      	lsls	r3, r3, #1
 800604c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006050:	441c      	add	r4, r3
 8006052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006056:	2200      	movs	r2, #0
 8006058:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800605c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006060:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006064:	4642      	mov	r2, r8
 8006066:	464b      	mov	r3, r9
 8006068:	1891      	adds	r1, r2, r2
 800606a:	63b9      	str	r1, [r7, #56]	; 0x38
 800606c:	415b      	adcs	r3, r3
 800606e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006070:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006074:	4641      	mov	r1, r8
 8006076:	1851      	adds	r1, r2, r1
 8006078:	6339      	str	r1, [r7, #48]	; 0x30
 800607a:	4649      	mov	r1, r9
 800607c:	414b      	adcs	r3, r1
 800607e:	637b      	str	r3, [r7, #52]	; 0x34
 8006080:	f04f 0200 	mov.w	r2, #0
 8006084:	f04f 0300 	mov.w	r3, #0
 8006088:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800608c:	4659      	mov	r1, fp
 800608e:	00cb      	lsls	r3, r1, #3
 8006090:	4651      	mov	r1, sl
 8006092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006096:	4651      	mov	r1, sl
 8006098:	00ca      	lsls	r2, r1, #3
 800609a:	4610      	mov	r0, r2
 800609c:	4619      	mov	r1, r3
 800609e:	4603      	mov	r3, r0
 80060a0:	4642      	mov	r2, r8
 80060a2:	189b      	adds	r3, r3, r2
 80060a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060a8:	464b      	mov	r3, r9
 80060aa:	460a      	mov	r2, r1
 80060ac:	eb42 0303 	adc.w	r3, r2, r3
 80060b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80060c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80060c8:	460b      	mov	r3, r1
 80060ca:	18db      	adds	r3, r3, r3
 80060cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ce:	4613      	mov	r3, r2
 80060d0:	eb42 0303 	adc.w	r3, r2, r3
 80060d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80060de:	f7fa f8cf 	bl	8000280 <__aeabi_uldivmod>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4b0d      	ldr	r3, [pc, #52]	; (800611c <UART_SetConfig+0x2d4>)
 80060e8:	fba3 1302 	umull	r1, r3, r3, r2
 80060ec:	095b      	lsrs	r3, r3, #5
 80060ee:	2164      	movs	r1, #100	; 0x64
 80060f0:	fb01 f303 	mul.w	r3, r1, r3
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	3332      	adds	r3, #50	; 0x32
 80060fa:	4a08      	ldr	r2, [pc, #32]	; (800611c <UART_SetConfig+0x2d4>)
 80060fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006100:	095b      	lsrs	r3, r3, #5
 8006102:	f003 0207 	and.w	r2, r3, #7
 8006106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4422      	add	r2, r4
 800610e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006110:	e105      	b.n	800631e <UART_SetConfig+0x4d6>
 8006112:	bf00      	nop
 8006114:	40011000 	.word	0x40011000
 8006118:	40011400 	.word	0x40011400
 800611c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006124:	2200      	movs	r2, #0
 8006126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800612a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800612e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006132:	4642      	mov	r2, r8
 8006134:	464b      	mov	r3, r9
 8006136:	1891      	adds	r1, r2, r2
 8006138:	6239      	str	r1, [r7, #32]
 800613a:	415b      	adcs	r3, r3
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
 800613e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006142:	4641      	mov	r1, r8
 8006144:	1854      	adds	r4, r2, r1
 8006146:	4649      	mov	r1, r9
 8006148:	eb43 0501 	adc.w	r5, r3, r1
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	f04f 0300 	mov.w	r3, #0
 8006154:	00eb      	lsls	r3, r5, #3
 8006156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800615a:	00e2      	lsls	r2, r4, #3
 800615c:	4614      	mov	r4, r2
 800615e:	461d      	mov	r5, r3
 8006160:	4643      	mov	r3, r8
 8006162:	18e3      	adds	r3, r4, r3
 8006164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006168:	464b      	mov	r3, r9
 800616a:	eb45 0303 	adc.w	r3, r5, r3
 800616e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800617e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006182:	f04f 0200 	mov.w	r2, #0
 8006186:	f04f 0300 	mov.w	r3, #0
 800618a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800618e:	4629      	mov	r1, r5
 8006190:	008b      	lsls	r3, r1, #2
 8006192:	4621      	mov	r1, r4
 8006194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006198:	4621      	mov	r1, r4
 800619a:	008a      	lsls	r2, r1, #2
 800619c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061a0:	f7fa f86e 	bl	8000280 <__aeabi_uldivmod>
 80061a4:	4602      	mov	r2, r0
 80061a6:	460b      	mov	r3, r1
 80061a8:	4b60      	ldr	r3, [pc, #384]	; (800632c <UART_SetConfig+0x4e4>)
 80061aa:	fba3 2302 	umull	r2, r3, r3, r2
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	011c      	lsls	r4, r3, #4
 80061b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80061c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80061c4:	4642      	mov	r2, r8
 80061c6:	464b      	mov	r3, r9
 80061c8:	1891      	adds	r1, r2, r2
 80061ca:	61b9      	str	r1, [r7, #24]
 80061cc:	415b      	adcs	r3, r3
 80061ce:	61fb      	str	r3, [r7, #28]
 80061d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061d4:	4641      	mov	r1, r8
 80061d6:	1851      	adds	r1, r2, r1
 80061d8:	6139      	str	r1, [r7, #16]
 80061da:	4649      	mov	r1, r9
 80061dc:	414b      	adcs	r3, r1
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061ec:	4659      	mov	r1, fp
 80061ee:	00cb      	lsls	r3, r1, #3
 80061f0:	4651      	mov	r1, sl
 80061f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061f6:	4651      	mov	r1, sl
 80061f8:	00ca      	lsls	r2, r1, #3
 80061fa:	4610      	mov	r0, r2
 80061fc:	4619      	mov	r1, r3
 80061fe:	4603      	mov	r3, r0
 8006200:	4642      	mov	r2, r8
 8006202:	189b      	adds	r3, r3, r2
 8006204:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006208:	464b      	mov	r3, r9
 800620a:	460a      	mov	r2, r1
 800620c:	eb42 0303 	adc.w	r3, r2, r3
 8006210:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	67bb      	str	r3, [r7, #120]	; 0x78
 800621e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	f04f 0300 	mov.w	r3, #0
 8006228:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800622c:	4649      	mov	r1, r9
 800622e:	008b      	lsls	r3, r1, #2
 8006230:	4641      	mov	r1, r8
 8006232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006236:	4641      	mov	r1, r8
 8006238:	008a      	lsls	r2, r1, #2
 800623a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800623e:	f7fa f81f 	bl	8000280 <__aeabi_uldivmod>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4b39      	ldr	r3, [pc, #228]	; (800632c <UART_SetConfig+0x4e4>)
 8006248:	fba3 1302 	umull	r1, r3, r3, r2
 800624c:	095b      	lsrs	r3, r3, #5
 800624e:	2164      	movs	r1, #100	; 0x64
 8006250:	fb01 f303 	mul.w	r3, r1, r3
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	3332      	adds	r3, #50	; 0x32
 800625a:	4a34      	ldr	r2, [pc, #208]	; (800632c <UART_SetConfig+0x4e4>)
 800625c:	fba2 2303 	umull	r2, r3, r2, r3
 8006260:	095b      	lsrs	r3, r3, #5
 8006262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006266:	441c      	add	r4, r3
 8006268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800626c:	2200      	movs	r2, #0
 800626e:	673b      	str	r3, [r7, #112]	; 0x70
 8006270:	677a      	str	r2, [r7, #116]	; 0x74
 8006272:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006276:	4642      	mov	r2, r8
 8006278:	464b      	mov	r3, r9
 800627a:	1891      	adds	r1, r2, r2
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	415b      	adcs	r3, r3
 8006280:	60fb      	str	r3, [r7, #12]
 8006282:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006286:	4641      	mov	r1, r8
 8006288:	1851      	adds	r1, r2, r1
 800628a:	6039      	str	r1, [r7, #0]
 800628c:	4649      	mov	r1, r9
 800628e:	414b      	adcs	r3, r1
 8006290:	607b      	str	r3, [r7, #4]
 8006292:	f04f 0200 	mov.w	r2, #0
 8006296:	f04f 0300 	mov.w	r3, #0
 800629a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800629e:	4659      	mov	r1, fp
 80062a0:	00cb      	lsls	r3, r1, #3
 80062a2:	4651      	mov	r1, sl
 80062a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062a8:	4651      	mov	r1, sl
 80062aa:	00ca      	lsls	r2, r1, #3
 80062ac:	4610      	mov	r0, r2
 80062ae:	4619      	mov	r1, r3
 80062b0:	4603      	mov	r3, r0
 80062b2:	4642      	mov	r2, r8
 80062b4:	189b      	adds	r3, r3, r2
 80062b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80062b8:	464b      	mov	r3, r9
 80062ba:	460a      	mov	r2, r1
 80062bc:	eb42 0303 	adc.w	r3, r2, r3
 80062c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	663b      	str	r3, [r7, #96]	; 0x60
 80062cc:	667a      	str	r2, [r7, #100]	; 0x64
 80062ce:	f04f 0200 	mov.w	r2, #0
 80062d2:	f04f 0300 	mov.w	r3, #0
 80062d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80062da:	4649      	mov	r1, r9
 80062dc:	008b      	lsls	r3, r1, #2
 80062de:	4641      	mov	r1, r8
 80062e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062e4:	4641      	mov	r1, r8
 80062e6:	008a      	lsls	r2, r1, #2
 80062e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80062ec:	f7f9 ffc8 	bl	8000280 <__aeabi_uldivmod>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4b0d      	ldr	r3, [pc, #52]	; (800632c <UART_SetConfig+0x4e4>)
 80062f6:	fba3 1302 	umull	r1, r3, r3, r2
 80062fa:	095b      	lsrs	r3, r3, #5
 80062fc:	2164      	movs	r1, #100	; 0x64
 80062fe:	fb01 f303 	mul.w	r3, r1, r3
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	011b      	lsls	r3, r3, #4
 8006306:	3332      	adds	r3, #50	; 0x32
 8006308:	4a08      	ldr	r2, [pc, #32]	; (800632c <UART_SetConfig+0x4e4>)
 800630a:	fba2 2303 	umull	r2, r3, r2, r3
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	f003 020f 	and.w	r2, r3, #15
 8006314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4422      	add	r2, r4
 800631c:	609a      	str	r2, [r3, #8]
}
 800631e:	bf00      	nop
 8006320:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006324:	46bd      	mov	sp, r7
 8006326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800632a:	bf00      	nop
 800632c:	51eb851f 	.word	0x51eb851f

08006330 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	4603      	mov	r3, r0
 8006338:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800633a:	2300      	movs	r3, #0
 800633c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800633e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006342:	2b84      	cmp	r3, #132	; 0x84
 8006344:	d005      	beq.n	8006352 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006346:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4413      	add	r3, r2
 800634e:	3303      	adds	r3, #3
 8006350:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006352:	68fb      	ldr	r3, [r7, #12]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006364:	f000 fc04 	bl	8006b70 <vTaskStartScheduler>
  
  return osOK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	bd80      	pop	{r7, pc}

0800636e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800636e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006370:	b089      	sub	sp, #36	; 0x24
 8006372:	af04      	add	r7, sp, #16
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d020      	beq.n	80063c2 <osThreadCreate+0x54>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d01c      	beq.n	80063c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685c      	ldr	r4, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681d      	ldr	r5, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691e      	ldr	r6, [r3, #16]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff ffc8 	bl	8006330 <makeFreeRtosPriority>
 80063a0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063aa:	9202      	str	r2, [sp, #8]
 80063ac:	9301      	str	r3, [sp, #4]
 80063ae:	9100      	str	r1, [sp, #0]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	4632      	mov	r2, r6
 80063b4:	4629      	mov	r1, r5
 80063b6:	4620      	mov	r0, r4
 80063b8:	f000 f8ed 	bl	8006596 <xTaskCreateStatic>
 80063bc:	4603      	mov	r3, r0
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	e01c      	b.n	80063fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685c      	ldr	r4, [r3, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063ce:	b29e      	uxth	r6, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7ff ffaa 	bl	8006330 <makeFreeRtosPriority>
 80063dc:	4602      	mov	r2, r0
 80063de:	f107 030c 	add.w	r3, r7, #12
 80063e2:	9301      	str	r3, [sp, #4]
 80063e4:	9200      	str	r2, [sp, #0]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	4632      	mov	r2, r6
 80063ea:	4629      	mov	r1, r5
 80063ec:	4620      	mov	r0, r4
 80063ee:	f000 f92f 	bl	8006650 <xTaskCreate>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d001      	beq.n	80063fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80063f8:	2300      	movs	r3, #0
 80063fa:	e000      	b.n	80063fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80063fc:	68fb      	ldr	r3, [r7, #12]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006406 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <osDelay+0x16>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	e000      	b.n	800641e <osDelay+0x18>
 800641c:	2301      	movs	r3, #1
 800641e:	4618      	mov	r0, r3
 8006420:	f000 fb72 	bl	8006b08 <vTaskDelay>
  
  return osOK;
 8006424:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f103 0208 	add.w	r2, r3, #8
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006446:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f103 0208 	add.w	r2, r3, #8
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f103 0208 	add.w	r2, r3, #8
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	689a      	ldr	r2, [r3, #8]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	601a      	str	r2, [r3, #0]
}
 80064c4:	bf00      	nop
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064e6:	d103      	bne.n	80064f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	e00c      	b.n	800650a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3308      	adds	r3, #8
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	e002      	b.n	80064fe <vListInsert+0x2e>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	429a      	cmp	r2, r3
 8006508:	d2f6      	bcs.n	80064f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	601a      	str	r2, [r3, #0]
}
 8006536:	bf00      	nop
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006542:	b480      	push	{r7}
 8006544:	b085      	sub	sp, #20
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	6892      	ldr	r2, [r2, #8]
 8006558:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6852      	ldr	r2, [r2, #4]
 8006562:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	429a      	cmp	r2, r3
 800656c:	d103      	bne.n	8006576 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	1e5a      	subs	r2, r3, #1
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006596:	b580      	push	{r7, lr}
 8006598:	b08e      	sub	sp, #56	; 0x38
 800659a:	af04      	add	r7, sp, #16
 800659c:	60f8      	str	r0, [r7, #12]
 800659e:	60b9      	str	r1, [r7, #8]
 80065a0:	607a      	str	r2, [r7, #4]
 80065a2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10a      	bne.n	80065c0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80065bc:	bf00      	nop
 80065be:	e7fe      	b.n	80065be <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80065c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10a      	bne.n	80065dc <xTaskCreateStatic+0x46>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	61fb      	str	r3, [r7, #28]
}
 80065d8:	bf00      	nop
 80065da:	e7fe      	b.n	80065da <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80065dc:	23b4      	movs	r3, #180	; 0xb4
 80065de:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	2bb4      	cmp	r3, #180	; 0xb4
 80065e4:	d00a      	beq.n	80065fc <xTaskCreateStatic+0x66>
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	61bb      	str	r3, [r7, #24]
}
 80065f8:	bf00      	nop
 80065fa:	e7fe      	b.n	80065fa <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80065fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80065fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006600:	2b00      	cmp	r3, #0
 8006602:	d01e      	beq.n	8006642 <xTaskCreateStatic+0xac>
 8006604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006606:	2b00      	cmp	r3, #0
 8006608:	d01b      	beq.n	8006642 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800660a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006612:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	2202      	movs	r2, #2
 8006618:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800661c:	2300      	movs	r3, #0
 800661e:	9303      	str	r3, [sp, #12]
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	9302      	str	r3, [sp, #8]
 8006624:	f107 0314 	add.w	r3, r7, #20
 8006628:	9301      	str	r3, [sp, #4]
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	68b9      	ldr	r1, [r7, #8]
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 f851 	bl	80066dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800663a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800663c:	f000 f8ec 	bl	8006818 <prvAddNewTaskToReadyList>
 8006640:	e001      	b.n	8006646 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006642:	2300      	movs	r3, #0
 8006644:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006646:	697b      	ldr	r3, [r7, #20]
	}
 8006648:	4618      	mov	r0, r3
 800664a:	3728      	adds	r7, #40	; 0x28
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08c      	sub	sp, #48	; 0x30
 8006654:	af04      	add	r7, sp, #16
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	4613      	mov	r3, r2
 800665e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006660:	88fb      	ldrh	r3, [r7, #6]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4618      	mov	r0, r3
 8006666:	f001 f80f 	bl	8007688 <pvPortMalloc>
 800666a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00e      	beq.n	8006690 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006672:	20b4      	movs	r0, #180	; 0xb4
 8006674:	f001 f808 	bl	8007688 <pvPortMalloc>
 8006678:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	631a      	str	r2, [r3, #48]	; 0x30
 8006686:	e005      	b.n	8006694 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006688:	6978      	ldr	r0, [r7, #20]
 800668a:	f001 f8c9 	bl	8007820 <vPortFree>
 800668e:	e001      	b.n	8006694 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006690:	2300      	movs	r3, #0
 8006692:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d017      	beq.n	80066ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066a2:	88fa      	ldrh	r2, [r7, #6]
 80066a4:	2300      	movs	r3, #0
 80066a6:	9303      	str	r3, [sp, #12]
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	9302      	str	r3, [sp, #8]
 80066ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ae:	9301      	str	r3, [sp, #4]
 80066b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	68b9      	ldr	r1, [r7, #8]
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 f80f 	bl	80066dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066be:	69f8      	ldr	r0, [r7, #28]
 80066c0:	f000 f8aa 	bl	8006818 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066c4:	2301      	movs	r3, #1
 80066c6:	61bb      	str	r3, [r7, #24]
 80066c8:	e002      	b.n	80066d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066d0:	69bb      	ldr	r3, [r7, #24]
	}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3720      	adds	r7, #32
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
	...

080066dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b088      	sub	sp, #32
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80066ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80066f4:	3b01      	subs	r3, #1
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	f023 0307 	bic.w	r3, r3, #7
 8006702:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <prvInitialiseNewTask+0x48>
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	617b      	str	r3, [r7, #20]
}
 8006720:	bf00      	nop
 8006722:	e7fe      	b.n	8006722 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d01f      	beq.n	800676a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800672a:	2300      	movs	r3, #0
 800672c:	61fb      	str	r3, [r7, #28]
 800672e:	e012      	b.n	8006756 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	4413      	add	r3, r2
 8006736:	7819      	ldrb	r1, [r3, #0]
 8006738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	4413      	add	r3, r2
 800673e:	3334      	adds	r3, #52	; 0x34
 8006740:	460a      	mov	r2, r1
 8006742:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	4413      	add	r3, r2
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d006      	beq.n	800675e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	3301      	adds	r3, #1
 8006754:	61fb      	str	r3, [r7, #28]
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	2b0f      	cmp	r3, #15
 800675a:	d9e9      	bls.n	8006730 <prvInitialiseNewTask+0x54>
 800675c:	e000      	b.n	8006760 <prvInitialiseNewTask+0x84>
			{
				break;
 800675e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006762:	2200      	movs	r2, #0
 8006764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006768:	e003      	b.n	8006772 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006774:	2b06      	cmp	r3, #6
 8006776:	d901      	bls.n	800677c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006778:	2306      	movs	r3, #6
 800677a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006780:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006786:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	2200      	movs	r2, #0
 800678c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	3304      	adds	r3, #4
 8006792:	4618      	mov	r0, r3
 8006794:	f7ff fe6b 	bl	800646e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679a:	3318      	adds	r3, #24
 800679c:	4618      	mov	r0, r3
 800679e:	f7ff fe66 	bl	800646e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	f1c3 0207 	rsb	r2, r3, #7
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80067c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ca:	334c      	adds	r3, #76	; 0x4c
 80067cc:	2260      	movs	r2, #96	; 0x60
 80067ce:	2100      	movs	r1, #0
 80067d0:	4618      	mov	r0, r3
 80067d2:	f001 fa66 	bl	8007ca2 <memset>
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	4a0c      	ldr	r2, [pc, #48]	; (800680c <prvInitialiseNewTask+0x130>)
 80067da:	651a      	str	r2, [r3, #80]	; 0x50
 80067dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067de:	4a0c      	ldr	r2, [pc, #48]	; (8006810 <prvInitialiseNewTask+0x134>)
 80067e0:	655a      	str	r2, [r3, #84]	; 0x54
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	4a0b      	ldr	r2, [pc, #44]	; (8006814 <prvInitialiseNewTask+0x138>)
 80067e6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	68f9      	ldr	r1, [r7, #12]
 80067ec:	69b8      	ldr	r0, [r7, #24]
 80067ee:	f000 fd3d 	bl	800726c <pxPortInitialiseStack>
 80067f2:	4602      	mov	r2, r0
 80067f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80067f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d002      	beq.n	8006804 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80067fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006802:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006804:	bf00      	nop
 8006806:	3720      	adds	r7, #32
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	08008eac 	.word	0x08008eac
 8006810:	08008ecc 	.word	0x08008ecc
 8006814:	08008e8c 	.word	0x08008e8c

08006818 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006820:	f000 fe50 	bl	80074c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006824:	4b2a      	ldr	r3, [pc, #168]	; (80068d0 <prvAddNewTaskToReadyList+0xb8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3301      	adds	r3, #1
 800682a:	4a29      	ldr	r2, [pc, #164]	; (80068d0 <prvAddNewTaskToReadyList+0xb8>)
 800682c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800682e:	4b29      	ldr	r3, [pc, #164]	; (80068d4 <prvAddNewTaskToReadyList+0xbc>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d109      	bne.n	800684a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006836:	4a27      	ldr	r2, [pc, #156]	; (80068d4 <prvAddNewTaskToReadyList+0xbc>)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800683c:	4b24      	ldr	r3, [pc, #144]	; (80068d0 <prvAddNewTaskToReadyList+0xb8>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d110      	bne.n	8006866 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006844:	f000 fbea 	bl	800701c <prvInitialiseTaskLists>
 8006848:	e00d      	b.n	8006866 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800684a:	4b23      	ldr	r3, [pc, #140]	; (80068d8 <prvAddNewTaskToReadyList+0xc0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d109      	bne.n	8006866 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006852:	4b20      	ldr	r3, [pc, #128]	; (80068d4 <prvAddNewTaskToReadyList+0xbc>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	429a      	cmp	r2, r3
 800685e:	d802      	bhi.n	8006866 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006860:	4a1c      	ldr	r2, [pc, #112]	; (80068d4 <prvAddNewTaskToReadyList+0xbc>)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006866:	4b1d      	ldr	r3, [pc, #116]	; (80068dc <prvAddNewTaskToReadyList+0xc4>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3301      	adds	r3, #1
 800686c:	4a1b      	ldr	r2, [pc, #108]	; (80068dc <prvAddNewTaskToReadyList+0xc4>)
 800686e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006874:	2201      	movs	r2, #1
 8006876:	409a      	lsls	r2, r3
 8006878:	4b19      	ldr	r3, [pc, #100]	; (80068e0 <prvAddNewTaskToReadyList+0xc8>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4313      	orrs	r3, r2
 800687e:	4a18      	ldr	r2, [pc, #96]	; (80068e0 <prvAddNewTaskToReadyList+0xc8>)
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006886:	4613      	mov	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4a15      	ldr	r2, [pc, #84]	; (80068e4 <prvAddNewTaskToReadyList+0xcc>)
 8006890:	441a      	add	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	3304      	adds	r3, #4
 8006896:	4619      	mov	r1, r3
 8006898:	4610      	mov	r0, r2
 800689a:	f7ff fdf5 	bl	8006488 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800689e:	f000 fe41 	bl	8007524 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068a2:	4b0d      	ldr	r3, [pc, #52]	; (80068d8 <prvAddNewTaskToReadyList+0xc0>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00e      	beq.n	80068c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068aa:	4b0a      	ldr	r3, [pc, #40]	; (80068d4 <prvAddNewTaskToReadyList+0xbc>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d207      	bcs.n	80068c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068b8:	4b0b      	ldr	r3, [pc, #44]	; (80068e8 <prvAddNewTaskToReadyList+0xd0>)
 80068ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068c8:	bf00      	nop
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	200006d8 	.word	0x200006d8
 80068d4:	200005d8 	.word	0x200005d8
 80068d8:	200006e4 	.word	0x200006e4
 80068dc:	200006f4 	.word	0x200006f4
 80068e0:	200006e0 	.word	0x200006e0
 80068e4:	200005dc 	.word	0x200005dc
 80068e8:	e000ed04 	.word	0xe000ed04

080068ec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80068f4:	f000 fde6 	bl	80074c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d102      	bne.n	8006904 <vTaskDelete+0x18>
 80068fe:	4b39      	ldr	r3, [pc, #228]	; (80069e4 <vTaskDelete+0xf8>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	e000      	b.n	8006906 <vTaskDelete+0x1a>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3304      	adds	r3, #4
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff fe18 	bl	8006542 <uxListRemove>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d115      	bne.n	8006944 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691c:	4932      	ldr	r1, [pc, #200]	; (80069e8 <vTaskDelete+0xfc>)
 800691e:	4613      	mov	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	440b      	add	r3, r1
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10a      	bne.n	8006944 <vTaskDelete+0x58>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006932:	2201      	movs	r2, #1
 8006934:	fa02 f303 	lsl.w	r3, r2, r3
 8006938:	43da      	mvns	r2, r3
 800693a:	4b2c      	ldr	r3, [pc, #176]	; (80069ec <vTaskDelete+0x100>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4013      	ands	r3, r2
 8006940:	4a2a      	ldr	r2, [pc, #168]	; (80069ec <vTaskDelete+0x100>)
 8006942:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006948:	2b00      	cmp	r3, #0
 800694a:	d004      	beq.n	8006956 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	3318      	adds	r3, #24
 8006950:	4618      	mov	r0, r3
 8006952:	f7ff fdf6 	bl	8006542 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006956:	4b26      	ldr	r3, [pc, #152]	; (80069f0 <vTaskDelete+0x104>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3301      	adds	r3, #1
 800695c:	4a24      	ldr	r2, [pc, #144]	; (80069f0 <vTaskDelete+0x104>)
 800695e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006960:	4b20      	ldr	r3, [pc, #128]	; (80069e4 <vTaskDelete+0xf8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	429a      	cmp	r2, r3
 8006968:	d10b      	bne.n	8006982 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3304      	adds	r3, #4
 800696e:	4619      	mov	r1, r3
 8006970:	4820      	ldr	r0, [pc, #128]	; (80069f4 <vTaskDelete+0x108>)
 8006972:	f7ff fd89 	bl	8006488 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006976:	4b20      	ldr	r3, [pc, #128]	; (80069f8 <vTaskDelete+0x10c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3301      	adds	r3, #1
 800697c:	4a1e      	ldr	r2, [pc, #120]	; (80069f8 <vTaskDelete+0x10c>)
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	e009      	b.n	8006996 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006982:	4b1e      	ldr	r3, [pc, #120]	; (80069fc <vTaskDelete+0x110>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3b01      	subs	r3, #1
 8006988:	4a1c      	ldr	r2, [pc, #112]	; (80069fc <vTaskDelete+0x110>)
 800698a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 fbb3 	bl	80070f8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006992:	f000 fbe5 	bl	8007160 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8006996:	f000 fdc5 	bl	8007524 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800699a:	4b19      	ldr	r3, [pc, #100]	; (8006a00 <vTaskDelete+0x114>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d01b      	beq.n	80069da <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80069a2:	4b10      	ldr	r3, [pc, #64]	; (80069e4 <vTaskDelete+0xf8>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d116      	bne.n	80069da <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80069ac:	4b15      	ldr	r3, [pc, #84]	; (8006a04 <vTaskDelete+0x118>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00a      	beq.n	80069ca <vTaskDelete+0xde>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	60bb      	str	r3, [r7, #8]
}
 80069c6:	bf00      	nop
 80069c8:	e7fe      	b.n	80069c8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80069ca:	4b0f      	ldr	r3, [pc, #60]	; (8006a08 <vTaskDelete+0x11c>)
 80069cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80069da:	bf00      	nop
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	200005d8 	.word	0x200005d8
 80069e8:	200005dc 	.word	0x200005dc
 80069ec:	200006e0 	.word	0x200006e0
 80069f0:	200006f4 	.word	0x200006f4
 80069f4:	200006ac 	.word	0x200006ac
 80069f8:	200006c0 	.word	0x200006c0
 80069fc:	200006d8 	.word	0x200006d8
 8006a00:	200006e4 	.word	0x200006e4
 8006a04:	20000700 	.word	0x20000700
 8006a08:	e000ed04 	.word	0xe000ed04

08006a0c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08a      	sub	sp, #40	; 0x28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006a16:	2300      	movs	r3, #0
 8006a18:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10a      	bne.n	8006a36 <vTaskDelayUntil+0x2a>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	617b      	str	r3, [r7, #20]
}
 8006a32:	bf00      	nop
 8006a34:	e7fe      	b.n	8006a34 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10a      	bne.n	8006a52 <vTaskDelayUntil+0x46>
	__asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	613b      	str	r3, [r7, #16]
}
 8006a4e:	bf00      	nop
 8006a50:	e7fe      	b.n	8006a50 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8006a52:	4b2a      	ldr	r3, [pc, #168]	; (8006afc <vTaskDelayUntil+0xf0>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <vTaskDelayUntil+0x64>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	60fb      	str	r3, [r7, #12]
}
 8006a6c:	bf00      	nop
 8006a6e:	e7fe      	b.n	8006a6e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006a70:	f000 f8e8 	bl	8006c44 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006a74:	4b22      	ldr	r3, [pc, #136]	; (8006b00 <vTaskDelayUntil+0xf4>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	4413      	add	r3, r2
 8006a82:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6a3a      	ldr	r2, [r7, #32]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d20b      	bcs.n	8006aa6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d211      	bcs.n	8006abc <vTaskDelayUntil+0xb0>
 8006a98:	69fa      	ldr	r2, [r7, #28]
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d90d      	bls.n	8006abc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa4:	e00a      	b.n	8006abc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d303      	bcc.n	8006ab8 <vTaskDelayUntil+0xac>
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d901      	bls.n	8006abc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	69fa      	ldr	r2, [r7, #28]
 8006ac0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d006      	beq.n	8006ad6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006ac8:	69fa      	ldr	r2, [r7, #28]
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2100      	movs	r1, #0
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 fb65 	bl	80071a0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006ad6:	f000 f8c3 	bl	8006c60 <xTaskResumeAll>
 8006ada:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d107      	bne.n	8006af2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8006ae2:	4b08      	ldr	r3, [pc, #32]	; (8006b04 <vTaskDelayUntil+0xf8>)
 8006ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae8:	601a      	str	r2, [r3, #0]
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006af2:	bf00      	nop
 8006af4:	3728      	adds	r7, #40	; 0x28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000700 	.word	0x20000700
 8006b00:	200006dc 	.word	0x200006dc
 8006b04:	e000ed04 	.word	0xe000ed04

08006b08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b10:	2300      	movs	r3, #0
 8006b12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d017      	beq.n	8006b4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b1a:	4b13      	ldr	r3, [pc, #76]	; (8006b68 <vTaskDelay+0x60>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00a      	beq.n	8006b38 <vTaskDelay+0x30>
	__asm volatile
 8006b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	60bb      	str	r3, [r7, #8]
}
 8006b34:	bf00      	nop
 8006b36:	e7fe      	b.n	8006b36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b38:	f000 f884 	bl	8006c44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fb2e 	bl	80071a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b44:	f000 f88c 	bl	8006c60 <xTaskResumeAll>
 8006b48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d107      	bne.n	8006b60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006b50:	4b06      	ldr	r3, [pc, #24]	; (8006b6c <vTaskDelay+0x64>)
 8006b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b60:	bf00      	nop
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	20000700 	.word	0x20000700
 8006b6c:	e000ed04 	.word	0xe000ed04

08006b70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08a      	sub	sp, #40	; 0x28
 8006b74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b7e:	463a      	mov	r2, r7
 8006b80:	1d39      	adds	r1, r7, #4
 8006b82:	f107 0308 	add.w	r3, r7, #8
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7f9 fdfe 	bl	8000788 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	9202      	str	r2, [sp, #8]
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	2300      	movs	r3, #0
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	460a      	mov	r2, r1
 8006b9e:	4921      	ldr	r1, [pc, #132]	; (8006c24 <vTaskStartScheduler+0xb4>)
 8006ba0:	4821      	ldr	r0, [pc, #132]	; (8006c28 <vTaskStartScheduler+0xb8>)
 8006ba2:	f7ff fcf8 	bl	8006596 <xTaskCreateStatic>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	4a20      	ldr	r2, [pc, #128]	; (8006c2c <vTaskStartScheduler+0xbc>)
 8006baa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006bac:	4b1f      	ldr	r3, [pc, #124]	; (8006c2c <vTaskStartScheduler+0xbc>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	e001      	b.n	8006bbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d11b      	bne.n	8006bfc <vTaskStartScheduler+0x8c>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	613b      	str	r3, [r7, #16]
}
 8006bd6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006bd8:	4b15      	ldr	r3, [pc, #84]	; (8006c30 <vTaskStartScheduler+0xc0>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	334c      	adds	r3, #76	; 0x4c
 8006bde:	4a15      	ldr	r2, [pc, #84]	; (8006c34 <vTaskStartScheduler+0xc4>)
 8006be0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006be2:	4b15      	ldr	r3, [pc, #84]	; (8006c38 <vTaskStartScheduler+0xc8>)
 8006be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006be8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006bea:	4b14      	ldr	r3, [pc, #80]	; (8006c3c <vTaskStartScheduler+0xcc>)
 8006bec:	2201      	movs	r2, #1
 8006bee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006bf0:	4b13      	ldr	r3, [pc, #76]	; (8006c40 <vTaskStartScheduler+0xd0>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006bf6:	f000 fbc3 	bl	8007380 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006bfa:	e00e      	b.n	8006c1a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c02:	d10a      	bne.n	8006c1a <vTaskStartScheduler+0xaa>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	60fb      	str	r3, [r7, #12]
}
 8006c16:	bf00      	nop
 8006c18:	e7fe      	b.n	8006c18 <vTaskStartScheduler+0xa8>
}
 8006c1a:	bf00      	nop
 8006c1c:	3718      	adds	r7, #24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	08008e6c 	.word	0x08008e6c
 8006c28:	08006fed 	.word	0x08006fed
 8006c2c:	200006fc 	.word	0x200006fc
 8006c30:	200005d8 	.word	0x200005d8
 8006c34:	20000010 	.word	0x20000010
 8006c38:	200006f8 	.word	0x200006f8
 8006c3c:	200006e4 	.word	0x200006e4
 8006c40:	200006dc 	.word	0x200006dc

08006c44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c44:	b480      	push	{r7}
 8006c46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006c48:	4b04      	ldr	r3, [pc, #16]	; (8006c5c <vTaskSuspendAll+0x18>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	4a03      	ldr	r2, [pc, #12]	; (8006c5c <vTaskSuspendAll+0x18>)
 8006c50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006c52:	bf00      	nop
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	20000700 	.word	0x20000700

08006c60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c6e:	4b41      	ldr	r3, [pc, #260]	; (8006d74 <xTaskResumeAll+0x114>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10a      	bne.n	8006c8c <xTaskResumeAll+0x2c>
	__asm volatile
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	603b      	str	r3, [r7, #0]
}
 8006c88:	bf00      	nop
 8006c8a:	e7fe      	b.n	8006c8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c8c:	f000 fc1a 	bl	80074c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c90:	4b38      	ldr	r3, [pc, #224]	; (8006d74 <xTaskResumeAll+0x114>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3b01      	subs	r3, #1
 8006c96:	4a37      	ldr	r2, [pc, #220]	; (8006d74 <xTaskResumeAll+0x114>)
 8006c98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c9a:	4b36      	ldr	r3, [pc, #216]	; (8006d74 <xTaskResumeAll+0x114>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d161      	bne.n	8006d66 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ca2:	4b35      	ldr	r3, [pc, #212]	; (8006d78 <xTaskResumeAll+0x118>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d05d      	beq.n	8006d66 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006caa:	e02e      	b.n	8006d0a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cac:	4b33      	ldr	r3, [pc, #204]	; (8006d7c <xTaskResumeAll+0x11c>)
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	3318      	adds	r3, #24
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7ff fc42 	bl	8006542 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff fc3d 	bl	8006542 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ccc:	2201      	movs	r2, #1
 8006cce:	409a      	lsls	r2, r3
 8006cd0:	4b2b      	ldr	r3, [pc, #172]	; (8006d80 <xTaskResumeAll+0x120>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	4a2a      	ldr	r2, [pc, #168]	; (8006d80 <xTaskResumeAll+0x120>)
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cde:	4613      	mov	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4a27      	ldr	r2, [pc, #156]	; (8006d84 <xTaskResumeAll+0x124>)
 8006ce8:	441a      	add	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	3304      	adds	r3, #4
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	f7ff fbc9 	bl	8006488 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cfa:	4b23      	ldr	r3, [pc, #140]	; (8006d88 <xTaskResumeAll+0x128>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d302      	bcc.n	8006d0a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006d04:	4b21      	ldr	r3, [pc, #132]	; (8006d8c <xTaskResumeAll+0x12c>)
 8006d06:	2201      	movs	r2, #1
 8006d08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d0a:	4b1c      	ldr	r3, [pc, #112]	; (8006d7c <xTaskResumeAll+0x11c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1cc      	bne.n	8006cac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d18:	f000 fa22 	bl	8007160 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d1c:	4b1c      	ldr	r3, [pc, #112]	; (8006d90 <xTaskResumeAll+0x130>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d010      	beq.n	8006d4a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d28:	f000 f846 	bl	8006db8 <xTaskIncrementTick>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006d32:	4b16      	ldr	r3, [pc, #88]	; (8006d8c <xTaskResumeAll+0x12c>)
 8006d34:	2201      	movs	r2, #1
 8006d36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1f1      	bne.n	8006d28 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006d44:	4b12      	ldr	r3, [pc, #72]	; (8006d90 <xTaskResumeAll+0x130>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d4a:	4b10      	ldr	r3, [pc, #64]	; (8006d8c <xTaskResumeAll+0x12c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d009      	beq.n	8006d66 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d52:	2301      	movs	r3, #1
 8006d54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d56:	4b0f      	ldr	r3, [pc, #60]	; (8006d94 <xTaskResumeAll+0x134>)
 8006d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d66:	f000 fbdd 	bl	8007524 <vPortExitCritical>

	return xAlreadyYielded;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20000700 	.word	0x20000700
 8006d78:	200006d8 	.word	0x200006d8
 8006d7c:	20000698 	.word	0x20000698
 8006d80:	200006e0 	.word	0x200006e0
 8006d84:	200005dc 	.word	0x200005dc
 8006d88:	200005d8 	.word	0x200005d8
 8006d8c:	200006ec 	.word	0x200006ec
 8006d90:	200006e8 	.word	0x200006e8
 8006d94:	e000ed04 	.word	0xe000ed04

08006d98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d9e:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <xTaskGetTickCount+0x1c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006da4:	687b      	ldr	r3, [r7, #4]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	200006dc 	.word	0x200006dc

08006db8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dc2:	4b4e      	ldr	r3, [pc, #312]	; (8006efc <xTaskIncrementTick+0x144>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f040 808e 	bne.w	8006ee8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006dcc:	4b4c      	ldr	r3, [pc, #304]	; (8006f00 <xTaskIncrementTick+0x148>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006dd4:	4a4a      	ldr	r2, [pc, #296]	; (8006f00 <xTaskIncrementTick+0x148>)
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d120      	bne.n	8006e22 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006de0:	4b48      	ldr	r3, [pc, #288]	; (8006f04 <xTaskIncrementTick+0x14c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <xTaskIncrementTick+0x48>
	__asm volatile
 8006dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	603b      	str	r3, [r7, #0]
}
 8006dfc:	bf00      	nop
 8006dfe:	e7fe      	b.n	8006dfe <xTaskIncrementTick+0x46>
 8006e00:	4b40      	ldr	r3, [pc, #256]	; (8006f04 <xTaskIncrementTick+0x14c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	4b40      	ldr	r3, [pc, #256]	; (8006f08 <xTaskIncrementTick+0x150>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a3e      	ldr	r2, [pc, #248]	; (8006f04 <xTaskIncrementTick+0x14c>)
 8006e0c:	6013      	str	r3, [r2, #0]
 8006e0e:	4a3e      	ldr	r2, [pc, #248]	; (8006f08 <xTaskIncrementTick+0x150>)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	4b3d      	ldr	r3, [pc, #244]	; (8006f0c <xTaskIncrementTick+0x154>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	4a3c      	ldr	r2, [pc, #240]	; (8006f0c <xTaskIncrementTick+0x154>)
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	f000 f99f 	bl	8007160 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e22:	4b3b      	ldr	r3, [pc, #236]	; (8006f10 <xTaskIncrementTick+0x158>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d348      	bcc.n	8006ebe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e2c:	4b35      	ldr	r3, [pc, #212]	; (8006f04 <xTaskIncrementTick+0x14c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d104      	bne.n	8006e40 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e36:	4b36      	ldr	r3, [pc, #216]	; (8006f10 <xTaskIncrementTick+0x158>)
 8006e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e3c:	601a      	str	r2, [r3, #0]
					break;
 8006e3e:	e03e      	b.n	8006ebe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e40:	4b30      	ldr	r3, [pc, #192]	; (8006f04 <xTaskIncrementTick+0x14c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d203      	bcs.n	8006e60 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e58:	4a2d      	ldr	r2, [pc, #180]	; (8006f10 <xTaskIncrementTick+0x158>)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e5e:	e02e      	b.n	8006ebe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	3304      	adds	r3, #4
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff fb6c 	bl	8006542 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d004      	beq.n	8006e7c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	3318      	adds	r3, #24
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff fb63 	bl	8006542 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	2201      	movs	r2, #1
 8006e82:	409a      	lsls	r2, r3
 8006e84:	4b23      	ldr	r3, [pc, #140]	; (8006f14 <xTaskIncrementTick+0x15c>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	4a22      	ldr	r2, [pc, #136]	; (8006f14 <xTaskIncrementTick+0x15c>)
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e92:	4613      	mov	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4a1f      	ldr	r2, [pc, #124]	; (8006f18 <xTaskIncrementTick+0x160>)
 8006e9c:	441a      	add	r2, r3
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	f7ff faef 	bl	8006488 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eae:	4b1b      	ldr	r3, [pc, #108]	; (8006f1c <xTaskIncrementTick+0x164>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d3b9      	bcc.n	8006e2c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ebc:	e7b6      	b.n	8006e2c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ebe:	4b17      	ldr	r3, [pc, #92]	; (8006f1c <xTaskIncrementTick+0x164>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec4:	4914      	ldr	r1, [pc, #80]	; (8006f18 <xTaskIncrementTick+0x160>)
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	440b      	add	r3, r1
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d901      	bls.n	8006eda <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006eda:	4b11      	ldr	r3, [pc, #68]	; (8006f20 <xTaskIncrementTick+0x168>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d007      	beq.n	8006ef2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	617b      	str	r3, [r7, #20]
 8006ee6:	e004      	b.n	8006ef2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006ee8:	4b0e      	ldr	r3, [pc, #56]	; (8006f24 <xTaskIncrementTick+0x16c>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3301      	adds	r3, #1
 8006eee:	4a0d      	ldr	r2, [pc, #52]	; (8006f24 <xTaskIncrementTick+0x16c>)
 8006ef0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006ef2:	697b      	ldr	r3, [r7, #20]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	20000700 	.word	0x20000700
 8006f00:	200006dc 	.word	0x200006dc
 8006f04:	20000690 	.word	0x20000690
 8006f08:	20000694 	.word	0x20000694
 8006f0c:	200006f0 	.word	0x200006f0
 8006f10:	200006f8 	.word	0x200006f8
 8006f14:	200006e0 	.word	0x200006e0
 8006f18:	200005dc 	.word	0x200005dc
 8006f1c:	200005d8 	.word	0x200005d8
 8006f20:	200006ec 	.word	0x200006ec
 8006f24:	200006e8 	.word	0x200006e8

08006f28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f2e:	4b29      	ldr	r3, [pc, #164]	; (8006fd4 <vTaskSwitchContext+0xac>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f36:	4b28      	ldr	r3, [pc, #160]	; (8006fd8 <vTaskSwitchContext+0xb0>)
 8006f38:	2201      	movs	r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f3c:	e044      	b.n	8006fc8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006f3e:	4b26      	ldr	r3, [pc, #152]	; (8006fd8 <vTaskSwitchContext+0xb0>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f44:	4b25      	ldr	r3, [pc, #148]	; (8006fdc <vTaskSwitchContext+0xb4>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	fab3 f383 	clz	r3, r3
 8006f50:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006f52:	7afb      	ldrb	r3, [r7, #11]
 8006f54:	f1c3 031f 	rsb	r3, r3, #31
 8006f58:	617b      	str	r3, [r7, #20]
 8006f5a:	4921      	ldr	r1, [pc, #132]	; (8006fe0 <vTaskSwitchContext+0xb8>)
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	440b      	add	r3, r1
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10a      	bne.n	8006f84 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f72:	f383 8811 	msr	BASEPRI, r3
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	607b      	str	r3, [r7, #4]
}
 8006f80:	bf00      	nop
 8006f82:	e7fe      	b.n	8006f82 <vTaskSwitchContext+0x5a>
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4a14      	ldr	r2, [pc, #80]	; (8006fe0 <vTaskSwitchContext+0xb8>)
 8006f90:	4413      	add	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	605a      	str	r2, [r3, #4]
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d104      	bne.n	8006fb4 <vTaskSwitchContext+0x8c>
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	605a      	str	r2, [r3, #4]
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	4a0a      	ldr	r2, [pc, #40]	; (8006fe4 <vTaskSwitchContext+0xbc>)
 8006fbc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006fbe:	4b09      	ldr	r3, [pc, #36]	; (8006fe4 <vTaskSwitchContext+0xbc>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	334c      	adds	r3, #76	; 0x4c
 8006fc4:	4a08      	ldr	r2, [pc, #32]	; (8006fe8 <vTaskSwitchContext+0xc0>)
 8006fc6:	6013      	str	r3, [r2, #0]
}
 8006fc8:	bf00      	nop
 8006fca:	371c      	adds	r7, #28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	20000700 	.word	0x20000700
 8006fd8:	200006ec 	.word	0x200006ec
 8006fdc:	200006e0 	.word	0x200006e0
 8006fe0:	200005dc 	.word	0x200005dc
 8006fe4:	200005d8 	.word	0x200005d8
 8006fe8:	20000010 	.word	0x20000010

08006fec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ff4:	f000 f852 	bl	800709c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ff8:	4b06      	ldr	r3, [pc, #24]	; (8007014 <prvIdleTask+0x28>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d9f9      	bls.n	8006ff4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007000:	4b05      	ldr	r3, [pc, #20]	; (8007018 <prvIdleTask+0x2c>)
 8007002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007010:	e7f0      	b.n	8006ff4 <prvIdleTask+0x8>
 8007012:	bf00      	nop
 8007014:	200005dc 	.word	0x200005dc
 8007018:	e000ed04 	.word	0xe000ed04

0800701c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007022:	2300      	movs	r3, #0
 8007024:	607b      	str	r3, [r7, #4]
 8007026:	e00c      	b.n	8007042 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4a12      	ldr	r2, [pc, #72]	; (800707c <prvInitialiseTaskLists+0x60>)
 8007034:	4413      	add	r3, r2
 8007036:	4618      	mov	r0, r3
 8007038:	f7ff f9f9 	bl	800642e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3301      	adds	r3, #1
 8007040:	607b      	str	r3, [r7, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b06      	cmp	r3, #6
 8007046:	d9ef      	bls.n	8007028 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007048:	480d      	ldr	r0, [pc, #52]	; (8007080 <prvInitialiseTaskLists+0x64>)
 800704a:	f7ff f9f0 	bl	800642e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800704e:	480d      	ldr	r0, [pc, #52]	; (8007084 <prvInitialiseTaskLists+0x68>)
 8007050:	f7ff f9ed 	bl	800642e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007054:	480c      	ldr	r0, [pc, #48]	; (8007088 <prvInitialiseTaskLists+0x6c>)
 8007056:	f7ff f9ea 	bl	800642e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800705a:	480c      	ldr	r0, [pc, #48]	; (800708c <prvInitialiseTaskLists+0x70>)
 800705c:	f7ff f9e7 	bl	800642e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007060:	480b      	ldr	r0, [pc, #44]	; (8007090 <prvInitialiseTaskLists+0x74>)
 8007062:	f7ff f9e4 	bl	800642e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007066:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <prvInitialiseTaskLists+0x78>)
 8007068:	4a05      	ldr	r2, [pc, #20]	; (8007080 <prvInitialiseTaskLists+0x64>)
 800706a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800706c:	4b0a      	ldr	r3, [pc, #40]	; (8007098 <prvInitialiseTaskLists+0x7c>)
 800706e:	4a05      	ldr	r2, [pc, #20]	; (8007084 <prvInitialiseTaskLists+0x68>)
 8007070:	601a      	str	r2, [r3, #0]
}
 8007072:	bf00      	nop
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	200005dc 	.word	0x200005dc
 8007080:	20000668 	.word	0x20000668
 8007084:	2000067c 	.word	0x2000067c
 8007088:	20000698 	.word	0x20000698
 800708c:	200006ac 	.word	0x200006ac
 8007090:	200006c4 	.word	0x200006c4
 8007094:	20000690 	.word	0x20000690
 8007098:	20000694 	.word	0x20000694

0800709c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070a2:	e019      	b.n	80070d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070a4:	f000 fa0e 	bl	80074c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070a8:	4b10      	ldr	r3, [pc, #64]	; (80070ec <prvCheckTasksWaitingTermination+0x50>)
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3304      	adds	r3, #4
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7ff fa44 	bl	8006542 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80070ba:	4b0d      	ldr	r3, [pc, #52]	; (80070f0 <prvCheckTasksWaitingTermination+0x54>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3b01      	subs	r3, #1
 80070c0:	4a0b      	ldr	r2, [pc, #44]	; (80070f0 <prvCheckTasksWaitingTermination+0x54>)
 80070c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80070c4:	4b0b      	ldr	r3, [pc, #44]	; (80070f4 <prvCheckTasksWaitingTermination+0x58>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	4a0a      	ldr	r2, [pc, #40]	; (80070f4 <prvCheckTasksWaitingTermination+0x58>)
 80070cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80070ce:	f000 fa29 	bl	8007524 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f810 	bl	80070f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070d8:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <prvCheckTasksWaitingTermination+0x58>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e1      	bne.n	80070a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80070e0:	bf00      	nop
 80070e2:	bf00      	nop
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	200006ac 	.word	0x200006ac
 80070f0:	200006d8 	.word	0x200006d8
 80070f4:	200006c0 	.word	0x200006c0

080070f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	334c      	adds	r3, #76	; 0x4c
 8007104:	4618      	mov	r0, r3
 8007106:	f000 ff05 	bl	8007f14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007110:	2b00      	cmp	r3, #0
 8007112:	d108      	bne.n	8007126 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	4618      	mov	r0, r3
 800711a:	f000 fb81 	bl	8007820 <vPortFree>
				vPortFree( pxTCB );
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fb7e 	bl	8007820 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007124:	e018      	b.n	8007158 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800712c:	2b01      	cmp	r3, #1
 800712e:	d103      	bne.n	8007138 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fb75 	bl	8007820 <vPortFree>
	}
 8007136:	e00f      	b.n	8007158 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800713e:	2b02      	cmp	r3, #2
 8007140:	d00a      	beq.n	8007158 <prvDeleteTCB+0x60>
	__asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	60fb      	str	r3, [r7, #12]
}
 8007154:	bf00      	nop
 8007156:	e7fe      	b.n	8007156 <prvDeleteTCB+0x5e>
	}
 8007158:	bf00      	nop
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007166:	4b0c      	ldr	r3, [pc, #48]	; (8007198 <prvResetNextTaskUnblockTime+0x38>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d104      	bne.n	800717a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007170:	4b0a      	ldr	r3, [pc, #40]	; (800719c <prvResetNextTaskUnblockTime+0x3c>)
 8007172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007176:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007178:	e008      	b.n	800718c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800717a:	4b07      	ldr	r3, [pc, #28]	; (8007198 <prvResetNextTaskUnblockTime+0x38>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	4a04      	ldr	r2, [pc, #16]	; (800719c <prvResetNextTaskUnblockTime+0x3c>)
 800718a:	6013      	str	r3, [r2, #0]
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	20000690 	.word	0x20000690
 800719c:	200006f8 	.word	0x200006f8

080071a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80071aa:	4b29      	ldr	r3, [pc, #164]	; (8007250 <prvAddCurrentTaskToDelayedList+0xb0>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071b0:	4b28      	ldr	r3, [pc, #160]	; (8007254 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3304      	adds	r3, #4
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7ff f9c3 	bl	8006542 <uxListRemove>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10b      	bne.n	80071da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80071c2:	4b24      	ldr	r3, [pc, #144]	; (8007254 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	2201      	movs	r2, #1
 80071ca:	fa02 f303 	lsl.w	r3, r2, r3
 80071ce:	43da      	mvns	r2, r3
 80071d0:	4b21      	ldr	r3, [pc, #132]	; (8007258 <prvAddCurrentTaskToDelayedList+0xb8>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4013      	ands	r3, r2
 80071d6:	4a20      	ldr	r2, [pc, #128]	; (8007258 <prvAddCurrentTaskToDelayedList+0xb8>)
 80071d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071e0:	d10a      	bne.n	80071f8 <prvAddCurrentTaskToDelayedList+0x58>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d007      	beq.n	80071f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071e8:	4b1a      	ldr	r3, [pc, #104]	; (8007254 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3304      	adds	r3, #4
 80071ee:	4619      	mov	r1, r3
 80071f0:	481a      	ldr	r0, [pc, #104]	; (800725c <prvAddCurrentTaskToDelayedList+0xbc>)
 80071f2:	f7ff f949 	bl	8006488 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80071f6:	e026      	b.n	8007246 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4413      	add	r3, r2
 80071fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007200:	4b14      	ldr	r3, [pc, #80]	; (8007254 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	429a      	cmp	r2, r3
 800720e:	d209      	bcs.n	8007224 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007210:	4b13      	ldr	r3, [pc, #76]	; (8007260 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	4b0f      	ldr	r3, [pc, #60]	; (8007254 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3304      	adds	r3, #4
 800721a:	4619      	mov	r1, r3
 800721c:	4610      	mov	r0, r2
 800721e:	f7ff f957 	bl	80064d0 <vListInsert>
}
 8007222:	e010      	b.n	8007246 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007224:	4b0f      	ldr	r3, [pc, #60]	; (8007264 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	4b0a      	ldr	r3, [pc, #40]	; (8007254 <prvAddCurrentTaskToDelayedList+0xb4>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3304      	adds	r3, #4
 800722e:	4619      	mov	r1, r3
 8007230:	4610      	mov	r0, r2
 8007232:	f7ff f94d 	bl	80064d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007236:	4b0c      	ldr	r3, [pc, #48]	; (8007268 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	429a      	cmp	r2, r3
 800723e:	d202      	bcs.n	8007246 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007240:	4a09      	ldr	r2, [pc, #36]	; (8007268 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	6013      	str	r3, [r2, #0]
}
 8007246:	bf00      	nop
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	200006dc 	.word	0x200006dc
 8007254:	200005d8 	.word	0x200005d8
 8007258:	200006e0 	.word	0x200006e0
 800725c:	200006c4 	.word	0x200006c4
 8007260:	20000694 	.word	0x20000694
 8007264:	20000690 	.word	0x20000690
 8007268:	200006f8 	.word	0x200006f8

0800726c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3b04      	subs	r3, #4
 800727c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007284:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3b04      	subs	r3, #4
 800728a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f023 0201 	bic.w	r2, r3, #1
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	3b04      	subs	r3, #4
 800729a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800729c:	4a0c      	ldr	r2, [pc, #48]	; (80072d0 <pxPortInitialiseStack+0x64>)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	3b14      	subs	r3, #20
 80072a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3b04      	subs	r3, #4
 80072b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f06f 0202 	mvn.w	r2, #2
 80072ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3b20      	subs	r3, #32
 80072c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072c2:	68fb      	ldr	r3, [r7, #12]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	080072d5 	.word	0x080072d5

080072d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80072da:	2300      	movs	r3, #0
 80072dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072de:	4b12      	ldr	r3, [pc, #72]	; (8007328 <prvTaskExitError+0x54>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072e6:	d00a      	beq.n	80072fe <prvTaskExitError+0x2a>
	__asm volatile
 80072e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	60fb      	str	r3, [r7, #12]
}
 80072fa:	bf00      	nop
 80072fc:	e7fe      	b.n	80072fc <prvTaskExitError+0x28>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	60bb      	str	r3, [r7, #8]
}
 8007310:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007312:	bf00      	nop
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d0fc      	beq.n	8007314 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800731a:	bf00      	nop
 800731c:	bf00      	nop
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	2000000c 	.word	0x2000000c
 800732c:	00000000 	.word	0x00000000

08007330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007330:	4b07      	ldr	r3, [pc, #28]	; (8007350 <pxCurrentTCBConst2>)
 8007332:	6819      	ldr	r1, [r3, #0]
 8007334:	6808      	ldr	r0, [r1, #0]
 8007336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800733a:	f380 8809 	msr	PSP, r0
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f04f 0000 	mov.w	r0, #0
 8007346:	f380 8811 	msr	BASEPRI, r0
 800734a:	4770      	bx	lr
 800734c:	f3af 8000 	nop.w

08007350 <pxCurrentTCBConst2>:
 8007350:	200005d8 	.word	0x200005d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007354:	bf00      	nop
 8007356:	bf00      	nop

08007358 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007358:	4808      	ldr	r0, [pc, #32]	; (800737c <prvPortStartFirstTask+0x24>)
 800735a:	6800      	ldr	r0, [r0, #0]
 800735c:	6800      	ldr	r0, [r0, #0]
 800735e:	f380 8808 	msr	MSP, r0
 8007362:	f04f 0000 	mov.w	r0, #0
 8007366:	f380 8814 	msr	CONTROL, r0
 800736a:	b662      	cpsie	i
 800736c:	b661      	cpsie	f
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	df00      	svc	0
 8007378:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800737a:	bf00      	nop
 800737c:	e000ed08 	.word	0xe000ed08

08007380 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007386:	4b46      	ldr	r3, [pc, #280]	; (80074a0 <xPortStartScheduler+0x120>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a46      	ldr	r2, [pc, #280]	; (80074a4 <xPortStartScheduler+0x124>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d10a      	bne.n	80073a6 <xPortStartScheduler+0x26>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	613b      	str	r3, [r7, #16]
}
 80073a2:	bf00      	nop
 80073a4:	e7fe      	b.n	80073a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80073a6:	4b3e      	ldr	r3, [pc, #248]	; (80074a0 <xPortStartScheduler+0x120>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a3f      	ldr	r2, [pc, #252]	; (80074a8 <xPortStartScheduler+0x128>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d10a      	bne.n	80073c6 <xPortStartScheduler+0x46>
	__asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	60fb      	str	r3, [r7, #12]
}
 80073c2:	bf00      	nop
 80073c4:	e7fe      	b.n	80073c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073c6:	4b39      	ldr	r3, [pc, #228]	; (80074ac <xPortStartScheduler+0x12c>)
 80073c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	22ff      	movs	r2, #255	; 0xff
 80073d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073e0:	78fb      	ldrb	r3, [r7, #3]
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	4b31      	ldr	r3, [pc, #196]	; (80074b0 <xPortStartScheduler+0x130>)
 80073ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073ee:	4b31      	ldr	r3, [pc, #196]	; (80074b4 <xPortStartScheduler+0x134>)
 80073f0:	2207      	movs	r2, #7
 80073f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073f4:	e009      	b.n	800740a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80073f6:	4b2f      	ldr	r3, [pc, #188]	; (80074b4 <xPortStartScheduler+0x134>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	4a2d      	ldr	r2, [pc, #180]	; (80074b4 <xPortStartScheduler+0x134>)
 80073fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007400:	78fb      	ldrb	r3, [r7, #3]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	b2db      	uxtb	r3, r3
 8007408:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007412:	2b80      	cmp	r3, #128	; 0x80
 8007414:	d0ef      	beq.n	80073f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007416:	4b27      	ldr	r3, [pc, #156]	; (80074b4 <xPortStartScheduler+0x134>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f1c3 0307 	rsb	r3, r3, #7
 800741e:	2b04      	cmp	r3, #4
 8007420:	d00a      	beq.n	8007438 <xPortStartScheduler+0xb8>
	__asm volatile
 8007422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007426:	f383 8811 	msr	BASEPRI, r3
 800742a:	f3bf 8f6f 	isb	sy
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	60bb      	str	r3, [r7, #8]
}
 8007434:	bf00      	nop
 8007436:	e7fe      	b.n	8007436 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007438:	4b1e      	ldr	r3, [pc, #120]	; (80074b4 <xPortStartScheduler+0x134>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	021b      	lsls	r3, r3, #8
 800743e:	4a1d      	ldr	r2, [pc, #116]	; (80074b4 <xPortStartScheduler+0x134>)
 8007440:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007442:	4b1c      	ldr	r3, [pc, #112]	; (80074b4 <xPortStartScheduler+0x134>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800744a:	4a1a      	ldr	r2, [pc, #104]	; (80074b4 <xPortStartScheduler+0x134>)
 800744c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	b2da      	uxtb	r2, r3
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007456:	4b18      	ldr	r3, [pc, #96]	; (80074b8 <xPortStartScheduler+0x138>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a17      	ldr	r2, [pc, #92]	; (80074b8 <xPortStartScheduler+0x138>)
 800745c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007460:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007462:	4b15      	ldr	r3, [pc, #84]	; (80074b8 <xPortStartScheduler+0x138>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a14      	ldr	r2, [pc, #80]	; (80074b8 <xPortStartScheduler+0x138>)
 8007468:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800746c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800746e:	f000 f8dd 	bl	800762c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007472:	4b12      	ldr	r3, [pc, #72]	; (80074bc <xPortStartScheduler+0x13c>)
 8007474:	2200      	movs	r2, #0
 8007476:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007478:	f000 f8fc 	bl	8007674 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800747c:	4b10      	ldr	r3, [pc, #64]	; (80074c0 <xPortStartScheduler+0x140>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a0f      	ldr	r2, [pc, #60]	; (80074c0 <xPortStartScheduler+0x140>)
 8007482:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007486:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007488:	f7ff ff66 	bl	8007358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800748c:	f7ff fd4c 	bl	8006f28 <vTaskSwitchContext>
	prvTaskExitError();
 8007490:	f7ff ff20 	bl	80072d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	e000ed00 	.word	0xe000ed00
 80074a4:	410fc271 	.word	0x410fc271
 80074a8:	410fc270 	.word	0x410fc270
 80074ac:	e000e400 	.word	0xe000e400
 80074b0:	20000704 	.word	0x20000704
 80074b4:	20000708 	.word	0x20000708
 80074b8:	e000ed20 	.word	0xe000ed20
 80074bc:	2000000c 	.word	0x2000000c
 80074c0:	e000ef34 	.word	0xe000ef34

080074c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	607b      	str	r3, [r7, #4]
}
 80074dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074de:	4b0f      	ldr	r3, [pc, #60]	; (800751c <vPortEnterCritical+0x58>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3301      	adds	r3, #1
 80074e4:	4a0d      	ldr	r2, [pc, #52]	; (800751c <vPortEnterCritical+0x58>)
 80074e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074e8:	4b0c      	ldr	r3, [pc, #48]	; (800751c <vPortEnterCritical+0x58>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d10f      	bne.n	8007510 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074f0:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <vPortEnterCritical+0x5c>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <vPortEnterCritical+0x4c>
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	603b      	str	r3, [r7, #0]
}
 800750c:	bf00      	nop
 800750e:	e7fe      	b.n	800750e <vPortEnterCritical+0x4a>
	}
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	2000000c 	.word	0x2000000c
 8007520:	e000ed04 	.word	0xe000ed04

08007524 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800752a:	4b12      	ldr	r3, [pc, #72]	; (8007574 <vPortExitCritical+0x50>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10a      	bne.n	8007548 <vPortExitCritical+0x24>
	__asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	607b      	str	r3, [r7, #4]
}
 8007544:	bf00      	nop
 8007546:	e7fe      	b.n	8007546 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007548:	4b0a      	ldr	r3, [pc, #40]	; (8007574 <vPortExitCritical+0x50>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3b01      	subs	r3, #1
 800754e:	4a09      	ldr	r2, [pc, #36]	; (8007574 <vPortExitCritical+0x50>)
 8007550:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007552:	4b08      	ldr	r3, [pc, #32]	; (8007574 <vPortExitCritical+0x50>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d105      	bne.n	8007566 <vPortExitCritical+0x42>
 800755a:	2300      	movs	r3, #0
 800755c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007564:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007566:	bf00      	nop
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	2000000c 	.word	0x2000000c
	...

08007580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007580:	f3ef 8009 	mrs	r0, PSP
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	4b15      	ldr	r3, [pc, #84]	; (80075e0 <pxCurrentTCBConst>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	f01e 0f10 	tst.w	lr, #16
 8007590:	bf08      	it	eq
 8007592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759a:	6010      	str	r0, [r2, #0]
 800759c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075a4:	f380 8811 	msr	BASEPRI, r0
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f7ff fcba 	bl	8006f28 <vTaskSwitchContext>
 80075b4:	f04f 0000 	mov.w	r0, #0
 80075b8:	f380 8811 	msr	BASEPRI, r0
 80075bc:	bc09      	pop	{r0, r3}
 80075be:	6819      	ldr	r1, [r3, #0]
 80075c0:	6808      	ldr	r0, [r1, #0]
 80075c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c6:	f01e 0f10 	tst.w	lr, #16
 80075ca:	bf08      	it	eq
 80075cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075d0:	f380 8809 	msr	PSP, r0
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	f3af 8000 	nop.w

080075e0 <pxCurrentTCBConst>:
 80075e0:	200005d8 	.word	0x200005d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop

080075e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	607b      	str	r3, [r7, #4]
}
 8007600:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007602:	f7ff fbd9 	bl	8006db8 <xTaskIncrementTick>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800760c:	4b06      	ldr	r3, [pc, #24]	; (8007628 <SysTick_Handler+0x40>)
 800760e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	2300      	movs	r3, #0
 8007616:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	f383 8811 	msr	BASEPRI, r3
}
 800761e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007620:	bf00      	nop
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	e000ed04 	.word	0xe000ed04

0800762c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800762c:	b480      	push	{r7}
 800762e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007630:	4b0b      	ldr	r3, [pc, #44]	; (8007660 <vPortSetupTimerInterrupt+0x34>)
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007636:	4b0b      	ldr	r3, [pc, #44]	; (8007664 <vPortSetupTimerInterrupt+0x38>)
 8007638:	2200      	movs	r2, #0
 800763a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800763c:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <vPortSetupTimerInterrupt+0x3c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a0a      	ldr	r2, [pc, #40]	; (800766c <vPortSetupTimerInterrupt+0x40>)
 8007642:	fba2 2303 	umull	r2, r3, r2, r3
 8007646:	099b      	lsrs	r3, r3, #6
 8007648:	4a09      	ldr	r2, [pc, #36]	; (8007670 <vPortSetupTimerInterrupt+0x44>)
 800764a:	3b01      	subs	r3, #1
 800764c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800764e:	4b04      	ldr	r3, [pc, #16]	; (8007660 <vPortSetupTimerInterrupt+0x34>)
 8007650:	2207      	movs	r2, #7
 8007652:	601a      	str	r2, [r3, #0]
}
 8007654:	bf00      	nop
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	e000e010 	.word	0xe000e010
 8007664:	e000e018 	.word	0xe000e018
 8007668:	20000000 	.word	0x20000000
 800766c:	10624dd3 	.word	0x10624dd3
 8007670:	e000e014 	.word	0xe000e014

08007674 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007674:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007684 <vPortEnableVFP+0x10>
 8007678:	6801      	ldr	r1, [r0, #0]
 800767a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800767e:	6001      	str	r1, [r0, #0]
 8007680:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007682:	bf00      	nop
 8007684:	e000ed88 	.word	0xe000ed88

08007688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08a      	sub	sp, #40	; 0x28
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007690:	2300      	movs	r3, #0
 8007692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007694:	f7ff fad6 	bl	8006c44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007698:	4b5b      	ldr	r3, [pc, #364]	; (8007808 <pvPortMalloc+0x180>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80076a0:	f000 f920 	bl	80078e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80076a4:	4b59      	ldr	r3, [pc, #356]	; (800780c <pvPortMalloc+0x184>)
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4013      	ands	r3, r2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f040 8093 	bne.w	80077d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d01d      	beq.n	80076f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80076b8:	2208      	movs	r2, #8
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4413      	add	r3, r2
 80076be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f003 0307 	and.w	r3, r3, #7
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d014      	beq.n	80076f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f023 0307 	bic.w	r3, r3, #7
 80076d0:	3308      	adds	r3, #8
 80076d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f003 0307 	and.w	r3, r3, #7
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <pvPortMalloc+0x6c>
	__asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	617b      	str	r3, [r7, #20]
}
 80076f0:	bf00      	nop
 80076f2:	e7fe      	b.n	80076f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d06e      	beq.n	80077d8 <pvPortMalloc+0x150>
 80076fa:	4b45      	ldr	r3, [pc, #276]	; (8007810 <pvPortMalloc+0x188>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	429a      	cmp	r2, r3
 8007702:	d869      	bhi.n	80077d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007704:	4b43      	ldr	r3, [pc, #268]	; (8007814 <pvPortMalloc+0x18c>)
 8007706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007708:	4b42      	ldr	r3, [pc, #264]	; (8007814 <pvPortMalloc+0x18c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800770e:	e004      	b.n	800771a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	429a      	cmp	r2, r3
 8007722:	d903      	bls.n	800772c <pvPortMalloc+0xa4>
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1f1      	bne.n	8007710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800772c:	4b36      	ldr	r3, [pc, #216]	; (8007808 <pvPortMalloc+0x180>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007732:	429a      	cmp	r2, r3
 8007734:	d050      	beq.n	80077d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2208      	movs	r2, #8
 800773c:	4413      	add	r3, r2
 800773e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	1ad2      	subs	r2, r2, r3
 8007750:	2308      	movs	r3, #8
 8007752:	005b      	lsls	r3, r3, #1
 8007754:	429a      	cmp	r2, r3
 8007756:	d91f      	bls.n	8007798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4413      	add	r3, r2
 800775e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	f003 0307 	and.w	r3, r3, #7
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <pvPortMalloc+0xf8>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	613b      	str	r3, [r7, #16]
}
 800777c:	bf00      	nop
 800777e:	e7fe      	b.n	800777e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	1ad2      	subs	r2, r2, r3
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007792:	69b8      	ldr	r0, [r7, #24]
 8007794:	f000 f908 	bl	80079a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007798:	4b1d      	ldr	r3, [pc, #116]	; (8007810 <pvPortMalloc+0x188>)
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	4a1b      	ldr	r2, [pc, #108]	; (8007810 <pvPortMalloc+0x188>)
 80077a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077a6:	4b1a      	ldr	r3, [pc, #104]	; (8007810 <pvPortMalloc+0x188>)
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	4b1b      	ldr	r3, [pc, #108]	; (8007818 <pvPortMalloc+0x190>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d203      	bcs.n	80077ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077b2:	4b17      	ldr	r3, [pc, #92]	; (8007810 <pvPortMalloc+0x188>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a18      	ldr	r2, [pc, #96]	; (8007818 <pvPortMalloc+0x190>)
 80077b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	4b13      	ldr	r3, [pc, #76]	; (800780c <pvPortMalloc+0x184>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	431a      	orrs	r2, r3
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	2200      	movs	r2, #0
 80077cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80077ce:	4b13      	ldr	r3, [pc, #76]	; (800781c <pvPortMalloc+0x194>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3301      	adds	r3, #1
 80077d4:	4a11      	ldr	r2, [pc, #68]	; (800781c <pvPortMalloc+0x194>)
 80077d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077d8:	f7ff fa42 	bl	8006c60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <pvPortMalloc+0x174>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	60fb      	str	r3, [r7, #12]
}
 80077f8:	bf00      	nop
 80077fa:	e7fe      	b.n	80077fa <pvPortMalloc+0x172>
	return pvReturn;
 80077fc:	69fb      	ldr	r3, [r7, #28]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3728      	adds	r7, #40	; 0x28
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	20004314 	.word	0x20004314
 800780c:	20004328 	.word	0x20004328
 8007810:	20004318 	.word	0x20004318
 8007814:	2000430c 	.word	0x2000430c
 8007818:	2000431c 	.word	0x2000431c
 800781c:	20004320 	.word	0x20004320

08007820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d04d      	beq.n	80078ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007832:	2308      	movs	r3, #8
 8007834:	425b      	negs	r3, r3
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	4413      	add	r3, r2
 800783a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	685a      	ldr	r2, [r3, #4]
 8007844:	4b24      	ldr	r3, [pc, #144]	; (80078d8 <vPortFree+0xb8>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4013      	ands	r3, r2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10a      	bne.n	8007864 <vPortFree+0x44>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	60fb      	str	r3, [r7, #12]
}
 8007860:	bf00      	nop
 8007862:	e7fe      	b.n	8007862 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00a      	beq.n	8007882 <vPortFree+0x62>
	__asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	60bb      	str	r3, [r7, #8]
}
 800787e:	bf00      	nop
 8007880:	e7fe      	b.n	8007880 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	4b14      	ldr	r3, [pc, #80]	; (80078d8 <vPortFree+0xb8>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4013      	ands	r3, r2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d01e      	beq.n	80078ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d11a      	bne.n	80078ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	4b0e      	ldr	r3, [pc, #56]	; (80078d8 <vPortFree+0xb8>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	43db      	mvns	r3, r3
 80078a2:	401a      	ands	r2, r3
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80078a8:	f7ff f9cc 	bl	8006c44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	4b0a      	ldr	r3, [pc, #40]	; (80078dc <vPortFree+0xbc>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4413      	add	r3, r2
 80078b6:	4a09      	ldr	r2, [pc, #36]	; (80078dc <vPortFree+0xbc>)
 80078b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078ba:	6938      	ldr	r0, [r7, #16]
 80078bc:	f000 f874 	bl	80079a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80078c0:	4b07      	ldr	r3, [pc, #28]	; (80078e0 <vPortFree+0xc0>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3301      	adds	r3, #1
 80078c6:	4a06      	ldr	r2, [pc, #24]	; (80078e0 <vPortFree+0xc0>)
 80078c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80078ca:	f7ff f9c9 	bl	8006c60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80078ce:	bf00      	nop
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	20004328 	.word	0x20004328
 80078dc:	20004318 	.word	0x20004318
 80078e0:	20004324 	.word	0x20004324

080078e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80078ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078f0:	4b27      	ldr	r3, [pc, #156]	; (8007990 <prvHeapInit+0xac>)
 80078f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00c      	beq.n	8007918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3307      	adds	r3, #7
 8007902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 0307 	bic.w	r3, r3, #7
 800790a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	4a1f      	ldr	r2, [pc, #124]	; (8007990 <prvHeapInit+0xac>)
 8007914:	4413      	add	r3, r2
 8007916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800791c:	4a1d      	ldr	r2, [pc, #116]	; (8007994 <prvHeapInit+0xb0>)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007922:	4b1c      	ldr	r3, [pc, #112]	; (8007994 <prvHeapInit+0xb0>)
 8007924:	2200      	movs	r2, #0
 8007926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	4413      	add	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007930:	2208      	movs	r2, #8
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	1a9b      	subs	r3, r3, r2
 8007936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f023 0307 	bic.w	r3, r3, #7
 800793e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4a15      	ldr	r2, [pc, #84]	; (8007998 <prvHeapInit+0xb4>)
 8007944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007946:	4b14      	ldr	r3, [pc, #80]	; (8007998 <prvHeapInit+0xb4>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2200      	movs	r2, #0
 800794c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800794e:	4b12      	ldr	r3, [pc, #72]	; (8007998 <prvHeapInit+0xb4>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	1ad2      	subs	r2, r2, r3
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007964:	4b0c      	ldr	r3, [pc, #48]	; (8007998 <prvHeapInit+0xb4>)
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	4a0a      	ldr	r2, [pc, #40]	; (800799c <prvHeapInit+0xb8>)
 8007972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	4a09      	ldr	r2, [pc, #36]	; (80079a0 <prvHeapInit+0xbc>)
 800797a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800797c:	4b09      	ldr	r3, [pc, #36]	; (80079a4 <prvHeapInit+0xc0>)
 800797e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007982:	601a      	str	r2, [r3, #0]
}
 8007984:	bf00      	nop
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	2000070c 	.word	0x2000070c
 8007994:	2000430c 	.word	0x2000430c
 8007998:	20004314 	.word	0x20004314
 800799c:	2000431c 	.word	0x2000431c
 80079a0:	20004318 	.word	0x20004318
 80079a4:	20004328 	.word	0x20004328

080079a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079b0:	4b28      	ldr	r3, [pc, #160]	; (8007a54 <prvInsertBlockIntoFreeList+0xac>)
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e002      	b.n	80079bc <prvInsertBlockIntoFreeList+0x14>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d8f7      	bhi.n	80079b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	4413      	add	r3, r2
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d108      	bne.n	80079ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	441a      	add	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	441a      	add	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d118      	bne.n	8007a30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	4b15      	ldr	r3, [pc, #84]	; (8007a58 <prvInsertBlockIntoFreeList+0xb0>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d00d      	beq.n	8007a26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	441a      	add	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	e008      	b.n	8007a38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a26:	4b0c      	ldr	r3, [pc, #48]	; (8007a58 <prvInsertBlockIntoFreeList+0xb0>)
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	e003      	b.n	8007a38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d002      	beq.n	8007a46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a46:	bf00      	nop
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	2000430c 	.word	0x2000430c
 8007a58:	20004314 	.word	0x20004314

08007a5c <__errno>:
 8007a5c:	4b01      	ldr	r3, [pc, #4]	; (8007a64 <__errno+0x8>)
 8007a5e:	6818      	ldr	r0, [r3, #0]
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	20000010 	.word	0x20000010

08007a68 <std>:
 8007a68:	2300      	movs	r3, #0
 8007a6a:	b510      	push	{r4, lr}
 8007a6c:	4604      	mov	r4, r0
 8007a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a76:	6083      	str	r3, [r0, #8]
 8007a78:	8181      	strh	r1, [r0, #12]
 8007a7a:	6643      	str	r3, [r0, #100]	; 0x64
 8007a7c:	81c2      	strh	r2, [r0, #14]
 8007a7e:	6183      	str	r3, [r0, #24]
 8007a80:	4619      	mov	r1, r3
 8007a82:	2208      	movs	r2, #8
 8007a84:	305c      	adds	r0, #92	; 0x5c
 8007a86:	f000 f90c 	bl	8007ca2 <memset>
 8007a8a:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <std+0x38>)
 8007a8c:	6263      	str	r3, [r4, #36]	; 0x24
 8007a8e:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <std+0x3c>)
 8007a90:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a92:	4b05      	ldr	r3, [pc, #20]	; (8007aa8 <std+0x40>)
 8007a94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a96:	4b05      	ldr	r3, [pc, #20]	; (8007aac <std+0x44>)
 8007a98:	6224      	str	r4, [r4, #32]
 8007a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8007a9c:	bd10      	pop	{r4, pc}
 8007a9e:	bf00      	nop
 8007aa0:	08007fed 	.word	0x08007fed
 8007aa4:	0800800f 	.word	0x0800800f
 8007aa8:	08008047 	.word	0x08008047
 8007aac:	0800806b 	.word	0x0800806b

08007ab0 <_cleanup_r>:
 8007ab0:	4901      	ldr	r1, [pc, #4]	; (8007ab8 <_cleanup_r+0x8>)
 8007ab2:	f000 b8af 	b.w	8007c14 <_fwalk_reent>
 8007ab6:	bf00      	nop
 8007ab8:	08008345 	.word	0x08008345

08007abc <__sfmoreglue>:
 8007abc:	b570      	push	{r4, r5, r6, lr}
 8007abe:	2268      	movs	r2, #104	; 0x68
 8007ac0:	1e4d      	subs	r5, r1, #1
 8007ac2:	4355      	muls	r5, r2
 8007ac4:	460e      	mov	r6, r1
 8007ac6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007aca:	f000 f913 	bl	8007cf4 <_malloc_r>
 8007ace:	4604      	mov	r4, r0
 8007ad0:	b140      	cbz	r0, 8007ae4 <__sfmoreglue+0x28>
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ad8:	300c      	adds	r0, #12
 8007ada:	60a0      	str	r0, [r4, #8]
 8007adc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ae0:	f000 f8df 	bl	8007ca2 <memset>
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	bd70      	pop	{r4, r5, r6, pc}

08007ae8 <__sfp_lock_acquire>:
 8007ae8:	4801      	ldr	r0, [pc, #4]	; (8007af0 <__sfp_lock_acquire+0x8>)
 8007aea:	f000 b8d8 	b.w	8007c9e <__retarget_lock_acquire_recursive>
 8007aee:	bf00      	nop
 8007af0:	2000432d 	.word	0x2000432d

08007af4 <__sfp_lock_release>:
 8007af4:	4801      	ldr	r0, [pc, #4]	; (8007afc <__sfp_lock_release+0x8>)
 8007af6:	f000 b8d3 	b.w	8007ca0 <__retarget_lock_release_recursive>
 8007afa:	bf00      	nop
 8007afc:	2000432d 	.word	0x2000432d

08007b00 <__sinit_lock_acquire>:
 8007b00:	4801      	ldr	r0, [pc, #4]	; (8007b08 <__sinit_lock_acquire+0x8>)
 8007b02:	f000 b8cc 	b.w	8007c9e <__retarget_lock_acquire_recursive>
 8007b06:	bf00      	nop
 8007b08:	2000432e 	.word	0x2000432e

08007b0c <__sinit_lock_release>:
 8007b0c:	4801      	ldr	r0, [pc, #4]	; (8007b14 <__sinit_lock_release+0x8>)
 8007b0e:	f000 b8c7 	b.w	8007ca0 <__retarget_lock_release_recursive>
 8007b12:	bf00      	nop
 8007b14:	2000432e 	.word	0x2000432e

08007b18 <__sinit>:
 8007b18:	b510      	push	{r4, lr}
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	f7ff fff0 	bl	8007b00 <__sinit_lock_acquire>
 8007b20:	69a3      	ldr	r3, [r4, #24]
 8007b22:	b11b      	cbz	r3, 8007b2c <__sinit+0x14>
 8007b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b28:	f7ff bff0 	b.w	8007b0c <__sinit_lock_release>
 8007b2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b30:	6523      	str	r3, [r4, #80]	; 0x50
 8007b32:	4b13      	ldr	r3, [pc, #76]	; (8007b80 <__sinit+0x68>)
 8007b34:	4a13      	ldr	r2, [pc, #76]	; (8007b84 <__sinit+0x6c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b3a:	42a3      	cmp	r3, r4
 8007b3c:	bf04      	itt	eq
 8007b3e:	2301      	moveq	r3, #1
 8007b40:	61a3      	streq	r3, [r4, #24]
 8007b42:	4620      	mov	r0, r4
 8007b44:	f000 f820 	bl	8007b88 <__sfp>
 8007b48:	6060      	str	r0, [r4, #4]
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f000 f81c 	bl	8007b88 <__sfp>
 8007b50:	60a0      	str	r0, [r4, #8]
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 f818 	bl	8007b88 <__sfp>
 8007b58:	2200      	movs	r2, #0
 8007b5a:	60e0      	str	r0, [r4, #12]
 8007b5c:	2104      	movs	r1, #4
 8007b5e:	6860      	ldr	r0, [r4, #4]
 8007b60:	f7ff ff82 	bl	8007a68 <std>
 8007b64:	68a0      	ldr	r0, [r4, #8]
 8007b66:	2201      	movs	r2, #1
 8007b68:	2109      	movs	r1, #9
 8007b6a:	f7ff ff7d 	bl	8007a68 <std>
 8007b6e:	68e0      	ldr	r0, [r4, #12]
 8007b70:	2202      	movs	r2, #2
 8007b72:	2112      	movs	r1, #18
 8007b74:	f7ff ff78 	bl	8007a68 <std>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	61a3      	str	r3, [r4, #24]
 8007b7c:	e7d2      	b.n	8007b24 <__sinit+0xc>
 8007b7e:	bf00      	nop
 8007b80:	08008eec 	.word	0x08008eec
 8007b84:	08007ab1 	.word	0x08007ab1

08007b88 <__sfp>:
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8a:	4607      	mov	r7, r0
 8007b8c:	f7ff ffac 	bl	8007ae8 <__sfp_lock_acquire>
 8007b90:	4b1e      	ldr	r3, [pc, #120]	; (8007c0c <__sfp+0x84>)
 8007b92:	681e      	ldr	r6, [r3, #0]
 8007b94:	69b3      	ldr	r3, [r6, #24]
 8007b96:	b913      	cbnz	r3, 8007b9e <__sfp+0x16>
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f7ff ffbd 	bl	8007b18 <__sinit>
 8007b9e:	3648      	adds	r6, #72	; 0x48
 8007ba0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	d503      	bpl.n	8007bb0 <__sfp+0x28>
 8007ba8:	6833      	ldr	r3, [r6, #0]
 8007baa:	b30b      	cbz	r3, 8007bf0 <__sfp+0x68>
 8007bac:	6836      	ldr	r6, [r6, #0]
 8007bae:	e7f7      	b.n	8007ba0 <__sfp+0x18>
 8007bb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007bb4:	b9d5      	cbnz	r5, 8007bec <__sfp+0x64>
 8007bb6:	4b16      	ldr	r3, [pc, #88]	; (8007c10 <__sfp+0x88>)
 8007bb8:	60e3      	str	r3, [r4, #12]
 8007bba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007bbe:	6665      	str	r5, [r4, #100]	; 0x64
 8007bc0:	f000 f86c 	bl	8007c9c <__retarget_lock_init_recursive>
 8007bc4:	f7ff ff96 	bl	8007af4 <__sfp_lock_release>
 8007bc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007bcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007bd0:	6025      	str	r5, [r4, #0]
 8007bd2:	61a5      	str	r5, [r4, #24]
 8007bd4:	2208      	movs	r2, #8
 8007bd6:	4629      	mov	r1, r5
 8007bd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007bdc:	f000 f861 	bl	8007ca2 <memset>
 8007be0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007be4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007be8:	4620      	mov	r0, r4
 8007bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bec:	3468      	adds	r4, #104	; 0x68
 8007bee:	e7d9      	b.n	8007ba4 <__sfp+0x1c>
 8007bf0:	2104      	movs	r1, #4
 8007bf2:	4638      	mov	r0, r7
 8007bf4:	f7ff ff62 	bl	8007abc <__sfmoreglue>
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	6030      	str	r0, [r6, #0]
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	d1d5      	bne.n	8007bac <__sfp+0x24>
 8007c00:	f7ff ff78 	bl	8007af4 <__sfp_lock_release>
 8007c04:	230c      	movs	r3, #12
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	e7ee      	b.n	8007be8 <__sfp+0x60>
 8007c0a:	bf00      	nop
 8007c0c:	08008eec 	.word	0x08008eec
 8007c10:	ffff0001 	.word	0xffff0001

08007c14 <_fwalk_reent>:
 8007c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c18:	4606      	mov	r6, r0
 8007c1a:	4688      	mov	r8, r1
 8007c1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c20:	2700      	movs	r7, #0
 8007c22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c26:	f1b9 0901 	subs.w	r9, r9, #1
 8007c2a:	d505      	bpl.n	8007c38 <_fwalk_reent+0x24>
 8007c2c:	6824      	ldr	r4, [r4, #0]
 8007c2e:	2c00      	cmp	r4, #0
 8007c30:	d1f7      	bne.n	8007c22 <_fwalk_reent+0xe>
 8007c32:	4638      	mov	r0, r7
 8007c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c38:	89ab      	ldrh	r3, [r5, #12]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d907      	bls.n	8007c4e <_fwalk_reent+0x3a>
 8007c3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c42:	3301      	adds	r3, #1
 8007c44:	d003      	beq.n	8007c4e <_fwalk_reent+0x3a>
 8007c46:	4629      	mov	r1, r5
 8007c48:	4630      	mov	r0, r6
 8007c4a:	47c0      	blx	r8
 8007c4c:	4307      	orrs	r7, r0
 8007c4e:	3568      	adds	r5, #104	; 0x68
 8007c50:	e7e9      	b.n	8007c26 <_fwalk_reent+0x12>
	...

08007c54 <__libc_init_array>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	4d0d      	ldr	r5, [pc, #52]	; (8007c8c <__libc_init_array+0x38>)
 8007c58:	4c0d      	ldr	r4, [pc, #52]	; (8007c90 <__libc_init_array+0x3c>)
 8007c5a:	1b64      	subs	r4, r4, r5
 8007c5c:	10a4      	asrs	r4, r4, #2
 8007c5e:	2600      	movs	r6, #0
 8007c60:	42a6      	cmp	r6, r4
 8007c62:	d109      	bne.n	8007c78 <__libc_init_array+0x24>
 8007c64:	4d0b      	ldr	r5, [pc, #44]	; (8007c94 <__libc_init_array+0x40>)
 8007c66:	4c0c      	ldr	r4, [pc, #48]	; (8007c98 <__libc_init_array+0x44>)
 8007c68:	f000 ff9a 	bl	8008ba0 <_init>
 8007c6c:	1b64      	subs	r4, r4, r5
 8007c6e:	10a4      	asrs	r4, r4, #2
 8007c70:	2600      	movs	r6, #0
 8007c72:	42a6      	cmp	r6, r4
 8007c74:	d105      	bne.n	8007c82 <__libc_init_array+0x2e>
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c7c:	4798      	blx	r3
 8007c7e:	3601      	adds	r6, #1
 8007c80:	e7ee      	b.n	8007c60 <__libc_init_array+0xc>
 8007c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c86:	4798      	blx	r3
 8007c88:	3601      	adds	r6, #1
 8007c8a:	e7f2      	b.n	8007c72 <__libc_init_array+0x1e>
 8007c8c:	08008f2c 	.word	0x08008f2c
 8007c90:	08008f2c 	.word	0x08008f2c
 8007c94:	08008f2c 	.word	0x08008f2c
 8007c98:	08008f30 	.word	0x08008f30

08007c9c <__retarget_lock_init_recursive>:
 8007c9c:	4770      	bx	lr

08007c9e <__retarget_lock_acquire_recursive>:
 8007c9e:	4770      	bx	lr

08007ca0 <__retarget_lock_release_recursive>:
 8007ca0:	4770      	bx	lr

08007ca2 <memset>:
 8007ca2:	4402      	add	r2, r0
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d100      	bne.n	8007cac <memset+0xa>
 8007caa:	4770      	bx	lr
 8007cac:	f803 1b01 	strb.w	r1, [r3], #1
 8007cb0:	e7f9      	b.n	8007ca6 <memset+0x4>
	...

08007cb4 <sbrk_aligned>:
 8007cb4:	b570      	push	{r4, r5, r6, lr}
 8007cb6:	4e0e      	ldr	r6, [pc, #56]	; (8007cf0 <sbrk_aligned+0x3c>)
 8007cb8:	460c      	mov	r4, r1
 8007cba:	6831      	ldr	r1, [r6, #0]
 8007cbc:	4605      	mov	r5, r0
 8007cbe:	b911      	cbnz	r1, 8007cc6 <sbrk_aligned+0x12>
 8007cc0:	f000 f984 	bl	8007fcc <_sbrk_r>
 8007cc4:	6030      	str	r0, [r6, #0]
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	4628      	mov	r0, r5
 8007cca:	f000 f97f 	bl	8007fcc <_sbrk_r>
 8007cce:	1c43      	adds	r3, r0, #1
 8007cd0:	d00a      	beq.n	8007ce8 <sbrk_aligned+0x34>
 8007cd2:	1cc4      	adds	r4, r0, #3
 8007cd4:	f024 0403 	bic.w	r4, r4, #3
 8007cd8:	42a0      	cmp	r0, r4
 8007cda:	d007      	beq.n	8007cec <sbrk_aligned+0x38>
 8007cdc:	1a21      	subs	r1, r4, r0
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f000 f974 	bl	8007fcc <_sbrk_r>
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	d101      	bne.n	8007cec <sbrk_aligned+0x38>
 8007ce8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007cec:	4620      	mov	r0, r4
 8007cee:	bd70      	pop	{r4, r5, r6, pc}
 8007cf0:	20004334 	.word	0x20004334

08007cf4 <_malloc_r>:
 8007cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf8:	1ccd      	adds	r5, r1, #3
 8007cfa:	f025 0503 	bic.w	r5, r5, #3
 8007cfe:	3508      	adds	r5, #8
 8007d00:	2d0c      	cmp	r5, #12
 8007d02:	bf38      	it	cc
 8007d04:	250c      	movcc	r5, #12
 8007d06:	2d00      	cmp	r5, #0
 8007d08:	4607      	mov	r7, r0
 8007d0a:	db01      	blt.n	8007d10 <_malloc_r+0x1c>
 8007d0c:	42a9      	cmp	r1, r5
 8007d0e:	d905      	bls.n	8007d1c <_malloc_r+0x28>
 8007d10:	230c      	movs	r3, #12
 8007d12:	603b      	str	r3, [r7, #0]
 8007d14:	2600      	movs	r6, #0
 8007d16:	4630      	mov	r0, r6
 8007d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d1c:	4e2e      	ldr	r6, [pc, #184]	; (8007dd8 <_malloc_r+0xe4>)
 8007d1e:	f000 fbc5 	bl	80084ac <__malloc_lock>
 8007d22:	6833      	ldr	r3, [r6, #0]
 8007d24:	461c      	mov	r4, r3
 8007d26:	bb34      	cbnz	r4, 8007d76 <_malloc_r+0x82>
 8007d28:	4629      	mov	r1, r5
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	f7ff ffc2 	bl	8007cb4 <sbrk_aligned>
 8007d30:	1c43      	adds	r3, r0, #1
 8007d32:	4604      	mov	r4, r0
 8007d34:	d14d      	bne.n	8007dd2 <_malloc_r+0xde>
 8007d36:	6834      	ldr	r4, [r6, #0]
 8007d38:	4626      	mov	r6, r4
 8007d3a:	2e00      	cmp	r6, #0
 8007d3c:	d140      	bne.n	8007dc0 <_malloc_r+0xcc>
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	4631      	mov	r1, r6
 8007d42:	4638      	mov	r0, r7
 8007d44:	eb04 0803 	add.w	r8, r4, r3
 8007d48:	f000 f940 	bl	8007fcc <_sbrk_r>
 8007d4c:	4580      	cmp	r8, r0
 8007d4e:	d13a      	bne.n	8007dc6 <_malloc_r+0xd2>
 8007d50:	6821      	ldr	r1, [r4, #0]
 8007d52:	3503      	adds	r5, #3
 8007d54:	1a6d      	subs	r5, r5, r1
 8007d56:	f025 0503 	bic.w	r5, r5, #3
 8007d5a:	3508      	adds	r5, #8
 8007d5c:	2d0c      	cmp	r5, #12
 8007d5e:	bf38      	it	cc
 8007d60:	250c      	movcc	r5, #12
 8007d62:	4629      	mov	r1, r5
 8007d64:	4638      	mov	r0, r7
 8007d66:	f7ff ffa5 	bl	8007cb4 <sbrk_aligned>
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d02b      	beq.n	8007dc6 <_malloc_r+0xd2>
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	442b      	add	r3, r5
 8007d72:	6023      	str	r3, [r4, #0]
 8007d74:	e00e      	b.n	8007d94 <_malloc_r+0xa0>
 8007d76:	6822      	ldr	r2, [r4, #0]
 8007d78:	1b52      	subs	r2, r2, r5
 8007d7a:	d41e      	bmi.n	8007dba <_malloc_r+0xc6>
 8007d7c:	2a0b      	cmp	r2, #11
 8007d7e:	d916      	bls.n	8007dae <_malloc_r+0xba>
 8007d80:	1961      	adds	r1, r4, r5
 8007d82:	42a3      	cmp	r3, r4
 8007d84:	6025      	str	r5, [r4, #0]
 8007d86:	bf18      	it	ne
 8007d88:	6059      	strne	r1, [r3, #4]
 8007d8a:	6863      	ldr	r3, [r4, #4]
 8007d8c:	bf08      	it	eq
 8007d8e:	6031      	streq	r1, [r6, #0]
 8007d90:	5162      	str	r2, [r4, r5]
 8007d92:	604b      	str	r3, [r1, #4]
 8007d94:	4638      	mov	r0, r7
 8007d96:	f104 060b 	add.w	r6, r4, #11
 8007d9a:	f000 fb8d 	bl	80084b8 <__malloc_unlock>
 8007d9e:	f026 0607 	bic.w	r6, r6, #7
 8007da2:	1d23      	adds	r3, r4, #4
 8007da4:	1af2      	subs	r2, r6, r3
 8007da6:	d0b6      	beq.n	8007d16 <_malloc_r+0x22>
 8007da8:	1b9b      	subs	r3, r3, r6
 8007daa:	50a3      	str	r3, [r4, r2]
 8007dac:	e7b3      	b.n	8007d16 <_malloc_r+0x22>
 8007dae:	6862      	ldr	r2, [r4, #4]
 8007db0:	42a3      	cmp	r3, r4
 8007db2:	bf0c      	ite	eq
 8007db4:	6032      	streq	r2, [r6, #0]
 8007db6:	605a      	strne	r2, [r3, #4]
 8007db8:	e7ec      	b.n	8007d94 <_malloc_r+0xa0>
 8007dba:	4623      	mov	r3, r4
 8007dbc:	6864      	ldr	r4, [r4, #4]
 8007dbe:	e7b2      	b.n	8007d26 <_malloc_r+0x32>
 8007dc0:	4634      	mov	r4, r6
 8007dc2:	6876      	ldr	r6, [r6, #4]
 8007dc4:	e7b9      	b.n	8007d3a <_malloc_r+0x46>
 8007dc6:	230c      	movs	r3, #12
 8007dc8:	603b      	str	r3, [r7, #0]
 8007dca:	4638      	mov	r0, r7
 8007dcc:	f000 fb74 	bl	80084b8 <__malloc_unlock>
 8007dd0:	e7a1      	b.n	8007d16 <_malloc_r+0x22>
 8007dd2:	6025      	str	r5, [r4, #0]
 8007dd4:	e7de      	b.n	8007d94 <_malloc_r+0xa0>
 8007dd6:	bf00      	nop
 8007dd8:	20004330 	.word	0x20004330

08007ddc <iprintf>:
 8007ddc:	b40f      	push	{r0, r1, r2, r3}
 8007dde:	4b0a      	ldr	r3, [pc, #40]	; (8007e08 <iprintf+0x2c>)
 8007de0:	b513      	push	{r0, r1, r4, lr}
 8007de2:	681c      	ldr	r4, [r3, #0]
 8007de4:	b124      	cbz	r4, 8007df0 <iprintf+0x14>
 8007de6:	69a3      	ldr	r3, [r4, #24]
 8007de8:	b913      	cbnz	r3, 8007df0 <iprintf+0x14>
 8007dea:	4620      	mov	r0, r4
 8007dec:	f7ff fe94 	bl	8007b18 <__sinit>
 8007df0:	ab05      	add	r3, sp, #20
 8007df2:	9a04      	ldr	r2, [sp, #16]
 8007df4:	68a1      	ldr	r1, [r4, #8]
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f000 fbd9 	bl	80085b0 <_vfiprintf_r>
 8007dfe:	b002      	add	sp, #8
 8007e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e04:	b004      	add	sp, #16
 8007e06:	4770      	bx	lr
 8007e08:	20000010 	.word	0x20000010

08007e0c <_puts_r>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	460e      	mov	r6, r1
 8007e10:	4605      	mov	r5, r0
 8007e12:	b118      	cbz	r0, 8007e1c <_puts_r+0x10>
 8007e14:	6983      	ldr	r3, [r0, #24]
 8007e16:	b90b      	cbnz	r3, 8007e1c <_puts_r+0x10>
 8007e18:	f7ff fe7e 	bl	8007b18 <__sinit>
 8007e1c:	69ab      	ldr	r3, [r5, #24]
 8007e1e:	68ac      	ldr	r4, [r5, #8]
 8007e20:	b913      	cbnz	r3, 8007e28 <_puts_r+0x1c>
 8007e22:	4628      	mov	r0, r5
 8007e24:	f7ff fe78 	bl	8007b18 <__sinit>
 8007e28:	4b2c      	ldr	r3, [pc, #176]	; (8007edc <_puts_r+0xd0>)
 8007e2a:	429c      	cmp	r4, r3
 8007e2c:	d120      	bne.n	8007e70 <_puts_r+0x64>
 8007e2e:	686c      	ldr	r4, [r5, #4]
 8007e30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e32:	07db      	lsls	r3, r3, #31
 8007e34:	d405      	bmi.n	8007e42 <_puts_r+0x36>
 8007e36:	89a3      	ldrh	r3, [r4, #12]
 8007e38:	0598      	lsls	r0, r3, #22
 8007e3a:	d402      	bmi.n	8007e42 <_puts_r+0x36>
 8007e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e3e:	f7ff ff2e 	bl	8007c9e <__retarget_lock_acquire_recursive>
 8007e42:	89a3      	ldrh	r3, [r4, #12]
 8007e44:	0719      	lsls	r1, r3, #28
 8007e46:	d51d      	bpl.n	8007e84 <_puts_r+0x78>
 8007e48:	6923      	ldr	r3, [r4, #16]
 8007e4a:	b1db      	cbz	r3, 8007e84 <_puts_r+0x78>
 8007e4c:	3e01      	subs	r6, #1
 8007e4e:	68a3      	ldr	r3, [r4, #8]
 8007e50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e54:	3b01      	subs	r3, #1
 8007e56:	60a3      	str	r3, [r4, #8]
 8007e58:	bb39      	cbnz	r1, 8007eaa <_puts_r+0x9e>
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	da38      	bge.n	8007ed0 <_puts_r+0xc4>
 8007e5e:	4622      	mov	r2, r4
 8007e60:	210a      	movs	r1, #10
 8007e62:	4628      	mov	r0, r5
 8007e64:	f000 f906 	bl	8008074 <__swbuf_r>
 8007e68:	3001      	adds	r0, #1
 8007e6a:	d011      	beq.n	8007e90 <_puts_r+0x84>
 8007e6c:	250a      	movs	r5, #10
 8007e6e:	e011      	b.n	8007e94 <_puts_r+0x88>
 8007e70:	4b1b      	ldr	r3, [pc, #108]	; (8007ee0 <_puts_r+0xd4>)
 8007e72:	429c      	cmp	r4, r3
 8007e74:	d101      	bne.n	8007e7a <_puts_r+0x6e>
 8007e76:	68ac      	ldr	r4, [r5, #8]
 8007e78:	e7da      	b.n	8007e30 <_puts_r+0x24>
 8007e7a:	4b1a      	ldr	r3, [pc, #104]	; (8007ee4 <_puts_r+0xd8>)
 8007e7c:	429c      	cmp	r4, r3
 8007e7e:	bf08      	it	eq
 8007e80:	68ec      	ldreq	r4, [r5, #12]
 8007e82:	e7d5      	b.n	8007e30 <_puts_r+0x24>
 8007e84:	4621      	mov	r1, r4
 8007e86:	4628      	mov	r0, r5
 8007e88:	f000 f958 	bl	800813c <__swsetup_r>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d0dd      	beq.n	8007e4c <_puts_r+0x40>
 8007e90:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007e94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e96:	07da      	lsls	r2, r3, #31
 8007e98:	d405      	bmi.n	8007ea6 <_puts_r+0x9a>
 8007e9a:	89a3      	ldrh	r3, [r4, #12]
 8007e9c:	059b      	lsls	r3, r3, #22
 8007e9e:	d402      	bmi.n	8007ea6 <_puts_r+0x9a>
 8007ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ea2:	f7ff fefd 	bl	8007ca0 <__retarget_lock_release_recursive>
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	bd70      	pop	{r4, r5, r6, pc}
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	da04      	bge.n	8007eb8 <_puts_r+0xac>
 8007eae:	69a2      	ldr	r2, [r4, #24]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	dc06      	bgt.n	8007ec2 <_puts_r+0xb6>
 8007eb4:	290a      	cmp	r1, #10
 8007eb6:	d004      	beq.n	8007ec2 <_puts_r+0xb6>
 8007eb8:	6823      	ldr	r3, [r4, #0]
 8007eba:	1c5a      	adds	r2, r3, #1
 8007ebc:	6022      	str	r2, [r4, #0]
 8007ebe:	7019      	strb	r1, [r3, #0]
 8007ec0:	e7c5      	b.n	8007e4e <_puts_r+0x42>
 8007ec2:	4622      	mov	r2, r4
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	f000 f8d5 	bl	8008074 <__swbuf_r>
 8007eca:	3001      	adds	r0, #1
 8007ecc:	d1bf      	bne.n	8007e4e <_puts_r+0x42>
 8007ece:	e7df      	b.n	8007e90 <_puts_r+0x84>
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	250a      	movs	r5, #10
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	6022      	str	r2, [r4, #0]
 8007ed8:	701d      	strb	r5, [r3, #0]
 8007eda:	e7db      	b.n	8007e94 <_puts_r+0x88>
 8007edc:	08008eac 	.word	0x08008eac
 8007ee0:	08008ecc 	.word	0x08008ecc
 8007ee4:	08008e8c 	.word	0x08008e8c

08007ee8 <puts>:
 8007ee8:	4b02      	ldr	r3, [pc, #8]	; (8007ef4 <puts+0xc>)
 8007eea:	4601      	mov	r1, r0
 8007eec:	6818      	ldr	r0, [r3, #0]
 8007eee:	f7ff bf8d 	b.w	8007e0c <_puts_r>
 8007ef2:	bf00      	nop
 8007ef4:	20000010 	.word	0x20000010

08007ef8 <cleanup_glue>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	460c      	mov	r4, r1
 8007efc:	6809      	ldr	r1, [r1, #0]
 8007efe:	4605      	mov	r5, r0
 8007f00:	b109      	cbz	r1, 8007f06 <cleanup_glue+0xe>
 8007f02:	f7ff fff9 	bl	8007ef8 <cleanup_glue>
 8007f06:	4621      	mov	r1, r4
 8007f08:	4628      	mov	r0, r5
 8007f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f0e:	f000 bad9 	b.w	80084c4 <_free_r>
	...

08007f14 <_reclaim_reent>:
 8007f14:	4b2c      	ldr	r3, [pc, #176]	; (8007fc8 <_reclaim_reent+0xb4>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4283      	cmp	r3, r0
 8007f1a:	b570      	push	{r4, r5, r6, lr}
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	d051      	beq.n	8007fc4 <_reclaim_reent+0xb0>
 8007f20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007f22:	b143      	cbz	r3, 8007f36 <_reclaim_reent+0x22>
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d14a      	bne.n	8007fc0 <_reclaim_reent+0xac>
 8007f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f2c:	6819      	ldr	r1, [r3, #0]
 8007f2e:	b111      	cbz	r1, 8007f36 <_reclaim_reent+0x22>
 8007f30:	4620      	mov	r0, r4
 8007f32:	f000 fac7 	bl	80084c4 <_free_r>
 8007f36:	6961      	ldr	r1, [r4, #20]
 8007f38:	b111      	cbz	r1, 8007f40 <_reclaim_reent+0x2c>
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f000 fac2 	bl	80084c4 <_free_r>
 8007f40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007f42:	b111      	cbz	r1, 8007f4a <_reclaim_reent+0x36>
 8007f44:	4620      	mov	r0, r4
 8007f46:	f000 fabd 	bl	80084c4 <_free_r>
 8007f4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007f4c:	b111      	cbz	r1, 8007f54 <_reclaim_reent+0x40>
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f000 fab8 	bl	80084c4 <_free_r>
 8007f54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007f56:	b111      	cbz	r1, 8007f5e <_reclaim_reent+0x4a>
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f000 fab3 	bl	80084c4 <_free_r>
 8007f5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007f60:	b111      	cbz	r1, 8007f68 <_reclaim_reent+0x54>
 8007f62:	4620      	mov	r0, r4
 8007f64:	f000 faae 	bl	80084c4 <_free_r>
 8007f68:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007f6a:	b111      	cbz	r1, 8007f72 <_reclaim_reent+0x5e>
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f000 faa9 	bl	80084c4 <_free_r>
 8007f72:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007f74:	b111      	cbz	r1, 8007f7c <_reclaim_reent+0x68>
 8007f76:	4620      	mov	r0, r4
 8007f78:	f000 faa4 	bl	80084c4 <_free_r>
 8007f7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f7e:	b111      	cbz	r1, 8007f86 <_reclaim_reent+0x72>
 8007f80:	4620      	mov	r0, r4
 8007f82:	f000 fa9f 	bl	80084c4 <_free_r>
 8007f86:	69a3      	ldr	r3, [r4, #24]
 8007f88:	b1e3      	cbz	r3, 8007fc4 <_reclaim_reent+0xb0>
 8007f8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	4798      	blx	r3
 8007f90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007f92:	b1b9      	cbz	r1, 8007fc4 <_reclaim_reent+0xb0>
 8007f94:	4620      	mov	r0, r4
 8007f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f9a:	f7ff bfad 	b.w	8007ef8 <cleanup_glue>
 8007f9e:	5949      	ldr	r1, [r1, r5]
 8007fa0:	b941      	cbnz	r1, 8007fb4 <_reclaim_reent+0xa0>
 8007fa2:	3504      	adds	r5, #4
 8007fa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fa6:	2d80      	cmp	r5, #128	; 0x80
 8007fa8:	68d9      	ldr	r1, [r3, #12]
 8007faa:	d1f8      	bne.n	8007f9e <_reclaim_reent+0x8a>
 8007fac:	4620      	mov	r0, r4
 8007fae:	f000 fa89 	bl	80084c4 <_free_r>
 8007fb2:	e7ba      	b.n	8007f2a <_reclaim_reent+0x16>
 8007fb4:	680e      	ldr	r6, [r1, #0]
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f000 fa84 	bl	80084c4 <_free_r>
 8007fbc:	4631      	mov	r1, r6
 8007fbe:	e7ef      	b.n	8007fa0 <_reclaim_reent+0x8c>
 8007fc0:	2500      	movs	r5, #0
 8007fc2:	e7ef      	b.n	8007fa4 <_reclaim_reent+0x90>
 8007fc4:	bd70      	pop	{r4, r5, r6, pc}
 8007fc6:	bf00      	nop
 8007fc8:	20000010 	.word	0x20000010

08007fcc <_sbrk_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4d06      	ldr	r5, [pc, #24]	; (8007fe8 <_sbrk_r+0x1c>)
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	602b      	str	r3, [r5, #0]
 8007fd8:	f7f9 f85e 	bl	8001098 <_sbrk>
 8007fdc:	1c43      	adds	r3, r0, #1
 8007fde:	d102      	bne.n	8007fe6 <_sbrk_r+0x1a>
 8007fe0:	682b      	ldr	r3, [r5, #0]
 8007fe2:	b103      	cbz	r3, 8007fe6 <_sbrk_r+0x1a>
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}
 8007fe8:	20004338 	.word	0x20004338

08007fec <__sread>:
 8007fec:	b510      	push	{r4, lr}
 8007fee:	460c      	mov	r4, r1
 8007ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff4:	f000 fda0 	bl	8008b38 <_read_r>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	bfab      	itete	ge
 8007ffc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ffe:	89a3      	ldrhlt	r3, [r4, #12]
 8008000:	181b      	addge	r3, r3, r0
 8008002:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008006:	bfac      	ite	ge
 8008008:	6563      	strge	r3, [r4, #84]	; 0x54
 800800a:	81a3      	strhlt	r3, [r4, #12]
 800800c:	bd10      	pop	{r4, pc}

0800800e <__swrite>:
 800800e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008012:	461f      	mov	r7, r3
 8008014:	898b      	ldrh	r3, [r1, #12]
 8008016:	05db      	lsls	r3, r3, #23
 8008018:	4605      	mov	r5, r0
 800801a:	460c      	mov	r4, r1
 800801c:	4616      	mov	r6, r2
 800801e:	d505      	bpl.n	800802c <__swrite+0x1e>
 8008020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008024:	2302      	movs	r3, #2
 8008026:	2200      	movs	r2, #0
 8008028:	f000 f9c8 	bl	80083bc <_lseek_r>
 800802c:	89a3      	ldrh	r3, [r4, #12]
 800802e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008032:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008036:	81a3      	strh	r3, [r4, #12]
 8008038:	4632      	mov	r2, r6
 800803a:	463b      	mov	r3, r7
 800803c:	4628      	mov	r0, r5
 800803e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008042:	f000 b869 	b.w	8008118 <_write_r>

08008046 <__sseek>:
 8008046:	b510      	push	{r4, lr}
 8008048:	460c      	mov	r4, r1
 800804a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800804e:	f000 f9b5 	bl	80083bc <_lseek_r>
 8008052:	1c43      	adds	r3, r0, #1
 8008054:	89a3      	ldrh	r3, [r4, #12]
 8008056:	bf15      	itete	ne
 8008058:	6560      	strne	r0, [r4, #84]	; 0x54
 800805a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800805e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008062:	81a3      	strheq	r3, [r4, #12]
 8008064:	bf18      	it	ne
 8008066:	81a3      	strhne	r3, [r4, #12]
 8008068:	bd10      	pop	{r4, pc}

0800806a <__sclose>:
 800806a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800806e:	f000 b8d3 	b.w	8008218 <_close_r>
	...

08008074 <__swbuf_r>:
 8008074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008076:	460e      	mov	r6, r1
 8008078:	4614      	mov	r4, r2
 800807a:	4605      	mov	r5, r0
 800807c:	b118      	cbz	r0, 8008086 <__swbuf_r+0x12>
 800807e:	6983      	ldr	r3, [r0, #24]
 8008080:	b90b      	cbnz	r3, 8008086 <__swbuf_r+0x12>
 8008082:	f7ff fd49 	bl	8007b18 <__sinit>
 8008086:	4b21      	ldr	r3, [pc, #132]	; (800810c <__swbuf_r+0x98>)
 8008088:	429c      	cmp	r4, r3
 800808a:	d12b      	bne.n	80080e4 <__swbuf_r+0x70>
 800808c:	686c      	ldr	r4, [r5, #4]
 800808e:	69a3      	ldr	r3, [r4, #24]
 8008090:	60a3      	str	r3, [r4, #8]
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	071a      	lsls	r2, r3, #28
 8008096:	d52f      	bpl.n	80080f8 <__swbuf_r+0x84>
 8008098:	6923      	ldr	r3, [r4, #16]
 800809a:	b36b      	cbz	r3, 80080f8 <__swbuf_r+0x84>
 800809c:	6923      	ldr	r3, [r4, #16]
 800809e:	6820      	ldr	r0, [r4, #0]
 80080a0:	1ac0      	subs	r0, r0, r3
 80080a2:	6963      	ldr	r3, [r4, #20]
 80080a4:	b2f6      	uxtb	r6, r6
 80080a6:	4283      	cmp	r3, r0
 80080a8:	4637      	mov	r7, r6
 80080aa:	dc04      	bgt.n	80080b6 <__swbuf_r+0x42>
 80080ac:	4621      	mov	r1, r4
 80080ae:	4628      	mov	r0, r5
 80080b0:	f000 f948 	bl	8008344 <_fflush_r>
 80080b4:	bb30      	cbnz	r0, 8008104 <__swbuf_r+0x90>
 80080b6:	68a3      	ldr	r3, [r4, #8]
 80080b8:	3b01      	subs	r3, #1
 80080ba:	60a3      	str	r3, [r4, #8]
 80080bc:	6823      	ldr	r3, [r4, #0]
 80080be:	1c5a      	adds	r2, r3, #1
 80080c0:	6022      	str	r2, [r4, #0]
 80080c2:	701e      	strb	r6, [r3, #0]
 80080c4:	6963      	ldr	r3, [r4, #20]
 80080c6:	3001      	adds	r0, #1
 80080c8:	4283      	cmp	r3, r0
 80080ca:	d004      	beq.n	80080d6 <__swbuf_r+0x62>
 80080cc:	89a3      	ldrh	r3, [r4, #12]
 80080ce:	07db      	lsls	r3, r3, #31
 80080d0:	d506      	bpl.n	80080e0 <__swbuf_r+0x6c>
 80080d2:	2e0a      	cmp	r6, #10
 80080d4:	d104      	bne.n	80080e0 <__swbuf_r+0x6c>
 80080d6:	4621      	mov	r1, r4
 80080d8:	4628      	mov	r0, r5
 80080da:	f000 f933 	bl	8008344 <_fflush_r>
 80080de:	b988      	cbnz	r0, 8008104 <__swbuf_r+0x90>
 80080e0:	4638      	mov	r0, r7
 80080e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080e4:	4b0a      	ldr	r3, [pc, #40]	; (8008110 <__swbuf_r+0x9c>)
 80080e6:	429c      	cmp	r4, r3
 80080e8:	d101      	bne.n	80080ee <__swbuf_r+0x7a>
 80080ea:	68ac      	ldr	r4, [r5, #8]
 80080ec:	e7cf      	b.n	800808e <__swbuf_r+0x1a>
 80080ee:	4b09      	ldr	r3, [pc, #36]	; (8008114 <__swbuf_r+0xa0>)
 80080f0:	429c      	cmp	r4, r3
 80080f2:	bf08      	it	eq
 80080f4:	68ec      	ldreq	r4, [r5, #12]
 80080f6:	e7ca      	b.n	800808e <__swbuf_r+0x1a>
 80080f8:	4621      	mov	r1, r4
 80080fa:	4628      	mov	r0, r5
 80080fc:	f000 f81e 	bl	800813c <__swsetup_r>
 8008100:	2800      	cmp	r0, #0
 8008102:	d0cb      	beq.n	800809c <__swbuf_r+0x28>
 8008104:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008108:	e7ea      	b.n	80080e0 <__swbuf_r+0x6c>
 800810a:	bf00      	nop
 800810c:	08008eac 	.word	0x08008eac
 8008110:	08008ecc 	.word	0x08008ecc
 8008114:	08008e8c 	.word	0x08008e8c

08008118 <_write_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	4d07      	ldr	r5, [pc, #28]	; (8008138 <_write_r+0x20>)
 800811c:	4604      	mov	r4, r0
 800811e:	4608      	mov	r0, r1
 8008120:	4611      	mov	r1, r2
 8008122:	2200      	movs	r2, #0
 8008124:	602a      	str	r2, [r5, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	f7f8 ff65 	bl	8000ff6 <_write>
 800812c:	1c43      	adds	r3, r0, #1
 800812e:	d102      	bne.n	8008136 <_write_r+0x1e>
 8008130:	682b      	ldr	r3, [r5, #0]
 8008132:	b103      	cbz	r3, 8008136 <_write_r+0x1e>
 8008134:	6023      	str	r3, [r4, #0]
 8008136:	bd38      	pop	{r3, r4, r5, pc}
 8008138:	20004338 	.word	0x20004338

0800813c <__swsetup_r>:
 800813c:	4b32      	ldr	r3, [pc, #200]	; (8008208 <__swsetup_r+0xcc>)
 800813e:	b570      	push	{r4, r5, r6, lr}
 8008140:	681d      	ldr	r5, [r3, #0]
 8008142:	4606      	mov	r6, r0
 8008144:	460c      	mov	r4, r1
 8008146:	b125      	cbz	r5, 8008152 <__swsetup_r+0x16>
 8008148:	69ab      	ldr	r3, [r5, #24]
 800814a:	b913      	cbnz	r3, 8008152 <__swsetup_r+0x16>
 800814c:	4628      	mov	r0, r5
 800814e:	f7ff fce3 	bl	8007b18 <__sinit>
 8008152:	4b2e      	ldr	r3, [pc, #184]	; (800820c <__swsetup_r+0xd0>)
 8008154:	429c      	cmp	r4, r3
 8008156:	d10f      	bne.n	8008178 <__swsetup_r+0x3c>
 8008158:	686c      	ldr	r4, [r5, #4]
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008160:	0719      	lsls	r1, r3, #28
 8008162:	d42c      	bmi.n	80081be <__swsetup_r+0x82>
 8008164:	06dd      	lsls	r5, r3, #27
 8008166:	d411      	bmi.n	800818c <__swsetup_r+0x50>
 8008168:	2309      	movs	r3, #9
 800816a:	6033      	str	r3, [r6, #0]
 800816c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008170:	81a3      	strh	r3, [r4, #12]
 8008172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008176:	e03e      	b.n	80081f6 <__swsetup_r+0xba>
 8008178:	4b25      	ldr	r3, [pc, #148]	; (8008210 <__swsetup_r+0xd4>)
 800817a:	429c      	cmp	r4, r3
 800817c:	d101      	bne.n	8008182 <__swsetup_r+0x46>
 800817e:	68ac      	ldr	r4, [r5, #8]
 8008180:	e7eb      	b.n	800815a <__swsetup_r+0x1e>
 8008182:	4b24      	ldr	r3, [pc, #144]	; (8008214 <__swsetup_r+0xd8>)
 8008184:	429c      	cmp	r4, r3
 8008186:	bf08      	it	eq
 8008188:	68ec      	ldreq	r4, [r5, #12]
 800818a:	e7e6      	b.n	800815a <__swsetup_r+0x1e>
 800818c:	0758      	lsls	r0, r3, #29
 800818e:	d512      	bpl.n	80081b6 <__swsetup_r+0x7a>
 8008190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008192:	b141      	cbz	r1, 80081a6 <__swsetup_r+0x6a>
 8008194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008198:	4299      	cmp	r1, r3
 800819a:	d002      	beq.n	80081a2 <__swsetup_r+0x66>
 800819c:	4630      	mov	r0, r6
 800819e:	f000 f991 	bl	80084c4 <_free_r>
 80081a2:	2300      	movs	r3, #0
 80081a4:	6363      	str	r3, [r4, #52]	; 0x34
 80081a6:	89a3      	ldrh	r3, [r4, #12]
 80081a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081ac:	81a3      	strh	r3, [r4, #12]
 80081ae:	2300      	movs	r3, #0
 80081b0:	6063      	str	r3, [r4, #4]
 80081b2:	6923      	ldr	r3, [r4, #16]
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	89a3      	ldrh	r3, [r4, #12]
 80081b8:	f043 0308 	orr.w	r3, r3, #8
 80081bc:	81a3      	strh	r3, [r4, #12]
 80081be:	6923      	ldr	r3, [r4, #16]
 80081c0:	b94b      	cbnz	r3, 80081d6 <__swsetup_r+0x9a>
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081cc:	d003      	beq.n	80081d6 <__swsetup_r+0x9a>
 80081ce:	4621      	mov	r1, r4
 80081d0:	4630      	mov	r0, r6
 80081d2:	f000 f92b 	bl	800842c <__smakebuf_r>
 80081d6:	89a0      	ldrh	r0, [r4, #12]
 80081d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081dc:	f010 0301 	ands.w	r3, r0, #1
 80081e0:	d00a      	beq.n	80081f8 <__swsetup_r+0xbc>
 80081e2:	2300      	movs	r3, #0
 80081e4:	60a3      	str	r3, [r4, #8]
 80081e6:	6963      	ldr	r3, [r4, #20]
 80081e8:	425b      	negs	r3, r3
 80081ea:	61a3      	str	r3, [r4, #24]
 80081ec:	6923      	ldr	r3, [r4, #16]
 80081ee:	b943      	cbnz	r3, 8008202 <__swsetup_r+0xc6>
 80081f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081f4:	d1ba      	bne.n	800816c <__swsetup_r+0x30>
 80081f6:	bd70      	pop	{r4, r5, r6, pc}
 80081f8:	0781      	lsls	r1, r0, #30
 80081fa:	bf58      	it	pl
 80081fc:	6963      	ldrpl	r3, [r4, #20]
 80081fe:	60a3      	str	r3, [r4, #8]
 8008200:	e7f4      	b.n	80081ec <__swsetup_r+0xb0>
 8008202:	2000      	movs	r0, #0
 8008204:	e7f7      	b.n	80081f6 <__swsetup_r+0xba>
 8008206:	bf00      	nop
 8008208:	20000010 	.word	0x20000010
 800820c:	08008eac 	.word	0x08008eac
 8008210:	08008ecc 	.word	0x08008ecc
 8008214:	08008e8c 	.word	0x08008e8c

08008218 <_close_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	4d06      	ldr	r5, [pc, #24]	; (8008234 <_close_r+0x1c>)
 800821c:	2300      	movs	r3, #0
 800821e:	4604      	mov	r4, r0
 8008220:	4608      	mov	r0, r1
 8008222:	602b      	str	r3, [r5, #0]
 8008224:	f7f8 ff03 	bl	800102e <_close>
 8008228:	1c43      	adds	r3, r0, #1
 800822a:	d102      	bne.n	8008232 <_close_r+0x1a>
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	b103      	cbz	r3, 8008232 <_close_r+0x1a>
 8008230:	6023      	str	r3, [r4, #0]
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	20004338 	.word	0x20004338

08008238 <__sflush_r>:
 8008238:	898a      	ldrh	r2, [r1, #12]
 800823a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800823e:	4605      	mov	r5, r0
 8008240:	0710      	lsls	r0, r2, #28
 8008242:	460c      	mov	r4, r1
 8008244:	d458      	bmi.n	80082f8 <__sflush_r+0xc0>
 8008246:	684b      	ldr	r3, [r1, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	dc05      	bgt.n	8008258 <__sflush_r+0x20>
 800824c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800824e:	2b00      	cmp	r3, #0
 8008250:	dc02      	bgt.n	8008258 <__sflush_r+0x20>
 8008252:	2000      	movs	r0, #0
 8008254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008258:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800825a:	2e00      	cmp	r6, #0
 800825c:	d0f9      	beq.n	8008252 <__sflush_r+0x1a>
 800825e:	2300      	movs	r3, #0
 8008260:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008264:	682f      	ldr	r7, [r5, #0]
 8008266:	602b      	str	r3, [r5, #0]
 8008268:	d032      	beq.n	80082d0 <__sflush_r+0x98>
 800826a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	075a      	lsls	r2, r3, #29
 8008270:	d505      	bpl.n	800827e <__sflush_r+0x46>
 8008272:	6863      	ldr	r3, [r4, #4]
 8008274:	1ac0      	subs	r0, r0, r3
 8008276:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008278:	b10b      	cbz	r3, 800827e <__sflush_r+0x46>
 800827a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800827c:	1ac0      	subs	r0, r0, r3
 800827e:	2300      	movs	r3, #0
 8008280:	4602      	mov	r2, r0
 8008282:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008284:	6a21      	ldr	r1, [r4, #32]
 8008286:	4628      	mov	r0, r5
 8008288:	47b0      	blx	r6
 800828a:	1c43      	adds	r3, r0, #1
 800828c:	89a3      	ldrh	r3, [r4, #12]
 800828e:	d106      	bne.n	800829e <__sflush_r+0x66>
 8008290:	6829      	ldr	r1, [r5, #0]
 8008292:	291d      	cmp	r1, #29
 8008294:	d82c      	bhi.n	80082f0 <__sflush_r+0xb8>
 8008296:	4a2a      	ldr	r2, [pc, #168]	; (8008340 <__sflush_r+0x108>)
 8008298:	40ca      	lsrs	r2, r1
 800829a:	07d6      	lsls	r6, r2, #31
 800829c:	d528      	bpl.n	80082f0 <__sflush_r+0xb8>
 800829e:	2200      	movs	r2, #0
 80082a0:	6062      	str	r2, [r4, #4]
 80082a2:	04d9      	lsls	r1, r3, #19
 80082a4:	6922      	ldr	r2, [r4, #16]
 80082a6:	6022      	str	r2, [r4, #0]
 80082a8:	d504      	bpl.n	80082b4 <__sflush_r+0x7c>
 80082aa:	1c42      	adds	r2, r0, #1
 80082ac:	d101      	bne.n	80082b2 <__sflush_r+0x7a>
 80082ae:	682b      	ldr	r3, [r5, #0]
 80082b0:	b903      	cbnz	r3, 80082b4 <__sflush_r+0x7c>
 80082b2:	6560      	str	r0, [r4, #84]	; 0x54
 80082b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082b6:	602f      	str	r7, [r5, #0]
 80082b8:	2900      	cmp	r1, #0
 80082ba:	d0ca      	beq.n	8008252 <__sflush_r+0x1a>
 80082bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082c0:	4299      	cmp	r1, r3
 80082c2:	d002      	beq.n	80082ca <__sflush_r+0x92>
 80082c4:	4628      	mov	r0, r5
 80082c6:	f000 f8fd 	bl	80084c4 <_free_r>
 80082ca:	2000      	movs	r0, #0
 80082cc:	6360      	str	r0, [r4, #52]	; 0x34
 80082ce:	e7c1      	b.n	8008254 <__sflush_r+0x1c>
 80082d0:	6a21      	ldr	r1, [r4, #32]
 80082d2:	2301      	movs	r3, #1
 80082d4:	4628      	mov	r0, r5
 80082d6:	47b0      	blx	r6
 80082d8:	1c41      	adds	r1, r0, #1
 80082da:	d1c7      	bne.n	800826c <__sflush_r+0x34>
 80082dc:	682b      	ldr	r3, [r5, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d0c4      	beq.n	800826c <__sflush_r+0x34>
 80082e2:	2b1d      	cmp	r3, #29
 80082e4:	d001      	beq.n	80082ea <__sflush_r+0xb2>
 80082e6:	2b16      	cmp	r3, #22
 80082e8:	d101      	bne.n	80082ee <__sflush_r+0xb6>
 80082ea:	602f      	str	r7, [r5, #0]
 80082ec:	e7b1      	b.n	8008252 <__sflush_r+0x1a>
 80082ee:	89a3      	ldrh	r3, [r4, #12]
 80082f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082f4:	81a3      	strh	r3, [r4, #12]
 80082f6:	e7ad      	b.n	8008254 <__sflush_r+0x1c>
 80082f8:	690f      	ldr	r7, [r1, #16]
 80082fa:	2f00      	cmp	r7, #0
 80082fc:	d0a9      	beq.n	8008252 <__sflush_r+0x1a>
 80082fe:	0793      	lsls	r3, r2, #30
 8008300:	680e      	ldr	r6, [r1, #0]
 8008302:	bf08      	it	eq
 8008304:	694b      	ldreq	r3, [r1, #20]
 8008306:	600f      	str	r7, [r1, #0]
 8008308:	bf18      	it	ne
 800830a:	2300      	movne	r3, #0
 800830c:	eba6 0807 	sub.w	r8, r6, r7
 8008310:	608b      	str	r3, [r1, #8]
 8008312:	f1b8 0f00 	cmp.w	r8, #0
 8008316:	dd9c      	ble.n	8008252 <__sflush_r+0x1a>
 8008318:	6a21      	ldr	r1, [r4, #32]
 800831a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800831c:	4643      	mov	r3, r8
 800831e:	463a      	mov	r2, r7
 8008320:	4628      	mov	r0, r5
 8008322:	47b0      	blx	r6
 8008324:	2800      	cmp	r0, #0
 8008326:	dc06      	bgt.n	8008336 <__sflush_r+0xfe>
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800832e:	81a3      	strh	r3, [r4, #12]
 8008330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008334:	e78e      	b.n	8008254 <__sflush_r+0x1c>
 8008336:	4407      	add	r7, r0
 8008338:	eba8 0800 	sub.w	r8, r8, r0
 800833c:	e7e9      	b.n	8008312 <__sflush_r+0xda>
 800833e:	bf00      	nop
 8008340:	20400001 	.word	0x20400001

08008344 <_fflush_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	690b      	ldr	r3, [r1, #16]
 8008348:	4605      	mov	r5, r0
 800834a:	460c      	mov	r4, r1
 800834c:	b913      	cbnz	r3, 8008354 <_fflush_r+0x10>
 800834e:	2500      	movs	r5, #0
 8008350:	4628      	mov	r0, r5
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	b118      	cbz	r0, 800835e <_fflush_r+0x1a>
 8008356:	6983      	ldr	r3, [r0, #24]
 8008358:	b90b      	cbnz	r3, 800835e <_fflush_r+0x1a>
 800835a:	f7ff fbdd 	bl	8007b18 <__sinit>
 800835e:	4b14      	ldr	r3, [pc, #80]	; (80083b0 <_fflush_r+0x6c>)
 8008360:	429c      	cmp	r4, r3
 8008362:	d11b      	bne.n	800839c <_fflush_r+0x58>
 8008364:	686c      	ldr	r4, [r5, #4]
 8008366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0ef      	beq.n	800834e <_fflush_r+0xa>
 800836e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008370:	07d0      	lsls	r0, r2, #31
 8008372:	d404      	bmi.n	800837e <_fflush_r+0x3a>
 8008374:	0599      	lsls	r1, r3, #22
 8008376:	d402      	bmi.n	800837e <_fflush_r+0x3a>
 8008378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800837a:	f7ff fc90 	bl	8007c9e <__retarget_lock_acquire_recursive>
 800837e:	4628      	mov	r0, r5
 8008380:	4621      	mov	r1, r4
 8008382:	f7ff ff59 	bl	8008238 <__sflush_r>
 8008386:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008388:	07da      	lsls	r2, r3, #31
 800838a:	4605      	mov	r5, r0
 800838c:	d4e0      	bmi.n	8008350 <_fflush_r+0xc>
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	059b      	lsls	r3, r3, #22
 8008392:	d4dd      	bmi.n	8008350 <_fflush_r+0xc>
 8008394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008396:	f7ff fc83 	bl	8007ca0 <__retarget_lock_release_recursive>
 800839a:	e7d9      	b.n	8008350 <_fflush_r+0xc>
 800839c:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <_fflush_r+0x70>)
 800839e:	429c      	cmp	r4, r3
 80083a0:	d101      	bne.n	80083a6 <_fflush_r+0x62>
 80083a2:	68ac      	ldr	r4, [r5, #8]
 80083a4:	e7df      	b.n	8008366 <_fflush_r+0x22>
 80083a6:	4b04      	ldr	r3, [pc, #16]	; (80083b8 <_fflush_r+0x74>)
 80083a8:	429c      	cmp	r4, r3
 80083aa:	bf08      	it	eq
 80083ac:	68ec      	ldreq	r4, [r5, #12]
 80083ae:	e7da      	b.n	8008366 <_fflush_r+0x22>
 80083b0:	08008eac 	.word	0x08008eac
 80083b4:	08008ecc 	.word	0x08008ecc
 80083b8:	08008e8c 	.word	0x08008e8c

080083bc <_lseek_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	4d07      	ldr	r5, [pc, #28]	; (80083dc <_lseek_r+0x20>)
 80083c0:	4604      	mov	r4, r0
 80083c2:	4608      	mov	r0, r1
 80083c4:	4611      	mov	r1, r2
 80083c6:	2200      	movs	r2, #0
 80083c8:	602a      	str	r2, [r5, #0]
 80083ca:	461a      	mov	r2, r3
 80083cc:	f7f8 fe56 	bl	800107c <_lseek>
 80083d0:	1c43      	adds	r3, r0, #1
 80083d2:	d102      	bne.n	80083da <_lseek_r+0x1e>
 80083d4:	682b      	ldr	r3, [r5, #0]
 80083d6:	b103      	cbz	r3, 80083da <_lseek_r+0x1e>
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	bd38      	pop	{r3, r4, r5, pc}
 80083dc:	20004338 	.word	0x20004338

080083e0 <__swhatbuf_r>:
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	460e      	mov	r6, r1
 80083e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e8:	2900      	cmp	r1, #0
 80083ea:	b096      	sub	sp, #88	; 0x58
 80083ec:	4614      	mov	r4, r2
 80083ee:	461d      	mov	r5, r3
 80083f0:	da08      	bge.n	8008404 <__swhatbuf_r+0x24>
 80083f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	602a      	str	r2, [r5, #0]
 80083fa:	061a      	lsls	r2, r3, #24
 80083fc:	d410      	bmi.n	8008420 <__swhatbuf_r+0x40>
 80083fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008402:	e00e      	b.n	8008422 <__swhatbuf_r+0x42>
 8008404:	466a      	mov	r2, sp
 8008406:	f000 fba9 	bl	8008b5c <_fstat_r>
 800840a:	2800      	cmp	r0, #0
 800840c:	dbf1      	blt.n	80083f2 <__swhatbuf_r+0x12>
 800840e:	9a01      	ldr	r2, [sp, #4]
 8008410:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008414:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008418:	425a      	negs	r2, r3
 800841a:	415a      	adcs	r2, r3
 800841c:	602a      	str	r2, [r5, #0]
 800841e:	e7ee      	b.n	80083fe <__swhatbuf_r+0x1e>
 8008420:	2340      	movs	r3, #64	; 0x40
 8008422:	2000      	movs	r0, #0
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	b016      	add	sp, #88	; 0x58
 8008428:	bd70      	pop	{r4, r5, r6, pc}
	...

0800842c <__smakebuf_r>:
 800842c:	898b      	ldrh	r3, [r1, #12]
 800842e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008430:	079d      	lsls	r5, r3, #30
 8008432:	4606      	mov	r6, r0
 8008434:	460c      	mov	r4, r1
 8008436:	d507      	bpl.n	8008448 <__smakebuf_r+0x1c>
 8008438:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	6123      	str	r3, [r4, #16]
 8008440:	2301      	movs	r3, #1
 8008442:	6163      	str	r3, [r4, #20]
 8008444:	b002      	add	sp, #8
 8008446:	bd70      	pop	{r4, r5, r6, pc}
 8008448:	ab01      	add	r3, sp, #4
 800844a:	466a      	mov	r2, sp
 800844c:	f7ff ffc8 	bl	80083e0 <__swhatbuf_r>
 8008450:	9900      	ldr	r1, [sp, #0]
 8008452:	4605      	mov	r5, r0
 8008454:	4630      	mov	r0, r6
 8008456:	f7ff fc4d 	bl	8007cf4 <_malloc_r>
 800845a:	b948      	cbnz	r0, 8008470 <__smakebuf_r+0x44>
 800845c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008460:	059a      	lsls	r2, r3, #22
 8008462:	d4ef      	bmi.n	8008444 <__smakebuf_r+0x18>
 8008464:	f023 0303 	bic.w	r3, r3, #3
 8008468:	f043 0302 	orr.w	r3, r3, #2
 800846c:	81a3      	strh	r3, [r4, #12]
 800846e:	e7e3      	b.n	8008438 <__smakebuf_r+0xc>
 8008470:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <__smakebuf_r+0x7c>)
 8008472:	62b3      	str	r3, [r6, #40]	; 0x28
 8008474:	89a3      	ldrh	r3, [r4, #12]
 8008476:	6020      	str	r0, [r4, #0]
 8008478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800847c:	81a3      	strh	r3, [r4, #12]
 800847e:	9b00      	ldr	r3, [sp, #0]
 8008480:	6163      	str	r3, [r4, #20]
 8008482:	9b01      	ldr	r3, [sp, #4]
 8008484:	6120      	str	r0, [r4, #16]
 8008486:	b15b      	cbz	r3, 80084a0 <__smakebuf_r+0x74>
 8008488:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800848c:	4630      	mov	r0, r6
 800848e:	f000 fb77 	bl	8008b80 <_isatty_r>
 8008492:	b128      	cbz	r0, 80084a0 <__smakebuf_r+0x74>
 8008494:	89a3      	ldrh	r3, [r4, #12]
 8008496:	f023 0303 	bic.w	r3, r3, #3
 800849a:	f043 0301 	orr.w	r3, r3, #1
 800849e:	81a3      	strh	r3, [r4, #12]
 80084a0:	89a0      	ldrh	r0, [r4, #12]
 80084a2:	4305      	orrs	r5, r0
 80084a4:	81a5      	strh	r5, [r4, #12]
 80084a6:	e7cd      	b.n	8008444 <__smakebuf_r+0x18>
 80084a8:	08007ab1 	.word	0x08007ab1

080084ac <__malloc_lock>:
 80084ac:	4801      	ldr	r0, [pc, #4]	; (80084b4 <__malloc_lock+0x8>)
 80084ae:	f7ff bbf6 	b.w	8007c9e <__retarget_lock_acquire_recursive>
 80084b2:	bf00      	nop
 80084b4:	2000432c 	.word	0x2000432c

080084b8 <__malloc_unlock>:
 80084b8:	4801      	ldr	r0, [pc, #4]	; (80084c0 <__malloc_unlock+0x8>)
 80084ba:	f7ff bbf1 	b.w	8007ca0 <__retarget_lock_release_recursive>
 80084be:	bf00      	nop
 80084c0:	2000432c 	.word	0x2000432c

080084c4 <_free_r>:
 80084c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084c6:	2900      	cmp	r1, #0
 80084c8:	d044      	beq.n	8008554 <_free_r+0x90>
 80084ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084ce:	9001      	str	r0, [sp, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f1a1 0404 	sub.w	r4, r1, #4
 80084d6:	bfb8      	it	lt
 80084d8:	18e4      	addlt	r4, r4, r3
 80084da:	f7ff ffe7 	bl	80084ac <__malloc_lock>
 80084de:	4a1e      	ldr	r2, [pc, #120]	; (8008558 <_free_r+0x94>)
 80084e0:	9801      	ldr	r0, [sp, #4]
 80084e2:	6813      	ldr	r3, [r2, #0]
 80084e4:	b933      	cbnz	r3, 80084f4 <_free_r+0x30>
 80084e6:	6063      	str	r3, [r4, #4]
 80084e8:	6014      	str	r4, [r2, #0]
 80084ea:	b003      	add	sp, #12
 80084ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084f0:	f7ff bfe2 	b.w	80084b8 <__malloc_unlock>
 80084f4:	42a3      	cmp	r3, r4
 80084f6:	d908      	bls.n	800850a <_free_r+0x46>
 80084f8:	6825      	ldr	r5, [r4, #0]
 80084fa:	1961      	adds	r1, r4, r5
 80084fc:	428b      	cmp	r3, r1
 80084fe:	bf01      	itttt	eq
 8008500:	6819      	ldreq	r1, [r3, #0]
 8008502:	685b      	ldreq	r3, [r3, #4]
 8008504:	1949      	addeq	r1, r1, r5
 8008506:	6021      	streq	r1, [r4, #0]
 8008508:	e7ed      	b.n	80084e6 <_free_r+0x22>
 800850a:	461a      	mov	r2, r3
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	b10b      	cbz	r3, 8008514 <_free_r+0x50>
 8008510:	42a3      	cmp	r3, r4
 8008512:	d9fa      	bls.n	800850a <_free_r+0x46>
 8008514:	6811      	ldr	r1, [r2, #0]
 8008516:	1855      	adds	r5, r2, r1
 8008518:	42a5      	cmp	r5, r4
 800851a:	d10b      	bne.n	8008534 <_free_r+0x70>
 800851c:	6824      	ldr	r4, [r4, #0]
 800851e:	4421      	add	r1, r4
 8008520:	1854      	adds	r4, r2, r1
 8008522:	42a3      	cmp	r3, r4
 8008524:	6011      	str	r1, [r2, #0]
 8008526:	d1e0      	bne.n	80084ea <_free_r+0x26>
 8008528:	681c      	ldr	r4, [r3, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	6053      	str	r3, [r2, #4]
 800852e:	4421      	add	r1, r4
 8008530:	6011      	str	r1, [r2, #0]
 8008532:	e7da      	b.n	80084ea <_free_r+0x26>
 8008534:	d902      	bls.n	800853c <_free_r+0x78>
 8008536:	230c      	movs	r3, #12
 8008538:	6003      	str	r3, [r0, #0]
 800853a:	e7d6      	b.n	80084ea <_free_r+0x26>
 800853c:	6825      	ldr	r5, [r4, #0]
 800853e:	1961      	adds	r1, r4, r5
 8008540:	428b      	cmp	r3, r1
 8008542:	bf04      	itt	eq
 8008544:	6819      	ldreq	r1, [r3, #0]
 8008546:	685b      	ldreq	r3, [r3, #4]
 8008548:	6063      	str	r3, [r4, #4]
 800854a:	bf04      	itt	eq
 800854c:	1949      	addeq	r1, r1, r5
 800854e:	6021      	streq	r1, [r4, #0]
 8008550:	6054      	str	r4, [r2, #4]
 8008552:	e7ca      	b.n	80084ea <_free_r+0x26>
 8008554:	b003      	add	sp, #12
 8008556:	bd30      	pop	{r4, r5, pc}
 8008558:	20004330 	.word	0x20004330

0800855c <__sfputc_r>:
 800855c:	6893      	ldr	r3, [r2, #8]
 800855e:	3b01      	subs	r3, #1
 8008560:	2b00      	cmp	r3, #0
 8008562:	b410      	push	{r4}
 8008564:	6093      	str	r3, [r2, #8]
 8008566:	da08      	bge.n	800857a <__sfputc_r+0x1e>
 8008568:	6994      	ldr	r4, [r2, #24]
 800856a:	42a3      	cmp	r3, r4
 800856c:	db01      	blt.n	8008572 <__sfputc_r+0x16>
 800856e:	290a      	cmp	r1, #10
 8008570:	d103      	bne.n	800857a <__sfputc_r+0x1e>
 8008572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008576:	f7ff bd7d 	b.w	8008074 <__swbuf_r>
 800857a:	6813      	ldr	r3, [r2, #0]
 800857c:	1c58      	adds	r0, r3, #1
 800857e:	6010      	str	r0, [r2, #0]
 8008580:	7019      	strb	r1, [r3, #0]
 8008582:	4608      	mov	r0, r1
 8008584:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008588:	4770      	bx	lr

0800858a <__sfputs_r>:
 800858a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858c:	4606      	mov	r6, r0
 800858e:	460f      	mov	r7, r1
 8008590:	4614      	mov	r4, r2
 8008592:	18d5      	adds	r5, r2, r3
 8008594:	42ac      	cmp	r4, r5
 8008596:	d101      	bne.n	800859c <__sfputs_r+0x12>
 8008598:	2000      	movs	r0, #0
 800859a:	e007      	b.n	80085ac <__sfputs_r+0x22>
 800859c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a0:	463a      	mov	r2, r7
 80085a2:	4630      	mov	r0, r6
 80085a4:	f7ff ffda 	bl	800855c <__sfputc_r>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d1f3      	bne.n	8008594 <__sfputs_r+0xa>
 80085ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085b0 <_vfiprintf_r>:
 80085b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	460d      	mov	r5, r1
 80085b6:	b09d      	sub	sp, #116	; 0x74
 80085b8:	4614      	mov	r4, r2
 80085ba:	4698      	mov	r8, r3
 80085bc:	4606      	mov	r6, r0
 80085be:	b118      	cbz	r0, 80085c8 <_vfiprintf_r+0x18>
 80085c0:	6983      	ldr	r3, [r0, #24]
 80085c2:	b90b      	cbnz	r3, 80085c8 <_vfiprintf_r+0x18>
 80085c4:	f7ff faa8 	bl	8007b18 <__sinit>
 80085c8:	4b89      	ldr	r3, [pc, #548]	; (80087f0 <_vfiprintf_r+0x240>)
 80085ca:	429d      	cmp	r5, r3
 80085cc:	d11b      	bne.n	8008606 <_vfiprintf_r+0x56>
 80085ce:	6875      	ldr	r5, [r6, #4]
 80085d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085d2:	07d9      	lsls	r1, r3, #31
 80085d4:	d405      	bmi.n	80085e2 <_vfiprintf_r+0x32>
 80085d6:	89ab      	ldrh	r3, [r5, #12]
 80085d8:	059a      	lsls	r2, r3, #22
 80085da:	d402      	bmi.n	80085e2 <_vfiprintf_r+0x32>
 80085dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085de:	f7ff fb5e 	bl	8007c9e <__retarget_lock_acquire_recursive>
 80085e2:	89ab      	ldrh	r3, [r5, #12]
 80085e4:	071b      	lsls	r3, r3, #28
 80085e6:	d501      	bpl.n	80085ec <_vfiprintf_r+0x3c>
 80085e8:	692b      	ldr	r3, [r5, #16]
 80085ea:	b9eb      	cbnz	r3, 8008628 <_vfiprintf_r+0x78>
 80085ec:	4629      	mov	r1, r5
 80085ee:	4630      	mov	r0, r6
 80085f0:	f7ff fda4 	bl	800813c <__swsetup_r>
 80085f4:	b1c0      	cbz	r0, 8008628 <_vfiprintf_r+0x78>
 80085f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085f8:	07dc      	lsls	r4, r3, #31
 80085fa:	d50e      	bpl.n	800861a <_vfiprintf_r+0x6a>
 80085fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008600:	b01d      	add	sp, #116	; 0x74
 8008602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008606:	4b7b      	ldr	r3, [pc, #492]	; (80087f4 <_vfiprintf_r+0x244>)
 8008608:	429d      	cmp	r5, r3
 800860a:	d101      	bne.n	8008610 <_vfiprintf_r+0x60>
 800860c:	68b5      	ldr	r5, [r6, #8]
 800860e:	e7df      	b.n	80085d0 <_vfiprintf_r+0x20>
 8008610:	4b79      	ldr	r3, [pc, #484]	; (80087f8 <_vfiprintf_r+0x248>)
 8008612:	429d      	cmp	r5, r3
 8008614:	bf08      	it	eq
 8008616:	68f5      	ldreq	r5, [r6, #12]
 8008618:	e7da      	b.n	80085d0 <_vfiprintf_r+0x20>
 800861a:	89ab      	ldrh	r3, [r5, #12]
 800861c:	0598      	lsls	r0, r3, #22
 800861e:	d4ed      	bmi.n	80085fc <_vfiprintf_r+0x4c>
 8008620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008622:	f7ff fb3d 	bl	8007ca0 <__retarget_lock_release_recursive>
 8008626:	e7e9      	b.n	80085fc <_vfiprintf_r+0x4c>
 8008628:	2300      	movs	r3, #0
 800862a:	9309      	str	r3, [sp, #36]	; 0x24
 800862c:	2320      	movs	r3, #32
 800862e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008632:	f8cd 800c 	str.w	r8, [sp, #12]
 8008636:	2330      	movs	r3, #48	; 0x30
 8008638:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80087fc <_vfiprintf_r+0x24c>
 800863c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008640:	f04f 0901 	mov.w	r9, #1
 8008644:	4623      	mov	r3, r4
 8008646:	469a      	mov	sl, r3
 8008648:	f813 2b01 	ldrb.w	r2, [r3], #1
 800864c:	b10a      	cbz	r2, 8008652 <_vfiprintf_r+0xa2>
 800864e:	2a25      	cmp	r2, #37	; 0x25
 8008650:	d1f9      	bne.n	8008646 <_vfiprintf_r+0x96>
 8008652:	ebba 0b04 	subs.w	fp, sl, r4
 8008656:	d00b      	beq.n	8008670 <_vfiprintf_r+0xc0>
 8008658:	465b      	mov	r3, fp
 800865a:	4622      	mov	r2, r4
 800865c:	4629      	mov	r1, r5
 800865e:	4630      	mov	r0, r6
 8008660:	f7ff ff93 	bl	800858a <__sfputs_r>
 8008664:	3001      	adds	r0, #1
 8008666:	f000 80aa 	beq.w	80087be <_vfiprintf_r+0x20e>
 800866a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800866c:	445a      	add	r2, fp
 800866e:	9209      	str	r2, [sp, #36]	; 0x24
 8008670:	f89a 3000 	ldrb.w	r3, [sl]
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 80a2 	beq.w	80087be <_vfiprintf_r+0x20e>
 800867a:	2300      	movs	r3, #0
 800867c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008684:	f10a 0a01 	add.w	sl, sl, #1
 8008688:	9304      	str	r3, [sp, #16]
 800868a:	9307      	str	r3, [sp, #28]
 800868c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008690:	931a      	str	r3, [sp, #104]	; 0x68
 8008692:	4654      	mov	r4, sl
 8008694:	2205      	movs	r2, #5
 8008696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800869a:	4858      	ldr	r0, [pc, #352]	; (80087fc <_vfiprintf_r+0x24c>)
 800869c:	f7f7 fda0 	bl	80001e0 <memchr>
 80086a0:	9a04      	ldr	r2, [sp, #16]
 80086a2:	b9d8      	cbnz	r0, 80086dc <_vfiprintf_r+0x12c>
 80086a4:	06d1      	lsls	r1, r2, #27
 80086a6:	bf44      	itt	mi
 80086a8:	2320      	movmi	r3, #32
 80086aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086ae:	0713      	lsls	r3, r2, #28
 80086b0:	bf44      	itt	mi
 80086b2:	232b      	movmi	r3, #43	; 0x2b
 80086b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086b8:	f89a 3000 	ldrb.w	r3, [sl]
 80086bc:	2b2a      	cmp	r3, #42	; 0x2a
 80086be:	d015      	beq.n	80086ec <_vfiprintf_r+0x13c>
 80086c0:	9a07      	ldr	r2, [sp, #28]
 80086c2:	4654      	mov	r4, sl
 80086c4:	2000      	movs	r0, #0
 80086c6:	f04f 0c0a 	mov.w	ip, #10
 80086ca:	4621      	mov	r1, r4
 80086cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086d0:	3b30      	subs	r3, #48	; 0x30
 80086d2:	2b09      	cmp	r3, #9
 80086d4:	d94e      	bls.n	8008774 <_vfiprintf_r+0x1c4>
 80086d6:	b1b0      	cbz	r0, 8008706 <_vfiprintf_r+0x156>
 80086d8:	9207      	str	r2, [sp, #28]
 80086da:	e014      	b.n	8008706 <_vfiprintf_r+0x156>
 80086dc:	eba0 0308 	sub.w	r3, r0, r8
 80086e0:	fa09 f303 	lsl.w	r3, r9, r3
 80086e4:	4313      	orrs	r3, r2
 80086e6:	9304      	str	r3, [sp, #16]
 80086e8:	46a2      	mov	sl, r4
 80086ea:	e7d2      	b.n	8008692 <_vfiprintf_r+0xe2>
 80086ec:	9b03      	ldr	r3, [sp, #12]
 80086ee:	1d19      	adds	r1, r3, #4
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	9103      	str	r1, [sp, #12]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	bfbb      	ittet	lt
 80086f8:	425b      	neglt	r3, r3
 80086fa:	f042 0202 	orrlt.w	r2, r2, #2
 80086fe:	9307      	strge	r3, [sp, #28]
 8008700:	9307      	strlt	r3, [sp, #28]
 8008702:	bfb8      	it	lt
 8008704:	9204      	strlt	r2, [sp, #16]
 8008706:	7823      	ldrb	r3, [r4, #0]
 8008708:	2b2e      	cmp	r3, #46	; 0x2e
 800870a:	d10c      	bne.n	8008726 <_vfiprintf_r+0x176>
 800870c:	7863      	ldrb	r3, [r4, #1]
 800870e:	2b2a      	cmp	r3, #42	; 0x2a
 8008710:	d135      	bne.n	800877e <_vfiprintf_r+0x1ce>
 8008712:	9b03      	ldr	r3, [sp, #12]
 8008714:	1d1a      	adds	r2, r3, #4
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	9203      	str	r2, [sp, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	bfb8      	it	lt
 800871e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008722:	3402      	adds	r4, #2
 8008724:	9305      	str	r3, [sp, #20]
 8008726:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800880c <_vfiprintf_r+0x25c>
 800872a:	7821      	ldrb	r1, [r4, #0]
 800872c:	2203      	movs	r2, #3
 800872e:	4650      	mov	r0, sl
 8008730:	f7f7 fd56 	bl	80001e0 <memchr>
 8008734:	b140      	cbz	r0, 8008748 <_vfiprintf_r+0x198>
 8008736:	2340      	movs	r3, #64	; 0x40
 8008738:	eba0 000a 	sub.w	r0, r0, sl
 800873c:	fa03 f000 	lsl.w	r0, r3, r0
 8008740:	9b04      	ldr	r3, [sp, #16]
 8008742:	4303      	orrs	r3, r0
 8008744:	3401      	adds	r4, #1
 8008746:	9304      	str	r3, [sp, #16]
 8008748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800874c:	482c      	ldr	r0, [pc, #176]	; (8008800 <_vfiprintf_r+0x250>)
 800874e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008752:	2206      	movs	r2, #6
 8008754:	f7f7 fd44 	bl	80001e0 <memchr>
 8008758:	2800      	cmp	r0, #0
 800875a:	d03f      	beq.n	80087dc <_vfiprintf_r+0x22c>
 800875c:	4b29      	ldr	r3, [pc, #164]	; (8008804 <_vfiprintf_r+0x254>)
 800875e:	bb1b      	cbnz	r3, 80087a8 <_vfiprintf_r+0x1f8>
 8008760:	9b03      	ldr	r3, [sp, #12]
 8008762:	3307      	adds	r3, #7
 8008764:	f023 0307 	bic.w	r3, r3, #7
 8008768:	3308      	adds	r3, #8
 800876a:	9303      	str	r3, [sp, #12]
 800876c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800876e:	443b      	add	r3, r7
 8008770:	9309      	str	r3, [sp, #36]	; 0x24
 8008772:	e767      	b.n	8008644 <_vfiprintf_r+0x94>
 8008774:	fb0c 3202 	mla	r2, ip, r2, r3
 8008778:	460c      	mov	r4, r1
 800877a:	2001      	movs	r0, #1
 800877c:	e7a5      	b.n	80086ca <_vfiprintf_r+0x11a>
 800877e:	2300      	movs	r3, #0
 8008780:	3401      	adds	r4, #1
 8008782:	9305      	str	r3, [sp, #20]
 8008784:	4619      	mov	r1, r3
 8008786:	f04f 0c0a 	mov.w	ip, #10
 800878a:	4620      	mov	r0, r4
 800878c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008790:	3a30      	subs	r2, #48	; 0x30
 8008792:	2a09      	cmp	r2, #9
 8008794:	d903      	bls.n	800879e <_vfiprintf_r+0x1ee>
 8008796:	2b00      	cmp	r3, #0
 8008798:	d0c5      	beq.n	8008726 <_vfiprintf_r+0x176>
 800879a:	9105      	str	r1, [sp, #20]
 800879c:	e7c3      	b.n	8008726 <_vfiprintf_r+0x176>
 800879e:	fb0c 2101 	mla	r1, ip, r1, r2
 80087a2:	4604      	mov	r4, r0
 80087a4:	2301      	movs	r3, #1
 80087a6:	e7f0      	b.n	800878a <_vfiprintf_r+0x1da>
 80087a8:	ab03      	add	r3, sp, #12
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	462a      	mov	r2, r5
 80087ae:	4b16      	ldr	r3, [pc, #88]	; (8008808 <_vfiprintf_r+0x258>)
 80087b0:	a904      	add	r1, sp, #16
 80087b2:	4630      	mov	r0, r6
 80087b4:	f3af 8000 	nop.w
 80087b8:	4607      	mov	r7, r0
 80087ba:	1c78      	adds	r0, r7, #1
 80087bc:	d1d6      	bne.n	800876c <_vfiprintf_r+0x1bc>
 80087be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087c0:	07d9      	lsls	r1, r3, #31
 80087c2:	d405      	bmi.n	80087d0 <_vfiprintf_r+0x220>
 80087c4:	89ab      	ldrh	r3, [r5, #12]
 80087c6:	059a      	lsls	r2, r3, #22
 80087c8:	d402      	bmi.n	80087d0 <_vfiprintf_r+0x220>
 80087ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087cc:	f7ff fa68 	bl	8007ca0 <__retarget_lock_release_recursive>
 80087d0:	89ab      	ldrh	r3, [r5, #12]
 80087d2:	065b      	lsls	r3, r3, #25
 80087d4:	f53f af12 	bmi.w	80085fc <_vfiprintf_r+0x4c>
 80087d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087da:	e711      	b.n	8008600 <_vfiprintf_r+0x50>
 80087dc:	ab03      	add	r3, sp, #12
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	462a      	mov	r2, r5
 80087e2:	4b09      	ldr	r3, [pc, #36]	; (8008808 <_vfiprintf_r+0x258>)
 80087e4:	a904      	add	r1, sp, #16
 80087e6:	4630      	mov	r0, r6
 80087e8:	f000 f880 	bl	80088ec <_printf_i>
 80087ec:	e7e4      	b.n	80087b8 <_vfiprintf_r+0x208>
 80087ee:	bf00      	nop
 80087f0:	08008eac 	.word	0x08008eac
 80087f4:	08008ecc 	.word	0x08008ecc
 80087f8:	08008e8c 	.word	0x08008e8c
 80087fc:	08008ef0 	.word	0x08008ef0
 8008800:	08008efa 	.word	0x08008efa
 8008804:	00000000 	.word	0x00000000
 8008808:	0800858b 	.word	0x0800858b
 800880c:	08008ef6 	.word	0x08008ef6

08008810 <_printf_common>:
 8008810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008814:	4616      	mov	r6, r2
 8008816:	4699      	mov	r9, r3
 8008818:	688a      	ldr	r2, [r1, #8]
 800881a:	690b      	ldr	r3, [r1, #16]
 800881c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008820:	4293      	cmp	r3, r2
 8008822:	bfb8      	it	lt
 8008824:	4613      	movlt	r3, r2
 8008826:	6033      	str	r3, [r6, #0]
 8008828:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800882c:	4607      	mov	r7, r0
 800882e:	460c      	mov	r4, r1
 8008830:	b10a      	cbz	r2, 8008836 <_printf_common+0x26>
 8008832:	3301      	adds	r3, #1
 8008834:	6033      	str	r3, [r6, #0]
 8008836:	6823      	ldr	r3, [r4, #0]
 8008838:	0699      	lsls	r1, r3, #26
 800883a:	bf42      	ittt	mi
 800883c:	6833      	ldrmi	r3, [r6, #0]
 800883e:	3302      	addmi	r3, #2
 8008840:	6033      	strmi	r3, [r6, #0]
 8008842:	6825      	ldr	r5, [r4, #0]
 8008844:	f015 0506 	ands.w	r5, r5, #6
 8008848:	d106      	bne.n	8008858 <_printf_common+0x48>
 800884a:	f104 0a19 	add.w	sl, r4, #25
 800884e:	68e3      	ldr	r3, [r4, #12]
 8008850:	6832      	ldr	r2, [r6, #0]
 8008852:	1a9b      	subs	r3, r3, r2
 8008854:	42ab      	cmp	r3, r5
 8008856:	dc26      	bgt.n	80088a6 <_printf_common+0x96>
 8008858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800885c:	1e13      	subs	r3, r2, #0
 800885e:	6822      	ldr	r2, [r4, #0]
 8008860:	bf18      	it	ne
 8008862:	2301      	movne	r3, #1
 8008864:	0692      	lsls	r2, r2, #26
 8008866:	d42b      	bmi.n	80088c0 <_printf_common+0xb0>
 8008868:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800886c:	4649      	mov	r1, r9
 800886e:	4638      	mov	r0, r7
 8008870:	47c0      	blx	r8
 8008872:	3001      	adds	r0, #1
 8008874:	d01e      	beq.n	80088b4 <_printf_common+0xa4>
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	68e5      	ldr	r5, [r4, #12]
 800887a:	6832      	ldr	r2, [r6, #0]
 800887c:	f003 0306 	and.w	r3, r3, #6
 8008880:	2b04      	cmp	r3, #4
 8008882:	bf08      	it	eq
 8008884:	1aad      	subeq	r5, r5, r2
 8008886:	68a3      	ldr	r3, [r4, #8]
 8008888:	6922      	ldr	r2, [r4, #16]
 800888a:	bf0c      	ite	eq
 800888c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008890:	2500      	movne	r5, #0
 8008892:	4293      	cmp	r3, r2
 8008894:	bfc4      	itt	gt
 8008896:	1a9b      	subgt	r3, r3, r2
 8008898:	18ed      	addgt	r5, r5, r3
 800889a:	2600      	movs	r6, #0
 800889c:	341a      	adds	r4, #26
 800889e:	42b5      	cmp	r5, r6
 80088a0:	d11a      	bne.n	80088d8 <_printf_common+0xc8>
 80088a2:	2000      	movs	r0, #0
 80088a4:	e008      	b.n	80088b8 <_printf_common+0xa8>
 80088a6:	2301      	movs	r3, #1
 80088a8:	4652      	mov	r2, sl
 80088aa:	4649      	mov	r1, r9
 80088ac:	4638      	mov	r0, r7
 80088ae:	47c0      	blx	r8
 80088b0:	3001      	adds	r0, #1
 80088b2:	d103      	bne.n	80088bc <_printf_common+0xac>
 80088b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088bc:	3501      	adds	r5, #1
 80088be:	e7c6      	b.n	800884e <_printf_common+0x3e>
 80088c0:	18e1      	adds	r1, r4, r3
 80088c2:	1c5a      	adds	r2, r3, #1
 80088c4:	2030      	movs	r0, #48	; 0x30
 80088c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088ca:	4422      	add	r2, r4
 80088cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088d4:	3302      	adds	r3, #2
 80088d6:	e7c7      	b.n	8008868 <_printf_common+0x58>
 80088d8:	2301      	movs	r3, #1
 80088da:	4622      	mov	r2, r4
 80088dc:	4649      	mov	r1, r9
 80088de:	4638      	mov	r0, r7
 80088e0:	47c0      	blx	r8
 80088e2:	3001      	adds	r0, #1
 80088e4:	d0e6      	beq.n	80088b4 <_printf_common+0xa4>
 80088e6:	3601      	adds	r6, #1
 80088e8:	e7d9      	b.n	800889e <_printf_common+0x8e>
	...

080088ec <_printf_i>:
 80088ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088f0:	7e0f      	ldrb	r7, [r1, #24]
 80088f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088f4:	2f78      	cmp	r7, #120	; 0x78
 80088f6:	4691      	mov	r9, r2
 80088f8:	4680      	mov	r8, r0
 80088fa:	460c      	mov	r4, r1
 80088fc:	469a      	mov	sl, r3
 80088fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008902:	d807      	bhi.n	8008914 <_printf_i+0x28>
 8008904:	2f62      	cmp	r7, #98	; 0x62
 8008906:	d80a      	bhi.n	800891e <_printf_i+0x32>
 8008908:	2f00      	cmp	r7, #0
 800890a:	f000 80d8 	beq.w	8008abe <_printf_i+0x1d2>
 800890e:	2f58      	cmp	r7, #88	; 0x58
 8008910:	f000 80a3 	beq.w	8008a5a <_printf_i+0x16e>
 8008914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008918:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800891c:	e03a      	b.n	8008994 <_printf_i+0xa8>
 800891e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008922:	2b15      	cmp	r3, #21
 8008924:	d8f6      	bhi.n	8008914 <_printf_i+0x28>
 8008926:	a101      	add	r1, pc, #4	; (adr r1, 800892c <_printf_i+0x40>)
 8008928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800892c:	08008985 	.word	0x08008985
 8008930:	08008999 	.word	0x08008999
 8008934:	08008915 	.word	0x08008915
 8008938:	08008915 	.word	0x08008915
 800893c:	08008915 	.word	0x08008915
 8008940:	08008915 	.word	0x08008915
 8008944:	08008999 	.word	0x08008999
 8008948:	08008915 	.word	0x08008915
 800894c:	08008915 	.word	0x08008915
 8008950:	08008915 	.word	0x08008915
 8008954:	08008915 	.word	0x08008915
 8008958:	08008aa5 	.word	0x08008aa5
 800895c:	080089c9 	.word	0x080089c9
 8008960:	08008a87 	.word	0x08008a87
 8008964:	08008915 	.word	0x08008915
 8008968:	08008915 	.word	0x08008915
 800896c:	08008ac7 	.word	0x08008ac7
 8008970:	08008915 	.word	0x08008915
 8008974:	080089c9 	.word	0x080089c9
 8008978:	08008915 	.word	0x08008915
 800897c:	08008915 	.word	0x08008915
 8008980:	08008a8f 	.word	0x08008a8f
 8008984:	682b      	ldr	r3, [r5, #0]
 8008986:	1d1a      	adds	r2, r3, #4
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	602a      	str	r2, [r5, #0]
 800898c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008994:	2301      	movs	r3, #1
 8008996:	e0a3      	b.n	8008ae0 <_printf_i+0x1f4>
 8008998:	6820      	ldr	r0, [r4, #0]
 800899a:	6829      	ldr	r1, [r5, #0]
 800899c:	0606      	lsls	r6, r0, #24
 800899e:	f101 0304 	add.w	r3, r1, #4
 80089a2:	d50a      	bpl.n	80089ba <_printf_i+0xce>
 80089a4:	680e      	ldr	r6, [r1, #0]
 80089a6:	602b      	str	r3, [r5, #0]
 80089a8:	2e00      	cmp	r6, #0
 80089aa:	da03      	bge.n	80089b4 <_printf_i+0xc8>
 80089ac:	232d      	movs	r3, #45	; 0x2d
 80089ae:	4276      	negs	r6, r6
 80089b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089b4:	485e      	ldr	r0, [pc, #376]	; (8008b30 <_printf_i+0x244>)
 80089b6:	230a      	movs	r3, #10
 80089b8:	e019      	b.n	80089ee <_printf_i+0x102>
 80089ba:	680e      	ldr	r6, [r1, #0]
 80089bc:	602b      	str	r3, [r5, #0]
 80089be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089c2:	bf18      	it	ne
 80089c4:	b236      	sxthne	r6, r6
 80089c6:	e7ef      	b.n	80089a8 <_printf_i+0xbc>
 80089c8:	682b      	ldr	r3, [r5, #0]
 80089ca:	6820      	ldr	r0, [r4, #0]
 80089cc:	1d19      	adds	r1, r3, #4
 80089ce:	6029      	str	r1, [r5, #0]
 80089d0:	0601      	lsls	r1, r0, #24
 80089d2:	d501      	bpl.n	80089d8 <_printf_i+0xec>
 80089d4:	681e      	ldr	r6, [r3, #0]
 80089d6:	e002      	b.n	80089de <_printf_i+0xf2>
 80089d8:	0646      	lsls	r6, r0, #25
 80089da:	d5fb      	bpl.n	80089d4 <_printf_i+0xe8>
 80089dc:	881e      	ldrh	r6, [r3, #0]
 80089de:	4854      	ldr	r0, [pc, #336]	; (8008b30 <_printf_i+0x244>)
 80089e0:	2f6f      	cmp	r7, #111	; 0x6f
 80089e2:	bf0c      	ite	eq
 80089e4:	2308      	moveq	r3, #8
 80089e6:	230a      	movne	r3, #10
 80089e8:	2100      	movs	r1, #0
 80089ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089ee:	6865      	ldr	r5, [r4, #4]
 80089f0:	60a5      	str	r5, [r4, #8]
 80089f2:	2d00      	cmp	r5, #0
 80089f4:	bfa2      	ittt	ge
 80089f6:	6821      	ldrge	r1, [r4, #0]
 80089f8:	f021 0104 	bicge.w	r1, r1, #4
 80089fc:	6021      	strge	r1, [r4, #0]
 80089fe:	b90e      	cbnz	r6, 8008a04 <_printf_i+0x118>
 8008a00:	2d00      	cmp	r5, #0
 8008a02:	d04d      	beq.n	8008aa0 <_printf_i+0x1b4>
 8008a04:	4615      	mov	r5, r2
 8008a06:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a0a:	fb03 6711 	mls	r7, r3, r1, r6
 8008a0e:	5dc7      	ldrb	r7, [r0, r7]
 8008a10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a14:	4637      	mov	r7, r6
 8008a16:	42bb      	cmp	r3, r7
 8008a18:	460e      	mov	r6, r1
 8008a1a:	d9f4      	bls.n	8008a06 <_printf_i+0x11a>
 8008a1c:	2b08      	cmp	r3, #8
 8008a1e:	d10b      	bne.n	8008a38 <_printf_i+0x14c>
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	07de      	lsls	r6, r3, #31
 8008a24:	d508      	bpl.n	8008a38 <_printf_i+0x14c>
 8008a26:	6923      	ldr	r3, [r4, #16]
 8008a28:	6861      	ldr	r1, [r4, #4]
 8008a2a:	4299      	cmp	r1, r3
 8008a2c:	bfde      	ittt	le
 8008a2e:	2330      	movle	r3, #48	; 0x30
 8008a30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a34:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008a38:	1b52      	subs	r2, r2, r5
 8008a3a:	6122      	str	r2, [r4, #16]
 8008a3c:	f8cd a000 	str.w	sl, [sp]
 8008a40:	464b      	mov	r3, r9
 8008a42:	aa03      	add	r2, sp, #12
 8008a44:	4621      	mov	r1, r4
 8008a46:	4640      	mov	r0, r8
 8008a48:	f7ff fee2 	bl	8008810 <_printf_common>
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	d14c      	bne.n	8008aea <_printf_i+0x1fe>
 8008a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a54:	b004      	add	sp, #16
 8008a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a5a:	4835      	ldr	r0, [pc, #212]	; (8008b30 <_printf_i+0x244>)
 8008a5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a60:	6829      	ldr	r1, [r5, #0]
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a68:	6029      	str	r1, [r5, #0]
 8008a6a:	061d      	lsls	r5, r3, #24
 8008a6c:	d514      	bpl.n	8008a98 <_printf_i+0x1ac>
 8008a6e:	07df      	lsls	r7, r3, #31
 8008a70:	bf44      	itt	mi
 8008a72:	f043 0320 	orrmi.w	r3, r3, #32
 8008a76:	6023      	strmi	r3, [r4, #0]
 8008a78:	b91e      	cbnz	r6, 8008a82 <_printf_i+0x196>
 8008a7a:	6823      	ldr	r3, [r4, #0]
 8008a7c:	f023 0320 	bic.w	r3, r3, #32
 8008a80:	6023      	str	r3, [r4, #0]
 8008a82:	2310      	movs	r3, #16
 8008a84:	e7b0      	b.n	80089e8 <_printf_i+0xfc>
 8008a86:	6823      	ldr	r3, [r4, #0]
 8008a88:	f043 0320 	orr.w	r3, r3, #32
 8008a8c:	6023      	str	r3, [r4, #0]
 8008a8e:	2378      	movs	r3, #120	; 0x78
 8008a90:	4828      	ldr	r0, [pc, #160]	; (8008b34 <_printf_i+0x248>)
 8008a92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a96:	e7e3      	b.n	8008a60 <_printf_i+0x174>
 8008a98:	0659      	lsls	r1, r3, #25
 8008a9a:	bf48      	it	mi
 8008a9c:	b2b6      	uxthmi	r6, r6
 8008a9e:	e7e6      	b.n	8008a6e <_printf_i+0x182>
 8008aa0:	4615      	mov	r5, r2
 8008aa2:	e7bb      	b.n	8008a1c <_printf_i+0x130>
 8008aa4:	682b      	ldr	r3, [r5, #0]
 8008aa6:	6826      	ldr	r6, [r4, #0]
 8008aa8:	6961      	ldr	r1, [r4, #20]
 8008aaa:	1d18      	adds	r0, r3, #4
 8008aac:	6028      	str	r0, [r5, #0]
 8008aae:	0635      	lsls	r5, r6, #24
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	d501      	bpl.n	8008ab8 <_printf_i+0x1cc>
 8008ab4:	6019      	str	r1, [r3, #0]
 8008ab6:	e002      	b.n	8008abe <_printf_i+0x1d2>
 8008ab8:	0670      	lsls	r0, r6, #25
 8008aba:	d5fb      	bpl.n	8008ab4 <_printf_i+0x1c8>
 8008abc:	8019      	strh	r1, [r3, #0]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	6123      	str	r3, [r4, #16]
 8008ac2:	4615      	mov	r5, r2
 8008ac4:	e7ba      	b.n	8008a3c <_printf_i+0x150>
 8008ac6:	682b      	ldr	r3, [r5, #0]
 8008ac8:	1d1a      	adds	r2, r3, #4
 8008aca:	602a      	str	r2, [r5, #0]
 8008acc:	681d      	ldr	r5, [r3, #0]
 8008ace:	6862      	ldr	r2, [r4, #4]
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	f7f7 fb84 	bl	80001e0 <memchr>
 8008ad8:	b108      	cbz	r0, 8008ade <_printf_i+0x1f2>
 8008ada:	1b40      	subs	r0, r0, r5
 8008adc:	6060      	str	r0, [r4, #4]
 8008ade:	6863      	ldr	r3, [r4, #4]
 8008ae0:	6123      	str	r3, [r4, #16]
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ae8:	e7a8      	b.n	8008a3c <_printf_i+0x150>
 8008aea:	6923      	ldr	r3, [r4, #16]
 8008aec:	462a      	mov	r2, r5
 8008aee:	4649      	mov	r1, r9
 8008af0:	4640      	mov	r0, r8
 8008af2:	47d0      	blx	sl
 8008af4:	3001      	adds	r0, #1
 8008af6:	d0ab      	beq.n	8008a50 <_printf_i+0x164>
 8008af8:	6823      	ldr	r3, [r4, #0]
 8008afa:	079b      	lsls	r3, r3, #30
 8008afc:	d413      	bmi.n	8008b26 <_printf_i+0x23a>
 8008afe:	68e0      	ldr	r0, [r4, #12]
 8008b00:	9b03      	ldr	r3, [sp, #12]
 8008b02:	4298      	cmp	r0, r3
 8008b04:	bfb8      	it	lt
 8008b06:	4618      	movlt	r0, r3
 8008b08:	e7a4      	b.n	8008a54 <_printf_i+0x168>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	4632      	mov	r2, r6
 8008b0e:	4649      	mov	r1, r9
 8008b10:	4640      	mov	r0, r8
 8008b12:	47d0      	blx	sl
 8008b14:	3001      	adds	r0, #1
 8008b16:	d09b      	beq.n	8008a50 <_printf_i+0x164>
 8008b18:	3501      	adds	r5, #1
 8008b1a:	68e3      	ldr	r3, [r4, #12]
 8008b1c:	9903      	ldr	r1, [sp, #12]
 8008b1e:	1a5b      	subs	r3, r3, r1
 8008b20:	42ab      	cmp	r3, r5
 8008b22:	dcf2      	bgt.n	8008b0a <_printf_i+0x21e>
 8008b24:	e7eb      	b.n	8008afe <_printf_i+0x212>
 8008b26:	2500      	movs	r5, #0
 8008b28:	f104 0619 	add.w	r6, r4, #25
 8008b2c:	e7f5      	b.n	8008b1a <_printf_i+0x22e>
 8008b2e:	bf00      	nop
 8008b30:	08008f01 	.word	0x08008f01
 8008b34:	08008f12 	.word	0x08008f12

08008b38 <_read_r>:
 8008b38:	b538      	push	{r3, r4, r5, lr}
 8008b3a:	4d07      	ldr	r5, [pc, #28]	; (8008b58 <_read_r+0x20>)
 8008b3c:	4604      	mov	r4, r0
 8008b3e:	4608      	mov	r0, r1
 8008b40:	4611      	mov	r1, r2
 8008b42:	2200      	movs	r2, #0
 8008b44:	602a      	str	r2, [r5, #0]
 8008b46:	461a      	mov	r2, r3
 8008b48:	f7f8 fa38 	bl	8000fbc <_read>
 8008b4c:	1c43      	adds	r3, r0, #1
 8008b4e:	d102      	bne.n	8008b56 <_read_r+0x1e>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	b103      	cbz	r3, 8008b56 <_read_r+0x1e>
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	bd38      	pop	{r3, r4, r5, pc}
 8008b58:	20004338 	.word	0x20004338

08008b5c <_fstat_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	4d07      	ldr	r5, [pc, #28]	; (8008b7c <_fstat_r+0x20>)
 8008b60:	2300      	movs	r3, #0
 8008b62:	4604      	mov	r4, r0
 8008b64:	4608      	mov	r0, r1
 8008b66:	4611      	mov	r1, r2
 8008b68:	602b      	str	r3, [r5, #0]
 8008b6a:	f7f8 fa6c 	bl	8001046 <_fstat>
 8008b6e:	1c43      	adds	r3, r0, #1
 8008b70:	d102      	bne.n	8008b78 <_fstat_r+0x1c>
 8008b72:	682b      	ldr	r3, [r5, #0]
 8008b74:	b103      	cbz	r3, 8008b78 <_fstat_r+0x1c>
 8008b76:	6023      	str	r3, [r4, #0]
 8008b78:	bd38      	pop	{r3, r4, r5, pc}
 8008b7a:	bf00      	nop
 8008b7c:	20004338 	.word	0x20004338

08008b80 <_isatty_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	4d06      	ldr	r5, [pc, #24]	; (8008b9c <_isatty_r+0x1c>)
 8008b84:	2300      	movs	r3, #0
 8008b86:	4604      	mov	r4, r0
 8008b88:	4608      	mov	r0, r1
 8008b8a:	602b      	str	r3, [r5, #0]
 8008b8c:	f7f8 fa6b 	bl	8001066 <_isatty>
 8008b90:	1c43      	adds	r3, r0, #1
 8008b92:	d102      	bne.n	8008b9a <_isatty_r+0x1a>
 8008b94:	682b      	ldr	r3, [r5, #0]
 8008b96:	b103      	cbz	r3, 8008b9a <_isatty_r+0x1a>
 8008b98:	6023      	str	r3, [r4, #0]
 8008b9a:	bd38      	pop	{r3, r4, r5, pc}
 8008b9c:	20004338 	.word	0x20004338

08008ba0 <_init>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	bf00      	nop
 8008ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba6:	bc08      	pop	{r3}
 8008ba8:	469e      	mov	lr, r3
 8008baa:	4770      	bx	lr

08008bac <_fini>:
 8008bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bae:	bf00      	nop
 8008bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bb2:	bc08      	pop	{r3}
 8008bb4:	469e      	mov	lr, r3
 8008bb6:	4770      	bx	lr
